commit ea8608d401def015e83c2c32ed6c32996abb3ed2
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Dec 18 09:19:29 2019 +0530

    cxgb4: fix refcount init for TC-MQPRIO offload
    
    Properly initialize refcount to 1 when hardware queue arrays for
    TC-MQPRIO offload have been freshly allocated. Otherwise, following
    warning is observed. Also fix up error path to only free hardware
    queue arrays when refcount reaches 0.
    
    [  130.075342] ------------[ cut here ]------------
    [  130.075343] refcount_t: addition on 0; use-after-free.
    [  130.075355] WARNING: CPU: 0 PID: 10870 at lib/refcount.c:25
    refcount_warn_saturate+0xe1/0x100
    [  130.075356] Modules linked in: sch_mqprio iptable_nat ib_iser
    libiscsi scsi_transport_iscsi ib_ipoib rdma_ucm ib_umad iw_cxgb4 libcxgb
    ib_uverbs x86_pkg_temp_thermal cxgb4 igb
    [  130.075361] CPU: 0 PID: 10870 Comm: tc Kdump: loaded Not tainted
    5.5.0-rc1+ #11
    [  130.075362] Hardware name: Supermicro
    X9SRE/X9SRE-3F/X9SRi/X9SRi-3F/X9SRE/X9SRE-3F/X9SRi/X9SRi-3F, BIOS 3.2
    01/16/2015
    [  130.075363] RIP: 0010:refcount_warn_saturate+0xe1/0x100
    [  130.075364] Code: e8 14 41 c1 ff 0f 0b c3 80 3d 44 f4 10 01 00 0f 85
    63 ff ff ff 48 c7 c7 38 9f 83 8c 31 c0 c6 05 2e f4 10 01 01 e8 ef 40 c1
    ff <0f> 0b c3 48 c7 c7 10 9f 83 8c 31 c0 c6 05 17 f4 10 01 01 e8 d7 40
    [  130.075365] RSP: 0018:ffffa48d00c0b768 EFLAGS: 00010286
    [  130.075366] RAX: 0000000000000000 RBX: 0000000000000008 RCX:
    0000000000000001
    [  130.075366] RDX: 0000000000000001 RSI: 0000000000000096 RDI:
    ffff8a2e9fa187d0
    [  130.075367] RBP: ffff8a2e93890000 R08: 0000000000000398 R09:
    000000000000003c
    [  130.075367] R10: 00000000000142a0 R11: 0000000000000397 R12:
    ffffa48d00c0b848
    [  130.075368] R13: ffff8a2e94746498 R14: ffff8a2e966f7000 R15:
    0000000000000031
    [  130.075368] FS:  00007f689015f840(0000) GS:ffff8a2e9fa00000(0000)
    knlGS:0000000000000000
    [  130.075369] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  130.075369] CR2: 00000000006762a0 CR3: 00000007cf164005 CR4:
    00000000001606f0
    [  130.075370] Call Trace:
    [  130.075377]  cxgb4_setup_tc_mqprio+0xbee/0xc30 [cxgb4]
    [  130.075382]  ? cxgb4_ethofld_restart+0x50/0x50 [cxgb4]
    [  130.075384]  ? pfifo_fast_init+0x7e/0xf0
    [  130.075386]  mqprio_init+0x5f4/0x630 [sch_mqprio]
    [  130.075389]  qdisc_create+0x1bf/0x4a0
    [  130.075390]  tc_modify_qdisc+0x1ff/0x770
    [  130.075392]  rtnetlink_rcv_msg+0x28b/0x350
    [  130.075394]  ? rtnl_calcit.isra.32+0x110/0x110
    [  130.075395]  netlink_rcv_skb+0xc6/0x100
    [  130.075396]  netlink_unicast+0x1db/0x330
    [  130.075397]  netlink_sendmsg+0x2f5/0x460
    [  130.075399]  ? _copy_from_user+0x2e/0x60
    [  130.075400]  sock_sendmsg+0x59/0x70
    [  130.075401]  ____sys_sendmsg+0x1f0/0x230
    [  130.075402]  ? copy_msghdr_from_user+0xd7/0x140
    [  130.075403]  ___sys_sendmsg+0x77/0xb0
    [  130.075404]  ? ___sys_recvmsg+0x84/0xb0
    [  130.075406]  ? __handle_mm_fault+0x377/0xaf0
    [  130.075407]  __sys_sendmsg+0x53/0xa0
    [  130.075409]  do_syscall_64+0x44/0x130
    [  130.075412]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  130.075413] RIP: 0033:0x7f688f13af10
    [  130.075414] Code: c3 48 8b 05 82 6f 2c 00 f7 db 64 89 18 48 83 cb ff
    eb dd 0f 1f 80 00 00 00 00 83 3d 8d d0 2c 00 00 75 10 b8 2e 00 00 00 0f
    05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 ae cc 00 00 48 89 04 24
    [  130.075414] RSP: 002b:00007ffe6c7d9988 EFLAGS: 00000246 ORIG_RAX:
    000000000000002e
    [  130.075415] RAX: ffffffffffffffda RBX: 00000000006703a0 RCX:
    00007f688f13af10
    [  130.075415] RDX: 0000000000000000 RSI: 00007ffe6c7d99f0 RDI:
    0000000000000003
    [  130.075416] RBP: 000000005df38312 R08: 0000000000000002 R09:
    0000000000008000
    [  130.075416] R10: 00007ffe6c7d93e0 R11: 0000000000000246 R12:
    0000000000000000
    [  130.075417] R13: 00007ffe6c7e9c50 R14: 0000000000000001 R15:
    000000000067c600
    [  130.075418] ---[ end trace 8fbb3bf36a8671db ]---
    
    v2:
    - Move the refcount_set() closer to where the hardware queue arrays
      are being allocated.
    - Fix up error path to only free hardware queue arrays when refcount
      reaches 0.
    
    Fixes: 2d0cb84dd973 ("cxgb4: add ETHOFLD hardware queue support")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4c80ba392bf603d468ea827d902f8e7b2505fbf4
Author: Eric Auger <eric.auger@redhat.com>
Date:   Tue Nov 26 18:54:13 2019 +0100

    iommu: fix KASAN use-after-free in iommu_insert_resv_region
    
    In case the new region gets merged into another one, the nr list node is
    freed.  Checking its type while completing the merge algorithm leads to
    a use-after-free.  Use new->type instead.
    
    Fixes: 4dbd258ff63e ("iommu: Revisit iommu_insert_resv_region() implementation")
    Signed-off-by: Eric Auger <eric.auger@redhat.com>
    Reported-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Cc: Stable <stable@vger.kernel.org> #v5.3+
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 94dc550a5062030569d4aa76e10e50c8fc001930
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Dec 11 08:23:34 2019 +0000

    gtp: fix an use-after-free in ipv4_pdp_find()
    
    ipv4_pdp_find() is called in TX packet path of GTP.
    ipv4_pdp_find() internally uses gtp->tid_hash to lookup pdp context.
    In the current code, gtp->tid_hash and gtp->addr_hash are freed by
    ->dellink(), which is gtp_dellink().
    But gtp_dellink() would be called while packets are processing.
    So, gtp_dellink() should not free gtp->tid_hash and gtp->addr_hash.
    Instead, dev->priv_destructor() would be used because this callback
    is called after all packet processing safely.
    
    Test commands:
        ip link add veth1 type veth peer name veth2
        ip a a 172.0.0.1/24 dev veth1
        ip link set veth1 up
        ip a a 172.99.0.1/32 dev lo
    
        gtp-link add gtp1 &
    
        gtp-tunnel add gtp1 v1 200 100 172.99.0.2 172.0.0.2
        ip r a  172.99.0.2/32 dev gtp1
        ip link set gtp1 mtu 1500
    
        ip netns add ns2
        ip link set veth2 netns ns2
        ip netns exec ns2 ip a a 172.0.0.2/24 dev veth2
        ip netns exec ns2 ip link set veth2 up
        ip netns exec ns2 ip a a 172.99.0.2/32 dev lo
        ip netns exec ns2 ip link set lo up
    
        ip netns exec ns2 gtp-link add gtp2 &
        ip netns exec ns2 gtp-tunnel add gtp2 v1 100 200 172.99.0.1 172.0.0.1
        ip netns exec ns2 ip r a 172.99.0.1/32 dev gtp2
        ip netns exec ns2 ip link set gtp2 mtu 1500
    
        hping3 172.99.0.2 -2 --flood &
        ip link del gtp1
    
    Splat looks like:
    [   72.568081][ T1195] BUG: KASAN: use-after-free in ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.568916][ T1195] Read of size 8 at addr ffff8880b9a35d28 by task hping3/1195
    [   72.569631][ T1195]
    [   72.569861][ T1195] CPU: 2 PID: 1195 Comm: hping3 Not tainted 5.5.0-rc1 #199
    [   72.570547][ T1195] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   72.571438][ T1195] Call Trace:
    [   72.571764][ T1195]  dump_stack+0x96/0xdb
    [   72.572171][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.572761][ T1195]  print_address_description.constprop.5+0x1be/0x360
    [   72.573400][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.573971][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.574544][ T1195]  __kasan_report+0x12a/0x16f
    [   72.575014][ T1195]  ? ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.575593][ T1195]  kasan_report+0xe/0x20
    [   72.576004][ T1195]  ipv4_pdp_find.isra.12+0x130/0x170 [gtp]
    [   72.576577][ T1195]  gtp_build_skb_ip4+0x199/0x1420 [gtp]
    [ ... ]
    [   72.647671][ T1195] BUG: unable to handle page fault for address: ffff8880b9a35d28
    [   72.648512][ T1195] #PF: supervisor read access in kernel mode
    [   72.649158][ T1195] #PF: error_code(0x0000) - not-present page
    [   72.649849][ T1195] PGD a6c01067 P4D a6c01067 PUD 11fb07067 PMD 11f939067 PTE 800fffff465ca060
    [   72.652958][ T1195] Oops: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   72.653834][ T1195] CPU: 2 PID: 1195 Comm: hping3 Tainted: G    B             5.5.0-rc1 #199
    [   72.668062][ T1195] RIP: 0010:ipv4_pdp_find.isra.12+0x86/0x170 [gtp]
    [ ... ]
    [   72.679168][ T1195] Call Trace:
    [   72.679603][ T1195]  gtp_build_skb_ip4+0x199/0x1420 [gtp]
    [   72.681915][ T1195]  ? ipv4_pdp_find.isra.12+0x170/0x170 [gtp]
    [   72.682513][ T1195]  ? lock_acquire+0x164/0x3b0
    [   72.682966][ T1195]  ? gtp_dev_xmit+0x35e/0x890 [gtp]
    [   72.683481][ T1195]  gtp_dev_xmit+0x3c2/0x890 [gtp]
    [ ... ]
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commits)
      usb: dwc3: pci: add ID for the Intel Comet Lake -H variant
      xhci: make sure interrupts are restored to correct state
      xhci: handle some XHCI_TRUST_TX_LENGTH quirks cases as default behaviour.
      xhci: Increase STS_HALT timeout in xhci_suspend()
      usb: xhci: only set D3hot for pci device
      xhci: fix USB3 device initiated resume race with roothub autosuspend
      xhci: Fix memory leak in xhci_add_in_port()
      USB: Fix incorrect DMA allocations for local memory pool drivers
      usb: gadget: fix wrong endpoint desc
      usb: dwc3: ep0: Clear started flag on completion
      usb: dwc3: gadget: Clear started flag for non-IOC
      usb: dwc3: gadget: Fix logical condition
      USB: atm: ueagle-atm: add missing endpoint check
      USB: adutux: fix interface sanity check
      USB: idmouse: fix interface sanity checks
      USB: serial: io_edgeport: fix epic endpoint lookup
      usb: mon: Fix a deadlock in usbmon between mmap and read
      usb: common: usb-conn-gpio: Don't log an error on probe deferral
      usb: core: urb: fix URB structure initialization function
      usb: typec: fix use after free in typec_register_port()
      ...

commit 6609fee8897ac475378388238456c84298bff802
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Dec 6 12:27:39 2019 +0000

    Btrfs: fix removal logic of the tree mod log that leads to use-after-free issues
    
    When a tree mod log user no longer needs to use the tree it calls
    btrfs_put_tree_mod_seq() to remove itself from the list of users and
    delete all no longer used elements of the tree's red black tree, which
    should be all elements with a sequence number less then our equals to
    the caller's sequence number. However the logic is broken because it
    can delete and free elements from the red black tree that have a
    sequence number greater then the caller's sequence number:
    
    1) At a point in time we have sequence numbers 1, 2, 3 and 4 in the
       tree mod log;
    
    2) The task which got assigned the sequence number 1 calls
       btrfs_put_tree_mod_seq();
    
    3) Sequence number 1 is deleted from the list of sequence numbers;
    
    4) The current minimum sequence number is computed to be the sequence
       number 2;
    
    5) A task using sequence number 2 is at tree_mod_log_rewind() and gets
       a pointer to one of its elements from the red black tree through
       a call to tree_mod_log_search();
    
    6) The task with sequence number 1 iterates the red black tree of tree
       modification elements and deletes (and frees) all elements with a
       sequence number less then or equals to 2 (the computed minimum sequence
       number) - it ends up only leaving elements with sequence numbers of 3
       and 4;
    
    7) The task with sequence number 2 now uses the pointer to its element,
       already freed by the other task, at __tree_mod_log_rewind(), resulting
       in a use-after-free issue. When CONFIG_DEBUG_PAGEALLOC=y it produces
       a trace like the following:
    
      [16804.546854] general protection fault: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      [16804.547451] CPU: 0 PID: 28257 Comm: pool Tainted: G        W         5.4.0-rc8-btrfs-next-51 #1
      [16804.548059] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
      [16804.548666] RIP: 0010:rb_next+0x16/0x50
      (...)
      [16804.550581] RSP: 0018:ffffb948418ef9b0 EFLAGS: 00010202
      [16804.551227] RAX: 6b6b6b6b6b6b6b6b RBX: ffff90e0247f6600 RCX: 6b6b6b6b6b6b6b6b
      [16804.551873] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff90e0247f6600
      [16804.552504] RBP: ffff90dffe0d4688 R08: 0000000000000001 R09: 0000000000000000
      [16804.553136] R10: ffff90dffa4a0040 R11: 0000000000000000 R12: 000000000000002e
      [16804.553768] R13: ffff90e0247f6600 R14: 0000000000001663 R15: ffff90dff77862b8
      [16804.554399] FS:  00007f4b197ae700(0000) GS:ffff90e036a00000(0000) knlGS:0000000000000000
      [16804.555039] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [16804.555683] CR2: 00007f4b10022000 CR3: 00000002060e2004 CR4: 00000000003606f0
      [16804.556336] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [16804.556968] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [16804.557583] Call Trace:
      [16804.558207]  __tree_mod_log_rewind+0xbf/0x280 [btrfs]
      [16804.558835]  btrfs_search_old_slot+0x105/0xd00 [btrfs]
      [16804.559468]  resolve_indirect_refs+0x1eb/0xc70 [btrfs]
      [16804.560087]  ? free_extent_buffer.part.19+0x5a/0xc0 [btrfs]
      [16804.560700]  find_parent_nodes+0x388/0x1120 [btrfs]
      [16804.561310]  btrfs_check_shared+0x115/0x1c0 [btrfs]
      [16804.561916]  ? extent_fiemap+0x59d/0x6d0 [btrfs]
      [16804.562518]  extent_fiemap+0x59d/0x6d0 [btrfs]
      [16804.563112]  ? __might_fault+0x11/0x90
      [16804.563706]  do_vfs_ioctl+0x45a/0x700
      [16804.564299]  ksys_ioctl+0x70/0x80
      [16804.564885]  ? trace_hardirqs_off_thunk+0x1a/0x20
      [16804.565461]  __x64_sys_ioctl+0x16/0x20
      [16804.566020]  do_syscall_64+0x5c/0x250
      [16804.566580]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [16804.567153] RIP: 0033:0x7f4b1ba2add7
      (...)
      [16804.568907] RSP: 002b:00007f4b197adc88 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [16804.569513] RAX: ffffffffffffffda RBX: 00007f4b100210d8 RCX: 00007f4b1ba2add7
      [16804.570133] RDX: 00007f4b100210d8 RSI: 00000000c020660b RDI: 0000000000000003
      [16804.570726] RBP: 000055de05a6cfe0 R08: 0000000000000000 R09: 00007f4b197add44
      [16804.571314] R10: 0000000000000000 R11: 0000000000000246 R12: 00007f4b197add48
      [16804.571905] R13: 00007f4b197add40 R14: 00007f4b100210d0 R15: 00007f4b197add50
      (...)
      [16804.575623] ---[ end trace 87317359aad4ba50 ]---
    
    Fix this by making btrfs_put_tree_mod_seq() skip deletion of elements that
    have a sequence number equals to the computed minimum sequence number, and
    not just elements with a sequence number greater then that minimum.
    
    Fixes: bd989ba359f2ac ("Btrfs: add tree modification log functions")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 31e4ccc99eda8a5a7e6902c98bee6e78ffd3edb9
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:05 2019 +0700

    tipc: fix use-after-free in tipc_disc_rcv()
    
    In the function 'tipc_disc_rcv()', the 'msg_peer_net_hash()' is called
    to read the header data field but after the message skb has been freed,
    that might result in a garbage value...
    
    This commit fixes it by defining a new local variable to store the data
    first, just like the other header fields' handling.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c388abefda0d92355714010c0199055c57ab6c7
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Tue Nov 26 22:04:52 2019 +0800

    usb: typec: fix use after free in typec_register_port()
    
    We can't use "port->sw" and/or "port->mux" after it has been freed.
    
    Fixes: 23481121c81d ("usb: typec: class: Don't use port parent for getting mux handles")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: stable <stable@vger.kernel.org>
    Cc: linux-usb@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20191126140452.14048-1-wenyang@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1848a543191ae32e558bb0a5974ae7c38ebd86fc
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sun Nov 24 22:22:36 2019 +0800

    usb: roles: fix a potential use after free
    
    Free the sw structure only after we are done using it.
    This patch just moves the put_device() down a bit to avoid the
    use after free.
    
    Fixes: 5c54fcac9a9d ("usb: roles: Take care of driver module reference counting")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: linux-usb@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/20191124142236.25671-1-wenyang@linux.alibaba.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 281393894af9cc3f9483204475014e89d728987c
Author: Steve French <stfrench@microsoft.com>
Date:   Mon Dec 9 19:47:10 2019 -0600

    smb3: fix refcount underflow warning on unmount when no directory leases
    
    Fix refcount underflow warning when unmounting to servers which didn't grant
    directory leases.
    
    [  301.680095] refcount_t: underflow; use-after-free.
    [  301.680192] WARNING: CPU: 1 PID: 3569 at lib/refcount.c:28
    refcount_warn_saturate+0xb4/0xf3
    ...
    [  301.682139] Call Trace:
    [  301.682240]  close_shroot+0x97/0xda [cifs]
    [  301.682351]  SMB2_tdis+0x7c/0x176 [cifs]
    [  301.682456]  ? _get_xid+0x58/0x91 [cifs]
    [  301.682563]  cifs_put_tcon.part.0+0x99/0x202 [cifs]
    [  301.682637]  ? ida_free+0x99/0x10a
    [  301.682727]  ? cifs_umount+0x3d/0x9d [cifs]
    [  301.682829]  cifs_put_tlink+0x3a/0x50 [cifs]
    [  301.682929]  cifs_umount+0x44/0x9d [cifs]
    
    Fixes: 72e73c78c446 ("cifs: close the shared root handle on tree disconnect")
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reported-and-tested-by: Arthur Marsh <arthur.marsh@internode.on.net>

commit 9e99bfefdbce2e23ef37487a3bcb4adf90a791d1
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Dec 7 14:10:34 2019 -0800

    bonding: fix bond_neigh_init()
    
    1) syzbot reported an uninit-value in bond_neigh_setup() [1]
    
     bond_neigh_setup() uses a temporary on-stack 'struct neigh_parms parms',
     but only clears parms.neigh_setup field.
    
     A stacked bonding device would then enter bond_neigh_setup()
     and read garbage from parms->dev.
    
     If we get really unlucky and garbage is matching @dev, then we
     could recurse and eventually crash.
    
     Let's make sure the whole structure is cleared to avoid surprises.
    
    2) bond_neigh_setup() can be called while another cpu manipulates
     the master device, removing or adding a slave.
     We need at least rcu protection to prevent use-after-free.
    
    Note: Prior code does not support a stack of bonding devices,
          this patch does not attempt to fix this, and leave a comment instead.
    
    [1]
    
    BUG: KMSAN: uninit-value in bond_neigh_setup+0xa4/0x110 drivers/net/bonding/bond_main.c:3655
    CPU: 0 PID: 11256 Comm: syz-executor.0 Not tainted 5.4.0-rc8-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x220 lib/dump_stack.c:118
     kmsan_report+0x128/0x220 mm/kmsan/kmsan_report.c:108
     __msan_warning+0x57/0xa0 mm/kmsan/kmsan_instr.c:245
     bond_neigh_setup+0xa4/0x110 drivers/net/bonding/bond_main.c:3655
     bond_neigh_init+0x216/0x4b0 drivers/net/bonding/bond_main.c:3626
     ___neigh_create+0x169e/0x2c40 net/core/neighbour.c:613
     __neigh_create+0xbd/0xd0 net/core/neighbour.c:674
     ip6_finish_output2+0x149a/0x2670 net/ipv6/ip6_output.c:113
     __ip6_finish_output+0x83d/0x8f0 net/ipv6/ip6_output.c:142
     ip6_finish_output+0x2db/0x420 net/ipv6/ip6_output.c:152
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip6_output+0x5d3/0x720 net/ipv6/ip6_output.c:175
     dst_output include/net/dst.h:436 [inline]
     NF_HOOK include/linux/netfilter.h:305 [inline]
     mld_sendpack+0xebd/0x13d0 net/ipv6/mcast.c:1682
     mld_send_cr net/ipv6/mcast.c:1978 [inline]
     mld_ifc_timer_expire+0x116b/0x1680 net/ipv6/mcast.c:2477
     call_timer_fn+0x232/0x530 kernel/time/timer.c:1404
     expire_timers kernel/time/timer.c:1449 [inline]
     __run_timers+0xd60/0x1270 kernel/time/timer.c:1773
     run_timer_softirq+0x2d/0x50 kernel/time/timer.c:1786
     __do_softirq+0x4a1/0x83a kernel/softirq.c:293
     invoke_softirq kernel/softirq.c:375 [inline]
     irq_exit+0x230/0x280 kernel/softirq.c:416
     exiting_irq+0xe/0x10 arch/x86/include/asm/apic.h:536
     smp_apic_timer_interrupt+0x48/0x70 arch/x86/kernel/apic/apic.c:1138
     apic_timer_interrupt+0x2e/0x40 arch/x86/entry/entry_64.S:835
     </IRQ>
    RIP: 0010:kmsan_free_page+0x18d/0x1c0 mm/kmsan/kmsan_shadow.c:439
    Code: 4c 89 ff 44 89 f6 e8 82 0d ee ff 65 ff 0d 9f 26 3b 60 65 8b 05 98 26 3b 60 85 c0 75 24 e8 5b f6 35 ff 4c 89 6d d0 ff 75 d0 9d <48> 83 c4 10 5b 41 5c 41 5d 41 5e 41 5f 5d c3 0f 0b 0f 0b 0f 0b 0f
    RSP: 0018:ffffb328034af818 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
    RAX: 0000000000000000 RBX: ffffe2d7471f8360 RCX: 0000000000000000
    RDX: ffffffffadea7000 RSI: 0000000000000004 RDI: ffff93496fcda104
    RBP: ffffb328034af850 R08: ffff934a47e86d00 R09: ffff93496fc41900
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000001
    R13: 0000000000000246 R14: 0000000000000000 R15: ffffe2d7472225c0
     free_pages_prepare mm/page_alloc.c:1138 [inline]
     free_pcp_prepare mm/page_alloc.c:1230 [inline]
     free_unref_page_prepare+0x1d9/0x770 mm/page_alloc.c:3025
     free_unref_page mm/page_alloc.c:3074 [inline]
     free_the_page mm/page_alloc.c:4832 [inline]
     __free_pages+0x154/0x230 mm/page_alloc.c:4840
     __vunmap+0xdac/0xf20 mm/vmalloc.c:2277
     __vfree mm/vmalloc.c:2325 [inline]
     vfree+0x7c/0x170 mm/vmalloc.c:2355
     copy_entries_to_user net/ipv6/netfilter/ip6_tables.c:883 [inline]
     get_entries net/ipv6/netfilter/ip6_tables.c:1041 [inline]
     do_ip6t_get_ctl+0xfa4/0x1030 net/ipv6/netfilter/ip6_tables.c:1709
     nf_sockopt net/netfilter/nf_sockopt.c:104 [inline]
     nf_getsockopt+0x481/0x4e0 net/netfilter/nf_sockopt.c:122
     ipv6_getsockopt+0x264/0x510 net/ipv6/ipv6_sockglue.c:1400
     tcp_getsockopt+0x1c6/0x1f0 net/ipv4/tcp.c:3688
     sock_common_getsockopt+0x13f/0x180 net/core/sock.c:3110
     __sys_getsockopt+0x533/0x7b0 net/socket.c:2129
     __do_sys_getsockopt net/socket.c:2144 [inline]
     __se_sys_getsockopt+0xe1/0x100 net/socket.c:2141
     __x64_sys_getsockopt+0x62/0x80 net/socket.c:2141
     do_syscall_64+0xb6/0x160 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45d20a
    Code: b8 34 01 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 8d 8b fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 49 89 ca b8 37 00 00 00 0f 05 <48> 3d 01 f0 ff ff 0f 83 6a 8b fb ff c3 66 0f 1f 84 00 00 00 00 00
    RSP: 002b:0000000000a6f618 EFLAGS: 00000212 ORIG_RAX: 0000000000000037
    RAX: ffffffffffffffda RBX: 0000000000a6f640 RCX: 000000000045d20a
    RDX: 0000000000000041 RSI: 0000000000000029 RDI: 0000000000000003
    RBP: 0000000000717cc0 R08: 0000000000a6f63c R09: 0000000000004000
    R10: 0000000000a6f740 R11: 0000000000000212 R12: 0000000000000003
    R13: 0000000000000000 R14: 0000000000000029 R15: 0000000000715b00
    
    Local variable description: ----parms@bond_neigh_init
    Variable was created at:
     bond_neigh_init+0x8c/0x4b0 drivers/net/bonding/bond_main.c:3617
     bond_neigh_init+0x8c/0x4b0 drivers/net/bonding/bond_main.c:3617
    
    Fixes: 9918d5bf329d ("bonding: modify only neigh_parms owned by us")
    Fixes: 234bcf8a499e ("net/bonding: correctly proxy slave neigh param setup ndo function")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit log to make it be easier
            to understand, suggestted by David.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d1a37dedcfcf2c01daff5281c3c378876a04e2f4
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Thu Dec 5 10:12:28 2019 +0800

    net: hns3: fix a use after free problem in hns3_nic_maybe_stop_tx()
    
    Currently, hns3_nic_maybe_stop_tx() uses skb_copy() to linearize a
    SKB if the BD num required by the SKB does not meet the hardware
    limitation, and it linearizes the SKB by allocating a new linearized SKB
    and freeing the old SKB, if hns3_nic_maybe_stop_tx() returns -EBUSY
    because there are no enough space in the ring to send the linearized
    skb to hardware, the sch_direct_xmit() still hold reference to old SKB
    and try to retransmit the old SKB when dev_hard_start_xmit() return
    TX_BUSY, which may cause use after freed problem.
    
    This patch fixes it by using __skb_linearize() to linearize the
    SKB in hns3_nic_maybe_stop_tx().
    
    Fixes: 51e8439f3496 ("net: hns3: add 8 BD limit for tx flow")
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c275779ff2dd51c96eaae04fac5d766421d6c596
Author: Zorro Lang <zlang@redhat.com>
Date:   Wed Dec 4 22:59:02 2019 -0800

    iomap: stop using ioend after it's been freed in iomap_finish_ioend()
    
    This patch fixes the following KASAN report. The @ioend has been
    freed by dio_put(), but the iomap_finish_ioend() still trys to access
    its data.
    
    [20563.631624] BUG: KASAN: use-after-free in iomap_finish_ioend+0x58c/0x5c0
    [20563.638319] Read of size 8 at addr fffffc0c54a36928 by task kworker/123:2/22184
    
    [20563.647107] CPU: 123 PID: 22184 Comm: kworker/123:2 Not tainted 5.4.0+ #1
    [20563.653887] Hardware name: HPE Apollo 70             /C01_APACHE_MB         , BIOS L50_5.13_1.11 06/18/2019
    [20563.664499] Workqueue: xfs-conv/sda5 xfs_end_io [xfs]
    [20563.669547] Call trace:
    [20563.671993]  dump_backtrace+0x0/0x370
    [20563.675648]  show_stack+0x1c/0x28
    [20563.678958]  dump_stack+0x138/0x1b0
    [20563.682455]  print_address_description.isra.9+0x60/0x378
    [20563.687759]  __kasan_report+0x1a4/0x2a8
    [20563.691587]  kasan_report+0xc/0x18
    [20563.694985]  __asan_report_load8_noabort+0x18/0x20
    [20563.699769]  iomap_finish_ioend+0x58c/0x5c0
    [20563.703944]  iomap_finish_ioends+0x110/0x270
    [20563.708396]  xfs_end_ioend+0x168/0x598 [xfs]
    [20563.712823]  xfs_end_io+0x1e0/0x2d0 [xfs]
    [20563.716834]  process_one_work+0x7f0/0x1ac8
    [20563.720922]  worker_thread+0x334/0xae0
    [20563.724664]  kthread+0x2c4/0x348
    [20563.727889]  ret_from_fork+0x10/0x18
    
    [20563.732941] Allocated by task 83403:
    [20563.736512]  save_stack+0x24/0xb0
    [20563.739820]  __kasan_kmalloc.isra.9+0xc4/0xe0
    [20563.744169]  kasan_slab_alloc+0x14/0x20
    [20563.747998]  slab_post_alloc_hook+0x50/0xa8
    [20563.752173]  kmem_cache_alloc+0x154/0x330
    [20563.756185]  mempool_alloc_slab+0x20/0x28
    [20563.760186]  mempool_alloc+0xf4/0x2a8
    [20563.763845]  bio_alloc_bioset+0x2d0/0x448
    [20563.767849]  iomap_writepage_map+0x4b8/0x1740
    [20563.772198]  iomap_do_writepage+0x200/0x8d0
    [20563.776380]  write_cache_pages+0x8a4/0xed8
    [20563.780469]  iomap_writepages+0x4c/0xb0
    [20563.784463]  xfs_vm_writepages+0xf8/0x148 [xfs]
    [20563.788989]  do_writepages+0xc8/0x218
    [20563.792658]  __writeback_single_inode+0x168/0x18f8
    [20563.797441]  writeback_sb_inodes+0x370/0xd30
    [20563.801703]  wb_writeback+0x2d4/0x1270
    [20563.805446]  wb_workfn+0x344/0x1178
    [20563.808928]  process_one_work+0x7f0/0x1ac8
    [20563.813016]  worker_thread+0x334/0xae0
    [20563.816757]  kthread+0x2c4/0x348
    [20563.819979]  ret_from_fork+0x10/0x18
    
    [20563.825028] Freed by task 22184:
    [20563.828251]  save_stack+0x24/0xb0
    [20563.831559]  __kasan_slab_free+0x10c/0x180
    [20563.835648]  kasan_slab_free+0x10/0x18
    [20563.839389]  slab_free_freelist_hook+0xb4/0x1c0
    [20563.843912]  kmem_cache_free+0x8c/0x3e8
    [20563.847745]  mempool_free_slab+0x20/0x28
    [20563.851660]  mempool_free+0xd4/0x2f8
    [20563.855231]  bio_free+0x33c/0x518
    [20563.858537]  bio_put+0xb8/0x100
    [20563.861672]  iomap_finish_ioend+0x168/0x5c0
    [20563.865847]  iomap_finish_ioends+0x110/0x270
    [20563.870328]  xfs_end_ioend+0x168/0x598 [xfs]
    [20563.874751]  xfs_end_io+0x1e0/0x2d0 [xfs]
    [20563.878755]  process_one_work+0x7f0/0x1ac8
    [20563.882844]  worker_thread+0x334/0xae0
    [20563.886584]  kthread+0x2c4/0x348
    [20563.889804]  ret_from_fork+0x10/0x18
    
    [20563.894855] The buggy address belongs to the object at fffffc0c54a36900
                    which belongs to the cache bio-1 of size 248
    [20563.906844] The buggy address is located 40 bytes inside of
                    248-byte region [fffffc0c54a36900, fffffc0c54a369f8)
    [20563.918485] The buggy address belongs to the page:
    [20563.923269] page:ffffffff82f528c0 refcount:1 mapcount:0 mapping:fffffc8e4ba31900 index:0xfffffc0c54a33300
    [20563.932832] raw: 17ffff8000000200 ffffffffa3060100 0000000700000007 fffffc8e4ba31900
    [20563.940567] raw: fffffc0c54a33300 0000000080aa0042 00000001ffffffff 0000000000000000
    [20563.948300] page dumped because: kasan: bad access detected
    
    [20563.955345] Memory state around the buggy address:
    [20563.960129]  fffffc0c54a36800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fc
    [20563.967342]  fffffc0c54a36880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [20563.974554] >fffffc0c54a36900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [20563.981766]                                   ^
    [20563.986288]  fffffc0c54a36980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fc
    [20563.993501]  fffffc0c54a36a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [20564.000713] ==================================================================
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=205703
    Signed-off-by: Zorro Lang <zlang@redhat.com>
    Fixes: 9cd0ed63ca514 ("iomap: enhance writeback error message")
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>

commit 798a9cada4694ca8d970259f216cec47e675bfd5
Author: Brian Foster <bfoster@redhat.com>
Date:   Tue Dec 3 07:53:15 2019 -0800

    xfs: fix mount failure crash on invalid iclog memory access
    
    syzbot (via KASAN) reports a use-after-free in the error path of
    xlog_alloc_log(). Specifically, the iclog freeing loop doesn't
    handle the case of a fully initialized ->l_iclog linked list.
    Instead, it assumes that the list is partially constructed and NULL
    terminated.
    
    This bug manifested because there was no possible error scenario
    after iclog list setup when the original code was added.  Subsequent
    code and associated error conditions were added some time later,
    while the original error handling code was never updated. Fix up the
    error loop to terminate either on a NULL iclog or reaching the end
    of the list.
    
    Reported-by: syzbot+c732f8644185de340492@syzkaller.appspotmail.com
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit a3cde9534ebdafe18a9bbab208df724c57e6c8e8
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sun Dec 1 11:02:50 2019 +0800

    regulator: core: fix regulator_register() error paths to properly release rdev
    
    There are several issues with the error handling code of
    the regulator_register() function:
            ret = device_register(&rdev->dev);
            if (ret != 0) {
                    put_device(&rdev->dev); --> rdev released
                    goto unset_supplies;
            }
    ...
    unset_supplies:
    ...
            unset_regulator_supplies(rdev); --> use-after-free
    ...
    clean:
            if (dangling_of_gpiod)
                    gpiod_put(config->ena_gpiod);
            kfree(rdev);                     --> double free
    
    We add a variable to record the failure of device_register() and
    move put_device() down a bit to avoid the above issues.
    
    Fixes: c438b9d01736 ("regulator: core: Move registration of regulator device")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/20191201030250.38074-1-wenyang@linux.alibaba.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9ebd796e24008f33f06ebea5a5e6aceb68b51794
Author: Jouni Hogander <jouni.hogander@unikie.com>
Date:   Wed Nov 27 08:40:26 2019 +0200

    can: slcan: Fix use-after-free Read in slcan_open
    
    Slcan_open doesn't clean-up device which registration failed from the
    slcan_devs device list. On next open this list is iterated and freed
    device is accessed. Fix this by calling slc_free_netdev in error path.
    
    Driver/net/can/slcan.c is derived from slip.c. Use-after-free error was
    identified in slip_open by syzboz. Same bug is in slcan.c. Here is the
    trace from the Syzbot slip report:
    
    __dump_stack lib/dump_stack.c:77 [inline]
    dump_stack+0x197/0x210 lib/dump_stack.c:118
    print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374
    __kasan_report.cold+0x1b/0x41 mm/kasan/report.c:506
    kasan_report+0x12/0x20 mm/kasan/common.c:634
    __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
    sl_sync drivers/net/slip/slip.c:725 [inline]
    slip_open+0xecd/0x11b7 drivers/net/slip/slip.c:801
    tty_ldisc_open.isra.0+0xa3/0x110 drivers/tty/tty_ldisc.c:469
    tty_set_ldisc+0x30e/0x6b0 drivers/tty/tty_ldisc.c:596
    tiocsetd drivers/tty/tty_io.c:2334 [inline]
    tty_ioctl+0xe8d/0x14f0 drivers/tty/tty_io.c:2594
    vfs_ioctl fs/ioctl.c:46 [inline]
    file_ioctl fs/ioctl.c:509 [inline]
    do_vfs_ioctl+0xdb6/0x13e0 fs/ioctl.c:696
    ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
    __do_sys_ioctl fs/ioctl.c:720 [inline]
    __se_sys_ioctl fs/ioctl.c:718 [inline]
    __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
    do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: ed50e1600b44 ("slcan: Fix memory leak in error path")
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: David Miller <davem@davemloft.net>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Jouni Hogander <jouni.hogander@unikie.com>
    Cc: linux-stable <stable@vger.kernel.org> # >= v5.4
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commits)
      scsi: bnx2fc: timeout calculation invalid for bnx2fc_eh_abort()
      scsi: target: core: Fix a pr_debug() argument
      scsi: iscsi: Don't send data to unbound connection
      scsi: target: iscsi: Wait for all commands to finish before freeing a session
      scsi: target: core: Release SPC-2 reservations when closing a session
      scsi: target: core: Document target_cmd_size_check()
      scsi: bnx2i: fix potential use after free
      Revert "scsi: qla2xxx: Fix memory leak when sending I/O fails"
      scsi: NCR5380: Add disconnect_mask module parameter
      scsi: NCR5380: Unconditionally clear ICR after do_abort()
      scsi: NCR5380: Call scsi_set_resid() on command completion
      scsi: scsi_debug: num_tgts must be >= 0
      scsi: lpfc: use hdwq assigned cpu for allocation
      scsi: arcmsr: fix indentation issues
      scsi: qla4xxx: fix double free bug
      scsi: pm80xx: Modified the logic to collect fatal dump
      scsi: pm80xx: Tie the interrupt name to the module instance
      scsi: pm80xx: Controller fatal error through sysfs
      scsi: pm80xx: Do not request 12G sas speeds
      scsi: pm80xx: Cleanup command when a reset times out
      ...

commit 856a0a6e2d09d31fd8f00cc1fc6645196a509d56
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sat Nov 30 21:08:42 2019 +0800

    platform/chrome: wilco_ec: fix use after free issue
    
    This is caused by dereferencing 'dev_data' after put_device() in
    the telem_device_remove() function.
    This patch just moves the put_device() down a bit to avoid this
    issue.
    
    Fixes: 1210d1e6bad1 ("platform/chrome: wilco_ec: Add telemetry char device interface")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Benson Leung <bleung@chromium.org>
    Cc: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Cc: Nick Crews <ncrews@chromium.org>
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

commit 8897c1b1a1795cab23d5ac13e4e23bf0b5f4e0c6
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Sat Nov 30 17:50:26 2019 -0800

    shmem: pin the file in shmem_fault() if mmap_sem is dropped
    
    syzbot found the following crash:
    
      BUG: KASAN: use-after-free in perf_trace_lock_acquire+0x401/0x530 include/trace/events/lock.h:13
      Read of size 8 at addr ffff8880a5cf2c50 by task syz-executor.0/26173
    
      CPU: 0 PID: 26173 Comm: syz-executor.0 Not tainted 5.3.0-rc6 #146
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
         perf_trace_lock_acquire+0x401/0x530 include/trace/events/lock.h:13
         trace_lock_acquire include/trace/events/lock.h:13 [inline]
         lock_acquire+0x2de/0x410 kernel/locking/lockdep.c:4411
         __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
         _raw_spin_lock+0x2f/0x40 kernel/locking/spinlock.c:151
         spin_lock include/linux/spinlock.h:338 [inline]
         shmem_fault+0x5ec/0x7b0 mm/shmem.c:2034
         __do_fault+0x111/0x540 mm/memory.c:3083
         do_shared_fault mm/memory.c:3535 [inline]
         do_fault mm/memory.c:3613 [inline]
         handle_pte_fault mm/memory.c:3840 [inline]
         __handle_mm_fault+0x2adf/0x3f20 mm/memory.c:3964
         handle_mm_fault+0x1b5/0x6b0 mm/memory.c:4001
         do_user_addr_fault arch/x86/mm/fault.c:1441 [inline]
         __do_page_fault+0x536/0xdd0 arch/x86/mm/fault.c:1506
         do_page_fault+0x38/0x590 arch/x86/mm/fault.c:1530
         page_fault+0x39/0x40 arch/x86/entry/entry_64.S:1202
    
    It happens if the VMA got unmapped under us while we dropped mmap_sem
    and inode got freed.
    
    Pinning the file if we drop mmap_sem fixes the issue.
    
    Link: http://lkml.kernel.org/r/20190927083908.rhifa4mmaxefc24r@box
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: syzbot+03ee87124ee05af991bd@syzkaller.appspotmail.com
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      CIFS: fix a white space issue in cifs_get_inode_info()
      cifs: update internal module version number
      cifs: Always update signing key of first channel
      cifs: Fix retrieval of DFS referrals in cifs_mount()
      cifs: Fix potential softlockups while refreshing DFS cache
      cifs: Fix lookup of root ses in DFS referral cache
      cifs: Fix use-after-free bug in cifs_reconnect()
      cifs: dump channel info in DebugData
      smb3: dump in_send and num_waiters stats counters by default
      cifs: try harder to open new channels
      CIFS: Properly process SMB3 lease breaks
      cifs: move cifsFileInfo_put logic into a work-queue
      cifs: try opening channels after mounting
      CIFS: refactor cifs_get_inode_info()
      cifs: switch servers depending on binding state
      cifs: add server param
      cifs: add multichannel mount options and data structs
      cifs: sort interface list by speed
      CIFS: Fix SMB2 oplock break processing
      cifs: don't use 'pre:' for MODULE_SOFTDEP
      ...

commit 4affd79a125ac91e6a53be843ea3960a8fc00cbb
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Sun Nov 24 22:58:35 2019 +0800

    regulator: fix use after free issue
    
    This is caused by dereferencing 'rdev' after put_device() in
    the _regulator_get()/_regulator_put() functions.
    This patch just moves the put_device() down a bit to avoid the
    issue.
    
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/20191124145835.25999-1-wenyang@linux.alibaba.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commits)
      libbpf: Fix usage of u32 in userspace code
      mm: Implement no-MMU variant of vmalloc_user_node_flags
      slip: Fix use-after-free Read in slip_open
      net: dsa: sja1105: fix sja1105_parse_rgmii_delays()
      macvlan: schedule bc_work even if error
      enetc: add support Credit Based Shaper(CBS) for hardware offload
      net: phy: add helpers phy_(un)lock_mdio_bus
      mdio_bus: don't use managed reset-controller
      ax88179_178a: add ethtool_op_get_ts_info()
      mlxsw: spectrum_router: Fix use of uninitialized adjacency index
      mlxsw: spectrum_router: After underlay moves, demote conflicting tunnels
      bpf: Simplify __bpf_arch_text_poke poke type handling
      bpf: Introduce BPF_TRACE_x helper for the tracing tests
      bpf: Add bpf_jit_blinding_enabled for !CONFIG_BPF_JIT
      bpf, testing: Add various tail call test cases
      bpf, x86: Emit patchable direct jump as tail call
      bpf: Constant map key tracking for prog array pokes
      bpf: Add poke dependency tracking for prog array maps
      bpf: Add initial poke descriptor table for jit images
      bpf: Move owner type, jited info into array auxiliary data
      ...

commit e58c1912418980f57ba2060017583067f5f71e52
Author: Jouni Hogander <jouni.hogander@unikie.com>
Date:   Mon Nov 25 14:23:43 2019 +0200

    slip: Fix use-after-free Read in slip_open
    
    Slip_open doesn't clean-up device which registration failed from the
    slip_devs device list. On next open after failure this list is iterated
    and freed device is accessed. Fix this by calling sl_free_netdev in error
    path.
    
    Here is the trace from the Syzbot:
    
    __dump_stack lib/dump_stack.c:77 [inline]
    dump_stack+0x197/0x210 lib/dump_stack.c:118
    print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374
    __kasan_report.cold+0x1b/0x41 mm/kasan/report.c:506
    kasan_report+0x12/0x20 mm/kasan/common.c:634
    __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
    sl_sync drivers/net/slip/slip.c:725 [inline]
    slip_open+0xecd/0x11b7 drivers/net/slip/slip.c:801
    tty_ldisc_open.isra.0+0xa3/0x110 drivers/tty/tty_ldisc.c:469
    tty_set_ldisc+0x30e/0x6b0 drivers/tty/tty_ldisc.c:596
    tiocsetd drivers/tty/tty_io.c:2334 [inline]
    tty_ioctl+0xe8d/0x14f0 drivers/tty/tty_io.c:2594
    vfs_ioctl fs/ioctl.c:46 [inline]
    file_ioctl fs/ioctl.c:509 [inline]
    do_vfs_ioctl+0xdb6/0x13e0 fs/ioctl.c:696
    ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
    __do_sys_ioctl fs/ioctl.c:720 [inline]
    __se_sys_ioctl fs/ioctl.c:718 [inline]
    __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
    do_syscall_64+0xfa/0x760 arch/x86/entry/common.c:290
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: 3b5a39979daf ("slip: Fix memory leak in slip_open error path")
    Reported-by: syzbot+4d5170758f3762109542@syzkaller.appspotmail.com
    Cc: David Miller <davem@davemloft.net>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Signed-off-by: Jouni Hogander <jouni.hogander@unikie.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8354d88efdab72b4da32fc4f032448fcef22dab4
Author: Paulo Alcantara (SUSE) <pc@cjr.nz>
Date:   Fri Nov 22 12:30:51 2019 -0300

    cifs: Fix use-after-free bug in cifs_reconnect()
    
    Ensure we grab an active reference in cifs superblock while doing
    failover to prevent automounts (DFS links) of expiring and then
    destroying the superblock pointer.
    
    This patch fixes the following KASAN report:
    
    [  464.301462] BUG: KASAN: use-after-free in
    cifs_reconnect+0x6ab/0x1350
    [  464.303052] Read of size 8 at addr ffff888155e580d0 by task
    cifsd/1107
    
    [  464.304682] CPU: 3 PID: 1107 Comm: cifsd Not tainted 5.4.0-rc4+ #13
    [  464.305552] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009),
    BIOS rel-1.12.1-0-ga5cab58-rebuilt.opensuse.org 04/01/2014
    [  464.307146] Call Trace:
    [  464.307875]  dump_stack+0x5b/0x90
    [  464.308631]  print_address_description.constprop.0+0x16/0x200
    [  464.309478]  ? cifs_reconnect+0x6ab/0x1350
    [  464.310253]  ? cifs_reconnect+0x6ab/0x1350
    [  464.311040]  __kasan_report.cold+0x1a/0x41
    [  464.311811]  ? cifs_reconnect+0x6ab/0x1350
    [  464.312563]  kasan_report+0xe/0x20
    [  464.313300]  cifs_reconnect+0x6ab/0x1350
    [  464.314062]  ? extract_hostname.part.0+0x90/0x90
    [  464.314829]  ? printk+0xad/0xde
    [  464.315525]  ? _raw_spin_lock+0x7c/0xd0
    [  464.316252]  ? _raw_read_lock_irq+0x40/0x40
    [  464.316961]  ? ___ratelimit+0xed/0x182
    [  464.317655]  cifs_readv_from_socket+0x289/0x3b0
    [  464.318386]  cifs_read_from_socket+0x98/0xd0
    [  464.319078]  ? cifs_readv_from_socket+0x3b0/0x3b0
    [  464.319782]  ? try_to_wake_up+0x43c/0xa90
    [  464.320463]  ? cifs_small_buf_get+0x4b/0x60
    [  464.321173]  ? allocate_buffers+0x98/0x1a0
    [  464.321856]  cifs_demultiplex_thread+0x218/0x14a0
    [  464.322558]  ? cifs_handle_standard+0x270/0x270
    [  464.323237]  ? __switch_to_asm+0x40/0x70
    [  464.323893]  ? __switch_to_asm+0x34/0x70
    [  464.324554]  ? __switch_to_asm+0x40/0x70
    [  464.325226]  ? __switch_to_asm+0x40/0x70
    [  464.325863]  ? __switch_to_asm+0x34/0x70
    [  464.326505]  ? __switch_to_asm+0x40/0x70
    [  464.327161]  ? __switch_to_asm+0x34/0x70
    [  464.327784]  ? finish_task_switch+0xa1/0x330
    [  464.328414]  ? __switch_to+0x363/0x640
    [  464.329044]  ? __schedule+0x575/0xaf0
    [  464.329655]  ? _raw_spin_lock_irqsave+0x82/0xe0
    [  464.330301]  kthread+0x1a3/0x1f0
    [  464.330884]  ? cifs_handle_standard+0x270/0x270
    [  464.331624]  ? kthread_create_on_node+0xd0/0xd0
    [  464.332347]  ret_from_fork+0x35/0x40
    
    [  464.333577] Allocated by task 1110:
    [  464.334381]  save_stack+0x1b/0x80
    [  464.335123]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [  464.335848]  cifs_smb3_do_mount+0xd4/0xb00
    [  464.336619]  legacy_get_tree+0x6b/0xa0
    [  464.337235]  vfs_get_tree+0x41/0x110
    [  464.337975]  fc_mount+0xa/0x40
    [  464.338557]  vfs_kern_mount.part.0+0x6c/0x80
    [  464.339227]  cifs_dfs_d_automount+0x336/0xd29
    [  464.339846]  follow_managed+0x1b1/0x450
    [  464.340449]  lookup_fast+0x231/0x4a0
    [  464.341039]  path_openat+0x240/0x1fd0
    [  464.341634]  do_filp_open+0x126/0x1c0
    [  464.342277]  do_sys_open+0x1eb/0x2c0
    [  464.342957]  do_syscall_64+0x5e/0x190
    [  464.343555]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [  464.344772] Freed by task 0:
    [  464.345347]  save_stack+0x1b/0x80
    [  464.345966]  __kasan_slab_free+0x12c/0x170
    [  464.346576]  kfree+0xa6/0x270
    [  464.347211]  rcu_core+0x39c/0xc80
    [  464.347800]  __do_softirq+0x10d/0x3da
    
    [  464.348919] The buggy address belongs to the object at
    ffff888155e58000
                    which belongs to the cache kmalloc-256 of size 256
    [  464.350222] The buggy address is located 208 bytes inside of
                    256-byte region [ffff888155e58000, ffff888155e58100)
    [  464.351575] The buggy address belongs to the page:
    [  464.352333] page:ffffea0005579600 refcount:1 mapcount:0
    mapping:ffff88815a803400 index:0x0 compound_mapcount: 0
    [  464.353583] flags: 0x200000000010200(slab|head)
    [  464.354209] raw: 0200000000010200 ffffea0005576200 0000000400000004
    ffff88815a803400
    [  464.355353] raw: 0000000000000000 0000000080100010 00000001ffffffff
    0000000000000000
    [  464.356458] page dumped because: kasan: bad access detected
    
    [  464.367005] Memory state around the buggy address:
    [  464.367787]  ffff888155e57f80: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.368877]  ffff888155e58000: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [  464.369967] >ffff888155e58080: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [  464.371111]                                                  ^
    [  464.371775]  ffff888155e58100: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.372893]  ffff888155e58180: fc fc fc fc fc fc fc fc fc fc fc fc
    fc fc fc fc
    [  464.373983] ==================================================================
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>

commit bc71d8b580ba81b55b6e15b1c0320632515b4bac
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Thu Nov 21 12:26:45 2019 +0000

    virt_wifi: fix use-after-free in virt_wifi_newlink()
    
    When virt_wifi interface is created, virt_wifi_newlink() is called and
    it calls register_netdevice().
    if register_netdevice() fails, it internally would call
    ->priv_destructor(), which is virt_wifi_net_device_destructor() and
    it frees netdev. but virt_wifi_newlink() still use netdev.
    So, use-after-free would occur in virt_wifi_newlink().
    
    Test commands:
        ip link add dummy0 type dummy
        modprobe bonding
        ip link add bonding_masters link dummy0 type virt_wifi
    
    Splat looks like:
    [  202.220554] BUG: KASAN: use-after-free in virt_wifi_newlink+0x88b/0x9a0 [virt_wifi]
    [  202.221659] Read of size 8 at addr ffff888061629cb8 by task ip/852
    
    [  202.222896] CPU: 1 PID: 852 Comm: ip Not tainted 5.4.0-rc5 #3
    [  202.223765] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  202.225073] Call Trace:
    [  202.225532]  dump_stack+0x7c/0xbb
    [  202.226869]  print_address_description.constprop.5+0x1be/0x360
    [  202.229362]  __kasan_report+0x12a/0x16f
    [  202.230714]  kasan_report+0xe/0x20
    [  202.232595]  virt_wifi_newlink+0x88b/0x9a0 [virt_wifi]
    [  202.233370]  __rtnl_newlink+0xb9f/0x11b0
    [  202.244909]  rtnl_newlink+0x65/0x90
    [ ... ]
    
    Cc: stable@vger.kernel.org
    Fixes: c7cdba31ed8b ("mac80211-next: rtnetlink wifi simulation device")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Link: https://lore.kernel.org/r/20191121122645.9355-1-ap420073@gmail.com
    [trim stack dump a bit]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 16214bd9e43a31683a7073664b000029bba00354
Author: Robert Richter <rrichter@marvell.com>
Date:   Thu Nov 21 21:36:57 2019 +0000

    EDAC/ghes: Do not warn when incrementing refcount on 0
    
    The following warning from the refcount framework is seen during ghes
    initialization:
    
      EDAC MC0: Giving out device to module ghes_edac.c controller ghes_edac: DEV ghes (INTERRUPT)
      ------------[ cut here ]------------
      refcount_t: increment on 0; use-after-free.
      WARNING: CPU: 36 PID: 1 at lib/refcount.c:156 refcount_inc_checked
     [...]
      Call trace:
       refcount_inc_checked
       ghes_edac_register
       ghes_probe
       ...
    
    It warns if the refcount is incremented from zero. This warning is
    reasonable as a kernel object is typically created with a refcount of
    one and freed once the refcount is zero. Afterwards the object would be
    "used-after-free".
    
    For GHES, the refcount is initialized with zero, and that is why this
    message is seen when initializing the first instance. However, whenever
    the refcount is zero, the device will be allocated and registered. Since
    the ghes_reg_mutex protects the refcount and serializes allocation and
    freeing of ghes devices, a use-after-free cannot happen here.
    
    Instead of using refcount_inc() for the first instance, use
    refcount_set(). This can be used here because the refcount is zero at
    this point and can not change due to its protection by the mutex.
    
    Fixes: 23f61b9fc5cc ("EDAC/ghes: Fix locking and memory barrier issues")
    Reported-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Robert Richter <rrichter@marvell.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: John Garry <john.garry@huawei.com>
    Cc: <huangming23@huawei.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: <linuxarm@huawei.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: <tanxiaofei@huawei.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: <wanghuiqiang@huawei.com>
    Link: https://lkml.kernel.org/r/20191121213628.21244-1-rrichter@marvell.com

commit 36f7e2b2bb1de86f0072cd49ca93d82b9e8fd894
Author: Felix Fietkau <nbd@nbd.name>
Date:   Sun Sep 29 22:04:37 2019 +0200

    mt76: do not use devm API for led classdev
    
    With the devm API, the unregister happens after the device cleanup is done,
    after which the struct mt76_dev which contains the led_cdev has already been
    freed. This leads to a use-after-free bug that can crash the system.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>

commit e9d3009cb936bd0faf0719f68d98ad8afb1e613b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Nov 13 14:05:08 2019 -0800

    scsi: target: iscsi: Wait for all commands to finish before freeing a session
    
    The iSCSI target driver is the only target driver that does not wait for
    ongoing commands to finish before freeing a session. Make the iSCSI target
    driver wait for ongoing commands to finish before freeing a session. This
    patch fixes the following KASAN complaint:
    
    BUG: KASAN: use-after-free in __lock_acquire+0xb1a/0x2710
    Read of size 8 at addr ffff8881154eca70 by task kworker/0:2/247
    
    CPU: 0 PID: 247 Comm: kworker/0:2 Not tainted 5.4.0-rc1-dbg+ #6
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Workqueue: target_completion target_complete_ok_work [target_core_mod]
    Call Trace:
     dump_stack+0x8a/0xd6
     print_address_description.constprop.0+0x40/0x60
     __kasan_report.cold+0x1b/0x33
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     __lock_acquire+0xb1a/0x2710
     lock_acquire+0xd3/0x200
     _raw_spin_lock_irqsave+0x43/0x60
     target_release_cmd_kref+0x162/0x7f0 [target_core_mod]
     target_put_sess_cmd+0x2e/0x40 [target_core_mod]
     lio_check_stop_free+0x12/0x20 [iscsi_target_mod]
     transport_cmd_check_stop_to_fabric+0xd8/0xe0 [target_core_mod]
     target_complete_ok_work+0x1b0/0x790 [target_core_mod]
     process_one_work+0x549/0xa40
     worker_thread+0x7a/0x5d0
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Allocated by task 889:
     save_stack+0x23/0x90
     __kasan_kmalloc.constprop.0+0xcf/0xe0
     kasan_slab_alloc+0x12/0x20
     kmem_cache_alloc+0xf6/0x360
     transport_alloc_session+0x29/0x80 [target_core_mod]
     iscsi_target_login_thread+0xcd6/0x18f0 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Freed by task 1025:
     save_stack+0x23/0x90
     __kasan_slab_free+0x13a/0x190
     kasan_slab_free+0x12/0x20
     kmem_cache_free+0x146/0x400
     transport_free_session+0x179/0x2f0 [target_core_mod]
     transport_deregister_session+0x130/0x180 [target_core_mod]
     iscsit_close_session+0x12c/0x350 [iscsi_target_mod]
     iscsit_logout_post_handler+0x136/0x380 [iscsi_target_mod]
     iscsit_response_queue+0x8de/0xbe0 [iscsi_target_mod]
     iscsi_target_tx_thread+0x27f/0x370 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    The buggy address belongs to the object at ffff8881154ec9c0
     which belongs to the cache se_sess_cache of size 352
    The buggy address is located 176 bytes inside of
     352-byte region [ffff8881154ec9c0, ffff8881154ecb20)
    The buggy address belongs to the page:
    page:ffffea0004553b00 refcount:1 mapcount:0 mapping:ffff888101755400 index:0x0 compound_mapcount: 0
    flags: 0x2fff000000010200(slab|head)
    raw: 2fff000000010200 dead000000000100 dead000000000122 ffff888101755400
    raw: 0000000000000000 0000000080130013 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881154ec900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8881154ec980: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    >ffff8881154eca00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                 ^
     ffff8881154eca80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8881154ecb00: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    
    Cc: Mike Christie <mchristi@redhat.com>
    Link: https://lore.kernel.org/r/20191113220508.198257-3-bvanassche@acm.org
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 80647a89eaf3f2549741648f3230cd6ff68c23b4
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Nov 13 14:05:07 2019 -0800

    scsi: target: core: Release SPC-2 reservations when closing a session
    
    The SCSI specs require releasing SPC-2 reservations when a session is
    closed. Make sure that the target core does this.
    
    Running the libiscsi tests triggers the KASAN complaint shown below.  This
    patch fixes that use-after-free.
    
    BUG: KASAN: use-after-free in target_check_reservation+0x171/0x980 [target_core_mod]
    Read of size 8 at addr ffff88802ecd1878 by task iscsi_trx/17200
    
    CPU: 0 PID: 17200 Comm: iscsi_trx Not tainted 5.4.0-rc1-dbg+ #1
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    Call Trace:
     dump_stack+0x8a/0xd6
     print_address_description.constprop.0+0x40/0x60
     __kasan_report.cold+0x1b/0x34
     kasan_report+0x16/0x20
     __asan_load8+0x58/0x90
     target_check_reservation+0x171/0x980 [target_core_mod]
     __target_execute_cmd+0xb1/0xf0 [target_core_mod]
     target_execute_cmd+0x22d/0x4d0 [target_core_mod]
     transport_generic_new_cmd+0x31f/0x5b0 [target_core_mod]
     transport_handle_cdb_direct+0x6f/0x90 [target_core_mod]
     iscsit_execute_cmd+0x381/0x3f0 [iscsi_target_mod]
     iscsit_sequence_cmd+0x13b/0x1f0 [iscsi_target_mod]
     iscsit_process_scsi_cmd+0x4c/0x130 [iscsi_target_mod]
     iscsit_get_rx_pdu+0x8e8/0x15f0 [iscsi_target_mod]
     iscsi_target_rx_thread+0x105/0x1b0 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Allocated by task 1079:
     save_stack+0x23/0x90
     __kasan_kmalloc.constprop.0+0xcf/0xe0
     kasan_slab_alloc+0x12/0x20
     kmem_cache_alloc+0xfe/0x3a0
     transport_alloc_session+0x29/0x80 [target_core_mod]
     iscsi_target_login_thread+0xceb/0x1920 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    Freed by task 17193:
     save_stack+0x23/0x90
     __kasan_slab_free+0x13a/0x190
     kasan_slab_free+0x12/0x20
     kmem_cache_free+0xc8/0x3e0
     transport_free_session+0x179/0x2f0 [target_core_mod]
     transport_deregister_session+0x121/0x170 [target_core_mod]
     iscsit_close_session+0x12c/0x350 [iscsi_target_mod]
     iscsit_logout_post_handler+0x136/0x380 [iscsi_target_mod]
     iscsit_response_queue+0x8fa/0xc00 [iscsi_target_mod]
     iscsi_target_tx_thread+0x28e/0x390 [iscsi_target_mod]
     kthread+0x1bc/0x210
     ret_from_fork+0x24/0x30
    
    The buggy address belongs to the object at ffff88802ecd1860
     which belongs to the cache se_sess_cache of size 352
    The buggy address is located 24 bytes inside of
     352-byte region [ffff88802ecd1860, ffff88802ecd19c0)
    The buggy address belongs to the page:
    page:ffffea0000bb3400 refcount:1 mapcount:0 mapping:ffff8880bef2ed00 index:0x0 compound_mapcount: 0
    flags: 0x1000000000010200(slab|head)
    raw: 1000000000010200 dead000000000100 dead000000000122 ffff8880bef2ed00
    raw: 0000000000000000 0000000080270027 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88802ecd1700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88802ecd1780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88802ecd1800: fb fb fb fb fc fc fc fc fc fc fc fc fb fb fb fb
                                                                    ^
     ffff88802ecd1880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88802ecd1900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Cc: Mike Christie <mchristi@redhat.com>
    Link: https://lore.kernel.org/r/20191113220508.198257-2-bvanassche@acm.org
    Reviewed-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 29d28f2b8d3736ac61c28ef7e20fda63795b74d9
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 20:32:21 2019 +0800

    scsi: bnx2i: fix potential use after free
    
    The member hba->pcidev may be used after its reference is dropped. Move the
    put function to where it is never used to avoid potential use after free
    issues.
    
    Fixes: a77171806515 ("[SCSI] bnx2i: Removed the reference to the netdev->base_addr")
    Link: https://lore.kernel.org/r/1573043541-19126-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 2c47c1be51fbded1f7baa2ceaed90f97932f79be
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 19 11:40:46 2019 -0500

    gfs2: clean up iopen glock mess in gfs2_create_inode
    
    Before this patch, gfs2_create_inode had a use-after-free for the
    iopen glock in some error paths because it did this:
    
            gfs2_glock_put(io_gl);
    fail_gunlock2:
            if (io_gl)
                    clear_bit(GLF_INODE_CREATING, &io_gl->gl_flags);
    
    In some cases, the io_gl was used for create and only had one
    reference, so the glock might be freed before the clear_bit().
    This patch tries to straighten it out by only jumping to the
    error paths where iopen is properly set, and moving the
    gfs2_glock_put after the clear_bit.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

commit 0ced7b050224b18ca73e38e7068f36be8e708c06
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Mon Nov 18 10:51:11 2019 +0900

    ASoC: soc-pcm: remove soc_pcm_private_free()
    
    soc-topology adds extra dai_link by using snd_soc_add_dai_link(),
    and removes it by snd_soc_romove_dai_link().
    
    This snd_soc_add/remove_dai_link() and/or its related
    functions are unbalanced before, and now, these are balance-uped.
    But, it finds the random operation issue, and it is reported by
    Pierre-Louis.
    
    When card was released, topology will call snd_soc_remove_dai_link()
    via (A).
    
            static void soc_cleanup_card_resources(struct snd_soc_card *card)
            {
                    struct snd_soc_dai_link *link, *_link;
    
                    /* This should be called before snd_card_free() */
            (A)     soc_remove_link_components(card);
    
                    /* free the ALSA card at first; this syncs with pending operations */
                    if (card->snd_card) {
            (B)             snd_card_free(card->snd_card);
                            card->snd_card = NULL;
                    }
    
                    /* remove and free each DAI */
            (X)     soc_remove_link_dais(card);
    
                    for_each_card_links_safe(card, link, _link)
            (C)             snd_soc_remove_dai_link(card, link);
    
                    ...
            }
    
    At (A), topology calls snd_soc_remove_dai_link().
    Then topology rtd, and its related all data are freed.
    
    Next, (B) is called, and then, pcm->private_free = soc_pcm_private_free()
    is called.
    
            static void soc_pcm_private_free(struct snd_pcm *pcm)
            {
                    struct snd_soc_pcm_runtime *rtd = pcm->private_data;
    
                    /* need to sync the delayed work before releasing resources */
                    flush_delayed_work(&rtd->delayed_work);
                    snd_soc_pcm_component_free(rtd);
            }
    
    Here, it gets rtd via pcm->private_data.
    But, topology related rtd are already freed at (A).
    Normal sound card has no damage, becase it frees rtd at (C).
    
    These are finalizing rtd related data.
    Thus, these should be called when rtd was freed, not sound card
    was freed. It is very natural and understandable.
    
    In other words, pcm->private_free = soc_pcm_private_free()
    is no longer needed.
    
    Extra issue is that there is zero chance to call
    soc_remove_dai() for topology related dai at (X).
    Because (A) removes rtd connection from card too, and,
    (X) is based on card connected rtd.
    
    This means, (X) need to be called before (C) (= for normal sound)
    and (A) (= for topology).
    
    Now, I want to focus this patch which is the reason why
    snd_card_free() = (B) is located there.
    
            commit 4efda5f2130da033aeedc5b3205569893b910de2
            ("ASoC: Fix use-after-free at card unregistration")
    
    Original snd_card_free() was called last of this function.
    But moved to top to avoid use-after-free issue.
    The issue was happen at soc_pcm_free() which was pcm->private_free,
    today it is updated/renamed to soc_pcm_private_free().
    
    In other words, (B) need to be called before (C) (= for normal sound)
    and (A) (= for topology), because it needs (not yet freed) rtd.
    But, (A) need to be called before (B),
    because it needs card->snd_card pointer.
    
    If we call flush_delayed_work() and snd_soc_pcm_component_free()
    (= same as soc_pcm_private_free()) when rtd was freed (= (C), (A)),
    there is no reason to call snd_card_free() at top of this function.
    It can be called end of this function, again.
    
    But, in such case, it will likely break unbind again, as Takashi-san
    reported. When unbind is performed in a busy state, the code may
    release still-in-use resources.
    At least we need to call snd_card_disconnect_sync() at the first place.
    
    The final code will be...
    
            static void soc_cleanup_card_resources(struct snd_soc_card *card)
            {
                    struct snd_soc_dai_link *link, *_link;
    
                    if (card->snd_card)
            (Z)             snd_card_disconnect_sync(card->snd_card);
    
            (X)     soc_remove_link_dais(card);
            (A)     soc_remove_link_components(card);
    
                    for_each_card_links_safe(card, link, _link)
            (C)             snd_soc_remove_dai_link(card, link);
    
                    ...
                    if (card->snd_card) {
            (B)             snd_card_free(card->snd_card);
                            card->snd_card = NULL;
                    }
            }
    
    To avoid release still-in-use resources,
    call snd_card_disconnect_sync() at (Z).
    
    (X) is needed for both non-topology and topology.
    
        topology removes rtd via (A), and
    non topology removes rtd via (C).
    
    snd_card_free() is no longer related to use-after-free issue.
    Thus, locating (B) is no problem.
    
    Fixes: df95a16d2a9626 ("ASoC: soc-core: fix RIP warning on card removal")
    Fixes: bc7a9091e5b927 ("ASoC: soc-core: add soc_unbind_dai_link()")
    Reported-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Tested-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/87o8xax88g.wl-kuninori.morimoto.gx@renesas.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c491eae8f9c0720520ebdeb4d335671f84b84b71
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Sat Nov 16 12:22:38 2019 +0100

    xdp: remove memory poison on free for struct xdp_mem_allocator
    
    When looking at the details I realised that the memory poison in
    __xdp_mem_allocator_rcu_free doesn't make sense. This is because the
    SLUB allocator uses the first 16 bytes (on 64 bit), for its freelist,
    which overlap with members in struct xdp_mem_allocator, that were
    updated.  Thus, SLUB already does the "poisoning" for us.
    
    I still believe that poisoning memory make sense in other cases.
    Kernel have gained different use-after-free detection mechanism, but
    enabling those is associated with a huge overhead. Experience is that
    debugging facilities can change the timing so much, that that a race
    condition will not be provoked when enabled. Thus, I'm still in favour
    of poisoning memory where it makes sense.
    
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit baf320b9d531f1cfbf64c60dd155ff80a58b3796
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Sep 26 08:29:32 2019 -0400

    btrfs: use refcount_inc_not_zero in kill_all_nodes
    
    We hit the following warning while running down a different problem
    
    [ 6197.175850] ------------[ cut here ]------------
    [ 6197.185082] refcount_t: underflow; use-after-free.
    [ 6197.194704] WARNING: CPU: 47 PID: 966 at lib/refcount.c:190 refcount_sub_and_test_checked+0x53/0x60
    [ 6197.521792] Call Trace:
    [ 6197.526687]  __btrfs_release_delayed_node+0x76/0x1c0
    [ 6197.536615]  btrfs_kill_all_delayed_nodes+0xec/0x130
    [ 6197.546532]  ? __btrfs_btree_balance_dirty+0x60/0x60
    [ 6197.556482]  btrfs_clean_one_deleted_snapshot+0x71/0xd0
    [ 6197.566910]  cleaner_kthread+0xfa/0x120
    [ 6197.574573]  kthread+0x111/0x130
    [ 6197.581022]  ? kthread_create_on_node+0x60/0x60
    [ 6197.590086]  ret_from_fork+0x1f/0x30
    [ 6197.597228] ---[ end trace 424bb7ae00509f56 ]---
    
    This is because the free side drops the ref without the lock, and then
    takes the lock if our refcount is 0.  So you can have nodes on the tree
    that have a refcount of 0.  Fix this by zero'ing out that element in our
    temporary array so we don't try to kill it again.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add comment ]
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 1e0bd5a091e5d9e0f1d5b0e6329b87bb1792f784
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Sun Nov 17 09:28:02 2019 -0800

    bpf: Switch bpf_map ref counter to atomic64_t so bpf_map_inc() never fails
    
    92117d8443bc ("bpf: fix refcnt overflow") turned refcounting of bpf_map into
    potentially failing operation, when refcount reaches BPF_MAX_REFCNT limit
    (32k). Due to using 32-bit counter, it's possible in practice to overflow
    refcounter and make it wrap around to 0, causing erroneous map free, while
    there are still references to it, causing use-after-free problems.
    
    But having a failing refcounting operations are problematic in some cases. One
    example is mmap() interface. After establishing initial memory-mapping, user
    is allowed to arbitrarily map/remap/unmap parts of mapped memory, arbitrarily
    splitting it into multiple non-contiguous regions. All this happening without
    any control from the users of mmap subsystem. Rather mmap subsystem sends
    notifications to original creator of memory mapping through open/close
    callbacks, which are optionally specified during initial memory mapping
    creation. These callbacks are used to maintain accurate refcount for bpf_map
    (see next patch in this series). The problem is that open() callback is not
    supposed to fail, because memory-mapped resource is set up and properly
    referenced. This is posing a problem for using memory-mapping with BPF maps.
    
    One solution to this is to maintain separate refcount for just memory-mappings
    and do single bpf_map_inc/bpf_map_put when it goes from/to zero, respectively.
    There are similar use cases in current work on tcp-bpf, necessitating extra
    counter as well. This seems like a rather unfortunate and ugly solution that
    doesn't scale well to various new use cases.
    
    Another approach to solve this is to use non-failing refcount_t type, which
    uses 32-bit counter internally, but, once reaching overflow state at UINT_MAX,
    stays there. This utlimately causes memory leak, but prevents use after free.
    
    But given refcounting is not the most performance-critical operation with BPF
    maps (it's not used from running BPF program code), we can also just switch to
    64-bit counter that can't overflow in practice, potentially disadvantaging
    32-bit platforms a tiny bit. This simplifies semantics and allows above
    described scenarios to not worry about failing refcount increment operation.
    
    In terms of struct bpf_map size, we are still good and use the same amount of
    space:
    
    BEFORE (3 cache lines, 8 bytes of padding at the end):
    struct bpf_map {
            const struct bpf_map_ops  * ops __attribute__((__aligned__(64))); /*     0     8 */
            struct bpf_map *           inner_map_meta;       /*     8     8 */
            void *                     security;             /*    16     8 */
            enum bpf_map_type  map_type;                     /*    24     4 */
            u32                        key_size;             /*    28     4 */
            u32                        value_size;           /*    32     4 */
            u32                        max_entries;          /*    36     4 */
            u32                        map_flags;            /*    40     4 */
            int                        spin_lock_off;        /*    44     4 */
            u32                        id;                   /*    48     4 */
            int                        numa_node;            /*    52     4 */
            u32                        btf_key_type_id;      /*    56     4 */
            u32                        btf_value_type_id;    /*    60     4 */
            /* --- cacheline 1 boundary (64 bytes) --- */
            struct btf *               btf;                  /*    64     8 */
            struct bpf_map_memory memory;                    /*    72    16 */
            bool                       unpriv_array;         /*    88     1 */
            bool                       frozen;               /*    89     1 */
    
            /* XXX 38 bytes hole, try to pack */
    
            /* --- cacheline 2 boundary (128 bytes) --- */
            atomic_t                   refcnt __attribute__((__aligned__(64))); /*   128     4 */
            atomic_t                   usercnt;              /*   132     4 */
            struct work_struct work;                         /*   136    32 */
            char                       name[16];             /*   168    16 */
    
            /* size: 192, cachelines: 3, members: 21 */
            /* sum members: 146, holes: 1, sum holes: 38 */
            /* padding: 8 */
            /* forced alignments: 2, forced holes: 1, sum forced holes: 38 */
    } __attribute__((__aligned__(64)));
    
    AFTER (same 3 cache lines, no extra padding now):
    struct bpf_map {
            const struct bpf_map_ops  * ops __attribute__((__aligned__(64))); /*     0     8 */
            struct bpf_map *           inner_map_meta;       /*     8     8 */
            void *                     security;             /*    16     8 */
            enum bpf_map_type  map_type;                     /*    24     4 */
            u32                        key_size;             /*    28     4 */
            u32                        value_size;           /*    32     4 */
            u32                        max_entries;          /*    36     4 */
            u32                        map_flags;            /*    40     4 */
            int                        spin_lock_off;        /*    44     4 */
            u32                        id;                   /*    48     4 */
            int                        numa_node;            /*    52     4 */
            u32                        btf_key_type_id;      /*    56     4 */
            u32                        btf_value_type_id;    /*    60     4 */
            /* --- cacheline 1 boundary (64 bytes) --- */
            struct btf *               btf;                  /*    64     8 */
            struct bpf_map_memory memory;                    /*    72    16 */
            bool                       unpriv_array;         /*    88     1 */
            bool                       frozen;               /*    89     1 */
    
            /* XXX 38 bytes hole, try to pack */
    
            /* --- cacheline 2 boundary (128 bytes) --- */
            atomic64_t                 refcnt __attribute__((__aligned__(64))); /*   128     8 */
            atomic64_t                 usercnt;              /*   136     8 */
            struct work_struct work;                         /*   144    32 */
            char                       name[16];             /*   176    16 */
    
            /* size: 192, cachelines: 3, members: 21 */
            /* sum members: 154, holes: 1, sum holes: 38 */
            /* forced alignments: 2, forced holes: 1, sum forced holes: 38 */
    } __attribute__((__aligned__(64)));
    
    This patch, while modifying all users of bpf_map_inc, also cleans up its
    interface to match bpf_map_put with separate operations for bpf_map_inc and
    bpf_map_inc_with_uref (to match bpf_map_put and bpf_map_put_with_uref,
    respectively). Also, given there are no users of bpf_map_inc_not_zero
    specifying uref=true, remove uref flag and default to uref=false internally.
    
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20191117172806.2195367-2-andriin@fb.com

commit a4c2fec16f5e6a5fee4865e6e0e91e2bc2d10f37
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Fri Nov 8 16:36:48 2019 +0800

    i2c: core: fix use after free in of_i2c_notify
    
    We can't use "adap->dev" after it has been freed.
    
    Fixes: 5bf4fa7daea6 ("i2c: break out OF support into separate file")
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit fe5e7ba11fcf1d75af8173836309e8562aefedef
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Thu Nov 14 09:49:11 2019 -0500

    gfs2: fix glock reference problem in gfs2_trans_remove_revoke
    
    Commit 9287c6452d2b fixed a situation in which gfs2 could use a glock
    after it had been freed. To do that, it temporarily added a new glock
    reference by calling gfs2_glock_hold in function gfs2_add_revoke.
    However, if the bd element was removed by gfs2_trans_remove_revoke, it
    failed to drop the additional reference.
    
    This patch adds logic to gfs2_trans_remove_revoke to properly drop the
    additional glock reference.
    
    Fixes: 9287c6452d2b ("gfs2: Fix occasional glock use-after-free")
    Cc: stable@vger.kernel.org # v5.2+
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>

commit da046d5f895fca18d63b15ac8faebd5bf784e23a
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 14:44:11 2019 +0800

    RDMA/i40iw: Fix potential use after free
    
    Release variable dst after logging dst->error to avoid possible use after
    free.
    
    Link: https://lore.kernel.org/r/1573022651-37171-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 960657b732e1ce21b07be5ab48a7ad3913d72ba4
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 14:23:54 2019 +0800

    RDMA/qedr: Fix potential use after free
    
    Move the release operation after error log to avoid possible use after
    free.
    
    Link: https://lore.kernel.org/r/1573021434-18768-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Acked-by: Michal Kalderon <michal.kalderon@marvell.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 4a33f21cef84b1b933958c99ed5dac1726214b35
Author: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
Date:   Wed Nov 13 11:06:47 2019 +0000

    qtnfmac: fix using skb after free
    
    KASAN reported use-after-free error:
    
    [  995.220767] BUG: KASAN: use-after-free in qtnf_cmd_send_with_reply+0x169/0x3e0 [qtnfmac]
    [  995.221098] Read of size 2 at addr ffff888213d1ded0 by task kworker/1:1/71
    
    The issue in qtnf_cmd_send_with_reply impacts all the commands that do
    not need response other then return code. For such commands, consume_skb
    is used for response skb and right after that return code in response
    skb is accessed.
    
    Signed-off-by: Sergey Matyukevich <sergey.matyukevich.os@quantenna.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 163b00cde7cf2206e248789d2780121ad5e6a70b
Author: Wei Wang <wvw@google.com>
Date:   Tue Nov 12 12:42:23 2019 -0800

    thermal: Fix deadlock in thermal thermal_zone_device_check
    
    1851799e1d29 ("thermal: Fix use-after-free when unregistering thermal zone
    device") changed cancel_delayed_work to cancel_delayed_work_sync to avoid
    a use-after-free issue. However, cancel_delayed_work_sync could be called
    insides the WQ causing deadlock.
    
    [54109.642398] c0   1162 kworker/u17:1   D    0 11030      2 0x00000000
    [54109.642437] c0   1162 Workqueue: thermal_passive_wq thermal_zone_device_check
    [54109.642447] c0   1162 Call trace:
    [54109.642456] c0   1162  __switch_to+0x138/0x158
    [54109.642467] c0   1162  __schedule+0xba4/0x1434
    [54109.642480] c0   1162  schedule_timeout+0xa0/0xb28
    [54109.642492] c0   1162  wait_for_common+0x138/0x2e8
    [54109.642511] c0   1162  flush_work+0x348/0x40c
    [54109.642522] c0   1162  __cancel_work_timer+0x180/0x218
    [54109.642544] c0   1162  handle_thermal_trip+0x2c4/0x5a4
    [54109.642553] c0   1162  thermal_zone_device_update+0x1b4/0x25c
    [54109.642563] c0   1162  thermal_zone_device_check+0x18/0x24
    [54109.642574] c0   1162  process_one_work+0x3cc/0x69c
    [54109.642583] c0   1162  worker_thread+0x49c/0x7c0
    [54109.642593] c0   1162  kthread+0x17c/0x1b0
    [54109.642602] c0   1162  ret_from_fork+0x10/0x18
    [54109.643051] c0   1162 kworker/u17:2   D    0 16245      2 0x00000000
    [54109.643067] c0   1162 Workqueue: thermal_passive_wq thermal_zone_device_check
    [54109.643077] c0   1162 Call trace:
    [54109.643085] c0   1162  __switch_to+0x138/0x158
    [54109.643095] c0   1162  __schedule+0xba4/0x1434
    [54109.643104] c0   1162  schedule_timeout+0xa0/0xb28
    [54109.643114] c0   1162  wait_for_common+0x138/0x2e8
    [54109.643122] c0   1162  flush_work+0x348/0x40c
    [54109.643131] c0   1162  __cancel_work_timer+0x180/0x218
    [54109.643141] c0   1162  handle_thermal_trip+0x2c4/0x5a4
    [54109.643150] c0   1162  thermal_zone_device_update+0x1b4/0x25c
    [54109.643159] c0   1162  thermal_zone_device_check+0x18/0x24
    [54109.643167] c0   1162  process_one_work+0x3cc/0x69c
    [54109.643177] c0   1162  worker_thread+0x49c/0x7c0
    [54109.643186] c0   1162  kthread+0x17c/0x1b0
    [54109.643195] c0   1162  ret_from_fork+0x10/0x18
    [54109.644500] c0   1162 cat             D    0  7766      1 0x00000001
    [54109.644515] c0   1162 Call trace:
    [54109.644524] c0   1162  __switch_to+0x138/0x158
    [54109.644536] c0   1162  __schedule+0xba4/0x1434
    [54109.644546] c0   1162  schedule_preempt_disabled+0x80/0xb0
    [54109.644555] c0   1162  __mutex_lock+0x3a8/0x7f0
    [54109.644563] c0   1162  __mutex_lock_slowpath+0x14/0x20
    [54109.644575] c0   1162  thermal_zone_get_temp+0x84/0x360
    [54109.644586] c0   1162  temp_show+0x30/0x78
    [54109.644609] c0   1162  dev_attr_show+0x5c/0xf0
    [54109.644628] c0   1162  sysfs_kf_seq_show+0xcc/0x1a4
    [54109.644636] c0   1162  kernfs_seq_show+0x48/0x88
    [54109.644656] c0   1162  seq_read+0x1f4/0x73c
    [54109.644664] c0   1162  kernfs_fop_read+0x84/0x318
    [54109.644683] c0   1162  __vfs_read+0x50/0x1bc
    [54109.644692] c0   1162  vfs_read+0xa4/0x140
    [54109.644701] c0   1162  SyS_read+0xbc/0x144
    [54109.644708] c0   1162  el0_svc_naked+0x34/0x38
    [54109.845800] c0   1162 D 720.000s 1->7766->7766 cat [panic]
    
    Fixes: 1851799e1d29 ("thermal: Fix use-after-free when unregistering thermal zone device")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wei Wang <wvw@google.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

commit 25fe97cb7620ef2e6b4f44ef0de4e371adf6c1d0
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Thu Nov 7 11:57:36 2019 +0100

    can: j1939: move j1939_priv_put() into sk_destruct callback
    
    This patch delays the j1939_priv_put() until the socket is destroyed via
    the sk_destruct callback, to avoid use-after-free problems.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>

commit 79aae6acbef16f720a7949f8fc6ac69816c79d62
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Nov 12 17:04:54 2019 -0800

    Input: cyttsp4_core - fix use after free bug
    
    The device md->input is used after it is released. Setting the device
    data to NULL is unnecessary as the device is never used again. Instead,
    md->input should be assigned NULL to avoid accessing the freed memory
    accidently. Besides, checking md->si against NULL is superfluous as it
    points to a variable address, which cannot be NULL.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/1572936379-6423-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit d231c15aff1eb4bde51036fb1e0aaec1706cf940
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Nov 11 11:43:19 2019 +0000

    drm/i915: Protect context while grabbing its name for the request
    
    Inside print_request(), we query the context/timeline name. Nothing
    immediately protects the context from being freed if the request is
    complete -- we rely on serialisation by the caller to keep the name
    valid until they finish using it. Inside intel_engine_dump(), we
    generally only print the requests in the execution queue protected by the
    engine->active.lock, but we also show the pending execlists ports which
    are not protected and so require a rcu_read_lock to keep the pointer
    valid.
    
    [ 1695.700883] BUG: KASAN: use-after-free in i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.700981] Read of size 8 at addr ffff8887344f4d50 by task gem_ctx_persist/2968
    [ 1695.701068]
    [ 1695.701156] CPU: 1 PID: 2968 Comm: gem_ctx_persist Tainted: G     U            5.4.0-rc6+ #331
    [ 1695.701246] Hardware name: Intel Corporation NUC7i5BNK/NUC7i5BNB, BIOS BNKBL357.86A.0052.2017.0918.1346 09/18/2017
    [ 1695.701334] Call Trace:
    [ 1695.701424]  dump_stack+0x5b/0x90
    [ 1695.701870]  ? i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.701964]  print_address_description.constprop.7+0x36/0x50
    [ 1695.702408]  ? i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.702856]  ? i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.702947]  __kasan_report.cold.10+0x1a/0x3a
    [ 1695.703390]  ? i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.703836]  i915_fence_get_timeline_name+0x53/0x90 [i915]
    [ 1695.704241]  print_request+0x82/0x2e0 [i915]
    [ 1695.704638]  ? fwtable_read32+0x133/0x360 [i915]
    [ 1695.705042]  ? write_timestamp+0x110/0x110 [i915]
    [ 1695.705133]  ? _raw_spin_lock_irqsave+0x79/0xc0
    [ 1695.705221]  ? refcount_inc_not_zero_checked+0x91/0x110
    [ 1695.705306]  ? refcount_dec_and_mutex_lock+0x50/0x50
    [ 1695.705709]  ? intel_engine_find_active_request+0x202/0x230 [i915]
    [ 1695.706115]  intel_engine_dump+0x2c9/0x900 [i915]
    
    Fixes: c36eebd9ba5d ("drm/i915/gt: execlists->active is serialised by the tasklet")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191111114323.5833-1-chris@chris-wilson.co.uk
    (cherry picked from commit fecffa4668cf62e679aeea8caa9d0f241f822578)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit df4a3e7f88e3b0d7ae46d70b9ff8e3c0ea730785
Author: Pi-Hsun Shih <pihsun@chromium.org>
Date:   Sun Nov 10 07:29:10 2019 +0100

    media: v4l2-ctrl: Lock main_hdl on operations of requests_queued.
    
    There's a race condition between the list_del_init in the
    v4l2_ctrl_request_complete, and the list_add_tail in the
    v4l2_ctrl_request_queue, since they can be called in different thread
    and the requests_queued list is not protected by a lock. This can lead
    to that the v4l2_ctrl_handler is still in the requests_queued list while
    the request_is_queued is already set to false, which would cause
    use-after-free if the v4l2_ctrl_handler is later released.
    
    Fix this by locking the ->lock of main_hdl (which is the owner of the
    requests_queued list) when doing list operations on the
    ->requests_queued list.
    
    Signed-off-by: Pi-Hsun Shih <pihsun@chromium.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit f45bca8c5052e8c59bab64ee90c44441678b9a52
Author: Quinn Tran <qutran@marvell.com>
Date:   Tue Nov 5 07:06:54 2019 -0800

    scsi: qla2xxx: Fix double scsi_done for abort path
    
    Current code assumes abort will remove the original command from the active
    list where scsi_done will not be called. Instead, the eh_abort thread will
    do the scsi_done. That is not the case.  Instead, we have a double
    scsi_done calls triggering use after free.
    
    Abort will tell FW to release the command from FW possesion. The original
    command will return to ULP with error in its normal fashion via scsi_done.
    eh_abort path would wait for the original command completion before
    returning.  eh_abort path will not perform the scsi_done call.
    
    Fixes: 219d27d7147e0 ("scsi: qla2xxx: Fix race conditions in the code for aborting SCSI commands")
    Cc: stable@vger.kernel.org # 5.2
    Link: https://lore.kernel.org/r/20191105150657.8092-6-hmadhani@marvell.com
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Quinn Tran <qutran@marvell.com>
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 6dcd5d7a7a29c1e4b8016a06aed78cd650cd8c27
Author: Alexander Popov <alex.popov@linux.com>
Date:   Sun Nov 3 23:17:19 2019 +0100

    media: vivid: Fix wrong locking that causes race conditions on streaming stop
    
    There is the same incorrect approach to locking implemented in
    vivid_stop_generating_vid_cap(), vivid_stop_generating_vid_out() and
    sdr_cap_stop_streaming().
    
    These functions are called during streaming stopping with vivid_dev.mutex
    locked. And they all do the same mistake while stopping their kthreads,
    which need to lock this mutex as well. See the example from
    vivid_stop_generating_vid_cap():
      /* shutdown control thread */
      vivid_grab_controls(dev, false);
      mutex_unlock(&dev->mutex);
      kthread_stop(dev->kthread_vid_cap);
      dev->kthread_vid_cap = NULL;
      mutex_lock(&dev->mutex);
    
    But when this mutex is unlocked, another vb2_fop_read() can lock it
    instead of vivid_thread_vid_cap() and manipulate the buffer queue.
    That causes a use-after-free access later.
    
    To fix those issues let's:
      1. avoid unlocking the mutex in vivid_stop_generating_vid_cap(),
    vivid_stop_generating_vid_out() and sdr_cap_stop_streaming();
      2. use mutex_trylock() with schedule_timeout_uninterruptible() in
    the loops of the vivid kthread handlers.
    
    Signed-off-by: Alexander Popov <alex.popov@linux.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Tested-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Cc: <stable@vger.kernel.org>      # for v3.18 and up
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 41d931459b53e32c67a1f8838d1e6826a69ee745
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 15:31:07 2019 +0800

    drm/i915/gvt: fix dropping obj reference twice
    
    The reference count of obj will be decremented twice if error occurs
    in dma_buf_fd(). Additionally, attempting to read the reference count of
    obj after dropping reference may lead to a use after free bug. Here, we
    drop obj's reference until it is not used.
    
    Fixes: e546e281d33d ("drm/i915/gvt: Dmabuf support for GVT-g")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 66d1b0c0580b7f1b1850ee4423f32ac42afa2e92
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Nov 6 14:28:21 2019 -0600

    usb: gadget: pch_udc: fix use after free
    
    Remove pointer dereference after free.
    
    pci_pool_free doesn't care about contents of td.
    It's just a void* for it
    
    Addresses-Coverity-ID: 1091173 ("Use after free")
    Cc: stable@vger.kernel.org
    Acked-by: Michal Nazarewicz <mina86@mina86.com>
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Link: https://lore.kernel.org/r/20191106202821.GA20347@embeddedor
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 946ab8db6953535a3a88c957db8328beacdfed9d
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 17:14:45 2019 +0800

    drm/amdgpu: fix potential double drop fence reference
    
    The object fence is not set to NULL after its reference is dropped. As a
    result, its reference may be dropped again if error occurs after that,
    which may lead to a use after free bug. To avoid the issue, fence is
    explicitly set to NULL after dropping its reference.
    
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 77cf98d4ec90e8c48592c6537cfc2281c58f7ac3
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Nov 1 13:47:56 2019 -0700

    Revert "RDMA/srpt: Postpone HCA removal until after configfs directory removal"
    
    Although the mentioned patch fixes a use-after-free bug, it introduces a
    hang during shutdown. Since the latter is worse, revert this patch.
    
    Link: https://lore.kernel.org/r/20191101204756.182162-1-bvanassche@acm.org
    Reported-by: Honggang Li <honli@redhat.com>
    Fixes: 9b64f7d0bb0a ("RDMA/srpt: Postpone HCA removal until after configfs directory removal")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: Honggang Li <honli@redhat.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit ec990306f77fd4c58c3b27cc3b3c53032d6e6670
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Nov 4 23:26:22 2019 +0800

    scsi: fnic: fix use after free
    
    The memory chunk io_req is released by mempool_free. Accessing
    io_req->start_time will result in a use after free bug. The variable
    start_time is a backup of the timestamp. So, use start_time here to
    avoid use after free.
    
    Link: https://lore.kernel.org/r/1572881182-37664-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Satish Kharat <satishkh@cisco.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 6f2a35d65b3c4bbc579a115589edcc7ed6239dce
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Nov 5 00:56:06 2019 +0300

    PM / devfreq: tegra30: Move clk-notifier's registration to governor's start
    
    There is no point in receiving of the notifications while governor is
    stopped, let's keep them disabled like we do for the CPU freq-change
    notifications. This also fixes a potential use-after-free bug if
    notification happens after device's removal.
    
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Peter Geis <pgwipeout@gmail.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>

commit e7a86c687e64ab24f88330ad24ecc9442ce40c5a
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Mon Nov 4 17:54:22 2019 -0700

    net: qualcomm: rmnet: Fix potential UAF when unregistering
    
    During the exit/unregistration process of the RmNet driver, the function
    rmnet_unregister_real_device() is called to handle freeing the driver's
    internal state and removing the RX handler on the underlying physical
    device. However, the order of operations this function performs is wrong
    and can lead to a use after free of the rmnet_port structure.
    
    Before calling netdev_rx_handler_unregister(), this port structure is
    freed with kfree(). If packets are received on any RmNet devices before
    synchronize_net() completes, they will attempt to use this already-freed
    port structure when processing the packet. As such, before cleaning up any
    other internal state, the RX handler must be unregistered in order to
    guarantee that no further packets will arrive on the device.
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e684000b8a2b1e14b9f8ebd72dfd998d44a864ca
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sat Nov 2 20:17:39 2019 -0700

    net: dsa: bcm_sf2: Fix driver removal
    
    With the DSA core doing the call to dsa_port_disable() we do not need to
    do that within the driver itself. This could cause an use after free
    since past dsa_unregister_switch() we should not be accessing any
    dsa_switch internal structures.
    
    Fixes: 0394a63acfe2 ("net: dsa: enable and disable all ports")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c058f6dfeb1c645e77dc89d1690848ca06f45735
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Sat Nov 2 20:13:26 2019 -0700

    net: dsa: Fix use after free in dsa_switch_remove()
    
    The order in which the ports are deleted from the list and freed and the
    call to dsa_switch_remove() is done is reversed, which leads to an
    use after free condition. Reverse the two: first tear down the ports and
    switch from the fabric, then free the ports associated with that switch
    fabric.
    
    Fixes: 05f294a85235 ("net: dsa: allocate ports on touch")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7aa39a2ed0112d07fc277ebd24a08a7b2368ab9
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Nov 5 22:49:11 2019 +0800

    staging: rtl8192e: fix potential use after free
    
    The variable skb is released via kfree_skb() when the return value of
    _rtl92e_tx is not zero. However, after that, skb is accessed again to
    read its length, which may result in a use after free bug. This patch
    fixes the bug by moving the release operation to where skb is never
    used later.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1572965351-6745-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3759739426186a924675651b388d1c3963c5710e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:14 2019 +0200

    can: usb_8dev: fix use-after-free on disconnect
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 0024d8ad1639 ("can: usb_8dev: Add support for USB2CAN interface from 8 devices")
    Cc: stable <stable@vger.kernel.org>     # 3.9
    Cc: Bernd Krumboeck <b.krumboeck@gmail.com>
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 4d6636498c41891d0482a914dd570343a838ad79
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 1 12:29:13 2019 +0200

    can: mcba_usb: fix use-after-free on disconnect
    
    The driver was accessing its driver data after having freed it.
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Cc: stable <stable@vger.kernel.org>     # 4.12
    Cc: Remigiusz Kołłątaj <remigiusz.kollataj@mobica.com>
    Reported-by: syzbot+e29b17e5042bbc56fae9@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commits)
      usb: dwc3: gadget: fix race when disabling ep with cancelled xfers
      usb: cdns3: gadget: Fix g_audio use case when connected to Super-Speed host
      usb: cdns3: gadget: reset EP_CLAIMED flag while unloading
      USB: serial: whiteheat: fix line-speed endianness
      USB: serial: whiteheat: fix potential slab corruption
      USB: gadget: Reject endpoints with 0 maxpacket value
      UAS: Revert commit 3ae62a42090f ("UAS: fix alignment of scatter/gather segments")
      usb-storage: Revert commit 747668dbc061 ("usb-storage: Set virt_boundary_mask to avoid SG overflows")
      usbip: Fix free of unallocated memory in vhci tx
      usbip: tools: Fix read_usb_vudc_device() error path handling
      usb: xhci: fix __le32/__le64 accessors in debugfs code
      usb: xhci: fix Immediate Data Transfer endianness
      xhci: Fix use-after-free regression in xhci clear hub TT implementation
      USB: ldusb: fix control-message timeout
      USB: ldusb: use unsigned size format specifiers
      USB: ldusb: fix ring-buffer locking
      USB: Skip endpoints with 0 maxpacket length
      usb: cdns3: gadget: Don't manage pullups
      usb: dwc3: remove the call trace of USBx_GFLADJ
      usb: gadget: configfs: fix concurrent issue between composite APIs
      ...

commits)
      net: fix installing orphaned programs
      net: cls_bpf: fix NULL deref on offload filter removal
      selftests: bpf: Skip write only files in debugfs
      selftests: net: reuseport_dualstack: fix uninitalized parameter
      r8169: fix wrong PHY ID issue with RTL8168dp
      net: dsa: bcm_sf2: Fix IMP setup for port different than 8
      net: phylink: Fix phylink_dbg() macro
      gve: Fixes DMA synchronization.
      inet: stop leaking jiffies on the wire
      ixgbe: Remove duplicate clear_bit() call
      Documentation: networking: device drivers: Remove stray asterisks
      e1000: fix memory leaks
      i40e: Fix receive buffer starvation for AF_XDP
      igb: Fix constant media auto sense switching when no cable is connected
      net: ethernet: arc: add the missed clk_disable_unprepare
      igb: Enable media autosense for the i350.
      igb/igc: Don't warn on fatal read failures when the device is removed
      tcp: increase tcp_max_syn_backlog max value
      net: increase SOMAXCONN to 4096
      netdevsim: Fix use-after-free during device dismantle
      ...

commit 6d6f0383b697f004c65823c2b64240912f18515d
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Oct 31 18:20:30 2019 +0200

    netdevsim: Fix use-after-free during device dismantle
    
    Commit da58f90f11f5 ("netdevsim: Add devlink-trap support") added
    delayed work to netdevsim that periodically iterates over the registered
    netdevsim ports and reports various packet traps via devlink.
    
    While the delayed work takes the 'port_list_lock' mutex to protect
    against concurrent addition / deletion of ports, during device creation
    / dismantle ports are added / deleted without this lock, which can
    result in a use-after-free [1].
    
    Fix this by making sure that the ports list is always modified under the
    lock.
    
    [1]
    [   59.205543] ==================================================================
    [   59.207748] BUG: KASAN: use-after-free in nsim_dev_trap_report_work+0xa67/0xad0
    [   59.210247] Read of size 8 at addr ffff8883cbdd3398 by task kworker/3:1/38
    [   59.212584]
    [   59.213148] CPU: 3 PID: 38 Comm: kworker/3:1 Not tainted 5.4.0-rc3-custom-16119-ge6abb5f0261e #2013
    [   59.215896] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20180724_192412-buildhw-07.phx2.fedoraproject.org-1.fc29 04/01/2014
    [   59.218384] Workqueue: events nsim_dev_trap_report_work
    [   59.219428] Call Trace:
    [   59.219924]  dump_stack+0xa9/0x10e
    [   59.220623]  print_address_description.constprop.4+0x21/0x340
    [   59.221976]  ? vprintk_func+0x66/0x240
    [   59.222752]  __kasan_report.cold.8+0x78/0x91
    [   59.223602]  ? nsim_dev_trap_report_work+0xa67/0xad0
    [   59.224603]  kasan_report+0xe/0x20
    [   59.225296]  nsim_dev_trap_report_work+0xa67/0xad0
    [   59.226435]  ? rcu_read_lock_sched_held+0xaf/0xe0
    [   59.227512]  ? trace_event_raw_event_rcu_quiescent_state_report+0x360/0x360
    [   59.228851]  process_one_work+0x98f/0x1760
    [   59.229684]  ? pwq_dec_nr_in_flight+0x330/0x330
    [   59.230656]  worker_thread+0x91/0xc40
    [   59.231587]  ? process_one_work+0x1760/0x1760
    [   59.232451]  kthread+0x34a/0x410
    [   59.233104]  ? __kthread_queue_delayed_work+0x240/0x240
    [   59.234141]  ret_from_fork+0x3a/0x50
    [   59.234982]
    [   59.235371] Allocated by task 187:
    [   59.236189]  save_stack+0x19/0x80
    [   59.236853]  __kasan_kmalloc.constprop.5+0xc1/0xd0
    [   59.237822]  kmem_cache_alloc_trace+0x14c/0x380
    [   59.238769]  __nsim_dev_port_add+0xaf/0x5c0
    [   59.239627]  nsim_dev_probe+0x4fc/0x1140
    [   59.240550]  really_probe+0x264/0xc00
    [   59.241418]  driver_probe_device+0x208/0x2e0
    [   59.242255]  __device_attach_driver+0x215/0x2d0
    [   59.243150]  bus_for_each_drv+0x154/0x1d0
    [   59.243944]  __device_attach+0x1ba/0x2b0
    [   59.244923]  bus_probe_device+0x1dd/0x290
    [   59.245805]  device_add+0xbac/0x1550
    [   59.246528]  new_device_store+0x1f4/0x400
    [   59.247306]  bus_attr_store+0x7b/0xa0
    [   59.248047]  sysfs_kf_write+0x10f/0x170
    [   59.248941]  kernfs_fop_write+0x283/0x430
    [   59.249843]  __vfs_write+0x81/0x100
    [   59.250546]  vfs_write+0x1ce/0x510
    [   59.251190]  ksys_write+0x104/0x200
    [   59.251873]  do_syscall_64+0xa4/0x4e0
    [   59.252642]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   59.253837]
    [   59.254203] Freed by task 187:
    [   59.254811]  save_stack+0x19/0x80
    [   59.255463]  __kasan_slab_free+0x125/0x170
    [   59.256265]  kfree+0x100/0x440
    [   59.256870]  nsim_dev_remove+0x98/0x100
    [   59.257651]  nsim_bus_remove+0x16/0x20
    [   59.258382]  device_release_driver_internal+0x20b/0x4d0
    [   59.259588]  bus_remove_device+0x2e9/0x5a0
    [   59.260551]  device_del+0x410/0xad0
    [   59.263777]  device_unregister+0x26/0xc0
    [   59.264616]  nsim_bus_dev_del+0x16/0x60
    [   59.265381]  del_device_store+0x2d6/0x3c0
    [   59.266295]  bus_attr_store+0x7b/0xa0
    [   59.267192]  sysfs_kf_write+0x10f/0x170
    [   59.267960]  kernfs_fop_write+0x283/0x430
    [   59.268800]  __vfs_write+0x81/0x100
    [   59.269551]  vfs_write+0x1ce/0x510
    [   59.270252]  ksys_write+0x104/0x200
    [   59.270910]  do_syscall_64+0xa4/0x4e0
    [   59.271680]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   59.272812]
    [   59.273211] The buggy address belongs to the object at ffff8883cbdd3200
    [   59.273211]  which belongs to the cache kmalloc-512 of size 512
    [   59.275838] The buggy address is located 408 bytes inside of
    [   59.275838]  512-byte region [ffff8883cbdd3200, ffff8883cbdd3400)
    [   59.278151] The buggy address belongs to the page:
    [   59.279215] page:ffffea000f2f7400 refcount:1 mapcount:0 mapping:ffff8883ecc0ce00 index:0x0 compound_mapcount: 0
    [   59.281449] flags: 0x200000000010200(slab|head)
    [   59.282356] raw: 0200000000010200 ffffea000f2f3a08 ffffea000f2fd608 ffff8883ecc0ce00
    [   59.283949] raw: 0000000000000000 0000000000150015 00000001ffffffff 0000000000000000
    [   59.285608] page dumped because: kasan: bad access detected
    [   59.286981]
    [   59.287337] Memory state around the buggy address:
    [   59.288310]  ffff8883cbdd3280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   59.289763]  ffff8883cbdd3300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   59.291452] >ffff8883cbdd3380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   59.292945]                             ^
    [   59.293815]  ffff8883cbdd3400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   59.295220]  ffff8883cbdd3480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   59.296872] ==================================================================
    
    Fixes: da58f90f11f5 ("netdevsim: Add devlink-trap support")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: syzbot+9ed8f68ab30761f3678e@syzkaller.appspotmail.com
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 130f4caf145c3562108b245a576db30b916199d2
Author: John Garry <john.garry@huawei.com>
Date:   Wed Oct 16 18:19:52 2019 +0800

    libata: Ensure ata_port probe has completed before detach
    
    With CONFIG_DEBUG_TEST_DRIVER_REMOVE set, we may find the following WARN:
    
    [   23.452574] ------------[ cut here ]------------
    [   23.457190] WARNING: CPU: 59 PID: 1 at drivers/ata/libata-core.c:6676 ata_host_detach+0x15c/0x168
    [   23.466047] Modules linked in:
    [   23.469092] CPU: 59 PID: 1 Comm: swapper/0 Not tainted 5.4.0-rc1-00010-g5b83fd27752b-dirty #296
    [   23.477776] Hardware name: Huawei D06 /D06, BIOS Hisilicon D06 UEFI RC0 - V1.16.01 03/15/2019
    [   23.486286] pstate: a0c00009 (NzCv daif +PAN +UAO)
    [   23.491065] pc : ata_host_detach+0x15c/0x168
    [   23.495322] lr : ata_host_detach+0x88/0x168
    [   23.499491] sp : ffff800011cabb50
    [   23.502792] x29: ffff800011cabb50 x28: 0000000000000007
    [   23.508091] x27: ffff80001137f068 x26: ffff8000112c0c28
    [   23.513390] x25: 0000000000003848 x24: ffff0023ea185300
    [   23.518689] x23: 0000000000000001 x22: 00000000000014c0
    [   23.523987] x21: 0000000000013740 x20: ffff0023bdc20000
    [   23.529286] x19: 0000000000000000 x18: 0000000000000004
    [   23.534584] x17: 0000000000000001 x16: 00000000000000f0
    [   23.539883] x15: ffff0023eac13790 x14: ffff0023eb76c408
    [   23.545181] x13: 0000000000000000 x12: ffff0023eac13790
    [   23.550480] x11: ffff0023eb76c228 x10: 0000000000000000
    [   23.555779] x9 : ffff0023eac13798 x8 : 0000000040000000
    [   23.561077] x7 : 0000000000000002 x6 : 0000000000000001
    [   23.566376] x5 : 0000000000000002 x4 : 0000000000000000
    [   23.571674] x3 : ffff0023bf08a0bc x2 : 0000000000000000
    [   23.576972] x1 : 3099674201f72700 x0 : 0000000000400284
    [   23.582272] Call trace:
    [   23.584706]  ata_host_detach+0x15c/0x168
    [   23.588616]  ata_pci_remove_one+0x10/0x18
    [   23.592615]  ahci_remove_one+0x20/0x40
    [   23.596356]  pci_device_remove+0x3c/0xe0
    [   23.600267]  really_probe+0xdc/0x3e0
    [   23.603830]  driver_probe_device+0x58/0x100
    [   23.608000]  device_driver_attach+0x6c/0x90
    [   23.612169]  __driver_attach+0x84/0xc8
    [   23.615908]  bus_for_each_dev+0x74/0xc8
    [   23.619730]  driver_attach+0x20/0x28
    [   23.623292]  bus_add_driver+0x148/0x1f0
    [   23.627115]  driver_register+0x60/0x110
    [   23.630938]  __pci_register_driver+0x40/0x48
    [   23.635199]  ahci_pci_driver_init+0x20/0x28
    [   23.639372]  do_one_initcall+0x5c/0x1b0
    [   23.643199]  kernel_init_freeable+0x1a4/0x24c
    [   23.647546]  kernel_init+0x10/0x108
    [   23.651023]  ret_from_fork+0x10/0x18
    [   23.654590] ---[ end trace 634a14b675b71c13 ]---
    
    With KASAN also enabled, we may also get many use-after-free reports.
    
    The issue is that when CONFIG_DEBUG_TEST_DRIVER_REMOVE is set, we may
    attempt to detach the ata_port before it has been probed.
    
    This is because the ata_ports are async probed, meaning that there is no
    guarantee that the ata_port has probed prior to detach. When the ata_port
    does probe in this scenario, we get all sorts of issues as the detach may
    have already happened.
    
    Fix by ensuring synchronisation with async_synchronize_full(). We could
    alternatively use the cookie returned from the ata_port probe
    async_schedule() call, but that means managing the cookie, so more
    complicated.
    
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit b7265a0df82c1716bf788096217083ed65a8bb14
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Wed Oct 30 11:04:22 2019 +0200

    mlxsw: core: Unpublish devlink parameters during reload
    
    The devlink parameter "acl_region_rehash_interval" is a runtime
    parameter whose value is stored in a dynamically allocated memory. While
    reloading the driver, this memory is freed and then allocated again. A
    use-after-free might happen if during this time frame someone tries to
    retrieve its value.
    
    Since commit 070c63f20f6c ("net: devlink: allow to change namespaces
    during reload") the use-after-free can be reliably triggered when
    reloading the driver into a namespace, as after freeing the memory (via
    reload_down() callback) all the parameters are notified.
    
    Fix this by unpublishing and then re-publishing the parameters during
    reload.
    
    Fixes: 98bbf70c1c41 ("mlxsw: spectrum: add "acl_region_rehash_interval" devlink param")
    Fixes: 7c62cfb8c574 ("devlink: publish params only after driver init is done")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a4b6526236791a1bb8092079ad87a1629e78db5
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Tue Sep 10 14:38:17 2019 +0300

    net/mlx5e: Don't store direct pointer to action's tunnel info
    
    Geneve implementation changed mlx5 tc to user direct pointer to tunnel_key
    action's internal struct ip_tunnel_info instance. However, this leads to
    use-after-free error when initial filter that caused creation of new encap
    entry is deleted or when tunnel_key action is manually overwritten through
    action API. Moreover, with recent TC offloads API unlocking change struct
    flow_action_entry->tunnel point to temporal copy of tunnel info that is
    deallocated after filter is offloaded to hardware which causes bug to
    reproduce every time new filter is attached to existing encap entry with
    following KASAN bug:
    
    [  314.885555] ==================================================================
    [  314.886641] BUG: KASAN: use-after-free in memcmp+0x2c/0x60
    [  314.886864] Read of size 1 at addr ffff88886c746280 by task tc/2682
    
    [  314.887179] CPU: 22 PID: 2682 Comm: tc Not tainted 5.3.0-rc7+ #703
    [  314.887188] Hardware name: Supermicro SYS-2028TP-DECR/X10DRT-P, BIOS 2.0b 03/30/2017
    [  314.887195] Call Trace:
    [  314.887215]  dump_stack+0x9a/0xf0
    [  314.887236]  print_address_description+0x67/0x323
    [  314.887248]  ? memcmp+0x2c/0x60
    [  314.887257]  ? memcmp+0x2c/0x60
    [  314.887272]  __kasan_report.cold+0x1a/0x3d
    [  314.887474]  ? __mlx5e_tc_del_fdb_peer_flow+0x100/0x1b0 [mlx5_core]
    [  314.887484]  ? memcmp+0x2c/0x60
    [  314.887509]  kasan_report+0xe/0x12
    [  314.887521]  memcmp+0x2c/0x60
    [  314.887662]  mlx5e_tc_add_fdb_flow+0x51b/0xbe0 [mlx5_core]
    [  314.887838]  ? mlx5e_encap_take+0x110/0x110 [mlx5_core]
    [  314.887902]  ? lockdep_init_map+0x87/0x2c0
    [  314.887924]  ? __init_waitqueue_head+0x4f/0x60
    [  314.888062]  ? mlx5e_alloc_flow.isra.0+0x18c/0x1c0 [mlx5_core]
    [  314.888207]  __mlx5e_add_fdb_flow+0x2d7/0x440 [mlx5_core]
    [  314.888359]  ? mlx5e_tc_update_neigh_used_value+0x6f0/0x6f0 [mlx5_core]
    [  314.888374]  ? match_held_lock+0x2e/0x240
    [  314.888537]  mlx5e_configure_flower+0x830/0x16a0 [mlx5_core]
    [  314.888702]  ? __mlx5e_add_fdb_flow+0x440/0x440 [mlx5_core]
    [  314.888713]  ? down_read+0x118/0x2c0
    [  314.888728]  ? down_read_killable+0x300/0x300
    [  314.888882]  ? mlx5e_rep_get_ethtool_stats+0x180/0x180 [mlx5_core]
    [  314.888899]  tc_setup_cb_add+0x127/0x270
    [  314.888937]  fl_hw_replace_filter+0x2ac/0x380 [cls_flower]
    [  314.888976]  ? fl_hw_destroy_filter+0x1b0/0x1b0 [cls_flower]
    [  314.888990]  ? fl_change+0xbcf/0x27ef [cls_flower]
    [  314.889030]  ? fl_change+0xa57/0x27ef [cls_flower]
    [  314.889069]  fl_change+0x16bd/0x27ef [cls_flower]
    [  314.889135]  ? __rhashtable_insert_fast.constprop.0+0xa00/0xa00 [cls_flower]
    [  314.889167]  ? __radix_tree_lookup+0xa4/0x130
    [  314.889200]  ? fl_get+0x169/0x240 [cls_flower]
    [  314.889218]  ? fl_walk+0x230/0x230 [cls_flower]
    [  314.889249]  tc_new_tfilter+0x5e1/0xd40
    [  314.889281]  ? __rhashtable_insert_fast.constprop.0+0xa00/0xa00 [cls_flower]
    [  314.889309]  ? tc_del_tfilter+0xa30/0xa30
    [  314.889335]  ? __lock_acquire+0x5b5/0x2460
    [  314.889378]  ? find_held_lock+0x85/0xa0
    [  314.889442]  ? tc_del_tfilter+0xa30/0xa30
    [  314.889465]  rtnetlink_rcv_msg+0x4ab/0x5f0
    [  314.889488]  ? rtnl_dellink+0x490/0x490
    [  314.889518]  ? lockdep_hardirqs_on+0x260/0x260
    [  314.889538]  ? netlink_deliver_tap+0xab/0x5a0
    [  314.889550]  ? match_held_lock+0x1b/0x240
    [  314.889575]  netlink_rcv_skb+0xd0/0x200
    [  314.889588]  ? rtnl_dellink+0x490/0x490
    [  314.889605]  ? netlink_ack+0x440/0x440
    [  314.889635]  ? netlink_deliver_tap+0x161/0x5a0
    [  314.889648]  ? lock_downgrade+0x360/0x360
    [  314.889657]  ? lock_acquire+0xe5/0x210
    [  314.889686]  netlink_unicast+0x296/0x350
    [  314.889707]  ? netlink_attachskb+0x390/0x390
    [  314.889726]  ? _copy_from_iter_full+0xe0/0x3a0
    [  314.889738]  ? __virt_addr_valid+0xbb/0x130
    [  314.889771]  netlink_sendmsg+0x394/0x600
    [  314.889800]  ? netlink_unicast+0x350/0x350
    [  314.889817]  ? move_addr_to_kernel.part.0+0x90/0x90
    [  314.889852]  ? netlink_unicast+0x350/0x350
    [  314.889872]  sock_sendmsg+0x96/0xa0
    [  314.889891]  ___sys_sendmsg+0x482/0x520
    [  314.889919]  ? copy_msghdr_from_user+0x250/0x250
    [  314.889930]  ? __fput+0x1fa/0x390
    [  314.889941]  ? task_work_run+0xb7/0xf0
    [  314.889957]  ? exit_to_usermode_loop+0x117/0x120
    [  314.889972]  ? entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  314.889982]  ? do_syscall_64+0x74/0xe0
    [  314.889992]  ? entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  314.890012]  ? mark_lock+0xac/0x9a0
    [  314.890028]  ? __lock_acquire+0x5b5/0x2460
    [  314.890053]  ? mark_lock+0xac/0x9a0
    [  314.890083]  ? __lock_acquire+0x5b5/0x2460
    [  314.890112]  ? match_held_lock+0x1b/0x240
    [  314.890144]  ? __fget_light+0xa1/0xf0
    [  314.890166]  ? sockfd_lookup_light+0x91/0xb0
    [  314.890187]  __sys_sendmsg+0xba/0x130
    [  314.890201]  ? __sys_sendmsg_sock+0xb0/0xb0
    [  314.890225]  ? __blkcg_punt_bio_submit+0xd0/0xd0
    [  314.890264]  ? lockdep_hardirqs_off+0xbe/0x100
    [  314.890274]  ? mark_held_locks+0x24/0x90
    [  314.890286]  ? do_syscall_64+0x1e/0xe0
    [  314.890308]  do_syscall_64+0x74/0xe0
    [  314.890325]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  314.890336] RIP: 0033:0x7f00ca33d7b8
    [  314.890348] Code: 89 02 48 c7 c0 ff ff ff ff eb bb 0f 1f 80 00 00 00 00 f3 0f 1e fa 48 8d 05 65 8f 0c 00 8b 00 85 c0 75 17 b8 2e 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 58 c3 0f 1f 80 00 00 00 00 48 83 ec 28 89 5
    4
    [  314.890356] RSP: 002b:00007ffea2983928 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    [  314.890369] RAX: ffffffffffffffda RBX: 000000005d777d5b RCX: 00007f00ca33d7b8
    [  314.890377] RDX: 0000000000000000 RSI: 00007ffea2983990 RDI: 0000000000000003
    [  314.890384] RBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000006
    [  314.890392] R10: 0000000000404eda R11: 0000000000000246 R12: 0000000000000001
    [  314.890400] R13: 000000000047f640 R14: 00007ffea2987b58 R15: 0000000000000021
    
    [  314.890529] Allocated by task 2687:
    [  314.890684]  save_stack+0x1b/0x80
    [  314.890694]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [  314.890705]  __kmalloc_track_caller+0x102/0x340
    [  314.890721]  kmemdup+0x1d/0x40
    [  314.890730]  tc_setup_flow_action+0x731/0x2c27
    [  314.890743]  fl_hw_replace_filter+0x23b/0x380 [cls_flower]
    [  314.890756]  fl_change+0x16bd/0x27ef [cls_flower]
    [  314.890765]  tc_new_tfilter+0x5e1/0xd40
    [  314.890776]  rtnetlink_rcv_msg+0x4ab/0x5f0
    [  314.890786]  netlink_rcv_skb+0xd0/0x200
    [  314.890796]  netlink_unicast+0x296/0x350
    [  314.890805]  netlink_sendmsg+0x394/0x600
    [  314.890815]  sock_sendmsg+0x96/0xa0
    [  314.890825]  ___sys_sendmsg+0x482/0x520
    [  314.890834]  __sys_sendmsg+0xba/0x130
    [  314.890844]  do_syscall_64+0x74/0xe0
    [  314.890854]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  314.890937] Freed by task 2687:
    [  314.891076]  save_stack+0x1b/0x80
    [  314.891086]  __kasan_slab_free+0x12c/0x170
    [  314.891095]  kfree+0xeb/0x2f0
    [  314.891106]  tc_cleanup_flow_action+0x69/0xa0
    [  314.891119]  fl_hw_replace_filter+0x2c5/0x380 [cls_flower]
    [  314.891132]  fl_change+0x16bd/0x27ef [cls_flower]
    [  314.891140]  tc_new_tfilter+0x5e1/0xd40
    [  314.891151]  rtnetlink_rcv_msg+0x4ab/0x5f0
    [  314.891161]  netlink_rcv_skb+0xd0/0x200
    [  314.891170]  netlink_unicast+0x296/0x350
    [  314.891180]  netlink_sendmsg+0x394/0x600
    [  314.891190]  sock_sendmsg+0x96/0xa0
    [  314.891200]  ___sys_sendmsg+0x482/0x520
    [  314.891208]  __sys_sendmsg+0xba/0x130
    [  314.891218]  do_syscall_64+0x74/0xe0
    [  314.891228]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  314.891315] The buggy address belongs to the object at ffff88886c746280
                    which belongs to the cache kmalloc-96 of size 96
    [  314.891762] The buggy address is located 0 bytes inside of
                    96-byte region [ffff88886c746280, ffff88886c7462e0)
    [  314.892196] The buggy address belongs to the page:
    [  314.892387] page:ffffea0021b1d180 refcount:1 mapcount:0 mapping:ffff88835d00ef80 index:0x0
    [  314.892398] flags: 0x57ffffc0000200(slab)
    [  314.892413] raw: 0057ffffc0000200 ffffea00219e0340 0000000800000008 ffff88835d00ef80
    [  314.892423] raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000
    [  314.892430] page dumped because: kasan: bad access detected
    
    [  314.892515] Memory state around the buggy address:
    [  314.892707]  ffff88886c746180: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
    [  314.892976]  ffff88886c746200: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
    [  314.893251] >ffff88886c746280: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
    [  314.893522]                    ^
    [  314.893657]  ffff88886c746300: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
    [  314.893924]  ffff88886c746380: 00 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc
    [  314.894189] ==================================================================
    
    Fix the issue by duplicating tunnel info into per-encap copy that is
    deallocated with encap structure. Also, duplicate tunnel info in flow parse
    attribute to support cases when flow might be attached asynchronously.
    
    Fixes: 1f6da30697d0 ("net/mlx5e: Geneve, Keep tunnel info as pointer to the original struct")
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Reviewed-by: Yevgeny Kliteynik <kliteyn@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit ea60ed6fcf29eebc78f2ce91491e6309ee005a01
Author: Luis Henriques <lhenriques@suse.com>
Date:   Fri Oct 25 14:05:24 2019 +0100

    ceph: fix use-after-free in __ceph_remove_cap()
    
    KASAN reports a use-after-free when running xfstest generic/531, with the
    following trace:
    
    [  293.903362]  kasan_report+0xe/0x20
    [  293.903365]  rb_erase+0x1f/0x790
    [  293.903370]  __ceph_remove_cap+0x201/0x370
    [  293.903375]  __ceph_remove_caps+0x4b/0x70
    [  293.903380]  ceph_evict_inode+0x4e/0x360
    [  293.903386]  evict+0x169/0x290
    [  293.903390]  __dentry_kill+0x16f/0x250
    [  293.903394]  dput+0x1c6/0x440
    [  293.903398]  __fput+0x184/0x330
    [  293.903404]  task_work_run+0xb9/0xe0
    [  293.903410]  exit_to_usermode_loop+0xd3/0xe0
    [  293.903413]  do_syscall_64+0x1a0/0x1c0
    [  293.903417]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This happens because __ceph_remove_cap() may queue a cap release
    (__ceph_queue_cap_release) which can be scheduled before that cap is
    removed from the inode list with
    
            rb_erase(&cap->ci_node, &ci->i_caps);
    
    And, when this finally happens, the use-after-free will occur.
    
    This can be fixed by removing the cap from the inode list before being
    removed from the session list, and thus eliminating the risk of an UAF.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 18b74067ac78a2dea65783314c13df98a53d071c
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Oct 25 17:30:27 2019 +0300

    xhci: Fix use-after-free regression in xhci clear hub TT implementation
    
    commit ef513be0a905 ("usb: xhci: Add Clear_TT_Buffer") schedules work
    to clear TT buffer, but causes a use-after-free regression at the same time
    
    Make sure hub_tt_work finishes before endpoint is disabled, otherwise
    the work will dereference already freed endpoint and device related
    pointers.
    
    This was triggered when usb core failed to read the configuration
    descriptor of a FS/LS device during enumeration.
    xhci driver queued clear_tt_work while usb core freed and reallocated
    a new device for the next enumeration attempt.
    
    EHCI driver implents ehci_endpoint_disable() that makes sure
    clear_tt_work has finished before it returns, but xhci lacks this support.
    usb core will call hcd->driver->endpoint_disable() callback before
    disabling endpoints, so we want this in xhci as well.
    
    The added xhci_endpoint_disable() is based on ehci_endpoint_disable()
    
    Fixes: ef513be0a905 ("usb: xhci: Add Clear_TT_Buffer")
    Cc: <stable@vger.kernel.org> # v5.3
    Reported-by: Johan Hovold <johan@kernel.org>
    Suggested-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Tested-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/1572013829-14044-2-git-send-email-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 044c1ab399afbe9f2ebef49a3204ef1509826dc7
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Oct 28 09:15:33 2019 -0600

    io_uring: don't touch ctx in setup after ring fd install
    
    syzkaller reported an issue where it looks like a malicious app can
    trigger a use-after-free of reading the ctx ->sq_array and ->rings
    value right after having installed the ring fd in the process file
    table.
    
    Defer ring fd installation until after we're done reading those
    values.
    
    Fixes: 75b28affdd6a ("io_uring: allocate the two rings together")
    Reported-by: syzbot+6f03d895a6cd0d06187f@syzkaller.appspotmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commits during the last 11 day(s) which contain
    a total of 7 files changed, 66 insertions(+), 16 deletions(-).
    
    The main changes are:
    
    1) Fix two use-after-free bugs in relation to RCU in jited symbol exposure to
       kallsyms, from Daniel Borkmann.
    
    2) Fix NULL pointer dereference in AF_XDP rx-only sockets, from Magnus Karlsson.
    
    3) Fix hang in netdev unregister for hash based devmap as well as another overflow
       bug on 32 bit archs in memlock cost calculation, from Toke Høiland-Jørgensen.
    
    4) Fix wrong memory access in LWT BPF programs on reroute due to invalid dst.
       Also fix BPF selftests to use more compatible nc options, from Jiri Benc.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ad88b7a6aa3e6ac94589fc1aaf7c99fe9211cff2
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Oct 22 18:56:42 2019 +0200

    netfilter: ecache: don't look for ecache extension on dying/unconfirmed conntracks
    
    syzbot reported following splat:
    BUG: KASAN: use-after-free in __nf_ct_ext_exist
    include/net/netfilter/nf_conntrack_extend.h:53 [inline]
    BUG: KASAN: use-after-free in nf_ct_deliver_cached_events+0x5c3/0x6d0
    net/netfilter/nf_conntrack_ecache.c:205
    nf_conntrack_confirm include/net/netfilter/nf_conntrack_core.h:65 [inline]
    nf_confirm+0x3d8/0x4d0 net/netfilter/nf_conntrack_proto.c:154
    [..]
    
    While there is no reproducer yet, the syzbot report contains one
    interesting bit of information:
    
    Freed by task 27585:
    [..]
     kfree+0x10a/0x2c0 mm/slab.c:3757
     nf_ct_ext_destroy+0x2ab/0x2e0 net/netfilter/nf_conntrack_extend.c:38
     nf_conntrack_free+0x8f/0xe0 net/netfilter/nf_conntrack_core.c:1418
     destroy_conntrack+0x1a2/0x270 net/netfilter/nf_conntrack_core.c:626
     nf_conntrack_put include/linux/netfilter/nf_conntrack_common.h:31 [inline]
     nf_ct_resolve_clash net/netfilter/nf_conntrack_core.c:915 [inline]
     ^^^^^^^^^^^^^^^^^^^
     __nf_conntrack_confirm+0x21ca/0x2830 net/netfilter/nf_conntrack_core.c:1038
     nf_conntrack_confirm include/net/netfilter/nf_conntrack_core.h:63 [inline]
     nf_confirm+0x3e7/0x4d0 net/netfilter/nf_conntrack_proto.c:154
    
    This is whats happening:
    
    1. a conntrack entry is about to be confirmed (added to hash table).
    2. a clash with existing entry is detected.
    3. nf_ct_resolve_clash() puts skb->nfct (the "losing" entry).
    4. this entry now has a refcount of 0 and is freed to SLAB_TYPESAFE_BY_RCU
       kmem cache.
    
    skb->nfct has been replaced by the one found in the hash.
    Problem is that nf_conntrack_confirm() uses the old ct:
    
    static inline int nf_conntrack_confirm(struct sk_buff *skb)
    {
     struct nf_conn *ct = (struct nf_conn *)skb_nfct(skb);
     int ret = NF_ACCEPT;
    
      if (ct) {
        if (!nf_ct_is_confirmed(ct))
           ret = __nf_conntrack_confirm(skb);
        if (likely(ret == NF_ACCEPT))
            nf_ct_deliver_cached_events(ct); /* This ct has refcount 0! */
      }
      return ret;
    }
    
    As of "netfilter: conntrack: free extension area immediately", we can't
    access conntrack extensions in this case.
    
    To fix this, make sure we check the dying bit presence before attempting
    to get the eache extension.
    
    Reported-by: syzbot+c7aabc9fe93e7f3637ba@syzkaller.appspotmail.com
    Fixes: 2ad9d7747c10d1 ("netfilter: conntrack: free extension area immediately")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 7ce23e8e0a9cd38338fc8316ac5772666b565ca9
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Oct 21 15:56:28 2019 -0400

    nbd: handle racing with error'ed out commands
    
    We hit the following warning in production
    
    print_req_error: I/O error, dev nbd0, sector 7213934408 flags 80700
    ------------[ cut here ]------------
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 25 PID: 32407 at lib/refcount.c:190 refcount_sub_and_test_checked+0x53/0x60
    Workqueue: knbd-recv recv_work [nbd]
    RIP: 0010:refcount_sub_and_test_checked+0x53/0x60
    Call Trace:
     blk_mq_free_request+0xb7/0xf0
     blk_mq_complete_request+0x62/0xf0
     recv_work+0x29/0xa1 [nbd]
     process_one_work+0x1f5/0x3f0
     worker_thread+0x2d/0x3d0
     ? rescuer_thread+0x340/0x340
     kthread+0x111/0x130
     ? kthread_create_on_node+0x60/0x60
     ret_from_fork+0x1f/0x30
    ---[ end trace b079c3c67f98bb7c ]---
    
    This was preceded by us timing out everything and shutting down the
    sockets for the device.  The problem is we had a request in the queue at
    the same time, so we completed the request twice.  This can actually
    happen in a lot of cases, we fail to get a ref on our config, we only
    have one connection and just error out the command, etc.
    
    Fix this by checking cmd->status in nbd_read_stat.  We only change this
    under the cmd->lock, so we are safe to check this here and see if we've
    already error'ed this command out, which would indicate that we've
    completed it as well.
    
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 1a67c415965752879e2e9fad407bc44fc7f25f23
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Wed Oct 23 15:37:19 2019 -0700

    CIFS: Fix use after free of file info structures
    
    Currently the code assumes that if a file info entry belongs
    to lists of open file handles of an inode and a tcon then
    it has non-zero reference. The recent changes broke that
    assumption when putting the last reference of the file info.
    There may be a situation when a file is being deleted but
    nothing prevents another thread to reference it again
    and start using it. This happens because we do not hold
    the inode list lock while checking the number of references
    of the file info structure. Fix this by doing the proper
    locking when doing the check.
    
    Fixes: 487317c99477d ("cifs: add spinlock for the openFileList to cifsInodeInfo")
    Fixes: cb248819d209d ("cifs: use cifsInodeInfo->open_file_lock while iterating to avoid a panic")
    Cc: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>

commit abe57073d08c13b95a46ccf48cc9dc957d5c6fdb
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Oct 22 08:41:42 2019 -0700

    CIFS: Fix retry mid list corruption on reconnects
    
    When the client hits reconnect it iterates over the mid
    pending queue marking entries for retry and moving them
    to a temporary list to issue callbacks later without holding
    GlobalMid_Lock. In the same time there is no guarantee that
    mids can't be removed from the temporary list or even
    freed completely by another thread. It may cause a temporary
    list corruption:
    
    [  430.454897] list_del corruption. prev->next should be ffff98d3a8f316c0, but was 2e885cb266355469
    [  430.464668] ------------[ cut here ]------------
    [  430.466569] kernel BUG at lib/list_debug.c:51!
    [  430.468476] invalid opcode: 0000 [#1] SMP PTI
    [  430.470286] CPU: 0 PID: 13267 Comm: cifsd Kdump: loaded Not tainted 5.4.0-rc3+ #19
    [  430.473472] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    [  430.475872] RIP: 0010:__list_del_entry_valid.cold+0x31/0x55
    ...
    [  430.510426] Call Trace:
    [  430.511500]  cifs_reconnect+0x25e/0x610 [cifs]
    [  430.513350]  cifs_readv_from_socket+0x220/0x250 [cifs]
    [  430.515464]  cifs_read_from_socket+0x4a/0x70 [cifs]
    [  430.517452]  ? try_to_wake_up+0x212/0x650
    [  430.519122]  ? cifs_small_buf_get+0x16/0x30 [cifs]
    [  430.521086]  ? allocate_buffers+0x66/0x120 [cifs]
    [  430.523019]  cifs_demultiplex_thread+0xdc/0xc30 [cifs]
    [  430.525116]  kthread+0xfb/0x130
    [  430.526421]  ? cifs_handle_standard+0x190/0x190 [cifs]
    [  430.528514]  ? kthread_park+0x90/0x90
    [  430.530019]  ret_from_fork+0x35/0x40
    
    Fix this by obtaining extra references for mids being retried
    and marking them as MID_DELETED which indicates that such a mid
    has been dequeued from the pending list.
    
    Also move mid cleanup logic from DeleteMidQEntry to
    _cifs_mid_q_entry_release which is called when the last reference
    to a particular mid is put. This allows to avoid any use-after-free
    of response buffers.
    
    The patch needs to be backported to stable kernels. A stable tag
    is not mentioned below because the patch doesn't apply cleanly
    to any actively maintained stable kernel.
    
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-and-tested-by: David Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>

commit 5343da4c17429efaa5fb1594ea96aee1a283e694
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Mon Oct 21 18:47:50 2019 +0000

    net: core: limit nested device depth
    
    Current code doesn't limit the number of nested devices.
    Nested devices would be handled recursively and this needs huge stack
    memory. So, unlimited nested devices could make stack overflow.
    
    This patch adds upper_level and lower_level, they are common variables
    and represent maximum lower/upper depth.
    When upper/lower device is attached or dettached,
    {lower/upper}_level are updated. and if maximum depth is bigger than 8,
    attach routine fails and returns -EMLINK.
    
    In addition, this patch converts recursive routine of
    netdev_walk_all_{lower/upper} to iterator routine.
    
    Test commands:
        ip link add dummy0 type dummy
        ip link add link dummy0 name vlan1 type vlan id 1
        ip link set vlan1 up
    
        for i in {2..55}
        do
                let A=$i-1
    
                ip link add vlan$i link vlan$A type vlan id $i
        done
        ip link del dummy0
    
    Splat looks like:
    [  155.513226][  T908] BUG: KASAN: use-after-free in __unwind_start+0x71/0x850
    [  155.514162][  T908] Write of size 88 at addr ffff8880608a6cc0 by task ip/908
    [  155.515048][  T908]
    [  155.515333][  T908] CPU: 0 PID: 908 Comm: ip Not tainted 5.4.0-rc3+ #96
    [  155.516147][  T908] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  155.517233][  T908] Call Trace:
    [  155.517627][  T908]
    [  155.517918][  T908] Allocated by task 0:
    [  155.518412][  T908] (stack is not available)
    [  155.518955][  T908]
    [  155.519228][  T908] Freed by task 0:
    [  155.519885][  T908] (stack is not available)
    [  155.520452][  T908]
    [  155.520729][  T908] The buggy address belongs to the object at ffff8880608a6ac0
    [  155.520729][  T908]  which belongs to the cache names_cache of size 4096
    [  155.522387][  T908] The buggy address is located 512 bytes inside of
    [  155.522387][  T908]  4096-byte region [ffff8880608a6ac0, ffff8880608a7ac0)
    [  155.523920][  T908] The buggy address belongs to the page:
    [  155.524552][  T908] page:ffffea0001822800 refcount:1 mapcount:0 mapping:ffff88806c657cc0 index:0x0 compound_mapcount:0
    [  155.525836][  T908] flags: 0x100000000010200(slab|head)
    [  155.526445][  T908] raw: 0100000000010200 ffffea0001813808 ffffea0001a26c08 ffff88806c657cc0
    [  155.527424][  T908] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [  155.528429][  T908] page dumped because: kasan: bad access detected
    [  155.529158][  T908]
    [  155.529410][  T908] Memory state around the buggy address:
    [  155.530060][  T908]  ffff8880608a6b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  155.530971][  T908]  ffff8880608a6c00: fb fb fb fb fb f1 f1 f1 f1 00 f2 f2 f2 f3 f3 f3
    [  155.531889][  T908] >ffff8880608a6c80: f3 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  155.532806][  T908]                                            ^
    [  155.533509][  T908]  ffff8880608a6d00: fb fb fb fb fb fb fb fb fb f1 f1 f1 f1 00 00 00
    [  155.534436][  T908]  ffff8880608a6d80: f2 f3 f3 f3 f3 fb fb fb 00 00 00 00 00 00 00 00
    [ ... ]
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28443671a468489fb147b31687b2157b6ba59c4a
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Mon Oct 14 13:46:32 2019 +0200

    hwrng: core - Fix use-after-free warning in hwrng_register()
    
    Commit daae28debcb0 has moved add_early_randomness() out of the
    rng_mutex and tries to protect the reference of the new rng device
    by incrementing the reference counter.
    
    But in hwrng_register(), the function can be called with a new device
    that is not set as the current_rng device and the reference has not been
    initialized. This patch fixes the problem by not using the reference
    counter when the device is not the current one: the reference counter
    is only meaningful in the case of the current rng device and a device
    is not used if it is not the current one (except in hwrng_register())
    
    The problem has been reported by Marek Szyprowski on ARM 32bit
    Exynos5420-based Chromebook Peach-Pit board:
    
    WARNING: CPU: 3 PID: 1 at lib/refcount.c:156 hwrng_register+0x13c/0x1b4
    refcount_t: increment on 0; use-after-free.
    Modules linked in:
    CPU: 3 PID: 1 Comm: swapper/0 Not tainted 5.4.0-rc1-00061-gdaae28debcb0
    Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)
    [<c01124c8>] (unwind_backtrace) from [<c010dfb8>] (show_stack+0x10/0x14)
    [<c010dfb8>] (show_stack) from [<c0ae86d8>] (dump_stack+0xa8/0xd4)
    [<c0ae86d8>] (dump_stack) from [<c0127428>] (__warn+0xf4/0x10c)
    [<c0127428>] (__warn) from [<c01274b4>] (warn_slowpath_fmt+0x74/0xb8)
    [<c01274b4>] (warn_slowpath_fmt) from [<c054729c>] (hwrng_register+0x13c/0x1b4)
    [<c054729c>] (hwrng_register) from [<c0547e54>] (tpm_chip_register+0xc4/0x274)
    ...
    
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Fixes: daae28debcb0 ("hwrng: core - move add_early_randomness() out of rng_mutex")
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 3b4d9eb2ee74dd5ea7fa36cffb0ca7f5bc4924da
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Oct 22 23:30:38 2019 +0200

    bpf: Fix use after free in bpf_get_prog_name
    
    There is one more problematic case I noticed while recently fixing BPF kallsyms
    handling in cd7455f1013e ("bpf: Fix use after free in subprog's jited symbol
    removal") and that is bpf_get_prog_name().
    
    If BTF has been attached to the prog, then we may be able to fetch the function
    signature type id in kallsyms through prog->aux->func_info[prog->aux->func_idx].type_id.
    However, while the BTF object itself is torn down via RCU callback, the prog's
    aux->func_info is immediately freed via kvfree(prog->aux->func_info) once the
    prog's refcount either hit zero or when subprograms were already exposed via
    kallsyms and we hit the error path added in 5482e9a93c83 ("bpf: Fix memleak in
    aux->func_info and aux->btf").
    
    This violates RCU as well since kallsyms could be walked in parallel where we
    could access aux->func_info. Hence, defer kvfree() to after RCU grace period.
    Looking at ba64e7d85252 ("bpf: btf: support proper non-jit func info") there
    is no reason/dependency where we couldn't defer the kvfree(aux->func_info) into
    the RCU callback.
    
    Fixes: 5482e9a93c83 ("bpf: Fix memleak in aux->func_info and aux->btf")
    Fixes: ba64e7d85252 ("bpf: btf: support proper non-jit func info")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/875f2906a7c1a0691f2d567b4d8e4ea2739b1e88.1571779205.git.daniel@iogearbox.net

commit cd7455f1013ef96d5cbf5c05d2b7c06f273810a6
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Oct 22 15:57:23 2019 +0200

    bpf: Fix use after free in subprog's jited symbol removal
    
    syzkaller managed to trigger the following crash:
    
      [...]
      BUG: unable to handle page fault for address: ffffc90001923030
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD aa551067 P4D aa551067 PUD aa552067 PMD a572b067 PTE 80000000a1173163
      Oops: 0000 [#1] PREEMPT SMP KASAN
      CPU: 0 PID: 7982 Comm: syz-executor912 Not tainted 5.4.0-rc3+ #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      RIP: 0010:bpf_jit_binary_hdr include/linux/filter.h:787 [inline]
      RIP: 0010:bpf_get_prog_addr_region kernel/bpf/core.c:531 [inline]
      RIP: 0010:bpf_tree_comp kernel/bpf/core.c:600 [inline]
      RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]
      RIP: 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]
      RIP: 0010:bpf_prog_kallsyms_find kernel/bpf/core.c:674 [inline]
      RIP: 0010:is_bpf_text_address+0x184/0x3b0 kernel/bpf/core.c:709
      [...]
      Call Trace:
       kernel_text_address kernel/extable.c:147 [inline]
       __kernel_text_address+0x9a/0x110 kernel/extable.c:102
       unwind_get_return_address+0x4c/0x90 arch/x86/kernel/unwind_frame.c:19
       arch_stack_walk+0x98/0xe0 arch/x86/kernel/stacktrace.c:26
       stack_trace_save+0xb6/0x150 kernel/stacktrace.c:123
       save_stack mm/kasan/common.c:69 [inline]
       set_track mm/kasan/common.c:77 [inline]
       __kasan_kmalloc+0x11c/0x1b0 mm/kasan/common.c:510
       kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:518
       slab_post_alloc_hook mm/slab.h:584 [inline]
       slab_alloc mm/slab.c:3319 [inline]
       kmem_cache_alloc+0x1f5/0x2e0 mm/slab.c:3483
       getname_flags+0xba/0x640 fs/namei.c:138
       getname+0x19/0x20 fs/namei.c:209
       do_sys_open+0x261/0x560 fs/open.c:1091
       __do_sys_open fs/open.c:1115 [inline]
       __se_sys_open fs/open.c:1110 [inline]
       __x64_sys_open+0x87/0x90 fs/open.c:1110
       do_syscall_64+0xf7/0x1c0 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [...]
    
    After further debugging it turns out that we walk kallsyms while in parallel
    we tear down a BPF program which contains subprograms that have been JITed
    though the program itself has not been fully exposed and is eventually bailing
    out with error.
    
    The bpf_prog_kallsyms_del_subprogs() in bpf_prog_load()'s error path removes
    the symbols, however, bpf_prog_free() tears down the JIT memory too early via
    scheduled work. Instead, it needs to properly respect RCU grace period as the
    kallsyms walk for BPF is under RCU.
    
    Fix it by refactoring __bpf_prog_put()'s tear down and reuse it in our error
    path where we defer final destruction when we have subprogs in the program.
    
    Fixes: 7d1982b4e335 ("bpf: fix panic in prog load calls cleanup")
    Fixes: 1c2a088a6626 ("bpf: x64: add JIT support for multi-function programs")
    Reported-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Tested-by: syzbot+710043c5d1d5b5013bc7@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/bpf/55f6367324c2d7e9583fa9ccf5385dcbba0d7a6e.1571752452.git.daniel@iogearbox.net

commits)
      net: reorder 'struct net' fields to avoid false sharing
      net: dsa: fix switch tree list
      net: ethernet: dwmac-sun8i: show message only when switching to promisc
      net: aquantia: add an error handling in aq_nic_set_multicast_list
      net: netem: correct the parent's backlog when corrupted packet was dropped
      net: netem: fix error path for corrupted GSO frames
      macb: propagate errors when getting optional clocks
      xen/netback: fix error path of xenvif_connect_data()
      net: hns3: fix mis-counting IRQ vector numbers issue
      net: usb: lan78xx: Connect PHY before registering MAC
      vsock/virtio: discard packets if credit is not respected
      vsock/virtio: send a credit update when buffer size is changed
      mlxsw: spectrum_trap: Push Ethernet header before reporting trap
      net: ensure correct skb->tstamp in various fragmenters
      net: bcmgenet: reset 40nm EPHY on energy detect
      net: bcmgenet: soft reset 40nm EPHYs before MAC init
      net: phy: bcm7xxx: define soft_reset for 40nm EPHY
      net: bcmgenet: don't set phydev->link from MAC
      net: Update address for MediaTek ethernet driver in MAINTAINERS
      ipv4: fix race condition between route lookup and invalidation
      ...

commit 56a0b978d42f58c7e3ba715cf65af487d427524d
Author: John Garry <john.garry@huawei.com>
Date:   Tue Oct 15 22:07:31 2019 +0800

    ACPI: CPPC: Set pcc_data[pcc_ss_id] to NULL in acpi_cppc_processor_exit()
    
    When enabling KASAN and DEBUG_TEST_DRIVER_REMOVE, I find this KASAN
    warning:
    
    [   20.872057] BUG: KASAN: use-after-free in pcc_data_alloc+0x40/0xb8
    [   20.878226] Read of size 4 at addr ffff00236cdeb684 by task swapper/0/1
    [   20.884826]
    [   20.886309] CPU: 19 PID: 1 Comm: swapper/0 Not tainted 5.4.0-rc1-00009-ge7f7df3db5bf-dirty #289
    [   20.894994] Hardware name: Huawei D06 /D06, BIOS Hisilicon D06 UEFI RC0 - V1.16.01 03/15/2019
    [   20.903505] Call trace:
    [   20.905942]  dump_backtrace+0x0/0x200
    [   20.909593]  show_stack+0x14/0x20
    [   20.912899]  dump_stack+0xd4/0x130
    [   20.916291]  print_address_description.isra.9+0x6c/0x3b8
    [   20.921592]  __kasan_report+0x12c/0x23c
    [   20.925417]  kasan_report+0xc/0x18
    [   20.928808]  __asan_load4+0x94/0xb8
    [   20.932286]  pcc_data_alloc+0x40/0xb8
    [   20.935938]  acpi_cppc_processor_probe+0x4e8/0xb08
    [   20.940717]  __acpi_processor_start+0x48/0xb0
    [   20.945062]  acpi_processor_start+0x40/0x60
    [   20.949235]  really_probe+0x118/0x548
    [   20.952887]  driver_probe_device+0x7c/0x148
    [   20.957059]  device_driver_attach+0x94/0xa0
    [   20.961231]  __driver_attach+0xa4/0x110
    [   20.965055]  bus_for_each_dev+0xe8/0x158
    [   20.968966]  driver_attach+0x30/0x40
    [   20.972531]  bus_add_driver+0x234/0x2f0
    [   20.976356]  driver_register+0xbc/0x1d0
    [   20.980182]  acpi_processor_driver_init+0x40/0xe4
    [   20.984875]  do_one_initcall+0xb4/0x254
    [   20.988700]  kernel_init_freeable+0x24c/0x2f8
    [   20.993047]  kernel_init+0x10/0x118
    [   20.996524]  ret_from_fork+0x10/0x18
    [   21.000087]
    [   21.001567] Allocated by task 1:
    [   21.004785]  save_stack+0x28/0xc8
    [   21.008089]  __kasan_kmalloc.isra.9+0xbc/0xd8
    [   21.012435]  kasan_kmalloc+0xc/0x18
    [   21.015913]  pcc_data_alloc+0x94/0xb8
    [   21.019564]  acpi_cppc_processor_probe+0x4e8/0xb08
    [   21.024343]  __acpi_processor_start+0x48/0xb0
    [   21.028689]  acpi_processor_start+0x40/0x60
    [   21.032860]  really_probe+0x118/0x548
    [   21.036512]  driver_probe_device+0x7c/0x148
    [   21.040684]  device_driver_attach+0x94/0xa0
    [   21.044855]  __driver_attach+0xa4/0x110
    [   21.048680]  bus_for_each_dev+0xe8/0x158
    [   21.052591]  driver_attach+0x30/0x40
    [   21.056155]  bus_add_driver+0x234/0x2f0
    [   21.059980]  driver_register+0xbc/0x1d0
    [   21.063805]  acpi_processor_driver_init+0x40/0xe4
    [   21.068497]  do_one_initcall+0xb4/0x254
    [   21.072322]  kernel_init_freeable+0x24c/0x2f8
    [   21.076667]  kernel_init+0x10/0x118
    [   21.080144]  ret_from_fork+0x10/0x18
    [   21.083707]
    [   21.085186] Freed by task 1:
    [   21.088056]  save_stack+0x28/0xc8
    [   21.091360]  __kasan_slab_free+0x118/0x180
    [   21.095445]  kasan_slab_free+0x10/0x18
    [   21.099183]  kfree+0x80/0x268
    [   21.102139]  acpi_cppc_processor_exit+0x1a8/0x1b8
    [   21.106832]  acpi_processor_stop+0x70/0x80
    [   21.110917]  really_probe+0x174/0x548
    [   21.114568]  driver_probe_device+0x7c/0x148
    [   21.118740]  device_driver_attach+0x94/0xa0
    [   21.122912]  __driver_attach+0xa4/0x110
    [   21.126736]  bus_for_each_dev+0xe8/0x158
    [   21.130648]  driver_attach+0x30/0x40
    [   21.134212]  bus_add_driver+0x234/0x2f0
    [   21.0x10/0x18
    [   21.161764]
    [   21.163244] The buggy address belongs to the object at ffff00236cdeb600
    [   21.163244]  which belongs to the cache kmalloc-256 of size 256
    [   21.175750] The buggy address is located 132 bytes inside of
    [   21.175750]  256-byte region [ffff00236cdeb600, ffff00236cdeb700)
    [   21.187473] The buggy address belongs to the page:
    [   21.192254] page:fffffe008d937a00 refcount:1 mapcount:0 mapping:ffff002370c0fa00 index:0x0 compound_mapcount: 0
    [   21.202331] flags: 0x1ffff00000010200(slab|head)
    [   21.206940] raw: 1ffff00000010200 dead000000000100 dead000000000122 ffff002370c0fa00
    [   21.214671] raw: 0000000000000000 00000000802a002a 00000001ffffffff 0000000000000000
    [   21.222400] page dumped because: kasan: bad access detected
    [   21.227959]
    [   21.229438] Memory state around the buggy address:
    [   21.234218]  ffff00236cdeb580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   21.241427]  ffff00236cdeb600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.248637] >ffff00236cdeb680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.255845]                    ^
    [   21.259062]  ffff00236cdeb700: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   21.266272]  ffff00236cdeb780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   21.273480] ==================================================================
    
    It seems that global pcc_data[pcc_ss_id] can be freed in
    acpi_cppc_processor_exit(), but we may later reference this value, so
    NULLify it when freed.
    
    Also remove the useless setting of data "pcc_channel_acquired", which
    we're about to free.
    
    Fixes: 85b1407bf6d2 ("ACPI / CPPC: Make CPPC ACPI driver aware of PCC subspace IDs")
    Signed-off-by: John Garry <john.garry@huawei.com>
    Cc: 4.15+ <stable@vger.kernel.org> # 4.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit c3dadc19b7564c732598b30d637c6f275c3b77b6
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Fri Oct 4 15:27:01 2019 -0700

    rpmsg: glink: Don't send pending rx_done during remove
    
    Attempting to transmit rx_done messages after the GLINK instance is
    being torn down will cause use after free and memory leaks. So cancel
    the intent_work and free up the pending intents.
    
    With this there are no concurrent accessors of the channel left during
    qcom_glink_native_remove() and there is therefor no need to hold the
    spinlock during this operation - which would prohibit the use of
    cancel_work_sync() in the release function. So remove this.
    
    Fixes: 1d2ea36eead9 ("rpmsg: glink: Add rx done command")
    Cc: stable@vger.kernel.org
    Acked-by: Chris Lew <clew@codeaurora.org>
    Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 0ecee66990644c3482209ff7c12faa7bc40449b1
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Oct 16 19:48:14 2019 -0700

    fs/namespace.c: fix use-after-free of mount in mnt_warn_timestamp_expiry()
    
    After do_add_mount() returns success, the caller doesn't hold a
    reference to the 'struct mount' anymore.  So it's invalid to access it
    in mnt_warn_timestamp_expiry().
    
    Fix it by calling mnt_warn_timestamp_expiry() before do_add_mount()
    rather than after, and adjusting the warning message accordingly.
    
    Reported-by: syzbot+da4f525235510683d855@syzkaller.appspotmail.com
    Fixes: f8b92ba67c5d ("mount: Add mount warning for impending timestamp expiry")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit ac74ea01860170699fb3b6ea80c0476774c8e94f
Author: Arun Kumar Neelakantam <aneela@codeaurora.org>
Date:   Fri Oct 4 15:26:58 2019 -0700

    rpmsg: glink: Fix use after free in open_ack TIMEOUT case
    
    Extra channel reference put when remote sending OPEN_ACK after timeout
    causes use-after-free while handling next remote CLOSE command.
    
    Remove extra reference put in timeout case to avoid use-after-free.
    
    Fixes: b4f8e52b89f6 ("rpmsg: Introduce Qualcomm RPM glink driver")
    Cc: stable@vger.kernel.org
    Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Arun Kumar Neelakantam <aneela@codeaurora.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 6f1d1dc8d540a9aa6e39b9cb86d3a67bbc1c8d8d
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Oct 11 11:57:35 2019 +0200

    USB: serial: ti_usb_3410_5052: fix port-close races
    
    Fix races between closing a port and opening or closing another port on
    the same device which could lead to a failure to start or stop the
    shared interrupt URB. The latter could potentially cause a
    use-after-free or worse in the completion handler on driver unbind.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 7a759197974894213621aa65f0571b51904733d6
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 15 19:55:22 2019 +0200

    USB: usblp: fix use-after-free on disconnect
    
    A recent commit addressing a runtime PM use-count regression, introduced
    a use-after-free by not making sure we held a reference to the struct
    usb_interface for the lifetime of the driver data.
    
    Fixes: 9a31535859bf ("USB: usblp: fix runtime PM after driver unbind")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: syzbot+cd24df4d075c319ebfc5@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191015175522.18490-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4f8e513c3d353c134ad4eef9fd0bba12406c7c8
Author: Qian Cai <cai@lca.pw>
Date:   Mon Oct 14 14:11:51 2019 -0700

    mm/slub: fix a deadlock in show_slab_objects()
    
    A long time ago we fixed a similar deadlock in show_slab_objects() [1].
    However, it is apparently due to the commits like 01fb58bcba63 ("slab:
    remove synchronous synchronize_sched() from memcg cache deactivation
    path") and 03afc0e25f7f ("slab: get_online_mems for
    kmem_cache_{create,destroy,shrink}"), this kind of deadlock is back by
    just reading files in /sys/kernel/slab which will generate a lockdep
    splat below.
    
    Since the "mem_hotplug_lock" here is only to obtain a stable online node
    mask while racing with NUMA node hotplug, in the worst case, the results
    may me miscalculated while doing NUMA node hotplug, but they shall be
    corrected by later reads of the same files.
    
      WARNING: possible circular locking dependency detected
      ------------------------------------------------------
      cat/5224 is trying to acquire lock:
      ffff900012ac3120 (mem_hotplug_lock.rw_sem){++++}, at:
      show_slab_objects+0x94/0x3a8
    
      but task is already holding lock:
      b8ff009693eee398 (kn->count#45){++++}, at: kernfs_seq_start+0x44/0xf0
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #2 (kn->count#45){++++}:
             lock_acquire+0x31c/0x360
             __kernfs_remove+0x290/0x490
             kernfs_remove+0x30/0x44
             sysfs_remove_dir+0x70/0x88
             kobject_del+0x50/0xb0
             sysfs_slab_unlink+0x2c/0x38
             shutdown_cache+0xa0/0xf0
             kmemcg_cache_shutdown_fn+0x1c/0x34
             kmemcg_workfn+0x44/0x64
             process_one_work+0x4f4/0x950
             worker_thread+0x390/0x4bc
             kthread+0x1cc/0x1e8
             ret_from_fork+0x10/0x18
    
      -> #1 (slab_mutex){+.+.}:
             lock_acquire+0x31c/0x360
             __mutex_lock_common+0x16c/0xf78
             mutex_lock_nested+0x40/0x50
             memcg_create_kmem_cache+0x38/0x16c
             memcg_kmem_cache_create_func+0x3c/0x70
             process_one_work+0x4f4/0x950
             worker_thread+0x390/0x4bc
             kthread+0x1cc/0x1e8
             ret_from_fork+0x10/0x18
    
      -> #0 (mem_hotplug_lock.rw_sem){++++}:
             validate_chain+0xd10/0x2bcc
             __lock_acquire+0x7f4/0xb8c
             lock_acquire+0x31c/0x360
             get_online_mems+0x54/0x150
             show_slab_objects+0x94/0x3a8
             total_objects_show+0x28/0x34
             slab_attr_show+0x38/0x54
             sysfs_kf_seq_show+0x198/0x2d4
             kernfs_seq_show+0xa4/0xcc
             seq_read+0x30c/0x8a8
             kernfs_fop_read+0xa8/0x314
             __vfs_read+0x88/0x20c
             vfs_read+0xd8/0x10c
             ksys_read+0xb0/0x120
             __arm64_sys_read+0x54/0x88
             el0_svc_handler+0x170/0x240
             el0_svc+0x8/0xc
    
      other info that might help us debug this:
    
      Chain exists of:
        mem_hotplug_lock.rw_sem --> slab_mutex --> kn->count#45
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(kn->count#45);
                                     lock(slab_mutex);
                                     lock(kn->count#45);
        lock(mem_hotplug_lock.rw_sem);
    
       *** DEADLOCK ***
    
      3 locks held by cat/5224:
       #0: 9eff00095b14b2a0 (&p->lock){+.+.}, at: seq_read+0x4c/0x8a8
       #1: 0eff008997041480 (&of->mutex){+.+.}, at: kernfs_seq_start+0x34/0xf0
       #2: b8ff009693eee398 (kn->count#45){++++}, at:
      kernfs_seq_start+0x44/0xf0
    
      stack backtrace:
      Call trace:
       dump_backtrace+0x0/0x248
       show_stack+0x20/0x2c
       dump_stack+0xd0/0x140
       print_circular_bug+0x368/0x380
       check_noncircular+0x248/0x250
       validate_chain+0xd10/0x2bcc
       __lock_acquire+0x7f4/0xb8c
       lock_acquire+0x31c/0x360
       get_online_mems+0x54/0x150
       show_slab_objects+0x94/0x3a8
       total_objects_show+0x28/0x34
       slab_attr_show+0x38/0x54
       sysfs_kf_seq_show+0x198/0x2d4
       kernfs_seq_show+0xa4/0xcc
       seq_read+0x30c/0x8a8
       kernfs_fop_read+0xa8/0x314
       __vfs_read+0x88/0x20c
       vfs_read+0xd8/0x10c
       ksys_read+0xb0/0x120
       __arm64_sys_read+0x54/0x88
       el0_svc_handler+0x170/0x240
       el0_svc+0x8/0xc
    
    I think it is important to mention that this doesn't expose the
    show_slab_objects to use-after-free.  There is only a single path that
    might really race here and that is the slab hotplug notifier callback
    __kmem_cache_shrink (via slab_mem_going_offline_callback) but that path
    doesn't really destroy kmem_cache_node data structures.
    
    [1] http://lkml.iu.edu/hypermail/linux/kernel/1101.0/02850.html
    
    [akpm@linux-foundation.org: add comment explaining why we don't need mem_hotplug_lock]
    Link: http://lkml.kernel.org/r/1570192309-10132-1-git-send-email-cai@lca.pw
    Fixes: 01fb58bcba63 ("slab: remove synchronous synchronize_sched() from memcg cache deactivation path")
    Fixes: 03afc0e25f7f ("slab: get_online_mems for kmem_cache_{create,destroy,shrink}")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 33902b4a4227877896dd9368ac10f4ca0d100de5
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Oct 11 17:46:53 2019 +0800

    netdevsim: Fix error handling in nsim_fib_init and nsim_fib_exit
    
    In nsim_fib_init(), if register_fib_notifier failed, nsim_fib_net_ops
    should be unregistered before return.
    
    In nsim_fib_exit(), unregister_fib_notifier should be called before
    nsim_fib_net_ops be unregistered, otherwise may cause use-after-free:
    
    BUG: KASAN: use-after-free in nsim_fib_event_nb+0x342/0x570 [netdevsim]
    Read of size 8 at addr ffff8881daaf4388 by task kworker/0:3/3499
    
    CPU: 0 PID: 3499 Comm: kworker/0:3 Not tainted 5.3.0-rc7+ #30
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Workqueue: ipv6_addrconf addrconf_dad_work [ipv6]
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xa9/0x10e lib/dump_stack.c:113
     print_address_description+0x65/0x380 mm/kasan/report.c:351
     __kasan_report+0x149/0x18d mm/kasan/report.c:482
     kasan_report+0xe/0x20 mm/kasan/common.c:618
     nsim_fib_event_nb+0x342/0x570 [netdevsim]
     notifier_call_chain+0x52/0xf0 kernel/notifier.c:95
     __atomic_notifier_call_chain+0x78/0x140 kernel/notifier.c:185
     call_fib_notifiers+0x30/0x60 net/core/fib_notifier.c:30
     call_fib6_entry_notifiers+0xc1/0x100 [ipv6]
     fib6_add+0x92e/0x1b10 [ipv6]
     __ip6_ins_rt+0x40/0x60 [ipv6]
     ip6_ins_rt+0x84/0xb0 [ipv6]
     __ipv6_ifa_notify+0x4b6/0x550 [ipv6]
     ipv6_ifa_notify+0xa5/0x180 [ipv6]
     addrconf_dad_completed+0xca/0x640 [ipv6]
     addrconf_dad_work+0x296/0x960 [ipv6]
     process_one_work+0x5c0/0xc00 kernel/workqueue.c:2269
     worker_thread+0x5c/0x670 kernel/workqueue.c:2415
     kthread+0x1d7/0x200 kernel/kthread.c:255
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Allocated by task 3388:
     save_stack+0x19/0x80 mm/kasan/common.c:69
     set_track mm/kasan/common.c:77 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:493
     kmalloc include/linux/slab.h:557 [inline]
     kzalloc include/linux/slab.h:748 [inline]
     ops_init+0xa9/0x220 net/core/net_namespace.c:127
     __register_pernet_operations net/core/net_namespace.c:1135 [inline]
     register_pernet_operations+0x1d4/0x420 net/core/net_namespace.c:1212
     register_pernet_subsys+0x24/0x40 net/core/net_namespace.c:1253
     nsim_fib_init+0x12/0x70 [netdevsim]
     veth_get_link_ksettings+0x2b/0x50 [veth]
     do_one_initcall+0xd4/0x454 init/main.c:939
     do_init_module+0xe0/0x330 kernel/module.c:3490
     load_module+0x3c2f/0x4620 kernel/module.c:3841
     __do_sys_finit_module+0x163/0x190 kernel/module.c:3931
     do_syscall_64+0x72/0x2e0 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 3534:
     save_stack+0x19/0x80 mm/kasan/common.c:69
     set_track mm/kasan/common.c:77 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:455
     slab_free_hook mm/slub.c:1423 [inline]
     slab_free_freelist_hook mm/slub.c:1474 [inline]
     slab_free mm/slub.c:3016 [inline]
     kfree+0xe9/0x2d0 mm/slub.c:3957
     ops_free net/core/net_namespace.c:151 [inline]
     ops_free_list.part.7+0x156/0x220 net/core/net_namespace.c:184
     ops_free_list net/core/net_namespace.c:182 [inline]
     __unregister_pernet_operations net/core/net_namespace.c:1165 [inline]
     unregister_pernet_operations+0x221/0x2a0 net/core/net_namespace.c:1224
     unregister_pernet_subsys+0x1d/0x30 net/core/net_namespace.c:1271
     nsim_fib_exit+0x11/0x20 [netdevsim]
     nsim_module_exit+0x16/0x21 [netdevsim]
     __do_sys_delete_module kernel/module.c:1015 [inline]
     __se_sys_delete_module kernel/module.c:958 [inline]
     __x64_sys_delete_module+0x244/0x330 kernel/module.c:958
     do_syscall_64+0x72/0x2e0 arch/x86/entry/common.c:296
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 59c84b9fcf42 ("netdevsim: Restore per-network namespace accounting for fib entries")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 245cdd9fbd396483d501db83047116e2530f245f
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Mon Oct 7 13:56:59 2019 -0400

    vhost/test: stop device before reset
    
    When device stop was moved out of reset, test device wasn't updated to
    stop before reset, this resulted in a use after free.  Fix by invoking
    stop appropriately.
    
    Fixes: b211616d7125 ("vhost: move -net specific code out")
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

commits)
      USB: yurex: fix NULL-derefs on disconnect
      USB: iowarrior: use pr_err()
      USB: iowarrior: drop redundant iowarrior mutex
      USB: iowarrior: drop redundant disconnect mutex
      USB: iowarrior: fix use-after-free after driver unbind
      USB: iowarrior: fix use-after-free on release
      USB: iowarrior: fix use-after-free on disconnect
      USB: chaoskey: fix use-after-free on release
      USB: adutux: fix use-after-free on release
      USB: ldusb: fix NULL-derefs on driver unbind
      USB: legousbtower: fix use-after-free on release
      usb: cdns3: Fix for incorrect DMA mask.
      usb: cdns3: fix cdns3_core_init_role()
      usb: cdns3: gadget: Fix full-speed mode
      USB: usb-skeleton: drop redundant in-urb check
      USB: usb-skeleton: fix use-after-free after driver unbind
      USB: usb-skeleton: fix NULL-deref on disconnect
      usb:cdns3: Fix for CV CH9 running with g_zero driver.
      usb: dwc3: Remove dev_err() on platform_get_irq() failure
      usb: dwc3: Switch to platform_get_irq_byname_optional()
      ...

commit aafb00a977cf7d81821f7c9d12e04c558c22dc3c
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:48 2019 +0200

    USB: yurex: fix NULL-derefs on disconnect
    
    The driver was using its struct usb_interface pointer as an inverted
    disconnected flag, but was setting it to NULL without making sure all
    code paths that used it were done with it.
    
    Before commit ef61eb43ada6 ("USB: yurex: Fix protection fault after
    device removal") this included the interrupt-in completion handler, but
    there are further accesses in dev_err and dev_dbg statements in
    yurex_write() and the driver-data destructor (sic!).
    
    Fix this by unconditionally stopping also the control URB at disconnect
    and by using a dedicated disconnected flag.
    
    Note that we need to take a reference to the struct usb_interface to
    avoid a use-after-free in the destructor whenever the device was
    disconnected while the character device was still open.
    
    Fixes: aadd6472d904 ("USB: yurex.c: remove dbg() usage")
    Fixes: 45714104b9e8 ("USB: yurex.c: remove err() usage")
    Cc: stable <stable@vger.kernel.org>     # 3.5: ef61eb43ada6
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-6-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f8d46867ca233d773408ffbe691a8062ed718f
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:43 2019 +0200

    USB: iowarrior: fix use-after-free after driver unbind
    
    Make sure to stop also the asynchronous write URBs on disconnect() to
    avoid use-after-free in the completion handler after driver unbind.
    
    Fixes: 946b960d13c1 ("USB: add driver for iowarrior devices.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.21: 51a2f077c44e ("USB: introduce usb_anchor")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-4-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80cd5479b525093a56ef768553045741af61b250
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:42 2019 +0200

    USB: iowarrior: fix use-after-free on release
    
    The driver was accessing its struct usb_interface from its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever debugging was enabled and the device was
    disconnected while its character device was open.
    
    Fixes: 549e83500b80 ("USB: iowarrior: Convert local dbg macro to dev_dbg")
    Cc: stable <stable@vger.kernel.org>     # 3.16
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edc4746f253d907d048de680a621e121517f484b
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 12:48:41 2019 +0200

    USB: iowarrior: fix use-after-free on disconnect
    
    A recent fix addressing a deadlock on disconnect introduced a new bug
    by moving the present flag out of the critical section protected by the
    driver-data mutex. This could lead to a racing release() freeing the
    driver data before disconnect() is done with it.
    
    Due to insufficient locking a related use-after-free could be triggered
    also before the above mentioned commit. Specifically, the driver needs
    to hold the driver-data mutex also while checking the opened flag at
    disconnect().
    
    Fixes: c468a8aa790e ("usb: iowarrior: fix deadlock on disconnect")
    Fixes: 946b960d13c1 ("USB: add driver for iowarrior devices.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.21
    Reported-by: syzbot+0761012cebf7bdb38137@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009104846.5925-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93ddb1f56ae102f14f9e46a9a9c8017faa970003
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:45 2019 +0200

    USB: chaoskey: fix use-after-free on release
    
    The driver was accessing its struct usb_interface in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: 66e3e591891d ("usb: Add driver for Altus Metrum ChaosKey device (v2)")
    Cc: stable <stable@vger.kernel.org>     # 4.1
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 123a0f125fa3d2104043697baa62899d9e549272
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:44 2019 +0200

    USB: adutux: fix use-after-free on release
    
    The driver was accessing its struct usb_device in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: 66d4bc30d128 ("USB: adutux: remove custom debug macro")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726b55d0e22ca72c69c947af87785c830289ddbc
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 17:38:47 2019 +0200

    USB: legousbtower: fix use-after-free on release
    
    The driver was accessing its struct usb_device in its release()
    callback without holding a reference. This would lead to a
    use-after-free whenever the device was disconnected while the character
    device was still open.
    
    Fixes: fef526cae700 ("USB: legousbtower: remove custom debug macro")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009153848.8664-5-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6353001852776e7eeaab4da78922d4c6f2b076af
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 9 19:09:43 2019 +0200

    USB: usb-skeleton: fix use-after-free after driver unbind
    
    The driver failed to stop its read URB on disconnect, something which
    could lead to a use-after-free in the completion handler after driver
    unbind in case the character device has been closed.
    
    Fixes: e7389cc9a7ff ("USB: skel_read really sucks royally")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20191009170944.30057-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e08117c9d4efc1e1bc6fce83dab856d9fd284b6
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Oct 7 12:09:53 2019 -0300

    media: usbvision: Fix races among open, close, and disconnect
    
    Visual inspection of the usbvision driver shows that it suffers from
    three races between its open, close, and disconnect handlers.  In
    particular, the driver is careful to update its usbvision->user and
    usbvision->remove_pending flags while holding the private mutex, but:
    
            usbvision_v4l2_close() and usbvision_radio_close() don't hold
            the mutex while they check the value of
            usbvision->remove_pending;
    
            usbvision_disconnect() doesn't hold the mutex while checking
            the value of usbvision->user; and
    
            also, usbvision_v4l2_open() and usbvision_radio_open() don't
            check whether the device has been unplugged before allowing
            the user to open the device files.
    
    Each of these can potentially lead to usbvision_release() being called
    twice and use-after-free errors.
    
    This patch fixes the races by reading the flags while the mutex is
    still held and checking for pending removes before allowing an open to
    succeed.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 6af3aa57a0984e061f61308fe181a9a12359fecc
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 7 18:40:59 2019 +0200

    NFC: pn533: fix use-after-free and memleaks
    
    The driver would fail to deregister and its class device and free
    related resources on late probe errors.
    
    Reported-by: syzbot+cb035c75c03dbe34b796@syzkaller.appspotmail.com
    Fixes: 32ecc75ded72 ("NFC: pn533: change order operations in dev registation")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commit 8e00c4e9dd852f7a9bf12234fad65a2f2f93788f
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Oct 6 17:58:09 2019 -0700

    writeback: fix use-after-free in finish_writeback_work()
    
    finish_writeback_work() reads @done->waitq after decrementing
    @done->cnt.  However, once @done->cnt reaches zero, @done may be freed
    (from stack) at any moment and @done->waitq can contain something
    unrelated by the time finish_writeback_work() tries to read it.  This
    led to the following crash.
    
      "BUG: kernel NULL pointer dereference, address: 0000000000000002"
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0002) - not-present page
      PGD 0 P4D 0
      Oops: 0002 [#1] SMP DEBUG_PAGEALLOC
      CPU: 40 PID: 555153 Comm: kworker/u98:50 Kdump: loaded Not tainted
      ...
      Workqueue: writeback wb_workfn (flush-btrfs-1)
      RIP: 0010:_raw_spin_lock_irqsave+0x10/0x30
      Code: 48 89 d8 5b c3 e8 50 db 6b ff eb f4 0f 1f 40 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 53 9c 5b fa 31 c0 ba 01 00 00 00 <f0> 0f b1 17 75 05 48 89 d8 5b c3 89 c6 e8 fe ca 6b ff eb f2 66 90
      RSP: 0018:ffffc90049b27d98 EFLAGS: 00010046
      RAX: 0000000000000000 RBX: 0000000000000246 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: 0000000000000003 RDI: 0000000000000002
      RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000001
      R10: ffff889fff407600 R11: ffff88ba9395d740 R12: 000000000000e300
      R13: 0000000000000003 R14: 0000000000000000 R15: 0000000000000000
      FS:  0000000000000000(0000) GS:ffff88bfdfa00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000002 CR3: 0000000002409005 CR4: 00000000001606e0
      Call Trace:
       __wake_up_common_lock+0x63/0xc0
       wb_workfn+0xd2/0x3e0
       process_one_work+0x1f5/0x3f0
       worker_thread+0x2d/0x3d0
       kthread+0x111/0x130
       ret_from_fork+0x1f/0x30
    
    Fix it by reading and caching @done->waitq before decrementing
    @done->cnt.
    
    Link: http://lkml.kernel.org/r/20190924010631.GH2233839@devbig004.ftw2.facebook.com
    Fixes: 5b9cce4c7eb069 ("writeback: Generalize and expose wb_completion")
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Debugged-by: Chris Mason <clm@fb.com>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Cc: Jan Kara <jack@suse.cz>
    Cc: <stable@vger.kernel.org>    [5.2+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 91fcfbe8852edb929ff8702534525031a15d0aa6
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 7 10:58:29 2019 +0100

    rxrpc: Fix call crypto state cleanup
    
    Fix the cleanup of the crypto state on a call after the call has been
    disconnected.  As the call has been disconnected, its connection ref has
    been discarded and so we can't go through that to get to the security ops
    table.
    
    Fix this by caching the security ops pointer in the rxrpc_call struct and
    using that when freeing the call security state.  Also use this in other
    places we're dealing with call-specific security.
    
    The symptoms look like:
    
        BUG: KASAN: use-after-free in rxrpc_release_call+0xb2d/0xb60
        net/rxrpc/call_object.c:481
        Read of size 8 at addr ffff888062ffeb50 by task syz-executor.5/4764
    
    Fixes: 1db88c534371 ("rxrpc: Fix -Wframe-larger-than= warnings from on-stack crypto")
    Reported-by: syzbot+eed305768ece6682bb7f@syzkaller.appspotmail.com
    Signed-off-by: David Howells <dhowells@redhat.com>

commit 9ebeddef58c41bd700419cdcece24cf64ce32276
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 7 10:58:29 2019 +0100

    rxrpc: rxrpc_peer needs to hold a ref on the rxrpc_local record
    
    The rxrpc_peer record needs to hold a reference on the rxrpc_local record
    it points as the peer is used as a base to access information in the
    rxrpc_local record.
    
    This can cause problems in __rxrpc_put_peer(), where we need the network
    namespace pointer, and in rxrpc_send_keepalive(), where we need to access
    the UDP socket, leading to symptoms like:
    
        BUG: KASAN: use-after-free in __rxrpc_put_peer net/rxrpc/peer_object.c:411
        [inline]
        BUG: KASAN: use-after-free in rxrpc_put_peer+0x685/0x6a0
        net/rxrpc/peer_object.c:435
        Read of size 8 at addr ffff888097ec0058 by task syz-executor823/24216
    
    Fix this by taking a ref on the local record for the peer record.
    
    Fixes: ace45bec6d77 ("rxrpc: Fix firewall route keepalive")
    Fixes: 2baec2c3f854 ("rxrpc: Support network namespacing")
    Reported-by: syzbot+b9be979c55f2bea8ed30@syzkaller.appspotmail.com
    Signed-off-by: David Howells <dhowells@redhat.com>

commit 55f6c98e3674ce16038a1949c3f9ca5a9a99f289
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 7 10:58:29 2019 +0100

    rxrpc: Fix trace-after-put looking at the put peer record
    
    rxrpc_put_peer() calls trace_rxrpc_peer() after it has done the decrement
    of the refcount - which looks at the debug_id in the peer record.  But
    unless the refcount was reduced to zero, we no longer have the right to
    look in the record and, indeed, it may be deleted by some other thread.
    
    Fix this by getting the debug_id out before decrementing the refcount and
    then passing that into the tracepoint.
    
    This can cause the following symptoms:
    
        BUG: KASAN: use-after-free in __rxrpc_put_peer net/rxrpc/peer_object.c:411
        [inline]
        BUG: KASAN: use-after-free in rxrpc_put_peer+0x685/0x6a0
        net/rxrpc/peer_object.c:435
        Read of size 8 at addr ffff888097ec0058 by task syz-executor823/24216
    
    Fixes: 1159d4b496f5 ("rxrpc: Add a tracepoint to track rxrpc_peer refcounting")
    Reported-by: syzbot+b9be979c55f2bea8ed30@syzkaller.appspotmail.com
    Signed-off-by: David Howells <dhowells@redhat.com>

commit c48fc11b69e95007109206311b0187a3090591f3
Author: David Howells <dhowells@redhat.com>
Date:   Mon Oct 7 10:58:28 2019 +0100

    rxrpc: Fix call ref leak
    
    When sendmsg() finds a call to continue on with, if the call is in an
    inappropriate state, it doesn't release the ref it just got on that call
    before returning an error.
    
    This causes the following symptom to show up with kasan:
    
            BUG: KASAN: use-after-free in rxrpc_send_keepalive+0x8a2/0x940
            net/rxrpc/output.c:635
            Read of size 8 at addr ffff888064219698 by task kworker/0:3/11077
    
    where line 635 is:
    
            whdr.epoch      = htonl(peer->local->rxnet->epoch);
    
    The local endpoint (which cannot be pinned by the call) has been released,
    but not the peer (which is pinned by the call).
    
    Fix this by releasing the call in the error path.
    
    Fixes: 37411cad633f ("rxrpc: Fix potential NULL-pointer exception")
    Reported-by: syzbot+d850c266e3df14da1d31@syzkaller.appspotmail.com
    Signed-off-by: David Howells <dhowells@redhat.com>

commits)
      selftests/net: add nettest to .gitignore
      net: qlogic: Fix memory leak in ql_alloc_large_buffers
      nfc: fix memory leak in llcp_sock_bind()
      sch_dsmark: fix potential NULL deref in dsmark_init()
      net: phy: at803x: use operating parameters from PHY-specific status
      net: phy: extract pause mode
      net: phy: extract link partner advertisement reading
      net: phy: fix write to mii-ctrl1000 register
      ipv6: Handle missing host route in __ipv6_ifa_notify
      net: phy: allow for reset line to be tied to a sleepy GPIO controller
      net: ipv4: avoid mixed n_redirects and rate_tokens usage
      r8152: Set macpassthru in reset_resume callback
      cxgb4:Fix out-of-bounds MSI-X info array access
      Revert "ipv6: Handle race in addrconf_dad_work"
      net: make sock_prot_memory_pressure() return "const char *"
      rxrpc: Fix rxrpc_recvmsg tracepoint
      qmi_wwan: add support for Cinterion CLS8 devices
      tcp: fix slab-out-of-bounds in tcp_zerocopy_receive()
      lib: textsearch: fix escapes in example code
      udp: only do GSO if # of segs > 1
      ...

commit 9b64f7d0bb0a8b5987f265756a563384765c7378
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Sep 30 16:17:07 2019 -0700

    RDMA/srpt: Postpone HCA removal until after configfs directory removal
    
    A shortcoming of the SCSI target core is that it does not have an API
    for removing tpg or wwn objects. Wait until these directories have been
    removed before allowing HCA removal to finish.
    
    See also Bart Van Assche, "Re: Why using configfs as the only interface is
    wrong for a storage target", 2011-02-07
    (https://www.spinics.net/lists/linux-scsi/msg50248.html).
    
    This patch fixes the following kernel crash:
    
    ==================================================================
    BUG: KASAN: use-after-free in __configfs_open_file.isra.4+0x1a8/0x400
    Read of size 8 at addr ffff88811880b690 by task restart-lio-srp/1215
    
    CPU: 1 PID: 1215 Comm: restart-lio-srp Not tainted 5.3.0-dbg+ #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Call Trace:
     dump_stack+0x86/0xca
     print_address_description+0x74/0x32d
     __kasan_report.cold.6+0x1b/0x36
     kasan_report+0x12/0x17
     __asan_load8+0x54/0x90
     __configfs_open_file.isra.4+0x1a8/0x400
     configfs_open_file+0x13/0x20
     do_dentry_open+0x2b1/0x770
     vfs_open+0x58/0x60
     path_openat+0x5fa/0x14b0
     do_filp_open+0x115/0x180
     do_sys_open+0x1d4/0x2a0
     __x64_sys_openat+0x59/0x70
     do_syscall_64+0x6b/0x2d0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f2f2bd3fcce
    Code: 25 00 00 41 00 3d 00 00 41 00 74 48 48 8d 05 19 d7 0d 00 8b 00 85 c0 75 69 89 f2 b8 01 01 00 00 48 89 fe bf 9c ff ff ff 0f 05 <48> 3d 00 f0 ff ff 0f 87 a6 00 00 00 48 8b 4c 24 28 64 48 33 0c 25
    RSP: 002b:00007ffd155f7850 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
    RAX: ffffffffffffffda RBX: 0000564609ba88e0 RCX: 00007f2f2bd3fcce
    RDX: 0000000000000241 RSI: 0000564609ba8cf0 RDI: 00000000ffffff9c
    RBP: 00007ffd155f7950 R08: 0000000000000000 R09: 0000000000000020
    R10: 00000000000001b6 R11: 0000000000000246 R12: 0000000000000000
    R13: 0000000000000003 R14: 0000000000000001 R15: 0000564609ba8cf0
    
    Allocated by task 995:
     save_stack+0x21/0x90
     __kasan_kmalloc.constprop.9+0xc7/0xd0
     kasan_kmalloc+0x9/0x10
     __kmalloc+0x153/0x370
     srpt_add_one+0x4f/0x561 [ib_srpt]
     add_client_context+0x251/0x290 [ib_core]
     ib_register_client+0x1da/0x220 [ib_core]
     iblock_get_alignment_offset_lbas+0x6b/0x100 [target_core_iblock]
     do_one_initcall+0xcd/0x43a
     do_init_module+0x103/0x380
     load_module+0x3b77/0x3eb0
     __do_sys_finit_module+0x12d/0x1b0
     __x64_sys_finit_module+0x43/0x50
     do_syscall_64+0x6b/0x2d0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 1221:
     save_stack+0x21/0x90
     __kasan_slab_free+0x139/0x190
     kasan_slab_free+0xe/0x10
     slab_free_freelist_hook+0x67/0x1e0
     kfree+0xcb/0x2a0
     srpt_remove_one+0x596/0x670 [ib_srpt]
     remove_client_context+0x9a/0xe0 [ib_core]
     disable_device+0x106/0x1b0 [ib_core]
     __ib_unregister_device+0x5f/0xf0 [ib_core]
     ib_unregister_driver+0x11a/0x170 [ib_core]
     0xffffffffa087f666
     __x64_sys_delete_module+0x1f8/0x2c0
     do_syscall_64+0x6b/0x2d0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff88811880b300
     which belongs to the cache kmalloc-4k of size 4096
    The buggy address is located 912 bytes inside of
     4096-byte region [ffff88811880b300, ffff88811880c300)
    The buggy address belongs to the page:
    page:ffffea0004620200 refcount:1 mapcount:0 mapping:ffff88811ac0de00 index:0x0 compound_mapcount: 0
    flags: 0x2fff000000010200(slab|head)
    raw: 2fff000000010200 dead000000000100 dead000000000122 ffff88811ac0de00
    raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88811880b580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88811880b600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88811880b680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                             ^
     ffff88811880b700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88811880b780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Link: https://lore.kernel.org/r/20190930231707.48259-16-bvanassche@acm.org
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit be408e65f55ea751ca6e8d08094951c50ce9d3a3
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Sep 30 16:17:05 2019 -0700

    RDMA/srpt: Rework the code that waits until an RDMA port is no longer in use
    
    The current implementation does not wait until srpt_release_channel()
    has finished and hence can trigger a use-after-free. Rework
    srpt_release_sport() such that it waits until srpt_release_channel()
    has finished. This patch fixes the following KASAN complaint:
    
    ==================================================================
    BUG: KASAN: use-after-free in srpt_free_ioctx.part.23+0x42/0x100 [ib_srpt]
    Read of size 8 at addr ffff888115c71100 by task kworker/4:3/807
    
    CPU: 4 PID: 807 Comm: kworker/4:3 Not tainted 5.3.0-dbg+ #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    Workqueue: events srpt_release_channel_work [ib_srpt]
    Call Trace:
     dump_stack+0x86/0xca
     print_address_description+0x74/0x32d
     __kasan_report.cold.6+0x1b/0x36
     kasan_report+0x12/0x17
     __asan_load8+0x54/0x90
     srpt_free_ioctx.part.23+0x42/0x100 [ib_srpt]
     srpt_free_ioctx_ring.part.24+0x50/0x80 [ib_srpt]
     srpt_release_channel_work+0x2ad/0x390 [ib_srpt]
     process_one_work+0x51a/0xa60
     worker_thread+0x67/0x5b0
     kthread+0x1dc/0x200
     ret_from_fork+0x24/0x30
    
    Allocated by task 984:
     save_stack+0x21/0x90
     __kasan_kmalloc.constprop.9+0xc7/0xd0
     kasan_kmalloc+0x9/0x10
     __kmalloc+0x153/0x370
     srpt_add_one+0x4f/0x570 [ib_srpt]
     add_client_context+0x251/0x290 [ib_core]
     ib_register_client+0x1da/0x220 [ib_core]
     iblock_get_alignment_offset_lbas+0x6b/0x100 [target_core_iblock]
     do_one_initcall+0xcd/0x43a
     do_init_module+0x103/0x380
     load_module+0x3b77/0x3eb0
     __do_sys_finit_module+0x12d/0x1b0
     __x64_sys_finit_module+0x43/0x50
     do_syscall_64+0x6b/0x2d0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 1128:
     save_stack+0x21/0x90
     __kasan_slab_free+0x139/0x190
     kasan_slab_free+0xe/0x10
     slab_free_freelist_hook+0x67/0x1e0
     kfree+0xcb/0x2a0
     srpt_remove_one+0x569/0x5b0 [ib_srpt]
     remove_client_context+0x9a/0xe0 [ib_core]
     disable_device+0x106/0x1b0 [ib_core]
     __ib_unregister_device+0x5f/0xf0 [ib_core]
     ib_unregister_device_and_put+0x48/0x60 [ib_core]
     nldev_dellink+0x120/0x180 [ib_core]
     rdma_nl_rcv+0x287/0x480 [ib_core]
     netlink_unicast+0x2cc/0x370
     netlink_sendmsg+0x3b1/0x630
     __sys_sendto+0x1db/0x290
     __x64_sys_sendto+0x80/0xa0
     do_syscall_64+0x6b/0x2d0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888115c71100
     which belongs to the cache kmalloc-4k of size 4096
    The buggy address is located 0 bytes inside of
     4096-byte region [ffff888115c71100, ffff888115c72100)
    The buggy address belongs to the page:
    page:ffffea0004571c00 refcount:1 mapcount:0 mapping:ffff88811ac0de00 index:0xffff888115c70000 compound_mapcount: 0
    flags: 0x2fff000000010200(slab|head)
    raw: 2fff000000010200 ffffea00045ac408 ffffea0004593208 ffff88811ac0de00
    raw: ffff888115c70000 0000000000070002 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888115c71000: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff888115c71080: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff888115c71100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff888115c71180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888115c71200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Link: https://lore.kernel.org/r/20190930231707.48259-14-bvanassche@acm.org
    Cc: Honggang LI <honli@redhat.com>
    Cc: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commits)
      block: sed-opal: fix sparse warning: convert __be64 data
      block: sed-opal: fix sparse warning: obsolete array init.
      block: pg: add header include guard
      Revert "s390/dasd: Add discard support for ESE volumes"
      s390/dasd: Fix error handling during online processing
      io_uring: use __kernel_timespec in timeout ABI
      loop: change queue block size to match when using DIO
      blk-mq: apply normal plugging for HDD
      blk-mq: honor IO scheduler for multiqueue devices
      nvme-rdma: fix possible use-after-free in connect timeout
      nvme: Move ctrl sqsize to generic space
      nvme: Add ctrl attributes for queue_count and sqsize
      nvme: allow 64-bit results in passthru commands
      nvme: Add quirk for Kingston NVME SSD running FW E8FK11.T
      nvmet-tcp: remove superflous check on request sgl
      Added QUIRKs for ADATA XPG SX8200 Pro 512GB
      nvme-rdma: Fix max_hw_sectors calculation
      nvme: fix an error code in nvme_init_subsystem()
      nvme-pci: Save PCI state before putting drive into deepest state
      nvme-tcp: fix wrong stop condition in io_work
      ...

commit eb7f5a490c5edfe8126f64bc58b9ba2edef0a425
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 26 11:12:25 2019 +0200

    USB: usblcd: fix I/O after disconnect
    
    Make sure to stop all I/O on disconnect by adding a disconnected flag
    which is used to prevent new I/O from being started and by stopping all
    ongoing I/O before returning.
    
    This also fixes a potential use-after-free on driver unbind in case the
    driver data is freed before the completion handler has run.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>     # 7bbe990c989e
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190926091228.24634-7-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44efc269db7929f6275a1fa927ef082e533ecde0
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Sep 25 11:29:12 2019 +0200

    USB: adutux: fix use-after-free on disconnect
    
    The driver was clearing its struct usb_device pointer, which it used as
    an inverted disconnected flag, before deregistering the character device
    and without serialising against racing release().
    
    This could lead to a use-after-free if a racing release() callback
    observes the cleared pointer and frees the driver data before
    disconnect() is finished with it.
    
    This could also lead to NULL-pointer dereferences in a racing open().
    
    Fixes: f08812d5eb8f ("USB: FIx locks and urb->status in adutux (updated)")
    Cc: stable <stable@vger.kernel.org>     # 2.6.24
    Reported-by: syzbot+0243cb250a51eeefb8cc@syzkaller.appspotmail.com
    Tested-by: syzbot+0243cb250a51eeefb8cc@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20190925092913.8608-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f318dad72d227438f4da4c57afb2dfbd9dacddb
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 4 13:01:02 2019 +0300

    usb: cdns3: Fix use after free in probe error handling
    
    We can't use "wrap" after it has been freed.
    
    Fixes: 7733f6c32e36 ("usb: cdns3: Add Cadence USB3 DRD Driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20190904100102.GB7007@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be4c60b563edee3712d392aaeb0943a768df7023
Author: Will Deacon <will@kernel.org>
Date:   Wed Oct 2 13:42:06 2019 +0100

    pinctrl: devicetree: Avoid taking direct reference to device name string
    
    When populating the pinctrl mapping table entries for a device, the
    'dev_name' field for each entry is initialised to point directly at the
    string returned by 'dev_name()' for the device and subsequently used by
    'create_pinctrl()' when looking up the mappings for the device being
    probed.
    
    This is unreliable in the presence of calls to 'dev_set_name()', which may
    reallocate the device name string leaving the pinctrl mappings with a
    dangling reference. This then leads to a use-after-free every time the
    name is dereferenced by a device probe:
    
      | BUG: KASAN: invalid-access in strcmp+0x20/0x64
      | Read of size 1 at addr 13ffffc153494b00 by task modprobe/590
      | Pointer tag: [13], memory tag: [fe]
      |
      | Call trace:
      |  __kasan_report+0x16c/0x1dc
      |  kasan_report+0x10/0x18
      |  check_memory_region
      |  __hwasan_load1_noabort+0x4c/0x54
      |  strcmp+0x20/0x64
      |  create_pinctrl+0x18c/0x7f4
      |  pinctrl_get+0x90/0x114
      |  devm_pinctrl_get+0x44/0x98
      |  pinctrl_bind_pins+0x5c/0x450
      |  really_probe+0x1c8/0x9a4
      |  driver_probe_device+0x120/0x1d8
    
    Follow the example of sysfs, and duplicate the device name string before
    stashing it away in the pinctrl mapping entries.
    
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Reported-by: Elena Petrova <lenaptr@google.com>
    Tested-by: Elena Petrova <lenaptr@google.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20191002124206.22928-1-will@kernel.org
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 390d3fdcae2da52755b31aa44fcf19ecb5a2488b
Author: Michal Kalderon <michal.kalderon@marvell.com>
Date:   Wed Sep 25 15:33:32 2019 +0300

    RDMA/core: Fix use after free and refcnt leak on ndev in_device in iwarp_query_port
    
    If an iWARP driver is probed and removed while there are no ips set for
    the device, it will lead to a reference count leak on the inet device of
    the netdevice.
    
    In addition, the netdevice was accessed after already calling netdev_put,
    which could lead to using the netdev after already freed.
    
    Fixes: 4929116bdf72 ("RDMA/core: Add common iWARP query port")
    Link: https://lore.kernel.org/r/20190925123332.10746-1-michal.kalderon@marvell.com
    Signed-off-by: Ariel Elior <ariel.elior@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Reviewed-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Reviewed-by: Kamal Heib <kamalheib1@gmail.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 97acd0019d5dadd9c0e111c2083c889bfe548f25
Author: James Smart <jsmart2021@gmail.com>
Date:   Sat Sep 21 20:58:51 2019 -0700

    scsi: lpfc: Fix rpi release when deleting vport
    
    A prior use-after-free mailbox fix solved it's problem by null'ing a ndlp
    pointer.  However, further testing has shown that this change causes a
    later state change to occasionally be skipped, which results in a reference
    count never being decremented thus the rpi is never released, which causes
    a vport delete to never succeed.
    
    Revise the fix in the prior patch to no longer null the ndlp. Instead the
    RELEASE_RPI flag is set which will drive the release of the rpi.
    
    Given the new code was added at a deep indentation level, refactor the code
    block using a new routine that avoids the indentation issues.
    
    Fixes:  9b1640686470 ("scsi: lpfc: Fix use-after-free mailbox cmd completion")
    Link: https://lore.kernel.org/r/20190922035906.10977-6-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 8c7138b33e5c690c308b2a7085f6313fdcb3f616
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri Sep 27 16:00:31 2019 -0700

    net: Unpublish sk from sk_reuseport_cb before call_rcu
    
    The "reuse->sock[]" array is shared by multiple sockets.  The going away
    sk must unpublish itself from "reuse->sock[]" before making call_rcu()
    call.  However, this unpublish-action is currently done after a grace
    period and it may cause use-after-free.
    
    The fix is to move reuseport_detach_sock() to sk_destruct().
    Due to the above reason, any socket with sk_reuseport_cb has
    to go through the rcu grace period before freeing it.
    
    It is a rather old bug (~3 yrs).  The Fixes tag is not necessary
    the right commit but it is the one that introduced the SOCK_RCU_FREE
    logic and this fix is depending on it.
    
    Fixes: a4298e4522d6 ("net: add SOCK_RCU_FREE socket flag")
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 67b483dd03c4cd9e90e4c3943132dce514ea4e88
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Tue Sep 24 11:27:05 2019 -0700

    nvme-rdma: fix possible use-after-free in connect timeout
    
    If the connect times out, we may have already destroyed the
    queue in the timeout handler, so test if the queue is still
    allocated in the connect error handler.
    
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit ba56d8ce38c8252fff5b745db3899cf092578ede
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Sep 23 17:02:46 2019 +0800

    macsec: drop skb sk before calling gro_cells_receive
    
    Fei Liu reported a crash when doing netperf on a topo of macsec
    dev over veth:
    
      [  448.919128] refcount_t: underflow; use-after-free.
      [  449.090460] Call trace:
      [  449.092895]  refcount_sub_and_test+0xb4/0xc0
      [  449.097155]  tcp_wfree+0x2c/0x150
      [  449.100460]  ip_rcv+0x1d4/0x3a8
      [  449.103591]  __netif_receive_skb_core+0x554/0xae0
      [  449.108282]  __netif_receive_skb+0x28/0x78
      [  449.112366]  netif_receive_skb_internal+0x54/0x100
      [  449.117144]  napi_gro_complete+0x70/0xc0
      [  449.121054]  napi_gro_flush+0x6c/0x90
      [  449.124703]  napi_complete_done+0x50/0x130
      [  449.128788]  gro_cell_poll+0x8c/0xa8
      [  449.132351]  net_rx_action+0x16c/0x3f8
      [  449.136088]  __do_softirq+0x128/0x320
    
    The issue was caused by skb's true_size changed without its sk's
    sk_wmem_alloc increased in tcp/skb_gro_receive(). Later when the
    skb is being freed and the skb's truesize is subtracted from its
    sk's sk_wmem_alloc in tcp_wfree(), underflow occurs.
    
    macsec is calling gro_cells_receive() to receive a packet, which
    actually requires skb->sk to be NULL. However when macsec dev is
    over veth, it's possible the skb->sk is still set if the skb was
    not unshared or expanded from the peer veth.
    
    ip_rcv() is calling skb_orphan() to drop the skb's sk for tproxy,
    but it is too late for macsec's calling gro_cells_receive(). So
    fix it by dropping the skb's sk earlier on rx path of macsec.
    
    Fixes: 5491e7c6b1a9 ("macsec: enable GRO and RPS on macsec devices")
    Reported-by: Xiumei Mu <xmu@redhat.com>
    Reported-by: Fei Liu <feliu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b89f625e28d44552083f43752f62d8621ded0a04
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Sep 23 23:12:09 2019 +0800

    block: don't release queue's sysfs lock during switching elevator
    
    cecf5d87ff20 ("block: split .sysfs_lock into two locks") starts to
    release & acquire sysfs_lock before registering/un-registering elevator
    queue during switching elevator for avoiding potential deadlock from
    showing & storing 'queue/iosched' attributes and removing elevator's
    kobject.
    
    Turns out there isn't such deadlock because 'q->sysfs_lock' isn't
    required in .show & .store of queue/iosched's attributes, and just
    elevator's sysfs lock is acquired in elv_iosched_store() and
    elv_iosched_show(). So it is safe to hold queue's sysfs lock when
    registering/un-registering elevator queue.
    
    The biggest issue is that commit cecf5d87ff20 assumes that concurrent
    write on 'queue/scheduler' can't happen. However, this assumption isn't
    true, because kernfs_fop_write() only guarantees that concurrent write
    aren't called on the same open file, but the write could be from
    different open on the file. So we can't release & re-acquire queue's
    sysfs lock during switching elevator, otherwise use-after-free on
    elevator could be triggered.
    
    Fixes the issue by not releasing queue's sysfs lock during switching
    elevator.
    
    Fixes: cecf5d87ff20 ("block: split .sysfs_lock into two locks")
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Mike Snitzer <snitzer@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 1fac4a54374f7ef385938f3c6cf7649c0fe4f6cd
Author: Qu Wenruo <wqu@suse.com>
Date:   Mon Sep 23 14:56:14 2019 +0800

    btrfs: relocation: fix use-after-free on dead relocation roots
    
    [BUG]
    One user reported a reproducible KASAN report about use-after-free:
    
      BTRFS info (device sdi1): balance: start -dvrange=1256811659264..1256811659265
      BTRFS info (device sdi1): relocating block group 1256811659264 flags data|raid0
      ==================================================================
      BUG: KASAN: use-after-free in btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
      Write of size 8 at addr ffff88856f671710 by task kworker/u24:10/261579
    
      CPU: 2 PID: 261579 Comm: kworker/u24:10 Tainted: P           OE     5.2.11-arch1-1-kasan #4
      Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./X99 Extreme4, BIOS P3.80 04/06/2018
      Workqueue: btrfs-endio-write btrfs_endio_write_helper [btrfs]
      Call Trace:
       dump_stack+0x7b/0xba
       print_address_description+0x6c/0x22e
       ? btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       __kasan_report.cold+0x1b/0x3b
       ? btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       kasan_report+0x12/0x17
       __asan_report_store8_noabort+0x17/0x20
       btrfs_init_reloc_root+0x2cd/0x340 [btrfs]
       record_root_in_trans+0x2a0/0x370 [btrfs]
       btrfs_record_root_in_trans+0xf4/0x140 [btrfs]
       start_transaction+0x1ab/0xe90 [btrfs]
       btrfs_join_transaction+0x1d/0x20 [btrfs]
       btrfs_finish_ordered_io+0x7bf/0x18a0 [btrfs]
       ? lock_repin_lock+0x400/0x400
       ? __kmem_cache_shutdown.cold+0x140/0x1ad
       ? btrfs_unlink_subvol+0x9b0/0x9b0 [btrfs]
       finish_ordered_fn+0x15/0x20 [btrfs]
       normal_work_helper+0x1bd/0xca0 [btrfs]
       ? process_one_work+0x819/0x1720
       ? kasan_check_read+0x11/0x20
       btrfs_endio_write_helper+0x12/0x20 [btrfs]
       process_one_work+0x8c9/0x1720
       ? pwq_dec_nr_in_flight+0x2f0/0x2f0
       ? worker_thread+0x1d9/0x1030
       worker_thread+0x98/0x1030
       kthread+0x2bb/0x3b0
       ? process_one_work+0x1720/0x1720
       ? kthread_park+0x120/0x120
       ret_from_fork+0x35/0x40
    
      Allocated by task 369692:
       __kasan_kmalloc.part.0+0x44/0xc0
       __kasan_kmalloc.constprop.0+0xba/0xc0
       kasan_kmalloc+0x9/0x10
       kmem_cache_alloc_trace+0x138/0x260
       btrfs_read_tree_root+0x92/0x360 [btrfs]
       btrfs_read_fs_root+0x10/0xb0 [btrfs]
       create_reloc_root+0x47d/0xa10 [btrfs]
       btrfs_init_reloc_root+0x1e2/0x340 [btrfs]
       record_root_in_trans+0x2a0/0x370 [btrfs]
       btrfs_record_root_in_trans+0xf4/0x140 [btrfs]
       start_transaction+0x1ab/0xe90 [btrfs]
       btrfs_start_transaction+0x1e/0x20 [btrfs]
       __btrfs_prealloc_file_range+0x1c2/0xa00 [btrfs]
       btrfs_prealloc_file_range+0x13/0x20 [btrfs]
       prealloc_file_extent_cluster+0x29f/0x570 [btrfs]
       relocate_file_extent_cluster+0x193/0xc30 [btrfs]
       relocate_data_extent+0x1f8/0x490 [btrfs]
       relocate_block_group+0x600/0x1060 [btrfs]
       btrfs_relocate_block_group+0x3a0/0xa00 [btrfs]
       btrfs_relocate_chunk+0x9e/0x180 [btrfs]
       btrfs_balance+0x14e4/0x2fc0 [btrfs]
       btrfs_ioctl_balance+0x47f/0x640 [btrfs]
       btrfs_ioctl+0x119d/0x8380 [btrfs]
       do_vfs_ioctl+0x9f5/0x1060
       ksys_ioctl+0x67/0x90
       __x64_sys_ioctl+0x73/0xb0
       do_syscall_64+0xa5/0x370
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 369692:
       __kasan_slab_free+0x14f/0x210
       kasan_slab_free+0xe/0x10
       kfree+0xd8/0x270
       btrfs_drop_snapshot+0x154c/0x1eb0 [btrfs]
       clean_dirty_subvols+0x227/0x340 [btrfs]
       relocate_block_group+0x972/0x1060 [btrfs]
       btrfs_relocate_block_group+0x3a0/0xa00 [btrfs]
       btrfs_relocate_chunk+0x9e/0x180 [btrfs]
       btrfs_balance+0x14e4/0x2fc0 [btrfs]
       btrfs_ioctl_balance+0x47f/0x640 [btrfs]
       btrfs_ioctl+0x119d/0x8380 [btrfs]
       do_vfs_ioctl+0x9f5/0x1060
       ksys_ioctl+0x67/0x90
       __x64_sys_ioctl+0x73/0xb0
       do_syscall_64+0xa5/0x370
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      The buggy address belongs to the object at ffff88856f671100
       which belongs to the cache kmalloc-4k of size 4096
      The buggy address is located 1552 bytes inside of
       4096-byte region [ffff88856f671100, ffff88856f672100)
      The buggy address belongs to the page:
      page:ffffea0015bd9c00 refcount:1 mapcount:0 mapping:ffff88864400e600 index:0x0 compound_mapcount: 0
      flags: 0x2ffff0000010200(slab|head)
      raw: 02ffff0000010200 dead000000000100 dead000000000200 ffff88864400e600
      raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff88856f671600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff88856f671680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      >ffff88856f671700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                               ^
       ffff88856f671780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff88856f671800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ==================================================================
      BTRFS info (device sdi1): 1 enospc errors during balance
      BTRFS info (device sdi1): balance: ended with status: -28
    
    [CAUSE]
    The problem happens when finish_ordered_io() get called with balance
    still running, while the reloc root of that subvolume is already dead.
    (Tree is swap already done, but tree not yet deleted for possible qgroup
    usage.)
    
    That means root->reloc_root still exists, but that reloc_root can be
    under btrfs_drop_snapshot(), thus we shouldn't access it.
    
    The following race could cause the use-after-free problem:
    
                    CPU1              |                CPU2
    --------------------------------------------------------------------------
                                      | relocate_block_group()
                                      | |- unset_reloc_control(rc)
                                      | |- btrfs_commit_transaction()
    btrfs_finish_ordered_io()         | |- clean_dirty_subvols()
    |- btrfs_join_transaction()       |    |
       |- record_root_in_trans()      |    |
          |- btrfs_init_reloc_root()  |    |
             |- if (root->reloc_root) |    |
             |                        |    |- root->reloc_root = NULL
             |                        |    |- btrfs_drop_snapshot(reloc_root);
             |- reloc_root->last_trans|
                     = trans->transid |
                ^^^^^^^^^^^^^^^^^^^^^^
                Use after free
    
    [FIX]
    Fix it by the following modifications:
    
    - Test if the root has dead reloc tree before accessing root->reloc_root
      If the root has BTRFS_ROOT_DEAD_RELOC_TREE, then we don't need to
      create or update root->reloc_tree
    
    - Clear the BTRFS_ROOT_DEAD_RELOC_TREE flag until we have fully dropped
      reloc tree
      To co-operate with above modification, so as long as
      BTRFS_ROOT_DEAD_RELOC_TREE is still set, we won't try to re-create
      reloc tree at record_root_in_trans().
    
    Reported-by: Cebtenzzre <cebtenzzre@gmail.com>
    Fixes: d2311e698578 ("btrfs: relocation: Delay reloc tree deletion after merge_reloc_roots")
    CC: stable@vger.kernel.org # 5.1+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 2b481835cf4e7384b80d7762074b32a45b792d99
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Sep 21 09:01:45 2019 +0300

    wil6210: use after free in wil_netif_rx_any()
    
    The debug code dereferences "skb" to print "skb->len" so we have to
    print the message before we free "skb".
    
    Fixes: f99fe49ff372 ("wil6210: add wil_netif_rx() helper function")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 8974558f49a6a41b4a74db672e13bca616eff6d8
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Mon Sep 23 15:34:42 2019 -0700

    mm, page_owner, debug_pagealloc: save and dump freeing stack trace
    
    The debug_pagealloc functionality is useful to catch buggy page allocator
    users that cause e.g.  use after free or double free.  When page
    inconsistency is detected, debugging is often simpler by knowing the call
    stack of process that last allocated and freed the page.  When page_owner
    is also enabled, we record the allocation stack trace, but not freeing.
    
    This patch therefore adds recording of freeing process stack trace to page
    owner info, if both page_owner and debug_pagealloc are configured and
    enabled.  With only page_owner enabled, this info is not useful for the
    memory leak debugging use case.  dump_page() is adjusted to print the
    info.  An example result of calling __free_pages() twice may look like
    this (note the page last free stack trace):
    
    BUG: Bad page state in process bash  pfn:13d8f8
    page:ffffc31984f63e00 refcount:-1 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0x1affff800000000()
    raw: 01affff800000000 dead000000000100 dead000000000122 0000000000000000
    raw: 0000000000000000 0000000000000000 ffffffffffffffff 0000000000000000
    page dumped because: nonzero _refcount
    page_owner tracks the page as freed
    page last allocated via order 0, migratetype Unmovable, gfp_mask 0xcc0(GFP_KERNEL)
     prep_new_page+0x143/0x150
     get_page_from_freelist+0x289/0x380
     __alloc_pages_nodemask+0x13c/0x2d0
     khugepaged+0x6e/0xc10
     kthread+0xf9/0x130
     ret_from_fork+0x3a/0x50
    page last free stack trace:
     free_pcp_prepare+0x134/0x1e0
     free_unref_page+0x18/0x90
     khugepaged+0x7b/0xc10
     kthread+0xf9/0x130
     ret_from_fork+0x3a/0x50
    Modules linked in:
    CPU: 3 PID: 271 Comm: bash Not tainted 5.3.0-rc4-2.g07a1a73-default+ #57
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58-prebuilt.qemu.org 04/01/2014
    Call Trace:
     dump_stack+0x85/0xc0
     bad_page.cold+0xba/0xbf
     rmqueue_pcplist.isra.0+0x6c5/0x6d0
     rmqueue+0x2d/0x810
     get_page_from_freelist+0x191/0x380
     __alloc_pages_nodemask+0x13c/0x2d0
     __get_free_pages+0xd/0x30
     __pud_alloc+0x2c/0x110
     copy_page_range+0x4f9/0x630
     dup_mmap+0x362/0x480
     dup_mm+0x68/0x110
     copy_process+0x19e1/0x1b40
     _do_fork+0x73/0x310
     __x64_sys_clone+0x75/0x80
     do_syscall_64+0x6e/0x1e0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f10af854a10
    ...
    
    Link: http://lkml.kernel.org/r/20190820131828.22684-5-vbabka@suse.cz
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Michal Hocko <mhocko@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ae8f06b31a83e54777514308a63f669a1fed519e
Author: Walter Wu <walter-zh.wu@mediatek.com>
Date:   Mon Sep 23 15:34:13 2019 -0700

    kasan: add memory corruption identification for software tag-based mode
    
    Add memory corruption identification at bug report for software tag-based
    mode.  The report shows whether it is "use-after-free" or "out-of-bound"
    error instead of "invalid-access" error.  This will make it easier for
    programmers to see the memory corruption problem.
    
    We extend the slab to store five old free pointer tag and free backtrace,
    we can check if the tagged address is in the slab record and make a good
    guess if the object is more like "use-after-free" or "out-of-bound".
    therefore every slab memory corruption can be identified whether it's
    "use-after-free" or "out-of-bound".
    
    [aryabinin@virtuozzo.com: simplify & clenup code]
      Link: https://lkml.kernel.org/r/3318f9d7-a760-3cc8-b700-f06108ae745f@virtuozzo.com]
    Link: http://lkml.kernel.org/r/20190821180332.11450-1-aryabinin@virtuozzo.com
    Signed-off-by: Walter Wu <walter-zh.wu@mediatek.com>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      PCI: Add pci_irq_vector() and other stubs when !CONFIG_PCI
      arm64: tegra: Add PCIe slot supply information in p2972-0000 platform
      arm64: tegra: Add configuration for PCIe C5 sideband signals
      PCI: tegra: Add support to enable slot regulators
      PCI: tegra: Add support to configure sideband pins
      PCI: vmd: Fix shadow offsets to reflect spec changes
      PCI: vmd: Fix config addressing when using bus offsets
      PCI: dwc: Add validation that PCIe core is set to correct mode
      PCI: dwc: al: Add Amazon Annapurna Labs PCIe controller driver
      dt-bindings: PCI: Add Amazon's Annapurna Labs PCIe host bridge binding
      PCI: Add quirk to disable MSI-X support for Amazon's Annapurna Labs Root Port
      PCI/VPD: Prevent VPD access for Amazon's Annapurna Labs Root Port
      PCI: Add ACS quirk for Amazon Annapurna Labs root ports
      PCI: Add Amazon's Annapurna Labs vendor ID
      MAINTAINERS: Add PCI native host/endpoint controllers designated reviewer
      PCI: hv: Use bytes 4 and 5 from instance ID as the PCI domain numbers
      dt-bindings: PCI: tegra: Add PCIe slot supplies regulator entries
      dt-bindings: PCI: tegra: Add sideband pins configuration entries
      PCI: tegra: Add Tegra194 PCIe support
      PCI: Get rid of dev->has_secondary_link flag
      ...

commit 1851799e1d2978f68eea5d9dff322e121dcf59c1
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 10 13:14:52 2019 +0300

    thermal: Fix use-after-free when unregistering thermal zone device
    
    thermal_zone_device_unregister() cancels the delayed work that polls the
    thermal zone, but it does not wait for it to finish. This is racy with
    respect to the freeing of the thermal zone device, which can result in a
    use-after-free [1].
    
    Fix this by waiting for the delayed work to finish before freeing the
    thermal zone device. Note that thermal_zone_device_set_polling() is
    never invoked from an atomic context, so it is safe to call
    cancel_delayed_work_sync() that can block.
    
    [1]
    [  +0.002221] ==================================================================
    [  +0.000064] BUG: KASAN: use-after-free in __mutex_lock+0x1076/0x11c0
    [  +0.000016] Read of size 8 at addr ffff8881e48e0450 by task kworker/1:0/17
    
    [  +0.000023] CPU: 1 PID: 17 Comm: kworker/1:0 Not tainted 5.2.0-rc6-custom-02495-g8e73ca3be4af #1701
    [  +0.000010] Hardware name: Mellanox Technologies Ltd. MSN2100-CB2FO/SA001017, BIOS 5.6.5 06/07/2016
    [  +0.000016] Workqueue: events_freezable_power_ thermal_zone_device_check
    [  +0.000012] Call Trace:
    [  +0.000021]  dump_stack+0xa9/0x10e
    [  +0.000020]  print_address_description.cold.2+0x9/0x25e
    [  +0.000018]  __kasan_report.cold.3+0x78/0x9d
    [  +0.000016]  kasan_report+0xe/0x20
    [  +0.000016]  __mutex_lock+0x1076/0x11c0
    [  +0.000014]  step_wise_throttle+0x72/0x150
    [  +0.000018]  handle_thermal_trip+0x167/0x760
    [  +0.000019]  thermal_zone_device_update+0x19e/0x5f0
    [  +0.000019]  process_one_work+0x969/0x16f0
    [  +0.000017]  worker_thread+0x91/0xc40
    [  +0.000014]  kthread+0x33d/0x400
    [  +0.000015]  ret_from_fork+0x3a/0x50
    
    [  +0.000020] Allocated by task 1:
    [  +0.000015]  save_stack+0x19/0x80
    [  +0.000015]  __kasan_kmalloc.constprop.4+0xc1/0xd0
    [  +0.000014]  kmem_cache_alloc_trace+0x152/0x320
    [  +0.000015]  thermal_zone_device_register+0x1b4/0x13a0
    [  +0.000015]  mlxsw_thermal_init+0xc92/0x23d0
    [  +0.000014]  __mlxsw_core_bus_device_register+0x659/0x11b0
    [  +0.000013]  mlxsw_core_bus_device_register+0x3d/0x90
    [  +0.000013]  mlxsw_pci_probe+0x355/0x4b0
    [  +0.000014]  local_pci_probe+0xc3/0x150
    [  +0.000013]  pci_device_probe+0x280/0x410
    [  +0.000013]  really_probe+0x26a/0xbb0
    [  +0.000013]  driver_probe_device+0x208/0x2e0
    [  +0.000013]  device_driver_attach+0xfe/0x140
    [  +0.000013]  __driver_attach+0x110/0x310
    [  +0.000013]  bus_for_each_dev+0x14b/0x1d0
    [  +0.000013]  driver_register+0x1c0/0x400
    [  +0.000015]  mlxsw_sp_module_init+0x5d/0xd3
    [  +0.000014]  do_one_initcall+0x239/0x4dd
    [  +0.000013]  kernel_init_freeable+0x42b/0x4e8
    [  +0.000012]  kernel_init+0x11/0x18b
    [  +0.000013]  ret_from_fork+0x3a/0x50
    
    [  +0.000015] Freed by task 581:
    [  +0.000013]  save_stack+0x19/0x80
    [  +0.000014]  __kasan_slab_free+0x125/0x170
    [  +0.000013]  kfree+0xf3/0x310
    [  +0.000013]  thermal_release+0xc7/0xf0
    [  +0.000014]  device_release+0x77/0x200
    [  +0.000014]  kobject_put+0x1a8/0x4c0
    [  +0.000014]  device_unregister+0x38/0xc0
    [  +0.000014]  thermal_zone_device_unregister+0x54e/0x6a0
    [  +0.000014]  mlxsw_thermal_fini+0x184/0x35a
    [  +0.000014]  mlxsw_core_bus_device_unregister+0x10a/0x640
    [  +0.000013]  mlxsw_devlink_core_bus_device_reload+0x92/0x210
    [  +0.000015]  devlink_nl_cmd_reload+0x113/0x1f0
    [  +0.000014]  genl_family_rcv_msg+0x700/0xee0
    [  +0.000013]  genl_rcv_msg+0xca/0x170
    [  +0.000013]  netlink_rcv_skb+0x137/0x3a0
    [  +0.000012]  genl_rcv+0x29/0x40
    [  +0.000013]  netlink_unicast+0x49b/0x660
    [  +0.000013]  netlink_sendmsg+0x755/0xc90
    [  +0.000013]  __sys_sendto+0x3de/0x430
    [  +0.000013]  __x64_sys_sendto+0xe2/0x1b0
    [  +0.000013]  do_syscall_64+0xa4/0x4d0
    [  +0.000013]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  +0.000017] The buggy address belongs to the object at ffff8881e48e0008
                   which belongs to the cache kmalloc-2k of size 2048
    [  +0.000012] The buggy address is located 1096 bytes inside of
                   2048-byte region [ffff8881e48e0008, ffff8881e48e0808)
    [  +0.000007] The buggy address belongs to the page:
    [  +0.000012] page:ffffea0007923800 refcount:1 mapcount:0 mapping:ffff88823680d0c0 index:0x0 compound_mapcount: 0
    [  +0.000020] flags: 0x200000000010200(slab|head)
    [  +0.000019] raw: 0200000000010200 ffffea0007682008 ffffea00076ab808 ffff88823680d0c0
    [  +0.000016] raw: 0000000000000000 00000000000d000d 00000001ffffffff 0000000000000000
    [  +0.000007] page dumped because: kasan: bad access detected
    
    [  +0.000012] Memory state around the buggy address:
    [  +0.000012]  ffff8881e48e0300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012]  ffff8881e48e0380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012] >ffff8881e48e0400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000008]                                                  ^
    [  +0.000012]  ffff8881e48e0480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000012]  ffff8881e48e0500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  +0.000007] ==================================================================
    
    Fixes: b1569e99c795 ("ACPI: move thermal trip handling to generic thermal layer")
    Reported-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

commit 73f0c11d11329a0d6d205d4312b6e5d2512af7c5
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Wed Sep 18 10:21:17 2019 -0700

    net: qrtr: Stop rx_worker before freeing node
    
    As the endpoint is unregistered there might still be work pending to
    handle incoming messages, which will result in a use after free
    scenario. The plan is to remove the rx_worker, but until then (and for
    stable@) ensure that the work is stopped before the node is freed.
    
    Fixes: bdabad3e363d ("net: Add Qualcomm IPC router")
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commits)
      unicode: make array 'token' static const, makes object smaller
      unicode: Move static keyword to the front of declarations
      ext4: add missing bigalloc documentation.
      ext4: fix kernel oops caused by spurious casefold flag
      ext4: fix integer overflow when calculating commit interval
      ext4: use percpu_counters for extent_status cache hits/misses
      ext4: fix potential use after free after remounting with noblock_validity
      jbd2: add missing tracepoint for reserved handle
      ext4: fix punch hole for inline_data file systems
      ext4: rework reserved cluster accounting when invalidating pages
      ext4: documentation fixes
      ext4: treat buffers with write errors as containing valid data
      ext4: fix warning inside ext4_convert_unwritten_extents_endio
      ext4: set error return correctly when ext4_htree_store_dirent fails
      ext4: drop legacy pre-1970 encoding workaround
      ext4: add new ioctl EXT4_IOC_GET_ES_CACHE
      ext4: add a new ioctl EXT4_IOC_GETSTATE
      ext4: add a new ioctl EXT4_IOC_CLEAR_ES_CACHE
      jbd2: flush_descriptor(): Do not decrease buffer head's ref count
      ext4: remove unnecessary error check
      ...

commit 65e51e30d8625c82ddfe405da46124e9bbffaa71
Author: Steven Price <steven.price@arm.com>
Date:   Fri Sep 13 17:03:10 2019 +0100

    drm/panfrost: Prevent race when handling page fault
    
    When handling a GPU page fault addr_to_drm_mm_node() is used to
    translate the GPU address to a buffer object. However it is possible for
    the buffer object to be freed after the function has returned resulting
    in a use-after-free of the BO.
    
    Change addr_to_drm_mm_node to return the panfrost_gem_object with an
    extra reference on it, preventing the BO from being freed until after
    the page fault has been handled.
    
    Signed-off-by: Steven Price <steven.price@arm.com>
    Signed-off-by: Rob Herring <robh@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190913160310.50444-1-steven.price@arm.com

commit 7fd25e6fc035f4b04b75bca6d7e8daa069603a76
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Sep 19 14:12:34 2019 +0200

    ieee802154: atusb: fix use-after-free at disconnect
    
    The disconnect callback was accessing the hardware-descriptor private
    data after having having freed it.
    
    Fixes: 7490b008d123 ("ieee802154: add support for atusb transceiver")
    Cc: stable <stable@vger.kernel.org>     # 4.2
    Cc: Alexander Aring <alex.aring@gmail.com>
    Reported-by: syzbot+f4509a9138a1472e7e80@syzkaller.appspotmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>

commit 5f5ad9ced33621d353be6429c3900f8a526fcae8
Author: Jackie Liu <liuyun01@kylinos.cn>
Date:   Wed Sep 18 10:37:53 2019 +0800

    io_uring: fix use-after-free of shadow_req
    
    There is a potential dangling pointer problem. we never clean
    shadow_req, if there are multiple link lists in this series of
    sqes, then the shadow_req will not reallocate, and continue to
    use the last one. but in the previous, his memory has been
    released, thus forming a dangling pointer. let's clean up him
    and make sure that every new link list can reapply for a new
    shadow_req.
    
    Fixes: 4fe2c963154c ("io_uring: add support for link with drain")
    Signed-off-by: Jackie Liu <liuyun01@kylinos.cn>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit cc204d01262a69218b2d0db5cdea371de85871d9
Author: Trond Myklebust <trondmy@gmail.com>
Date:   Tue Sep 10 13:01:35 2019 -0400

    SUNRPC: Dequeue the request from the receive queue while we're re-encoding
    
    Ensure that we dequeue the request from the transport receive queue
    while we're re-encoding to prevent issues like use-after-free when
    we release the bvec.
    
    Fixes: 7536908982047 ("SUNRPC: Ensure the bvecs are reset when we re-encode...")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Cc: stable@vger.kernel.org # v4.20+
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit d518d2ed8640c1cbbbb6f63939e3e65471817367
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Sep 12 12:02:42 2019 +0200

    net/sched: fix race between deactivation and dequeue for NOLOCK qdisc
    
    The test implemented by some_qdisc_is_busy() is somewhat loosy for
    NOLOCK qdisc, as we may hit the following scenario:
    
    CPU1                                            CPU2
    // in net_tx_action()
    clear_bit(__QDISC_STATE_SCHED...);
                                                    // in some_qdisc_is_busy()
                                                    val = (qdisc_is_running(q) ||
                                                           test_bit(__QDISC_STATE_SCHED,
                                                                    &q->state));
                                                    // here val is 0 but...
    qdisc_run(q)
    // ... CPU1 is going to run the qdisc next
    
    As a conseguence qdisc_run() in net_tx_action() can race with qdisc_reset()
    in dev_qdisc_reset(). Such race is not possible for !NOLOCK qdisc as
    both the above bit operations are under the root qdisc lock().
    
    After commit 021a17ed796b ("pfifo_fast: drop unneeded additional lock on dequeue")
    the race can cause use after free and/or null ptr dereference, but the root
    cause is likely older.
    
    This patch addresses the issue explicitly checking for deactivation under
    the seqlock for NOLOCK qdisc, so that the qdisc_run() in the critical
    scenario becomes a no-op.
    
    Note that the enqueue() op can still execute concurrently with dev_qdisc_reset(),
    but that is safe due to the skb_array() locking, and we can't avoid that
    for NOLOCK qdiscs.
    
    Fixes: 021a17ed796b ("pfifo_fast: drop unneeded additional lock on dequeue")
    Reported-by: Li Shuang <shuali@redhat.com>
    Reported-and-tested-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      cdc_ether: fix rndis support for Mediatek based smartphones
      sctp: destroy bucket if failed to bind addr
      sctp: remove redundant assignment when call sctp_get_port_local
      sctp: change return type of sctp_get_port_local
      ixgbevf: Fix secpath usage for IPsec Tx offload
      sctp: Fix the link time qualifier of 'sctp_ctrlsock_exit()'
      ixgbe: Fix secpath usage for IPsec TX offload.
      net: qrtr: fix memort leak in qrtr_tun_write_iter
      net: Fix null de-reference of device refcount
      ipv6: Fix the link time qualifier of 'ping_v6_proc_exit_net()'
      tun: fix use-after-free when register netdev failed
      tcp: fix tcp_ecn_withdraw_cwr() to clear TCP_ECN_QUEUE_CWR
      ixgbe: fix double clean of Tx descriptors with xdp
      ixgbe: Prevent u8 wrapping of ITR value to something less than 10us
      mlx4: fix spelling mistake "veify" -> "verify"
      net: hns3: fix spelling mistake "undeflow" -> "underflow"
      net: lmc: fix spelling mistake "runnin" -> "running"
      NFC: st95hf: fix spelling mistake "receieve" -> "receive"
      net/rds: An rds_sock is added too early to the hash table
      mac80211: Do not send Layer 2 Update frame before authorization
      ...

commit 410f954cb1d1c79ae485dd83a175f21954fd87cd
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Sep 10 15:26:49 2019 +0100

    Btrfs: fix assertion failure during fsync and use of stale transaction
    
    Sometimes when fsync'ing a file we need to log that other inodes exist and
    when we need to do that we acquire a reference on the inodes and then drop
    that reference using iput() after logging them.
    
    That generally is not a problem except if we end up doing the final iput()
    (dropping the last reference) on the inode and that inode has a link count
    of 0, which can happen in a very short time window if the logging path
    gets a reference on the inode while it's being unlinked.
    
    In that case we end up getting the eviction callback, btrfs_evict_inode(),
    invoked through the iput() call chain which needs to drop all of the
    inode's items from its subvolume btree, and in order to do that, it needs
    to join a transaction at the helper function evict_refill_and_join().
    However because the task previously started a transaction at the fsync
    handler, btrfs_sync_file(), it has current->journal_info already pointing
    to a transaction handle and therefore evict_refill_and_join() will get
    that transaction handle from btrfs_join_transaction(). From this point on,
    two different problems can happen:
    
    1) evict_refill_and_join() will often change the transaction handle's
       block reserve (->block_rsv) and set its ->bytes_reserved field to a
       value greater than 0. If evict_refill_and_join() never commits the
       transaction, the eviction handler ends up decreasing the reference
       count (->use_count) of the transaction handle through the call to
       btrfs_end_transaction(), and after that point we have a transaction
       handle with a NULL ->block_rsv (which is the value prior to the
       transaction join from evict_refill_and_join()) and a ->bytes_reserved
       value greater than 0. If after the eviction/iput completes the inode
       logging path hits an error or it decides that it must fallback to a
       transaction commit, the btrfs fsync handle, btrfs_sync_file(), gets a
       non-zero value from btrfs_log_dentry_safe(), and because of that
       non-zero value it tries to commit the transaction using a handle with
       a NULL ->block_rsv and a non-zero ->bytes_reserved value. This makes
       the transaction commit hit an assertion failure at
       btrfs_trans_release_metadata() because ->bytes_reserved is not zero but
       the ->block_rsv is NULL. The produced stack trace for that is like the
       following:
    
       [192922.917158] assertion failed: !trans->bytes_reserved, file: fs/btrfs/transaction.c, line: 816
       [192922.917553] ------------[ cut here ]------------
       [192922.917922] kernel BUG at fs/btrfs/ctree.h:3532!
       [192922.918310] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
       [192922.918666] CPU: 2 PID: 883 Comm: fsstress Tainted: G        W         5.1.4-btrfs-next-47 #1
       [192922.919035] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626ccb91-prebuilt.qemu-project.org 04/01/2014
       [192922.919801] RIP: 0010:assfail.constprop.25+0x18/0x1a [btrfs]
       (...)
       [192922.920925] RSP: 0018:ffffaebdc8a27da8 EFLAGS: 00010286
       [192922.921315] RAX: 0000000000000051 RBX: ffff95c9c16a41c0 RCX: 0000000000000000
       [192922.921692] RDX: 0000000000000000 RSI: ffff95cab6b16838 RDI: ffff95cab6b16838
       [192922.922066] RBP: ffff95c9c16a41c0 R08: 0000000000000000 R09: 0000000000000000
       [192922.922442] R10: ffffaebdc8a27e70 R11: 0000000000000000 R12: ffff95ca731a0980
       [192922.922820] R13: 0000000000000000 R14: ffff95ca84c73338 R15: ffff95ca731a0ea8
       [192922.923200] FS:  00007f337eda4e80(0000) GS:ffff95cab6b00000(0000) knlGS:0000000000000000
       [192922.923579] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
       [192922.923948] CR2: 00007f337edad000 CR3: 00000001e00f6002 CR4: 00000000003606e0
       [192922.924329] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [192922.924711] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
       [192922.925105] Call Trace:
       [192922.925505]  btrfs_trans_release_metadata+0x10c/0x170 [btrfs]
       [192922.925911]  btrfs_commit_transaction+0x3e/0xaf0 [btrfs]
       [192922.926324]  btrfs_sync_file+0x44c/0x490 [btrfs]
       [192922.926731]  do_fsync+0x38/0x60
       [192922.927138]  __x64_sys_fdatasync+0x13/0x20
       [192922.927543]  do_syscall_64+0x60/0x1c0
       [192922.927939]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
       (...)
       [192922.934077] ---[ end trace f00808b12068168f ]---
    
    2) If evict_refill_and_join() decides to commit the transaction, it will
       be able to do it, since the nested transaction join only increments the
       transaction handle's ->use_count reference counter and it does not
       prevent the transaction from getting committed. This means that after
       eviction completes, the fsync logging path will be using a transaction
       handle that refers to an already committed transaction. What happens
       when using such a stale transaction can be unpredictable, we are at
       least having a use-after-free on the transaction handle itself, since
       the transaction commit will call kmem_cache_free() against the handle
       regardless of its ->use_count value, or we can end up silently losing
       all the updates to the log tree after that iput() in the logging path,
       or using a transaction handle that in the meanwhile was allocated to
       another task for a new transaction, etc, pretty much unpredictable
       what can happen.
    
    In order to fix both of them, instead of using iput() during logging, use
    btrfs_add_delayed_iput(), so that the logging path of fsync never drops
    the last reference on an inode, that step is offloaded to a safe context
    (usually the cleaner kthread).
    
    The assertion failure issue was sporadically triggered by the test case
    generic/475 from fstests, which loads the dm error target while fsstress
    is running, which lead to fsync failing while logging inodes with -EIO
    errors and then trying later to commit the transaction, triggering the
    assertion failure.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 77f22f92dff8e7b45c7786a430626d38071d4670
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Sep 10 18:56:57 2019 +0800

    tun: fix use-after-free when register netdev failed
    
    I got a UAF repport in tun driver when doing fuzzy test:
    
    [  466.269490] ==================================================================
    [  466.271792] BUG: KASAN: use-after-free in tun_chr_read_iter+0x2ca/0x2d0
    [  466.271806] Read of size 8 at addr ffff888372139250 by task tun-test/2699
    [  466.271810]
    [  466.271824] CPU: 1 PID: 2699 Comm: tun-test Not tainted 5.3.0-rc1-00001-g5a9433db2614-dirty #427
    [  466.271833] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [  466.271838] Call Trace:
    [  466.271858]  dump_stack+0xca/0x13e
    [  466.271871]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271890]  print_address_description+0x79/0x440
    [  466.271906]  ? vprintk_func+0x5e/0xf0
    [  466.271920]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271935]  __kasan_report+0x15c/0x1df
    [  466.271958]  ? tun_chr_read_iter+0x2ca/0x2d0
    [  466.271976]  kasan_report+0xe/0x20
    [  466.271987]  tun_chr_read_iter+0x2ca/0x2d0
    [  466.272013]  do_iter_readv_writev+0x4b7/0x740
    [  466.272032]  ? default_llseek+0x2d0/0x2d0
    [  466.272072]  do_iter_read+0x1c5/0x5e0
    [  466.272110]  vfs_readv+0x108/0x180
    [  466.299007]  ? compat_rw_copy_check_uvector+0x440/0x440
    [  466.299020]  ? fsnotify+0x888/0xd50
    [  466.299040]  ? __fsnotify_parent+0xd0/0x350
    [  466.299064]  ? fsnotify_first_mark+0x1e0/0x1e0
    [  466.304548]  ? vfs_write+0x264/0x510
    [  466.304569]  ? ksys_write+0x101/0x210
    [  466.304591]  ? do_preadv+0x116/0x1a0
    [  466.304609]  do_preadv+0x116/0x1a0
    [  466.309829]  do_syscall_64+0xc8/0x600
    [  466.309849]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.309861] RIP: 0033:0x4560f9
    [  466.309875] Code: 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b8 ff ff ff f7 d8 64 89 01 48
    [  466.309889] RSP: 002b:00007ffffa5166e8 EFLAGS: 00000206 ORIG_RAX: 0000000000000127
    [  466.322992] RAX: ffffffffffffffda RBX: 0000000000400460 RCX: 00000000004560f9
    [  466.322999] RDX: 0000000000000003 RSI: 00000000200008c0 RDI: 0000000000000003
    [  466.323007] RBP: 00007ffffa516700 R08: 0000000000000004 R09: 0000000000000000
    [  466.323014] R10: 0000000000000000 R11: 0000000000000206 R12: 000000000040cb10
    [  466.323021] R13: 0000000000000000 R14: 00000000006d7018 R15: 0000000000000000
    [  466.323057]
    [  466.323064] Allocated by task 2605:
    [  466.335165]  save_stack+0x19/0x80
    [  466.336240]  __kasan_kmalloc.constprop.8+0xa0/0xd0
    [  466.337755]  kmem_cache_alloc+0xe8/0x320
    [  466.339050]  getname_flags+0xca/0x560
    [  466.340229]  user_path_at_empty+0x2c/0x50
    [  466.341508]  vfs_statx+0xe6/0x190
    [  466.342619]  __do_sys_newstat+0x81/0x100
    [  466.343908]  do_syscall_64+0xc8/0x600
    [  466.345303]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.347034]
    [  466.347517] Freed by task 2605:
    [  466.348471]  save_stack+0x19/0x80
    [  466.349476]  __kasan_slab_free+0x12e/0x180
    [  466.350726]  kmem_cache_free+0xc8/0x430
    [  466.351874]  putname+0xe2/0x120
    [  466.352921]  filename_lookup+0x257/0x3e0
    [  466.354319]  vfs_statx+0xe6/0x190
    [  466.355498]  __do_sys_newstat+0x81/0x100
    [  466.356889]  do_syscall_64+0xc8/0x600
    [  466.358037]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  466.359567]
    [  466.360050] The buggy address belongs to the object at ffff888372139100
    [  466.360050]  which belongs to the cache names_cache of size 4096
    [  466.363735] The buggy address is located 336 bytes inside of
    [  466.363735]  4096-byte region [ffff888372139100, ffff88837213a100)
    [  466.367179] The buggy address belongs to the page:
    [  466.368604] page:ffffea000dc84e00 refcount:1 mapcount:0 mapping:ffff8883df1b4f00 index:0x0 compound_mapcount: 0
    [  466.371582] flags: 0x2fffff80010200(slab|head)
    [  466.372910] raw: 002fffff80010200 dead000000000100 dead000000000122 ffff8883df1b4f00
    [  466.375209] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [  466.377778] page dumped because: kasan: bad access detected
    [  466.379730]
    [  466.380288] Memory state around the buggy address:
    [  466.381844]  ffff888372139100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.384009]  ffff888372139180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.386131] >ffff888372139200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.388257]                                                  ^
    [  466.390234]  ffff888372139280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.392512]  ffff888372139300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  466.394667] ==================================================================
    
    tun_chr_read_iter() accessed the memory which freed by free_netdev()
    called by tun_set_iff():
    
            CPUA                                           CPUB
      tun_set_iff()
        alloc_netdev_mqs()
        tun_attach()
                                                      tun_chr_read_iter()
                                                        tun_get()
                                                        tun_do_read()
                                                          tun_ring_recv()
        register_netdevice() <-- inject error
        goto err_detach
        tun_detach_all() <-- set RCV_SHUTDOWN
        free_netdev() <-- called from
                         err_free_dev path
          netdev_freemem() <-- free the memory
                            without check refcount
          (In this path, the refcount cannot prevent
           freeing the memory of dev, and the memory
           will be used by dev_put() called by
           tun_chr_read_iter() on CPUB.)
                                                         (Break from tun_ring_recv(),
                                                         because RCV_SHUTDOWN is set)
                                                       tun_put()
                                                         dev_put() <-- use the memory
                                                                       freed by netdev_freemem()
    
    Put the publishing of tfile->tun after register_netdevice(),
    so tun_get() won't get the tun pointer that freed by
    err_detach path if register_netdevice() failed.
    
    Fixes: eb0fb363f920 ("tuntap: attach queue 0 before registering netdevice")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Suggested-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit efad8a853ad2057f96664328a0d327a05ce39c76
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Aug 12 19:14:29 2019 +0100

    Btrfs: fix use-after-free when using the tree modification log
    
    At ctree.c:get_old_root(), we are accessing a root's header owner field
    after we have freed the respective extent buffer. This results in an
    use-after-free that can lead to crashes, and when CONFIG_DEBUG_PAGEALLOC
    is set, results in a stack trace like the following:
    
      [ 3876.799331] stack segment: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
      [ 3876.799363] CPU: 0 PID: 15436 Comm: pool Not tainted 5.3.0-rc3-btrfs-next-54 #1
      [ 3876.799385] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-0-ga698c8995f-prebuilt.qemu.org 04/01/2014
      [ 3876.799433] RIP: 0010:btrfs_search_old_slot+0x652/0xd80 [btrfs]
      (...)
      [ 3876.799502] RSP: 0018:ffff9f08c1a2f9f0 EFLAGS: 00010286
      [ 3876.799518] RAX: ffff8dd300000000 RBX: ffff8dd85a7a9348 RCX: 000000038da26000
      [ 3876.799538] RDX: 0000000000000000 RSI: ffffe522ce368980 RDI: 0000000000000246
      [ 3876.799559] RBP: dae1922adadad000 R08: 0000000008020000 R09: ffffe522c0000000
      [ 3876.799579] R10: ffff8dd57fd788c8 R11: 000000007511b030 R12: ffff8dd781ddc000
      [ 3876.799599] R13: ffff8dd9e6240578 R14: ffff8dd6896f7a88 R15: ffff8dd688cf90b8
      [ 3876.799620] FS:  00007f23ddd97700(0000) GS:ffff8dda20200000(0000) knlGS:0000000000000000
      [ 3876.799643] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 3876.799660] CR2: 00007f23d4024000 CR3: 0000000710bb0005 CR4: 00000000003606f0
      [ 3876.799682] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [ 3876.799703] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [ 3876.799723] Call Trace:
      [ 3876.799735]  ? do_raw_spin_unlock+0x49/0xc0
      [ 3876.799749]  ? _raw_spin_unlock+0x24/0x30
      [ 3876.799779]  resolve_indirect_refs+0x1eb/0xc80 [btrfs]
      [ 3876.799810]  find_parent_nodes+0x38d/0x1180 [btrfs]
      [ 3876.799841]  btrfs_check_shared+0x11a/0x1d0 [btrfs]
      [ 3876.799870]  ? extent_fiemap+0x598/0x6e0 [btrfs]
      [ 3876.799895]  extent_fiemap+0x598/0x6e0 [btrfs]
      [ 3876.799913]  do_vfs_ioctl+0x45a/0x700
      [ 3876.799926]  ksys_ioctl+0x70/0x80
      [ 3876.799938]  ? trace_hardirqs_off_thunk+0x1a/0x20
      [ 3876.799953]  __x64_sys_ioctl+0x16/0x20
      [ 3876.799965]  do_syscall_64+0x62/0x220
      [ 3876.799977]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
      [ 3876.799993] RIP: 0033:0x7f23e0013dd7
      (...)
      [ 3876.800056] RSP: 002b:00007f23ddd96ca8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [ 3876.800078] RAX: ffffffffffffffda RBX: 00007f23d80210f8 RCX: 00007f23e0013dd7
      [ 3876.800099] RDX: 00007f23d80210f8 RSI: 00000000c020660b RDI: 0000000000000003
      [ 3876.800626] RBP: 000055fa2a2a2440 R08: 0000000000000000 R09: 00007f23ddd96d7c
      [ 3876.801143] R10: 00007f23d8022000 R11: 0000000000000246 R12: 00007f23ddd96d80
      [ 3876.801662] R13: 00007f23ddd96d78 R14: 00007f23d80210f0 R15: 00007f23ddd96d80
      (...)
      [ 3876.805107] ---[ end trace e53161e179ef04f9 ]---
    
    Fix that by saving the root's header owner field into a local variable
    before freeing the root's extent buffer, and then use that local variable
    when needed.
    
    Fixes: 30b0463a9394d9 ("Btrfs: fix accessing the root pointer in tree mod log functions")
    CC: stable@vger.kernel.org # 3.10+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit a8c15954d64ac7177559c9f5eeb6593e5883fd69
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Sep 3 07:21:33 2019 +0100

    drm/i915: Protect debugfs per_file_stats with RCU lock
    
    If we make sure we grab a strong reference to each object as we dump it,
    we can reduce the locks outside of our iterators to an rcu_read_lock.
    
    This should prevent errors like:
    [ 2138.371911] BUG: KASAN: use-after-free in per_file_stats+0x43/0x380 [i915]
    [ 2138.371924] Read of size 8 at addr ffff888223651000 by task cat/8293
    
    [ 2138.371947] CPU: 0 PID: 8293 Comm: cat Not tainted 5.3.0-rc6-CI-Custom_4352+ #1
    [ 2138.371953] Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./J4205-ITX, BIOS P1.40 07/14/2017
    [ 2138.371959] Call Trace:
    [ 2138.371974]  dump_stack+0x7c/0xbb
    [ 2138.372099]  ? per_file_stats+0x43/0x380 [i915]
    [ 2138.372108]  print_address_description+0x73/0x3a0
    [ 2138.372231]  ? per_file_stats+0x43/0x380 [i915]
    [ 2138.372352]  ? per_file_stats+0x43/0x380 [i915]
    [ 2138.372362]  __kasan_report+0x14e/0x192
    [ 2138.372489]  ? per_file_stats+0x43/0x380 [i915]
    [ 2138.372502]  kasan_report+0xe/0x20
    [ 2138.372625]  per_file_stats+0x43/0x380 [i915]
    [ 2138.372751]  ? i915_panel_show+0x110/0x110 [i915]
    [ 2138.372761]  idr_for_each+0xa7/0x160
    [ 2138.372773]  ? idr_get_next_ul+0x110/0x110
    [ 2138.372782]  ? do_raw_spin_lock+0x10a/0x1d0
    [ 2138.372923]  print_context_stats+0x264/0x510 [i915]
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Tested-by: David Weinehall <david.weinehall@linux.intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190903062133.27360-1-chris@chris-wilson.co.uk

commit 58bab0d42f25fca97f35719f381485fdc873643e
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon Aug 12 15:48:53 2019 +0200

    mt76: stop rx aggregation on station removal
    
    Fixes use-after-free issues on forced station removal during hardware restart
    on MT76x02
    
    Fixes: aee5b8cf2477 ("mt76: implement A-MPDU rx reordering in the driver code")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>

commits)
      soc: ixp4xx: Protect IXP4xx SoC drivers by ARCH_IXP4XX || COMPILE_TEST
      soc: ti: pm33xx: Make two symbols static
      soc: ti: pm33xx: Fix static checker warnings
      ARM: OMAP: dma: Mark expected switch fall-throughs
      ARM: dts: Fix incomplete dts data for am3 and am4 mmc
      bus: ti-sysc: Simplify cleanup upon failures in sysc_probe()
      ARM: OMAP1: ams-delta-fiq: Fix missing irq_ack
      ARM: dts: dra74x: Fix iodelay configuration for mmc3
      ARM: dts: am335x: Fix UARTs length
      ARM: OMAP2+: Fix omap4 errata warning on other SoCs
      bus: hisi_lpc: Add .remove method to avoid driver unbind crash
      bus: hisi_lpc: Unregister logical PIO range to avoid potential use-after-free
      lib: logic_pio: Add logic_pio_unregister_range()
      lib: logic_pio: Avoid possible overlap for unregistering regions
      lib: logic_pio: Fix RCU usage
      arm64: dts: amlogic: odroid-n2: keep SD card regulator always on
      arm64: dts: meson-g12a-sei510: enable IR controller
      arm64: dts: meson-g12a: add missing dwc2 phy-names
      ARM: dts: vf610-bk4: Fix qspi node description
      ARM: dts: Fix incorrect dcan register mapping for am3, am4 and dra7
      ...

commit 76da906ad727048a74bb8067031ee99fc070c7da
Author: Schmid, Carsten <Carsten_Schmid@mentor.com>
Date:   Fri Aug 23 14:11:28 2019 +0000

    usb: hcd: use managed device resources
    
    Using managed device resources in usb_hcd_pci_probe() allows devm usage for
    resource subranges, such as the mmio resource for the platform device
    created to control host/device mode mux, which is a xhci extended
    capability, and sits inside the xhci mmio region.
    
    If managed device resources are not used then "parent" resource
    is released before subrange at driver removal as .remove callback is
    called before the devres list of resources for this device is walked
    and released.
    
    This has been observed with the xhci extended capability driver causing a
    use-after-free which is now fixed.
    
    An additional nice benefit is that error handling on driver initialisation
    is simplified much.
    
    Signed-off-by: Carsten Schmid <carsten_schmid@mentor.com>
    Tested-by: Carsten Schmid <carsten_schmid@mentor.com>
    Reviewed-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Fixes: fa31b3cb2ae1 ("xhci: Add Intel extended cap / otg phy mux handling")
    Cc: <stable@vger.kernel.org> # v4.19+
    
    Link: https://lore.kernel.org/r/1566569488679.31808@mentor.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 556d971bdae643de4cd7e2976e14f70ca2a3061d
Author: Thiago Jung Bauermann <bauerman@linux.ibm.com>
Date:   Wed Aug 7 21:43:18 2019 -0300

    ima: Fix use after free in ima_read_modsig()
    
    If we can't parse the PKCS7 in the appended modsig, we will free the modsig
    structure and then access one of its members to determine the error value.
    
    Fixes: 39b07096364a ("ima: Implement support for module-style appended signatures")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Reviewed-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>

commit 7727ae52975d4f4ef7ff69ed8e6e25f6a4168158
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Aug 28 11:13:24 2019 -0400

    ext4: fix potential use after free after remounting with noblock_validity
    
    Remount process will release system zone which was allocated before if
    "noblock_validity" is specified. If we mount an ext4 file system to two
    mountpoints with default mount options, and then remount one of them
    with "noblock_validity", it may trigger a use after free problem when
    someone accessing the other one.
    
     # mount /dev/sda foo
     # mount /dev/sda bar
    
    User access mountpoint "foo"   |   Remount mountpoint "bar"
                                   |
    ext4_map_blocks()              |   ext4_remount()
    check_block_validity()         |   ext4_setup_system_zone()
    ext4_data_block_valid()        |   ext4_release_system_zone()
                                   |   free system_blks rb nodes
    access system_blks rb nodes    |
    trigger use after free         |
    
    This problem can also be reproduced by one mountpint, At the same time,
    add_system_zone() can get called during remount as well so there can be
    racing ext4_data_block_valid() reading the rbtree at the same time.
    
    This patch add RCU to protect system zone from releasing or building
    when doing a remount which inverse current "noblock_validity" mount
    option. It assign the rbtree after the whole tree was complete and
    do actual freeing after rcu grace period, avoid any intermediate state.
    
    Reported-by: syzbot+1e470567330b7ad711d5@syzkaller.appspotmail.com
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>

commit 2c1644cf6d46a8267d79ed95cb9b563839346562
Author: Feng Sun <loyou85@gmail.com>
Date:   Mon Aug 26 14:46:04 2019 +0800

    net: fix skb use after free in netpoll
    
    After commit baeababb5b85d5c4e6c917efe2a1504179438d3b
    ("tun: return NET_XMIT_DROP for dropped packets"),
    when tun_net_xmit drop packets, it will free skb and return NET_XMIT_DROP,
    netpoll_send_skb_on_dev will run into following use after free cases:
    1. retry netpoll_start_xmit with freed skb;
    2. queue freed skb in npinfo->txq.
    queue_process will also run into use after free case.
    
    hit netpoll_send_skb_on_dev first case with following kernel log:
    
    [  117.864773] kernel BUG at mm/slub.c:306!
    [  117.864773] invalid opcode: 0000 [#1] SMP PTI
    [  117.864774] CPU: 3 PID: 2627 Comm: loop_printmsg Kdump: loaded Tainted: P           OE     5.3.0-050300rc5-generic #201908182231
    [  117.864775] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [  117.864775] RIP: 0010:kmem_cache_free+0x28d/0x2b0
    [  117.864781] Call Trace:
    [  117.864781]  ? tun_net_xmit+0x21c/0x460
    [  117.864781]  kfree_skbmem+0x4e/0x60
    [  117.864782]  kfree_skb+0x3a/0xa0
    [  117.864782]  tun_net_xmit+0x21c/0x460
    [  117.864782]  netpoll_start_xmit+0x11d/0x1b0
    [  117.864788]  netpoll_send_skb_on_dev+0x1b8/0x200
    [  117.864789]  __br_forward+0x1b9/0x1e0 [bridge]
    [  117.864789]  ? skb_clone+0x53/0xd0
    [  117.864790]  ? __skb_clone+0x2e/0x120
    [  117.864790]  deliver_clone+0x37/0x50 [bridge]
    [  117.864790]  maybe_deliver+0x89/0xc0 [bridge]
    [  117.864791]  br_flood+0x6c/0x130 [bridge]
    [  117.864791]  br_dev_xmit+0x315/0x3c0 [bridge]
    [  117.864792]  netpoll_start_xmit+0x11d/0x1b0
    [  117.864792]  netpoll_send_skb_on_dev+0x1b8/0x200
    [  117.864792]  netpoll_send_udp+0x2c6/0x3e8
    [  117.864793]  write_msg+0xd9/0xf0 [netconsole]
    [  117.864793]  console_unlock+0x386/0x4e0
    [  117.864793]  vprintk_emit+0x17e/0x280
    [  117.864794]  vprintk_default+0x29/0x50
    [  117.864794]  vprintk_func+0x4c/0xbc
    [  117.864794]  printk+0x58/0x6f
    [  117.864795]  loop_fun+0x24/0x41 [printmsg_loop]
    [  117.864795]  kthread+0x104/0x140
    [  117.864795]  ? 0xffffffffc05b1000
    [  117.864796]  ? kthread_park+0x80/0x80
    [  117.864796]  ret_from_fork+0x35/0x40
    
    Signed-off-by: Feng Sun <loyou85@gmail.com>
    Signed-off-by: Xiaojun Zhao <xiaojunzhao141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      r8152: Set memory to all 0xFFs on failed reg reads
      openvswitch: Fix conntrack cache with timeout
      ipv4: mpls: fix mpls_xmit for iptunnel
      nexthop: Fix nexthop_num_path for blackhole nexthops
      net: rds: add service level support in rds-info
      net: route dump netlink NLM_F_MULTI flag missing
      s390/qeth: reject oversized SNMP requests
      sock: fix potential memory leak in proto_register()
      MAINTAINERS: Add phylink keyword to SFF/SFP/SFP+ MODULE SUPPORT
      xfrm/xfrm_policy: fix dst dev null pointer dereference in collect_md mode
      ipv4/icmp: fix rt dst dev null pointer dereference
      openvswitch: Fix log message in ovs conntrack
      bpf: allow narrow loads of some sk_reuseport_md fields with offset > 0
      bpf: fix use after free in prog symbol exposure
      bpf: fix precision tracking in presence of bpf2bpf calls
      flow_dissector: Fix potential use-after-free on BPF_PROG_DETACH
      Revert "r8169: remove not needed call to dma_sync_single_for_device"
      ipv6: propagate ipv6_add_dev's error returns out of ipv6_find_idev
      net/ncsi: Fix the payload copying for the request coming from Netlink
      qed: Add cleanup in qed_slowpath_start()
      ...

commit 3e644828421e31167bedd8dc4d291cdcc822ab20
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Mon Jul 8 14:19:05 2019 +0800

    phy: ti: am654-serdes: fix an use-after-free in serdes_am654_clk_register()
    
    The regmap_node variable is still being used in the syscon_node_to_regmap()
    call after the of_node_put() call, which may result in use-after-free.
    
    Fixes: 71e2f5c5c224 ("phy: ti: Add a new SERDES driver for TI's AM654x SoC")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: Kishon Vijay Abraham I <kishon@ti.com>
    Cc: Roger Quadros <rogerq@ti.com>
    Reviewed-by: Roger Quadros <rogerq@ti.com>
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>

commit c751798aa224fadc5124b49eeb38fb468c0fa039
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Aug 23 22:14:23 2019 +0200

    bpf: fix use after free in prog symbol exposure
    
    syzkaller managed to trigger the warning in bpf_jit_free() which checks via
    bpf_prog_kallsyms_verify_off() for potentially unlinked JITed BPF progs
    in kallsyms, and subsequently trips over GPF when walking kallsyms entries:
    
      [...]
      8021q: adding VLAN 0 to HW filter on device batadv0
      8021q: adding VLAN 0 to HW filter on device batadv0
      WARNING: CPU: 0 PID: 9869 at kernel/bpf/core.c:810 bpf_jit_free+0x1e8/0x2a0
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 9869 Comm: kworker/0:7 Not tainted 5.0.0-rc8+ #1
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Workqueue: events bpf_prog_free_deferred
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x113/0x167 lib/dump_stack.c:113
       panic+0x212/0x40b kernel/panic.c:214
       __warn.cold.8+0x1b/0x38 kernel/panic.c:571
       report_bug+0x1a4/0x200 lib/bug.c:186
       fixup_bug arch/x86/kernel/traps.c:178 [inline]
       do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:271
       do_invalid_op+0x36/0x40 arch/x86/kernel/traps.c:290
       invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:973
      RIP: 0010:bpf_jit_free+0x1e8/0x2a0
      Code: 02 4c 89 e2 83 e2 07 38 d0 7f 08 84 c0 0f 85 86 00 00 00 48 ba 00 02 00 00 00 00 ad de 0f b6 43 02 49 39 d6 0f 84 5f fe ff ff <0f> 0b e9 58 fe ff ff 48 b8 00 00 00 00 00 fc ff df 4c 89 e2 48 c1
      RSP: 0018:ffff888092f67cd8 EFLAGS: 00010202
      RAX: 0000000000000007 RBX: ffffc90001947000 RCX: ffffffff816e9d88
      RDX: dead000000000200 RSI: 0000000000000008 RDI: ffff88808769f7f0
      RBP: ffff888092f67d00 R08: fffffbfff1394059 R09: fffffbfff1394058
      R10: fffffbfff1394058 R11: ffffffff89ca02c7 R12: ffffc90001947002
      R13: ffffc90001947020 R14: ffffffff881eca80 R15: ffff88808769f7e8
      BUG: unable to handle kernel paging request at fffffbfff400d000
      #PF error: [normal kernel read fault]
      PGD 21ffee067 P4D 21ffee067 PUD 21ffed067 PMD 9f942067 PTE 0
      Oops: 0000 [#1] PREEMPT SMP KASAN
      CPU: 0 PID: 9869 Comm: kworker/0:7 Not tainted 5.0.0-rc8+ #1
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Workqueue: events bpf_prog_free_deferred
      RIP: 0010:bpf_get_prog_addr_region kernel/bpf/core.c:495 [inline]
      RIP: 0010:bpf_tree_comp kernel/bpf/core.c:558 [inline]
      RIP: 0010:__lt_find include/linux/rbtree_latch.h:115 [inline]
      RIP: 0010:latch_tree_find include/linux/rbtree_latch.h:208 [inline]
      RIP: 0010:bpf_prog_kallsyms_find+0x107/0x2e0 kernel/bpf/core.c:632
      Code: 00 f0 ff ff 44 38 c8 7f 08 84 c0 0f 85 fa 00 00 00 41 f6 45 02 01 75 02 0f 0b 48 39 da 0f 82 92 00 00 00 48 89 d8 48 c1 e8 03 <42> 0f b6 04 30 84 c0 74 08 3c 03 0f 8e 45 01 00 00 8b 03 48 c1 e0
      [...]
    
    Upon further debugging, it turns out that whenever we trigger this
    issue, the kallsyms removal in bpf_prog_ksym_node_del() was /skipped/
    but yet bpf_jit_free() reported that the entry is /in use/.
    
    Problem is that symbol exposure via bpf_prog_kallsyms_add() but also
    perf_event_bpf_event() were done /after/ bpf_prog_new_fd(). Once the
    fd is exposed to the public, a parallel close request came in right
    before we attempted to do the bpf_prog_kallsyms_add().
    
    Given at this time the prog reference count is one, we start to rip
    everything underneath us via bpf_prog_release() -> bpf_prog_put().
    The memory is eventually released via deferred free, so we're seeing
    that bpf_jit_free() has a kallsym entry because we added it from
    bpf_prog_load() but /after/ bpf_prog_put() from the remote CPU.
    
    Therefore, move both notifications /before/ we install the fd. The
    issue was never seen between bpf_prog_alloc_id() and bpf_prog_new_fd()
    because upon bpf_prog_get_fd_by_id() we'll take another reference to
    the BPF prog, so we're still holding the original reference from the
    bpf_prog_load().
    
    Fixes: 6ee52e2a3fe4 ("perf, bpf: Introduce PERF_RECORD_BPF_EVENT")
    Fixes: 74451e66d516 ("bpf: make jited programs visible in traces")
    Reported-by: syzbot+bd3bba6ff3fcea7a6ec6@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Song Liu <songliubraving@fb.com>

commit db38de39684dda2bf307f41797db2831deba64e9
Author: Jakub Sitnicki <jakub@cloudflare.com>
Date:   Wed Aug 21 14:17:20 2019 +0200

    flow_dissector: Fix potential use-after-free on BPF_PROG_DETACH
    
    Call to bpf_prog_put(), with help of call_rcu(), queues an RCU-callback to
    free the program once a grace period has elapsed. The callback can run
    together with new RCU readers that started after the last grace period.
    New RCU readers can potentially see the "old" to-be-freed or already-freed
    pointer to the program object before the RCU update-side NULLs it.
    
    Reorder the operations so that the RCU update-side resets the protected
    pointer before the end of the grace period after which the program will be
    freed.
    
    Fixes: d58e468b1112 ("flow_dissector: implements flow dissector BPF hook")
    Reported-by: Lorenz Bauer <lmb@cloudflare.com>
    Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
    Acked-by: Petar Penkov <ppenkov@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 43ca5dab978294eae26a36f8989b6f0769da4256
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Tue Aug 20 14:05:32 2019 +0900

    ASoC: soc-topology: use for_each_component_dais() at remove_dai()
    
    commit 52abe6cc1866a ("ASoC: topology: fix oops/use-after-free case
    with dai driver") fixups remove_dai() error, but it is using
    list_for_each_entry() for component->dai_list.
    
    We already have for_each_component_dais() macro for it.
    Let's use exising method.
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Link: https://lore.kernel.org/r/87tvaczazd.wl-kuninori.morimoto.gx@renesas.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 416dacb819f59180e4d86a5550052033ebb6d72c
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Aug 21 13:27:12 2019 -0400

    HID: hidraw: Fix invalid read in hidraw_ioctl
    
    The syzbot fuzzer has reported a pair of problems in the
    hidraw_ioctl() function: slab-out-of-bounds read and use-after-free
    read.  An example of the first:
    
    BUG: KASAN: slab-out-of-bounds in strlen+0x79/0x90 lib/string.c:525
    Read of size 1 at addr ffff8881c8035f38 by task syz-executor.4/2833
    
    CPU: 1 PID: 2833 Comm: syz-executor.4 Not tainted 5.3.0-rc2+ #1
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0xca/0x13e lib/dump_stack.c:113
      print_address_description+0x6a/0x32c mm/kasan/report.c:351
      __kasan_report.cold+0x1a/0x33 mm/kasan/report.c:482
      kasan_report+0xe/0x12 mm/kasan/common.c:612
      strlen+0x79/0x90 lib/string.c:525
      strlen include/linux/string.h:281 [inline]
      hidraw_ioctl+0x245/0xae0 drivers/hid/hidraw.c:446
      vfs_ioctl fs/ioctl.c:46 [inline]
      file_ioctl fs/ioctl.c:509 [inline]
      do_vfs_ioctl+0xd2d/0x1330 fs/ioctl.c:696
      ksys_ioctl+0x9b/0xc0 fs/ioctl.c:713
      __do_sys_ioctl fs/ioctl.c:720 [inline]
      __se_sys_ioctl fs/ioctl.c:718 [inline]
      __x64_sys_ioctl+0x6f/0xb0 fs/ioctl.c:718
      do_syscall_64+0xb7/0x580 arch/x86/entry/common.c:296
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x459829
    Code: fd b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7
    48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
    ff 0f 83 cb b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f7a68f6dc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000459829
    RDX: 0000000000000000 RSI: 0000000080404805 RDI: 0000000000000004
    RBP: 000000000075bf20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f7a68f6e6d4
    R13: 00000000004c21de R14: 00000000004d5620 R15: 00000000ffffffff
    
    The two problems have the same cause: hidraw_ioctl() fails to test
    whether the device has been removed.  This patch adds the missing test.
    
    Reported-and-tested-by: syzbot+5a6c4ec678a0c6ee84ba@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 40e90656c13587c0826e8afeef3cebe585db2d2c
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu Aug 8 15:18:26 2019 +0800

    s390/mm: use refcount_t for refcount
    
    Reference counters are preferred to use refcount_t instead of
    atomic_t.
    This is because the implementation of refcount_t can prevent
    overflows and detect possible use-after-free.
    So convert atomic_t ref counters to refcount_t.
    
    Link: http://lkml.kernel.org/r/20190808071826.6649-1-hslester96@gmail.com
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

commit 3434caec5b70519ead87e7b66dbdc18e8dbaa506
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu Aug 8 15:18:17 2019 +0800

    s390/extmem: use refcount_t for refcount
    
    Reference counters are preferred to use refcount_t instead of
    atomic_t.
    This is because the implementation of refcount_t can prevent
    overflows and detect possible use-after-free.
    So convert atomic_t ref counters to refcount_t.
    
    Link: http://lkml.kernel.org/r/20190808071817.6595-1-hslester96@gmail.com
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

commit 0029cab3146a53b820e73c9cd70809b831c590d7
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Tue Aug 6 20:15:46 2019 -0300

    drm/amdkfd: fix a use after free race with mmu_notifer unregister
    
    When using mmu_notifer_unregister_no_release() the caller must ensure
    there is a SRCU synchronize before the mn memory is freed, otherwise use
    after free races are possible, for instance:
    
         CPU0                                      CPU1
                                          invalidate_range_start
                                             hlist_for_each_entry_rcu(..)
     mmu_notifier_unregister_no_release(&p->mn)
     kfree(mn)
                                          if (mn->ops->invalidate_range_end)
    
    The error unwind in amdkfd misses the SRCU synchronization.
    
    amdkfd keeps the kfd_process around until the mm is released, so split the
    flow to fully initialize the kfd_process and register it for find_process,
    and with the notifier. Past this point the kfd_process does not need to be
    cleaned up as it is fully ready.
    
    The final failable step does a vm_mmap() and does not seem to impact the
    kfd_process global state. Since it also cannot be undone (and already has
    problems with undo if it internally fails), it has to be last.
    
    This way we don't have to try to unwind the mmu_notifier_register() and
    avoid the problem with the SRCU.
    
    Along the way this also fixes various other error unwind bugs in the flow.
    
    Fixes: 45102048f77e ("amdkfd: Add process queue manager module")
    Link: https://lore.kernel.org/r/20190806231548.25242-10-jgg@ziepe.ca
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 534e5f84b7a9c1e139ee8944fee6313d3a24d5d3
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Tue Aug 6 20:15:45 2019 -0300

    drm/radeon: use mmu_notifier_get/put for struct radeon_mn
    
    radeon is using a device global hash table to track what mmu_notifiers
    have been registered on struct mm. This is better served with the new
    get/put scheme instead.
    
    radeon has a bug where it was not blocking notifier release() until all
    the BO's had been invalidated. This could result in a use after free of
    pages the BOs. This is tied into a second bug where radeon left the
    notifiers running endlessly even once the interval tree became
    empty. This could result in a use after free with module unload.
    
    Both are fixed by changing the lifetime model, the BOs exist in the
    interval tree with their natural lifetimes independent of the mm_struct
    lifetime using the get/put scheme. The release runs synchronously and just
    does invalidate_start across the entire interval tree to create the
    required DMA fence.
    
    Additions to the interval tree after release are already impossible as
    only current->mm is used during the add.
    
    Link: https://lore.kernel.org/r/20190806231548.25242-9-jgg@ziepe.ca
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commits)
      ravb: Fix use-after-free ravb_tstamp_skb
      netfilter: nf_tables: map basechain priority to hardware priority
      net: sched: use major priority number as hardware priority
      wimax/i2400m: fix a memory leak bug
      net: cavium: fix driver name
      ibmvnic: Unmap DMA address of TX descriptor buffers after use
      bnxt_en: Fix to include flow direction in L2 key
      bnxt_en: Use correct src_fid to determine direction of the flow
      bnxt_en: Suppress HWRM errors for HWRM_NVM_GET_VARIABLE command
      bnxt_en: Fix handling FRAG_ERR when NVM_INSTALL_UPDATE cmd fails
      bnxt_en: Improve RX doorbell sequence.
      bnxt_en: Fix VNIC clearing logic for 57500 chips.
      net: kalmia: fix memory leaks
      cx82310_eth: fix a memory leak bug
      bnx2x: Fix VF's VLAN reconfiguration in reload.
      Bluetooth: Add debug setting for changing minimum encryption key size
      tipc: fix false detection of retransmit failures
      lan78xx: Fix memory leaks
      MAINTAINERS: r8169: Update path to the driver
      MAINTAINERS: PHY LIBRARY: Update files in the record
      ...

commit cfef46d692efd852a0da6803f920cc756eea2855
Author: Tho Vu <tho.vu.wh@rvc.renesas.com>
Date:   Fri Aug 16 17:17:02 2019 +0200

    ravb: Fix use-after-free ravb_tstamp_skb
    
    When a Tx timestamp is requested, a pointer to the skb is stored in the
    ravb_tstamp_skb struct. This was done without an skb_get. There exists
    the possibility that the skb could be freed by ravb_tx_free (when
    ravb_tx_free is called from ravb_start_xmit) before the timestamp was
    processed, leading to a use-after-free bug.
    
    Use skb_get when filling a ravb_tstamp_skb struct, and add appropriate
    frees/consumes when a ravb_tstamp_skb struct is freed.
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Signed-off-by: Tho Vu <tho.vu.wh@rvc.renesas.com>
    Signed-off-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2c7933f53f6bff7656e3324ca1a04e478bdc57c1
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Tue Aug 6 20:15:40 2019 -0300

    mm/mmu_notifiers: add a get/put scheme for the registration
    
    Many places in the kernel have a flow where userspace will create some
    object and that object will need to connect to the subsystem's
    mmu_notifier subscription for the duration of its lifetime.
    
    In this case the subsystem is usually tracking multiple mm_structs and it
    is difficult to keep track of what struct mmu_notifier's have been
    allocated for what mm's.
    
    Since this has been open coded in a variety of exciting ways, provide core
    functionality to do this safely.
    
    This approach uses the struct mmu_notifier_ops * as a key to determine if
    the subsystem has a notifier registered on the mm or not. If there is a
    registration then the existing notifier struct is returned, otherwise the
    ops->alloc_notifiers() is used to create a new per-subsystem notifier for
    the mm.
    
    The destroy side incorporates an async call_srcu based destruction which
    will avoid bugs in the callers such as commit 6d7c3cde93c1 ("mm/hmm: fix
    use after free with struct hmm in the mmu notifiers").
    
    Since we are inside the mmu notifier core locking is fairly simple, the
    allocation uses the same approach as for mmu_notifier_mm, the write side
    of the mmap_sem makes everything deterministic and we only need to do
    hlist_add_head_rcu() under the mm_take_all_locks(). The new users count
    and the discoverability in the hlist is fully serialized by the
    mmu_notifier_mm->lock.
    
    Link: https://lore.kernel.org/r/20190806231548.25242-4-jgg@ziepe.ca
    Co-developed-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>
    Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
    Tested-by: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 43b970fa82131ab4f42789a06bfd68dbc6f2a829
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu Aug 8 16:00:22 2019 +0800

    crypto: cryptd - Use refcount_t for refcount
    
    Reference counters are preferred to use refcount_t instead of
    atomic_t.
    This is because the implementation of refcount_t can prevent
    overflows and detect possible use-after-free.
    So convert atomic_t ref counters to refcount_t.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit a86a75865ff4d8c05f355d1750a5250aec89ab15
Author: Dmitry Fomichev <dmitry.fomichev@wdc.com>
Date:   Sun Aug 11 11:25:10 2019 -0700

    scsi: target: tcmu: avoid use-after-free after command timeout
    
    In tcmu_handle_completion() function, the variable called read_len is
    always initialized with a value taken from se_cmd structure. If this
    function is called to complete an expired (timed out) out command, the
    session command pointed by se_cmd is likely to be already deallocated by
    the target core at that moment. As the result, this access triggers a
    use-after-free warning from KASAN.
    
    This patch fixes the code not to touch se_cmd when completing timed out
    TCMU commands. It also resets the pointer to se_cmd at the time when the
    TCMU_CMD_BIT_EXPIRED flag is set because it is going to become invalid
    after calling target_complete_cmd() later in the same function,
    tcmu_check_expired_cmd().
    
    Signed-off-by: Dmitry Fomichev <dmitry.fomichev@wdc.com>
    Acked-by: Mike Christie <mchristi@redhat.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 699bf94114151aae4dceb2d9dbf1a6312839dcae
Author: Sean Young <sean@mess.org>
Date:   Tue Aug 13 13:45:09 2019 -0300

    media: tm6000: double free if usb disconnect while streaming
    
    The usb_bulk_urb will kfree'd on disconnect, so ensure the pointer is set
    to NULL after each free.
    
    stop stream
    urb killing
    urb buffer free
    tm6000: got start feed request tm6000_start_feed
    tm6000: got start stream request tm6000_start_stream
    tm6000: pipe reset
    tm6000: got start feed request tm6000_start_feed
    tm6000: got start feed request tm6000_start_feed
    tm6000: got start feed request tm6000_start_feed
    tm6000: got start feed request tm6000_start_feed
    tm6000: IR URB failure: status: -71, length 0
    xhci_hcd 0000:00:14.0: ERROR unknown event type 37
    xhci_hcd 0000:00:14.0: ERROR unknown event type 37
    tm6000:  error tm6000_urb_received
    usb 1-2: USB disconnect, device number 5
    tm6000: disconnecting tm6000 #0
    ==================================================================
    BUG: KASAN: use-after-free in dvb_fini+0x75/0x140 [tm6000_dvb]
    Read of size 8 at addr ffff888241044060 by task kworker/2:0/22
    
    CPU: 2 PID: 22 Comm: kworker/2:0 Tainted: G        W         5.3.0-rc4+ #1
    Hardware name: LENOVO 20KHCTO1WW/20KHCTO1WW, BIOS N23ET65W (1.40 ) 07/02/2019
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     dump_stack+0x9a/0xf0
     print_address_description.cold+0xae/0x34f
     __kasan_report.cold+0x75/0x93
     ? tm6000_fillbuf+0x390/0x3c0 [tm6000_alsa]
     ? dvb_fini+0x75/0x140 [tm6000_dvb]
     kasan_report+0xe/0x12
     dvb_fini+0x75/0x140 [tm6000_dvb]
     tm6000_close_extension+0x51/0x80 [tm6000]
     tm6000_usb_disconnect.cold+0xd4/0x105 [tm6000]
     usb_unbind_interface+0xe4/0x390
     device_release_driver_internal+0x121/0x250
     bus_remove_device+0x197/0x260
     device_del+0x268/0x550
     ? __device_links_no_driver+0xd0/0xd0
     ? usb_remove_ep_devs+0x30/0x3b
     usb_disable_device+0x122/0x400
     usb_disconnect+0x153/0x430
     hub_event+0x800/0x1e40
     ? trace_hardirqs_on_thunk+0x1a/0x20
     ? hub_port_debounce+0x1f0/0x1f0
     ? retint_kernel+0x10/0x10
     ? lock_is_held_type+0xf1/0x130
     ? hub_port_debounce+0x1f0/0x1f0
     ? process_one_work+0x4ae/0xa00
     process_one_work+0x4ba/0xa00
     ? pwq_dec_nr_in_flight+0x160/0x160
     ? do_raw_spin_lock+0x10a/0x1d0
     worker_thread+0x7a/0x5c0
     ? process_one_work+0xa00/0xa00
     kthread+0x1d5/0x200
     ? kthread_create_worker_on_cpu+0xd0/0xd0
     ret_from_fork+0x3a/0x50
    
    Allocated by task 2682:
     save_stack+0x1b/0x80
     __kasan_kmalloc.constprop.0+0xc2/0xd0
     usb_alloc_urb+0x28/0x60
     tm6000_start_feed+0x10a/0x300 [tm6000_dvb]
     dmx_ts_feed_start_filtering+0x86/0x120 [dvb_core]
     dvb_dmxdev_start_feed+0x121/0x180 [dvb_core]
     dvb_dmxdev_filter_start+0xcb/0x540 [dvb_core]
     dvb_demux_do_ioctl+0x7ed/0x890 [dvb_core]
     dvb_usercopy+0x97/0x1f0 [dvb_core]
     dvb_demux_ioctl+0x11/0x20 [dvb_core]
     do_vfs_ioctl+0x5d8/0x9d0
     ksys_ioctl+0x5e/0x90
     __x64_sys_ioctl+0x3d/0x50
     do_syscall_64+0x74/0xe0
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 22:
     save_stack+0x1b/0x80
     __kasan_slab_free+0x12c/0x170
     kfree+0xfd/0x3a0
     xhci_giveback_urb_in_irq+0xfe/0x230
     xhci_td_cleanup+0x276/0x340
     xhci_irq+0x1129/0x3720
     __handle_irq_event_percpu+0x6e/0x420
     handle_irq_event_percpu+0x6f/0x100
     handle_irq_event+0x55/0x84
     handle_edge_irq+0x108/0x3b0
     handle_irq+0x2e/0x40
     do_IRQ+0x83/0x1a0
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 54a83d6bcbf8f4700013766b974bf9190d40b689
Author: Miles Chen <miles.chen@mediatek.com>
Date:   Tue Aug 13 15:37:28 2019 -0700

    mm/memcontrol.c: fix use after free in mem_cgroup_iter()
    
    This patch is sent to report an use after free in mem_cgroup_iter()
    after merging commit be2657752e9e ("mm: memcg: fix use after free in
    mem_cgroup_iter()").
    
    I work with android kernel tree (4.9 & 4.14), and commit be2657752e9e
    ("mm: memcg: fix use after free in mem_cgroup_iter()") has been merged
    to the trees.  However, I can still observe use after free issues
    addressed in the commit be2657752e9e.  (on low-end devices, a few times
    this month)
    
    backtrace:
            css_tryget <- crash here
            mem_cgroup_iter
            shrink_node
            shrink_zones
            do_try_to_free_pages
            try_to_free_pages
            __perform_reclaim
            __alloc_pages_direct_reclaim
            __alloc_pages_slowpath
            __alloc_pages_nodemask
    
    To debug, I poisoned mem_cgroup before freeing it:
    
      static void __mem_cgroup_free(struct mem_cgroup *memcg)
            for_each_node(node)
            free_mem_cgroup_per_node_info(memcg, node);
            free_percpu(memcg->stat);
      +     /* poison memcg before freeing it */
      +     memset(memcg, 0x78, sizeof(struct mem_cgroup));
            kfree(memcg);
      }
    
    The coredump shows the position=0xdbbc2a00 is freed.
    
      (gdb) p/x ((struct mem_cgroup_per_node *)0xe5009e00)->iter[8]
      $13 = {position = 0xdbbc2a00, generation = 0x2efd}
    
      0xdbbc2a00:     0xdbbc2e00      0x00000000      0xdbbc2800      0x00000100
      0xdbbc2a10:     0x00000200      0x78787878      0x00026218      0x00000000
      0xdbbc2a20:     0xdcad6000      0x00000001      0x78787800      0x00000000
      0xdbbc2a30:     0x78780000      0x00000000      0x0068fb84      0x78787878
      0xdbbc2a40:     0x78787878      0x78787878      0x78787878      0xe3fa5cc0
      0xdbbc2a50:     0x78787878      0x78787878      0x00000000      0x00000000
      0xdbbc2a60:     0x00000000      0x00000000      0x00000000      0x00000000
      0xdbbc2a70:     0x00000000      0x00000000      0x00000000      0x00000000
      0xdbbc2a80:     0x00000000      0x00000000      0x00000000      0x00000000
      0xdbbc2a90:     0x00000001      0x00000000      0x00000000      0x00100000
      0xdbbc2aa0:     0x00000001      0xdbbc2ac8      0x00000000      0x00000000
      0xdbbc2ab0:     0x00000000      0x00000000      0x00000000      0x00000000
      0xdbbc2ac0:     0x00000000      0x00000000      0xe5b02618      0x00001000
      0xdbbc2ad0:     0x00000000      0x78787878      0x78787878      0x78787878
      0xdbbc2ae0:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2af0:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b00:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b10:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b20:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b30:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b40:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b50:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b60:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b70:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2b80:     0x78787878      0x78787878      0x00000000      0x78787878
      0xdbbc2b90:     0x78787878      0x78787878      0x78787878      0x78787878
      0xdbbc2ba0:     0x78787878      0x78787878      0x78787878      0x78787878
    
    In the reclaim path, try_to_free_pages() does not setup
    sc.target_mem_cgroup and sc is passed to do_try_to_free_pages(), ...,
    shrink_node().
    
    In mem_cgroup_iter(), root is set to root_mem_cgroup because
    sc->target_mem_cgroup is NULL.  It is possible to assign a memcg to
    root_mem_cgroup.nodeinfo.iter in mem_cgroup_iter().
    
            try_to_free_pages
                    struct scan_control sc = {...}, target_mem_cgroup is 0x0;
            do_try_to_free_pages
            shrink_zones
            shrink_node
                     mem_cgroup *root = sc->target_mem_cgroup;
                     memcg = mem_cgroup_iter(root, NULL, &reclaim);
            mem_cgroup_iter()
                    if (!root)
                            root = root_mem_cgroup;
                    ...
    
                    css = css_next_descendant_pre(css, &root->css);
                    memcg = mem_cgroup_from_css(css);
                    cmpxchg(&iter->position, pos, memcg);
    
    My device uses memcg non-hierarchical mode.  When we release a memcg:
    invalidate_reclaim_iterators() reaches only dead_memcg and its parents.
    If non-hierarchical mode is used, invalidate_reclaim_iterators() never
    reaches root_mem_cgroup.
    
      static void invalidate_reclaim_iterators(struct mem_cgroup *dead_memcg)
      {
            struct mem_cgroup *memcg = dead_memcg;
    
            for (; memcg; memcg = parent_mem_cgroup(memcg)
            ...
      }
    
    So the use after free scenario looks like:
    
      CPU1                                          CPU2
    
      try_to_free_pages
      do_try_to_free_pages
      shrink_zones
      shrink_node
      mem_cgroup_iter()
          if (!root)
            root = root_mem_cgroup;
          ...
          css = css_next_descendant_pre(css, &root->css);
          memcg = mem_cgroup_from_css(css);
          cmpxchg(&iter->position, pos, memcg);
    
                                            invalidate_reclaim_iterators(memcg);
                                            ...
                                            __mem_cgroup_free()
                                                    kfree(memcg);
    
      try_to_free_pages
      do_try_to_free_pages
      shrink_zones
      shrink_node
      mem_cgroup_iter()
          if (!root)
            root = root_mem_cgroup;
          ...
          mz = mem_cgroup_nodeinfo(root, reclaim->pgdat->node_id);
          iter = &mz->iter[reclaim->priority];
          pos = READ_ONCE(iter->position);
          css_tryget(&pos->css) <- use after free
    
    To avoid this, we should also invalidate root_mem_cgroup.nodeinfo.iter
    in invalidate_reclaim_iterators().
    
    [cai@lca.pw: fix -Wparentheses compilation warning]
      Link: http://lkml.kernel.org/r/1564580753-17531-1-git-send-email-cai@lca.pw
    Link: http://lkml.kernel.org/r/20190730015729.4406-1-miles.chen@mediatek.com
    Fixes: 5ac8fb31ad2e ("mm: memcontrol: convert reclaim iterator to simple css refcounting")
    Signed-off-by: Miles Chen <miles.chen@mediatek.com>
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1b15a5632a809ab57d403fd972ca68785363b654
Author: John Garry <john.garry@huawei.com>
Date:   Tue Jul 30 21:29:55 2019 +0800

    bus: hisi_lpc: Unregister logical PIO range to avoid potential use-after-free
    
    If, after registering a logical PIO range, the driver probe later fails,
    the logical PIO range memory will be released automatically.
    
    This causes an issue, in that the logical PIO range is not unregistered
    and the released range memory may be later referenced.
    
    Fix by unregistering the logical PIO range.
    
    And since we now unregister the logical PIO range for probe failure, avoid
    the special ordering of setting logical PIO range ops, which was the
    previous (poor) attempt at a safeguard against this.
    
    Cc: stable@vger.kernel.org
    Fixes: adf38bb0b595 ("HISI LPC: Support the LPC host on Hip06/Hip07 with DT bindings")
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Wei Xu <xuwei5@hisilicon.com>

commit 303911cfc5b95d33687d9046133ff184cf5043ff
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Aug 12 16:11:07 2019 -0400

    USB: core: Fix races in character device registration and deregistraion
    
    The syzbot fuzzer has found two (!) races in the USB character device
    registration and deregistration routines.  This patch fixes the races.
    
    The first race results from the fact that usb_deregister_dev() sets
    usb_minors[intf->minor] to NULL before calling device_destroy() on the
    class device.  This leaves a window during which another thread can
    allocate the same minor number but will encounter a duplicate name
    error when it tries to register its own class device.  A typical error
    message in the system log would look like:
    
        sysfs: cannot create duplicate filename '/class/usbmisc/ldusb0'
    
    The patch fixes this race by destroying the class device first.
    
    The second race is in usb_register_dev().  When that routine runs, it
    first allocates a minor number, then drops minor_rwsem, and then
    creates the class device.  If the device creation fails, the minor
    number is deallocated and the whole routine returns an error.  But
    during the time while minor_rwsem was dropped, there is a window in
    which the minor number is allocated and so another thread can
    successfully open the device file.  Typically this results in
    use-after-free errors or invalid accesses when the other thread closes
    its open file reference, because the kernel then tries to release
    resources that were already deallocated when usb_register_dev()
    failed.  The patch fixes this race by keeping minor_rwsem locked
    throughout the entire routine.
    
    Reported-and-tested-by: syzbot+30cf45ebfe0b0c4847a1@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/Pine.LNX.4.44L0.1908121607590.1659-100000@iolanthe.rowland.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9eec6a55c95fb918036bfe29c26a535dca1ad49
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Thu Aug 8 11:15:38 2019 +0300

    IB/mlx5: Fix use-after-free error while accessing ev_file pointer
    
    Call to uverbs_close_fd() releases file pointer to 'ev_file' and
    mlx5_ib_dev is going to be inaccessible. Cache pointer prior cleaning
    resources to solve the KASAN warning below.
    
    BUG: KASAN: use-after-free in devx_async_event_close+0x391/0x480 [mlx5_ib]
    Read of size 8 at addr ffff888301e3cec0 by task devx_direct_tes/4631
    CPU: 1 PID: 4631 Comm: devx_direct_tes Tainted: G OE 5.3.0-rc1-for-upstream-dbg-2019-07-26_01-19-56-93 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu2 04/01/2014
    Call Trace:
    dump_stack+0x9a/0xeb
    print_address_description+0x1e2/0x400
    ? devx_async_event_close+0x391/0x480 [mlx5_ib]
    __kasan_report+0x15c/0x1df
    ? devx_async_event_close+0x391/0x480 [mlx5_ib]
    kasan_report+0xe/0x20
    devx_async_event_close+0x391/0x480 [mlx5_ib]
    __fput+0x26a/0x7b0
    task_work_run+0x10d/0x180
    exit_to_usermode_loop+0x137/0x160
    do_syscall_64+0x3c7/0x490
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f5df907d664
    Code: 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b7 0f 1f
    80 00 00 00 00 8b 05 6a cd 20 00 48 63 ff 85 c0 75 13 b8
    03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 44 f3 c3 66 90
    48 83 ec 18 48 89 7c 24 08 e8
    RSP: 002b:00007ffd353cb958 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 000056017a88c348 RCX: 00007f5df907d664
    RDX: 00007f5df969d400 RSI: 00007f5de8f1ec90 RDI: 0000000000000006
    RBP: 00007f5df9681dc0 R08: 00007f5de8736410 R09: 000056017a9d2dd0
    R10: 000000000000000b R11: 0000000000000246 R12: 00007f5de899d7d0
    R13: 00007f5df96c4248 R14: 00007f5de8f1ecb0 R15: 000056017ae41308
    
    Allocated by task 4631:
    save_stack+0x19/0x80
    kasan_kmalloc.constprop.3+0xa0/0xd0
    alloc_uobj+0x71/0x230 [ib_uverbs]
    alloc_begin_fd_uobject+0x2e/0xc0 [ib_uverbs]
    rdma_alloc_begin_uobject+0x96/0x140 [ib_uverbs]
    ib_uverbs_run_method+0xdf0/0x1940 [ib_uverbs]
    ib_uverbs_cmd_verbs+0x57e/0xdb0 [ib_uverbs]
    ib_uverbs_ioctl+0x177/0x260 [ib_uverbs]
    do_vfs_ioctl+0x18f/0x1010
    ksys_ioctl+0x70/0x80
    __x64_sys_ioctl+0x6f/0xb0
    do_syscall_64+0x95/0x490
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4631:
    save_stack+0x19/0x80
    __kasan_slab_free+0x11d/0x160
    slab_free_freelist_hook+0x67/0x1a0
    kfree+0xb9/0x2a0
    uverbs_close_fd+0x118/0x1c0 [ib_uverbs]
    devx_async_event_close+0x28a/0x480 [mlx5_ib]
    __fput+0x26a/0x7b0
    task_work_run+0x10d/0x180
    exit_to_usermode_loop+0x137/0x160
    do_syscall_64+0x3c7/0x490
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888301e3cda8
    which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 280 bytes inside of 512-byte region
    [ffff888301e3cda8, ffff888301e3cfa8)
    The buggy address belongs to the page:
    page:ffffea000c078e00 refcount:1 mapcount:0
    mapping:ffff888352811300 index:0x0 compound_mapcount: 0
    flags: 0x2fffff80010200(slab|head)
    raw: 002fffff80010200 ffffea000d152608 ffffea000c077808 ffff888352811300
    raw: 0000000000000000 0000000000250025 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    Memory state around the buggy address:
    ffff888301e3cd80: fc fc fc fc fc fb fb fb fb fb fb fb fb fb fb fb
    ffff888301e3ce00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff888301e3ce80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff888301e3cf00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff888301e3cf80: fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc
    Disabling lock debugging due to kernel taint
    
    Cc: <stable@vger.kernel.org> # 5.2
    Fixes: 759738537142 ("IB/mlx5: Enable subscription for device events over DEVX")
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Link: https://lore.kernel.org/r/20190808081538.28772-1-leon@kernel.org
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit e26cc08265dda37d2acc8394604f220ef412299d
Author: zhengbin <zhengbin13@huawei.com>
Date:   Mon Aug 12 20:36:55 2019 +0800

    blk-mq: move cancel of requeue_work to the front of blk_exit_queue
    
    blk_exit_queue will free elevator_data, while blk_mq_requeue_work
    will access it. Move cancel of requeue_work to the front of
    blk_exit_queue to avoid use-after-free.
    
    blk_exit_queue                blk_mq_requeue_work
      __elevator_exit               blk_mq_run_hw_queues
        blk_mq_exit_sched             blk_mq_run_hw_queue
          dd_exit_queue                 blk_mq_hctx_has_pending
            kfree(elevator_data)          blk_mq_sched_has_work
                                            dd_has_work
    
    Fixes: fbc2a15e3433 ("blk-mq: move cancel of requeue_work into blk_mq_release")
    Cc: stable@vger.kernel.org
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: zhengbin <zhengbin13@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 533ca1feed98b0bf024779a14760694c7cb4d431
Author: Dexuan Cui <decui@microsoft.com>
Date:   Fri Aug 2 22:50:20 2019 +0000

    PCI: hv: Avoid use of hv_pci_dev->pci_slot after freeing it
    
    The slot must be removed before the pci_dev is removed, otherwise a panic
    can happen due to use-after-free.
    
    Fixes: 15becc2b56c6 ("PCI: hv: Add hv_pci_remove_slots() when we unload the driver")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Cc: stable@vger.kernel.org

commit 3a18844dcf89e636b2d0cbf577e3963b0bcb6d23
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Tue Aug 6 08:14:09 2019 +0800

    iommu/vt-d: Fix possible use-after-free of private domain
    
    Multiple devices might share a private domain. One real example
    is a pci bridge and all devices behind it. When remove a private
    domain, make sure that it has been detached from all devices to
    avoid use-after-free case.
    
    Cc: Ashok Raj <ashok.raj@intel.com>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Kevin Tian <kevin.tian@intel.com>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Fixes: 942067f1b6b97 ("iommu/vt-d: Identify default domains replaced with private")
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Tested-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

commit 6a0a8d10a3661a036b55af695542a714c429ab7c
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Aug 9 11:01:27 2019 +0200

    netfilter: nf_tables: use-after-free in failing rule with bound set
    
    If a rule that has already a bound anonymous set fails to be added, the
    preparation phase releases the rule and the bound set. However, the
    transaction object from the abort path still has a reference to the set
    object that is stale, leading to a use-after-free when checking for the
    set->bound field. Add a new field to the transaction that specifies if
    the set is bound, so the abort path can skip releasing it since the rule
    command owns it and it takes care of releasing it. After this update,
    the set->bound field is removed.
    
    [   24.649883] Unable to handle kernel paging request at virtual address 0000000000040434
    [   24.657858] Mem abort info:
    [   24.660686]   ESR = 0x96000004
    [   24.663769]   Exception class = DABT (current EL), IL = 32 bits
    [   24.669725]   SET = 0, FnV = 0
    [   24.672804]   EA = 0, S1PTW = 0
    [   24.675975] Data abort info:
    [   24.678880]   ISV = 0, ISS = 0x00000004
    [   24.682743]   CM = 0, WnR = 0
    [   24.685723] user pgtable: 4k pages, 48-bit VAs, pgdp=0000000428952000
    [   24.692207] [0000000000040434] pgd=0000000000000000
    [   24.697119] Internal error: Oops: 96000004 [#1] SMP
    [...]
    [   24.889414] Call trace:
    [   24.891870]  __nf_tables_abort+0x3f0/0x7a0
    [   24.895984]  nf_tables_abort+0x20/0x40
    [   24.899750]  nfnetlink_rcv_batch+0x17c/0x588
    [   24.904037]  nfnetlink_rcv+0x13c/0x190
    [   24.907803]  netlink_unicast+0x18c/0x208
    [   24.911742]  netlink_sendmsg+0x1b0/0x350
    [   24.915682]  sock_sendmsg+0x4c/0x68
    [   24.919185]  ___sys_sendmsg+0x288/0x2c8
    [   24.923037]  __sys_sendmsg+0x7c/0xd0
    [   24.926628]  __arm64_sys_sendmsg+0x2c/0x38
    [   24.930744]  el0_svc_common.constprop.0+0x94/0x158
    [   24.935556]  el0_svc_handler+0x34/0x90
    [   24.939322]  el0_svc+0x8/0xc
    [   24.942216] Code: 37280300 f9404023 91014262 aa1703e0 (f9401863)
    [   24.948336] ---[ end trace cebbb9dcbed3b56f ]---
    
    Fixes: f6ac85858976 ("netfilter: nf_tables: unbind set in rule from commit path")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit e15c2ffa1091c4f72370f01af4de8f9dddeb17a6
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Aug 6 13:34:31 2019 -0600

    block: fix O_DIRECT error handling for bio fragments
    
    0eb6ddfb865c tried to fix this up, but introduced a use-after-free
    of dio. Additionally, we still had an issue with error handling,
    as reported by Darrick:
    
    "I noticed a regression in xfs/747 (an unreleased xfstest for the
    xfs_scrub media scanning feature) on 5.3-rc3.  I'll condense that down
    to a simpler reproducer:
    
    error-test: 0 209 linear 8:48 0
    error-test: 209 1 error
    error-test: 210 6446894 linear 8:48 210
    
    Basically we have a ~3G /dev/sdd and we set up device mapper to fail IO
    for sector 209 and to pass the io to the scsi device everywhere else.
    
    On 5.3-rc3, performing a directio pread of this range with a < 1M buffer
    (in other words, a request for fewer than MAX_BIO_PAGES bytes) yields
    EIO like you'd expect:
    
    pread64(3, 0x7f880e1c7000, 1048576, 0)  = -1 EIO (Input/output error)
    pread: Input/output error
    +++ exited with 0 +++
    
    But doing it with a larger buffer succeeds(!):
    
    pread64(3, "XFSB\0\0\20\0\0\0\0\0\0\fL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 1146880, 0) = 1146880
    read 1146880/1146880 bytes at offset 0
    1 MiB, 1 ops; 0.0009 sec (1.124 GiB/sec and 1052.6316 ops/sec)
    +++ exited with 0 +++
    
    (Note that the part of the buffer corresponding to the dm-error area is
    uninitialized)
    
    On 5.3-rc2, both commands would fail with EIO like you'd expect.  The
    only change between rc2 and rc3 is commit 0eb6ddfb865c ("block: Fix
    __blkdev_direct_IO() for bio fragments").
    
    AFAICT we end up in __blkdev_direct_IO with a 1120K buffer, which gets
    split into two bios: one for the first BIO_MAX_PAGES worth of data (1MB)
    and a second one for the 96k after that."
    
    Fix this by noting that it's always safe to dereference dio if we get
    BLK_QC_T_EAGAIN returned, as end_io hasn't been run for that case. So
    we can safely increment the dio size before calling submit_bio(), and
    then decrement it on failure (not that it really matters, as the bio
    and dio are going away).
    
    For error handling, return to the original method of just using 'ret'
    for tracking the error, and the size tracking in dio->size.
    
    Fixes: 0eb6ddfb865c ("block: Fix __blkdev_direct_IO() for bio fragments")
    Fixes: 6a43074e2f46 ("block: properly handle IOCB_NOWAIT for async O_DIRECT IO")
    Reported-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 94f3e14e00fd43024b1c4d8e0c1e442db9b4d964
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Tue Aug 6 09:59:50 2019 +0800

    mlx5: Use refcount_t for refcount
    
    Reference counters are preferred to use refcount_t instead of
    atomic_t.
    This is because the implementation of refcount_t can prevent
    overflows and detect possible use-after-free.
    So convert atomic_t ref counters to refcount_t.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit 9c09b214f30e3c11f9b0b03f89442df03643794d
Author: Hillf Danton <hdanton@sina.com>
Date:   Tue Aug 6 16:38:58 2019 +0800

    HID: hiddev: avoid opening a disconnected device
    
    syzbot found the following crash on:
    
    HEAD commit:    e96407b4 usb-fuzzer: main usb gadget fuzzer driver
    git tree:       https://github.com/google/kasan.git usb-fuzzer
    console output: https://syzkaller.appspot.com/x/log.txt?x=147ac20c600000
    kernel config:  https://syzkaller.appspot.com/x/.config?x=792eb47789f57810
    dashboard link: https://syzkaller.appspot.com/bug?extid=62a1e04fd3ec2abf099e
    compiler:       gcc (GCC) 9.0.0 20181231 (experimental)
    
    ==================================================================
    BUG: KASAN: use-after-free in __lock_acquire+0x302a/0x3b50
    kernel/locking/lockdep.c:3753
    Read of size 8 at addr ffff8881cf591a08 by task syz-executor.1/26260
    
    CPU: 1 PID: 26260 Comm: syz-executor.1 Not tainted 5.3.0-rc2+ #24
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0xca/0x13e lib/dump_stack.c:113
      print_address_description+0x6a/0x32c mm/kasan/report.c:351
      __kasan_report.cold+0x1a/0x33 mm/kasan/report.c:482
      kasan_report+0xe/0x12 mm/kasan/common.c:612
      __lock_acquire+0x302a/0x3b50 kernel/locking/lockdep.c:3753
      lock_acquire+0x127/0x320 kernel/locking/lockdep.c:4412
      __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
      _raw_spin_lock_irqsave+0x32/0x50 kernel/locking/spinlock.c:159
      hiddev_release+0x82/0x520 drivers/hid/usbhid/hiddev.c:221
      __fput+0x2d7/0x840 fs/file_table.c:280
      task_work_run+0x13f/0x1c0 kernel/task_work.c:113
      exit_task_work include/linux/task_work.h:22 [inline]
      do_exit+0x8ef/0x2c50 kernel/exit.c:878
      do_group_exit+0x125/0x340 kernel/exit.c:982
      get_signal+0x466/0x23d0 kernel/signal.c:2728
      do_signal+0x88/0x14e0 arch/x86/kernel/signal.c:815
      exit_to_usermode_loop+0x1a2/0x200 arch/x86/entry/common.c:159
      prepare_exit_to_usermode arch/x86/entry/common.c:194 [inline]
      syscall_return_slowpath arch/x86/entry/common.c:274 [inline]
      do_syscall_64+0x45f/0x580 arch/x86/entry/common.c:299
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x459829
    Code: fd b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7
    48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
    ff 0f 83 cb b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f75b2a6ccf8 EFLAGS: 00000246 ORIG_RAX: 00000000000000ca
    RAX: fffffffffffffe00 RBX: 000000000075c078 RCX: 0000000000459829
    RDX: 0000000000000000 RSI: 0000000000000080 RDI: 000000000075c078
    RBP: 000000000075c070 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000075c07c
    R13: 00007ffcdfe1023f R14: 00007f75b2a6d9c0 R15: 000000000075c07c
    
    Allocated by task 104:
      save_stack+0x1b/0x80 mm/kasan/common.c:69
      set_track mm/kasan/common.c:77 [inline]
      __kasan_kmalloc mm/kasan/common.c:487 [inline]
      __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:460
      kmalloc include/linux/slab.h:552 [inline]
      kzalloc include/linux/slab.h:748 [inline]
      hiddev_connect+0x242/0x5b0 drivers/hid/usbhid/hiddev.c:900
      hid_connect+0x239/0xbb0 drivers/hid/hid-core.c:1882
      hid_hw_start drivers/hid/hid-core.c:1981 [inline]
      hid_hw_start+0xa2/0x130 drivers/hid/hid-core.c:1972
      appleir_probe+0x13e/0x1a0 drivers/hid/hid-appleir.c:308
      hid_device_probe+0x2be/0x3f0 drivers/hid/hid-core.c:2209
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      hid_add_device+0x33c/0x990 drivers/hid/hid-core.c:2365
      usbhid_probe+0xa81/0xfa0 drivers/hid/usbhid/hid-core.c:1386
      usb_probe_interface+0x305/0x7a0 drivers/usb/core/driver.c:361
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      usb_set_configuration+0xdf6/0x1670 drivers/usb/core/message.c:2023
      generic_probe+0x9d/0xd5 drivers/usb/core/generic.c:210
      usb_probe_device+0x99/0x100 drivers/usb/core/driver.c:266
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      usb_new_device.cold+0x6a4/0xe79 drivers/usb/core/hub.c:2536
      hub_port_connect drivers/usb/core/hub.c:5098 [inline]
      hub_port_connect_change drivers/usb/core/hub.c:5213 [inline]
      port_event drivers/usb/core/hub.c:5359 [inline]
      hub_event+0x1b5c/0x3640 drivers/usb/core/hub.c:5441
      process_one_work+0x92b/0x1530 kernel/workqueue.c:2269
      worker_thread+0x96/0xe20 kernel/workqueue.c:2415
      kthread+0x318/0x420 kernel/kthread.c:255
      ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Freed by task 104:
      save_stack+0x1b/0x80 mm/kasan/common.c:69
      set_track mm/kasan/common.c:77 [inline]
      __kasan_slab_free+0x130/0x180 mm/kasan/common.c:449
      slab_free_hook mm/slub.c:1423 [inline]
      slab_free_freelist_hook mm/slub.c:1470 [inline]
      slab_free mm/slub.c:3012 [inline]
      kfree+0xe4/0x2f0 mm/slub.c:3953
      hiddev_connect.cold+0x45/0x5c drivers/hid/usbhid/hiddev.c:914
      hid_connect+0x239/0xbb0 drivers/hid/hid-core.c:1882
      hid_hw_start drivers/hid/hid-core.c:1981 [inline]
      hid_hw_start+0xa2/0x130 drivers/hid/hid-core.c:1972
      appleir_probe+0x13e/0x1a0 drivers/hid/hid-appleir.c:308
      hid_device_probe+0x2be/0x3f0 drivers/hid/hid-core.c:2209
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      hid_add_device+0x33c/0x990 drivers/hid/hid-core.c:2365
      usbhid_probe+0xa81/0xfa0 drivers/hid/usbhid/hid-core.c:1386
      usb_probe_interface+0x305/0x7a0 drivers/usb/core/driver.c:361
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      usb_set_configuration+0xdf6/0x1670 drivers/usb/core/message.c:2023
      generic_probe+0x9d/0xd5 drivers/usb/core/generic.c:210
      usb_probe_device+0x99/0x100 drivers/usb/core/driver.c:266
      really_probe+0x281/0x650 drivers/base/dd.c:548
      driver_probe_device+0x101/0x1b0 drivers/base/dd.c:709
      __device_attach_driver+0x1c2/0x220 drivers/base/dd.c:816
      bus_for_each_drv+0x15c/0x1e0 drivers/base/bus.c:454
      __device_attach+0x217/0x360 drivers/base/dd.c:882
      bus_probe_device+0x1e4/0x290 drivers/base/bus.c:514
      device_add+0xae6/0x16f0 drivers/base/core.c:2114
      usb_new_device.cold+0x6a4/0xe79 drivers/usb/core/hub.c:2536
      hub_port_connect drivers/usb/core/hub.c:5098 [inline]
      hub_port_connect_change drivers/usb/core/hub.c:5213 [inline]
      port_event drivers/usb/core/hub.c:5359 [inline]
      hub_event+0x1b5c/0x3640 drivers/usb/core/hub.c:5441
      process_one_work+0x92b/0x1530 kernel/workqueue.c:2269
      worker_thread+0x96/0xe20 kernel/workqueue.c:2415
      kthread+0x318/0x420 kernel/kthread.c:255
      ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    The buggy address belongs to the object at ffff8881cf591900
      which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 264 bytes inside of
      512-byte region [ffff8881cf591900, ffff8881cf591b00)
    The buggy address belongs to the page:
    page:ffffea00073d6400 refcount:1 mapcount:0 mapping:ffff8881da002500
    index:0x0 compound_mapcount: 0
    flags: 0x200000000010200(slab|head)
    raw: 0200000000010200 0000000000000000 0000000100000001 ffff8881da002500
    raw: 0000000000000000 00000000000c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
      ffff8881cf591900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff8881cf591980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    > ffff8881cf591a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                           ^
      ffff8881cf591a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff8881cf591b00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    In order to avoid opening a disconnected device, we need to check exist
    again after acquiring the existance lock, and bail out if necessary.
    
    Reported-by: syzbot <syzbot+62a1e04fd3ec2abf099e@syzkaller.appspotmail.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit fc05481b2fcabaaeccf63e32ac1baab54e5b6963
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Mon Aug 5 12:15:28 2019 +0100

    usb: yurex: Fix use-after-free in yurex_delete
    
    syzbot reported the following crash [0]:
    
    BUG: KASAN: use-after-free in usb_free_coherent+0x79/0x80
    drivers/usb/core/usb.c:928
    Read of size 8 at addr ffff8881b18599c8 by task syz-executor.4/16007
    
    CPU: 0 PID: 16007 Comm: syz-executor.4 Not tainted 5.3.0-rc2+ #23
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0xca/0x13e lib/dump_stack.c:113
      print_address_description+0x6a/0x32c mm/kasan/report.c:351
      __kasan_report.cold+0x1a/0x33 mm/kasan/report.c:482
      kasan_report+0xe/0x12 mm/kasan/common.c:612
      usb_free_coherent+0x79/0x80 drivers/usb/core/usb.c:928
      yurex_delete+0x138/0x330 drivers/usb/misc/yurex.c:100
      kref_put include/linux/kref.h:65 [inline]
      yurex_release+0x66/0x90 drivers/usb/misc/yurex.c:392
      __fput+0x2d7/0x840 fs/file_table.c:280
      task_work_run+0x13f/0x1c0 kernel/task_work.c:113
      tracehook_notify_resume include/linux/tracehook.h:188 [inline]
      exit_to_usermode_loop+0x1d2/0x200 arch/x86/entry/common.c:163
      prepare_exit_to_usermode arch/x86/entry/common.c:194 [inline]
      syscall_return_slowpath arch/x86/entry/common.c:274 [inline]
      do_syscall_64+0x45f/0x580 arch/x86/entry/common.c:299
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x413511
    Code: 75 14 b8 03 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 04 1b 00 00 c3 48
    83 ec 08 e8 0a fc ff ff 48 89 04 24 b8 03 00 00 00 0f 05 <48> 8b 3c 24 48
    89 c2 e8 53 fc ff ff 48 89 d0 48 83 c4 08 48 3d 01
    RSP: 002b:00007ffc424ea2e0 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 0000000000000007 RCX: 0000000000413511
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000006
    RBP: 0000000000000001 R08: 0000000029a2fc22 R09: 0000000029a2fc26
    R10: 00007ffc424ea3c0 R11: 0000000000000293 R12: 000000000075c9a0
    R13: 000000000075c9a0 R14: 0000000000761938 R15: ffffffffffffffff
    
    Allocated by task 2776:
      save_stack+0x1b/0x80 mm/kasan/common.c:69
      set_track mm/kasan/common.c:77 [inline]
      __kasan_kmalloc mm/kasan/common.c:487 [inline]
      __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:460
      kmalloc include/linux/slab.h:552 [inline]
      kzalloc include/linux/slab.h:748 [inline]
      usb_alloc_dev+0x51/0xf95 drivers/usb/core/usb.c:583
      hub_port_connect drivers/usb/core/hub.c:5004 [inline]
      hub_port_connect_change drivers/usb/core/hub.c:5213 [inline]
      port_event drivers/usb/core/hub.c:5359 [inline]
      hub_event+0x15c0/0x3640 drivers/usb/core/hub.c:5441
      process_one_work+0x92b/0x1530 kernel/workqueue.c:2269
      worker_thread+0x96/0xe20 kernel/workqueue.c:2415
      kthread+0x318/0x420 kernel/kthread.c:255
      ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Freed by task 16007:
      save_stack+0x1b/0x80 mm/kasan/common.c:69
      set_track mm/kasan/common.c:77 [inline]
      __kasan_slab_free+0x130/0x180 mm/kasan/common.c:449
      slab_free_hook mm/slub.c:1423 [inline]
      slab_free_freelist_hook mm/slub.c:1470 [inline]
      slab_free mm/slub.c:3012 [inline]
      kfree+0xe4/0x2f0 mm/slub.c:3953
      device_release+0x71/0x200 drivers/base/core.c:1064
      kobject_cleanup lib/kobject.c:693 [inline]
      kobject_release lib/kobject.c:722 [inline]
      kref_put include/linux/kref.h:65 [inline]
      kobject_put+0x171/0x280 lib/kobject.c:739
      put_device+0x1b/0x30 drivers/base/core.c:2213
      usb_put_dev+0x1f/0x30 drivers/usb/core/usb.c:725
      yurex_delete+0x40/0x330 drivers/usb/misc/yurex.c:95
      kref_put include/linux/kref.h:65 [inline]
      yurex_release+0x66/0x90 drivers/usb/misc/yurex.c:392
      __fput+0x2d7/0x840 fs/file_table.c:280
      task_work_run+0x13f/0x1c0 kernel/task_work.c:113
      tracehook_notify_resume include/linux/tracehook.h:188 [inline]
      exit_to_usermode_loop+0x1d2/0x200 arch/x86/entry/common.c:163
      prepare_exit_to_usermode arch/x86/entry/common.c:194 [inline]
      syscall_return_slowpath arch/x86/entry/common.c:274 [inline]
      do_syscall_64+0x45f/0x580 arch/x86/entry/common.c:299
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881b1859980
      which belongs to the cache kmalloc-2k of size 2048
    The buggy address is located 72 bytes inside of
      2048-byte region [ffff8881b1859980, ffff8881b185a180)
    The buggy address belongs to the page:
    page:ffffea0006c61600 refcount:1 mapcount:0 mapping:ffff8881da00c000
    index:0x0 compound_mapcount: 0
    flags: 0x200000000010200(slab|head)
    raw: 0200000000010200 0000000000000000 0000000100000001 ffff8881da00c000
    raw: 0000000000000000 00000000000f000f 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
      ffff8881b1859880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8881b1859900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    > ffff8881b1859980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                   ^
      ffff8881b1859a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff8881b1859a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    A quick look at the yurex_delete() shows that we drop the reference
    to the usb_device before releasing any buffers associated with the
    device. Delay the reference drop until we have finished the cleanup.
    
    [0] https://lore.kernel.org/lkml/0000000000003f86d8058f0bd671@google.com/
    
    Fixes: 6bc235a2e24a5e ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Cc: Jiri Kosina <jkosina@suse.cz>
    Cc: Tomoki Sekiyama <tomoki.sekiyama@gmail.com>
    Cc: Oliver Neukum <oneukum@suse.com>
    Cc: andreyknvl@google.com
    Cc: gregkh@linuxfoundation.org
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: syzkaller-bugs@googlegroups.com
    Cc: dtor@chromium.org
    Reported-by: syzbot+d1fedb1c1fdb07fca507@syzkaller.appspotmail.com
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20190805111528.6758-1-suzuki.poulose@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebdf4de5642fb6580b0763158b6b4b791c4d6a4d
Author: Jan Kara <jack@suse.cz>
Date:   Fri Aug 2 21:48:47 2019 -0700

    mm: migrate: fix reference check race between __find_get_block() and migration
    
    buffer_migrate_page_norefs() can race with bh users in the following
    way:
    
    CPU1                                    CPU2
    buffer_migrate_page_norefs()
      buffer_migrate_lock_buffers()
      checks bh refs
      spin_unlock(&mapping->private_lock)
                                            __find_get_block()
                                              spin_lock(&mapping->private_lock)
                                              grab bh ref
                                              spin_unlock(&mapping->private_lock)
      move page                               do bh work
    
    This can result in various issues like lost updates to buffers (i.e.
    metadata corruption) or use after free issues for the old page.
    
    This patch closes the race by holding mapping->private_lock while the
    mapping is being moved to a new page.  Ordinarily, a reference can be
    taken outside of the private_lock using the per-cpu BH LRU but the
    references are checked and the LRU invalidated if necessary.  The
    private_lock is held once the references are known so the buffer lookup
    slow path will spin on the private_lock.  Between the page lock and
    private_lock, it should be impossible for other references to be
    acquired and updates to happen during the migration.
    
    A user had reported data corruption issues on a distribution kernel with
    a similar page migration implementation as mainline.  The data
    corruption could not be reproduced with this patch applied.  A small
    number of migration-intensive tests were run and no performance problems
    were noted.
    
    [mgorman@techsingularity.net: Changelog, removed tracing]
    Link: http://lkml.kernel.org/r/20190718090238.GF24383@techsingularity.net
    Fixes: 89cb0888ca14 "mm: migrate: provide buffer_migrate_page_norefs()"
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>    [5.0+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 685703b497bacea8765bb409d6b73455b73c540e
Author: Dexuan Cui <decui@microsoft.com>
Date:   Wed Jul 31 01:25:45 2019 +0000

    hv_sock: Fix hang when a connection is closed
    
    There is a race condition for an established connection that is being closed
    by the guest: the refcnt is 4 at the end of hvs_release() (Note: here the
    'remove_sock' is false):
    
    1 for the initial value;
    1 for the sk being in the bound list;
    1 for the sk being in the connected list;
    1 for the delayed close_work.
    
    After hvs_release() finishes, __vsock_release() -> sock_put(sk) *may*
    decrease the refcnt to 3.
    
    Concurrently, hvs_close_connection() runs in another thread:
      calls vsock_remove_sock() to decrease the refcnt by 2;
      call sock_put() to decrease the refcnt to 0, and free the sk;
      next, the "release_sock(sk)" may hang due to use-after-free.
    
    In the above, after hvs_release() finishes, if hvs_close_connection() runs
    faster than "__vsock_release() -> sock_put(sk)", then there is not any issue,
    because at the beginning of hvs_close_connection(), the refcnt is still 4.
    
    The issue can be resolved if an extra reference is taken when the
    connection is established.
    
    Fixes: a9eeb998c28d ("hv_sock: Add support for delayed close")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Sunil Muthuswamy <sunilmut@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd200d190f45b62c006d1ad0a63eeffd87db7a47
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Wed Jul 31 10:33:54 2019 -0400

    drm/amd/display: Don't replace the dc_state for fast updates
    
    [Why]
    DRM private objects have no hw_done/flip_done fencing mechanism on their
    own and cannot be used to sequence commits accordingly.
    
    When issuing commits that don't touch the same set of hardware resources
    like page-flips on different CRTCs we can run into the issue below
    because of this:
    
    1. Client requests non-blocking Commit #1, has a new dc_state #1,
    state is swapped, commit tail is deferred to work queue
    
    2. Client requests non-blocking Commit #2, has a new dc_state #2,
    state is swapped, commit tail is deferred to work queue
    
    3. Commit #2 work starts, commit tail finishes,
    atomic state is cleared, dc_state #1 is freed
    
    4. Commit #1 work starts,
    commit tail encounters null pointer deref on dc_state #1
    
    In order to change the DC state as in the private object we need to
    ensure that we wait for all outstanding commits to finish and that
    any other pending commits must wait for the current one to finish as
    well.
    
    We do this for MEDIUM and FULL updates. But not for FAST updates, nor
    would we want to since it would cause stuttering from the delays.
    
    FAST updates that go through dm_determine_update_type_for_commit always
    create a new dc_state and lock the DRM private object if there are
    any changed planes.
    
    We need the old state to validate, but we don't actually need the new
    state here.
    
    [How]
    If the commit isn't a full update then the use after free can be
    resolved by simply discarding the new state entirely and retaining
    the existing one instead.
    
    With this change the sequence above can be reexamined. Commit #2 will
    still free Commit #1's reference, but before this happens we actually
    added an additional reference as part of Commit #2.
    
    If an update comes in during this that needs to change the dc_state
    it will need to wait on Commit #1 and Commit #2 to finish. Then it'll
    swap the state, finish the work in commit tail and drop the last
    reference on Commit #2's dc_state.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=204181
    Fixes: 004b3938e637 ("drm/amd/display: Check scaling info when determing update type")
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: David Francis <david.francis@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ab2f7a5c18b5c17cc94aaab7ae2e7d1fa08993d6
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Tue Jul 9 19:12:44 2019 -0400

    drm/amdgpu: Implement VRAM wipe on release
    
    Wipe VRAM memory containing sensitive data when moving or releasing
    BOs. Clearing the memory is pipelined to minimize any impact on
    subsequent memory allocation latency. Use of a poison value should
    help debug future use-after-free bugs.
    
    When moving BOs, the existing ttm_bo_pipelined_move ensures that the
    memory won't be reused before being wiped.
    
    When releasing BOs, the BO is fenced with the memory fill operation,
    which results in queuing the BO for a delayed delete.
    
    v2: Move amdgpu_amdkfd_unreserve_memory_limit into
    amdgpu_bo_release_notify so that KFD can use memory that's still
    being cleared in the background
    
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 770b7d96cfff6a8bf6c9f261ba6f135dc9edf484
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Thu Aug 1 15:14:49 2019 +0300

    IB/mad: Fix use-after-free in ib mad completion handling
    
    We encountered a use-after-free bug when unloading the driver:
    
    [ 3562.116059] BUG: KASAN: use-after-free in ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]
    [ 3562.117233] Read of size 4 at addr ffff8882ca5aa868 by task kworker/u13:2/23862
    [ 3562.118385]
    [ 3562.119519] CPU: 2 PID: 23862 Comm: kworker/u13:2 Tainted: G           OE     5.1.0-for-upstream-dbg-2019-05-19_16-44-30-13 #1
    [ 3562.121806] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu2 04/01/2014
    [ 3562.123075] Workqueue: ib-comp-unb-wq ib_cq_poll_work [ib_core]
    [ 3562.124383] Call Trace:
    [ 3562.125640]  dump_stack+0x9a/0xeb
    [ 3562.126911]  print_address_description+0xe3/0x2e0
    [ 3562.128223]  ? ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]
    [ 3562.129545]  __kasan_report+0x15c/0x1df
    [ 3562.130866]  ? ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]
    [ 3562.132174]  kasan_report+0xe/0x20
    [ 3562.133514]  ib_mad_post_receive_mads+0xddc/0xed0 [ib_core]
    [ 3562.134835]  ? find_mad_agent+0xa00/0xa00 [ib_core]
    [ 3562.136158]  ? qlist_free_all+0x51/0xb0
    [ 3562.137498]  ? mlx4_ib_sqp_comp_worker+0x1970/0x1970 [mlx4_ib]
    [ 3562.138833]  ? quarantine_reduce+0x1fa/0x270
    [ 3562.140171]  ? kasan_unpoison_shadow+0x30/0x40
    [ 3562.141522]  ib_mad_recv_done+0xdf6/0x3000 [ib_core]
    [ 3562.142880]  ? _raw_spin_unlock_irqrestore+0x46/0x70
    [ 3562.144277]  ? ib_mad_send_done+0x1810/0x1810 [ib_core]
    [ 3562.145649]  ? mlx4_ib_destroy_cq+0x2a0/0x2a0 [mlx4_ib]
    [ 3562.147008]  ? _raw_spin_unlock_irqrestore+0x46/0x70
    [ 3562.148380]  ? debug_object_deactivate+0x2b9/0x4a0
    [ 3562.149814]  __ib_process_cq+0xe2/0x1d0 [ib_core]
    [ 3562.151195]  ib_cq_poll_work+0x45/0xf0 [ib_core]
    [ 3562.152577]  process_one_work+0x90c/0x1860
    [ 3562.153959]  ? pwq_dec_nr_in_flight+0x320/0x320
    [ 3562.155320]  worker_thread+0x87/0xbb0
    [ 3562.156687]  ? __kthread_parkme+0xb6/0x180
    [ 3562.158058]  ? process_one_work+0x1860/0x1860
    [ 3562.159429]  kthread+0x320/0x3e0
    [ 3562.161391]  ? kthread_park+0x120/0x120
    [ 3562.162744]  ret_from_fork+0x24/0x30
    ...
    [ 3562.187615] Freed by task 31682:
    [ 3562.188602]  save_stack+0x19/0x80
    [ 3562.189586]  __kasan_slab_free+0x11d/0x160
    [ 3562.190571]  kfree+0xf5/0x2f0
    [ 3562.191552]  ib_mad_port_close+0x200/0x380 [ib_core]
    [ 3562.192538]  ib_mad_remove_device+0xf0/0x230 [ib_core]
    [ 3562.193538]  remove_client_context+0xa6/0xe0 [ib_core]
    [ 3562.194514]  disable_device+0x14e/0x260 [ib_core]
    [ 3562.195488]  __ib_unregister_device+0x79/0x150 [ib_core]
    [ 3562.196462]  ib_unregister_device+0x21/0x30 [ib_core]
    [ 3562.197439]  mlx4_ib_remove+0x162/0x690 [mlx4_ib]
    [ 3562.198408]  mlx4_remove_device+0x204/0x2c0 [mlx4_core]
    [ 3562.199381]  mlx4_unregister_interface+0x49/0x1d0 [mlx4_core]
    [ 3562.200356]  mlx4_ib_cleanup+0xc/0x1d [mlx4_ib]
    [ 3562.201329]  __x64_sys_delete_module+0x2d2/0x400
    [ 3562.202288]  do_syscall_64+0x95/0x470
    [ 3562.203277]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The problem was that the MAD PD was deallocated before the MAD CQ.
    There was completion work pending for the CQ when the PD got deallocated.
    When the mad completion handling reached procedure
    ib_mad_post_receive_mads(), we got a use-after-free bug in the following
    line of code in that procedure:
       sg_list.lkey = qp_info->port_priv->pd->local_dma_lkey;
    (the pd pointer in the above line is no longer valid, because the
    pd has been deallocated).
    
    We fix this by allocating the PD before the CQ in procedure
    ib_mad_port_open(), and deallocating the PD after freeing the CQ
    in procedure ib_mad_port_close().
    
    Since the CQ completion work queue is flushed during ib_free_cq(),
    no completions will be pending for that CQ when the PD is later
    deallocated.
    
    Note that freeing the CQ before deallocating the PD is the practice
    in the ULPs.
    
    Fixes: 4be90bc60df4 ("IB/mad: Remove ib_get_dma_mr calls")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Link: https://lore.kernel.org/r/20190801121449.24973-1-leon@kernel.org
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit d94211b8bad3787e0655a67284105f57db728cb1
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Fri Jul 26 10:29:49 2019 -0700

    nvme-rdma: fix possible use-after-free in connect error flow
    
    When start_queue fails, we need to make sure to drain the
    queue cq before freeing the rdma resources because we might
    still race with the completion path. Have start_queue() error
    path safely stop the queue.
    
    --
    [30371.808111] nvme nvme1: Failed reconnect attempt 11
    [30371.808113] nvme nvme1: Reconnecting in 10 seconds...
    [...]
    [30382.069315] nvme nvme1: creating 4 I/O queues.
    [30382.257058] nvme nvme1: Connect Invalid SQE Parameter, qid 4
    [30382.257061] nvme nvme1: failed to connect queue: 4 ret=386
    [30382.305001] BUG: unable to handle kernel NULL pointer dereference at 0000000000000018
    [30382.305022] IP: qedr_poll_cq+0x8a3/0x1170 [qedr]
    [30382.305028] PGD 0 P4D 0
    [30382.305037] Oops: 0000 [#1] SMP PTI
    [...]
    [30382.305153] Call Trace:
    [30382.305166]  ? __switch_to_asm+0x34/0x70
    [30382.305187]  __ib_process_cq+0x56/0xd0 [ib_core]
    [30382.305201]  ib_poll_handler+0x26/0x70 [ib_core]
    [30382.305213]  irq_poll_softirq+0x88/0x110
    [30382.305223]  ? sort_range+0x20/0x20
    [30382.305232]  __do_softirq+0xde/0x2c6
    [30382.305241]  ? sort_range+0x20/0x20
    [30382.305249]  run_ksoftirqd+0x1c/0x60
    [30382.305258]  smpboot_thread_fn+0xef/0x160
    [30382.305265]  kthread+0x113/0x130
    [30382.305273]  ? kthread_create_worker_on_cpu+0x50/0x50
    [30382.305281]  ret_from_fork+0x35/0x40
    --
    
    Reported-by: Nicolas Morey-Chaisemartin <NMoreyChaisemartin@suse.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit 8c36e66fb407ce076535a7db98ab9f6d720b866a
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Wed Jul 31 17:35:34 2019 -0600

    nvme-core: Fix extra device_put() call on error path
    
    In the error path for nvme_init_subsystem(), nvme_put_subsystem()
    will call device_put(), but it will get called again after the
    mutex_unlock().
    
    The device_put() only needs to be called if device_add() fails.
    
    This bug caused a KASAN use-after-free error when adding and
    removing subsytems in a loop:
    
      BUG: KASAN: use-after-free in device_del+0x8d9/0x9a0
      Read of size 8 at addr ffff8883cdaf7120 by task multipathd/329
    
      CPU: 0 PID: 329 Comm: multipathd Not tainted 5.2.0-rc6-vmlocalyes-00019-g70a2b39005fd-dirty #314
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
      Call Trace:
       dump_stack+0x7b/0xb5
       print_address_description+0x6f/0x280
       ? device_del+0x8d9/0x9a0
       __kasan_report+0x148/0x199
       ? device_del+0x8d9/0x9a0
       ? class_release+0x100/0x130
       ? device_del+0x8d9/0x9a0
       kasan_report+0x12/0x20
       __asan_report_load8_noabort+0x14/0x20
       device_del+0x8d9/0x9a0
       ? device_platform_notify+0x70/0x70
       nvme_destroy_subsystem+0xf9/0x150
       nvme_free_ctrl+0x280/0x3a0
       device_release+0x72/0x1d0
       kobject_put+0x144/0x410
       put_device+0x13/0x20
       nvme_free_ns+0xc4/0x100
       nvme_release+0xb3/0xe0
       __blkdev_put+0x549/0x6e0
       ? kasan_check_write+0x14/0x20
       ? bd_set_size+0xb0/0xb0
       ? kasan_check_write+0x14/0x20
       ? mutex_lock+0x8f/0xe0
       ? __mutex_lock_slowpath+0x20/0x20
       ? locks_remove_file+0x239/0x370
       blkdev_put+0x72/0x2c0
       blkdev_close+0x8d/0xd0
       __fput+0x256/0x770
       ? _raw_read_lock_irq+0x40/0x40
       ____fput+0xe/0x10
       task_work_run+0x10c/0x180
       ? filp_close+0xf7/0x140
       exit_to_usermode_loop+0x151/0x170
       do_syscall_64+0x240/0x2e0
       ? prepare_exit_to_usermode+0xd5/0x190
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f5a79af05d7
      Code: 00 00 0f 05 48 3d 00 f0 ff ff 77 3f c3 66 0f 1f 44 00 00 53 89 fb 48 83 ec 10 e8 c4 fb ff ff 89 df 89 c2 b8 03 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 2b 89 d7 89 44 24 0c e8 06 fc ff ff 8b 44 24
      RSP: 002b:00007f5a7799c810 EFLAGS: 00000293 ORIG_RAX: 0000000000000003
      RAX: 0000000000000000 RBX: 0000000000000008 RCX: 00007f5a79af05d7
      RDX: 0000000000000000 RSI: 0000000000000001 RDI: 0000000000000008
      RBP: 00007f5a58000f98 R08: 0000000000000002 R09: 00007f5a7935ee80
      R10: 0000000000000000 R11: 0000000000000293 R12: 000055e432447240
      R13: 0000000000000000 R14: 0000000000000001 R15: 000055e4324a9cf0
    
      Allocated by task 1236:
       save_stack+0x21/0x80
       __kasan_kmalloc.constprop.6+0xab/0xe0
       kasan_kmalloc+0x9/0x10
       kmem_cache_alloc_trace+0x102/0x210
       nvme_init_identify+0x13c3/0x3820
       nvme_loop_configure_admin_queue+0x4fa/0x5e0
       nvme_loop_create_ctrl+0x469/0xf40
       nvmf_dev_write+0x19a3/0x21ab
       __vfs_write+0x66/0x120
       vfs_write+0x154/0x490
       ksys_write+0x104/0x240
       __x64_sys_write+0x73/0xb0
       do_syscall_64+0xa5/0x2e0
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 329:
       save_stack+0x21/0x80
       __kasan_slab_free+0x129/0x190
       kasan_slab_free+0xe/0x10
       kfree+0xa7/0x200
       nvme_release_subsystem+0x49/0x60
       device_release+0x72/0x1d0
       kobject_put+0x144/0x410
       put_device+0x13/0x20
       klist_class_dev_put+0x31/0x40
       klist_put+0x8f/0xf0
       klist_del+0xe/0x10
       device_del+0x3a7/0x9a0
       nvme_destroy_subsystem+0xf9/0x150
       nvme_free_ctrl+0x280/0x3a0
       device_release+0x72/0x1d0
       kobject_put+0x144/0x410
       put_device+0x13/0x20
       nvme_free_ns+0xc4/0x100
       nvme_release+0xb3/0xe0
       __blkdev_put+0x549/0x6e0
       blkdev_put+0x72/0x2c0
       blkdev_close+0x8d/0xd0
       __fput+0x256/0x770
       ____fput+0xe/0x10
       task_work_run+0x10c/0x180
       exit_to_usermode_loop+0x151/0x170
       do_syscall_64+0x240/0x2e0
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 32fd90c40768 ("nvme: change locking for the per-subsystem controller list")
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by : Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit 3aed86731ee2b23e4dc4d2c6d943d33992cd551b
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Wed Jul 31 17:35:31 2019 -0600

    nvmet: Fix use-after-free bug when a port is removed
    
    When a port is removed through configfs, any connected controllers
    are still active and can still send commands. This causes a
    use-after-free bug which is detected by KASAN for any admin command
    that dereferences req->port (like in nvmet_execute_identify_ctrl).
    
    To fix this, disconnect all active controllers when a subsystem is
    removed from a port. This ensures there are no active controllers
    when the port is eventually removed.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Reviewed-by : Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit d0ee879187df966ef638031b5f5183078d672141
Author: Jackie Liu <liuyun01@kylinos.cn>
Date:   Wed Jul 31 14:39:33 2019 +0800

    io_uring: fix KASAN use after free in io_sq_wq_submit_work
    
    [root@localhost ~]# ./liburing/test/link
    
    QEMU Standard PC report that:
    
    [   29.379892] CPU: 0 PID: 84 Comm: kworker/u2:2 Not tainted 5.3.0-rc2-00051-g4010b622f1d2-dirty #86
    [   29.379902] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    [   29.379913] Workqueue: io_ring-wq io_sq_wq_submit_work
    [   29.379929] Call Trace:
    [   29.379953]  dump_stack+0xa9/0x10e
    [   29.379970]  ? io_sq_wq_submit_work+0xbf4/0xe90
    [   29.379986]  print_address_description.cold.6+0x9/0x317
    [   29.379999]  ? io_sq_wq_submit_work+0xbf4/0xe90
    [   29.380010]  ? io_sq_wq_submit_work+0xbf4/0xe90
    [   29.380026]  __kasan_report.cold.7+0x1a/0x34
    [   29.380044]  ? io_sq_wq_submit_work+0xbf4/0xe90
    [   29.380061]  kasan_report+0xe/0x12
    [   29.380076]  io_sq_wq_submit_work+0xbf4/0xe90
    [   29.380104]  ? io_sq_thread+0xaf0/0xaf0
    [   29.380152]  process_one_work+0xb59/0x19e0
    [   29.380184]  ? pwq_dec_nr_in_flight+0x2c0/0x2c0
    [   29.380221]  worker_thread+0x8c/0xf40
    [   29.380248]  ? __kthread_parkme+0xab/0x110
    [   29.380265]  ? process_one_work+0x19e0/0x19e0
    [   29.380278]  kthread+0x30b/0x3d0
    [   29.380292]  ? kthread_create_on_node+0xe0/0xe0
    [   29.380311]  ret_from_fork+0x3a/0x50
    
    [   29.380635] Allocated by task 209:
    [   29.381255]  save_stack+0x19/0x80
    [   29.381268]  __kasan_kmalloc.constprop.6+0xc1/0xd0
    [   29.381279]  kmem_cache_alloc+0xc0/0x240
    [   29.381289]  io_submit_sqe+0x11bc/0x1c70
    [   29.381300]  io_ring_submit+0x174/0x3c0
    [   29.381311]  __x64_sys_io_uring_enter+0x601/0x780
    [   29.381322]  do_syscall_64+0x9f/0x4d0
    [   29.381336]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [   29.381633] Freed by task 84:
    [   29.382186]  save_stack+0x19/0x80
    [   29.382198]  __kasan_slab_free+0x11d/0x160
    [   29.382210]  kmem_cache_free+0x8c/0x2f0
    [   29.382220]  io_put_req+0x22/0x30
    [   29.382230]  io_sq_wq_submit_work+0x28b/0xe90
    [   29.382241]  process_one_work+0xb59/0x19e0
    [   29.382251]  worker_thread+0x8c/0xf40
    [   29.382262]  kthread+0x30b/0x3d0
    [   29.382272]  ret_from_fork+0x3a/0x50
    
    [   29.382569] The buggy address belongs to the object at ffff888067172140
                    which belongs to the cache io_kiocb of size 224
    [   29.384692] The buggy address is located 120 bytes inside of
                    224-byte region [ffff888067172140, ffff888067172220)
    [   29.386723] The buggy address belongs to the page:
    [   29.387575] page:ffffea00019c5c80 refcount:1 mapcount:0 mapping:ffff88806ace5180 index:0x0
    [   29.387587] flags: 0x100000000000200(slab)
    [   29.387603] raw: 0100000000000200 dead000000000100 dead000000000122 ffff88806ace5180
    [   29.387617] raw: 0000000000000000 00000000800c000c 00000001ffffffff 0000000000000000
    [   29.387624] page dumped because: kasan: bad access detected
    
    [   29.387920] Memory state around the buggy address:
    [   29.388771]  ffff888067172080: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
    [   29.390062]  ffff888067172100: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    [   29.391325] >ffff888067172180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   29.392578]                                         ^
    [   29.393480]  ffff888067172200: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    [   29.394744]  ffff888067172280: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   29.396003] ==================================================================
    [   29.397260] Disabling lock debugging due to kernel taint
    
    io_sq_wq_submit_work free and read req again.
    
    Cc: Zhengyuan Liu <liuzhengyuan@kylinos.cn>
    Cc: linux-block@vger.kernel.org
    Cc: stable@vger.kernel.org
    Fixes: f7b76ac9d17e ("io_uring: fix counter inc/dec mismatch in async_list")
    Signed-off-by: Jackie Liu <liuyun01@kylinos.cn>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit ac43432cb1f5c2950408534987e57c2071e24d8f
Author: Muchun Song <smuchun@gmail.com>
Date:   Sat Jul 27 11:21:22 2019 +0800

    driver core: Fix use-after-free and double free on glue directory
    
    There is a race condition between removing glue directory and adding a new
    device under the glue dir. It can be reproduced in following test:
    
    CPU1:                                         CPU2:
    
    device_add()
      get_device_parent()
        class_dir_create_and_add()
          kobject_add_internal()
            create_dir()    // create glue_dir
    
                                                  device_add()
                                                    get_device_parent()
                                                      kobject_get() // get glue_dir
    
    device_del()
      cleanup_glue_dir()
        kobject_del(glue_dir)
    
                                                    kobject_add()
                                                      kobject_add_internal()
                                                        create_dir() // in glue_dir
                                                          sysfs_create_dir_ns()
                                                            kernfs_create_dir_ns(sd)
    
          sysfs_remove_dir() // glue_dir->sd=NULL
          sysfs_put()        // free glue_dir->sd
    
                                                              // sd is freed
                                                              kernfs_new_node(sd)
                                                                kernfs_get(glue_dir)
                                                                kernfs_add_one()
                                                                kernfs_put()
    
    Before CPU1 remove last child device under glue dir, if CPU2 add a new
    device under glue dir, the glue_dir kobject reference count will be
    increase to 2 via kobject_get() in get_device_parent(). And CPU2 has
    been called kernfs_create_dir_ns(), but not call kernfs_new_node().
    Meanwhile, CPU1 call sysfs_remove_dir() and sysfs_put(). This result in
    glue_dir->sd is freed and it's reference count will be 0. Then CPU2 call
    kernfs_get(glue_dir) will trigger a warning in kernfs_get() and increase
    it's reference count to 1. Because glue_dir->sd is freed by CPU1, the next
    call kernfs_add_one() by CPU2 will fail(This is also use-after-free)
    and call kernfs_put() to decrease reference count. Because the reference
    count is decremented to 0, it will also call kmem_cache_free() to free
    the glue_dir->sd again. This will result in double free.
    
    In order to avoid this happening, we also should make sure that kernfs_node
    for glue_dir is released in CPU1 only when refcount for glue_dir kobj is
    1 to fix this race.
    
    The following calltrace is captured in kernel 4.14 with the following patch
    applied:
    
    commit 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    
    --------------------------------------------------------------------------
    [    3.633703] WARNING: CPU: 4 PID: 513 at .../fs/kernfs/dir.c:494
                    Here is WARN_ON(!atomic_read(&kn->count) in kernfs_get().
    ....
    [    3.633986] Call trace:
    [    3.633991]  kernfs_create_dir_ns+0xa8/0xb0
    [    3.633994]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634001]  kobject_add_internal+0x22c/0x3f0
    [    3.634005]  kobject_add+0xe4/0x118
    [    3.634011]  device_add+0x200/0x870
    [    3.634017]  _request_firmware+0x958/0xc38
    [    3.634020]  request_firmware_into_buf+0x4c/0x70
    ....
    [    3.634064] kernel BUG at .../mm/slub.c:294!
                    Here is BUG_ON(object == fp) in set_freepointer().
    ....
    [    3.634346] Call trace:
    [    3.634351]  kmem_cache_free+0x504/0x6b8
    [    3.634355]  kernfs_put+0x14c/0x1d8
    [    3.634359]  kernfs_create_dir_ns+0x88/0xb0
    [    3.634362]  sysfs_create_dir_ns+0x54/0xe8
    [    3.634366]  kobject_add_internal+0x22c/0x3f0
    [    3.634370]  kobject_add+0xe4/0x118
    [    3.634374]  device_add+0x200/0x870
    [    3.634378]  _request_firmware+0x958/0xc38
    [    3.634381]  request_firmware_into_buf+0x4c/0x70
    --------------------------------------------------------------------------
    
    Fixes: 726e41097920 ("drivers: core: Remove glue dirs from sysfs earlier")
    Signed-off-by: Muchun Song <smuchun@gmail.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Prateek Sood <prsood@codeaurora.org>
    Link: https://lore.kernel.org/r/20190727032122.24639-1-smuchun@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71b256f8f7a5c09810d2c3ed6165629c2cc0a652
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Mon Jul 22 13:02:25 2019 +0300

    iwlwifi: mvm: fix a use-after-free bug in iwl_mvm_tx_tso_segment
    
    Accessing the hdr of an skb that was consumed already isn't
    a good idea.
    First ask if the skb is a QoS packet, then keep that data
    on stack, and then consume the skb.
    This was spotted by KASAN.
    
    Cc: stable@vger.kernel.org
    Fixes: 08f7d8b69aaf ("iwlwifi: mvm: bring back mvm GSO code")
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 01f5bffad555f8e22a61f4b1261fe09cf1b96994
Author: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
Date:   Fri Jul 26 00:40:17 2019 +0800

    ip6_tunnel: fix possible use-after-free on xmit
    
    ip4ip6/ip6ip6 tunnels run iptunnel_handle_offloads on xmit which
    can cause a possible use-after-free accessing iph/ipv6h pointer
    since the packet will be 'uncloned' running pskb_expand_head if
    it is a cloned gso skb.
    
    Fixes: 0e9a709560db ("ip6_tunnel, ip6_gre: fix setting of DSCP on encapsulated packets")
    Signed-off-by: Haishuang Yan <yanhaishuang@cmss.chinamobile.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b5fa9fc9e809f84bb20439730162eccfed906a76
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Mon Jul 8 14:19:04 2019 +0800

    irqchip/renesas-rza1: Fix an use-after-free in rza1_irqc_probe()
    
    The gic_node is still being used in the rza1_irqc_parse_map() call
    after the of_node_put() call, which may result in use-after-free.
    
    Fixes: a644ccb819bc ("irqchip: Add Renesas RZ/A1 Interrupt Controller driver")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Marc Zyngier <maz@kernel.org>

commit 78134300579a45f527ca173ec8fdb4701b69f16e
Author: Waiman Long <longman@redhat.com>
Date:   Sat Jul 20 11:04:10 2019 -0400

    locking/rwsem: Don't call owner_on_cpu() on read-owner
    
    For writer, the owner value is cleared on unlock. For reader, it is
    left intact on unlock for providing better debugging aid on crash dump
    and the unlock of one reader may not mean the lock is free.
    
    As a result, the owner_on_cpu() shouldn't be used on read-owner
    as the task pointer value may not be valid and it might have
    been freed. That is the case in rwsem_spin_on_owner(), but not in
    rwsem_can_spin_on_owner(). This can lead to use-after-free error from
    KASAN. For example,
    
      BUG: KASAN: use-after-free in rwsem_down_write_slowpath
      (/home/miguel/kernel/linux/kernel/locking/rwsem.c:669
      /home/miguel/kernel/linux/kernel/locking/rwsem.c:1125)
    
    Fix this by checking for RWSEM_READER_OWNED flag before calling
    owner_on_cpu().
    
    Reported-by: Luis Henriques <lhenriques@suse.com>
    Tested-by: Luis Henriques <lhenriques@suse.com>
    Signed-off-by: Waiman Long <longman@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: huang ying <huang.ying.caritas@gmail.com>
    Fixes: 94a9717b3c40e ("locking/rwsem: Make rwsem->owner an atomic_long_t")
    Link: https://lkml.kernel.org/r/81e82d5b-5074-77e8-7204-28479bbe0df0@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit cb361d8cdef69990f6b4504dc1fd9a594d983c97
Author: Jann Horn <jannh@google.com>
Date:   Tue Jul 16 17:20:47 2019 +0200

    sched/fair: Use RCU accessors consistently for ->numa_group
    
    The old code used RCU annotations and accessors inconsistently for
    ->numa_group, which can lead to use-after-frees and NULL dereferences.
    
    Let all accesses to ->numa_group use proper RCU helpers to prevent such
    issues.
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will@kernel.org>
    Fixes: 8c8a743c5087 ("sched/numa: Use {cpu, pid} to create task groups for shared faults")
    Link: https://lkml.kernel.org/r/20190716152047.14424-3-jannh@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 16d51a590a8ce3befb1308e0e7ab77f3b661af33
Author: Jann Horn <jannh@google.com>
Date:   Tue Jul 16 17:20:45 2019 +0200

    sched/fair: Don't free p->numa_faults with concurrent readers
    
    When going through execve(), zero out the NUMA fault statistics instead of
    freeing them.
    
    During execve, the task is reachable through procfs and the scheduler. A
    concurrent /proc/*/sched reader can read data from a freed ->numa_faults
    allocation (confirmed by KASAN) and write it back to userspace.
    I believe that it would also be possible for a use-after-free read to occur
    through a race between a NUMA fault and execve(): task_numa_fault() can
    lead to task_numa_compare(), which invokes task_weight() on the currently
    running task of a different CPU.
    
    Another way to fix this would be to make ->numa_faults RCU-managed or add
    extra locking, but it seems easier to wipe the NUMA fault statistics on
    execve.
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will@kernel.org>
    Fixes: 82727018b0d3 ("sched/numa: Call task_numa_free() from do_execve()")
    Link: https://lkml.kernel.org/r/20190716152047.14424-1-jannh@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e9f2a856e102fa27715b94bcc2240f686536d29b
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Sat Jul 6 11:37:20 2019 +0800

    can: flexcan: fix an use-after-free in flexcan_setup_stop_mode()
    
    The gpr_np variable is still being used in dev_dbg() after the
    of_node_put() call, which may result in use-after-free.
    
    Fixes: de3578c198c6 ("can: flexcan: add self wakeup support")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: linux-stable <stable@vger.kernel.org> # >= v5.0
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit e0a12445d1cb186d875410d093a00d215bec6a89
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Jul 17 11:55:04 2019 +0800

    cpufreq/pasemi: fix use-after-free in pas_cpufreq_cpu_init()
    
    The cpu variable is still being used in the of_get_property() call
    after the of_node_put() call, which may result in use-after-free.
    
    Fixes: a9acc26b75f6 ("cpufreq/pasemi: fix possible object reference leak")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit f7af86ccf1882084293b11077deec049fd01da63
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sun Jul 7 23:04:57 2019 +0200

    batman-adv: Fix deletion of RTR(4|6) mcast list entries
    
    The multicast code uses the lists bat_priv->mcast.want_all_rtr*_list to
    store all all originator nodes which don't have the flag no-RTR4 or no-RTR6
    set. When an originator is purged, it has to be removed from these lists.
    
    Since all entries without the BATADV_MCAST_WANT_NO_RTR4/6 are stored in
    these lists, they have to be handled like entries which have these flags
    set to force the update routines to remove them from the lists when purging
    the originator.
    
    Not doing so will leave a pointer to a freed memory region inside the list.
    Trying to operate on these lists will then cause an use-after-free error:
    
      BUG: KASAN: use-after-free in batadv_mcast_want_rtr4_update+0x335/0x3a0 [batman_adv]
      Write of size 8 at addr ffff888007b41a38 by task swapper/0/0
    
    Fixes: 61caf3d109f5 ("batman-adv: mcast: detect, distribute and maintain multicast router presence")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Acked-by: Linus Lüssing <linus.luessing@c0d3.blue>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>

commit 9eed17d37c77171cf5ffb95c4257f87df3cd4c8f
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jul 20 19:08:48 2019 +0100

    iommu/iova: Remove stale cached32_node
    
    Since the cached32_node is allowed to be advanced above dma_32bit_pfn
    (to provide a shortcut into the limited range), we need to be careful to
    remove the to be freed node if it is the cached32_node.
    
    [   48.477773] BUG: KASAN: use-after-free in __cached_rbnode_delete_update+0x68/0x110
    [   48.477812] Read of size 8 at addr ffff88870fc19020 by task kworker/u8:1/37
    [   48.477843]
    [   48.477879] CPU: 1 PID: 37 Comm: kworker/u8:1 Tainted: G     U            5.2.0+ #735
    [   48.477915] Hardware name: Intel Corporation NUC7i5BNK/NUC7i5BNB, BIOS BNKBL357.86A.0052.2017.0918.1346 09/18/2017
    [   48.478047] Workqueue: i915 __i915_gem_free_work [i915]
    [   48.478075] Call Trace:
    [   48.478111]  dump_stack+0x5b/0x90
    [   48.478137]  print_address_description+0x67/0x237
    [   48.478178]  ? __cached_rbnode_delete_update+0x68/0x110
    [   48.478212]  __kasan_report.cold.3+0x1c/0x38
    [   48.478240]  ? __cached_rbnode_delete_update+0x68/0x110
    [   48.478280]  ? __cached_rbnode_delete_update+0x68/0x110
    [   48.478308]  __cached_rbnode_delete_update+0x68/0x110
    [   48.478344]  private_free_iova+0x2b/0x60
    [   48.478378]  iova_magazine_free_pfns+0x46/0xa0
    [   48.478403]  free_iova_fast+0x277/0x340
    [   48.478443]  fq_ring_free+0x15a/0x1a0
    [   48.478473]  queue_iova+0x19c/0x1f0
    [   48.478597]  cleanup_page_dma.isra.64+0x62/0xb0 [i915]
    [   48.478712]  __gen8_ppgtt_cleanup+0x63/0x80 [i915]
    [   48.478826]  __gen8_ppgtt_cleanup+0x42/0x80 [i915]
    [   48.478940]  __gen8_ppgtt_clear+0x433/0x4b0 [i915]
    [   48.479053]  __gen8_ppgtt_clear+0x462/0x4b0 [i915]
    [   48.479081]  ? __sg_free_table+0x9e/0xf0
    [   48.479116]  ? kfree+0x7f/0x150
    [   48.479234]  i915_vma_unbind+0x1e2/0x240 [i915]
    [   48.479352]  i915_vma_destroy+0x3a/0x280 [i915]
    [   48.479465]  __i915_gem_free_objects+0xf0/0x2d0 [i915]
    [   48.479579]  __i915_gem_free_work+0x41/0xa0 [i915]
    [   48.479607]  process_one_work+0x495/0x710
    [   48.479642]  worker_thread+0x4c7/0x6f0
    [   48.479687]  ? process_one_work+0x710/0x710
    [   48.479724]  kthread+0x1b2/0x1d0
    [   48.479774]  ? kthread_create_worker_on_cpu+0xa0/0xa0
    [   48.479820]  ret_from_fork+0x1f/0x30
    [   48.479864]
    [   48.479907] Allocated by task 631:
    [   48.479944]  save_stack+0x19/0x80
    [   48.479994]  __kasan_kmalloc.constprop.6+0xc1/0xd0
    [   48.480038]  kmem_cache_alloc+0x91/0xf0
    [   48.480082]  alloc_iova+0x2b/0x1e0
    [   48.480125]  alloc_iova_fast+0x58/0x376
    [   48.480166]  intel_alloc_iova+0x90/0xc0
    [   48.480214]  intel_map_sg+0xde/0x1f0
    [   48.480343]  i915_gem_gtt_prepare_pages+0xb8/0x170 [i915]
    [   48.480465]  huge_get_pages+0x232/0x2b0 [i915]
    [   48.480590]  ____i915_gem_object_get_pages+0x40/0xb0 [i915]
    [   48.480712]  __i915_gem_object_get_pages+0x90/0xa0 [i915]
    [   48.480834]  i915_gem_object_prepare_write+0x2d6/0x330 [i915]
    [   48.480955]  create_test_object.isra.54+0x1a9/0x3e0 [i915]
    [   48.481075]  igt_shared_ctx_exec+0x365/0x3c0 [i915]
    [   48.481210]  __i915_subtests.cold.4+0x30/0x92 [i915]
    [   48.481341]  __run_selftests.cold.3+0xa9/0x119 [i915]
    [   48.481466]  i915_live_selftests+0x3c/0x70 [i915]
    [   48.481583]  i915_pci_probe+0xe7/0x220 [i915]
    [   48.481620]  pci_device_probe+0xe0/0x180
    [   48.481665]  really_probe+0x163/0x4e0
    [   48.481710]  device_driver_attach+0x85/0x90
    [   48.481750]  __driver_attach+0xa5/0x180
    [   48.481796]  bus_for_each_dev+0xda/0x130
    [   48.481831]  bus_add_driver+0x205/0x2e0
    [   48.481882]  driver_register+0xca/0x140
    [   48.481927]  do_one_initcall+0x6c/0x1af
    [   48.481970]  do_init_module+0x106/0x350
    [   48.482010]  load_module+0x3d2c/0x3ea0
    [   48.482058]  __do_sys_finit_module+0x110/0x180
    [   48.482102]  do_syscall_64+0x62/0x1f0
    [   48.482147]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   48.482190]
    [   48.482224] Freed by task 37:
    [   48.482273]  save_stack+0x19/0x80
    [   48.482318]  __kasan_slab_free+0x12e/0x180
    [   48.482363]  kmem_cache_free+0x70/0x140
    [   48.482406]  __free_iova+0x1d/0x30
    [   48.482445]  fq_ring_free+0x15a/0x1a0
    [   48.482490]  queue_iova+0x19c/0x1f0
    [   48.482624]  cleanup_page_dma.isra.64+0x62/0xb0 [i915]
    [   48.482749]  __gen8_ppgtt_cleanup+0x63/0x80 [i915]
    [   48.482873]  __gen8_ppgtt_cleanup+0x42/0x80 [i915]
    [   48.482999]  __gen8_ppgtt_clear+0x433/0x4b0 [i915]
    [   48.483123]  __gen8_ppgtt_clear+0x462/0x4b0 [i915]
    [   48.483250]  i915_vma_unbind+0x1e2/0x240 [i915]
    [   48.483378]  i915_vma_destroy+0x3a/0x280 [i915]
    [   48.483500]  __i915_gem_free_objects+0xf0/0x2d0 [i915]
    [   48.483622]  __i915_gem_free_work+0x41/0xa0 [i915]
    [   48.483659]  process_one_work+0x495/0x710
    [   48.483704]  worker_thread+0x4c7/0x6f0
    [   48.483748]  kthread+0x1b2/0x1d0
    [   48.483787]  ret_from_fork+0x1f/0x30
    [   48.483831]
    [   48.483868] The buggy address belongs to the object at ffff88870fc19000
    [   48.483868]  which belongs to the cache iommu_iova of size 40
    [   48.483920] The buggy address is located 32 bytes inside of
    [   48.483920]  40-byte region [ffff88870fc19000, ffff88870fc19028)
    [   48.483964] The buggy address belongs to the page:
    [   48.484006] page:ffffea001c3f0600 refcount:1 mapcount:0 mapping:ffff8888181a91c0 index:0x0 compound_mapcount: 0
    [   48.484045] flags: 0x8000000000010200(slab|head)
    [   48.484096] raw: 8000000000010200 ffffea001c421a08 ffffea001c447e88 ffff8888181a91c0
    [   48.484141] raw: 0000000000000000 0000000000120012 00000001ffffffff 0000000000000000
    [   48.484188] page dumped because: kasan: bad access detected
    [   48.484230]
    [   48.484265] Memory state around the buggy address:
    [   48.484314]  ffff88870fc18f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   48.484361]  ffff88870fc18f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   48.484406] >ffff88870fc19000: fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc
    [   48.484451]                                ^
    [   48.484494]  ffff88870fc19080: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   48.484530]  ffff88870fc19100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=108602
    Fixes: e60aa7b53845 ("iommu/iova: Extend rbtree node caching")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Robin Murphy <robin.murphy@arm.com>
    Cc: Joerg Roedel <jroedel@suse.de>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: <stable@vger.kernel.org> # v4.15+
    Reviewed-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

commit 2bb90e5cc90e1d09f631aeab041a9cf913a5bbe5
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Fri Jul 19 10:29:20 2019 -0700

    bpf: sockmap, synchronize_rcu before free'ing map
    
    We need to have a synchronize_rcu before free'ing the sockmap because
    any outstanding psock references will have a pointer to the map and
    when they use this could trigger a use after free.
    
    Fixes: 604326b41a6fb ("bpf, sockmap: convert to generic sk_msg interface")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit c6bf2ae931adbd3e10967e12142856439a211813
Author: Jan Kiszka <jan.kiszka@siemens.com>
Date:   Sun Jul 21 16:01:36 2019 +0200

    KVM: nVMX: Set cached_vmcs12 and cached_shadow_vmcs12 NULL after free
    
    Shall help finding use-after-free bugs earlier.
    
    Suggested-by: Liran Alon <liran.alon@oracle.com>
    Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commits)
      scsi: megaraid_sas: set an unlimited max_segment_size
      scsi: mpt3sas: set an unlimited max_segment_size for SAS 3.0 HBAs
      scsi: IB/srp: set virt_boundary_mask in the scsi host
      scsi: IB/iser: set virt_boundary_mask in the scsi host
      scsi: storvsc: set virt_boundary_mask in the scsi host template
      scsi: ufshcd: set max_segment_size in the scsi host template
      scsi: core: take the DMA max mapping size into account
      scsi: core: add a host / host template field for the virt boundary
      scsi: core: Fix race on creating sense cache
      scsi: sd_zbc: Fix compilation warning
      scsi: libfc: fix null pointer dereference on a null lport
      scsi: zfcp: fix GCC compiler warning emitted with -Wmaybe-uninitialized
      scsi: zfcp: fix request object use-after-free in send path causing wrong traces
      scsi: zfcp: fix request object use-after-free in send path causing seqno errors
      scsi: megaraid_sas: Update driver version to 07.710.50.00
      scsi: megaraid_sas: Add module parameter for FW Async event logging
      scsi: megaraid_sas: Enable msix_load_balance for Invader and later controllers
      scsi: megaraid_sas: Fix calculation of target ID
      scsi: lpfc: reduce stack size with CONFIG_GCC_PLUGIN_STRUCTLEAK_VERBOSE
      scsi: devinfo: BLIST_TRY_VPD_PAGES for SanDisk Cruzer Blade
      ...

commits)
      pnfs/flexfiles: Add tracepoints for detecting pnfs fallback to MDS
      pnfs: Fix a problem where we gratuitously start doing I/O through the MDS
      SUNRPC: Optimise transport balancing code
      SUNRPC: Ensure the bvecs are reset when we re-encode the RPC request
      pnfs/flexfiles: Fix PTR_ERR() dereferences in ff_layout_track_ds_error
      NFSv4: Don't use the zero stateid with layoutget
      SUNRPC: Fix up backchannel slot table accounting
      SUNRPC: Fix initialisation of struct rpc_xprt_switch
      SUNRPC: Skip zero-refcount transports
      SUNRPC: Replace division by multiplication in calculation of queue length
      NFSv4: Validate the stateid before applying it to state recovery
      nfs4.0: Refetch lease_time after clientid update
      nfs4: Rename nfs41_setup_state_renewal
      nfs4: Make nfs4_proc_get_lease_time available for nfs4.0
      nfs: Fix copy-and-paste error in debug message
      NFS: Replace 16 seq_printf() calls by seq_puts()
      NFS: Use seq_putc() in nfs_show_stats()
      Revert "NFS: readdirplus optimization by cache mechanism" (memleak)
      SUNRPC: Fix transport accounting when caller specifies an rpc_xprt
      NFS: Record task, client ID, and XID in xdr_status trace points
      ...

commit 54851aa90cf27041d64b12f65ac72e9f97bd90fd
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 17 23:39:33 2019 +0300

    ipv6: Unlink sibling route in case of failure
    
    When a route needs to be appended to an existing multipath route,
    fib6_add_rt2node() first appends it to the siblings list and increments
    the number of sibling routes on each sibling.
    
    Later, the function notifies the route via call_fib6_entry_notifiers().
    In case the notification is vetoed, the route is not unlinked from the
    siblings list, which can result in a use-after-free.
    
    Fix this by unlinking the route from the siblings list before returning
    an error.
    
    Audited the rest of the call sites from which the FIB notification chain
    is called and could not find more problems.
    
    Fixes: 2233000cba40 ("net/ipv6: Move call_fib6_entry_notifiers up for route adds")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Alexander Petrovskiy <alexpe@mellanox.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f57e515a1b56325a28a0972c632a623a9c84590c
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Tue Jul 16 16:30:06 2019 -0700

    kernel/pid.c: convert struct pid count to refcount_t
    
    struct pid's count is an atomic_t field used as a refcount.  Use
    refcount_t for it which is basically atomic_t but does additional
    checking to prevent use-after-free bugs.
    
    For memory ordering, the only change is with the following:
    
     -      if ((atomic_read(&pid->count) == 1) ||
     -           atomic_dec_and_test(&pid->count)) {
     +      if (refcount_dec_and_test(&pid->count)) {
                    kmem_cache_free(ns->pid_cachep, pid);
    
    Here the change is from: Fully ordered --> RELEASE + ACQUIRE (as per
    refcount-vs-atomic.rst) This ACQUIRE should take care of making sure the
    free happens after the refcount_dec_and_test().
    
    The above hunk also removes atomic_read() since it is not needed for the
    code to work and it is unclear how beneficial it is.  The removal lets
    refcount_dec_and_test() check for cases where get_pid() happened before
    the object was freed.
    
    Link: http://lkml.kernel.org/r/20190701183826.191936-1-joel@joelfernandes.org
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Elena Reshetova <elena.reshetova@intel.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: KJ Tsanaktsidis <ktsanaktsidis@zendesk.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9b6d104a6b150bd4d3e5b039340e1f6b20c2e3c1
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Sat Jul 13 11:46:14 2019 +0800

    ASoC: samsung: odroid: fix an use-after-free issue for codec
    
    The codec variable is still being used after the of_node_put() call,
    which may result in use-after-free.
    
    Fixes: bc3cf17b575a ("ASoC: samsung: odroid: Add support for secondary CPU DAI")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: Sangbeom Kim <sbkim73@samsung.com>
    Cc: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Jaroslav Kysela <perex@perex.cz>
    Cc: Takashi Iwai <tiwai@suse.com>
    Cc: alsa-devel@alsa-project.org
    Cc: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/1562989575-33785-2-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commits)
      PCI: Enable NVIDIA HDA controllers
      tools: PCI: Fix installation when `make tools/pci_install`
      PCI: dwc: pci-dra7xx: Fix compilation when !CONFIG_GPIOLIB
      PCI: Fix typos and whitespace errors
      PCI: mobiveil: Fix INTx interrupt clearing in mobiveil_pcie_isr()
      PCI: mobiveil: Fix infinite-loop in the INTx handling function
      PCI: mobiveil: Move PCIe PIO enablement out of inbound window routine
      PCI: mobiveil: Add upper 32-bit PCI base address setup in inbound window
      PCI: mobiveil: Add upper 32-bit CPU base address setup in outbound window
      PCI: mobiveil: Mask out hardcoded bits in inbound/outbound windows setup
      PCI: mobiveil: Clear the control fields before updating it
      PCI: mobiveil: Add configured inbound windows counter
      PCI: mobiveil: Fix the valid check for inbound and outbound windows
      PCI: mobiveil: Clean-up program_{ib/ob}_windows()
      PCI: mobiveil: Remove an unnecessary return value check
      PCI: mobiveil: Fix error return values
      PCI: mobiveil: Refactor the MEM/IO outbound window initialization
      PCI: mobiveil: Make some register updates more readable
      PCI: mobiveil: Reformat the code for readability
      dt-bindings: PCI: mobiveil: Change gpio_slave and apb_csr to optional
      ...

commit 6471384af2a6530696fc0203bafe4de41a23c9ef
Author: Alexander Potapenko <glider@google.com>
Date:   Thu Jul 11 20:59:19 2019 -0700

    mm: security: introduce init_on_alloc=1 and init_on_free=1 boot options
    
    Patch series "add init_on_alloc/init_on_free boot options", v10.
    
    Provide init_on_alloc and init_on_free boot options.
    
    These are aimed at preventing possible information leaks and making the
    control-flow bugs that depend on uninitialized values more deterministic.
    
    Enabling either of the options guarantees that the memory returned by the
    page allocator and SL[AU]B is initialized with zeroes.  SLOB allocator
    isn't supported at the moment, as its emulation of kmem caches complicates
    handling of SLAB_TYPESAFE_BY_RCU caches correctly.
    
    Enabling init_on_free also guarantees that pages and heap objects are
    initialized right after they're freed, so it won't be possible to access
    stale data by using a dangling pointer.
    
    As suggested by Michal Hocko, right now we don't let the heap users to
    disable initialization for certain allocations.  There's not enough
    evidence that doing so can speed up real-life cases, and introducing ways
    to opt-out may result in things going out of control.
    
    This patch (of 2):
    
    The new options are needed to prevent possible information leaks and make
    control-flow bugs that depend on uninitialized values more deterministic.
    
    This is expected to be on-by-default on Android and Chrome OS.  And it
    gives the opportunity for anyone else to use it under distros too via the
    boot args.  (The init_on_free feature is regularly requested by folks
    where memory forensics is included in their threat models.)
    
    init_on_alloc=1 makes the kernel initialize newly allocated pages and heap
    objects with zeroes.  Initialization is done at allocation time at the
    places where checks for __GFP_ZERO are performed.
    
    init_on_free=1 makes the kernel initialize freed pages and heap objects
    with zeroes upon their deletion.  This helps to ensure sensitive data
    doesn't leak via use-after-free accesses.
    
    Both init_on_alloc=1 and init_on_free=1 guarantee that the allocator
    returns zeroed memory.  The two exceptions are slab caches with
    constructors and SLAB_TYPESAFE_BY_RCU flag.  Those are never
    zero-initialized to preserve their semantics.
    
    Both init_on_alloc and init_on_free default to zero, but those defaults
    can be overridden with CONFIG_INIT_ON_ALLOC_DEFAULT_ON and
    CONFIG_INIT_ON_FREE_DEFAULT_ON.
    
    If either SLUB poisoning or page poisoning is enabled, those options take
    precedence over init_on_alloc and init_on_free: initialization is only
    applied to unpoisoned allocations.
    
    Slowdown for the new features compared to init_on_free=0, init_on_alloc=0:
    
    hackbench, init_on_free=1:  +7.62% sys time (st.err 0.74%)
    hackbench, init_on_alloc=1: +7.75% sys time (st.err 2.14%)
    
    Linux build with -j12, init_on_free=1:  +8.38% wall time (st.err 0.39%)
    Linux build with -j12, init_on_free=1:  +24.42% sys time (st.err 0.52%)
    Linux build with -j12, init_on_alloc=1: -0.13% wall time (st.err 0.42%)
    Linux build with -j12, init_on_alloc=1: +0.57% sys time (st.err 0.40%)
    
    The slowdown for init_on_free=0, init_on_alloc=0 compared to the baseline
    is within the standard error.
    
    The new features are also going to pave the way for hardware memory
    tagging (e.g.  arm64's MTE), which will require both on_alloc and on_free
    hooks to set the tags for heap objects.  With MTE, tagging will have the
    same cost as memory initialization.
    
    Although init_on_free is rather costly, there are paranoid use-cases where
    in-memory data lifetime is desired to be minimized.  There are various
    arguments for/against the realism of the associated threat models, but
    given that we'll need the infrastructure for MTE anyway, and there are
    people who want wipe-on-free behavior no matter what the performance cost,
    it seems reasonable to include it in this series.
    
    [glider@google.com: v8]
      Link: http://lkml.kernel.org/r/20190626121943.131390-2-glider@google.com
    [glider@google.com: v9]
      Link: http://lkml.kernel.org/r/20190627130316.254309-2-glider@google.com
    [glider@google.com: v10]
      Link: http://lkml.kernel.org/r/20190628093131.199499-2-glider@google.com
    Link: http://lkml.kernel.org/r/20190617151050.92663-2-glider@google.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Michal Hocko <mhocko@suse.cz>         [page and dmapool parts
    Acked-by: James Morris <jamorris@linux.microsoft.com>]
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Cc: "Serge E. Hallyn" <serge@hallyn.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Sandeep Patil <sspatil@android.com>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Randy Dunlap <rdunlap@infradead.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Marco Elver <elver@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f0a3a24b532d9a7e56a33c5112b2a212ed6ec580
Author: Roman Gushchin <guro@fb.com>
Date:   Thu Jul 11 20:56:27 2019 -0700

    mm: memcg/slab: rework non-root kmem_cache lifecycle management
    
    Currently each charged slab page holds a reference to the cgroup to which
    it's charged.  Kmem_caches are held by the memcg and are released all
    together with the memory cgroup.  It means that none of kmem_caches are
    released unless at least one reference to the memcg exists, which is very
    far from optimal.
    
    Let's rework it in a way that allows releasing individual kmem_caches as
    soon as the cgroup is offline, the kmem_cache is empty and there are no
    pending allocations.
    
    To make it possible, let's introduce a new percpu refcounter for non-root
    kmem caches.  The counter is initialized to the percpu mode, and is
    switched to the atomic mode during kmem_cache deactivation.  The counter
    is bumped for every charged page and also for every running allocation.
    So the kmem_cache can't be released unless all allocations complete.
    
    To shutdown non-active empty kmem_caches, let's reuse the work queue,
    previously used for the kmem_cache deactivation.  Once the reference
    counter reaches 0, let's schedule an asynchronous kmem_cache release.
    
    * I used the following simple approach to test the performance
    (stolen from another patchset by T. Harding):
    
        time find / -name fname-no-exist
        echo 2 > /proc/sys/vm/drop_caches
        repeat 10 times
    
    Results:
    
            orig            patched
    
    real    0m1.455s        real    0m1.355s
    user    0m0.206s        user    0m0.219s
    sys     0m0.855s        sys     0m0.807s
    
    real    0m1.487s        real    0m1.699s
    user    0m0.221s        user    0m0.256s
    sys     0m0.806s        sys     0m0.948s
    
    real    0m1.515s        real    0m1.505s
    user    0m0.183s        user    0m0.215s
    sys     0m0.876s        sys     0m0.858s
    
    real    0m1.291s        real    0m1.380s
    user    0m0.193s        user    0m0.198s
    sys     0m0.843s        sys     0m0.786s
    
    real    0m1.364s        real    0m1.374s
    user    0m0.180s        user    0m0.182s
    sys     0m0.868s        sys     0m0.806s
    
    real    0m1.352s        real    0m1.312s
    user    0m0.201s        user    0m0.212s
    sys     0m0.820s        sys     0m0.761s
    
    real    0m1.302s        real    0m1.349s
    user    0m0.205s        user    0m0.203s
    sys     0m0.803s        sys     0m0.792s
    
    real    0m1.334s        real    0m1.301s
    user    0m0.194s        user    0m0.201s
    sys     0m0.806s        sys     0m0.779s
    
    real    0m1.426s        real    0m1.434s
    user    0m0.216s        user    0m0.181s
    sys     0m0.824s        sys     0m0.864s
    
    real    0m1.350s        real    0m1.295s
    user    0m0.200s        user    0m0.190s
    sys     0m0.842s        sys     0m0.811s
    
    So it looks like the difference is not noticeable in this test.
    
    [cai@lca.pw: fix an use-after-free in kmemcg_workfn()]
      Link: http://lkml.kernel.org/r/1560977573-10715-1-git-send-email-cai@lca.pw
    Link: http://lkml.kernel.org/r/20190611231813.3148843-9-guro@fb.com
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Waiman Long <longman@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4462b32c9285b521ef378907aa66a5ca485aae41
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jul 11 20:55:09 2019 -0700

    mm, page_alloc: more extensive free page checking with debug_pagealloc
    
    The page allocator checks struct pages for expected state (mapcount,
    flags etc) as pages are being allocated (check_new_page()) and freed
    (free_pages_check()) to provide some defense against errors in page
    allocator users.
    
    Prior commits 479f854a207c ("mm, page_alloc: defer debugging checks of
    pages allocated from the PCP") and 4db7548ccbd9 ("mm, page_alloc: defer
    debugging checks of freed pages until a PCP drain") this has happened
    for order-0 pages as they were allocated from or freed to the per-cpu
    caches (pcplists).  Since those are fast paths, the checks are now
    performed only when pages are moved between pcplists and global free
    lists.  This however lowers the chances of catching errors soon enough.
    
    In order to increase the chances of the checks to catch errors, the
    kernel has to be rebuilt with CONFIG_DEBUG_VM, which also enables
    multiple other internal debug checks (VM_BUG_ON() etc), which is
    suboptimal when the goal is to catch errors in mm users, not in mm code
    itself.
    
    To catch some wrong users of the page allocator we have
    CONFIG_DEBUG_PAGEALLOC, which is designed to have virtually no overhead
    unless enabled at boot time.  Memory corruptions when writing to freed
    pages have often the same underlying errors (use-after-free, double free)
    as corrupting the corresponding struct pages, so this existing debugging
    functionality is a good fit to extend by also perform struct page checks
    at least as often as if CONFIG_DEBUG_VM was enabled.
    
    Specifically, after this patch, when debug_pagealloc is enabled on boot,
    and CONFIG_DEBUG_VM disabled, pages are checked when allocated from or
    freed to the pcplists *in addition* to being moved between pcplists and
    free lists.  When both debug_pagealloc and CONFIG_DEBUG_VM are enabled,
    pages are checked when being moved between pcplists and free lists *in
    addition* to when allocated from or freed to the pcplists.
    
    When debug_pagealloc is not enabled on boot, the overhead in fast paths
    should be virtually none thanks to the use of static key.
    
    Link: http://lkml.kernel.org/r/20190603143451.27353-3-vbabka@suse.cz
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 96a2b03f281d3a3b29c27028164f43090d6495b9
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jul 11 20:55:06 2019 -0700

    mm, debug_pagelloc: use static keys to enable debugging
    
    Patch series "debug_pagealloc improvements".
    
    I have been recently debugging some pcplist corruptions, where it would be
    useful to perform struct page checks immediately as pages are allocated
    from and freed to pcplists, which is now only possible by rebuilding the
    kernel with CONFIG_DEBUG_VM (details in Patch 2 changelog).
    
    To make this kind of debugging simpler in future on a distro kernel, I
    have improved CONFIG_DEBUG_PAGEALLOC so that it has even smaller overhead
    when not enabled at boot time (Patch 1) and also when enabled (Patch 3),
    and extended it to perform the struct page checks more often when enabled
    (Patch 2).  Now it can be configured in when building a distro kernel
    without extra overhead, and debugging page use after free or double free
    can be enabled simply by rebooting with debug_pagealloc=on.
    
    This patch (of 3):
    
    CONFIG_DEBUG_PAGEALLOC has been redesigned by 031bc5743f15
    ("mm/debug-pagealloc: make debug-pagealloc boottime configurable") to
    allow being always enabled in a distro kernel, but only perform its
    expensive functionality when booted with debug_pagelloc=on.  We can
    further reduce the overhead when not boot-enabled (including page
    allocator fast paths) using static keys.  This patch introduces one for
    debug_pagealloc core functionality, and another for the optional guard
    page functionality (enabled by booting with debug_guardpage_minorder=X).
    
    Link: http://lkml.kernel.org/r/20190603143451.27353-2-vbabka@suse.cz
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 106d45f350c7cac876844dc685845cba4ffdb70b
Author: Benjamin Block <bblock@linux.ibm.com>
Date:   Tue Jul 2 23:02:01 2019 +0200

    scsi: zfcp: fix request object use-after-free in send path causing wrong traces
    
    When tracing instances where we open and close WKA ports, we also pass the
    request-ID of the respective FSF command.
    
    But after successfully sending the FSF command we must not use the
    request-object anymore, as this might result in an use-after-free (see
    "zfcp: fix request object use-after-free in send path causing seqno
    errors" ).
    
    To fix this add a new variable that caches the request-ID before sending
    the request. This won't change during the hand-off to the FCP channel,
    and so it's safe to trace this cached request-ID later, instead of using
    the request object.
    
    Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
    Fixes: d27a7cb91960 ("zfcp: trace on request for open and close of WKA port")
    Cc: <stable@vger.kernel.org> #2.6.38+
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit b76becde2b84137faa29bbc9a3b20953b5980e48
Author: Benjamin Block <bblock@linux.ibm.com>
Date:   Tue Jul 2 23:02:00 2019 +0200

    scsi: zfcp: fix request object use-after-free in send path causing seqno errors
    
    With a recent change to our send path for FSF commands we introduced a
    possible use-after-free of request-objects, that might further lead to
    zfcp crafting bad requests, which the FCP channel correctly complains
    about with an error (FSF_PROT_SEQ_NUMB_ERROR). This error is then handled
    by an adapter-wide recovery.
    
    The following sequence illustrates the possible use-after-free:
    
        Send Path:
    
            int zfcp_fsf_open_port(struct zfcp_erp_action *erp_action)
            {
                    struct zfcp_fsf_req *req;
                    ...
                    spin_lock_irq(&qdio->req_q_lock);
            //                     ^^^^^^^^^^^^^^^^
            //                     protects QDIO queue during sending
                    ...
                    req = zfcp_fsf_req_create(qdio,
                                              FSF_QTCB_OPEN_PORT_WITH_DID,
                                              SBAL_SFLAGS0_TYPE_READ,
                                              qdio->adapter->pool.erp_req);
            //            ^^^^^^^^^^^^^^^^^^^
            //            allocation of the request-object
                    ...
                    retval = zfcp_fsf_req_send(req);
                    ...
                    spin_unlock_irq(&qdio->req_q_lock);
                    return retval;
            }
    
            static int zfcp_fsf_req_send(struct zfcp_fsf_req *req)
            {
                    struct zfcp_adapter *adapter = req->adapter;
                    struct zfcp_qdio *qdio = adapter->qdio;
                    ...
                    zfcp_reqlist_add(adapter->req_list, req);
            //      ^^^^^^^^^^^^^^^^
            //      add request to our driver-internal hash-table for tracking
            //      (protected by separate lock req_list->lock)
                    ...
                    if (zfcp_qdio_send(qdio, &req->qdio_req)) {
            //          ^^^^^^^^^^^^^^
            //          hand-off the request to FCP channel;
            //          the request can complete at any point now
                            ...
                    }
    
                    /* Don't increase for unsolicited status */
                    if (!zfcp_fsf_req_is_status_read_buffer(req))
            //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            //           possible use-after-free
                            adapter->fsf_req_seq_no++;
            //                       ^^^^^^^^^^^^^^^^
            //                       because of the use-after-free we might
            //                       miss this accounting, and as follow-up
            //                       this results in the FCP channel error
            //                       FSF_PROT_SEQ_NUMB_ERROR
                    adapter->req_no++;
    
                    return 0;
            }
    
            static inline bool
            zfcp_fsf_req_is_status_read_buffer(struct zfcp_fsf_req *req)
            {
                    return req->qtcb == NULL;
            //             ^^^^^^^^^
            //             possible use-after-free
            }
    
        Response Path:
    
            void zfcp_fsf_reqid_check(struct zfcp_qdio *qdio, int sbal_idx)
            {
                    ...
                    struct zfcp_fsf_req *fsf_req;
                    ...
                    for (idx = 0; idx < QDIO_MAX_ELEMENTS_PER_BUFFER; idx++) {
                            ...
                            fsf_req = zfcp_reqlist_find_rm(adapter->req_list,
                                                           req_id);
            //                        ^^^^^^^^^^^^^^^^^^^^
            //                        remove request from our driver-internal
            //                        hash-table (lock req_list->lock)
                            ...
                            zfcp_fsf_req_complete(fsf_req);
                    }
            }
    
            static void zfcp_fsf_req_complete(struct zfcp_fsf_req *req)
            {
                    ...
                    if (likely(req->status & ZFCP_STATUS_FSFREQ_CLEANUP))
                            zfcp_fsf_req_free(req);
            //              ^^^^^^^^^^^^^^^^^
            //              free memory for request-object
                    else
                            complete(&req->completion);
            //              ^^^^^^^^
            //              completion notification for code-paths that wait
            //              synchronous for the completion of the request; in
            //              those the memory is freed separately
            }
    
    The result of the use-after-free only affects the send path, and can not
    lead to any data corruption. In case we miss the sequence-number
    accounting, because the memory was already re-purposed, the next FSF
    command will fail with said FCP channel error, and we will recover the
    whole adapter. This causes no additional errors, but it slows down
    traffic.  There is a slight chance of the same thing happen again
    recursively after the adapter recovery, but so far this has not been seen.
    
    This was seen under z/VM, where the send path might run on a virtual CPU
    that gets scheduled away by z/VM, while the return path might still run,
    and so create the necessary timing. Running with KASAN can also slow down
    the kernel sufficiently to run into this user-after-free, and then see the
    report by KASAN.
    
    To fix this, simply pull the test for the sequence-number accounting in
    front of the hand-off to the FCP channel (this information doesn't change
    during hand-off), but leave the sequence-number accounting itself where it
    is.
    
    To make future regressions of the same kind less likely, add comments to
    all closely related code-paths.
    
    Signed-off-by: Benjamin Block <bblock@linux.ibm.com>
    Fixes: f9eca0227600 ("scsi: zfcp: drop duplicate fsf_command from zfcp_fsf_req which is also in QTCB header")
    Cc: <stable@vger.kernel.org> #5.0+
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Reviewed-by: Jens Remus <jremus@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commits)
      net/mlx5e: Return in default case statement in tx_post_resync_params
      mlx5: Return -EINVAL when WARN_ON_ONCE triggers in mlx5e_tls_resync().
      net: dsa: add support for BRIDGE_MROUTER attribute
      pkt_sched: Include const.h
      net: netsec: remove static declaration for netsec_set_tx_de()
      net: netsec: remove superfluous if statement
      netfilter: nf_tables: add hardware offload support
      net: flow_offload: rename tc_cls_flower_offload to flow_cls_offload
      net: flow_offload: add flow_block_cb_is_busy() and use it
      net: sched: remove tcf block API
      drivers: net: use flow block API
      net: sched: use flow block API
      net: flow_offload: add flow_block_cb_{priv, incref, decref}()
      net: flow_offload: add list handling functions
      net: flow_offload: add flow_block_cb_alloc() and flow_block_cb_free()
      net: flow_offload: rename TCF_BLOCK_BINDER_TYPE_* to FLOW_BLOCK_BINDER_TYPE_*
      net: flow_offload: rename TC_BLOCK_{UN}BIND to FLOW_BLOCK_{UN}BIND
      net: flow_offload: add flow_block_cb_setup_simple()
      net: hisilicon: Add an tx_desc to adapt HI13X1_GMAC
      net: hisilicon: Add an rx_desc to adapt HI13X1_GMAC
      ...

commit ec3042ad39d4e2ddbc3a3344f90bb10d8feb53bc
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Thu Jul 11 13:10:45 2019 +0900

    ASoC: audio-graph-card: add missing const at graph_get_dai_id()
    
    commit c152f8491a8d9 ("ASoC: audio-graph-card: fix an use-after-free in
    graph_get_dai_id()") fixups use-after-free issue,
    but, it need to use "const" for reg. This patch adds it.
    
    We will have below without this patch
    
    LINUX/sound/soc/generic/audio-graph-card.c: In function 'graph_get_dai_id':
    LINUX/sound/soc/generic/audio-graph-card.c:87:7: warning: assignment discards\
     'const' qualifier from pointer target type [-Wdiscarded-qualifiers]
       reg = of_get_property(node, "reg", NULL);
    
    Fixes: c152f8491a8d9 ("ASoC: audio-graph-card: fix an use-after-free in graph_get_dai_id()")
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Acked-by: Wen Yang <wen.yang99@zte.com.cn>
    Link: https://lore.kernel.org/r/87sgrd43ja.wl-kuninori.morimoto.gx@renesas.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit c152f8491a8d9a4b25afd65a86eb5e55e2a8c380
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Jul 10 15:25:09 2019 +0800

    ASoC: audio-graph-card: fix an use-after-free in graph_get_dai_id()
    
    After calling of_node_put() on the node variable, it is still being
    used, which may result in use-after-free.
    Fix this issue by calling of_node_put() after the last usage.
    
    Fixes: a0c426fe1433 ("ASoC: simple-card-utils: check "reg" property on asoc_simple_card_get_dai_id()")
    Link: https://lore.kernel.org/r/1562743509-30496-5-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit aa2e362cb6b3f5ca88093ada01e1a0ace8a517b2
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Jul 10 15:25:08 2019 +0800

    ASoC: audio-graph-card: fix use-after-free in graph_dai_link_of_dpcm()
    
    After calling of_node_put() on the ports, port, and node variables,
    they are still being used, which may result in use-after-free.
    Fix this issue by calling of_node_put() after the last usage.
    
    Fixes: dd98fbc558a0 ("ASoC: audio-graph-card: cleanup DAI link loop method - step1")
    Link: https://lore.kernel.org/r/1562743509-30496-4-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 27862d5a3325bc531ec15e3c607e44aa0fd57f6f
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Jul 10 15:25:07 2019 +0800

    ASoC: simple-card: fix an use-after-free in simple_for_each_link()
    
    The codec variable is still being used after the of_node_put() call,
    which may result in use-after-free.
    
    Fixes: d947cdfd4be2 ("ASoC: simple-card: cleanup DAI link loop method - step1")
    Link: https://lore.kernel.org/r/1562743509-30496-3-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 724808ad556c15e9473418d082f8aae81dd267f6
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Wed Jul 10 15:25:06 2019 +0800

    ASoC: simple-card: fix an use-after-free in simple_dai_link_of_dpcm()
    
    The node variable is still being used after the of_node_put() call,
    which may result in use-after-free.
    
    Fixes: cfc652a73331 ("ASoC: simple-card: tidyup prefix for snd_soc_codec_conf")
    Link: https://lore.kernel.org/r/1562743509-30496-2-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Acked-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e56fbc9dc79ce0fdc49ffadd062214ddd02f65b6
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Jul 4 12:13:46 2019 -0300

    perf tools: Use list_del_init() more thorougly
    
    To allow for destructors to check if they're operating on a object still
    in a list, and to avoid going from use after free list entries into
    still valid, or even also other already removed from list entries.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-deh17ub44atyox3j90e6rksu@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit d8f9da240495b50766239410f9b0c715ca506a67
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Jul 4 12:06:20 2019 -0300

    perf tools: Use zfree() where applicable
    
    In places where the equivalent was already being done, i.e.:
    
       free(a);
       a = NULL;
    
    And in placs where struct members are being freed so that if we have
    some erroneous reference to its struct, then accesses to freed members
    will result in segfaults, which we can detect faster than use after free
    to areas that may still have something seemingly valid.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-jatyoofo5boc1bsvoig6bb6i@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 7c8e90ddf02f139a90bc29c04302e9914818f0c8
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Mon Jul 8 14:19:04 2019 +0800

    irqchip/renesas-rza1: Prevent use-after-free in rza1_irqc_probe()
    
    The gic_node is still being used in the rza1_irqc_parse_map() call
    after the of_node_put() call, which may result in use-after-free.
    
    Fixes: a644ccb819bc ("irqchip: Add Renesas RZ/A1 Interrupt Controller driver")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lkml.kernel.org/r/1562566745-7447-3-git-send-email-wen.yang99@zte.com.cn

commit c74b05030edb3b52f4208d8415b8c933bc509a29
Author: Leo Yan <leo.yan@linaro.org>
Date:   Tue Jul 2 18:34:11 2019 +0800

    perf stat: Fix use-after-freed pointer detected by the smatch tool
    
    Based on the following report from Smatch, fix the use-after-freed
    pointer.
    
      tools/perf/builtin-stat.c:1353
      add_default_attributes() warn: passing freed memory 'str'.
    
    The pointer 'str' has been freed but later it is still passed into the
    function parse_events_print_error().  This patch fixes this
    use-after-freed issue.
    
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Changbin Du <changbin.du@intel.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Eric Saint-Etienne <eric.saint.etienne@oracle.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Link: http://lkml.kernel.org/r/20190702103420.27540-3-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit faf5577f2498cea23011b5c785ef853ded22700b
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Sat Jul 6 12:23:41 2019 +0800

    net: pasemi: fix an use-after-free in pasemi_mac_phy_init()
    
    The phy_dn variable is still being used in of_phy_connect() after the
    of_node_put() call, which may result in use-after-free.
    
    Fixes: 1dd2d06c0459 ("net: Rework pasemi_mac driver to use of_mdio infrastructure")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef86ea982bb5a31cda1f2989b6e477bb53a1031b
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Sat Jul 6 11:38:41 2019 +0800

    net: axienet: fix a potential double free in axienet_probe()
    
    There is a possible use-after-free issue in the axienet_probe():
    
    1701:   np = of_parse_phandle(pdev->dev.of_node, "axistream-connected", 0);
    1702:   if (np) {
    ...
    1787:           of_node_put(np); ---> released here
    1788:           lp->eth_irq = platform_get_irq(pdev, 0);
    1789:   } else {
    ...
    1801:   }
    1802:   if (IS_ERR(lp->dma_regs)) {
    ...
    1805:           of_node_put(np); ---> double released here
    1806:           goto free_netdev;
    1807:   }
    
    We solve this problem by removing the unnecessary of_node_put().
    
    Fixes: 28ef9ebdb64c ("net: axienet: make use of axistream-connected attribute optional")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: Anirudha Sarangi <anirudh@xilinx.com>
    Cc: John Linn <John.Linn@xilinx.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Michal Simek <michal.simek@xilinx.com>
    Cc: Robert Hancock <hancock@sedsystems.ca>
    Cc: netdev@vger.kernel.org
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Reviewed-by: Robert Hancock <hancock@sedsystems.ca>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e226121fcc26e69c721a435aa9348a2f452e4d3e
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:54 2019 +0200

    vsock/virtio: fix flush of works during the .remove()
    
    This patch moves the flush of works after vdev->config->del_vqs(vdev),
    because we need to be sure that no workers run before to free the
    'vsock' object.
    
    Since we stopped the workers using the [tx|rx|event]_run flags,
    we are sure no one is accessing the device while we are calling
    vdev->config->reset(vdev), so we can safely move the workers' flush.
    
    Before the vdev->config->del_vqs(vdev), workers can be scheduled
    by VQ callbacks, so we must flush them after del_vqs(), to avoid
    use-after-free of 'vsock' object.
    
    Suggested-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0deab087b16abb755dca6da5d3685375f8ff8c85
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:52 2019 +0200

    vsock/virtio: use RCU to avoid use-after-free on the_virtio_vsock
    
    Some callbacks used by the upper layers can run while we are in the
    .remove(). A potential use-after-free can happen, because we free
    the_virtio_vsock without knowing if the callbacks are over or not.
    
    To solve this issue we move the assignment of the_virtio_vsock at the
    end of .probe(), when we finished all the initialization, and at the
    beginning of .remove(), before to release resources.
    For the same reason, we do the same also for the vdev->priv.
    
    We use RCU to be sure that all callbacks that use the_virtio_vsock
    ended before freeing it. This is not required for callbacks that
    use vdev->priv, because after the vdev->config->del_vqs() we are sure
    that they are ended and will no longer be invoked.
    
    We also take the mutex during the .remove() to avoid that .probe() can
    run while we are resetting the device.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a2bed90704c68d3763bf24decb1b781a45395de8
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Jul 3 00:23:42 2019 +0900

    gtp: fix use-after-free in gtp_newlink()
    
    Current gtp_newlink() could be called after unregister_pernet_subsys().
    gtp_newlink() uses gtp_net but it can be destroyed by
    unregister_pernet_subsys().
    So unregister_pernet_subsys() should be called after
    rtnl_link_unregister().
    
    Test commands:
       #SHELL 1
       while :
       do
               for i in {1..5}
               do
                    ./gtp-link add gtp$i &
               done
               killall gtp-link
       done
    
       #SHELL 2
       while :
       do
            modprobe -rv gtp
       done
    
    Splat looks like:
    [  753.176631] BUG: KASAN: use-after-free in gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.177722] Read of size 8 at addr ffff8880d48f2458 by task gtp-link/7126
    [  753.179082] CPU: 0 PID: 7126 Comm: gtp-link Tainted: G        W         5.2.0-rc6+ #50
    [  753.185801] Call Trace:
    [  753.186264]  dump_stack+0x7c/0xbb
    [  753.186863]  ? gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.187583]  print_address_description+0xc7/0x240
    [  753.188382]  ? gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.189097]  ? gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.189846]  __kasan_report+0x12a/0x16f
    [  753.190542]  ? gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.191298]  kasan_report+0xe/0x20
    [  753.191893]  gtp_newlink+0x9b4/0xa5c [gtp]
    [  753.192580]  ? __netlink_ns_capable+0xc3/0xf0
    [  753.193370]  __rtnl_newlink+0xb9f/0x11b0
    [ ... ]
    [  753.241201] Allocated by task 7186:
    [  753.241844]  save_stack+0x19/0x80
    [  753.242399]  __kasan_kmalloc.constprop.3+0xa0/0xd0
    [  753.243192]  __kmalloc+0x13e/0x300
    [  753.243764]  ops_init+0xd6/0x350
    [  753.244314]  register_pernet_operations+0x249/0x6f0
    [ ... ]
    [  753.251770] Freed by task 7178:
    [  753.252288]  save_stack+0x19/0x80
    [  753.252833]  __kasan_slab_free+0x111/0x150
    [  753.253962]  kfree+0xc7/0x280
    [  753.254509]  ops_free_list.part.11+0x1c4/0x2d0
    [  753.255241]  unregister_pernet_operations+0x262/0x390
    [ ... ]
    [  753.285883] list_add corruption. next->prev should be prev (ffff8880d48f2458), but was ffff8880d497d878. (next.
    [  753.287241] ------------[ cut here ]------------
    [  753.287794] kernel BUG at lib/list_debug.c:25!
    [  753.288364] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [  753.289099] CPU: 0 PID: 7126 Comm: gtp-link Tainted: G    B   W         5.2.0-rc6+ #50
    [  753.291036] RIP: 0010:__list_add_valid+0x74/0xd0
    [  753.291589] Code: 48 39 da 75 27 48 39 f5 74 36 48 39 dd 74 31 48 83 c4 08 b8 01 00 00 00 5b 5d c3 48 89 d9 48b
    [  753.293779] RSP: 0018:ffff8880cae8f398 EFLAGS: 00010286
    [  753.294401] RAX: 0000000000000075 RBX: ffff8880d497d878 RCX: 0000000000000000
    [  753.296260] RDX: 0000000000000075 RSI: 0000000000000008 RDI: ffffed10195d1e69
    [  753.297070] RBP: ffff8880cd250ae0 R08: ffffed101b4bff21 R09: ffffed101b4bff21
    [  753.297899] R10: 0000000000000001 R11: ffffed101b4bff20 R12: ffff8880d497d878
    [  753.298703] R13: 0000000000000000 R14: ffff8880cd250ae0 R15: ffff8880d48f2458
    [  753.299564] FS:  00007f5f79805740(0000) GS:ffff8880da400000(0000) knlGS:0000000000000000
    [  753.300533] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  753.301231] CR2: 00007fe8c7ef4f10 CR3: 00000000b71a6006 CR4: 00000000000606f0
    [  753.302183] Call Trace:
    [  753.302530]  gtp_newlink+0x5f6/0xa5c [gtp]
    [  753.303037]  ? __netlink_ns_capable+0xc3/0xf0
    [  753.303576]  __rtnl_newlink+0xb9f/0x11b0
    [  753.304092]  ? rtnl_link_unregister+0x230/0x230
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1788b8569f5de27da09087fa3f6580d2aa04cc75
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Wed Jul 3 00:22:25 2019 +0900

    gtp: fix use-after-free in gtp_encap_destroy()
    
    gtp_encap_destroy() is called twice.
    1. When interface is deleted.
    2. When udp socket is destroyed.
    either gtp->sk0 or gtp->sk1u could be freed by sock_put() in
    gtp_encap_destroy(). so, when gtp_encap_destroy() is called again,
    it would uses freed sk pointer.
    
    patch makes gtp_encap_destroy() to set either gtp->sk0 or gtp->sk1u to
    null. in addition, both gtp->sk0 and gtp->sk1u pointer are protected
    by rtnl_lock. so, rtnl_lock() is added.
    
    Test command:
       gtp-link add gtp1 &
       killall gtp-link
       ip link del gtp1
    
    Splat looks like:
    [   83.182767] BUG: KASAN: use-after-free in __lock_acquire+0x3a20/0x46a0
    [   83.184128] Read of size 8 at addr ffff8880cc7d5360 by task ip/1008
    [   83.185567] CPU: 1 PID: 1008 Comm: ip Not tainted 5.2.0-rc6+ #50
    [   83.188469] Call Trace:
    [ ... ]
    [   83.200126]  lock_acquire+0x141/0x380
    [   83.200575]  ? lock_sock_nested+0x3a/0xf0
    [   83.201069]  _raw_spin_lock_bh+0x38/0x70
    [   83.201551]  ? lock_sock_nested+0x3a/0xf0
    [   83.202044]  lock_sock_nested+0x3a/0xf0
    [   83.202520]  gtp_encap_destroy+0x18/0xe0 [gtp]
    [   83.203065]  gtp_encap_disable.isra.14+0x13/0x50 [gtp]
    [   83.203687]  gtp_dellink+0x56/0x170 [gtp]
    [   83.204190]  rtnl_delete_link+0xb4/0x100
    [ ... ]
    [   83.236513] Allocated by task 976:
    [   83.236925]  save_stack+0x19/0x80
    [   83.237332]  __kasan_kmalloc.constprop.3+0xa0/0xd0
    [   83.237894]  kmem_cache_alloc+0xd8/0x280
    [   83.238360]  sk_prot_alloc.isra.42+0x50/0x200
    [   83.238874]  sk_alloc+0x32/0x940
    [   83.239264]  inet_create+0x283/0xc20
    [   83.239684]  __sock_create+0x2dd/0x540
    [   83.240136]  __sys_socket+0xca/0x1a0
    [   83.240550]  __x64_sys_socket+0x6f/0xb0
    [   83.240998]  do_syscall_64+0x9c/0x450
    [   83.241466]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [   83.242061]
    [   83.242249] Freed by task 0:
    [   83.242616]  save_stack+0x19/0x80
    [   83.243013]  __kasan_slab_free+0x111/0x150
    [   83.243498]  kmem_cache_free+0x89/0x250
    [   83.244444]  __sk_destruct+0x38f/0x5a0
    [   83.245366]  rcu_core+0x7e9/0x1c20
    [   83.245766]  __do_softirq+0x213/0x8fa
    
    Fixes: 1e3a3abd8b28 ("gtp: make GTP sockets in gtp_newlink optional")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4df591b20b80cb77920953812d894db259d85bd7
Author: Dexuan Cui <decui@microsoft.com>
Date:   Fri Jun 21 23:45:23 2019 +0000

    PCI: hv: Fix a use-after-free bug in hv_eject_device_work()
    
    Fix a use-after-free in hv_eject_device_work().
    
    Fixes: 05f151a73ec2 ("PCI: hv: Fix a memory leak in hv_eject_device_work()")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Cc: stable@vger.kernel.org

commit 2b8066c3deb9140fdf258417a51479b2aeaa7622
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Mon Jun 24 10:07:31 2019 -0400

    dmaengine: imx-sdma: fix use-after-free on probe error path
    
    If probe() fails anywhere beyond the point where
    sdma_get_firmware() is called, then a kernel oops may occur.
    
    Problematic sequence of events:
    1. probe() calls sdma_get_firmware(), which schedules the
       firmware callback to run when firmware becomes available,
       using the sdma instance structure as the context
    2. probe() encounters an error, which deallocates the
       sdma instance structure
    3. firmware becomes available, firmware callback is
       called with deallocated sdma instance structure
    4. use after free - kernel oops !
    
    Solution: only attempt to load firmware when we're certain
    that probe() will succeed. This guarantees that the firmware
    callback's context will remain valid.
    
    Note that the remove() path is unaffected by this issue: the
    firmware loader will increment the driver module's use count,
    ensuring that the module cannot be unloaded while the
    firmware callback is pending or running.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Reviewed-by: Robin Gong <yibin.gong@nxp.com>
    [vkoul: fixed braces for if condition]
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

commit 1bcc1fd64e4dd903f4d868a9e053986e3b102713
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Thu Jul 4 16:38:50 2019 +0800

    ASoC: audio-graph-card: fix use-after-free in graph_for_each_link
    
    After calling of_node_put() on the codec_ep and codec_port variables,
    they are still being used, which may result in use-after-free.
    We fix this issue by calling of_node_put() after the last usage.
    
    Fixes: fce9b90c1ab7 ("ASoC: audio-graph-card: cleanup DAI link loop method - step2")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: Liam Girdwood <lgirdwood@gmail.com>
    Cc: Mark Brown <broonie@kernel.org>
    Cc: Jaroslav Kysela <perex@perex.cz>
    Cc: Takashi Iwai <tiwai@suse.com>
    Cc: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Cc: alsa-devel@alsa-project.org
    Cc: linux-kernel@vger.kernel.org
    Link: https://lore.kernel.org/r/1562229530-8121-1-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit fd709721352dd5239056eacaded00f2244e6ef58
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Jul 2 12:46:00 2019 +0200

    xfrm: policy: fix bydst hlist corruption on hash rebuild
    
    syzbot reported following spat:
    
    BUG: KASAN: use-after-free in __write_once_size include/linux/compiler.h:221
    BUG: KASAN: use-after-free in hlist_del_rcu include/linux/rculist.h:455
    BUG: KASAN: use-after-free in xfrm_hash_rebuild+0xa0d/0x1000 net/xfrm/xfrm_policy.c:1318
    Write of size 8 at addr ffff888095e79c00 by task kworker/1:3/8066
    Workqueue: events xfrm_hash_rebuild
    Call Trace:
     __write_once_size include/linux/compiler.h:221 [inline]
     hlist_del_rcu include/linux/rculist.h:455 [inline]
     xfrm_hash_rebuild+0xa0d/0x1000 net/xfrm/xfrm_policy.c:1318
     process_one_work+0x814/0x1130 kernel/workqueue.c:2269
    Allocated by task 8064:
     __kmalloc+0x23c/0x310 mm/slab.c:3669
     kzalloc include/linux/slab.h:742 [inline]
     xfrm_hash_alloc+0x38/0xe0 net/xfrm/xfrm_hash.c:21
     xfrm_policy_init net/xfrm/xfrm_policy.c:4036 [inline]
     xfrm_net_init+0x269/0xd60 net/xfrm/xfrm_policy.c:4120
     ops_init+0x336/0x420 net/core/net_namespace.c:130
     setup_net+0x212/0x690 net/core/net_namespace.c:316
    
    The faulting address is the address of the old chain head,
    free'd by xfrm_hash_resize().
    
    In xfrm_hash_rehash(), chain heads get re-initialized without
    any hlist_del_rcu:
    
     for (i = hmask; i >= 0; i--)
        INIT_HLIST_HEAD(odst + i);
    
    Then, hlist_del_rcu() gets called on the about to-be-reinserted policy
    when iterating the per-net list of policies.
    
    hlist_del_rcu() will then make chain->first be nonzero again:
    
    static inline void __hlist_del(struct hlist_node *n)
    {
       struct hlist_node *next = n->next;   // address of next element in list
       struct hlist_node **pprev = n->pprev;// location of previous elem, this
                                            // can point at chain->first
            WRITE_ONCE(*pprev, next);       // chain->first points to next elem
            if (next)
                    next->pprev = pprev;
    
    Then, when we walk chainlist to find insertion point, we may find a
    non-empty list even though we're supposedly reinserting the first
    policy to an empty chain.
    
    To fix this first unlink all exact and inexact policies instead of
    zeroing the list heads.
    
    Add the commands equivalent to the syzbot reproducer to xfrm_policy.sh,
    without fix KASAN catches the corruption as it happens, SLUB poisoning
    detects it a bit later.
    
    Reported-by: syzbot+0165480d4ef07360eeda@syzkaller.appspotmail.com
    Fixes: 1548bc4e0512 ("xfrm: policy: delete inexact policies from inexact list on hash rebuild")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>

commit 095c02da80a41cf6d311c504d8955d6d1c2add10
Author: Andreas Steinmetz <ast@domdv.de>
Date:   Sun Jun 30 22:46:42 2019 +0200

    macsec: fix use-after-free of skb during RX
    
    Fix use-after-free of skb when rx_handler returns RX_HANDLER_PASS.
    
    Signed-off-by: Andreas Steinmetz <ast@domdv.de>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d0abe36cf13fb7b577949fd1539326adddcc9bc
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Wed Jun 19 10:32:38 2019 -0400

    xprtrdma: Fix use-after-free in rpcrdma_post_recvs
    
    Dereference wr->next /before/ the memory backing wr has been
    released. This issue was found by code inspection. It is not
    expected to be a significant problem because it is in an error
    path that is almost never executed.
    
    Fixes: 7c8d9e7c8863 ("xprtrdma: Move Receive posting to ... ")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit e57f61858b7cf478ed6fa23ed4b3876b1c9625c4
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Tue Jul 2 15:00:18 2019 +0300

    net: bridge: mcast: fix stale nsrcs pointer in igmp3/mld2 report handling
    
    We take a pointer to grec prior to calling pskb_may_pull and use it
    afterwards to get nsrcs so record nsrcs before the pull when handling
    igmp3 and we get a pointer to nsrcs and call pskb_may_pull when handling
    mld2 which again could lead to reading 2 bytes out-of-bounds.
    
     ==================================================================
     BUG: KASAN: use-after-free in br_multicast_rcv+0x480c/0x4ad0 [bridge]
     Read of size 2 at addr ffff8880421302b4 by task ksoftirqd/1/16
    
     CPU: 1 PID: 16 Comm: ksoftirqd/1 Tainted: G           OE     5.2.0-rc6+ #1
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
     Call Trace:
      dump_stack+0x71/0xab
      print_address_description+0x6a/0x280
      ? br_multicast_rcv+0x480c/0x4ad0 [bridge]
      __kasan_report+0x152/0x1aa
      ? br_multicast_rcv+0x480c/0x4ad0 [bridge]
      ? br_multicast_rcv+0x480c/0x4ad0 [bridge]
      kasan_report+0xe/0x20
      br_multicast_rcv+0x480c/0x4ad0 [bridge]
      ? br_multicast_disable_port+0x150/0x150 [bridge]
      ? ktime_get_with_offset+0xb4/0x150
      ? __kasan_kmalloc.constprop.6+0xa6/0xf0
      ? __netif_receive_skb+0x1b0/0x1b0
      ? br_fdb_update+0x10e/0x6e0 [bridge]
      ? br_handle_frame_finish+0x3c6/0x11d0 [bridge]
      br_handle_frame_finish+0x3c6/0x11d0 [bridge]
      ? br_pass_frame_up+0x3a0/0x3a0 [bridge]
      ? virtnet_probe+0x1c80/0x1c80 [virtio_net]
      br_handle_frame+0x731/0xd90 [bridge]
      ? select_idle_sibling+0x25/0x7d0
      ? br_handle_frame_finish+0x11d0/0x11d0 [bridge]
      __netif_receive_skb_core+0xced/0x2d70
      ? virtqueue_get_buf_ctx+0x230/0x1130 [virtio_ring]
      ? do_xdp_generic+0x20/0x20
      ? virtqueue_napi_complete+0x39/0x70 [virtio_net]
      ? virtnet_poll+0x94d/0xc78 [virtio_net]
      ? receive_buf+0x5120/0x5120 [virtio_net]
      ? __netif_receive_skb_one_core+0x97/0x1d0
      __netif_receive_skb_one_core+0x97/0x1d0
      ? __netif_receive_skb_core+0x2d70/0x2d70
      ? _raw_write_trylock+0x100/0x100
      ? __queue_work+0x41e/0xbe0
      process_backlog+0x19c/0x650
      ? _raw_read_lock_irq+0x40/0x40
      net_rx_action+0x71e/0xbc0
      ? __switch_to_asm+0x40/0x70
      ? napi_complete_done+0x360/0x360
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x40/0x70
      ? __schedule+0x85e/0x14d0
      __do_softirq+0x1db/0x5f9
      ? takeover_tasklets+0x5f0/0x5f0
      run_ksoftirqd+0x26/0x40
      smpboot_thread_fn+0x443/0x680
      ? sort_range+0x20/0x20
      ? schedule+0x94/0x210
      ? __kthread_parkme+0x78/0xf0
      ? sort_range+0x20/0x20
      kthread+0x2ae/0x3a0
      ? kthread_create_worker_on_cpu+0xc0/0xc0
      ret_from_fork+0x35/0x40
    
     The buggy address belongs to the page:
     page:ffffea0001084c00 refcount:0 mapcount:-128 mapping:0000000000000000 index:0x0
     flags: 0xffffc000000000()
     raw: 00ffffc000000000 ffffea0000cfca08 ffffea0001098608 0000000000000000
     raw: 0000000000000000 0000000000000003 00000000ffffff7f 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
     ffff888042130180: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff888042130200: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     > ffff888042130280: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                                         ^
     ffff888042130300: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff888042130380: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ==================================================================
     Disabling lock debugging due to kernel taint
    
    Fixes: bc8c20acaea1 ("bridge: multicast: treat igmpv3 report with INCLUDE and no sources as a leave")
    Reported-by: Martin Weinelt <martin@linuxlounge.net>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Tested-by: Martin Weinelt <martin@linuxlounge.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0d20e56ecca0f5025f9041d11ee247129b5e48ce
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jun 28 14:36:59 2019 +0200

    vsock/virtio: fix flush of works during the .remove()
    
    This patch moves the flush of works after vdev->config->del_vqs(vdev),
    because we need to be sure that no workers run before to free the
    'vsock' object.
    
    Since we stopped the workers using the [tx|rx|event]_run flags,
    we are sure no one is accessing the device while we are calling
    vdev->config->reset(vdev), so we can safely move the workers' flush.
    
    Before the vdev->config->del_vqs(vdev), workers can be scheduled
    by VQ callbacks, so we must flush them after del_vqs(), to avoid
    use-after-free of 'vsock' object.
    
    Suggested-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c7a5582f5d720dc35cfcc42ccaded69f0642e4a
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jun 28 14:36:57 2019 +0200

    vsock/virtio: use RCU to avoid use-after-free on the_virtio_vsock
    
    Some callbacks used by the upper layers can run while we are in the
    .remove(). A potential use-after-free can happen, because we free
    the_virtio_vsock without knowing if the callbacks are over or not.
    
    To solve this issue we move the assignment of the_virtio_vsock at the
    end of .probe(), when we finished all the initialization, and at the
    beginning of .remove(), before to release resources.
    For the same reason, we do the same also for the vdev->priv.
    
    We use RCU to be sure that all callbacks that use the_virtio_vsock
    ended before freeing it. This is not required for callbacks that
    use vdev->priv, because after the vdev->config->del_vqs() we are sure
    that they are ended and will no longer be invoked.
    
    We also take the mutex during the .remove() to avoid that .probe() can
    run while we are resetting the device.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dbc3117d4ca9e17819ac73501e914b8422686750
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Jun 27 21:44:09 2019 -0700

    block, bfq: NULL out the bic when it's no longer valid
    
    In reboot tests on several devices we were seeing a "use after free"
    when slub_debug or KASAN was enabled.  The kernel complained about:
    
      Unable to handle kernel paging request at virtual address 6b6b6c2b
    
    ...which is a classic sign of use after free under slub_debug.  The
    stack crawl in kgdb looked like:
    
     0  test_bit (addr=<optimized out>, nr=<optimized out>)
     1  bfq_bfqq_busy (bfqq=<optimized out>)
     2  bfq_select_queue (bfqd=<optimized out>)
     3  __bfq_dispatch_request (hctx=<optimized out>)
     4  bfq_dispatch_request (hctx=<optimized out>)
     5  0xc056ef00 in blk_mq_do_dispatch_sched (hctx=0xed249440)
     6  0xc056f728 in blk_mq_sched_dispatch_requests (hctx=0xed249440)
     7  0xc0568d24 in __blk_mq_run_hw_queue (hctx=0xed249440)
     8  0xc0568d94 in blk_mq_run_work_fn (work=<optimized out>)
     9  0xc024c5c4 in process_one_work (worker=0xec6d4640, work=0xed249480)
     10 0xc024cff4 in worker_thread (__worker=0xec6d4640)
    
    Digging in kgdb, it could be found that, though bfqq looked fine,
    bfqq->bic had been freed.
    
    Through further digging, I postulated that perhaps it is illegal to
    access a "bic" (AKA an "icq") after bfq_exit_icq() had been called
    because the "bic" can be freed at some point in time after this call
    is made.  I confirmed that there certainly were cases where the exact
    crashing code path would access the "bic" after bfq_exit_icq() had
    been called.  Sspecifically I set the "bfqq->bic" to (void *)0x7 and
    saw that the bic was 0x7 at the time of the crash.
    
    To understand a bit more about why this crash was fairly uncommon (I
    saw it only once in a few hundred reboots), you can see that much of
    the time bfq_exit_icq_fbqq() fully frees the bfqq and thus it can't
    access the ->bic anymore.  The only case it doesn't is if
    bfq_put_queue() sees a reference still held.
    
    However, even in the case when bfqq isn't freed, the crash is still
    rare.  Why?  I tracked what happened to the "bic" after the exit
    routine.  It doesn't get freed right away.  Rather,
    put_io_context_active() eventually called put_io_context() which
    queued up freeing on a workqueue.  The freeing then actually happened
    later than that through call_rcu().  Despite all these delays, some
    extra debugging showed that all the hoops could be jumped through in
    time and the memory could be freed causing the original crash.  Phew!
    
    To make a long story short, assuming it truly is illegal to access an
    icq after the "exit_icq" callback is finished, this patch is needed.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Paolo Valente <paolo.valente@unimore.it>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit feb09b2933275a70917a869989ea2823e7356be8
Author: Christian Lamparter <chunkeey@gmail.com>
Date:   Sat Jun 8 16:49:47 2019 +0200

    carl9170: fix misuse of device driver API
    
    This patch follows Alan Stern's recent patch:
    "p54: Fix race between disconnect and firmware loading"
    
    that overhauled carl9170 buggy firmware loading and driver
    unbinding procedures.
    
    Since the carl9170 code was adapted from p54 it uses the
    same functions and is likely to have the same problem, but
    it's just that the syzbot hasn't reproduce them (yet).
    
    a summary from the changes (copied from the p54 patch):
     * Call usb_driver_release_interface() rather than
       device_release_driver().
    
     * Lock udev (the interface's parent) before unbinding the
       driver instead of locking udev->parent.
    
     * During the firmware loading process, take a reference
       to the USB interface instead of the USB device.
    
     * Don't take an unnecessary reference to the device during
       probe (and then don't drop it during disconnect).
    
    and
    
     * Make sure to prevent use-after-free bugs by explicitly
       setting the driver context to NULL after signaling the
       completion.
    
    Cc: <stable@vger.kernel.org>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit c666355e60ddb4748ead3bdd983e3f7f2224aaf0
Author: Luke Nowakowski-Krijger <lnowakow@eng.ucsd.edu>
Date:   Fri Jun 21 21:04:38 2019 -0400

    media: radio-raremono: change devm_k*alloc to k*alloc
    
    Change devm_k*alloc to k*alloc to manually allocate memory
    
    The manual allocation and freeing of memory is necessary because when
    the USB radio is disconnected, the memory associated with devm_k*alloc
    is freed. Meaning if we still have unresolved references to the radio
    device, then we get use-after-free errors.
    
    This patch fixes this by manually allocating memory, and freeing it in
    the v4l2.release callback that gets called when the last radio device
    exits.
    
    Reported-and-tested-by: syzbot+a4387f5b6b799f6becbf@syzkaller.appspotmail.com
    
    Signed-off-by: Luke Nowakowski-Krijger <lnowakow@eng.ucsd.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    [hverkuil-cisco@xs4all.nl: cleaned up two small checkpatch.pl warnings]
    [hverkuil-cisco@xs4all.nl: prefix subject with driver name]
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 5808b14a1f52554de612fee85ef517199855e310
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Tue Jun 4 14:50:14 2019 +0100

    fs/adfs: super: fix use-after-free bug
    
    Fix a use-after-free bug during filesystem initialisation, where we
    access the disc record (which is stored in a buffer) after we have
    released the buffer.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 21acee4ecf9c3d9eff545f50e79c321a0c35d9b3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 26 13:10:41 2019 +0300

    HID: intel-ish-hid: Fix a use after free in load_fw_from_host()
    
    We have to print the filename first before we can kfree it.
    
    Fixes: 91b228107da3 ("HID: intel-ish-hid: ISH firmware loader client driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 9db1aec0c2d72a3b7b115ba56e8dbb5b46855333
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri May 3 16:09:13 2019 +0300

    mt76: mt7615: Use after free in mt7615_mcu_set_bcn()
    
    We dereference "skb" when we assign:
    
            req.pkt_len = cpu_to_le16(MT_TXD_SIZE + skb->len);
                                                    ^^^^^^^^
    So this patch just moves the dev_kfree_skb() down a bit to avoid the
    use after free.
    
    Fixes: 04b8e65922f6 ("mt76: add mac80211 driver for MT7615 PCIe-based chipsets")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>

commit 08003d0b63a63bebaccca90e2f1d628dfd66cd4d
Author: Qian Cai <cai@lca.pw>
Date:   Thu Jun 20 10:52:40 2019 -0400

    inet: fix compilation warnings in fqdir_pre_exit()
    
    The linux-next commit "inet: fix various use-after-free in defrags
    units" [1] introduced compilation warnings,
    
    ./include/net/inet_frag.h:117:1: warning: 'inline' is not at beginning
    of declaration [-Wold-style-declaration]
     static void inline fqdir_pre_exit(struct fqdir *fqdir)
     ^~~~~~
    In file included from ./include/net/netns/ipv4.h:10,
                     from ./include/net/net_namespace.h:20,
                     from ./include/linux/netdevice.h:38,
                     from ./include/linux/icmpv6.h:13,
                     from ./include/linux/ipv6.h:86,
                     from ./include/net/ipv6.h:12,
                     from ./include/rdma/ib_verbs.h:51,
                     from ./include/linux/mlx5/device.h:37,
                     from ./include/linux/mlx5/driver.h:51,
                     from
    drivers/net/ethernet/mellanox/mlx5/core/pagealloc.c:37:
    
    [1] https://lore.kernel.org/netdev/20190618180900.88939-3-edumazet@google.com/
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      tcp: refine memory limit test in tcp_fragment()
      inet: clear num_timeout reqsk_alloc()
      net: mvpp2: debugfs: Add pmap to fs dump
      ipv6: Default fib6_type to RTN_UNICAST when not set
      net: hns3: Fix inconsistent indenting
      net/af_iucv: always register net_device notifier
      net/af_iucv: build proper skbs for HiperTransport
      net/af_iucv: remove GFP_DMA restriction for HiperTransport
      net: dsa: mv88e6xxx: fix shift of FID bits in mv88e6185_g1_vtu_loadpurge()
      hvsock: fix epollout hang from race condition
      net/udp_gso: Allow TX timestamp with UDP GSO
      net: netem: fix use after free and double free with packet corruption
      net: netem: fix backlog accounting for corrupted GSO frames
      net: lio_core: fix potential sign-extension overflow on large shift
      tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
      ip6_tunnel: allow not to count pkts on tstats by passing dev as NULL
      ip_tunnel: allow not to count pkts on tstats by setting skb's dev to NULL
      tun: wake up waitqueues after IFF_UP is set
      net: remove duplicate fetch in sock_getsockopt
      tipc: fix issues with early FAILOVER_MSG from peer
      ...

commit cf47a0b882a4e5f6b34c7949d7b293e9287f1972
Author: Julian Anastasov <ja@ssi.bg>
Date:   Tue Jun 4 21:56:35 2019 +0300

    ipvs: defer hook registration to avoid leaks
    
    syzkaller reports for memory leak when registering hooks [1]
    
    As we moved the nf_unregister_net_hooks() call into
    __ip_vs_dev_cleanup(), defer the nf_register_net_hooks()
    call, so that hooks are allocated and freed from same
    pernet_operations (ipvs_core_dev_ops).
    
    [1]
    BUG: memory leak
    unreferenced object 0xffff88810acd8a80 (size 96):
     comm "syz-executor073", pid 7254, jiffies 4294950560 (age 22.250s)
     hex dump (first 32 bytes):
       02 00 00 00 00 00 00 00 50 8b bb 82 ff ff ff ff  ........P.......
       00 00 00 00 00 00 00 00 00 77 bb 82 ff ff ff ff  .........w......
     backtrace:
       [<0000000013db61f1>] kmemleak_alloc_recursive include/linux/kmemleak.h:55 [inline]
       [<0000000013db61f1>] slab_post_alloc_hook mm/slab.h:439 [inline]
       [<0000000013db61f1>] slab_alloc_node mm/slab.c:3269 [inline]
       [<0000000013db61f1>] kmem_cache_alloc_node_trace+0x15b/0x2a0 mm/slab.c:3597
       [<000000001a27307d>] __do_kmalloc_node mm/slab.c:3619 [inline]
       [<000000001a27307d>] __kmalloc_node+0x38/0x50 mm/slab.c:3627
       [<0000000025054add>] kmalloc_node include/linux/slab.h:590 [inline]
       [<0000000025054add>] kvmalloc_node+0x4a/0xd0 mm/util.c:431
       [<0000000050d1bc00>] kvmalloc include/linux/mm.h:637 [inline]
       [<0000000050d1bc00>] kvzalloc include/linux/mm.h:645 [inline]
       [<0000000050d1bc00>] allocate_hook_entries_size+0x3b/0x60 net/netfilter/core.c:61
       [<00000000e8abe142>] nf_hook_entries_grow+0xae/0x270 net/netfilter/core.c:128
       [<000000004b94797c>] __nf_register_net_hook+0x9a/0x170 net/netfilter/core.c:337
       [<00000000d1545cbc>] nf_register_net_hook+0x34/0xc0 net/netfilter/core.c:464
       [<00000000876c9b55>] nf_register_net_hooks+0x53/0xc0 net/netfilter/core.c:480
       [<000000002ea868e0>] __ip_vs_init+0xe8/0x170 net/netfilter/ipvs/ip_vs_core.c:2280
       [<000000002eb2d451>] ops_init+0x4c/0x140 net/core/net_namespace.c:130
       [<000000000284ec48>] setup_net+0xde/0x230 net/core/net_namespace.c:316
       [<00000000a70600fa>] copy_net_ns+0xf0/0x1e0 net/core/net_namespace.c:439
       [<00000000ff26c15e>] create_new_namespaces+0x141/0x2a0 kernel/nsproxy.c:107
       [<00000000b103dc79>] copy_namespaces+0xa1/0xe0 kernel/nsproxy.c:165
       [<000000007cc008a2>] copy_process.part.0+0x11fd/0x2150 kernel/fork.c:2035
       [<00000000c344af7c>] copy_process kernel/fork.c:1800 [inline]
       [<00000000c344af7c>] _do_fork+0x121/0x4f0 kernel/fork.c:2369
    
    Reported-by: syzbot+722da59ccb264bc19910@syzkaller.appspotmail.com
    Fixes: 719c7d563c17 ("ipvs: Fix use-after-free in ip_vs_in")
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 240b4cc8fd5db138b675297d4226ec46594d9b3b
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 19 09:05:41 2019 +0200

    scsi: vmw_pscsi: Fix use-after-free in pvscsi_queue_lck()
    
    Once we unlock adapter->hw_lock in pvscsi_queue_lck() nothing prevents just
    queued scsi_cmnd from completing and freeing the request. Thus cmd->cmnd[0]
    dereference can dereference already freed request leading to kernel crashes
    or other issues (which one of our customers observed). Store cmd->cmnd[0]
    in a local variable before unlocking adapter->hw_lock to fix the issue.
    
    CC: <stable@vger.kernel.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ewan D. Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 7e6daf50e1f4ea0ecd56406beb64ffc66e1e94db
Author: Christian Brauner <christian@brauner.io>
Date:   Wed Jun 19 19:05:47 2019 +0200

    netfilter: bridge: prevent UAF in brnf_exit_net()
    
    Prevent a UAF in brnf_exit_net().
    
    When unregister_net_sysctl_table() is called the ctl_hdr pointer will
    obviously be freed and so accessing it righter after is invalid. Fix
    this by stashing a pointer to the table we want to free before we
    unregister the sysctl header.
    
    Note that syzkaller falsely chased this down to the drm tree so the
    Fixes tag that syzkaller requested would be wrong. This commit uses a
    different but the correct Fixes tag.
    
    /* Splat */
    
    BUG: KASAN: use-after-free in br_netfilter_sysctl_exit_net
    net/bridge/br_netfilter_hooks.c:1121 [inline]
    BUG: KASAN: use-after-free in brnf_exit_net+0x38c/0x3a0
    net/bridge/br_netfilter_hooks.c:1141
    Read of size 8 at addr ffff8880a4078d60 by task kworker/u4:4/8749
    
    CPU: 0 PID: 8749 Comm: kworker/u4:4 Not tainted 5.2.0-rc5-next-20190618 #17
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google
    01/01/2011
    Workqueue: netns cleanup_net
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0xd4/0x306 mm/kasan/report.c:351
     __kasan_report.cold+0x1b/0x36 mm/kasan/report.c:482
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     br_netfilter_sysctl_exit_net net/bridge/br_netfilter_hooks.c:1121 [inline]
     brnf_exit_net+0x38c/0x3a0 net/bridge/br_netfilter_hooks.c:1141
     ops_exit_list.isra.0+0xaa/0x150 net/core/net_namespace.c:154
     cleanup_net+0x3fb/0x960 net/core/net_namespace.c:553
     process_one_work+0x989/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x354/0x420 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Allocated by task 11374:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503
     __do_kmalloc mm/slab.c:3645 [inline]
     __kmalloc+0x15c/0x740 mm/slab.c:3654
     kmalloc include/linux/slab.h:552 [inline]
     kzalloc include/linux/slab.h:743 [inline]
     __register_sysctl_table+0xc7/0xef0 fs/proc/proc_sysctl.c:1327
     register_net_sysctl+0x29/0x30 net/sysctl_net.c:121
     br_netfilter_sysctl_init_net net/bridge/br_netfilter_hooks.c:1105 [inline]
     brnf_init_net+0x379/0x6a0 net/bridge/br_netfilter_hooks.c:1126
     ops_init+0xb3/0x410 net/core/net_namespace.c:130
     setup_net+0x2d3/0x740 net/core/net_namespace.c:316
     copy_net_ns+0x1df/0x340 net/core/net_namespace.c:439
     create_new_namespaces+0x400/0x7b0 kernel/nsproxy.c:103
     unshare_nsproxy_namespaces+0xc2/0x200 kernel/nsproxy.c:202
     ksys_unshare+0x444/0x980 kernel/fork.c:2822
     __do_sys_unshare kernel/fork.c:2890 [inline]
     __se_sys_unshare kernel/fork.c:2888 [inline]
     __x64_sys_unshare+0x31/0x40 kernel/fork.c:2888
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 9:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3417 [inline]
     kfree+0x10a/0x2c0 mm/slab.c:3746
     __rcu_reclaim kernel/rcu/rcu.h:215 [inline]
     rcu_do_batch kernel/rcu/tree.c:2092 [inline]
     invoke_rcu_callbacks kernel/rcu/tree.c:2310 [inline]
     rcu_core+0xcc7/0x1500 kernel/rcu/tree.c:2291
     __do_softirq+0x25c/0x94c kernel/softirq.c:292
    
    The buggy address belongs to the object at ffff8880a4078d40
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 32 bytes inside of
     512-byte region [ffff8880a4078d40, ffff8880a4078f40)
    The buggy address belongs to the page:
    page:ffffea0002901e00 refcount:1 mapcount:0 mapping:ffff8880aa400a80
    index:0xffff8880a40785c0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea0001d636c8 ffffea0001b07308 ffff8880aa400a80
    raw: ffff8880a40785c0 ffff8880a40780c0 0000000100000004 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880a4078c00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a4078c80: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    > ffff8880a4078d00: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                                           ^
     ffff8880a4078d80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a4078e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Reported-by: syzbot+43a3fa52c0d9c5c94f41@syzkaller.appspotmail.com
    Fixes: 22567590b2e6 ("netfilter: bridge: namespace bridge netfilter sysctls")
    Signed-off-by: Christian Brauner <christian@brauner.io>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit d5dd88794a13c2f24cce31abad7a0a6c5e0ed2db
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 18 11:09:00 2019 -0700

    inet: fix various use-after-free in defrags units
    
    syzbot reported another issue caused by my recent patches. [1]
    
    The issue here is that fqdir_exit() is initiating a work queue
    and immediately returns. A bit later cleanup_net() was able
    to free the MIB (percpu data) and the whole struct net was freed,
    but we had active frag timers that fired and triggered use-after-free.
    
    We need to make sure that timers can catch fqdir->dead being set,
    to bailout.
    
    Since RCU is used for the reader side, this means
    we want to respect an RCU grace period between these operations :
    
    1) qfdir->dead = 1;
    
    2) netns dismantle (freeing of various data structure)
    
    This patch uses new new (struct pernet_operations)->pre_exit
    infrastructure to ensures a full RCU grace period
    happens between fqdir_pre_exit() and fqdir_exit()
    
    This also means we can use a regular work queue, we no
    longer need rcu_work.
    
    Tested:
    
    $ time for i in {1..1000}; do unshare -n /bin/false;done
    
    real    0m2.585s
    user    0m0.160s
    sys     0m2.214s
    
    [1]
    
    BUG: KASAN: use-after-free in ip_expire+0x73e/0x800 net/ipv4/ip_fragment.c:152
    Read of size 8 at addr ffff88808b9fe330 by task syz-executor.4/11860
    
    CPU: 1 PID: 11860 Comm: syz-executor.4 Not tainted 5.2.0-rc2+ #22
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     ip_expire+0x73e/0x800 net/ipv4/ip_fragment.c:152
     call_timer_fn+0x193/0x720 kernel/time/timer.c:1322
     expire_timers kernel/time/timer.c:1366 [inline]
     __run_timers kernel/time/timer.c:1685 [inline]
     __run_timers kernel/time/timer.c:1653 [inline]
     run_timer_softirq+0x66f/0x1740 kernel/time/timer.c:1698
     __do_softirq+0x25c/0x94c kernel/softirq.c:293
     invoke_softirq kernel/softirq.c:374 [inline]
     irq_exit+0x180/0x1d0 kernel/softirq.c:414
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x13b/0x550 arch/x86/kernel/apic/apic.c:1068
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:806
     </IRQ>
    RIP: 0010:tomoyo_domain_quota_is_ok+0x131/0x540 security/tomoyo/util.c:1035
    Code: 24 4c 3b 65 d0 0f 84 9c 00 00 00 e8 19 1d 73 fe 49 8d 7c 24 18 48 ba 00 00 00 00 00 fc ff df 48 89 f8 48 c1 e8 03 0f b6 04 10 <48> 89 fa 83 e2 07 38 d0 7f 08 84 c0 0f 85 69 03 00 00 41 0f b6 5c
    RSP: 0018:ffff88806ae079c0 EFLAGS: 00000a02 ORIG_RAX: ffffffffffffff13
    RAX: 0000000000000000 RBX: 0000000000000010 RCX: ffffc9000e655000
    RDX: dffffc0000000000 RSI: ffffffff82fd88a7 RDI: ffff888086202398
    RBP: ffff88806ae07a00 R08: ffff88808b6c8700 R09: ffffed100d5c0f4d
    R10: ffffed100d5c0f4c R11: 0000000000000000 R12: ffff888086202380
    R13: 0000000000000030 R14: 00000000000000d3 R15: 0000000000000000
     tomoyo_supervisor+0x2e8/0xef0 security/tomoyo/common.c:2087
     tomoyo_audit_path_number_log security/tomoyo/file.c:235 [inline]
     tomoyo_path_number_perm+0x42f/0x520 security/tomoyo/file.c:734
     tomoyo_file_ioctl+0x23/0x30 security/tomoyo/tomoyo.c:335
     security_file_ioctl+0x77/0xc0 security/security.c:1370
     ksys_ioctl+0x57/0xd0 fs/ioctl.c:711
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4592c9
    Code: fd b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f8db5e44c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00000000004592c9
    RDX: 0000000020000080 RSI: 00000000000089f1 RDI: 0000000000000006
    RBP: 000000000075bf20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f8db5e456d4
    R13: 00000000004cc770 R14: 00000000004d5cd8 R15: 00000000ffffffff
    
    Allocated by task 9047:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:497
     slab_post_alloc_hook mm/slab.h:437 [inline]
     slab_alloc mm/slab.c:3326 [inline]
     kmem_cache_alloc+0x11a/0x6f0 mm/slab.c:3488
     kmem_cache_zalloc include/linux/slab.h:732 [inline]
     net_alloc net/core/net_namespace.c:386 [inline]
     copy_net_ns+0xed/0x340 net/core/net_namespace.c:426
     create_new_namespaces+0x400/0x7b0 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xc2/0x200 kernel/nsproxy.c:206
     ksys_unshare+0x440/0x980 kernel/fork.c:2692
     __do_sys_unshare kernel/fork.c:2760 [inline]
     __se_sys_unshare kernel/fork.c:2758 [inline]
     __x64_sys_unshare+0x31/0x40 kernel/fork.c:2758
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 2541:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kmem_cache_free+0x86/0x260 mm/slab.c:3698
     net_free net/core/net_namespace.c:402 [inline]
     net_drop_ns.part.0+0x70/0x90 net/core/net_namespace.c:409
     net_drop_ns net/core/net_namespace.c:408 [inline]
     cleanup_net+0x538/0x960 net/core/net_namespace.c:571
     process_one_work+0x989/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x354/0x420 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    The buggy address belongs to the object at ffff88808b9fe100
     which belongs to the cache net_namespace of size 6784
    The buggy address is located 560 bytes inside of
     6784-byte region [ffff88808b9fe100, ffff88808b9ffb80)
    The buggy address belongs to the page:
    page:ffffea00022e7f80 refcount:1 mapcount:0 mapping:ffff88821b6f60c0 index:0x0 compound_mapcount: 0
    flags: 0x1fffc0000010200(slab|head)
    raw: 01fffc0000010200 ffffea000256f288 ffffea0001bbef08 ffff88821b6f60c0
    raw: 0000000000000000 ffff88808b9fe100 0000000100000001 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88808b9fe200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88808b9fe280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88808b9fe300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                         ^
     ffff88808b9fe380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88808b9fe400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 3c8fc8782044 ("inet: frags: rework rhashtable dismantle")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3e14c383de349a86895b8c6c410b9222646574f6
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Mon Jun 17 11:11:11 2019 -0700

    net: netem: fix use after free and double free with packet corruption
    
    Brendan reports that the use of netem's packet corruption capability
    leads to strange crashes.  This seems to be caused by
    commit d66280b12bd7 ("net: netem: use a list in addition to rbtree")
    which uses skb->next pointer to construct a fast-path queue of
    in-order skbs.
    
    Packet corruption code has to invoke skb_gso_segment() in case
    of skbs in need of GSO.  skb_gso_segment() returns a list of
    skbs.  If next pointers of the skbs on that list do not get cleared
    fast path list may point to freed skbs or skbs which are also on
    the RB tree.
    
    Let's say skb gets segmented into 3 frames:
    
    A -> B -> C
    
    A gets hooked to the t_head t_tail list by tfifo_enqueue(), but it's
    next pointer didn't get cleared so we have:
    
    h t
    |/
    A -> B -> C
    
    Now if B and C get also get enqueued successfully all is fine, because
    tfifo_enqueue() will overwrite the list in order.  IOW:
    
    Enqueue B:
    
    h    t
    |    |
    A -> B    C
    
    Enqueue C:
    
    h         t
    |         |
    A -> B -> C
    
    But if B and C get reordered we may end up with:
    
    h t            RB tree
    |/                |
    A -> B -> C       B
                       \
                        C
    
    Or if they get dropped just:
    
    h t
    |/
    A -> B -> C
    
    where A and B are already freed.
    
    To reproduce either limit has to be set low to cause freeing of
    segs or reorders have to happen (due to delay jitter).
    
    Note that we only have to mark the first segment as not on the
    list, "finish_segs" handling of other frags already does that.
    
    Another caveat is that qdisc_drop_all() still has to free all
    segments correctly in case of drop of first segment, therefore
    we re-link segs before calling it.
    
    v2:
     - re-link before drop, v1 was leaking non-first segs if limit
       was hit at the first seg
     - better commit message which lead to discovering the above :)
    
    Reported-by: Brendan Galloway <brendan.galloway@netronome.com>
    Fixes: d66280b12bd7 ("net: netem: use a list in addition to rbtree")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 51d23fb28ccb355ee4d26dedacca24c171c2f664
Author: James Smart <jsmart2021@gmail.com>
Date:   Tue May 21 17:48:59 2019 -0700

    scsi: lpfc: Prevent 'use after free' memory overwrite in nvmet LS handling
    
    Use-after-free memory overwrite detected. Problem reported
    by Ewan Milne at Red Hat after running lpfc target with additional
    memory checking enabled.
    
    Race condition when lpfc_nvmet_xmt_ls_rsp_cmp frees the ctxp
    memory in interrupt context before lpfc_nvmet_xmt_ls_rsp
    clears a field in the ctxp after successfully issuing the wqe.
    
    Remove the unnecessary ctxp write after reposting the rq buffer. The
    ctxp->rqb_buffer field is not checked in LS handling after the wqe
    is submitted.
    
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Reported-by: Ewan Milne <emilne@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commits)
      lapb: fixed leak of control-blocks.
      tipc: purge deferredq list for each grp member in tipc_group_delete
      ax25: fix inconsistent lock state in ax25_destroy_timer
      neigh: fix use-after-free read in pneigh_get_next
      tcp: fix compile error if !CONFIG_SYSCTL
      hv_sock: Suppress bogus "may be used uninitialized" warnings
      be2net: Fix number of Rx queues used for flow hashing
      net: handle 802.1P vlan 0 packets properly
      tcp: enforce tcp_min_snd_mss in tcp_mtu_probing()
      tcp: add tcp_min_snd_mss sysctl
      tcp: tcp_fragment() should apply sane memory limits
      tcp: limit payload size of sacked skbs
      Revert "net: phylink: set the autoneg state in phylink_phy_change"
      bpf: fix nested bpf tracepoints with per-cpu data
      bpf: Fix out of bounds memory access in bpf_sk_storage
      vsock/virtio: set SOCK_DONE on peer shutdown
      net: dsa: rtl8366: Fix up VLAN filtering
      net: phylink: set the autoneg state in phylink_phy_change
      net: add high_order_alloc_disable sysctl/static key
      tcp: add tcp_tx_skb_cache sysctl
      ...

commit f3e92cb8e2eb8c27d109e6fd73d3a69a8c09e288
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 15 16:28:48 2019 -0700

    neigh: fix use-after-free read in pneigh_get_next
    
    Nine years ago, I added RCU handling to neighbours, not pneighbours.
    (pneigh are not commonly used)
    
    Unfortunately I missed that /proc dump operations would use a
    common entry and exit point : neigh_seq_start() and neigh_seq_stop()
    
    We need to read_lock(tbl->lock) or risk use-after-free while
    iterating the pneigh structures.
    
    We might later convert pneigh to RCU and revert this patch.
    
    sysbot reported :
    
    BUG: KASAN: use-after-free in pneigh_get_next.isra.0+0x24b/0x280 net/core/neighbour.c:3158
    Read of size 8 at addr ffff888097f2a700 by task syz-executor.0/9825
    
    CPU: 1 PID: 9825 Comm: syz-executor.0 Not tainted 5.2.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     pneigh_get_next.isra.0+0x24b/0x280 net/core/neighbour.c:3158
     neigh_seq_next+0xdb/0x210 net/core/neighbour.c:3240
     seq_read+0x9cf/0x1110 fs/seq_file.c:258
     proc_reg_read+0x1fc/0x2c0 fs/proc/inode.c:221
     do_loop_readv_writev fs/read_write.c:714 [inline]
     do_loop_readv_writev fs/read_write.c:701 [inline]
     do_iter_read+0x4a4/0x660 fs/read_write.c:935
     vfs_readv+0xf0/0x160 fs/read_write.c:997
     kernel_readv fs/splice.c:359 [inline]
     default_file_splice_read+0x475/0x890 fs/splice.c:414
     do_splice_to+0x127/0x180 fs/splice.c:877
     splice_direct_to_actor+0x2d2/0x970 fs/splice.c:954
     do_splice_direct+0x1da/0x2a0 fs/splice.c:1063
     do_sendfile+0x597/0xd00 fs/read_write.c:1464
     __do_sys_sendfile64 fs/read_write.c:1525 [inline]
     __se_sys_sendfile64 fs/read_write.c:1511 [inline]
     __x64_sys_sendfile64+0x1dd/0x220 fs/read_write.c:1511
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4592c9
    Code: fd b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f4aab51dc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000028
    RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 00000000004592c9
    RDX: 0000000000000000 RSI: 0000000000000004 RDI: 0000000000000005
    RBP: 000000000075bf20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000080000000 R11: 0000000000000246 R12: 00007f4aab51e6d4
    R13: 00000000004c689d R14: 00000000004db828 R15: 00000000ffffffff
    
    Allocated by task 9827:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503
     __do_kmalloc mm/slab.c:3660 [inline]
     __kmalloc+0x15c/0x740 mm/slab.c:3669
     kmalloc include/linux/slab.h:552 [inline]
     pneigh_lookup+0x19c/0x4a0 net/core/neighbour.c:731
     arp_req_set_public net/ipv4/arp.c:1010 [inline]
     arp_req_set+0x613/0x720 net/ipv4/arp.c:1026
     arp_ioctl+0x652/0x7f0 net/ipv4/arp.c:1226
     inet_ioctl+0x2a0/0x340 net/ipv4/af_inet.c:926
     sock_do_ioctl+0xd8/0x2f0 net/socket.c:1043
     sock_ioctl+0x3ed/0x780 net/socket.c:1194
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0xd5f/0x1380 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 9824:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kfree+0xcf/0x220 mm/slab.c:3755
     pneigh_ifdown_and_unlock net/core/neighbour.c:812 [inline]
     __neigh_ifdown+0x236/0x2f0 net/core/neighbour.c:356
     neigh_ifdown+0x20/0x30 net/core/neighbour.c:372
     arp_ifdown+0x1d/0x21 net/ipv4/arp.c:1274
     inetdev_destroy net/ipv4/devinet.c:319 [inline]
     inetdev_event+0xa14/0x11f0 net/ipv4/devinet.c:1544
     notifier_call_chain+0xc2/0x230 kernel/notifier.c:95
     __raw_notifier_call_chain kernel/notifier.c:396 [inline]
     raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:403
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1749
     call_netdevice_notifiers_extack net/core/dev.c:1761 [inline]
     call_netdevice_notifiers net/core/dev.c:1775 [inline]
     rollback_registered_many+0x9b9/0xfc0 net/core/dev.c:8178
     rollback_registered+0x109/0x1d0 net/core/dev.c:8220
     unregister_netdevice_queue net/core/dev.c:9267 [inline]
     unregister_netdevice_queue+0x1ee/0x2c0 net/core/dev.c:9260
     unregister_netdevice include/linux/netdevice.h:2631 [inline]
     __tun_detach+0xd8a/0x1040 drivers/net/tun.c:724
     tun_detach drivers/net/tun.c:741 [inline]
     tun_chr_close+0xe0/0x180 drivers/net/tun.c:3451
     __fput+0x2ff/0x890 fs/file_table.c:280
     ____fput+0x16/0x20 fs/file_table.c:313
     task_work_run+0x145/0x1c0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:185 [inline]
     exit_to_usermode_loop+0x273/0x2c0 arch/x86/entry/common.c:168
     prepare_exit_to_usermode arch/x86/entry/common.c:199 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:279 [inline]
     do_syscall_64+0x58e/0x680 arch/x86/entry/common.c:304
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888097f2a700
     which belongs to the cache kmalloc-64 of size 64
    The buggy address is located 0 bytes inside of
     64-byte region [ffff888097f2a700, ffff888097f2a740)
    The buggy address belongs to the page:
    page:ffffea00025fca80 refcount:1 mapcount:0 mapping:ffff8880aa400340 index:0x0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea000250d548 ffffea00025726c8 ffff8880aa400340
    raw: 0000000000000000 ffff888097f2a000 0000000100000020 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888097f2a600: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
     ffff888097f2a680: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff888097f2a700: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
                       ^
     ffff888097f2a780: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff888097f2a800: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    
    Fixes: 767e97e1e0db ("neigh: RCU conversion of struct neighbour")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit becf33f694dc50656766e0fde8883437d5c8d4b4
Author: Eiichi Tsukata <devel@etsukata.com>
Date:   Mon Jun 10 13:00:16 2019 +0900

    tracing: Fix out-of-range read in trace_stack_print()
    
    Puts range check before dereferencing the pointer.
    
    Reproducer:
    
      # echo stacktrace > trace_options
      # echo 1 > events/enable
      # cat trace > /dev/null
    
    KASAN report:
    
      ==================================================================
      BUG: KASAN: use-after-free in trace_stack_print+0x26b/0x2c0
      Read of size 8 at addr ffff888069d20000 by task cat/1953
    
      CPU: 0 PID: 1953 Comm: cat Not tainted 5.2.0-rc3+ #5
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-2.fc30 04/01/2014
      Call Trace:
       dump_stack+0x8a/0xce
       print_address_description+0x60/0x224
       ? trace_stack_print+0x26b/0x2c0
       ? trace_stack_print+0x26b/0x2c0
       __kasan_report.cold+0x1a/0x3e
       ? trace_stack_print+0x26b/0x2c0
       kasan_report+0xe/0x20
       trace_stack_print+0x26b/0x2c0
       print_trace_line+0x6ea/0x14d0
       ? tracing_buffers_read+0x700/0x700
       ? trace_find_next_entry_inc+0x158/0x1d0
       s_show+0xea/0x310
       seq_read+0xaa7/0x10e0
       ? seq_escape+0x230/0x230
       __vfs_read+0x7c/0x100
       vfs_read+0x16c/0x3a0
       ksys_read+0x121/0x240
       ? kernel_write+0x110/0x110
       ? perf_trace_sys_enter+0x8a0/0x8a0
       ? syscall_slow_exit_work+0xa9/0x410
       do_syscall_64+0xb7/0x390
       ? prepare_exit_to_usermode+0x165/0x200
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f867681f910
      Code: b6 fe ff ff 48 8d 3d 0f be 08 00 48 83 ec 08 e8 06 db 01 00 66 0f 1f 44 00 00 83 3d f9 2d 2c 00 00 75 10 b8 00 00 00 00 04
      RSP: 002b:00007ffdabf23488 EFLAGS: 00000246 ORIG_RAX: 0000000000000000
      RAX: ffffffffffffffda RBX: 0000000000020000 RCX: 00007f867681f910
      RDX: 0000000000020000 RSI: 00007f8676cde000 RDI: 0000000000000003
      RBP: 00007f8676cde000 R08: ffffffffffffffff R09: 0000000000000000
      R10: 0000000000000871 R11: 0000000000000246 R12: 00007f8676cde000
      R13: 0000000000000003 R14: 0000000000020000 R15: 0000000000000ec0
    
      Allocated by task 1214:
       save_stack+0x1b/0x80
       __kasan_kmalloc.constprop.0+0xc2/0xd0
       kmem_cache_alloc+0xaf/0x1a0
       getname_flags+0xd2/0x5b0
       do_sys_open+0x277/0x5a0
       do_syscall_64+0xb7/0x390
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Freed by task 1214:
       save_stack+0x1b/0x80
       __kasan_slab_free+0x12c/0x170
       kmem_cache_free+0x8a/0x1c0
       putname+0xe1/0x120
       do_sys_open+0x2c5/0x5a0
       do_syscall_64+0xb7/0x390
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      The buggy address belongs to the object at ffff888069d20000
       which belongs to the cache names_cache of size 4096
      The buggy address is located 0 bytes inside of
       4096-byte region [ffff888069d20000, ffff888069d21000)
      The buggy address belongs to the page:
      page:ffffea0001a74800 refcount:1 mapcount:0 mapping:ffff88806ccd1380 index:0x0 compound_mapcount: 0
      flags: 0x100000000010200(slab|head)
      raw: 0100000000010200 dead000000000100 dead000000000200 ffff88806ccd1380
      raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff888069d1ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ffff888069d1ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      >ffff888069d20000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                         ^
       ffff888069d20080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
       ffff888069d20100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ==================================================================
    
    Link: http://lkml.kernel.org/r/20190610040016.5598-1-devel@etsukata.com
    
    Fixes: 4285f2fcef80 ("tracing: Remove the ULONG_MAX stack trace hackery")
    Signed-off-by: Eiichi Tsukata <devel@etsukata.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commit 5e3fb2a5b528bbb6090bea3f345eb72d8c8b808d
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Jun 13 13:28:42 2019 +0100

    drm/i915: Enable refcount debugging for default debug levels
    
    refcount_t is our first line of defence against use-after-free, so let's
    enable it for debugging.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Acked-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190613122842.4840-1-chris@chris-wilson.co.uk

commit 0ff2b018b02f89da26a616e0148582321a00fd99
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Wed Jun 5 10:15:34 2019 +1000

    cifs: fix panic in smb2_reconnect
    
    RH Bugzilla: 1702264
    
    We need to protect so that the call to smb2_reconnect() in
    smb2_reconnect_server() does not end up freeing the session
    because it can lead to a use after free and crash.
    
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>

commit 0bfcd24b39c29dbaba81a188ca364563866e6ecc
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Thu May 23 16:41:52 2019 +0000

    platform/mellanox: mlxreg-hotplug: Add devm_free_irq call to remove flow
    
    Add devm_free_irq() call to mlxreg-hotplug remove() for clean release
    of devices irq resource. Fix debugobjects warning triggered by rmmod
    It prevents of use-after-free memory, related to
    mlxreg_hotplug_work_handler.
    
    Issue has been reported as debugobjects warning triggered by
    'rmmod mlxtreg-hotplug' flow, while running kernel with
    CONFIG_DEBUG_OBJECTS* options.
    
    [ 2489.623551] ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler+0x0/0x7f0 [mlxreg_hotplug]
    [ 2489.637097] WARNING: CPU: 5 PID: 3924 at lib/debugobjects.c:328 debug_print_object+0xfe/0x180
    [ 2489.637165] RIP: 0010:debug_print_object+0xfe/0x180
    ?
    [ 2489.637214] Call Trace:
    [ 2489.637225]  __debug_check_no_obj_freed+0x25e/0x320
    [ 2489.637231]  kfree+0x82/0x110
    [ 2489.637238]  release_nodes+0x33c/0x4e0
    [ 2489.637242]  ? devres_remove_group+0x1b0/0x1b0
    [ 2489.637247]  device_release_driver_internal+0x146/0x270
    [ 2489.637251]  driver_detach+0x73/0xe0
    [ 2489.637254]  bus_remove_driver+0xa1/0x170
    [ 2489.637261]  __x64_sys_delete_module+0x29e/0x320
    [ 2489.637265]  ? __ia32_sys_delete_module+0x320/0x320
    [ 2489.637268]  ? blkcg_exit_queue+0x20/0x20
    [ 2489.637273]  ? task_work_run+0x7d/0x100
    [ 2489.637278]  ? exit_to_usermode_loop+0x5b/0xf0
    [ 2489.637281]  do_syscall_64+0x73/0x160
    [ 2489.637287]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 2489.637290] RIP: 0033:0x7f95c3596fd7
    
    The difference in release flow with and with no devm_free_irq is listed
    below:
    
    bus: 'platform': remove driver mlxreg-hotplug
     mlxreg_hotplug_remove(start)
                                            -> devm_free_irq (with new code)
     mlxreg_hotplug_remove (end)
     release_nodes (start)
      mlxreg-hotplug: DEVRES REL devm_hwmon_release (8 bytes)
      device: 'hwmon3': device_unregister
      PM: Removing info for No Bus:hwmon3
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (88 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (6 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_irq_release (16 bytes) (no new code)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (1376 bytes)
       ------------[ cut here ]------------ (no new code):
       ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler
    
     release_nodes(end)
    driver: 'mlxreg-hotplug': driver_release
    
    Fixes: 1f976f6978bf ("platform/x86: Move Mellanox platform hotplug driver to platform/mellanox")
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

commit 8c2eb7b6468ad4aa5600aed01aa0715f921a3f8b
Author: Vadim Pasternak <vadimp@mellanox.com>
Date:   Thu May 23 16:41:52 2019 +0000

    platform/mellanox: mlxreg-hotplug: Add devm_free_irq call to remove flow
    
    Add devm_free_irq() call to mlxreg-hotplug remove() for clean release
    of devices irq resource. Fix debugobjects warning triggered by rmmod
    It prevents of use-after-free memory, related to
    mlxreg_hotplug_work_handler.
    
    Issue has been reported as debugobjects warning triggered by
    'rmmod mlxtreg-hotplug' flow, while running kernel with
    CONFIG_DEBUG_OBJECTS* options.
    
    [ 2489.623551] ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler+0x0/0x7f0 [mlxreg_hotplug]
    [ 2489.637097] WARNING: CPU: 5 PID: 3924 at lib/debugobjects.c:328 debug_print_object+0xfe/0x180
    [ 2489.637165] RIP: 0010:debug_print_object+0xfe/0x180
    ?
    [ 2489.637214] Call Trace:
    [ 2489.637225]  __debug_check_no_obj_freed+0x25e/0x320
    [ 2489.637231]  kfree+0x82/0x110
    [ 2489.637238]  release_nodes+0x33c/0x4e0
    [ 2489.637242]  ? devres_remove_group+0x1b0/0x1b0
    [ 2489.637247]  device_release_driver_internal+0x146/0x270
    [ 2489.637251]  driver_detach+0x73/0xe0
    [ 2489.637254]  bus_remove_driver+0xa1/0x170
    [ 2489.637261]  __x64_sys_delete_module+0x29e/0x320
    [ 2489.637265]  ? __ia32_sys_delete_module+0x320/0x320
    [ 2489.637268]  ? blkcg_exit_queue+0x20/0x20
    [ 2489.637273]  ? task_work_run+0x7d/0x100
    [ 2489.637278]  ? exit_to_usermode_loop+0x5b/0xf0
    [ 2489.637281]  do_syscall_64+0x73/0x160
    [ 2489.637287]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 2489.637290] RIP: 0033:0x7f95c3596fd7
    
    The difference in release flow with and with no devm_free_irq is listed
    below:
    
    bus: 'platform': remove driver mlxreg-hotplug
     mlxreg_hotplug_remove(start)
                                            -> devm_free_irq (with new code)
     mlxreg_hotplug_remove (end)
     release_nodes (start)
      mlxreg-hotplug: DEVRES REL devm_hwmon_release (8 bytes)
      device: 'hwmon3': device_unregister
      PM: Removing info for No Bus:hwmon3
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (88 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (6 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (5 bytes)
      mlxreg-hotplug: DEVRES REL devm_irq_release (16 bytes) (no new code)
      mlxreg-hotplug: DEVRES REL devm_kzalloc_release (1376 bytes)
       ------------[ cut here ]------------ (no new code):
       ODEBUG: free active (active state 0) object type: work_struct hint: mlxreg_hotplug_work_handler
    
     release_nodes(end)
    driver: 'mlxreg-hotplug': driver_release
    
    Fixes: 1f976f6978bf ("platform/x86: Move Mellanox platform hotplug driver to platform/mellanox")
    Signed-off-by: Vadim Pasternak <vadimp@mellanox.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

commits)
      Linux 5.2-rc4
      MAINTAINERS: Karthikeyan Ramasubramanian is MIA
      i2c: xiic: Add max_read_len quirk
      lockref: Limit number of cmpxchg loop retries
      uaccess: add noop untagged_addr definition
      x86/insn-eval: Fix use-after-free access to LDT entry
      kbuild: use more portable 'command -v' for cc-cross-prefix
      s390/unwind: correct stack switching during unwind
      block, bfq: add weight symlink to the bfq.weight cgroup parameter
      cgroup: let a symlink too be created with a cftype file
      drm/nouveau/secboot/gp10[2467]: support newer FW to fix SEC2 failures on some boards
      drm/nouveau/secboot: enable loading of versioned LS PMU/SEC2 ACR msgqueue FW
      drm/nouveau/secboot: split out FW version-specific LS function pointers
      drm/nouveau/secboot: pass max supported FW version to LS load funcs
      drm/nouveau/core: support versioned firmware loading
      drm/nouveau/core: pass subdev into nvkm_firmware_get, rather than device
      block: free sched's request pool in blk_cleanup_queue
      pktgen: do not sleep with the thread lock held.
      net: mvpp2: Use strscpy to handle stat strings
      net: rds: fix memory leak in rds_ib_flush_mr_pool
      ...
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit de9f869616dd95e95c00bdd6b0fcd3421e8a4323
Author: Jann Horn <jannh@google.com>
Date:   Sun Jun 2 03:15:58 2019 +0200

    x86/insn-eval: Fix use-after-free access to LDT entry
    
    get_desc() computes a pointer into the LDT while holding a lock that
    protects the LDT from being freed, but then drops the lock and returns the
    (now potentially dangling) pointer to its caller.
    
    Fix it by giving the caller a copy of the LDT entry instead.
    
    Fixes: 670f928ba09b ("x86/insn-eval: Add utility function to get segment descriptor")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6d7c3cde93c1d9ac0b37f78ec3f2ff052159a242
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Wed May 22 16:52:52 2019 -0300

    mm/hmm: fix use after free with struct hmm in the mmu notifiers
    
    mmu_notifier_unregister_no_release() is not a fence and the mmu_notifier
    system will continue to reference hmm->mn until the srcu grace period
    expires.
    
    Resulting in use after free races like this:
    
             CPU0                                     CPU1
                                                   __mmu_notifier_invalidate_range_start()
                                                     srcu_read_lock
                                                     hlist_for_each ()
                                                       // mn == hmm->mn
    hmm_mirror_unregister()
      hmm_put()
        hmm_free()
          mmu_notifier_unregister_no_release()
             hlist_del_init_rcu(hmm-mn->list)
                                                       mn->ops->invalidate_range_start(mn, range);
                                                         mm_get_hmm()
          mm->hmm = NULL;
          kfree(hmm)
                                                         mutex_lock(&hmm->lock);
    
    Use SRCU to kfree the hmm memory so that the notifiers can rely on hmm
    existing. Get the now-safe hmm struct through container_of and directly
    check kref_get_unless_zero to lock it against free.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Philip Yang <Philip.Yang@amd.com>

commit 15b3cd8ef46ad1b100e0d3c7e38774f330726820
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Tue Jun 4 19:00:39 2019 +0100

    Revert "consolemap: Fix a memory leaking bug in drivers/tty/vt/consolemap.c"
    
    This reverts commit 84ecc2f6eb1cb12e6d44818f94fa49b50f06e6ac.
    
    con_insert_unipair() is working with a sparse 3-dimensional array:
    
    - p->uni_pgdir[] is the top layer
    - p1 points to a middle layer
    - p2 points to a bottom layer
    
    If it needs to allocate a new middle layer, and then fails to allocate
    a new bottom layer, it would previously free only p2, and now it frees
    both p1 and p2.  But since the new middle layer was already registered
    in the top layer, it was not leaked.
    
    However, if it looks up an *existing* middle layer and then fails to
    allocate a bottom layer, it now frees both p1 and p2 but does *not*
    free any other bottom layers under p1.  So it *introduces* a memory
    leak.
    
    The error path also cleared the wrong index in p->uni_pgdir[],
    introducing a use-after-free.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Fixes: 84ecc2f6eb1c ("consolemap: Fix a memory leaking bug in drivers/tty/vt/consolemap.c")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 594a81b39525f0a17e92c2e0b167ae1400650380
Author: Weihang Li <liweihang@hisilicon.com>
Date:   Mon Jun 3 10:09:18 2019 +0800

    net: hns3: set ops to null when unregister ad_dev
    
    The hclge/hclgevf and hns3 module can be unloaded independently,
    when hclge/hclgevf unloaded firstly, the ops of ae_dev should
    be set to NULL, otherwise it will cause an use-after-free problem.
    
    Fixes: 38caee9d3ee8 ("net: hns3: Add support of the HNAE3 framework")
    Signed-off-by: Weihang Li <liweihang@hisilicon.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7034146756b9e91cc059b19df7fe4defd4d7de7
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Jun 2 11:24:18 2019 -0700

    net: fix use-after-free in kfree_skb_list
    
    syzbot reported nasty use-after-free [1]
    
    Lets remove frag_list field from structs ip_fraglist_iter
    and ip6_fraglist_iter. This seens not needed anyway.
    
    [1] :
    BUG: KASAN: use-after-free in kfree_skb_list+0x5d/0x60 net/core/skbuff.c:706
    Read of size 8 at addr ffff888085a3cbc0 by task syz-executor303/8947
    
    CPU: 0 PID: 8947 Comm: syz-executor303 Not tainted 5.2.0-rc2+ #12
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     kfree_skb_list+0x5d/0x60 net/core/skbuff.c:706
     ip6_fragment+0x1ef4/0x2680 net/ipv6/ip6_output.c:882
     __ip6_finish_output+0x577/0xaa0 net/ipv6/ip6_output.c:144
     ip6_finish_output+0x38/0x1f0 net/ipv6/ip6_output.c:156
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip6_output+0x235/0x7f0 net/ipv6/ip6_output.c:179
     dst_output include/net/dst.h:433 [inline]
     ip6_local_out+0xbb/0x1b0 net/ipv6/output_core.c:179
     ip6_send_skb+0xbb/0x350 net/ipv6/ip6_output.c:1796
     ip6_push_pending_frames+0xc8/0xf0 net/ipv6/ip6_output.c:1816
     rawv6_push_pending_frames net/ipv6/raw.c:617 [inline]
     rawv6_sendmsg+0x2993/0x35e0 net/ipv6/raw.c:947
     inet_sendmsg+0x141/0x5d0 net/ipv4/af_inet.c:802
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:671
     ___sys_sendmsg+0x803/0x920 net/socket.c:2292
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2330
     __do_sys_sendmsg net/socket.c:2339 [inline]
     __se_sys_sendmsg net/socket.c:2337 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2337
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x44add9
    Code: e8 7c e6 ff ff 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 1b 05 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f826f33bce8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000006e7a18 RCX: 000000000044add9
    RDX: 0000000000000000 RSI: 0000000020000240 RDI: 0000000000000005
    RBP: 00000000006e7a10 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000006e7a1c
    R13: 00007ffcec4f7ebf R14: 00007f826f33c9c0 R15: 20c49ba5e353f7cf
    
    Allocated by task 8947:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:497
     slab_post_alloc_hook mm/slab.h:437 [inline]
     slab_alloc_node mm/slab.c:3269 [inline]
     kmem_cache_alloc_node+0x131/0x710 mm/slab.c:3579
     __alloc_skb+0xd5/0x5e0 net/core/skbuff.c:199
     alloc_skb include/linux/skbuff.h:1058 [inline]
     __ip6_append_data.isra.0+0x2a24/0x3640 net/ipv6/ip6_output.c:1519
     ip6_append_data+0x1e5/0x320 net/ipv6/ip6_output.c:1688
     rawv6_sendmsg+0x1467/0x35e0 net/ipv6/raw.c:940
     inet_sendmsg+0x141/0x5d0 net/ipv4/af_inet.c:802
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:671
     ___sys_sendmsg+0x803/0x920 net/socket.c:2292
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2330
     __do_sys_sendmsg net/socket.c:2339 [inline]
     __se_sys_sendmsg net/socket.c:2337 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2337
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 8947:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kmem_cache_free+0x86/0x260 mm/slab.c:3698
     kfree_skbmem net/core/skbuff.c:625 [inline]
     kfree_skbmem+0xc5/0x150 net/core/skbuff.c:619
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb net/core/skbuff.c:699 [inline]
     kfree_skb+0xf0/0x390 net/core/skbuff.c:693
     kfree_skb_list+0x44/0x60 net/core/skbuff.c:708
     __dev_xmit_skb net/core/dev.c:3551 [inline]
     __dev_queue_xmit+0x3034/0x36b0 net/core/dev.c:3850
     dev_queue_xmit+0x18/0x20 net/core/dev.c:3914
     neigh_direct_output+0x16/0x20 net/core/neighbour.c:1532
     neigh_output include/net/neighbour.h:511 [inline]
     ip6_finish_output2+0x1034/0x2550 net/ipv6/ip6_output.c:120
     ip6_fragment+0x1ebb/0x2680 net/ipv6/ip6_output.c:863
     __ip6_finish_output+0x577/0xaa0 net/ipv6/ip6_output.c:144
     ip6_finish_output+0x38/0x1f0 net/ipv6/ip6_output.c:156
     NF_HOOK_COND include/linux/netfilter.h:294 [inline]
     ip6_output+0x235/0x7f0 net/ipv6/ip6_output.c:179
     dst_output include/net/dst.h:433 [inline]
     ip6_local_out+0xbb/0x1b0 net/ipv6/output_core.c:179
     ip6_send_skb+0xbb/0x350 net/ipv6/ip6_output.c:1796
     ip6_push_pending_frames+0xc8/0xf0 net/ipv6/ip6_output.c:1816
     rawv6_push_pending_frames net/ipv6/raw.c:617 [inline]
     rawv6_sendmsg+0x2993/0x35e0 net/ipv6/raw.c:947
     inet_sendmsg+0x141/0x5d0 net/ipv4/af_inet.c:802
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xd7/0x130 net/socket.c:671
     ___sys_sendmsg+0x803/0x920 net/socket.c:2292
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2330
     __do_sys_sendmsg net/socket.c:2339 [inline]
     __se_sys_sendmsg net/socket.c:2337 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2337
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888085a3cbc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 0 bytes inside of
     224-byte region [ffff888085a3cbc0, ffff888085a3cca0)
    The buggy address belongs to the page:
    page:ffffea0002168f00 refcount:1 mapcount:0 mapping:ffff88821b6f63c0 index:0x0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea00027bbf88 ffffea0002105b88 ffff88821b6f63c0
    raw: 0000000000000000 ffff888085a3c080 000000010000000c 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888085a3ca80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff888085a3cb00: 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc fc
    >ffff888085a3cb80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                               ^
     ffff888085a3cc00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888085a3cc80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    
    Fixes: 0feca6190f88 ("net: ipv6: add skbuff fraglist splitter")
    Fixes: c8b17be0b7a4 ("net: ipv4: add skbuff fraglist splitter")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Pablo Neira Ayuso <pablo@netfilter.org>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 69fbb3f47327d959830c94bf31893972b8c8f700
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Thu May 30 03:25:49 2019 -0400

    media: wl128x: Fix some error handling in fm_v4l2_init_video_device()
    
    X-Originating-IP: [10.175.113.25]
    X-CFilter-Loop: Reflected
    The fm_v4l2_init_video_device() forget to unregister v4l2/video device
    in the error path, it could lead to UAF issue, eg,
    
      BUG: KASAN: use-after-free in atomic64_read include/asm-generic/atomic-instrumented.h:836 [inline]
      BUG: KASAN: use-after-free in atomic_long_read include/asm-generic/atomic-long.h:28 [inline]
      BUG: KASAN: use-after-free in __mutex_unlock_slowpath+0x92/0x690 kernel/locking/mutex.c:1206
      Read of size 8 at addr ffff8881e84a7c70 by task v4l_id/3659
    
      CPU: 1 PID: 3659 Comm: v4l_id Not tainted 5.1.0 #8
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0xa9/0x10e lib/dump_stack.c:113
       print_address_description+0x65/0x270 mm/kasan/report.c:187
       kasan_report+0x149/0x18d mm/kasan/report.c:317
       atomic64_read include/asm-generic/atomic-instrumented.h:836 [inline]
       atomic_long_read include/asm-generic/atomic-long.h:28 [inline]
       __mutex_unlock_slowpath+0x92/0x690 kernel/locking/mutex.c:1206
       fm_v4l2_fops_open+0xac/0x120 [fm_drv]
       v4l2_open+0x191/0x390 [videodev]
       chrdev_open+0x20d/0x570 fs/char_dev.c:417
       do_dentry_open+0x700/0xf30 fs/open.c:777
       do_last fs/namei.c:3416 [inline]
       path_openat+0x7c4/0x2a90 fs/namei.c:3532
       do_filp_open+0x1a5/0x2b0 fs/namei.c:3563
       do_sys_open+0x302/0x490 fs/open.c:1069
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
      RIP: 0033:0x7f8180c17c8e
      ...
      Allocated by task 3642:
       set_track mm/kasan/common.c:87 [inline]
       __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:497
       fm_drv_init+0x13/0x1000 [fm_drv]
       do_one_initcall+0xbc/0x47d init/main.c:901
       do_init_module+0x1b5/0x547 kernel/module.c:3456
       load_module+0x6405/0x8c10 kernel/module.c:3804
       __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Freed by task 3642:
       set_track mm/kasan/common.c:87 [inline]
       __kasan_slab_free+0x130/0x180 mm/kasan/common.c:459
       slab_free_hook mm/slub.c:1429 [inline]
       slab_free_freelist_hook mm/slub.c:1456 [inline]
       slab_free mm/slub.c:3003 [inline]
       kfree+0xe1/0x270 mm/slub.c:3958
       fm_drv_init+0x1e6/0x1000 [fm_drv]
       do_one_initcall+0xbc/0x47d init/main.c:901
       do_init_module+0x1b5/0x547 kernel/module.c:3456
       load_module+0x6405/0x8c10 kernel/module.c:3804
       __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
       do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Add relevant unregister functions to fix it.
    
    Cc: Hans Verkuil <hans.verkuil@cisco.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit a9fb94a99bb515d8720ba8440ce3aba84aec80f8
Author: Pi-Hsun Shih <pihsun@chromium.org>
Date:   Mon May 20 14:51:19 2019 +0800

    pstore: Set tfm to NULL on free_buf_for_compression
    
    Set tfm to NULL on free_buf_for_compression() after crypto_free_comp().
    
    This avoid a use-after-free when allocate_buf_for_compression()
    and free_buf_for_compression() are called twice. Although
    free_buf_for_compression() freed the tfm, allocate_buf_for_compression()
    won't reinitialize the tfm since the tfm pointer is not NULL.
    
    Fixes: 95047b0519c1 ("pstore: Refactor compression initialization")
    Signed-off-by: Pi-Hsun Shih <pihsun@chromium.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>

commits)
      net: correct zerocopy refcnt with udp MSG_MORE
      ethtool: Check for vlan etype or vlan tci when parsing flow_rule
      net: don't clear sock->sk early to avoid trouble in strparser
      net-gro: fix use-after-free read in napi_gro_frags()
      net: dsa: tag_8021q: Create a stable binary format
      net: dsa: tag_8021q: Change order of rx_vid setup
      net: mvpp2: fix bad MVPP2_TXQ_SCHED_TOKEN_CNTR_REG queue value
      ipv4: tcp_input: fix stack out of bounds when parsing TCP options.
      mlxsw: spectrum: Prevent force of 56G
      mlxsw: spectrum_acl: Avoid warning after identical rules insertion
      net: dsa: mv88e6xxx: fix handling of upper half of STATS_TYPE_PORT
      r8169: fix MAC address being lost in PCI D3
      net: core: support XDP generic on stacked devices.
      netvsc: unshare skb in VF rx handler
      udp: Avoid post-GRO UDP checksum recalculation
      net: phy: dp83867: Set up RGMII TX delay
      net: phy: dp83867: do not call config_init twice
      net: phy: dp83867: increase SGMII autoneg timer duration
      net: phy: dp83867: fix speed 10 in sgmii mode
      net: phy: marvell10g: report if the PHY fails to boot firmware
      ...

commit a4270d6795b0580287453ea55974d948393e66ef
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 29 15:36:10 2019 -0700

    net-gro: fix use-after-free read in napi_gro_frags()
    
    If a network driver provides to napi_gro_frags() an
    skb with a page fragment of exactly 14 bytes, the call
    to gro_pull_from_frag0() will 'consume' the fragment
    by calling skb_frag_unref(skb, 0), and the page might
    be freed and reused.
    
    Reading eth->h_proto at the end of napi_frags_skb() might
    read mangled data, or crash under specific debugging features.
    
    BUG: KASAN: use-after-free in napi_frags_skb net/core/dev.c:5833 [inline]
    BUG: KASAN: use-after-free in napi_gro_frags+0xc6f/0xd10 net/core/dev.c:5841
    Read of size 2 at addr ffff88809366840c by task syz-executor599/8957
    
    CPU: 1 PID: 8957 Comm: syz-executor599 Not tainted 5.2.0-rc1+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load_n_noabort+0xf/0x20 mm/kasan/generic_report.c:142
     napi_frags_skb net/core/dev.c:5833 [inline]
     napi_gro_frags+0xc6f/0xd10 net/core/dev.c:5841
     tun_get_user+0x2f3c/0x3ff0 drivers/net/tun.c:1991
     tun_chr_write_iter+0xbd/0x156 drivers/net/tun.c:2037
     call_write_iter include/linux/fs.h:1872 [inline]
     do_iter_readv_writev+0x5f8/0x8f0 fs/read_write.c:693
     do_iter_write fs/read_write.c:970 [inline]
     do_iter_write+0x184/0x610 fs/read_write.c:951
     vfs_writev+0x1b3/0x2f0 fs/read_write.c:1015
     do_writev+0x15b/0x330 fs/read_write.c:1058
    
    Fixes: a50e233c50db ("net-gro: restore frag0 optimization")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7987b694ade8cc465ce10fb3dceaa614f13ceaf3
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed May 29 12:49:52 2019 -0400

    SUNRPC: Fix a use after free when a server rejects the RPCSEC_GSS credential
    
    The addition of rpc_check_timeout() to call_decode causes an Oops
    when the RPCSEC_GSS credential is rejected.
    The reason is that rpc_decode_header() will call xprt_release() in
    order to free task->tk_rqstp, which is needed by rpc_check_timeout()
    to check whether or not we should exit due to a soft timeout.
    
    The fix is to move the call to xprt_release() into call_decode() so
    we can perform it after rpc_check_timeout().
    
    Reported-by: Olga Kornievskaia <olga.kornievskaia@gmail.com>
    Reported-by: Nick Bowler <nbowler@draconx.ca>
    Fixes: cea57789e408 ("SUNRPC: Clean up")
    Cc: stable@vger.kernel.org # v5.1+
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit e0e3f39759151fb1b445a0dbc5d6a14f3e1732aa
Author: Gal Pressman <galpress@amazon.com>
Date:   Tue May 28 15:46:15 2019 +0300

    RDMA/efa: Remove unneeded admin commands abort flow
    
    The admin commands abort flow is buggy (use-after-free) and not really
    necessary as it is guaranteed that after ib_unregister_device() is called
    there are no user verbs threads running in parallel, delete it.
    
    Suggested-by: Jason Gunthorpe <jgg@ziepe.ca>
    Reviewed-by: Firas JahJah <firasj@amazon.com>
    Reviewed-by: Yossi Leybovich <sleybo@amazon.com>
    Signed-off-by: Gal Pressman <galpress@amazon.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 54e9c9d4b506b611228890752d1cfa960e0965e1
Author: Stanislav Fomichev <sdf@google.com>
Date:   Tue May 28 14:14:41 2019 -0700

    bpf: remove __rcu annotations from bpf_prog_array
    
    Drop __rcu annotations and rcu read sections from bpf_prog_array
    helper functions. They are not needed since all existing callers
    call those helpers from the rcu update side while holding a mutex.
    This guarantees that use-after-free could not happen.
    
    In the next patches I'll fix the callers with missing
    rcu_dereference_protected to make sparse/lockdep happy, the proper
    way to use these helpers is:
    
            struct bpf_prog_array __rcu *progs = ...;
            struct bpf_prog_array *p;
    
            mutex_lock(&mtx);
            p = rcu_dereference_protected(progs, lockdep_is_held(&mtx));
            bpf_prog_array_length(p);
            bpf_prog_array_copy_to_user(p, ...);
            bpf_prog_array_delete_safe(p, ...);
            bpf_prog_array_copy_info(p, ...);
            bpf_prog_array_copy(p, ...);
            bpf_prog_array_free(p);
            mutex_unlock(&mtx);
    
    No functional changes! rcu_dereference_protected with lockdep_is_held
    should catch any cases where we update prog array without a mutex
    (I've looked at existing call sites and I think we hold a mutex
    everywhere).
    
    Motivation is to fix sparse warnings:
    kernel/bpf/core.c:1803:9: warning: incorrect type in argument 1 (different address spaces)
    kernel/bpf/core.c:1803:9:    expected struct callback_head *head
    kernel/bpf/core.c:1803:9:    got struct callback_head [noderef] <asn:4> *
    kernel/bpf/core.c:1877:44: warning: incorrect type in initializer (different address spaces)
    kernel/bpf/core.c:1877:44:    expected struct bpf_prog_array_item *item
    kernel/bpf/core.c:1877:44:    got struct bpf_prog_array_item [noderef] <asn:4> *
    kernel/bpf/core.c:1901:26: warning: incorrect type in assignment (different address spaces)
    kernel/bpf/core.c:1901:26:    expected struct bpf_prog_array_item *existing
    kernel/bpf/core.c:1901:26:    got struct bpf_prog_array_item [noderef] <asn:4> *
    kernel/bpf/core.c:1935:26: warning: incorrect type in assignment (different address spaces)
    kernel/bpf/core.c:1935:26:    expected struct bpf_prog_array_item *[assigned] existing
    kernel/bpf/core.c:1935:26:    got struct bpf_prog_array_item [noderef] <asn:4> *
    
    v2:
    * remove comment about potential race; that can't happen
      because all callers are in rcu-update section
    
    Cc: Roman Gushchin <guro@fb.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Stanislav Fomichev <sdf@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 0c1f845772e5d6d1b1739cb938403527bc6b29e1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue May 28 16:40:53 2019 +0100

    drm/i915: Avoid refcount_inc on known zero count
    
    In intel_wakeref_auto, we use refcount_inc_not_zero to detect the first
    use and initialise the timer. On doing so, we have to avoid using
    refcount_inc on that zero count as the debug code flags that as an
    error:
            refcount_t: increment on 0; use-after-free.
    
    Rearrange the code so that if we know the count is 0 and we are
    initialising, we explicitly set it to 1.
    
    Fixes: b27e35ae5b18 ("drm/i915: Keep user GGTT alive for a minimum of 250ms")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190528154053.22004-1-chris@chris-wilson.co.uk

commit dc93f46bc4e00899eaf4579962cfac8cf2f9966d
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon May 27 16:56:49 2019 -0700

    inet: frags: fix use-after-free read in inet_frag_destroy_rcu
    
    As caught by syzbot [1], the rcu grace period that is respected
    before fqdir_rwork_fn() proceeds and frees fqdir is not enough
    to prevent inet_frag_destroy_rcu() being run after the freeing.
    
    We need a proper rcu_barrier() synchronization to replace
    the one we had in inet_frags_fini()
    
    We also have to fix a potential problem at module removal :
    inet_frags_fini() needs to make sure that all queued work queues
    (fqdir_rwork_fn) have completed, otherwise we might
    call kmem_cache_destroy() too soon and get another use-after-free.
    
    [1]
    BUG: KASAN: use-after-free in inet_frag_destroy_rcu+0xd9/0xe0 net/ipv4/inet_fragment.c:201
    Read of size 8 at addr ffff88806ed47a18 by task swapper/1/0
    
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.2.0-rc1+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     inet_frag_destroy_rcu+0xd9/0xe0 net/ipv4/inet_fragment.c:201
     __rcu_reclaim kernel/rcu/rcu.h:222 [inline]
     rcu_do_batch kernel/rcu/tree.c:2092 [inline]
     invoke_rcu_callbacks kernel/rcu/tree.c:2310 [inline]
     rcu_core+0xba5/0x1500 kernel/rcu/tree.c:2291
     __do_softirq+0x25c/0x94c kernel/softirq.c:293
     invoke_softirq kernel/softirq.c:374 [inline]
     irq_exit+0x180/0x1d0 kernel/softirq.c:414
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x13b/0x550 arch/x86/kernel/apic/apic.c:1068
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:806
     </IRQ>
    RIP: 0010:native_safe_halt+0xe/0x10 arch/x86/include/asm/irqflags.h:61
    Code: ff ff 48 89 df e8 f2 95 8c fa eb 82 e9 07 00 00 00 0f 00 2d e4 45 4b 00 f4 c3 66 90 e9 07 00 00 00 0f 00 2d d4 45 4b 00 fb f4 <c3> 90 55 48 89 e5 41 57 41 56 41 55 41 54 53 e8 8e 18 42 fa e8 99
    RSP: 0018:ffff8880a98e7d78 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff13
    RAX: 1ffffffff1164e11 RBX: ffff8880a98d4340 RCX: 0000000000000000
    RDX: dffffc0000000000 RSI: 0000000000000006 RDI: ffff8880a98d4bbc
    RBP: ffff8880a98e7da8 R08: ffff8880a98d4340 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000001
    R13: ffffffff88b27078 R14: 0000000000000001 R15: 0000000000000000
     arch_cpu_idle+0xa/0x10 arch/x86/kernel/process.c:571
     default_idle_call+0x36/0x90 kernel/sched/idle.c:94
     cpuidle_idle_call kernel/sched/idle.c:154 [inline]
     do_idle+0x377/0x560 kernel/sched/idle.c:263
     cpu_startup_entry+0x1b/0x20 kernel/sched/idle.c:354
     start_secondary+0x34e/0x4c0 arch/x86/kernel/smpboot.c:267
     secondary_startup_64+0xa4/0xb0 arch/x86/kernel/head_64.S:243
    
    Allocated by task 8877:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503
     kmem_cache_alloc_trace+0x151/0x750 mm/slab.c:3555
     kmalloc include/linux/slab.h:547 [inline]
     kzalloc include/linux/slab.h:742 [inline]
     fqdir_init include/net/inet_frag.h:115 [inline]
     ipv6_frags_init_net+0x48/0x460 net/ipv6/reassembly.c:513
     ops_init+0xb3/0x410 net/core/net_namespace.c:130
     setup_net+0x2d3/0x740 net/core/net_namespace.c:316
     copy_net_ns+0x1df/0x340 net/core/net_namespace.c:439
     create_new_namespaces+0x400/0x7b0 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xc2/0x200 kernel/nsproxy.c:206
     ksys_unshare+0x440/0x980 kernel/fork.c:2692
     __do_sys_unshare kernel/fork.c:2760 [inline]
     __se_sys_unshare kernel/fork.c:2758 [inline]
     __x64_sys_unshare+0x31/0x40 kernel/fork.c:2758
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 17:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kfree+0xcf/0x220 mm/slab.c:3755
     fqdir_rwork_fn+0x33/0x40 net/ipv4/inet_fragment.c:154
     process_one_work+0x989/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x354/0x420 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    The buggy address belongs to the object at ffff88806ed47a00
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 24 bytes inside of
     512-byte region [ffff88806ed47a00, ffff88806ed47c00)
    The buggy address belongs to the page:
    page:ffffea0001bb51c0 refcount:1 mapcount:0 mapping:ffff8880aa400940 index:0x0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea000282a788 ffffea0001bb53c8 ffff8880aa400940
    raw: 0000000000000000 ffff88806ed47000 0000000100000006 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88806ed47900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88806ed47980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88806ed47a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                ^
     ffff88806ed47a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88806ed47b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 3c8fc8782044 ("inet: frags: rework rhashtable dismantle")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae7352d384a552d8c799c242e74a934809990a71
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon May 27 16:56:48 2019 -0700

    inet: frags: call inet_frags_fini() after unregister_pernet_subsys()
    
    Both IPv6 and 6lowpan are calling inet_frags_fini() too soon.
    
    inet_frags_fini() is dismantling a kmem_cache, that might be needed
    later when unregister_pernet_subsys() eventually has to remove
    frags queues from hash tables and free them.
    
    This fixes potential use-after-free, and is a prereq for the following patch.
    
    Fixes: d4ad4d22e7ac ("inet: frags: use kmem_cache for inet_frag_queue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3e0f724346e96daae7792262c6767449795ac3b5
Author: sumitg <sumitg@nvidia.com>
Date:   Fri May 17 09:53:42 2019 -0400

    media: v4l2-core: fix use-after-free error
    
    Fixing use-after-free within __v4l2_ctrl_handler_setup().
    Memory is being freed with kfree(new_ref) for duplicate
    control reference entry but ctrl->cluster pointer is still
    referring to freed duplicate entry resulting in error on
    access. Change done to update cluster pointer only when new
    control reference is added.
    
     ==================================================================
     BUG: KASAN: use-after-free in __v4l2_ctrl_handler_setup+0x388/0x428
     Read of size 8 at addr ffffffc324e78618 by task systemd-udevd/312
    
     Allocated by task 312:
    
     Freed by task 312:
    
     The buggy address belongs to the object at ffffffc324e78600
      which belongs to the cache kmalloc-64 of size 64
     The buggy address is located 24 bytes inside of
      64-byte region [ffffffc324e78600, ffffffc324e78640)
     The buggy address belongs to the page:
     page:ffffffbf0c939e00 count:1 mapcount:0 mapping:
                                            (null) index:0xffffffc324e78f80
     flags: 0x4000000000000100(slab)
     raw: 4000000000000100 0000000000000000 ffffffc324e78f80 000000018020001a
     raw: 0000000000000000 0000000100000001 ffffffc37040fb80 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      ffffffc324e78500: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
      ffffffc324e78580: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     >ffffffc324e78600: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
                                 ^
      ffffffc324e78680: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
      ffffffc324e78700: 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc
     ==================================================================
    
    Suggested-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Sumit Gupta <sumitg@nvidia.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit eff73de2b1600ad8230692f00bc0ab49b166512a
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu May 9 04:57:09 2019 -0400

    media: cpia2_usb: first wake up, then free in disconnect
    
    Kasan reported a use after free in cpia2_usb_disconnect()
    It first freed everything and then woke up those waiting.
    The reverse order is correct.
    
    Fixes: 6c493f8b28c67 ("[media] cpia2: major overhaul to get it in a working state again")
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: syzbot+0c90fc937c84f97d0aa6@syzkaller.appspotmail.com
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 0bce512e784d137700275f7839c4547eddbd4b6a
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri May 24 14:09:19 2019 -0500

    ASoC: SOF: core: fix error handling with the probe workqueue
    
    In some configurations, it's a requirement to split the probe in two,
    with a second part handled in a workqueue (e.g. for HDMI support
    which depends on the DRM modules).
    
    SOF already handles these configurations but the error flow is
    incorrect. When an error occurs in the workqueue, the probe has
    technically already completed. If we release the resources on errors,
    this generates kernel oops/use-after-free when the resources are
    released a second time on module removal.
    
    GitHub issue: https://github.com/thesofproject/linux/issues/945
    Fixes: c16211d6226 ("ASoC: SOF: Add Sound Open Firmware driver core")
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f6122ed2a4f9c9c1c073ddf6308d1b2ac10e0781
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Thu Jan 3 16:48:15 2019 +0530

    configfs: Fix use-after-free when accessing sd->s_dentry
    
    In the vfs_statx() context, during path lookup, the dentry gets
    added to sd->s_dentry via configfs_attach_attr(). In the end,
    vfs_statx() kills the dentry by calling path_put(), which invokes
    configfs_d_iput(). Ideally, this dentry must be removed from
    sd->s_dentry but it doesn't if the sd->s_count >= 3. As a result,
    sd->s_dentry is holding reference to a stale dentry pointer whose
    memory is already freed up. This results in use-after-free issue,
    when this stale sd->s_dentry is accessed later in
    configfs_readdir() path.
    
    This issue can be easily reproduced, by running the LTP test case -
    sh fs_racer_file_list.sh /config
    (https://github.com/linux-test-project/ltp/blob/master/testcases/kernel/fs/racer/fs_racer_file_list.sh)
    
    Fixes: 76ae281f6307 ('configfs: fix race between dentry put and lookup')
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit 3c8fc87820446ce5b948dc17648509340102b818
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri May 24 09:03:40 2019 -0700

    inet: frags: rework rhashtable dismantle
    
    syszbot found an interesting use-after-free [1] happening
    while IPv4 fragment rhashtable was destroyed at netns dismantle.
    
    While no insertions can possibly happen at the time a dismantling
    netns is destroying this rhashtable, timers can still fire and
    attempt to remove elements from this rhashtable.
    
    This is forbidden, since rhashtable_free_and_destroy() has
    no synchronization against concurrent inserts and deletes.
    
    Add a new fqdir->dead flag so that timers do not attempt
    a rhashtable_remove_fast() operation.
    
    We also have to respect an RCU grace period before starting
    the rhashtable_free_and_destroy() from process context,
    thus we use rcu_work infrastructure.
    
    This is a refinement of a prior rough attempt to fix this bug :
    https://marc.info/?l=linux-netdev&m=153845936820900&w=2
    
    Since the rhashtable cleanup is now deferred to a work queue,
    netns dismantles should be slightly faster.
    
    [1]
    BUG: KASAN: use-after-free in __read_once_size include/linux/compiler.h:194 [inline]
    BUG: KASAN: use-after-free in rhashtable_last_table+0x162/0x180 lib/rhashtable.c:212
    Read of size 8 at addr ffff8880a6497b70 by task kworker/0:0/5
    
    CPU: 0 PID: 5 Comm: kworker/0:0 Not tainted 5.2.0-rc1+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events rht_deferred_worker
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:188
     __kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     kasan_report+0x12/0x20 mm/kasan/common.c:614
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
     __read_once_size include/linux/compiler.h:194 [inline]
     rhashtable_last_table+0x162/0x180 lib/rhashtable.c:212
     rht_deferred_worker+0x111/0x2030 lib/rhashtable.c:411
     process_one_work+0x989/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x354/0x420 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Allocated by task 32687:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_kmalloc mm/kasan/common.c:489 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:462
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:503
     __do_kmalloc_node mm/slab.c:3620 [inline]
     __kmalloc_node+0x4e/0x70 mm/slab.c:3627
     kmalloc_node include/linux/slab.h:590 [inline]
     kvmalloc_node+0x68/0x100 mm/util.c:431
     kvmalloc include/linux/mm.h:637 [inline]
     kvzalloc include/linux/mm.h:645 [inline]
     bucket_table_alloc+0x90/0x480 lib/rhashtable.c:178
     rhashtable_init+0x3f4/0x7b0 lib/rhashtable.c:1057
     inet_frags_init_net include/net/inet_frag.h:109 [inline]
     ipv4_frags_init_net+0x182/0x410 net/ipv4/ip_fragment.c:683
     ops_init+0xb3/0x410 net/core/net_namespace.c:130
     setup_net+0x2d3/0x740 net/core/net_namespace.c:316
     copy_net_ns+0x1df/0x340 net/core/net_namespace.c:439
     create_new_namespaces+0x400/0x7b0 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xc2/0x200 kernel/nsproxy.c:206
     ksys_unshare+0x440/0x980 kernel/fork.c:2692
     __do_sys_unshare kernel/fork.c:2760 [inline]
     __se_sys_unshare kernel/fork.c:2758 [inline]
     __x64_sys_unshare+0x31/0x40 kernel/fork.c:2758
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 7:
     save_stack+0x23/0x90 mm/kasan/common.c:71
     set_track mm/kasan/common.c:79 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:451
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:459
     __cache_free mm/slab.c:3432 [inline]
     kfree+0xcf/0x220 mm/slab.c:3755
     kvfree+0x61/0x70 mm/util.c:460
     bucket_table_free+0x69/0x150 lib/rhashtable.c:108
     rhashtable_free_and_destroy+0x165/0x8b0 lib/rhashtable.c:1155
     inet_frags_exit_net+0x3d/0x50 net/ipv4/inet_fragment.c:152
     ipv4_frags_exit_net+0x73/0x90 net/ipv4/ip_fragment.c:695
     ops_exit_list.isra.0+0xaa/0x150 net/core/net_namespace.c:154
     cleanup_net+0x3fb/0x960 net/core/net_namespace.c:553
     process_one_work+0x989/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x354/0x420 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    The buggy address belongs to the object at ffff8880a6497b40
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 48 bytes inside of
     1024-byte region [ffff8880a6497b40, ffff8880a6497f40)
    The buggy address belongs to the page:
    page:ffffea0002992580 refcount:1 mapcount:0 mapping:ffff8880aa400ac0 index:0xffff8880a64964c0 compound_mapcount: 0
    flags: 0x1fffc0000010200(slab|head)
    raw: 01fffc0000010200 ffffea0002916e88 ffffea000218fe08 ffff8880aa400ac0
    raw: ffff8880a64964c0 ffff8880a6496040 0000000100000005 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880a6497a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a6497a80: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff8880a6497b00: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                                                 ^
     ffff8880a6497b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880a6497c00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 648700f76b03 ("inet: frags: use rhashtables for reassembly units")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ffab9691bcb2fe2594f4c38bfceb4d9685b93b87
Author: Jian Shen <shenjian15@huawei.com>
Date:   Fri May 24 19:19:45 2019 +0800

    net: hns3: initialize CPU reverse mapping
    
    Allocate CPU rmap and add entry for each irq. CPU rmap is
    used in aRFS to get the queue number of the rx completion
    interrupts.
    
    In additional, remove the calling of
    irq_set_affinity_notifier() in hns3_nic_init_irq(), because
    we have registered notifier in irq_cpu_rmap_add() for each
    vector, otherwise it may cause use-after-free issue.
    
    Signed-off-by: Jian Shen <shenjian15@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd95e678e0f6e18351ecdc147ca819145db9ed7b
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Fri May 24 08:01:00 2019 -0700

    bpf: sockmap, fix use after free from sleep in psock backlog workqueue
    
    Backlog work for psock (sk_psock_backlog) might sleep while waiting
    for memory to free up when sending packets. However, while sleeping
    the socket may be closed and removed from the map by the user space
    side.
    
    This breaks an assumption in sk_stream_wait_memory, which expects the
    wait queue to be still there when it wakes up resulting in a
    use-after-free shown below. To fix his mark sendmsg as MSG_DONTWAIT
    to avoid the sleep altogether. We already set the flag for the
    sendpage case but we missed the case were sendmsg is used.
    Sockmap is currently the only user of skb_send_sock_locked() so only
    the sockmap paths should be impacted.
    
    ==================================================================
    BUG: KASAN: use-after-free in remove_wait_queue+0x31/0x70
    Write of size 8 at addr ffff888069a0c4e8 by task kworker/0:2/110
    
    CPU: 0 PID: 110 Comm: kworker/0:2 Not tainted 5.0.0-rc2-00335-g28f9d1a3d4fe-dirty #14
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    Workqueue: events sk_psock_backlog
    Call Trace:
     print_address_description+0x6e/0x2b0
     ? remove_wait_queue+0x31/0x70
     kasan_report+0xfd/0x177
     ? remove_wait_queue+0x31/0x70
     ? remove_wait_queue+0x31/0x70
     remove_wait_queue+0x31/0x70
     sk_stream_wait_memory+0x4dd/0x5f0
     ? sk_stream_wait_close+0x1b0/0x1b0
     ? wait_woken+0xc0/0xc0
     ? tcp_current_mss+0xc5/0x110
     tcp_sendmsg_locked+0x634/0x15d0
     ? tcp_set_state+0x2e0/0x2e0
     ? __kasan_slab_free+0x1d1/0x230
     ? kmem_cache_free+0x70/0x140
     ? sk_psock_backlog+0x40c/0x4b0
     ? process_one_work+0x40b/0x660
     ? worker_thread+0x82/0x680
     ? kthread+0x1b9/0x1e0
     ? ret_from_fork+0x1f/0x30
     ? check_preempt_curr+0xaf/0x130
     ? iov_iter_kvec+0x5f/0x70
     ? kernel_sendmsg_locked+0xa0/0xe0
     skb_send_sock_locked+0x273/0x3c0
     ? skb_splice_bits+0x180/0x180
     ? start_thread+0xe0/0xe0
     ? update_min_vruntime.constprop.27+0x88/0xc0
     sk_psock_backlog+0xb3/0x4b0
     ? strscpy+0xbf/0x1e0
     process_one_work+0x40b/0x660
     worker_thread+0x82/0x680
     ? process_one_work+0x660/0x660
     kthread+0x1b9/0x1e0
     ? __kthread_create_on_node+0x250/0x250
     ret_from_fork+0x1f/0x30
    
    Fixes: 20bf50de3028c ("skbuff: Function to send an skbuf on a socket")
    Reported-by: Jakub Sitnicki <jakub@cloudflare.com>
    Tested-by: Jakub Sitnicki <jakub@cloudflare.com>
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit f5dd87326fefe42a4b1a4b1a1a695060c33a88d6
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Thu May 9 16:08:26 2019 -0500

    fpga: stratix10-soc: fix use-after-free on s10_init()
    
    The refcount of fw_np has already been decreased by of_find_matching_node()
    so it shouldn't be used anymore.
    This patch adds an of_node_get() before of_find_matching_node() to avoid
    the use-after-free problem.
    
    Fixes: e7eef1d7633a ("fpga: add intel stratix10 soc fpga manager driver")
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Cc: Alan Tull <atull@kernel.org>
    Cc: Moritz Fischer <mdf@kernel.org>
    Cc: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Cc: linux-fpga@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Reviewed-by: Moritz Fischer <mdf@kernel.org>
    Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Acked-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63e8dcdb4f8e596f2a290af4278e0bca3304a1f1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri May 24 07:45:29 2019 +0100

    drm/i915/gtt: Neuter the deferred unbind callback from gen6_ppgtt_cleanup
    
    Having deferred the vma destruction to a worker where we can acquire the
    struct_mutex, we have to avoid chasing back into the now destroyed
    ppgtt. The pd_vma is special in having a custom unbind function to scan
    for unused pages despite the VMA itself being notionally part of the
    GGTT. As such, we need to disable that callback to avoid a
    use-after-free.
    
    This unfortunately blew up so early during boot that CI declared the
    machine unreachable as opposed to being the major failure it was. Oops.
    
    Fixes: d3622099c76f ("drm/i915/gtt: Always acquire struct_mutex for gen6_ppgtt_cleanup")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190524064529.20514-1-chris@chris-wilson.co.uk

commit 6cf97230cd5f36b7665099083272595c55d72be7
Author: Oliver Neukum <oneukum@suse.com>
Date:   Tue Apr 30 09:07:36 2019 -0400

    media: dvb: usb: fix use after free in dvb_usb_device_exit
    
    dvb_usb_device_exit() frees and uses the device name in that order.
    Fix by storing the name in a buffer before freeing it.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: syzbot+26ec41e9f788b3eba396@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit c3f4a6c39cf269a40d45f813c05fa830318ad875
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue May 21 19:02:02 2019 -0700

    net/tls: don't ignore netdev notifications if no TLS features
    
    On device surprise removal path (the notifier) we can't
    bail just because the features are disabled.  They may
    have been enabled during the lifetime of the device.
    This bug leads to leaking netdev references and
    use-after-frees if there are active connections while
    device features are cleared.
    
    Fixes: e8f69799810c ("net/tls: Add generic NIC offload infrastructure")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 719c7d563c17b150877cee03a4b812a424989dfa
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri May 17 22:31:49 2019 +0800

    ipvs: Fix use-after-free in ip_vs_in
    
    BUG: KASAN: use-after-free in ip_vs_in.part.29+0xe8/0xd20 [ip_vs]
    Read of size 4 at addr ffff8881e9b26e2c by task sshd/5603
    
    CPU: 0 PID: 5603 Comm: sshd Not tainted 4.19.39+ #30
    Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    Call Trace:
     dump_stack+0x71/0xab
     print_address_description+0x6a/0x270
     kasan_report+0x179/0x2c0
     ip_vs_in.part.29+0xe8/0xd20 [ip_vs]
     ip_vs_in+0xd8/0x170 [ip_vs]
     nf_hook_slow+0x5f/0xe0
     __ip_local_out+0x1d5/0x250
     ip_local_out+0x19/0x60
     __tcp_transmit_skb+0xba1/0x14f0
     tcp_write_xmit+0x41f/0x1ed0
     ? _copy_from_iter_full+0xca/0x340
     __tcp_push_pending_frames+0x52/0x140
     tcp_sendmsg_locked+0x787/0x1600
     ? tcp_sendpage+0x60/0x60
     ? inet_sk_set_state+0xb0/0xb0
     tcp_sendmsg+0x27/0x40
     sock_sendmsg+0x6d/0x80
     sock_write_iter+0x121/0x1c0
     ? sock_sendmsg+0x80/0x80
     __vfs_write+0x23e/0x370
     vfs_write+0xe7/0x230
     ksys_write+0xa1/0x120
     ? __ia32_sys_read+0x50/0x50
     ? __audit_syscall_exit+0x3ce/0x450
     do_syscall_64+0x73/0x200
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7ff6f6147c60
    Code: 73 01 c3 48 8b 0d 28 12 2d 00 f7 d8 64 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 83 3d 5d 73 2d 00 00 75 10 b8 01 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83
    RSP: 002b:00007ffd772ead18 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000034 RCX: 00007ff6f6147c60
    RDX: 0000000000000034 RSI: 000055df30a31270 RDI: 0000000000000003
    RBP: 000055df30a31270 R08: 0000000000000000 R09: 0000000000000000
    R10: 00007ffd772ead70 R11: 0000000000000246 R12: 00007ffd772ead74
    R13: 00007ffd772eae20 R14: 00007ffd772eae24 R15: 000055df2f12ddc0
    
    Allocated by task 6052:
     kasan_kmalloc+0xa0/0xd0
     __kmalloc+0x10a/0x220
     ops_init+0x97/0x190
     register_pernet_operations+0x1ac/0x360
     register_pernet_subsys+0x24/0x40
     0xffffffffc0ea016d
     do_one_initcall+0x8b/0x253
     do_init_module+0xe3/0x335
     load_module+0x2fc0/0x3890
     __do_sys_finit_module+0x192/0x1c0
     do_syscall_64+0x73/0x200
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 6067:
     __kasan_slab_free+0x130/0x180
     kfree+0x90/0x1a0
     ops_free_list.part.7+0xa6/0xc0
     unregister_pernet_operations+0x18b/0x1f0
     unregister_pernet_subsys+0x1d/0x30
     ip_vs_cleanup+0x1d/0xd2f [ip_vs]
     __x64_sys_delete_module+0x20c/0x300
     do_syscall_64+0x73/0x200
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff8881e9b26600 which belongs to the cache kmalloc-4096 of size 4096
    The buggy address is located 2092 bytes inside of 4096-byte region [ffff8881e9b26600, ffff8881e9b27600)
    The buggy address belongs to the page:
    page:ffffea0007a6c800 count:1 mapcount:0 mapping:ffff888107c0e600 index:0x0 compound_mapcount: 0
    flags: 0x17ffffc0008100(slab|head)
    raw: 0017ffffc0008100 dead000000000100 dead000000000200 ffff888107c0e600
    raw: 0000000000000000 0000000080070007 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    while unregistering ipvs module, ops_free_list calls
    __ip_vs_cleanup, then nf_unregister_net_hooks be called to
    do remove nf hook entries. It need a RCU period to finish,
    however net->ipvs is set to NULL immediately, which will
    trigger NULL pointer dereference when a packet is hooked
    and handled by ip_vs_in where net->ipvs is dereferenced.
    
    Another scene is ops_free_list call ops_free to free the
    net_generic directly while __ip_vs_cleanup finished, then
    calling ip_vs_in will triggers use-after-free.
    
    This patch moves nf_unregister_net_hooks from __ip_vs_cleanup()
    to __ip_vs_dev_cleanup(),  where rcu_barrier() is called by
    unregister_pernet_device -> unregister_pernet_operations,
    that will do the needed grace period.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: efe41606184e ("ipvs: convert to use pernet nf_hook api")
    Suggested-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commits)
      ceph: flush dirty inodes before proceeding with remount
      ceph: fix unaligned access in ceph_send_cap_releases
      libceph: make ceph_pr_addr take an struct ceph_entity_addr pointer
      libceph: fix unaligned accesses in ceph_entity_addr handling
      rbd: don't assert on writes to snapshots
      rbd: client_mutex is never nested
      ceph: print inode number in __caps_issued_mask debugging messages
      ceph: just call get_session in __ceph_lookup_mds_session
      ceph: simplify arguments and return semantics of try_get_cap_refs
      ceph: fix comment over ceph_drop_caps_for_unlink
      ceph: move wait for mds request into helper function
      ceph: have ceph_mdsc_do_request call ceph_mdsc_submit_request
      ceph: after an MDS request, do callback and completions
      ceph: use pathlen values returned by set_request_path_attr
      ceph: use __getname/__putname in ceph_mdsc_build_path
      ceph: use ceph_mdsc_build_path instead of clone_dentry_name
      ceph: fix potential use-after-free in ceph_mdsc_build_path
      ceph: dump granular cap info in "caps" debugfs file
      ceph: make iterate_session_caps a public symbol
      ceph: fix NULL pointer deref when debugging is enabled
      ...

commit c3f3ce049f7d97cc7ec9c01cb51d9ec74e0f37c2
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Tue May 14 15:40:46 2019 -0700

    userfaultfd: use RCU to free the task struct when fork fails
    
    The task structure is freed while get_mem_cgroup_from_mm() holds
    rcu_read_lock() and dereferences mm->owner.
    
      get_mem_cgroup_from_mm()                failing fork()
      ----                                    ---
      task = mm->owner
                                              mm->owner = NULL;
                                              free(task)
      if (task) *task; /* use after free */
    
    The fix consists in freeing the task with RCU also in the fork failure
    case, exactly like it always happens for the regular exit(2) path.  That
    is enough to make the rcu_read_lock hold in get_mem_cgroup_from_mm()
    (left side above) effective to avoid a use after free when dereferencing
    the task structure.
    
    An alternate possible fix would be to defer the delivery of the
    userfaultfd contexts to the monitor until after fork() is guaranteed to
    succeed.  Such a change would require more changes because it would
    create a strict ordering dependency where the uffd methods would need to
    be called beyond the last potentially failing branch in order to be
    safe.  This solution as opposed only adds the dependency to common code
    to set mm->owner to NULL and to free the task struct that was pointed by
    mm->owner with RCU, if fork ends up failing.  The userfaultfd methods
    can still be called anywhere during the fork runtime and the monitor
    will keep discarding orphaned "mm" coming from failed forks in userland.
    
    This race condition couldn't trigger if CONFIG_MEMCG was set =n at build
    time.
    
    [aarcange@redhat.com: improve changelog, reduce #ifdefs per Michal]
      Link: http://lkml.kernel.org/r/20190429035752.4508-1-aarcange@redhat.com
    Link: http://lkml.kernel.org/r/20190325225636.11635-2-aarcange@redhat.com
    Fixes: 893e26e61d04 ("userfaultfd: non-cooperative: Add fork() event")
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Tested-by: zhong jiang <zhongjiang@huawei.com>
    Reported-by: syzbot+cbb52e396df3e565ab02@syzkaller.appspotmail.com
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: zhong jiang <zhongjiang@huawei.com>
    Cc: syzbot+cbb52e396df3e565ab02@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cefdca0a86be517bc390fc4541e3674b8e7803b0
Author: Peter Xu <peterx@redhat.com>
Date:   Mon May 13 17:16:41 2019 -0700

    userfaultfd/sysctl: add vm.unprivileged_userfaultfd
    
    Userfaultfd can be misued to make it easier to exploit existing
    use-after-free (and similar) bugs that might otherwise only make a
    short window or race condition available.  By using userfaultfd to
    stall a kernel thread, a malicious program can keep some state that it
    wrote, stable for an extended period, which it can then access using an
    existing exploit.  While it doesn't cause the exploit itself, and while
    it's not the only thing that can stall a kernel thread when accessing a
    memory location, it's one of the few that never needs privilege.
    
    We can add a flag, allowing userfaultfd to be restricted, so that in
    general it won't be useable by arbitrary user programs, but in
    environments that require userfaultfd it can be turned back on.
    
    Add a global sysctl knob "vm.unprivileged_userfaultfd" to control
    whether userfaultfd is allowed by unprivileged users.  When this is
    set to zero, only privileged users (root user, or users with the
    CAP_SYS_PTRACE capability) will be able to use the userfaultfd
    syscalls.
    
    Andrea said:
    
    : The only difference between the bpf sysctl and the userfaultfd sysctl
    : this way is that the bpf sysctl adds the CAP_SYS_ADMIN capability
    : requirement, while userfaultfd adds the CAP_SYS_PTRACE requirement,
    : because the userfaultfd monitor is more likely to need CAP_SYS_PTRACE
    : already if it's doing other kind of tracking on processes runtime, in
    : addition of userfaultfd.  In other words both syscalls works only for
    : root, when the two sysctl are opt-in set to 1.
    
    [dgilbert@redhat.com: changelog additions]
    [akpm@linux-foundation.org: documentation tweak, per Mike]
    Link: http://lkml.kernel.org/r/20190319030722.12441-2-peterx@redhat.com
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Suggested-by: Andrea Arcangeli <aarcange@redhat.com>
    Suggested-by: Mike Rapoport <rppt@linux.ibm.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Maxime Coquelin <maxime.coquelin@redhat.com>
    Cc: Maya Gokhale <gokhale2@llnl.gov>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Martin Cracauer <cracauer@cons.org>
    Cc: Denis Plotnikov <dplotnikov@virtuozzo.com>
    Cc: Marty McFadden <mcfadden8@llnl.gov>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: "Kirill A . Shutemov" <kirill@shutemov.name>
    Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 014894360ec95abe868e94416b3dd6569f6e2c0c
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Mon May 13 07:19:19 2019 -0700

    bpf: sockmap, only stop/flush strp if it was enabled at some point
    
    If we try to call strp_done on a parser that has never been
    initialized, because the sockmap user is only using TX side for
    example we get the following error.
    
      [  883.422081] WARNING: CPU: 1 PID: 208 at kernel/workqueue.c:3030 __flush_work+0x1ca/0x1e0
      ...
      [  883.422095] Workqueue: events sk_psock_destroy_deferred
      [  883.422097] RIP: 0010:__flush_work+0x1ca/0x1e0
    
    This had been wrapped in a 'if (psock->parser.enabled)' logic which
    was broken because the strp_done() was never actually being called
    because we do a strp_stop() earlier in the tear down logic will
    set parser.enabled to false. This could result in a use after free
    if work was still in the queue and was resolved by the patch here,
    1d79895aef18f ("sk_msg: Always cancel strp work before freeing the
    psock"). However, calling strp_stop(), done by the patch marked in
    the fixes tag, only is useful if we never initialized a strp parser
    program and never initialized the strp to start with. Because if
    we had initialized a stream parser strp_stop() would have been called
    by sk_psock_drop() earlier in the tear down process.  By forcing the
    strp to stop we get past the WARNING in strp_done that checks
    the stopped flag but calling cancel_work_sync on work that has never
    been initialized is also wrong and generates the warning above.
    
    To fix check if the parser program exists. If the program exists
    then the strp work has been initialized and must be sync'd and
    cancelled before free'ing any structures. If no program exists we
    never initialized the stream parser in the first place so skip the
    sync/cancel logic implemented by strp_done.
    
    Finally, remove the strp_done its not needed and in the case where we
    are using the stream parser has already been called.
    
    Fixes: e8e3437762ad9 ("bpf: Stop the psock parser before canceling its work")
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 2baae3545327632167c0180e9ca1d467416f1919
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon May 13 09:59:16 2019 -0700

    bpf: devmap: fix use-after-free Read in __dev_map_entry_free
    
    synchronize_rcu() is fine when the rcu callbacks only need
    to free memory (kfree_rcu() or direct kfree() call rcu call backs)
    
    __dev_map_entry_free() is a bit more complex, so we need to make
    sure that call queued __dev_map_entry_free() callbacks have completed.
    
    sysbot report:
    
    BUG: KASAN: use-after-free in dev_map_flush_old kernel/bpf/devmap.c:365
    [inline]
    BUG: KASAN: use-after-free in __dev_map_entry_free+0x2a8/0x300
    kernel/bpf/devmap.c:379
    Read of size 8 at addr ffff8801b8da38c8 by task ksoftirqd/1/18
    
    CPU: 1 PID: 18 Comm: ksoftirqd/1 Not tainted 4.17.0+ #39
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x1b9/0x294 lib/dump_stack.c:113
      print_address_description+0x6c/0x20b mm/kasan/report.c:256
      kasan_report_error mm/kasan/report.c:354 [inline]
      kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
      __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
      dev_map_flush_old kernel/bpf/devmap.c:365 [inline]
      __dev_map_entry_free+0x2a8/0x300 kernel/bpf/devmap.c:379
      __rcu_reclaim kernel/rcu/rcu.h:178 [inline]
      rcu_do_batch kernel/rcu/tree.c:2558 [inline]
      invoke_rcu_callbacks kernel/rcu/tree.c:2818 [inline]
      __rcu_process_callbacks kernel/rcu/tree.c:2785 [inline]
      rcu_process_callbacks+0xe9d/0x1760 kernel/rcu/tree.c:2802
      __do_softirq+0x2e0/0xaf5 kernel/softirq.c:284
      run_ksoftirqd+0x86/0x100 kernel/softirq.c:645
      smpboot_thread_fn+0x417/0x870 kernel/smpboot.c:164
      kthread+0x345/0x410 kernel/kthread.c:240
      ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    Allocated by task 6675:
      save_stack+0x43/0xd0 mm/kasan/kasan.c:448
      set_track mm/kasan/kasan.c:460 [inline]
      kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
      kmem_cache_alloc_trace+0x152/0x780 mm/slab.c:3620
      kmalloc include/linux/slab.h:513 [inline]
      kzalloc include/linux/slab.h:706 [inline]
      dev_map_alloc+0x208/0x7f0 kernel/bpf/devmap.c:102
      find_and_alloc_map kernel/bpf/syscall.c:129 [inline]
      map_create+0x393/0x1010 kernel/bpf/syscall.c:453
      __do_sys_bpf kernel/bpf/syscall.c:2351 [inline]
      __se_sys_bpf kernel/bpf/syscall.c:2328 [inline]
      __x64_sys_bpf+0x303/0x510 kernel/bpf/syscall.c:2328
      do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:290
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 26:
      save_stack+0x43/0xd0 mm/kasan/kasan.c:448
      set_track mm/kasan/kasan.c:460 [inline]
      __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
      kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
      __cache_free mm/slab.c:3498 [inline]
      kfree+0xd9/0x260 mm/slab.c:3813
      dev_map_free+0x4fa/0x670 kernel/bpf/devmap.c:191
      bpf_map_free_deferred+0xba/0xf0 kernel/bpf/syscall.c:262
      process_one_work+0xc64/0x1b70 kernel/workqueue.c:2153
      worker_thread+0x181/0x13a0 kernel/workqueue.c:2296
      kthread+0x345/0x410 kernel/kthread.c:240
      ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    The buggy address belongs to the object at ffff8801b8da37c0
      which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 264 bytes inside of
      512-byte region [ffff8801b8da37c0, ffff8801b8da39c0)
    The buggy address belongs to the page:
    page:ffffea0006e368c0 count:1 mapcount:0 mapping:ffff8801da800940
    index:0xffff8801b8da3540
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0007217b88 ffffea0006e30cc8 ffff8801da800940
    raw: ffff8801b8da3540 ffff8801b8da3040 0000000100000004 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
      ffff8801b8da3780: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
      ffff8801b8da3800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    > ffff8801b8da3880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                   ^
      ffff8801b8da3900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff8801b8da3980: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    
    Fixes: 546ac1ffb70d ("bpf: add devmap, a map for storing net device references")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+457d3e2ffbcf31aee5c0@syzkaller.appspotmail.com
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 08fc98a4d6424af66eb3ac4e2cedd2fc927ed436
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Fri May 10 22:00:33 2019 -0400

    ext4: fix use-after-free in dx_release()
    
    The buffer_head (frames[0].bh) and it's corresping page can be
    potentially free'd once brelse() is done inside the for loop
    but before the for loop exits in dx_release(). It can be free'd
    in another context, when the page cache is flushed via
    drop_caches_sysctl_handler(). This results into below data abort
    when accessing info->indirect_levels in dx_release().
    
    Unable to handle kernel paging request at virtual address ffffffc17ac3e01e
    Call trace:
     dx_release+0x70/0x90
     ext4_htree_fill_tree+0x2d4/0x300
     ext4_readdir+0x244/0x6f8
     iterate_dir+0xbc/0x160
     SyS_getdents64+0x94/0x174
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Cc: stable@kernel.org

commits)
      rtc: snvs: Use __maybe_unused instead of #if CONFIG_PM_SLEEP
      rtc: imxdi: remove unused variable
      rtc: drop set_mms and set_mmss64
      rtc: pcap: convert to SPDX identifier
      rtc: pcap: use .set_time
      rtc: pcap: switch to rtc_time64_to_tm/rtc_tm_to_time64
      rtc: pcap: set range
      rtc: digicolor: convert to SPDX identifier
      rtc: digicolor: use .set_time
      rtc: digicolor: set range
      rtc: digicolor: fix possible race condition
      rtc: jz4740: convert to SPDX identifier
      rtc: jz4740: rework invalid time detection
      rtc: jz4740: use dev_pm_set_wake_irq() to simplify code
      rtc: jz4740: use .set_time
      rtc: jz4740: remove useless check
      rtc: jz4740: switch to rtc_time64_to_tm/rtc_tm_to_time64
      rtc: jz4740: set range
      rtc: 88pm860x: prevent use-after-free on device remove
      rtc: Use dev_get_drvdata()
      ...

commit we also ended up reverting in 5.0
          because of a regression in xfstest generic/311. It turns out that
          the journal changes were mostly innocent and that unfreeze didn't
          wait for the freeze to complete, which caused the filesystem to be
          unmounted before it was actually idle.
    
       - "gfs2: Fix occasional glock use-after-free"
         "gfs2: Fix iomap write page reclaim deadlock"
         "gfs2: Fix lru_count going negative"
    
          Fixes for various problems reported and partially fixed by Citrix
          engineers. Thank you very much.
    
       - "gfs2: clean_journal improperly set sd_log_flush_head"
    
          Another fix from Bob.
    
       - .. and a few other minor cleanups"
    
    * tag 'gfs2-for-5.2' of git://git.kernel.org/pub/scm/linux/kernel/git/gfs2/linux-gfs2:
      gfs2: read journal in large chunks
      gfs2: Fix iomap write page reclaim deadlock
      gfs2: fix race between gfs2_freeze_func and unmount
      gfs2: Rename gfs2_trans_{add_unrevoke => remove_revoke}
      gfs2: Rename sd_log_le_{revoke,ordered}
      gfs2: Remove unnecessary extern declarations
      gfs2: Remove misleading comments in gfs2_evict_inode
      gfs2: Replace gl_revokes with a GLF flag
      gfs2: Fix occasional glock use-after-free
      gfs2: clean_journal improperly set sd_log_flush_head
      gfs2: Fix lru_count going negative
      gfs2: Fix loop in gfs2_rbm_find (v2)

commits)
      scsi: qla2xxx: Avoid that lockdep complains about unsafe locking in tcm_qla2xxx_close_session()
      scsi: qla2xxx: Avoid that qlt_send_resp_ctio() corrupts memory
      scsi: qla2xxx: Fix hardirq-unsafe locking
      scsi: qla2xxx: Complain loudly about reference count underflow
      scsi: qla2xxx: Use __le64 instead of uint32_t[2] for sending DMA addresses to firmware
      scsi: qla2xxx: Introduce the dsd32 and dsd64 data structures
      scsi: qla2xxx: Check the size of firmware data structures at compile time
      scsi: qla2xxx: Pass little-endian values to the firmware
      scsi: qla2xxx: Fix race conditions in the code for aborting SCSI commands
      scsi: qla2xxx: Use an on-stack completion in qla24xx_control_vp()
      scsi: qla2xxx: Make qla24xx_async_abort_cmd() static
      scsi: qla2xxx: Remove unnecessary locking from the target code
      scsi: qla2xxx: Remove qla_tgt_cmd.released
      scsi: qla2xxx: Complain if a command is released that is owned by the firmware
      scsi: qla2xxx: target: Fix offline port handling and host reset handling
      scsi: qla2xxx: Fix abort handling in tcm_qla2xxx_write_pending()
      scsi: qla2xxx: Fix error handling in qlt_alloc_qfull_cmd()
      scsi: qla2xxx: Simplify qlt_send_term_imm_notif()
      scsi: qla2xxx: Fix use-after-free issues in qla2xxx_qpair_sp_free_dma()
      scsi: qla2xxx: Fix a qla24xx_enable_msix() error path
      ...

commit 35399f87e271f7cf3048eab00a421a6519ac8441
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sun May 5 11:03:12 2019 +0800

    configfs: fix possible use-after-free in configfs_register_group
    
    In configfs_register_group(), if create_default_group() failed, we
    forget to unlink the group. It will left a invalid item in the parent list,
    which may trigger the use-after-free issue seen below:
    
    BUG: KASAN: use-after-free in __list_add_valid+0xd4/0xe0 lib/list_debug.c:26
    Read of size 8 at addr ffff8881ef61ae20 by task syz-executor.0/5996
    
    CPU: 1 PID: 5996 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xa9/0x10e lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     __list_add_valid+0xd4/0xe0 lib/list_debug.c:26
     __list_add include/linux/list.h:60 [inline]
     list_add_tail include/linux/list.h:93 [inline]
     link_obj+0xb0/0x190 fs/configfs/dir.c:759
     link_group+0x1c/0x130 fs/configfs/dir.c:784
     configfs_register_group+0x56/0x1e0 fs/configfs/dir.c:1751
     configfs_register_default_group+0x72/0xc0 fs/configfs/dir.c:1834
     ? 0xffffffffc1be0000
     iio_sw_trigger_init+0x23/0x1000 [industrialio_sw_trigger]
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f494ecbcc58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000180 RDI: 0000000000000003
    RBP: 00007f494ecbcc70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f494ecbd6bc
    R13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004
    
    Allocated by task 5987:
     set_track mm/kasan/common.c:87 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:497
     kmalloc include/linux/slab.h:545 [inline]
     kzalloc include/linux/slab.h:740 [inline]
     configfs_register_default_group+0x4c/0xc0 fs/configfs/dir.c:1829
     0xffffffffc1bd0023
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 5987:
     set_track mm/kasan/common.c:87 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:459
     slab_free_hook mm/slub.c:1429 [inline]
     slab_free_freelist_hook mm/slub.c:1456 [inline]
     slab_free mm/slub.c:3003 [inline]
     kfree+0xe1/0x270 mm/slub.c:3955
     configfs_register_default_group+0x9a/0xc0 fs/configfs/dir.c:1836
     0xffffffffc1bd0023
     do_one_initcall+0xbc/0x47d init/main.c:887
     do_init_module+0x1b5/0x547 kernel/module.c:3456
     load_module+0x6405/0x8c10 kernel/module.c:3804
     __do_sys_finit_module+0x162/0x190 kernel/module.c:3898
     do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881ef61ae00
     which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 32 bytes inside of
     192-byte region [ffff8881ef61ae00, ffff8881ef61aec0)
    The buggy address belongs to the page:
    page:ffffea0007bd8680 count:1 mapcount:0 mapping:ffff8881f6c03000 index:0xffff8881ef61a700
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 ffffea0007ca4740 0000000500000005 ffff8881f6c03000
    raw: ffff8881ef61a700 000000008010000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881ef61ad00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8881ef61ad80: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    >ffff8881ef61ae00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                   ^
     ffff8881ef61ae80: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8881ef61af00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 5cf6a51e6062 ("configfs: allow dynamic group creation")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commits)
      ext4: export /sys/fs/ext4/feature/casefold if Unicode support is present
      ext4: fix ext4_show_options for file systems w/o journal
      unicode: refactor the rule for regenerating utf8data.h
      docs: ext4.rst: document case-insensitive directories
      ext4: Support case-insensitive file name lookups
      ext4: include charset encoding information in the superblock
      MAINTAINERS: add Unicode subsystem entry
      unicode: update unicode database unicode version 12.1.0
      unicode: introduce test module for normalized utf8 implementation
      unicode: implement higher level API for string handling
      unicode: reduce the size of utf8data[]
      unicode: introduce code for UTF-8 normalization
      unicode: introduce UTF-8 character database
      ext4: actually request zeroing of inode table after grow
      ext4: cond_resched in work-heavy group loops
      ext4: fix use-after-free race with debug_want_extra_isize
      ext4: avoid drop reference to iloc.bh twice
      ext4: ignore e_value_offs for xattrs with value-in-ea-inode
      ext4: protect journal inode's blocks using block_validity
      ext4: use BUG() instead of BUG_ON(1)
      ...

commit 9287c6452d2b1f24ea8e84bd3cf6f3c6f267f712
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Thu Apr 4 21:11:11 2019 +0100

    gfs2: Fix occasional glock use-after-free
    
    This patch has to do with the life cycle of glocks and buffers.  When
    gfs2 metadata or journaled data is queued to be written, a gfs2_bufdata
    object is assigned to track the buffer, and that is queued to various
    lists, including the glock's gl_ail_list to indicate it's on the active
    items list.  Once the page associated with the buffer has been written,
    it is removed from the ail list, but its life isn't over until a revoke
    has been successfully written.
    
    So after the block is written, its bufdata object is moved from the
    glock's gl_ail_list to a file-system-wide list of pending revokes,
    sd_log_le_revoke.  At that point the glock still needs to track how many
    revokes it contributed to that list (in gl_revokes) so that things like
    glock go_sync can ensure all the metadata has been not only written, but
    also revoked before the glock is granted to a different node.  This is
    to guarantee journal replay doesn't replay the block once the glock has
    been granted to another node.
    
    Ross Lagerwall recently discovered a race in which an inode could be
    evicted, and its glock freed after its ail list had been synced, but
    while it still had unwritten revokes on the sd_log_le_revoke list.  The
    evict decremented the glock reference count to zero, which allowed the
    glock to be freed.  After the revoke was written, function
    revoke_lo_after_commit tried to adjust the glock's gl_revokes counter
    and clear its GLF_LFLUSH flag, at which time it referenced the freed
    glock.
    
    This patch fixes the problem by incrementing the glock reference count
    in gfs2_add_revoke when the glock's first bufdata object is moved from
    the glock to the global revokes list. Later, when the glock's last such
    bufdata object is freed, the reference count is decremented. This
    guarantees that whichever process finishes last (the revoke writing or
    the evict) will properly free the glock, and neither will reference the
    glock after it has been freed.
    
    Reported-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>

commits)
      xfs: change some error-less functions to void types
      xfs: add online scrub for superblock counters
      xfs: don't parse the mtpt mount option
      xfs: always rejoin held resources during defer roll
      xfs: add missing error check in xfs_prepare_shift()
      xfs: scrub should check incore counters against ondisk headers
      xfs: allow scrubbers to pause background reclaim
      xfs: rename the speculative block allocation reclaim toggle functions
      xfs: track delayed allocation reservations across the filesystem
      xfs: fix broken bhold behavior in xrep_roll_ag_trans
      xfs: unlock inode when xfs_ioctl_setattr_get_trans can't get transaction
      xfs: kill the xfs_dqtrx_t typedef
      xfs: widen inode delalloc block counter to 64-bits
      xfs: widen quota block counters to 64-bit integers
      xfs: abort unaligned nowait directio early
      xfs: assert that we don't enter agfl freeing with a non-permanent transaction
      xfs: make tr_growdata a permanent transaction
      xfs: merge adjacent io completions of the same type
      xfs: remove unused m_data_workqueue
      xfs: implement per-inode writeback completion queues
      ...

commit 69a10fb3f4b8769ffd44e4eaa662ab691fa61f4c
Author: Jeff Layton <jlayton@kernel.org>
Date:   Fri Apr 26 13:33:39 2019 -0400

    ceph: fix potential use-after-free in ceph_mdsc_build_path
    
    temp is not defined outside of the RCU critical section here. Ensure
    we grab that value before we drop the rcu_read_lock.
    
    Reported-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 32ac0fa3afebb8b83e3f9189af1a481c0110fe51
Author: Igor Konopko <igor.j.konopko@intel.com>
Date:   Sat May 4 20:38:04 2019 +0200

    lightnvm: pblk: remove internal IO timeout
    
    Currently during pblk padding, there is internal IO timeout introduced,
    which is smaller than default NVMe timeout. This can lead to various
    use-after-free issues. Since in case of any IO timeouts NVMe and block
    layer will handle timeout by themselves and report it back to use,
    there is no need to keep this internal timeout in pblk.
    
    Signed-off-by: Igor Konopko <igor.j.konopko@intel.com>
    Signed-off-by: Matias Bjørling <mb@lightnvm.io>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 3a4ef2e2b5cf9a34bcc66c0d33f7eba180a14535
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Tue Apr 16 15:13:10 2019 +0300

    RDMA/rdmavt: Catch use-after-free access of AH structures
    
    Prior to commit d345691471b4 ("RDMA: Handle AH allocations by IB/core"),
    AH destroy path is rdmavt returned -EBUSY warning to application and
    caused to potential leakage of kernel memory of AH structure.
    
    After that commit, the AH structure is always freed but such early return
    in driver code can potentially cause to use-after-free error.
    
    Add warning to catch such situation to help driver developers to fix AH
    release path.
    
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 8e1943af2986db42bee2b8dddf49a36cdb2e9219
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Apr 17 16:28:37 2019 +0800

    mmc: core: fix possible use after free of host
    
    In the function mmc_alloc_host, the function put_device is called to
    release allocated resources when mmc_gpio_alloc fails. Finally, the
    function pointed by host->class_dev.class->dev_release (i.e.,
    mmc_host_classdev_release) is used to release resources including the
    host structure. However, after put_device, host is used and released
    again. Resulting in a use-after-free bug.
    
    Fixes: 1ed217194488 ("mmc: core: fix error path in mmc_host_alloc")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 2f8f1336a48bd5186de3476da0a3e2ec06d0533a
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Apr 30 09:52:27 2019 +0800

    blk-mq: always free hctx after request queue is freed
    
    In normal queue cleanup path, hctx is released after request queue
    is freed, see blk_mq_release().
    
    However, in __blk_mq_update_nr_hw_queues(), hctx may be freed because
    of hw queues shrinking. This way is easy to cause use-after-free,
    because: one implicit rule is that it is safe to call almost all block
    layer APIs if the request queue is alive; and one hctx may be retrieved
    by one API, then the hctx can be freed by blk_mq_update_nr_hw_queues();
    finally use-after-free is triggered.
    
    Fixes this issue by always freeing hctx after releasing request queue.
    If some hctxs are removed in blk_mq_update_nr_hw_queues(), introduce
    a per-queue list to hold them, then try to resuse these hctxs if numa
    node is matched.
    
    Cc: Dongli Zhang <dongli.zhang@oracle.com>
    Cc: James Smart <james.smart@broadcom.com>
    Cc: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: linux-scsi@vger.kernel.org,
    Cc: Martin K . Petersen <martin.petersen@oracle.com>,
    Cc: Christoph Hellwig <hch@lst.de>,
    Cc: James E . J . Bottomley <jejb@linux.vnet.ibm.com>,
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Tested-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit c7e2d94b3d1634988a95ac4d77a72dc7487ece06
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Apr 30 09:52:25 2019 +0800

    blk-mq: free hw queue's resource in hctx's release handler
    
    Once blk_cleanup_queue() returns, tags shouldn't be used any more,
    because blk_mq_free_tag_set() may be called. Commit 45a9c9d909b2
    ("blk-mq: Fix a use-after-free") fixes this issue exactly.
    
    However, that commit introduces another issue. Before 45a9c9d909b2,
    we are allowed to run queue during cleaning up queue if the queue's
    kobj refcount is held. After that commit, queue can't be run during
    queue cleaning up, otherwise oops can be triggered easily because
    some fields of hctx are freed by blk_mq_free_queue() in blk_cleanup_queue().
    
    We have invented ways for addressing this kind of issue before, such as:
    
            8dc765d438f1 ("SCSI: fix queue cleanup race before queue initialization is done")
            c2856ae2f315 ("blk-mq: quiesce queue before freeing queue")
    
    But still can't cover all cases, recently James reports another such
    kind of issue:
    
            https://marc.info/?l=linux-scsi&m=155389088124782&w=2
    
    This issue can be quite hard to address by previous way, given
    scsi_run_queue() may run requeues for other LUNs.
    
    Fixes the above issue by freeing hctx's resources in its release handler, and this
    way is safe becasue tags isn't needed for freeing such hctx resource.
    
    This approach follows typical design pattern wrt. kobject's release handler.
    
    Cc: Dongli Zhang <dongli.zhang@oracle.com>
    Cc: James Smart <james.smart@broadcom.com>
    Cc: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: linux-scsi@vger.kernel.org,
    Cc: Martin K . Petersen <martin.petersen@oracle.com>,
    Cc: Christoph Hellwig <hch@lst.de>,
    Cc: James E . J . Bottomley <jejb@linux.vnet.ibm.com>,
    Reported-by: James Smart <james.smart@broadcom.com>
    Fixes: 45a9c9d909b2 ("blk-mq: Fix a use-after-free")
    Cc: stable@vger.kernel.org
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commits)
      udp: fix GRO packet of death
      ipv6: A few fixes on dereferencing rt->from
      rds: ib: force endiannes annotation
      selftests: fib_rule_tests: print the result and return 1 if any tests failed
      ipv4: ip_do_fragment: Preserve skb_iif during fragmentation
      net/tls: avoid NULL pointer deref on nskb->sk in fallback
      selftests: fib_rule_tests: Fix icmp proto with ipv6
      packet: validate msg_namelen in send directly
      packet: in recvmsg msg_name return at least sizeof sockaddr_ll
      sctp: avoid running the sctp state machine recursively
      stmmac: pci: Fix typo in IOT2000 comment
      Documentation: fix netdev-FAQ.rst markup warning
      ipv6: fix races in ip6_dst_destroy()
      l2ip: fix possible use-after-free
      appletalk: Set error code if register_snap_client failed
      net: dsa: bcm_sf2: fix buffer overflow doing set_rxnfc
      rxrpc: Fix net namespace cleanup
      ipv6/flowlabel: wait rcu grace period before put_pid()
      vrf: Use orig netdev to count Ip6InNoRoutes and a fresh route lookup when sending dest unreach
      tcp: add sanity tests in tcp_add_backlog()
      ...

commit 7a77dad7e3be1280456508841ccdd2a091b1906a
Author: Andreas Gruenbacher <agruenba@redhat.com>
Date:   Tue Apr 30 08:45:34 2019 -0700

    iomap: Fix use-after-free error in page_done callback
    
    In iomap_write_end, we're not holding a page reference anymore when
    calling the page_done callback, but the callback needs that reference to
    access the page.  To fix that, move the put_page call in
    __generic_write_end into the callers of __generic_write_end.  Then, in
    iomap_write_end, put the page after calling the page_done callback.
    
    Reported-by: Jan Kara <jack@suse.cz>
    Fixes: 63899c6f8851 ("iomap: add a page_done callback")
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit 0e2338749192ce0e52e7174c5352f627632f478a
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 28 12:22:25 2019 -0700

    ipv6: fix races in ip6_dst_destroy()
    
    We had many syzbot reports that seem to be caused by use-after-free
    of struct fib6_info.
    
    ip6_dst_destroy(), fib6_drop_pcpu_from() and rt6_remove_exception()
    are writers vs rt->from, and use non consistent synchronization among
    themselves.
    
    Switching to xchg() will solve the issues with no possible
    lockdep issues.
    
    BUG: KASAN: user-memory-access in atomic_dec_and_test include/asm-generic/atomic-instrumented.h:747 [inline]
    BUG: KASAN: user-memory-access in fib6_info_release include/net/ip6_fib.h:294 [inline]
    BUG: KASAN: user-memory-access in fib6_info_release include/net/ip6_fib.h:292 [inline]
    BUG: KASAN: user-memory-access in fib6_drop_pcpu_from net/ipv6/ip6_fib.c:927 [inline]
    BUG: KASAN: user-memory-access in fib6_purge_rt+0x4f6/0x670 net/ipv6/ip6_fib.c:960
    Write of size 4 at addr 0000000000ffffb4 by task syz-executor.1/7649
    
    CPU: 0 PID: 7649 Comm: syz-executor.1 Not tainted 5.1.0-rc6+ #183
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     kasan_report.cold+0x5/0x40 mm/kasan/report.c:321
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x123/0x190 mm/kasan/generic.c:191
     kasan_check_write+0x14/0x20 mm/kasan/common.c:108
     atomic_dec_and_test include/asm-generic/atomic-instrumented.h:747 [inline]
     fib6_info_release include/net/ip6_fib.h:294 [inline]
     fib6_info_release include/net/ip6_fib.h:292 [inline]
     fib6_drop_pcpu_from net/ipv6/ip6_fib.c:927 [inline]
     fib6_purge_rt+0x4f6/0x670 net/ipv6/ip6_fib.c:960
     fib6_del_route net/ipv6/ip6_fib.c:1813 [inline]
     fib6_del+0xac2/0x10a0 net/ipv6/ip6_fib.c:1844
     fib6_clean_node+0x3a8/0x590 net/ipv6/ip6_fib.c:2006
     fib6_walk_continue+0x495/0x900 net/ipv6/ip6_fib.c:1928
     fib6_walk+0x9d/0x100 net/ipv6/ip6_fib.c:1976
     fib6_clean_tree+0xe0/0x120 net/ipv6/ip6_fib.c:2055
     __fib6_clean_all+0x118/0x2a0 net/ipv6/ip6_fib.c:2071
     fib6_clean_all+0x2b/0x40 net/ipv6/ip6_fib.c:2082
     rt6_sync_down_dev+0x134/0x150 net/ipv6/route.c:4057
     rt6_disable_ip+0x27/0x5f0 net/ipv6/route.c:4062
     addrconf_ifdown+0xa2/0x1220 net/ipv6/addrconf.c:3705
     addrconf_notify+0x19a/0x2260 net/ipv6/addrconf.c:3630
     notifier_call_chain+0xc7/0x240 kernel/notifier.c:93
     __raw_notifier_call_chain kernel/notifier.c:394 [inline]
     raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:401
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1753
     call_netdevice_notifiers_extack net/core/dev.c:1765 [inline]
     call_netdevice_notifiers net/core/dev.c:1779 [inline]
     dev_close_many+0x33f/0x6f0 net/core/dev.c:1522
     rollback_registered_many+0x43b/0xfd0 net/core/dev.c:8177
     rollback_registered+0x109/0x1d0 net/core/dev.c:8242
     unregister_netdevice_queue net/core/dev.c:9289 [inline]
     unregister_netdevice_queue+0x1ee/0x2c0 net/core/dev.c:9282
     unregister_netdevice include/linux/netdevice.h:2658 [inline]
     __tun_detach+0xd5b/0x1000 drivers/net/tun.c:727
     tun_detach drivers/net/tun.c:744 [inline]
     tun_chr_close+0xe0/0x180 drivers/net/tun.c:3443
     __fput+0x2e5/0x8d0 fs/file_table.c:278
     ____fput+0x16/0x20 fs/file_table.c:309
     task_work_run+0x14a/0x1c0 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x90a/0x2fa0 kernel/exit.c:876
     do_group_exit+0x135/0x370 kernel/exit.c:980
     __do_sys_exit_group kernel/exit.c:991 [inline]
     __se_sys_exit_group kernel/exit.c:989 [inline]
     __x64_sys_exit_group+0x44/0x50 kernel/exit.c:989
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458da9
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffeafc2a6a8 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 000000000000001c RCX: 0000000000458da9
    RDX: 0000000000412a80 RSI: 0000000000a54ef0 RDI: 0000000000000043
    RBP: 00000000004be552 R08: 000000000000000c R09: 000000000004c0d1
    R10: 0000000002341940 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00007ffeafc2a7f0 R14: 000000000004c065 R15: 00007ffeafc2a800
    
    Fixes: a68886a69180 ("net/ipv6: Make from in rt6_info rcu protected")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Wei Wang <weiwan@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a622b40035d16196bf19b2b33b854862595245fc
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Apr 30 06:27:58 2019 -0700

    l2ip: fix possible use-after-free
    
    Before taking a refcount on a rcu protected structure,
    we need to make sure the refcount is not zero.
    
    syzbot reported :
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 1 PID: 23533 at lib/refcount.c:156 refcount_inc_checked lib/refcount.c:156 [inline]
    WARNING: CPU: 1 PID: 23533 at lib/refcount.c:156 refcount_inc_checked+0x61/0x70 lib/refcount.c:154
    Kernel panic - not syncing: panic_on_warn set ...
    CPU: 1 PID: 23533 Comm: syz-executor.2 Not tainted 5.1.0-rc7+ #93
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     panic+0x2cb/0x65c kernel/panic.c:214
     __warn.cold+0x20/0x45 kernel/panic.c:571
     report_bug+0x263/0x2b0 lib/bug.c:186
     fixup_bug arch/x86/kernel/traps.c:179 [inline]
     fixup_bug arch/x86/kernel/traps.c:174 [inline]
     do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:272
     do_invalid_op+0x37/0x50 arch/x86/kernel/traps.c:291
     invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:973
    RIP: 0010:refcount_inc_checked lib/refcount.c:156 [inline]
    RIP: 0010:refcount_inc_checked+0x61/0x70 lib/refcount.c:154
    Code: 1d 98 2b 2a 06 31 ff 89 de e8 db 2c 40 fe 84 db 75 dd e8 92 2b 40 fe 48 c7 c7 20 7a a1 87 c6 05 78 2b 2a 06 01 e8 7d d9 12 fe <0f> 0b eb c1 90 90 90 90 90 90 90 90 90 90 90 55 48 89 e5 41 57 41
    RSP: 0018:ffff888069f0fba8 EFLAGS: 00010286
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 000000000000f353 RSI: ffffffff815afcb6 RDI: ffffed100d3e1f67
    RBP: ffff888069f0fbb8 R08: ffff88809b1845c0 R09: ffffed1015d23ef1
    R10: ffffed1015d23ef0 R11: ffff8880ae91f787 R12: ffff8880a8f26968
    R13: 0000000000000004 R14: dffffc0000000000 R15: ffff8880a49a6440
     l2tp_tunnel_inc_refcount net/l2tp/l2tp_core.h:240 [inline]
     l2tp_tunnel_get+0x250/0x580 net/l2tp/l2tp_core.c:173
     pppol2tp_connect+0xc00/0x1c70 net/l2tp/l2tp_ppp.c:702
     __sys_connect+0x266/0x330 net/socket.c:1808
     __do_sys_connect net/socket.c:1819 [inline]
     __se_sys_connect net/socket.c:1816 [inline]
     __x64_sys_connect+0x73/0xb0 net/socket.c:1816
    
    Fixes: 54652eb12c1b ("l2tp: hold tunnel while looking up sessions in l2tp_netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f868405faf067e8cfb6a8349890e82f74616c75
Author: Paul Mackerras <paulus@ozlabs.org>
Date:   Mon Apr 29 11:24:03 2019 +1000

    KVM: PPC: Book3S HV: XIVE: Prevent races when releasing device
    
    Now that we have the possibility of a XIVE or XICS-on-XIVE device being
    released while the VM is still running, we need to be careful about
    races and potential use-after-free bugs.  Although the kvmppc_xive
    struct is not freed, but kept around for re-use, the kvmppc_xive_vcpu
    structs are freed, and they are used extensively in both the XIVE native
    and XICS-on-XIVE code.
    
    There are various ways in which XIVE code gets invoked:
    
    - VCPU entry and exit, which do push and pull operations on the XIVE hardware
    - one_reg get and set functions (vcpu->mutex is held)
    - XICS hypercalls (but only inside guest execution, not from
      kvmppc_pseries_do_hcall)
    - device creation calls (kvm->lock is held)
    - device callbacks - get/set attribute, mmap, pagefault, release/destroy
    - set_mapped/clr_mapped calls (kvm->lock is held)
    - connect_vcpu calls
    - debugfs file read callbacks
    
    Inside a device release function, we know that userspace cannot have an
    open file descriptor referring to the device, nor can it have any mmapped
    regions from the device.  Therefore the device callbacks are excluded,
    as are the connect_vcpu calls (since they need a fd for the device).
    Further, since the caller holds the kvm->lock mutex, no other device
    creation calls or set/clr_mapped calls can be executing concurrently.
    
    To exclude VCPU execution and XICS hypercalls, we temporarily set
    kvm->arch.mmu_ready to 0.  This forces any VCPU task that is trying to
    enter the guest to take the kvm->lock mutex, which is held by the caller
    of the release function.  Then, sending an IPI to all other CPUs forces
    any VCPU currently executing in the guest to exit.
    
    Finally, we take the vcpu->mutex for each VCPU around the process of
    cleaning up and freeing its XIVE data structures, in order to exclude
    any one_reg get/set calls.
    
    To exclude the debugfs read callbacks, we just need to ensure that
    debugfs_remove is called before freeing any data structures.  Once it
    returns we know that no CPU can be executing the callbacks (for our
    kvmppc_xive instance).
    
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>

commit 6c0afef5fb0c27758f4d52b2210c61b6bd8b4470
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 27 16:49:06 2019 -0700

    ipv6/flowlabel: wait rcu grace period before put_pid()
    
    syzbot was able to catch a use-after-free read in pid_nr_ns() [1]
    
    ip6fl_seq_show() seems to use RCU protection, dereferencing fl->owner.pid
    but fl_free() releases fl->owner.pid before rcu grace period is started.
    
    [1]
    
    BUG: KASAN: use-after-free in pid_nr_ns+0x128/0x140 kernel/pid.c:407
    Read of size 4 at addr ffff888094012a04 by task syz-executor.0/18087
    
    CPU: 0 PID: 18087 Comm: syz-executor.0 Not tainted 5.1.0-rc6+ #89
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/generic_report.c:131
     pid_nr_ns+0x128/0x140 kernel/pid.c:407
     ip6fl_seq_show+0x2f8/0x4f0 net/ipv6/ip6_flowlabel.c:794
     seq_read+0xad3/0x1130 fs/seq_file.c:268
     proc_reg_read+0x1fe/0x2c0 fs/proc/inode.c:227
     do_loop_readv_writev fs/read_write.c:701 [inline]
     do_loop_readv_writev fs/read_write.c:688 [inline]
     do_iter_read+0x4a9/0x660 fs/read_write.c:922
     vfs_readv+0xf0/0x160 fs/read_write.c:984
     kernel_readv fs/splice.c:358 [inline]
     default_file_splice_read+0x475/0x890 fs/splice.c:413
     do_splice_to+0x12a/0x190 fs/splice.c:876
     splice_direct_to_actor+0x2d2/0x970 fs/splice.c:953
     do_splice_direct+0x1da/0x2a0 fs/splice.c:1062
     do_sendfile+0x597/0xd00 fs/read_write.c:1443
     __do_sys_sendfile64 fs/read_write.c:1498 [inline]
     __se_sys_sendfile64 fs/read_write.c:1490 [inline]
     __x64_sys_sendfile64+0x15a/0x220 fs/read_write.c:1490
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458da9
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f300d24bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000028
    RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 0000000000458da9
    RDX: 00000000200000c0 RSI: 0000000000000008 RDI: 0000000000000007
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 000000000000005a R11: 0000000000000246 R12: 00007f300d24c6d4
    R13: 00000000004c5fa3 R14: 00000000004da748 R15: 00000000ffffffff
    
    Allocated by task 17543:
     save_stack+0x45/0xd0 mm/kasan/common.c:75
     set_track mm/kasan/common.c:87 [inline]
     __kasan_kmalloc mm/kasan/common.c:497 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:470
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:505
     slab_post_alloc_hook mm/slab.h:437 [inline]
     slab_alloc mm/slab.c:3393 [inline]
     kmem_cache_alloc+0x11a/0x6f0 mm/slab.c:3555
     alloc_pid+0x55/0x8f0 kernel/pid.c:168
     copy_process.part.0+0x3b08/0x7980 kernel/fork.c:1932
     copy_process kernel/fork.c:1709 [inline]
     _do_fork+0x257/0xfd0 kernel/fork.c:2226
     __do_sys_clone kernel/fork.c:2333 [inline]
     __se_sys_clone kernel/fork.c:2327 [inline]
     __x64_sys_clone+0xbf/0x150 kernel/fork.c:2327
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 7789:
     save_stack+0x45/0xd0 mm/kasan/common.c:75
     set_track mm/kasan/common.c:87 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:459
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:467
     __cache_free mm/slab.c:3499 [inline]
     kmem_cache_free+0x86/0x260 mm/slab.c:3765
     put_pid.part.0+0x111/0x150 kernel/pid.c:111
     put_pid+0x20/0x30 kernel/pid.c:105
     fl_free+0xbe/0xe0 net/ipv6/ip6_flowlabel.c:102
     ip6_fl_gc+0x295/0x3e0 net/ipv6/ip6_flowlabel.c:152
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:293
    
    The buggy address belongs to the object at ffff888094012a00
     which belongs to the cache pid_2 of size 88
    The buggy address is located 4 bytes inside of
     88-byte region [ffff888094012a00, ffff888094012a58)
    The buggy address belongs to the page:
    page:ffffea0002500480 count:1 mapcount:0 mapping:ffff88809a483080 index:0xffff888094012980
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea00018a3508 ffffea0002524a88 ffff88809a483080
    raw: ffff888094012980 ffff888094012000 000000010000001b 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888094012900: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
     ffff888094012980: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
    >ffff888094012a00: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
                       ^
     ffff888094012a80: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
     ffff888094012b00: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
    
    Fixes: 4f82f45730c6 ("net ip6 flowlabel: Make owner a union of struct pid * and kuid_t")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d8f945bf8096375f458683b5718722a2d5dda2f0
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Apr 17 14:44:25 2019 -0700

    scsi: qla2xxx: Fix use-after-free issues in qla2xxx_qpair_sp_free_dma()
    
    The current order for freeing memory is as follows:
    - struct crc_context itself.
    - struct crc_context member pointers.
    
    Change the freeing order into the following:
    - struct crc_context member pointers.
    - struct crc_context itself.
    
    Detected by Coverity.
    
    Cc: Himanshu Madhani <hmadhani@marvell.com>
    Cc: Giridhar Malavali <gmalavali@marvell.com>
    Fixes: 50b812755e97 ("scsi: qla2xxx: Fix DMA error when the DIF sg buffer crosses 4GB boundary") # v5.1-rc1.
    Fixes: d74595278f4a ("scsi: qla2xxx: Add multiple queue pair functionality.") # v4.10.
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 68c94e55e1502868813a3cac2febc021d01edb75
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Feb 12 16:13:14 2019 +0200

    btrfs: Transpose btrfs_close_devices/btrfs_mapping_tree_free in close_ctree
    
    Following the introduction of the alloc_state tree, some of the callees
    of btrfs_mapping_tree_free will have to interact with the btrfs_device
    of the constituent devices. Enable this by moving the code responsible
    for freeing devices after the last user (btrfs_mapping_tree_free).
    Otherwise the kernel could crash due to use-after-free.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit f22b1ba15ee5785aa028384ebf77dd39e8e47b70
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Fri Apr 26 14:36:35 2019 -0400

    rtc: 88pm860x: prevent use-after-free on device remove
    
    The device's remove() attempts to shut down the delayed_work scheduled
    on the kernel-global workqueue by calling flush_scheduled_work().
    
    Unfortunately, flush_scheduled_work() does not prevent the delayed_work
    from re-scheduling itself. The delayed_work might run after the device
    has been removed, and touch the already de-allocated info structure.
    This is a potential use-after-free.
    
    Fix by calling cancel_delayed_work_sync() during remove(): this ensures
    that the delayed work is properly cancelled, is no longer running, and
    is not able to re-schedule itself.
    
    This issue was detected with the help of Coccinelle.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>

commit edb16da34b084c66763f29bee42b4e6bb33c3d66
Author: Venkata Narendra Kumar Gutta <vnkgutta@codeaurora.org>
Date:   Mon Apr 22 17:16:29 2019 -0700

    driver core: platform: Fix the usage of platform device name(pdev->name)
    
    Platform core is using pdev->name as the platform device name to do
    the binding of the devices with the drivers. But, when the platform
    driver overrides the platform device name with dev_set_name(),
    the pdev->name is pointing to a location which is freed and becomes
    an invalid parameter to do the binding match.
    
    use-after-free instance:
    
    [   33.325013] BUG: KASAN: use-after-free in strcmp+0x8c/0xb0
    [   33.330646] Read of size 1 at addr ffffffc10beae600 by task modprobe
    [   33.339068] CPU: 5 PID: 518 Comm: modprobe Tainted:
                            G S      W  O      4.19.30+ #3
    [   33.346835] Hardware name: MTP (DT)
    [   33.350419] Call trace:
    [   33.352941]  dump_backtrace+0x0/0x3b8
    [   33.356713]  show_stack+0x24/0x30
    [   33.360119]  dump_stack+0x160/0x1d8
    [   33.363709]  print_address_description+0x84/0x2e0
    [   33.368549]  kasan_report+0x26c/0x2d0
    [   33.372322]  __asan_report_load1_noabort+0x2c/0x38
    [   33.377248]  strcmp+0x8c/0xb0
    [   33.380306]  platform_match+0x70/0x1f8
    [   33.384168]  __driver_attach+0x78/0x3a0
    [   33.388111]  bus_for_each_dev+0x13c/0x1b8
    [   33.392237]  driver_attach+0x4c/0x58
    [   33.395910]  bus_add_driver+0x350/0x560
    [   33.399854]  driver_register+0x23c/0x328
    [   33.403886]  __platform_driver_register+0xd0/0xe0
    
    So, use dev_name(&pdev->dev), which fetches the platform device name from
    the kobject(dev->kobj->name) of the device instead of the pdev->name.
    
    Signed-off-by: Venkata Narendra Kumar Gutta <vnkgutta@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bc04c5c2cc467c5b40f2b03ba08da174a0d5fa7
Author: Barret Rhoden <brho@google.com>
Date:   Thu Apr 25 11:55:50 2019 -0400

    ext4: fix use-after-free race with debug_want_extra_isize
    
    When remounting with debug_want_extra_isize, we were not performing the
    same checks that we do during a normal mount.  That allowed us to set a
    value for s_want_extra_isize that reached outside the s_inode_size.
    
    Fixes: e2b911c53584 ("ext4: clean up feature test macros with predicate functions")
    Reported-by: syzbot+f584efa0ac7213c226b7@syzkaller.appspotmail.com
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Barret Rhoden <brho@google.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@vger.kernel.org

commit 8c380ab4b7b59c0c602743810be1b712514eaebc
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Apr 25 11:44:15 2019 -0400

    ext4: avoid drop reference to iloc.bh twice
    
    The reference to iloc.bh has been dropped in ext4_mark_iloc_dirty.
    However, the reference is dropped again if error occurs during
    ext4_handle_dirty_metadata, which may result in use-after-free bugs.
    
    Fixes: fb265c9cb49e("ext4: add ext4_sb_bread() to disambiguate ENOMEM cases")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@kernel.org

commit 357798909164bf423eac6a78ff7da7e98d2d7f7f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Apr 24 15:59:33 2019 +0200

    gpio: Fix gpiochip_add_data_with_key() error path
    
    The err_remove_chip block is too coarse, and may perform cleanup that
    must not be done.  E.g. if of_gpiochip_add() fails, of_gpiochip_remove()
    is still called, causing:
    
        OF: ERROR: Bad of_node_put() on /soc/gpio@e6050000
        CPU: 1 PID: 20 Comm: kworker/1:1 Not tainted 5.1.0-rc2-koelsch+ #407
        Hardware name: Generic R-Car Gen2 (Flattened Device Tree)
        Workqueue: events deferred_probe_work_func
        [<c020ec74>] (unwind_backtrace) from [<c020ae58>] (show_stack+0x10/0x14)
        [<c020ae58>] (show_stack) from [<c07c1224>] (dump_stack+0x7c/0x9c)
        [<c07c1224>] (dump_stack) from [<c07c5a80>] (kobject_put+0x94/0xbc)
        [<c07c5a80>] (kobject_put) from [<c0470420>] (gpiochip_add_data_with_key+0x8d8/0xa3c)
        [<c0470420>] (gpiochip_add_data_with_key) from [<c0473738>] (gpio_rcar_probe+0x1d4/0x314)
        [<c0473738>] (gpio_rcar_probe) from [<c052fca8>] (platform_drv_probe+0x48/0x94)
    
    and later, if a GPIO consumer tries to use a GPIO from a failed
    controller:
    
        WARNING: CPU: 0 PID: 1 at lib/refcount.c:156 kobject_get+0x38/0x4c
        refcount_t: increment on 0; use-after-free.
        Modules linked in:
        CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.1.0-rc2-koelsch+ #407
        Hardware name: Generic R-Car Gen2 (Flattened Device Tree)
        [<c020ec74>] (unwind_backtrace) from [<c020ae58>] (show_stack+0x10/0x14)
        [<c020ae58>] (show_stack) from [<c07c1224>] (dump_stack+0x7c/0x9c)
        [<c07c1224>] (dump_stack) from [<c0221580>] (__warn+0xd0/0xec)
        [<c0221580>] (__warn) from [<c02215e0>] (warn_slowpath_fmt+0x44/0x6c)
        [<c02215e0>] (warn_slowpath_fmt) from [<c07c58fc>] (kobject_get+0x38/0x4c)
        [<c07c58fc>] (kobject_get) from [<c068b3ec>] (of_node_get+0x14/0x1c)
        [<c068b3ec>] (of_node_get) from [<c0686f24>] (of_find_node_by_phandle+0xc0/0xf0)
        [<c0686f24>] (of_find_node_by_phandle) from [<c0686fbc>] (of_phandle_iterator_next+0x68/0x154)
        [<c0686fbc>] (of_phandle_iterator_next) from [<c0687fe4>] (__of_parse_phandle_with_args+0x40/0xd0)
        [<c0687fe4>] (__of_parse_phandle_with_args) from [<c0688204>] (of_parse_phandle_with_args_map+0x100/0x3ac)
        [<c0688204>] (of_parse_phandle_with_args_map) from [<c0471240>] (of_get_named_gpiod_flags+0x38/0x380)
        [<c0471240>] (of_get_named_gpiod_flags) from [<c046f864>] (gpiod_get_from_of_node+0x24/0xd8)
        [<c046f864>] (gpiod_get_from_of_node) from [<c0470aa4>] (devm_fwnode_get_index_gpiod_from_child+0xa0/0x144)
        [<c0470aa4>] (devm_fwnode_get_index_gpiod_from_child) from [<c05f425c>] (gpio_keys_probe+0x418/0x7bc)
        [<c05f425c>] (gpio_keys_probe) from [<c052fca8>] (platform_drv_probe+0x48/0x94)
    
    Fix this by splitting the cleanup block, and adding a missing call to
    gpiochip_irqchip_remove().
    
    Fixes: 28355f81969962cf ("gpio: defer probe if pinctrl cannot be found")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit f16277ca20acf2c213fcd4b645f4c1cffcadf533
Author: Shenghui Wang <shhuiw@foxmail.com>
Date:   Thu Apr 25 00:48:42 2019 +0800

    bcache: fix wrong usage use-after-freed on keylist in out_nocoalesce branch of btree_gc_coalesce
    
    Elements of keylist should be accessed before the list is freed.
    Move bch_keylist_free() calling after the while loop to avoid wrong
    content accessed.
    
    Signed-off-by: Shenghui Wang <shhuiw@foxmail.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 929eec99f5fd408fbc7e36f6c25fadbd3f45bfa3
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 17 14:25:07 2019 +0100

    drm/i915: Avoid use-after-free in reporting create.size
    
    We have to avoid chasing after a userspace race!
    
    <3>[  473.114328] BUG: KASAN: use-after-free in i915_gem_create+0x1d2/0x1f0 [i915]
    <3>[  473.114389] Read of size 8 at addr ffff88815bf1d840 by task gem_flink_race/1541
    
    <4>[  473.114464] CPU: 1 PID: 1541 Comm: gem_flink_race Tainted: G     U            5.1.0-rc4-g7d07e025e786-kasan_88+ #1
    <4>[  473.114469] Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./J4205-ITX, BIOS P1.10 09/29/2016
    <4>[  473.114474] Call Trace:
    <4>[  473.114488]  dump_stack+0x7c/0xbb
    <4>[  473.114612]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114621]  print_address_description+0x65/0x270
    <4>[  473.114728]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114839]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114848]  kasan_report+0x149/0x18d
    <4>[  473.114962]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.115069]  i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.115176]  ? i915_gem_object_create.part.28+0x4b0/0x4b0 [i915]
    <4>[  473.115289]  ? i915_gem_dumb_create+0x1a0/0x1a0 [i915]
    <4>[  473.115297]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.115306]  ? drm_ioctl_permit+0x280/0x280
    <4>[  473.115326]  drm_ioctl+0x67c/0x960
    <4>[  473.115438]  ? i915_gem_dumb_create+0x1a0/0x1a0 [i915]
    <4>[  473.115448]  ? drm_getstats+0x20/0x20
    <4>[  473.115459]  ? __lock_acquire+0xa66/0x3fe0
    <4>[  473.115474]  ? _raw_spin_unlock_irqrestore+0x39/0x60
    <4>[  473.115485]  ? debug_object_active_state+0x2ea/0x4e0
    <4>[  473.115496]  ? debug_show_all_locks+0x2d0/0x2d0
    <4>[  473.115513]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.115522]  ? check_flags.part.27+0x440/0x440
    <4>[  473.115532]  ? ioctl_preallocate+0x1a0/0x1a0
    <4>[  473.115547]  ? __fget+0x2ac/0x410
    <4>[  473.115561]  ? __ia32_sys_dup3+0xb0/0xb0
    <4>[  473.115569]  ? rwlock_bug.part.0+0x90/0x90
    <4>[  473.115590]  ksys_ioctl+0x35/0x70
    <4>[  473.115597]  ? lockdep_hardirqs_off+0x1cb/0x2b0
    <4>[  473.115608]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.115614]  ? lockdep_hardirqs_on+0x342/0x590
    <4>[  473.115623]  do_syscall_64+0x97/0x400
    <4>[  473.115633]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    <4>[  473.115641] RIP: 0033:0x7fce590d55d7
    <4>[  473.115649] Code: b3 66 90 48 8b 05 b1 48 2d 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 81 48 2d 00 f7 d8 64 89 01 48
    <4>[  473.115655] RSP: 002b:00007fce4d525ba8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    <4>[  473.115662] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fce590d55d7
    <4>[  473.115667] RDX: 00007fce4d525c10 RSI: 00000000c010645b RDI: 0000000000000007
    <4>[  473.115672] RBP: 00007fce4d525c10 R08: 00007fce4d526700 R09: 00007fce4d526700
    <4>[  473.115677] R10: 0000000000000054 R11: 0000000000000246 R12: 00000000c010645b
    <4>[  473.115682] R13: 0000000000000007 R14: 0000000000000000 R15: 00007ffe0e4a7450
    
    <3>[  473.115731] Allocated by task 1541:
    <4>[  473.115766]  kmem_cache_alloc+0xce/0x290
    <4>[  473.115895]  i915_gem_object_create.part.28+0x1c/0x4b0 [i915]
    <4>[  473.116000]  i915_gem_create+0xe3/0x1f0 [i915]
    <4>[  473.116008]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.116013]  drm_ioctl+0x67c/0x960
    <4>[  473.116020]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.116026]  ksys_ioctl+0x35/0x70
    <4>[  473.116032]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.116038]  do_syscall_64+0x97/0x400
    <4>[  473.116044]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    <3>[  473.116071] Freed by task 1542:
    <4>[  473.116101]  kmem_cache_free+0xb7/0x2f0
    <4>[  473.116205]  __i915_gem_free_objects+0x7d4/0xe10 [i915]
    <4>[  473.116311]  i915_gem_create_ioctl+0xaa/0xd0 [i915]
    <4>[  473.116318]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.116323]  drm_ioctl+0x67c/0x960
    <4>[  473.116330]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.116335]  ksys_ioctl+0x35/0x70
    <4>[  473.116341]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.116347]  do_syscall_64+0x97/0x400
    <4>[  473.116354]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Testcase: igt/gem_flink_race/flink_close
    Fixes: e163484afa8d ("drm/i915: Update size upon return from GEM_CREATE")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190417132507.27133-1-chris@chris-wilson.co.uk
    (cherry picked from commit 99534023490686ce4453c45e5cb813535b9bff95)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit 30382dd1cf3a141bfaa568ee183c1892090fa79a
Author: Kalle Valo <kvalo@codeaurora.org>
Date:   Fri Apr 19 10:28:56 2019 +0300

    ath10k: fix use-after-free on SDIO data frames
    
    With SDIO there's a use after free after a data frame is transfered, call stack
    below. This happens because ath10k_htt_tx_hl() directly transmits the skb
    provided by mac80211 using ath10k_htc_send(), all other HTT functions use
    separate skb created with ath10k_htc_alloc_skb() to transmit the HTC packet.
    After the packet is transmitted mac80211 frees the skb in ieee80211_tx_status()
    but HTT layer expects  that it still owns the skb, and frees it in
    ath10k_htt_htc_tx_complete().
    
    To fix this take a reference of skb before sending it to HTC layer to make sure
    we still own the skb.
    
    Tested on QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00007-QCARMSWP-1.
    ath10k_htt_tx_hl() is only used by SDIO and USB so other busses (PCI, AHB and
    SNOC) should be unaffected.
    
    call stack of use-after-free:
    dump_backtrace+0x0/0x2d8
    show_stack+0x20/0x2c
    __dump_stack+0x20/0x28
    dump_stack+0xc8/0xec
    print_address_description+0x74/0x240
    kasan_report+0x258/0x274
    __asan_report_load4_noabort+0x20/0x28
    skb_pull+0xbc/0x114
    ath10k_htc_notify_tx_completion+0x190/0x2a4 [ath10k_core]
    ath10k_sdio_write_async_work+0x1e4/0x2c4 [ath10k_sdio]
    process_one_work+0x3d8/0x8b0
    worker_thread+0x518/0x7e0
    kthread+0x260/0x278
    ret_from_fork+0x10/0x18
    
    Allocated by one task:
    kasan_kmalloc+0xa0/0x13c
    kasan_slab_alloc+0x14/0x1c
    kmem_cache_alloc+0x144/0x208
    __alloc_skb+0xec/0x394
    alloc_skb_with_frags+0x8c/0x374
    sock_alloc_send_pskb+0x520/0x5d4
    sock_alloc_send_skb+0x40/0x50
    __ip_append_data+0xf5c/0x1858
    ip_make_skb+0x194/0x1d4
    udp_sendmsg+0xf24/0x1ab8
    inet_sendmsg+0x1b0/0x2e0
    sock_sendmsg+0x88/0xa0
    __sys_sendto+0x220/0x3a8
    __arm64_sys_sendto+0x78/0x80
    el0_svc_common+0x120/0x1e0
    el0_svc_compat_handler+0x64/0x80
    el0_svc_compat+0x8/0x18
    
    Freed by another task:
    __kasan_slab_free+0x120/0x1d4
    kasan_slab_free+0x10/0x1c
    kmem_cache_free+0x74/0x504
    kfree_skbmem+0x88/0xc8
    __kfree_skb+0x24/0x2c
    consume_skb+0x114/0x18c
    __ieee80211_tx_status+0xb7c/0xf60 [mac80211]
    ieee80211_tx_status+0x224/0x270 [mac80211]
    ath10k_txrx_tx_unref+0x564/0x950 [ath10k_core]
    ath10k_htt_t2h_msg_handler+0x178c/0x2a38 [ath10k_core]
    ath10k_htt_htc_t2h_msg_handler+0x20/0x30 [ath10k_core]
    ath10k_sdio_irq_handler+0xcc0/0x1654 [ath10k_sdio]
    process_sdio_pending_irqs+0xec/0x358
    sdio_run_irqs+0x68/0xe4
    sdio_irq_work+0x1c/0x28
    process_one_work+0x3d8/0x8b0
    worker_thread+0x518/0x7e0
    kthread+0x260/0x278
    ret_from_fork+0x10/0x18
    
    Reported-by: Wen Gong <wgong@codeaurora.org>
    Tested-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit f1267cf3c01b12e0f843fb6a7450a7f0b2efab8a
Author: Bhagavathi Perumal S <bperumal@codeaurora.org>
Date:   Tue Apr 16 12:54:40 2019 +0530

    mac80211: Fix kernel panic due to use of txq after free
    
    The txq of vif is added to active_txqs list for ATF TXQ scheduling
    in the function ieee80211_queue_skb(), but it was not properly removed
    before freeing the txq object. It was causing use after free of the txq
    objects from the active_txqs list, result was kernel panic
    due to invalid memory access.
    
    Fix kernel invalid memory access by properly removing txq object
    from active_txqs list before free the object.
    
    Signed-off-by: Bhagavathi Perumal S <bperumal@codeaurora.org>
    Acked-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 697cd36cda32966bc605bfcf132b0cac4bcd9480
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Apr 22 09:33:19 2019 +0000

    bridge: Fix possible use-after-free when deleting bridge port
    
    When a bridge port is being deleted, do not dereference it later in
    br_vlan_port_event() as it can result in a use-after-free [1] if the RCU
    callback was executed before invoking the function.
    
    [1]
    [  129.638551] ==================================================================
    [  129.646904] BUG: KASAN: use-after-free in br_vlan_port_event+0x53c/0x5fd
    [  129.654406] Read of size 8 at addr ffff8881e4aa1ae8 by task ip/483
    [  129.663008] CPU: 0 PID: 483 Comm: ip Not tainted 5.1.0-rc5-custom-02265-ga946bd73daac #1383
    [  129.672359] Hardware name: Mellanox Technologies Ltd. MSN2100-CB2FO/SA001017, BIOS 5.6.5 06/07/2016
    [  129.682484] Call Trace:
    [  129.685242]  dump_stack+0xa9/0x10e
    [  129.689068]  print_address_description.cold.2+0x9/0x25e
    [  129.694930]  kasan_report.cold.3+0x78/0x9d
    [  129.704420]  br_vlan_port_event+0x53c/0x5fd
    [  129.728300]  br_device_event+0x2c7/0x7a0
    [  129.741505]  notifier_call_chain+0xb5/0x1c0
    [  129.746202]  rollback_registered_many+0x895/0xe90
    [  129.793119]  unregister_netdevice_many+0x48/0x210
    [  129.803384]  rtnl_delete_link+0xe1/0x140
    [  129.815906]  rtnl_dellink+0x2a3/0x820
    [  129.844166]  rtnetlink_rcv_msg+0x397/0x910
    [  129.868517]  netlink_rcv_skb+0x137/0x3a0
    [  129.882013]  netlink_unicast+0x49b/0x660
    [  129.900019]  netlink_sendmsg+0x755/0xc90
    [  129.915758]  ___sys_sendmsg+0x761/0x8e0
    [  129.966315]  __sys_sendmsg+0xf0/0x1c0
    [  129.988918]  do_syscall_64+0xa4/0x470
    [  129.993032]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  129.998696] RIP: 0033:0x7ff578104b58
    ...
    [  130.073811] Allocated by task 479:
    [  130.077633]  __kasan_kmalloc.constprop.5+0xc1/0xd0
    [  130.083008]  kmem_cache_alloc_trace+0x152/0x320
    [  130.088090]  br_add_if+0x39c/0x1580
    [  130.092005]  do_set_master+0x1aa/0x210
    [  130.096211]  do_setlink+0x985/0x3100
    [  130.100224]  __rtnl_newlink+0xc52/0x1380
    [  130.104625]  rtnl_newlink+0x6b/0xa0
    [  130.108541]  rtnetlink_rcv_msg+0x397/0x910
    [  130.113136]  netlink_rcv_skb+0x137/0x3a0
    [  130.117538]  netlink_unicast+0x49b/0x660
    [  130.121939]  netlink_sendmsg+0x755/0xc90
    [  130.126340]  ___sys_sendmsg+0x761/0x8e0
    [  130.130645]  __sys_sendmsg+0xf0/0x1c0
    [  130.134753]  do_syscall_64+0xa4/0x470
    [  130.138864]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  130.146195] Freed by task 0:
    [  130.149421]  __kasan_slab_free+0x125/0x170
    [  130.154016]  kfree+0xf3/0x310
    [  130.157349]  kobject_put+0x1a8/0x4c0
    [  130.161363]  rcu_core+0x859/0x19b0
    [  130.165175]  __do_softirq+0x250/0xa26
    [  130.170956] The buggy address belongs to the object at ffff8881e4aa1ae8
                    which belongs to the cache kmalloc-1k of size 1024
    [  130.184972] The buggy address is located 0 bytes inside of
                    1024-byte region [ffff8881e4aa1ae8, ffff8881e4aa1ee8)
    
    Fixes: 9c0ec2e7182a ("bridge: support binding vlan dev link state to vlan member bridge ports")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Cc: Mike Manning <mmanning@vyatta.att-mail.com>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Acked-by: Mike Manning <mmanning@vyatta.att-mail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6fcc44d1d77fea3c7230e4d109b37f6977aa675a
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Tue Apr 2 20:06:34 2019 +0800

    block: fix use-after-free on gendisk
    
    commit 2da78092dda "block: Fix dev_t minor allocation lifetime"
    specifically moved blk_free_devt(dev->devt) call to part_release()
    to avoid reallocating device number before the device is fully
    shutdown.
    
    However, it can cause use-after-free on gendisk in get_gendisk().
    We use md device as example to show the race scenes:
    
    Process1                Worker                  Process2
    md_free
                                                    blkdev_open
    del_gendisk
      add delete_partition_work_fn() to wq
                                                    __blkdev_get
                                                    get_gendisk
    put_disk
      disk_release
        kfree(disk)
                                                    find part from ext_devt_idr
                                                    get_disk_and_module(disk)
                                                    cause use after free
    
                            delete_partition_work_fn
                            put_device(part)
                            part_release
                            remove part from ext_devt_idr
    
    Before <devt, hd_struct pointer> is removed from ext_devt_idr by
    delete_partition_work_fn(), we can find the devt and then access
    gendisk by hd_struct pointer. But, if we access the gendisk after
    it have been freed, it can cause in use-after-freeon gendisk in
    get_gendisk().
    
    We fix this by adding a new helper blk_invalidate_devt() in
    delete_partition() and del_gendisk(). It replaces hd_struct
    pointer in idr with value 'NULL', and deletes the entry from
    idr in part_release() as we do now.
    
    Thanks to Jan Kara for providing the solution and more clear comments
    for the code.
    
    Fixes: 2da78092dda1 ("block: Fix dev_t minor allocation lifetime")
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 12fc512f5741443a03adde2ead20724da8ad550a
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Fri Mar 15 16:41:43 2019 +0200

    net/mlx5e: Fix use-after-free after xdp_return_frame
    
    xdp_return_frame releases the frame. It leads to releasing the page, so
    it's not allowed to access xdpi.xdpf->len after that, because xdpi.xdpf
    is at xdp->data_hard_start after convert_to_xdp_frame. This patch moves
    the memory access to precede the return of the frame.
    
    Fixes: 58b99ee3e3ebe ("net/mlx5e: Add support for XDP_REDIRECT in device-out side")
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commits)
      staging: comedi: ni_usb6501: Fix possible double-free of ->usb_rx_buf
      staging: comedi: ni_usb6501: Fix use of uninitialized mutex
      staging: erofs: fix unexpected out-of-bound data access
      staging: comedi: vmk80xx: Fix possible double-free of ->usb_rx_buf
      staging: comedi: vmk80xx: Fix use of uninitialized semaphore
      staging: most: core: use device description as name
      iio: core: fix a possible circular locking dependency
      iio: ad_sigma_delta: select channel when reading register
      iio: pms7003: select IIO_TRIGGERED_BUFFER
      iio: cros_ec: Fix the maths for gyro scale calculation
      iio: adc: xilinx: prevent touching unclocked h/w on remove
      iio: adc: xilinx: fix potential use-after-free on probe
      iio: adc: xilinx: fix potential use-after-free on remove
      iio: dac: mcp4725: add missing powerdown bits in store eeprom
      io: accel: kxcjk1013: restore the range after resume.
      iio:chemical:bme680: Fix SPI read interface
      iio:chemical:bme680: Fix, report temperature in millidegrees
      iio: chemical: fix missing Kconfig block for sgp30
      iio: adc: at91: disable adc channel interrupt in timeout case
      iio: gyro: mpu3050: fix chip ID reading
      ...

commit 4a8108b70508df0b6c4ffa4a3974dab93dcbe851
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 9 23:46:32 2019 -0700

    crypto: arm64/aes-neonbs - don't access already-freed walk.iv
    
    If the user-provided IV needs to be aligned to the algorithm's
    alignmask, then skcipher_walk_virt() copies the IV into a new aligned
    buffer walk.iv.  But skcipher_walk_virt() can fail afterwards, and then
    if the caller unconditionally accesses walk.iv, it's a use-after-free.
    
    xts-aes-neonbs doesn't set an alignmask, so currently it isn't affected
    by this despite unconditionally accessing walk.iv.  However this is more
    subtle than desired, and unconditionally accessing walk.iv has caused a
    real problem in other algorithms.  Thus, update xts-aes-neonbs to start
    checking the return value of skcipher_walk_virt().
    
    Fixes: 1abee99eafab ("crypto: arm64/aes - reimplement bit-sliced ARM/NEON implementation for arm64")
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 767f015ea0b7ab9d60432ff6cd06b664fd71f50f
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 9 23:46:31 2019 -0700

    crypto: arm/aes-neonbs - don't access already-freed walk.iv
    
    If the user-provided IV needs to be aligned to the algorithm's
    alignmask, then skcipher_walk_virt() copies the IV into a new aligned
    buffer walk.iv.  But skcipher_walk_virt() can fail afterwards, and then
    if the caller unconditionally accesses walk.iv, it's a use-after-free.
    
    arm32 xts-aes-neonbs doesn't set an alignmask, so currently it isn't
    affected by this despite unconditionally accessing walk.iv.  However
    this is more subtle than desired, and it was actually broken prior to
    the alignmask being removed by commit cc477bf64573 ("crypto: arm/aes -
    replace bit-sliced OpenSSL NEON code").  Thus, update xts-aes-neonbs to
    start checking the return value of skcipher_walk_virt().
    
    Fixes: e4e7f10bfc40 ("ARM: add support for bit sliced AES using NEON instructions")
    Cc: <stable@vger.kernel.org> # v3.13+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit edaf28e996af69222b2cb40455dbb5459c2b875a
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 9 23:46:30 2019 -0700

    crypto: salsa20 - don't access already-freed walk.iv
    
    If the user-provided IV needs to be aligned to the algorithm's
    alignmask, then skcipher_walk_virt() copies the IV into a new aligned
    buffer walk.iv.  But skcipher_walk_virt() can fail afterwards, and then
    if the caller unconditionally accesses walk.iv, it's a use-after-free.
    
    salsa20-generic doesn't set an alignmask, so currently it isn't affected
    by this despite unconditionally accessing walk.iv.  However this is more
    subtle than desired, and it was actually broken prior to the alignmask
    being removed by commit b62b3db76f73 ("crypto: salsa20-generic - cleanup
    and convert to skcipher API").
    
    Since salsa20-generic does not update the IV and does not need any IV
    alignment, update it to use req->iv instead of walk.iv.
    
    Fixes: 2407d60872dd ("[CRYPTO] salsa20: Salsa20 stream cipher")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit aec286cd36eacfd797e3d5dab8d5d23c15d1bb5e
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 9 23:46:29 2019 -0700

    crypto: lrw - don't access already-freed walk.iv
    
    If the user-provided IV needs to be aligned to the algorithm's
    alignmask, then skcipher_walk_virt() copies the IV into a new aligned
    buffer walk.iv.  But skcipher_walk_virt() can fail afterwards, and then
    if the caller unconditionally accesses walk.iv, it's a use-after-free.
    
    Fix this in the LRW template by checking the return value of
    skcipher_walk_virt().
    
    This bug was detected by my patches that improve testmgr to fuzz
    algorithms against their generic implementation.  When the extra
    self-tests were run on a KASAN-enabled kernel, a KASAN use-after-free
    splat occured during lrw(aes) testing.
    
    Fixes: c778f96bf347 ("crypto: lrw - Optimize tweak computation")
    Cc: <stable@vger.kernel.org> # v4.20+
    Cc: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 3b9a907223d7f6b9d1dadea29436842ae9bcd76d
Author: Corey Minyard <cminyard@mvista.com>
Date:   Wed Apr 3 15:58:16 2019 -0500

    ipmi: fix sleep-in-atomic in free_user at cleanup SRCU user->release_barrier
    
    free_user() could be called in atomic context.
    
    This patch pushed the free operation off into a workqueue.
    
    Example:
    
     BUG: sleeping function called from invalid context at kernel/workqueue.c:2856
     in_atomic(): 1, irqs_disabled(): 0, pid: 177, name: ksoftirqd/27
     CPU: 27 PID: 177 Comm: ksoftirqd/27 Not tainted 4.19.25-3 #1
     Hardware name: AIC 1S-HV26-08/MB-DPSB04-06, BIOS IVYBV060 10/21/2015
     Call Trace:
      dump_stack+0x5c/0x7b
      ___might_sleep+0xec/0x110
      __flush_work+0x48/0x1f0
      ? try_to_del_timer_sync+0x4d/0x80
      _cleanup_srcu_struct+0x104/0x140
      free_user+0x18/0x30 [ipmi_msghandler]
      ipmi_free_recv_msg+0x3a/0x50 [ipmi_msghandler]
      deliver_response+0xbd/0xd0 [ipmi_msghandler]
      deliver_local_response+0xe/0x30 [ipmi_msghandler]
      handle_one_recv_msg+0x163/0xc80 [ipmi_msghandler]
      ? dequeue_entity+0xa0/0x960
      handle_new_recv_msgs+0x15c/0x1f0 [ipmi_msghandler]
      tasklet_action_common.isra.22+0x103/0x120
      __do_softirq+0xf8/0x2d7
      run_ksoftirqd+0x26/0x50
      smpboot_thread_fn+0x11d/0x1e0
      kthread+0x103/0x140
      ? sort_range+0x20/0x20
      ? kthread_destroy_worker+0x40/0x40
      ret_from_fork+0x1f/0x40
    
    Fixes: 77f8269606bf ("ipmi: fix use-after-free of user->release_barrier.rda")
    
    Reported-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Cc: stable@vger.kernel.org # 5.0
    Cc: Yang Yingliang <yangyingliang@huawei.com>

commit 99534023490686ce4453c45e5cb813535b9bff95
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 17 14:25:07 2019 +0100

    drm/i915: Avoid use-after-free in reporting create.size
    
    We have to avoid chasing after a userspace race!
    
    <3>[  473.114328] BUG: KASAN: use-after-free in i915_gem_create+0x1d2/0x1f0 [i915]
    <3>[  473.114389] Read of size 8 at addr ffff88815bf1d840 by task gem_flink_race/1541
    
    <4>[  473.114464] CPU: 1 PID: 1541 Comm: gem_flink_race Tainted: G     U            5.1.0-rc4-g7d07e025e786-kasan_88+ #1
    <4>[  473.114469] Hardware name: To Be Filled By O.E.M. To Be Filled By O.E.M./J4205-ITX, BIOS P1.10 09/29/2016
    <4>[  473.114474] Call Trace:
    <4>[  473.114488]  dump_stack+0x7c/0xbb
    <4>[  473.114612]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114621]  print_address_description+0x65/0x270
    <4>[  473.114728]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114839]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.114848]  kasan_report+0x149/0x18d
    <4>[  473.114962]  ? i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.115069]  i915_gem_create+0x1d2/0x1f0 [i915]
    <4>[  473.115176]  ? i915_gem_object_create.part.28+0x4b0/0x4b0 [i915]
    <4>[  473.115289]  ? i915_gem_dumb_create+0x1a0/0x1a0 [i915]
    <4>[  473.115297]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.115306]  ? drm_ioctl_permit+0x280/0x280
    <4>[  473.115326]  drm_ioctl+0x67c/0x960
    <4>[  473.115438]  ? i915_gem_dumb_create+0x1a0/0x1a0 [i915]
    <4>[  473.115448]  ? drm_getstats+0x20/0x20
    <4>[  473.115459]  ? __lock_acquire+0xa66/0x3fe0
    <4>[  473.115474]  ? _raw_spin_unlock_irqrestore+0x39/0x60
    <4>[  473.115485]  ? debug_object_active_state+0x2ea/0x4e0
    <4>[  473.115496]  ? debug_show_all_locks+0x2d0/0x2d0
    <4>[  473.115513]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.115522]  ? check_flags.part.27+0x440/0x440
    <4>[  473.115532]  ? ioctl_preallocate+0x1a0/0x1a0
    <4>[  473.115547]  ? __fget+0x2ac/0x410
    <4>[  473.115561]  ? __ia32_sys_dup3+0xb0/0xb0
    <4>[  473.115569]  ? rwlock_bug.part.0+0x90/0x90
    <4>[  473.115590]  ksys_ioctl+0x35/0x70
    <4>[  473.115597]  ? lockdep_hardirqs_off+0x1cb/0x2b0
    <4>[  473.115608]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.115614]  ? lockdep_hardirqs_on+0x342/0x590
    <4>[  473.115623]  do_syscall_64+0x97/0x400
    <4>[  473.115633]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    <4>[  473.115641] RIP: 0033:0x7fce590d55d7
    <4>[  473.115649] Code: b3 66 90 48 8b 05 b1 48 2d 00 64 c7 00 26 00 00 00 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 b8 10 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 81 48 2d 00 f7 d8 64 89 01 48
    <4>[  473.115655] RSP: 002b:00007fce4d525ba8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    <4>[  473.115662] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fce590d55d7
    <4>[  473.115667] RDX: 00007fce4d525c10 RSI: 00000000c010645b RDI: 0000000000000007
    <4>[  473.115672] RBP: 00007fce4d525c10 R08: 00007fce4d526700 R09: 00007fce4d526700
    <4>[  473.115677] R10: 0000000000000054 R11: 0000000000000246 R12: 00000000c010645b
    <4>[  473.115682] R13: 0000000000000007 R14: 0000000000000000 R15: 00007ffe0e4a7450
    
    <3>[  473.115731] Allocated by task 1541:
    <4>[  473.115766]  kmem_cache_alloc+0xce/0x290
    <4>[  473.115895]  i915_gem_object_create.part.28+0x1c/0x4b0 [i915]
    <4>[  473.116000]  i915_gem_create+0xe3/0x1f0 [i915]
    <4>[  473.116008]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.116013]  drm_ioctl+0x67c/0x960
    <4>[  473.116020]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.116026]  ksys_ioctl+0x35/0x70
    <4>[  473.116032]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.116038]  do_syscall_64+0x97/0x400
    <4>[  473.116044]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    <3>[  473.116071] Freed by task 1542:
    <4>[  473.116101]  kmem_cache_free+0xb7/0x2f0
    <4>[  473.116205]  __i915_gem_free_objects+0x7d4/0xe10 [i915]
    <4>[  473.116311]  i915_gem_create_ioctl+0xaa/0xd0 [i915]
    <4>[  473.116318]  drm_ioctl_kernel+0x192/0x260
    <4>[  473.116323]  drm_ioctl+0x67c/0x960
    <4>[  473.116330]  do_vfs_ioctl+0x18d/0xfa0
    <4>[  473.116335]  ksys_ioctl+0x35/0x70
    <4>[  473.116341]  __x64_sys_ioctl+0x6a/0xb0
    <4>[  473.116347]  do_syscall_64+0x97/0x400
    <4>[  473.116354]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Testcase: igt/gem_flink_race/flink_close
    Fixes: e163484afa8d ("drm/i915: Update size upon return from GEM_CREATE")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190417132507.27133-1-chris@chris-wilson.co.uk

commit 3b2e2904deb314cc77a2192f506f2fd44e3d10d0
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Apr 11 13:56:39 2019 +0300

    net: bridge: fix per-port af_packet sockets
    
    When the commit below was introduced it changed two visible things:
     - the skb was no longer passed through the protocol handlers with the
       original device
     - the skb was passed up the stack with skb->dev = bridge
    
    The first change broke af_packet sockets on bridge ports. For example we
    use them for hostapd which listens for ETH_P_PAE packets on the ports.
    We discussed two possible fixes:
     - create a clone and pass it through NF_HOOK(), act on the original skb
       based on the result
     - somehow signal to the caller from the okfn() that it was called,
       meaning the skb is ok to be passed, which this patch is trying to
       implement via returning 1 from the bridge link-local okfn()
    
    Note that we rely on the fact that NF_QUEUE/STOLEN would return 0 and
    drop/error would return < 0 thus the okfn() is called only when the
    return was 1, so we signal to the caller that it was called by preserving
    the return value from nf_hook().
    
    Fixes: 8626c56c8279 ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 088aaf17aa79300cab14dbee2569c58cfafd7d6e
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Apr 6 15:47:39 2019 +0800

    cifs: Fix use-after-free in SMB2_read
    
    There is a KASAN use-after-free:
    BUG: KASAN: use-after-free in SMB2_read+0x1136/0x1190
    Read of size 8 at addr ffff8880b4e45e50 by task ln/1009
    
    Should not release the 'req' because it will use in the trace.
    
    Fixes: eccb4422cf97 ("smb3: Add ftrace tracepoints for improved SMB3 debugging")
    
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org> 4.18+
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>

commit 6a3eb3360667170988f8a6477f6686242061488a
Author: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sat Apr 6 15:47:38 2019 +0800

    cifs: Fix use-after-free in SMB2_write
    
    There is a KASAN use-after-free:
    BUG: KASAN: use-after-free in SMB2_write+0x1342/0x1580
    Read of size 8 at addr ffff8880b6a8e450 by task ln/4196
    
    Should not release the 'req' because it will use in the trace.
    
    Fixes: eccb4422cf97 ("smb3: Add ftrace tracepoints for improved SMB3 debugging")
    
    Signed-off-by: ZhangXiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    CC: Stable <stable@vger.kernel.org> 4.18+
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>

commit 1710ac17547ac8b5c44fbd74de41dee3fe26ee81
Author: Himanshu Madhani <hmadhani@marvell.com>
Date:   Fri Apr 12 14:33:09 2019 -0700

    scsi: qla2xxx: Fix read offset in qla24xx_load_risc_flash()
    
    This patch fixes regression introduced by commit f8f97b0c5b7f ("scsi:
    qla2xxx: Cleanups for NVRAM/Flash read/write path") where flash read/write
    routine cleanup left out code which resulted into checksum failure leading
    to use-after-free stack during driver load.
    
    Following stack trace is seen in the log file
    
    qla2xxx [0000:00:00.0]-0005: : QLogic Fibre Channel HBA Driver: 10.01.00.16-k.
    qla2xxx [0000:00:0b.0]-001d: : Found an ISP2532 irq 11 iobase 0x0000000000f47f03.
    qla2xxx [0000:00:0b.0]-00cd:8: ISP Firmware failed checksum.
    qla2xxx [0000:00:0b.0]-00cf:8: Setup chip ****FAILED****.
    qla2xxx [0000:00:0b.0]-00d6:8: Failed to initialize adapter - Adapter flags 2.
    ==================================================================
    BUG: KASAN: use-after-free in __list_del_entry_valid+0x15/0xd0
    Read of size 8 at addr ffff8880ca05a490 by task modprobe/857
    
    CPU: 0 PID: 857 Comm: modprobe Not tainted 5.1.0-rc1-dbg+ #4
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    Call Trace:
      dump_stack+0x86/0xca
      print_address_description+0x6c/0x234
      ? __list_del_entry_valid+0x15/0xd0
      kasan_report.cold.3+0x1b/0x34
      ? __list_del_entry_valid+0x15/0xd0
      ? __kmem_cache_shutdown.cold.95+0xf5/0x176
      ? __list_del_entry_valid+0x15/0xd0
      __asan_load8+0x54/0x90
      __list_del_entry_valid+0x15/0xd0
      dma_pool_destroy+0x4f/0x260
      ? dma_free_attrs+0xb4/0xd0
      qla2x00_mem_free+0x529/0xcc0 [qla2xxx]
      ? kobject_put+0xdb/0x230
      qla2x00_probe_one+0x2b5e/0x45f0 [qla2xxx]
      ? qla2xxx_pci_error_detected+0x210/0x210 [qla2xxx]
      ? match_held_lock+0x20/0x240
      ? find_held_lock+0xca/0xf0
      ? mark_held_locks+0x86/0xb0
      ? _raw_spin_unlock_irqrestore+0x52/0x60
      ? __pm_runtime_resume+0x5b/0xb0
      ? lockdep_hardirqs_on+0x185/0x260
      ? _raw_spin_unlock_irqrestore+0x52/0x60
      ? trace_hardirqs_on+0x24/0x130
      ? preempt_count_sub+0x13/0xc0
      ? _raw_spin_unlock_irqrestore+0x3d/0x60
      pci_device_probe+0x154/0x1e0
      really_probe+0x17d/0x540
      ? device_driver_attach+0x90/0x90
      driver_probe_device+0x113/0x170
      ? device_driver_attach+0x90/0x90
      device_driver_attach+0x88/0x90
      __driver_attach+0xb5/0x190
      bus_for_each_dev+0xf8/0x160
      ? subsys_dev_iter_exit+0x10/0x10
      ? kasan_check_read+0x11/0x20
      ? preempt_count_sub+0x13/0xc0
      ? _raw_spin_unlock+0x2c/0x50
      driver_attach+0x26/0x30
      bus_add_driver+0x238/0x2f0
      driver_register+0xd7/0x150
      __pci_register_driver+0xd5/0xe0
      ? 0xffffffffa06c8000
      qla2x00_module_init+0x208/0x254 [qla2xxx]
      do_one_initcall+0xc0/0x3c9
      ? trace_event_raw_event_initcall_finish+0x150/0x150
      ? __kasan_kmalloc.constprop.5+0xc7/0xd0
      ? kasan_unpoison_shadow+0x35/0x50
      ? kasan_poison_shadow+0x2f/0x40
      ? __asan_register_globals+0x5a/0x70
      do_init_module+0x103/0x330
      load_module+0x36df/0x3b70
      ? fsnotify+0x611/0x640
      ? module_frob_arch_sections+0x20/0x20
      ? kernel_read+0x74/0xa0
      ? kasan_check_write+0x14/0x20
      ? kernel_read_file+0x25e/0x320
      ? do_mmap+0x42c/0x6c0
      __do_sys_finit_module+0x133/0x1c0
      ? __do_sys_finit_module+0x133/0x1c0
      ? __do_sys_init_module+0x210/0x210
      ? fput_many+0x1b/0xc0
      ? fput+0xe/0x10
      ? do_syscall_64+0x14/0x210
      ? entry_SYSCALL_64_after_hwframe+0x49/0xbe
      __x64_sys_finit_module+0x3e/0x50
      do_syscall_64+0x72/0x210
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f8bd5c03219
    Code: 00 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 47 fc 0c 00 f7 d8 64 89 01 48
    RSP: 002b:00007fff9d11de98 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000055ef21596b50 RCX: 00007f8bd5c03219
    RDX: 0000000000000000 RSI: 000055ef21596570 RDI: 0000000000000004
    RBP: 000055ef21596570 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000004 R11: 0000000000000246 R12: 0000000000000000
    R13: 000055ef21596c80 R14: 0000000000040000 R15: 000055ef21596b50
    
    Allocated by task 857:
      save_stack+0x43/0xd0
      __kasan_kmalloc.constprop.5+0xc7/0xd0
      kasan_kmalloc+0x9/0x10
      kmem_cache_alloc_trace+0x144/0x300
      dma_pool_create+0xb5/0x3b0
      qla2x00_mem_alloc+0xb98/0x1ad0 [qla2xxx]
      qla2x00_probe_one+0xe28/0x45f0 [qla2xxx]
      pci_device_probe+0x154/0x1e0
      really_probe+0x17d/0x540
      driver_probe_device+0x113/0x170
      device_driver_attach+0x88/0x90
      __driver_attach+0xb5/0x190
      bus_for_each_dev+0xf8/0x160
      driver_attach+0x26/0x30
      bus_add_driver+0x238/0x2f0
      driver_register+0xd7/0x150
      __pci_register_driver+0xd5/0xe0
      qla2x00_module_init+0x208/0x254 [qla2xxx]
      do_one_initcall+0xc0/0x3c9
      do_init_module+0x103/0x330
      load_module+0x36df/0x3b70
      __do_sys_finit_module+0x133/0x1c0
      __x64_sys_finit_module+0x3e/0x50
      do_syscall_64+0x72/0x210
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 857:
      save_stack+0x43/0xd0
      __kasan_slab_free+0x139/0x190
      kasan_slab_free+0xe/0x10
      kfree+0xf0/0x2c0
      dma_pool_destroy+0x24c/0x260
      qla2x00_mem_free+0x529/0xcc0 [qla2xxx]
      qla2x00_free_device+0x167/0x1b0 [qla2xxx]
      qla2x00_probe_one+0x2b28/0x45f0 [qla2xxx]
      pci_device_probe+0x154/0x1e0
      really_probe+0x17d/0x540
      driver_probe_device+0x113/0x170
      device_driver_attach+0x88/0x90
      __driver_attach+0xb5/0x190
      bus_for_each_dev+0xf8/0x160
      driver_attach+0x26/0x30
      bus_add_driver+0x238/0x2f0
      driver_register+0xd7/0x150
      __pci_register_driver+0xd5/0xe0
      qla2x00_module_init+0x208/0x254 [qla2xxx]
      do_one_initcall+0xc0/0x3c9
      do_init_module+0x103/0x330
      load_module+0x36df/0x3b70
      __do_sys_finit_module+0x133/0x1c0
      __x64_sys_finit_module+0x3e/0x50
      do_syscall_64+0x72/0x210
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8880ca05a400
      which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 144 bytes inside of
      192-byte region [ffff8880ca05a400, ffff8880ca05a4c0)
    The buggy address belongs to the page:
    page:ffffea0003281680 count:1 mapcount:0 mapping:ffff88811bf03380 index:0x0 compound_mapcount: 0
    flags: 0x4000000000010200(slab|head)
    raw: 4000000000010200 0000000000000000 0000000c00000001 ffff88811bf03380
    raw: 0000000000000000 0000000080200020 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
      ffff8880ca05a380: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
      ffff8880ca05a400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8880ca05a480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
                              ^
      ffff8880ca05a500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ffff8880ca05a580: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    ==================================================================
    
    Fixes: f8f97b0c5b7f ("scsi: qla2xxx: Cleanups for NVRAM/Flash read/write path")
    Reported-by: Bart Van Assche <bvanassche@acm.org>
    Tested-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 2c88e3c7ec32d7a40cc7c9b4a487cf90e4671bdd
Author: Yufen Yu <yuyufen@huawei.com>
Date:   Tue Apr 2 20:06:34 2019 +0800

    block: fix use-after-free on gendisk
    
    commit 2da78092dda "block: Fix dev_t minor allocation lifetime"
    specifically moved blk_free_devt(dev->devt) call to part_release()
    to avoid reallocating device number before the device is fully
    shutdown.
    
    However, it can cause use-after-free on gendisk in get_gendisk().
    We use md device as example to show the race scenes:
    
    Process1                Worker                  Process2
    md_free
                                                    blkdev_open
    del_gendisk
      add delete_partition_work_fn() to wq
                                                    __blkdev_get
                                                    get_gendisk
    put_disk
      disk_release
        kfree(disk)
                                                    find part from ext_devt_idr
                                                    get_disk_and_module(disk)
                                                    cause use after free
    
                            delete_partition_work_fn
                            put_device(part)
                            part_release
                            remove part from ext_devt_idr
    
    Before <devt, hd_struct pointer> is removed from ext_devt_idr by
    delete_partition_work_fn(), we can find the devt and then access
    gendisk by hd_struct pointer. But, if we access the gendisk after
    it have been freed, it can cause in use-after-freeon gendisk in
    get_gendisk().
    
    We fix this by adding a new helper blk_invalidate_devt() in
    delete_partition() and del_gendisk(). It replaces hd_struct
    pointer in idr with value 'NULL', and deletes the entry from
    idr in part_release() as we do now.
    
    Thanks to Jan Kara for providing the solution and more clear comments
    for the code.
    
    Fixes: 2da78092dda1 ("block: Fix dev_t minor allocation lifetime")
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Suggested-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Yufen Yu <yuyufen@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 4d09807f20462d6edf04f6e98d3d47bcdf7a5e2f
Author: Brian Foster <bfoster@redhat.com>
Date:   Fri Apr 12 07:39:19 2019 -0700

    xfs: fix use after free in buf log item unlock assert
    
    The xfs_buf_log_item ->iop_unlock() callback asserts that the buffer
    is unlocked when either non-stale or aborted. This assert occurs
    after the bli refcount has been dropped and the log item potentially
    freed. The aborted check is thus a potential use after free. This
    problem has been reproduced with KASAN enabled via generic/475.
    
    Fix up xfs_buf_item_unlock() to query aborted state before the bli
    reference is dropped to prevent a potential use after free.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commits)
      gpu: host1x: Fix compile error when IOMMU API is not available
      drm/i915/gvt: Roundup fb->height into tile's height at calucation fb->size
      drm/i915/dp: revert back to max link rate and lane count on eDP
      drm/i915/icl: Fix port disable sequence for mipi-dsi
      drm/i915/icl: Ungate ddi clocks before IO enable
      drm/mediatek: no change parent rate in round_rate() for MT2701 hdmi phy
      drm/mediatek: using new factor for tvdpll for MT2701 hdmi phy
      drm/mediatek: remove flag CLK_SET_RATE_PARENT for MT2701 hdmi phy
      drm/mediatek: make implementation of recalc_rate() for MT2701 hdmi phy
      drm/mediatek: fix the rate and divder of hdmi phy for MT2701
      drm/mediatek: fix possible object reference leak
      drm/i915: Get power refs in encoder->get_power_domains()
      drm/i915: Fix pipe_bpp readout for BXT/GLK DSI
      drm/amd/display: Fix negative cursor pos programming (v2)
      drm/sun4i: tcon top: Fix NULL/invalid pointer dereference in sun8i_tcon_top_un/bind
      drm/udl: add a release method and delay modeset teardown
      drm/i915/gvt: Prevent use-after-free in ppgtt_free_all_spt()
      drm/i915/gvt: Annotate iomem usage
      drm/sun4i: DW HDMI: Lower max. supported rate for H6
      Revert "Documentation/gpu/meson: Remove link to meson_canvas.c"
      ...

commit f61bca58f6c36e666c2b807697f25e5e98708162
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Thu Apr 11 11:17:34 2019 +0200

    net/smc: move unhash before release of clcsock
    
    Commit <26d92e951fe0>
    ("net/smc: move unhash as early as possible in smc_release()")
    fixes one occurrence in the smc code, but the same pattern exists
    in other places. This patch covers the remaining occurrences and
    makes sure, the unhash operation is done before the smc->clcsock is
    released. This avoids a potential use-after-free in smc_diag_dump().
    
    Reviewed-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 988dc4a9a3b66be75b30405a5494faf0dc7cffb6
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Tue Apr 9 11:47:20 2019 +0200

    net: fou: do not use guehdr after iptunnel_pull_offloads in gue_udp_recv
    
    gue tunnels run iptunnel_pull_offloads on received skbs. This can
    determine a possible use-after-free accessing guehdr pointer since
    the packet will be 'uncloned' running pskb_expand_head if it is a
    cloned gso skb (e.g if the packet has been sent though a veth device)
    
    Fixes: a09a4c8dd1ec ("tunnels: Remove encapsulation offloads on decap")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f51dcd0f621caac5380ce90fbbeafc32ce4517ae
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Apr 10 14:04:34 2019 -0400

    apparmorfs: fix use-after-free on symlink traversal
    
    symlink body shouldn't be freed without an RCU delay.  Switch apparmorfs
    to ->destroy_inode() and use of call_rcu(); free both the inode and symlink
    body in the callback.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 46c874419652bbefdfed17420fd6e88d8a31d9ec
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Apr 10 14:03:45 2019 -0400

    securityfs: fix use-after-free on symlink traversal
    
    symlink body shouldn't be freed without an RCU delay.  Switch securityfs
    to ->destroy_inode() and use of call_rcu(); free both the inode and symlink
    body in the callback.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit eed47d19d9362bdd958e4ab56af480b9dbf6b2b6
Author: Paolo Valente <paolo.valente@linaro.org>
Date:   Wed Apr 10 10:38:33 2019 +0200

    block, bfq: fix use after free in bfq_bfqq_expire
    
    The function bfq_bfqq_expire() invokes the function
    __bfq_bfqq_expire(), and the latter may free the in-service bfq-queue.
    If this happens, then no other instruction of bfq_bfqq_expire() must
    be executed, or a use-after-free will occur.
    
    Basing on the assumption that __bfq_bfqq_expire() invokes
    bfq_put_queue() on the in-service bfq-queue exactly once, the queue is
    assumed to be freed if its refcounter is equal to one right before
    invoking __bfq_bfqq_expire().
    
    But, since commit 9dee8b3b057e ("block, bfq: fix queue removal from
    weights tree") this assumption is false. __bfq_bfqq_expire() may also
    invoke bfq_weights_tree_remove() and, since commit 9dee8b3b057e
    ("block, bfq: fix queue removal from weights tree"), also
    the latter function may invoke bfq_put_queue(). So __bfq_bfqq_expire()
    may invoke bfq_put_queue() twice, and this is the actual case where
    the in-service queue may happen to be freed.
    
    To address this issue, this commit moves the check on the refcounter
    of the queue right around the last bfq_put_queue() that may be invoked
    on the queue.
    
    Fixes: 9dee8b3b057e ("block, bfq: fix queue removal from weights tree")
    Reported-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Reported-by: Douglas Anderson <dianders@chromium.org>
    Tested-by: Dmitrii Tcvetkov <demfloro@demfloro.ru>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit ce285c267a003acbf607f3540ff71287f82e5282
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Apr 2 15:17:34 2019 -0400

    autofs: fix use-after-free in lockless ->d_manage()
    
    autofs_d_release() can overlap with lockless ->d_manage(),
    ending up with autofs_dentry_ino() freed under the latter.
    Make freeing autofs_info instances RCU-delayed...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit df3a8344d404a810b4aadbf19b08c8232fbaa715
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Mar 19 01:05:41 2019 -0700

    net/mlx5: FPGA, tls, idr remove on flow delete
    
    Flow is kfreed on mlx5_fpga_tls_del_flow but kept in the idr data
    structure, this is risky and can cause use-after-free, since the
    idr_remove is delayed until tls_send_teardown_cmd completion.
    
    Instead of delaying idr_remove, in this patch we do it on
    mlx5_fpga_tls_del_flow, before actually kfree(flow).
    
    Added synchronize_rcu before kfree(flow)
    
    Fixes: ab412e1dd7db ("net/mlx5: Accel, add TLS rx offload routines")
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit 31634bf5dcc418b5b2cacd954394c0c4620db6a2
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Mar 19 22:09:05 2019 -0700

    net/mlx5: FPGA, tls, hold rcu read lock a bit longer
    
    To avoid use-after-free, hold the rcu read lock until we are done copying
    flow data into the command buffer.
    
    Fixes: ab412e1dd7db ("net/mlx5: Accel, add TLS rx offload routines")
    Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit bb9bd814ebf0 ("ipv6: sit: reset ip
    header pointer in ipip6_rcv"), fix possible use-after-free in
    erspan_rcv and ip6erspan_rcv extracting tunnel metadata since the
    packet can be 'uncloned' running __iptunnel_pull_header
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a3cabae4536edbcb21d344e7aa8be7a584d2afb
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Sat Apr 6 17:16:53 2019 +0200

    net: ip6_gre: fix possible use-after-free in ip6erspan_rcv
    
    erspan_v6 tunnels run __iptunnel_pull_header on received skbs to remove
    erspan header. This can determine a possible use-after-free accessing
    pkt_md pointer in ip6erspan_rcv since the packet will be 'uncloned'
    running pskb_expand_head if it is a cloned gso skb (e.g if the packet has
    been sent though a veth device). Fix it resetting pkt_md pointer after
    __iptunnel_pull_header
    
    Fixes: 1d7e2ed22f8d ("net: erspan: refactor existing erspan code")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 492b67e28ee5f2a2522fb72e3d3bcb990e461514
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Sat Apr 6 17:16:52 2019 +0200

    net: ip_gre: fix possible use-after-free in erspan_rcv
    
    erspan tunnels run __iptunnel_pull_header on received skbs to remove
    gre and erspan headers. This can determine a possible use-after-free
    accessing pkt_md pointer in erspan_rcv since the packet will be 'uncloned'
    running pskb_expand_head if it is a cloned gso skb (e.g if the packet has
    been sent though a veth device). Fix it resetting pkt_md pointer after
    __iptunnel_pull_header
    
    Fixes: 1d7e2ed22f8d ("net: erspan: refactor existing erspan code")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 968a85b19d0a79dd8ed85f39e23eacd34b503e72
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Apr 4 08:30:56 2019 +0100

    drm/i915/gvt: Prevent use-after-free in ppgtt_free_all_spt()
    
    ppgtt_free_all_spt() iterates the radixtree as it is deleting it,
    forgoing all protection against the leaves being freed in the process
    (leaving the iter pointing into the void).
    
    A minimal fix seems to be to use the available post_shadow_list to
    decompose the tree into a list prior to destroying the radixtree.
    
    Alerted by the sparse warnings:
    
    drivers/gpu/drm/i915/gvt/gtt.c:757:9: warning: incorrect type in assignment (different address spaces)
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    expected void **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    got void [noderef] <asn:4> **
    drivers/gpu/drm/i915/gvt/gtt.c:757:9: warning: incorrect type in assignment (different address spaces)
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    expected void **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    got void [noderef] <asn:4> **
    drivers/gpu/drm/i915/gvt/gtt.c:758:45: warning: incorrect type in argument 1 (different address spaces)
    drivers/gpu/drm/i915/gvt/gtt.c:758:45:    expected void [noderef] <asn:4> **slot
    drivers/gpu/drm/i915/gvt/gtt.c:758:45:    got void **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9: warning: incorrect type in argument 1 (different address spaces)
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    expected void [noderef] <asn:4> **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    got void **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9: warning: incorrect type in assignment (different address spaces)
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    expected void **slot
    drivers/gpu/drm/i915/gvt/gtt.c:757:9:    got void [noderef] <asn:4> **
    
    This would also have been loudly warning if run through CI for the
    invalid RCU dereferences.
    
    Fixes: b6c126a39345 ("drm/i915/gvt: Manage shadow pages with radix tree")
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Changbin Du <changbin.du@intel.com>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Zhi Wang <zhi.a.wang@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 252fbeb86ceffa549af9842cefca2412d53a7653
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Fri Feb 15 16:43:03 2019 -0500

    power: supply: max14656: fix potential use-after-free
    
    Explicitly cancel/sync the irq_work delayed work, otherwise
    there's a chance that it will run after the device is removed,
    which would result in a use-after-free.
    
    Note that cancel/sync should happen:
    - after irq's have been disabled, as the isr re-schedules the work
    - before the power supply is unregistered, because the work func
        uses the power supply handle.
    
    Cc: Alexander Kurz <akurz@blala.de>
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commits)
      ibmvnic: Fix completion structure initialization
      ipv6: sit: reset ip header pointer in ipip6_rcv
      net: bridge: always clear mcast matching struct on reports and leaves
      libcxgb: fix incorrect ppmax calculation
      vlan: conditional inclusion of FCoE hooks to match netdevice.h and bnx2x
      sch_cake: Make sure we can write the IP header before changing DSCP bits
      sch_cake: Use tc_skb_protocol() helper for getting packet protocol
      tcp: Ensure DCTCP reacts to losses
      net/sched: act_sample: fix divide by zero in the traffic path
      net: thunderx: fix NULL pointer dereference in nicvf_open/nicvf_stop
      net: hns: Fix sparse: some warnings in HNS drivers
      net: hns: Fix WARNING when remove HNS driver with SMMU enabled
      net: hns: fix ICMP6 neighbor solicitation messages discard problem
      net: hns: Fix probabilistic memory overwrite when HNS driver initialized
      net: hns: Use NAPI_POLL_WEIGHT for hns driver
      net: hns: fix KASAN: use-after-free in hns_nic_net_xmit_hw()
      flow_dissector: rst'ify documentation
      ipv6: Fix dangling pointer when ipv6 fragment
      net-gro: Fix GRO flush when receiving a GSO packet.
      flow_dissector: document BPF flow dissector environment
      ...

commit bb9bd814ebf04f579be466ba61fc922625508807
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Thu Apr 4 16:37:53 2019 +0200

    ipv6: sit: reset ip header pointer in ipip6_rcv
    
    ipip6 tunnels run iptunnel_pull_header on received skbs. This can
    determine the following use-after-free accessing iph pointer since
    the packet will be 'uncloned' running pskb_expand_head if it is a
    cloned gso skb (e.g if the packet has been sent though a veth device)
    
    [  706.369655] BUG: KASAN: use-after-free in ipip6_rcv+0x1678/0x16e0 [sit]
    [  706.449056] Read of size 1 at addr ffffe01b6bd855f5 by task ksoftirqd/1/=
    [  706.669494] Hardware name: HPE ProLiant m400 Server/ProLiant m400 Server, BIOS U02 08/19/2016
    [  706.771839] Call trace:
    [  706.801159]  dump_backtrace+0x0/0x2f8
    [  706.845079]  show_stack+0x24/0x30
    [  706.884833]  dump_stack+0xe0/0x11c
    [  706.925629]  print_address_description+0x68/0x260
    [  706.982070]  kasan_report+0x178/0x340
    [  707.025995]  __asan_report_load1_noabort+0x30/0x40
    [  707.083481]  ipip6_rcv+0x1678/0x16e0 [sit]
    [  707.132623]  tunnel64_rcv+0xd4/0x200 [tunnel4]
    [  707.185940]  ip_local_deliver_finish+0x3b8/0x988
    [  707.241338]  ip_local_deliver+0x144/0x470
    [  707.289436]  ip_rcv_finish+0x43c/0x14b0
    [  707.335447]  ip_rcv+0x628/0x1138
    [  707.374151]  __netif_receive_skb_core+0x1670/0x2600
    [  707.432680]  __netif_receive_skb+0x28/0x190
    [  707.482859]  process_backlog+0x1d0/0x610
    [  707.529913]  net_rx_action+0x37c/0xf68
    [  707.574882]  __do_softirq+0x288/0x1018
    [  707.619852]  run_ksoftirqd+0x70/0xa8
    [  707.662734]  smpboot_thread_fn+0x3a4/0x9e8
    [  707.711875]  kthread+0x2c8/0x350
    [  707.750583]  ret_from_fork+0x10/0x18
    
    [  707.811302] Allocated by task 16982:
    [  707.854182]  kasan_kmalloc.part.1+0x40/0x108
    [  707.905405]  kasan_kmalloc+0xb4/0xc8
    [  707.948291]  kasan_slab_alloc+0x14/0x20
    [  707.994309]  __kmalloc_node_track_caller+0x158/0x5e0
    [  708.053902]  __kmalloc_reserve.isra.8+0x54/0xe0
    [  708.108280]  __alloc_skb+0xd8/0x400
    [  708.150139]  sk_stream_alloc_skb+0xa4/0x638
    [  708.200346]  tcp_sendmsg_locked+0x818/0x2b90
    [  708.251581]  tcp_sendmsg+0x40/0x60
    [  708.292376]  inet_sendmsg+0xf0/0x520
    [  708.335259]  sock_sendmsg+0xac/0xf8
    [  708.377096]  sock_write_iter+0x1c0/0x2c0
    [  708.424154]  new_sync_write+0x358/0x4a8
    [  708.470162]  __vfs_write+0xc4/0xf8
    [  708.510950]  vfs_write+0x12c/0x3d0
    [  708.551739]  ksys_write+0xcc/0x178
    [  708.592533]  __arm64_sys_write+0x70/0xa0
    [  708.639593]  el0_svc_handler+0x13c/0x298
    [  708.686646]  el0_svc+0x8/0xc
    
    [  708.739019] Freed by task 17:
    [  708.774597]  __kasan_slab_free+0x114/0x228
    [  708.823736]  kasan_slab_free+0x10/0x18
    [  708.868703]  kfree+0x100/0x3d8
    [  708.905320]  skb_free_head+0x7c/0x98
    [  708.948204]  skb_release_data+0x320/0x490
    [  708.996301]  pskb_expand_head+0x60c/0x970
    [  709.044399]  __iptunnel_pull_header+0x3b8/0x5d0
    [  709.098770]  ipip6_rcv+0x41c/0x16e0 [sit]
    [  709.146873]  tunnel64_rcv+0xd4/0x200 [tunnel4]
    [  709.200195]  ip_local_deliver_finish+0x3b8/0x988
    [  709.255596]  ip_local_deliver+0x144/0x470
    [  709.303692]  ip_rcv_finish+0x43c/0x14b0
    [  709.349705]  ip_rcv+0x628/0x1138
    [  709.388413]  __netif_receive_skb_core+0x1670/0x2600
    [  709.446943]  __netif_receive_skb+0x28/0x190
    [  709.497120]  process_backlog+0x1d0/0x610
    [  709.544169]  net_rx_action+0x37c/0xf68
    [  709.589131]  __do_softirq+0x288/0x1018
    
    [  709.651938] The buggy address belongs to the object at ffffe01b6bd85580
                    which belongs to the cache kmalloc-1024 of size 1024
    [  709.804356] The buggy address is located 117 bytes inside of
                    1024-byte region [ffffe01b6bd85580, ffffe01b6bd85980)
    [  709.946340] The buggy address belongs to the page:
    [  710.003824] page:ffff7ff806daf600 count:1 mapcount:0 mapping:ffffe01c4001f600 index:0x0
    [  710.099914] flags: 0xfffff8000000100(slab)
    [  710.149059] raw: 0fffff8000000100 dead000000000100 dead000000000200 ffffe01c4001f600
    [  710.242011] raw: 0000000000000000 0000000000380038 00000001ffffffff 0000000000000000
    [  710.334966] page dumped because: kasan: bad access detected
    
    Fix it resetting iph pointer after iptunnel_pull_header
    
    Fixes: a09a4c8dd1ec ("tunnels: Remove encapsulation offloads on decap")
    Tested-by: Jianlin Shi <jishi@redhat.com>
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 11362b7a43bac15607e26d501d6095235b38567b
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Fri Mar 8 12:59:35 2019 -0500

    iio: proximity: as3935: fix use-after-free on device remove
    
    This driver's probe() uses a mix of devm_ and non-devm_ functions. This
    means that the remove order will not be the exact opposite of the probe
    order.
    
    Remove order:
    1. remove() executes:
            iio_device_unregister
            iio_triggered_buffer_cleanup
            iio_trigger_unregister
            (A)
    2. core frees devm resources in reverse order:
            free_irq
            iio_trigger_free
            iio_device_free
    
    In (A) the trigger has been unregistered, but the irq handler is still
    registered and active, so the trigger may still be touched via
    interrupt -> as3935_event_work. This is a potential use-after-unregister.
    
    Given that the delayed work is never canceled explicitly, it may run even
    after iio_device_free. This is a potential use-after-free.
    
    Solution: convert all probe functions to their devm_ equivalents.
    Add a devm callback, called by the core on remove right after irq_free,
    which explicitly cancels the delayed work. This will guarantee that all
    resources are freed in the correct order.
    
    As an added bonus, some boilerplate code can be removed.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 3a39a12ad364a9acd1038ba8da67cd8430f30de4
Author: Liubin Shu <shuliubin@huawei.com>
Date:   Thu Apr 4 16:46:42 2019 +0800

    net: hns: fix KASAN: use-after-free in hns_nic_net_xmit_hw()
    
    This patch is trying to fix the issue due to:
    [27237.844750] BUG: KASAN: use-after-free in hns_nic_net_xmit_hw+0x708/0xa18[hns_enet_drv]
    
    After hnae_queue_xmit() in hns_nic_net_xmit_hw(), can be
    interrupted by interruptions, and than call hns_nic_tx_poll_one()
    to handle the new packets, and free the skb. So, when turn back to
    hns_nic_net_xmit_hw(), calling skb->len will cause use-after-free.
    
    This patch update tx ring statistics in hns_nic_tx_poll_one() to
    fix the bug.
    
    Signed-off-by: Liubin Shu <shuliubin@huawei.com>
    Signed-off-by: Zhen Lei <thunder.leizhen@huawei.com>
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 061ccb52d23cfa2cf3195546a21c3a87194db5b7
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Tue Apr 2 15:35:13 2019 +0300

    RDMA/cma: Set proper port number as index
    
    Conversion from IDR to XArray missed the fact that idr_alloc() returned
    index as a return value, this index was saved in port variable and used as
    query index later on. This caused to the following error.
    
     BUG: KASAN: use-after-free in cma_check_port+0x86a/0xa20 [rdma_cm]
     Read of size 8 at addr ffff888069fde998 by task ucmatose/387
     CPU: 3 PID: 387 Comm: ucmatose Not tainted 5.1.0-rc2+ #253
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org 04/01/2014
     Call Trace:
      dump_stack+0x7c/0xc0
      print_address_description+0x6c/0x23c
      ? cma_check_port+0x86a/0xa20 [rdma_cm]
      kasan_report.cold.3+0x1c/0x35
      ? cma_check_port+0x86a/0xa20 [rdma_cm]
      ? cma_check_port+0x86a/0xa20 [rdma_cm]
      cma_check_port+0x86a/0xa20 [rdma_cm]
      rdma_bind_addr+0x11bc/0x1b00 [rdma_cm]
      ? find_held_lock+0x33/0x1c0
      ? cma_ndev_work_handler+0x180/0x180 [rdma_cm]
      ? wait_for_completion+0x3d0/0x3d0
      ucma_bind+0x120/0x160 [rdma_ucm]
      ? ucma_resolve_addr+0x1a0/0x1a0 [rdma_ucm]
      ucma_write+0x1f8/0x2b0 [rdma_ucm]
      ? ucma_open+0x260/0x260 [rdma_ucm]
      vfs_write+0x157/0x460
      ksys_write+0xb8/0x170
      ? __ia32_sys_read+0xb0/0xb0
      ? trace_hardirqs_off_caller+0x5b/0x160
      ? do_syscall_64+0x18/0x3c0
      do_syscall_64+0x95/0x3c0
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Allocated by task 381:
       __kasan_kmalloc.constprop.5+0xc1/0xd0
       cma_alloc_port+0x4d/0x160 [rdma_cm]
       rdma_bind_addr+0x14e7/0x1b00 [rdma_cm]
       ucma_bind+0x120/0x160 [rdma_ucm]
       ucma_write+0x1f8/0x2b0 [rdma_ucm]
       vfs_write+0x157/0x460
       ksys_write+0xb8/0x170
       do_syscall_64+0x95/0x3c0
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Freed by task 381:
       __kasan_slab_free+0x12e/0x180
       kfree+0xed/0x290
       rdma_destroy_id+0x6b6/0x9e0 [rdma_cm]
       ucma_close+0x110/0x300 [rdma_ucm]
       __fput+0x25a/0x740
       task_work_run+0x10e/0x190
       do_exit+0x85e/0x29e0
       do_group_exit+0xf0/0x2e0
       get_signal+0x2e0/0x17e0
       do_signal+0x94/0x1570
       exit_to_usermode_loop+0xfa/0x130
       do_syscall_64+0x327/0x3c0
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Reported-by: <syzbot+2e3e485d5697ea610460@syzkaller.appspotmail.com>
    Reported-by: Ran Rozenstein <ranro@mellanox.com>
    Fixes: 638267537ad9 ("cma: Convert portspace IDRs to XArray")
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Tested-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 6d670497e01803b486aa72cc1a718401ab986896
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Apr 2 09:53:14 2019 +0300

    openvswitch: use after free in __ovs_ct_free_action()
    
    We free "ct_info->ct" and then use it on the next line when we pass it
    to nf_ct_destroy_timeout().  This patch swaps the order to avoid the use
    after free.
    
    Fixes: 06bd2bdf19d2 ("openvswitch: Add timeout support to ct action")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Yi-Hung Wei <yihung.wei@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c03a0fd0b609e2f5c669c2b7f27c8e1928e9196e
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sun Mar 17 14:02:31 2019 +0900

    kobject: Don't trigger kobject_uevent(KOBJ_REMOVE) twice.
    
    syzbot is hitting use-after-free bug in uinput module [1]. This is because
    kobject_uevent(KOBJ_REMOVE) is called again due to commit 0f4dafc0563c6c49
    ("Kobject: auto-cleanup on final unref") after memory allocation fault
    injection made kobject_uevent(KOBJ_REMOVE) from device_del() from
    input_unregister_device() fail, while uinput_destroy_device() is expecting
    that kobject_uevent(KOBJ_REMOVE) is not called after device_del() from
    input_unregister_device() completed.
    
    That commit intended to catch cases where nobody even attempted to send
    "remove" uevents. But there is no guarantee that an event will ultimately
    be sent. We are at the point of no return as far as the rest of the kernel
    is concerned; there are no repeats or do-overs.
    
    Also, it is not clear whether some subsystem depends on that commit.
    If no subsystem depends on that commit, it will be better to remove
    the state_{add,remove}_uevent_sent logic. But we don't want to risk
    a regression (in a patch which will be backported) by trying to remove
    that logic. Therefore, as a first step, let's avoid the use-after-free bug
    by making sure that kobject_uevent(KOBJ_REMOVE) won't be triggered twice.
    
    [1] https://syzkaller.appspot.com/bug?id=8b17c134fe938bbddd75a45afaa9e68af43a362d
    
    Reported-by: syzbot <syzbot+f648cfb7e0b52bf7ae32@syzkaller.appspotmail.com>
    Analyzed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Fixes: 0f4dafc0563c6c49 ("Kobject: auto-cleanup on final unref")
    Cc: Kay Sievers <kay@vrfy.org>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93b919da64c15b90953f96a536e5e61df896ca57
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:43:37 2019 +0000

    debugfs: fix use-after-free on symlink traversal
    
    symlink body shouldn't be freed without an RCU delay.  Switch debugfs to
    ->destroy_inode() and use of call_rcu(); free both the inode and symlink
    body in the callback.  Similar to solution for bpf, only here it's even
    more obvious that ->evict_inode() can be dropped.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 0cdc17ebd2072b6cdd3ec3695ea7ede745664a8b
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:40:38 2019 +0000

    ubifs: fix use-after-free on symlink traversal
    
    free the symlink body after the same RCU delay we have for freeing the
    struct inode itself, so that traversal during RCU pathwalk wouldn't step
    into freed memory.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 4fdcfab5b5537c21891e22e65996d4d0dd8ab4ca
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:39:50 2019 +0000

    jffs2: fix use-after-free on symlink traversal
    
    free the symlink body after the same RCU delay we have for freeing the
    struct inode itself, so that traversal during RCU pathwalk wouldn't step
    into freed memory.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 676e4a6fe703f2dae699ee9d56f14516f9ada4ea
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Fri Mar 29 10:18:00 2019 +0100

    xdp: fix cpumap redirect SKB creation bug
    
    We want to avoid leaking pointer info from xdp_frame (that is placed in
    top of frame) like commit 6dfb970d3dbd ("xdp: avoid leaking info stored in
    frame data on page reuse"), and followup commit 97e19cce05e5 ("bpf:
    reserve xdp_frame size in xdp headroom") that reserve this headroom.
    
    These changes also affected how cpumap constructed SKBs, as xdpf->headroom
    size changed, the skb data starting point were in-effect shifted with 32
    bytes (sizeof xdp_frame). This was still okay, as the cpumap frame_size
    calculation also included xdpf->headroom which were reduced by same amount.
    
    A bug was introduced in commit 77ea5f4cbe20 ("bpf/cpumap: make sure
    frame_size for build_skb is aligned if headroom isn't"), where the
    xdpf->headroom became part of the SKB_DATA_ALIGN rounding up. This
    round-up to find the frame_size is in principle still correct as it does
    not exceed the 2048 bytes frame_size (which is max for ixgbe and i40e),
    but the 32 bytes offset of pkt_data_start puts this over the 2048 bytes
    limit. This cause skb_shared_info to spill into next frame. It is a little
    hard to trigger, as the SKB need to use above 15 skb_shinfo->frags[] as
    far as I calculate. This does happen in practise for TCP streams when
    skb_try_coalesce() kicks in.
    
    KASAN can be used to detect these wrong memory accesses, I've seen:
     BUG: KASAN: use-after-free in skb_try_coalesce+0x3cb/0x760
     BUG: KASAN: wild-memory-access in skb_release_data+0xe2/0x250
    
    Driver veth also construct a SKB from xdp_frame in this way, but is not
    affected, as it doesn't reserve/deduct the room (used by xdp_frame) from
    the SKB headroom. Instead is clears the pointers via xdp_scrub_frame(),
    and allows SKB to use this area.
    
    The fix in this patch is to do like veth and instead allow SKB to (re)use
    the area occupied by xdp_frame, by clearing via xdp_scrub_frame().  (This
    does kill the idea of the SKB being able to access (mem) info from this
    area, but I guess it was a bad idea anyhow, and it was already killed by
    the veth changes.)
    
    Fixes: 77ea5f4cbe20 ("bpf/cpumap: make sure frame_size for build_skb is aligned if headroom isn't")
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commits)
      drm/i915/icl: Fix VEBOX mismatch BUG_ON()
      drm/i915/selftests: Fix an IS_ERR() vs NULL check
      drm/i915: Mark AML 0x87CA as ULX
      drm/meson: fix TMDS clock filtering for DMT monitors
      drm/meson: Uninstall IRQ handler
      drm/meson: Fix invalid pointer in meson_drv_unbind()
      drm/udl: Refactor edid retrieving in UDL driver (v2)
      drm: Fix drm_release() and device unplug
      drm/fb: avoid setting 0 depth.
      drm/tegra: vic: Fix implicit function declaration warning
      drm/tegra: hub: Fix dereference before check
      drm/i915/icl: Fix the TRANS_DDI_FUNC_CTL2 bitfield macro
      drm/amd/display: Only allow VRR when vrefresh is within supported range
      drm/rockchip: vop: reset scale mode when win is disabled
      drm/vkms: fix use-after-free when drm_gem_handle_create() fails
      drm/vgem: fix use-after-free when drm_gem_handle_create() fails
      drm/i915/gvt: Add mutual lock for ppgtt mm LRU list
      drm/i915/gvt: Only assign ppgtt root at dispatch time
      drm/i915/gvt: Don't submit request for error workload dispatch
      drm/i915/gvt: stop scheduling workload when vgpu is inactive
      ...

commit cb66ddd156203daefb8d71158036b27b0e2caf63
Author: Mao Wenan <maowenan@huawei.com>
Date:   Thu Mar 28 17:10:56 2019 +0800

    net: rds: force to destroy connection if t_sock is NULL in rds_tcp_kill_sock().
    
    When it is to cleanup net namespace, rds_tcp_exit_net() will call
    rds_tcp_kill_sock(), if t_sock is NULL, it will not call
    rds_conn_destroy(), rds_conn_path_destroy() and rds_tcp_conn_free() to free
    connection, and the worker cp_conn_w is not stopped, afterwards the net is freed in
    net_drop_ns(); While cp_conn_w rds_connect_worker() will call rds_tcp_conn_path_connect()
    and reference 'net' which has already been freed.
    
    In rds_tcp_conn_path_connect(), rds_tcp_set_callbacks() will set t_sock = sock before
    sock->ops->connect, but if connect() is failed, it will call
    rds_tcp_restore_callbacks() and set t_sock = NULL, if connect is always
    failed, rds_connect_worker() will try to reconnect all the time, so
    rds_tcp_kill_sock() will never to cancel worker cp_conn_w and free the
    connections.
    
    Therefore, the condition !tc->t_sock is not needed if it is going to do
    cleanup_net->rds_tcp_exit_net->rds_tcp_kill_sock, because tc->t_sock is always
    NULL, and there is on other path to cancel cp_conn_w and free
    connection. So this patch is to fix this.
    
    rds_tcp_kill_sock():
    ...
    if (net != c_net || !tc->t_sock)
    ...
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    
    ==================================================================
    BUG: KASAN: use-after-free in inet_create+0xbcc/0xd28
    net/ipv4/af_inet.c:340
    Read of size 4 at addr ffff8003496a4684 by task kworker/u8:4/3721
    
    CPU: 3 PID: 3721 Comm: kworker/u8:4 Not tainted 5.1.0 #11
    Hardware name: linux,dummy-virt (DT)
    Workqueue: krdsd rds_connect_worker
    Call trace:
     dump_backtrace+0x0/0x3c0 arch/arm64/kernel/time.c:53
     show_stack+0x28/0x38 arch/arm64/kernel/traps.c:152
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x120/0x188 lib/dump_stack.c:113
     print_address_description+0x68/0x278 mm/kasan/report.c:253
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x21c/0x348 mm/kasan/report.c:409
     __asan_report_load4_noabort+0x30/0x40 mm/kasan/report.c:429
     inet_create+0xbcc/0xd28 net/ipv4/af_inet.c:340
     __sock_create+0x4f8/0x770 net/socket.c:1276
     sock_create_kern+0x50/0x68 net/socket.c:1322
     rds_tcp_conn_path_connect+0x2b4/0x690 net/rds/tcp_connect.c:114
     rds_connect_worker+0x108/0x1d0 net/rds/threads.c:175
     process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153
     worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296
     kthread+0x2f0/0x378 kernel/kthread.c:255
     ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117
    
    Allocated by task 687:
     save_stack mm/kasan/kasan.c:448 [inline]
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xd4/0x180 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x14/0x20 mm/kasan/kasan.c:490
     slab_post_alloc_hook mm/slab.h:444 [inline]
     slab_alloc_node mm/slub.c:2705 [inline]
     slab_alloc mm/slub.c:2713 [inline]
     kmem_cache_alloc+0x14c/0x388 mm/slub.c:2718
     kmem_cache_zalloc include/linux/slab.h:697 [inline]
     net_alloc net/core/net_namespace.c:384 [inline]
     copy_net_ns+0xc4/0x2d0 net/core/net_namespace.c:424
     create_new_namespaces+0x300/0x658 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xa0/0x198 kernel/nsproxy.c:206
     ksys_unshare+0x340/0x628 kernel/fork.c:2577
     __do_sys_unshare kernel/fork.c:2645 [inline]
     __se_sys_unshare kernel/fork.c:2643 [inline]
     __arm64_sys_unshare+0x38/0x58 kernel/fork.c:2643
     __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]
     invoke_syscall arch/arm64/kernel/syscall.c:47 [inline]
     el0_svc_common+0x168/0x390 arch/arm64/kernel/syscall.c:83
     el0_svc_handler+0x60/0xd0 arch/arm64/kernel/syscall.c:129
     el0_svc+0x8/0xc arch/arm64/kernel/entry.S:960
    
    Freed by task 264:
     save_stack mm/kasan/kasan.c:448 [inline]
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x114/0x220 mm/kasan/kasan.c:521
     kasan_slab_free+0x10/0x18 mm/kasan/kasan.c:528
     slab_free_hook mm/slub.c:1370 [inline]
     slab_free_freelist_hook mm/slub.c:1397 [inline]
     slab_free mm/slub.c:2952 [inline]
     kmem_cache_free+0xb8/0x3a8 mm/slub.c:2968
     net_free net/core/net_namespace.c:400 [inline]
     net_drop_ns.part.6+0x78/0x90 net/core/net_namespace.c:407
     net_drop_ns net/core/net_namespace.c:406 [inline]
     cleanup_net+0x53c/0x6d8 net/core/net_namespace.c:569
     process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153
     worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296
     kthread+0x2f0/0x378 kernel/kthread.c:255
     ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117
    
    The buggy address belongs to the object at ffff8003496a3f80
     which belongs to the cache net_namespace of size 7872
    The buggy address is located 1796 bytes inside of
     7872-byte region [ffff8003496a3f80, ffff8003496a5e40)
    The buggy address belongs to the page:
    page:ffff7e000d25a800 count:1 mapcount:0 mapping:ffff80036ce4b000
    index:0x0 compound_mapcount: 0
    flags: 0xffffe0000008100(slab|head)
    raw: 0ffffe0000008100 dead000000000100 dead000000000200 ffff80036ce4b000
    raw: 0000000000000000 0000000080040004 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8003496a4580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8003496a4600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8003496a4680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff8003496a4700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8003496a4780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Fixes: 467fa15356ac("RDS-TCP: Support multiple RDS-TCP listen endpoints, one per netns.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31d4c528cea4023cf36f6148c03bb960cedefeef
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Wed Mar 27 23:06:42 2019 +0100

    cpufreq: scpi: Fix use after free
    
    Free the priv structure only after we are done using it.
    
    Fixes: 1690d8bb91e370ab ("cpufreq: scpi/scmi: Fix freeing of dynamic OPPs")
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Cc: 4.20+ <stable@vger.kernel.org> # 4.20+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit daf5cc27eed99afdea8d96e71b89ba41f5406ef6
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Mar 26 01:38:58 2019 +0000

    ceph: fix use-after-free on symlink traversal
    
    free the symlink body after the same RCU delay we have for freeing the
    struct inode itself, so that traversal during RCU pathwalk wouldn't step
    into freed memory.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit f5ad3991493c69d203d42b94d32349b54c58a3f1
Author: Paul E. McKenney <paulmck@linux.ibm.com>
Date:   Wed Feb 13 13:54:37 2019 -0800

    srcu: Remove cleanup_srcu_struct_quiesced()
    
    The cleanup_srcu_struct_quiesced() function was added because NVME
    used WQ_MEM_RECLAIM workqueues and SRCU did not, which meant that
    NVME workqueues waiting on SRCU workqueues could result in deadlocks
    during low-memory conditions.  However, SRCU now also has WQ_MEM_RECLAIM
    workqueues, so there is no longer a potential for deadlock.  Furthermore,
    it turns out to be extremely hard to use cleanup_srcu_struct_quiesced()
    correctly due to the fact that SRCU callback invocation accesses the
    srcu_struct structure's per-CPU data area just after callbacks are
    invoked.  Therefore, the usual practice of using srcu_barrier() to wait
    for callbacks to be invoked before invoking cleanup_srcu_struct_quiesced()
    fails because SRCU's callback-invocation workqueue handler might be
    delayed, which can result in cleanup_srcu_struct_quiesced() being invoked
    (and thus freeing the per-CPU data) before the SRCU's callback-invocation
    workqueue handler is finished using that per-CPU data.  Nor is this a
    theoretical problem: KASAN emitted use-after-free warnings because of
    this problem on actual runs.
    
    In short, NVME can now safely invoke cleanup_srcu_struct(), which
    avoids the use-after-free scenario.  And cleanup_srcu_struct_quiesced()
    is quite difficult to use safely.  This commit therefore removes
    cleanup_srcu_struct_quiesced(), switching its sole user back to
    cleanup_srcu_struct().  This effectively reverts the following pair
    of commits:
    
    f7194ac32ca2 ("srcu: Add cleanup_srcu_struct_quiesced()")
    4317228ad9b8 ("nvme: Avoid flush dependency in delete controller flow")
    
    Reported-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Tested-by: Bart Van Assche <bvanassche@acm.org>

commit 5cdfd174ea6c2dc1d331b61bdc9572698658600a
Author: Paul E. McKenney <paulmck@linux.ibm.com>
Date:   Tue Feb 12 10:44:33 2019 -0800

    srcu: Check for in-flight callbacks in _cleanup_srcu_struct()
    
    If someone fails to drain the corresponding SRCU callbacks (for
    example, by failing to invoke srcu_barrier()) before invoking either
    cleanup_srcu_struct() or cleanup_srcu_struct_quiesced(), the resulting
    diagnostic is an ambiguous use-after-free diagnostic, and even then
    only if you are running something like KASAN.  This commit therefore
    improves SRCU diagnostics by adding checks for in-flight callbacks at
    _cleanup_srcu_struct() time.
    
    Note that these diagnostics can still be defeated, for example, by
    invoking call_srcu() concurrently with cleanup_srcu_struct().  Which is
    a really bad idea, but sometimes all too easy to do.  But even then,
    these diagnostics have at least some probability of catching the problem.
    
    Reported-by: Sagi Grimberg <sagi@grimberg.me>
    Reported-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Paul E. McKenney <paulmck@linux.ibm.com>
    Tested-by: Bart Van Assche <bvanassche@acm.org>

commit 9926cb5f8b0f0aea535735185600d74db7608550
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 24 00:48:22 2019 +0800

    tipc: change to check tipc_own_id to return in tipc_net_stop
    
    When running a syz script, a panic occurred:
    
    [  156.088228] BUG: KASAN: use-after-free in tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.094315] Call Trace:
    [  156.094844]  <IRQ>
    [  156.095306]  dump_stack+0x7c/0xc0
    [  156.097346]  print_address_description+0x65/0x22e
    [  156.100445]  kasan_report.cold.3+0x37/0x7a
    [  156.102402]  tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.106517]  call_timer_fn+0x19a/0x610
    [  156.112749]  run_timer_softirq+0xb51/0x1090
    
    It was caused by the netns freed without deleting the discoverer timer,
    while later on the netns would be accessed in the timer handler.
    
    The timer should have been deleted by tipc_net_stop() when cleaning up a
    netns. However, tipc has been able to enable a bearer and start d->timer
    without the local node_addr set since Commit 52dfae5c85a4 ("tipc: obtain
    node identity from interface by default"), which caused the timer not to
    be deleted in tipc_net_stop() then.
    
    So fix it in tipc_net_stop() by changing to check local node_id instead
    of local node_addr, as Jon suggested.
    
    While at it, remove the calling of tipc_nametbl_withdraw() there, since
    tipc_nametbl_stop() will take of the nametbl's freeing after.
    
    Fixes: 52dfae5c85a4 ("tipc: obtain node identity from interface by default")
    Reported-by: syzbot+a25307ad099309f1c2b9@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff9d31d0d46672e201fc9ff59c42f1eef5f00c77
Author: Tom Zanussi <tom.zanussi@linux.intel.com>
Date:   Wed Mar 20 12:53:33 2019 -0500

    tracing: Remove unnecessary var_ref destroy in track_data_destroy()
    
    Commit 656fe2ba85e8 (tracing: Use hist trigger's var_ref array to
    destroy var_refs) centralized the destruction of all the var_refs
    in one place so that other code didn't have to do it.
    
    The track_data_destroy() added later ignored that and also destroyed
    the track_data var_ref, causing a double-free error flagged by KASAN.
    
    ==================================================================
    BUG: KASAN: use-after-free in destroy_hist_field+0x30/0x70
    Read of size 8 at addr ffff888086df2210 by task bash/1694
    
    CPU: 6 PID: 1694 Comm: bash Not tainted 5.1.0-rc1-test+ #15
    Hardware name: Hewlett-Packard HP Compaq Pro 6300 SFF/339A, BIOS K01 v03.03
    07/14/2016
    Call Trace:
     dump_stack+0x71/0xa0
     ? destroy_hist_field+0x30/0x70
     print_address_description.cold.3+0x9/0x1fb
     ? destroy_hist_field+0x30/0x70
     ? destroy_hist_field+0x30/0x70
     kasan_report.cold.4+0x1a/0x33
     ? __kasan_slab_free+0x100/0x150
     ? destroy_hist_field+0x30/0x70
     destroy_hist_field+0x30/0x70
     track_data_destroy+0x55/0xe0
     destroy_hist_data+0x1f0/0x350
     hist_unreg_all+0x203/0x220
     event_trigger_open+0xbb/0x130
     do_dentry_open+0x296/0x700
     ? stacktrace_count_trigger+0x30/0x30
     ? generic_permission+0x56/0x200
     ? __x64_sys_fchdir+0xd0/0xd0
     ? inode_permission+0x55/0x200
     ? security_inode_permission+0x18/0x60
     path_openat+0x633/0x22b0
     ? path_lookupat.isra.50+0x420/0x420
     ? __kasan_kmalloc.constprop.12+0xc1/0xd0
     ? kmem_cache_alloc+0xe5/0x260
     ? getname_flags+0x6c/0x2a0
     ? do_sys_open+0x149/0x2b0
     ? do_syscall_64+0x73/0x1b0
     ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
     ? _raw_write_lock_bh+0xe0/0xe0
     ? __kernel_text_address+0xe/0x30
     ? unwind_get_return_address+0x2f/0x50
     ? __list_add_valid+0x2d/0x70
     ? deactivate_slab.isra.62+0x1f4/0x5a0
     ? getname_flags+0x6c/0x2a0
     ? set_track+0x76/0x120
     do_filp_open+0x11a/0x1a0
     ? may_open_dev+0x50/0x50
     ? _raw_spin_lock+0x7a/0xd0
     ? _raw_write_lock_bh+0xe0/0xe0
     ? __alloc_fd+0x10f/0x200
     do_sys_open+0x1db/0x2b0
     ? filp_open+0x50/0x50
     do_syscall_64+0x73/0x1b0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fa7b24a4ca2
    Code: 25 00 00 41 00 3d 00 00 41 00 74 4c 48 8d 05 85 7a 0d 00 8b 00 85 c0
    75 6d 89 f2 b8 01 01 00 00 48 89 fe bf 9c ff ff ff 0f 05 <48> 3d 00 f0 ff ff
    0f 87 a2 00 00 00 48 8b 4c 24 28 64 48 33 0c 25
    RSP: 002b:00007fffbafb3af0 EFLAGS: 00000246 ORIG_RAX: 0000000000000101
    RAX: ffffffffffffffda RBX: 000055d3648ade30 RCX: 00007fa7b24a4ca2
    RDX: 0000000000000241 RSI: 000055d364a55240 RDI: 00000000ffffff9c
    RBP: 00007fffbafb3bf0 R08: 0000000000000020 R09: 0000000000000002
    R10: 00000000000001b6 R11: 0000000000000246 R12: 0000000000000000
    R13: 0000000000000003 R14: 0000000000000001 R15: 000055d364a55240
    ==================================================================
    
    So remove the track_data_destroy() destroy_hist_field() call for that
    var_ref.
    
    Link: http://lkml.kernel.org/r/1deffec420f6a16d11dd8647318d34a66d1989a9.camel@linux.intel.com
    
    Fixes: 466f4528fbc69 ("tracing: Generalize hist trigger onmax and save action")
    Reported-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commit 1da6c4d9140cb7c13e87667dc4e1488d6c8fc10f
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Mon Mar 25 15:54:43 2019 +0100

    bpf: fix use after free in bpf_evict_inode
    
    syzkaller was able to generate the following UAF in bpf:
    
      BUG: KASAN: use-after-free in lookup_last fs/namei.c:2269 [inline]
      BUG: KASAN: use-after-free in path_lookupat.isra.43+0x9f8/0xc00 fs/namei.c:2318
      Read of size 1 at addr ffff8801c4865c47 by task syz-executor2/9423
    
      CPU: 0 PID: 9423 Comm: syz-executor2 Not tainted 4.20.0-rc1-next-20181109+
      #110
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
      Google 01/01/2011
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x244/0x39d lib/dump_stack.c:113
        print_address_description.cold.7+0x9/0x1ff mm/kasan/report.c:256
        kasan_report_error mm/kasan/report.c:354 [inline]
        kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412
        __asan_report_load1_noabort+0x14/0x20 mm/kasan/report.c:430
        lookup_last fs/namei.c:2269 [inline]
        path_lookupat.isra.43+0x9f8/0xc00 fs/namei.c:2318
        filename_lookup+0x26a/0x520 fs/namei.c:2348
        user_path_at_empty+0x40/0x50 fs/namei.c:2608
        user_path include/linux/namei.h:62 [inline]
        do_mount+0x180/0x1ff0 fs/namespace.c:2980
        ksys_mount+0x12d/0x140 fs/namespace.c:3258
        __do_sys_mount fs/namespace.c:3272 [inline]
        __se_sys_mount fs/namespace.c:3269 [inline]
        __x64_sys_mount+0xbe/0x150 fs/namespace.c:3269
        do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
        entry_SYSCALL_64_after_hwframe+0x49/0xbe
      RIP: 0033:0x457569
      Code: fd b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7
      48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
      ff 0f 83 cb b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00
      RSP: 002b:00007fde6ed96c78 EFLAGS: 00000246 ORIG_RAX: 00000000000000a5
      RAX: ffffffffffffffda RBX: 0000000000000005 RCX: 0000000000457569
      RDX: 0000000020000040 RSI: 0000000020000000 RDI: 0000000000000000
      RBP: 000000000072bf00 R08: 0000000020000340 R09: 0000000000000000
      R10: 0000000000200000 R11: 0000000000000246 R12: 00007fde6ed976d4
      R13: 00000000004c2c24 R14: 00000000004d4990 R15: 00000000ffffffff
    
      Allocated by task 9424:
        save_stack+0x43/0xd0 mm/kasan/kasan.c:448
        set_track mm/kasan/kasan.c:460 [inline]
        kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
        __do_kmalloc mm/slab.c:3722 [inline]
        __kmalloc_track_caller+0x157/0x760 mm/slab.c:3737
        kstrdup+0x39/0x70 mm/util.c:49
        bpf_symlink+0x26/0x140 kernel/bpf/inode.c:356
        vfs_symlink+0x37a/0x5d0 fs/namei.c:4127
        do_symlinkat+0x242/0x2d0 fs/namei.c:4154
        __do_sys_symlink fs/namei.c:4173 [inline]
        __se_sys_symlink fs/namei.c:4171 [inline]
        __x64_sys_symlink+0x59/0x80 fs/namei.c:4171
        do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Freed by task 9425:
        save_stack+0x43/0xd0 mm/kasan/kasan.c:448
        set_track mm/kasan/kasan.c:460 [inline]
        __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
        kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
        __cache_free mm/slab.c:3498 [inline]
        kfree+0xcf/0x230 mm/slab.c:3817
        bpf_evict_inode+0x11f/0x150 kernel/bpf/inode.c:565
        evict+0x4b9/0x980 fs/inode.c:558
        iput_final fs/inode.c:1550 [inline]
        iput+0x674/0xa90 fs/inode.c:1576
        do_unlinkat+0x733/0xa30 fs/namei.c:4069
        __do_sys_unlink fs/namei.c:4110 [inline]
        __se_sys_unlink fs/namei.c:4108 [inline]
        __x64_sys_unlink+0x42/0x50 fs/namei.c:4108
        do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    In this scenario path lookup under RCU is racing with the final
    unlink in case of symlinks. As Linus puts it in his analysis:
    
      [...] We actually RCU-delay the inode freeing itself, but
      when we do the final iput(), the "evict()" function is called
      synchronously. Now, the simple fix would seem to just RCU-delay
      the kfree() of the symlink data in bpf_evict_inode(). Maybe
      that's the right thing to do. [...]
    
    Al suggested to piggy-back on the ->destroy_inode() callback in
    order to implement RCU deferral there which can then kfree() the
    inode->i_link eventually right before putting inode back into
    inode cache. By reusing free_inode_nonrcu() from there we can
    avoid the need for our own inode cache and just reuse generic
    one as we currently do.
    
    And in-fact on top of all this we should just get rid of the
    bpf_evict_inode() entirely. This means truncate_inode_pages_final()
    and clear_inode() will then simply be called by the fs core via
    evict(). Dropping the reference should really only be done when
    inode is unhashed and nothing reachable anymore, so it's better
    also moved into the final ->destroy_inode() callback.
    
    Fixes: 0f98621bef5d ("bpf, inode: add support for symlinks and fix mtime/ctime")
    Reported-by: syzbot+fb731ca573367b7f6564@syzkaller.appspotmail.com
    Reported-by: syzbot+a13e5ead792d6df37818@syzkaller.appspotmail.com
    Reported-by: syzbot+7a8ba368b47fdefca61e@syzkaller.appspotmail.com
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Analyzed-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Link: https://lore.kernel.org/lkml/0000000000006946d2057bbd0eef@google.com/T/

commit 2d8f92897ad816f5dda54b2ed2fd9f2d7cb1abde
Author: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Date:   Fri Mar 22 15:26:57 2019 +0000

    drm/meson: Uninstall IRQ handler
    
    meson_drv_unbind() doesn't unregister the IRQ handler, which can lead to
    use-after-free if the IRQ fires after unbind:
    
    [   64.656876] Unable to handle kernel paging request at virtual address ffff000011706dbc
    ...
    [   64.662001] pc : meson_irq+0x18/0x30 [meson_drm]
    
    I'm assuming that a similar problem could happen on the error path of
    bind(), so uninstall the IRQ handler there as well.
    
    Fixes: bbbe775ec5b5 ("drm: Add support for Amlogic Meson Graphic Controller")
    Signed-off-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190322152657.13752-2-jean-philippe.brucker@arm.com

commit f131a56880d10932931e74773fb8702894a94a75
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce tt_global hash refcnt only for removed entry
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_tt_global_free is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: 7683fdc1e886 ("batman-adv: protect the local and the global trans-tables with rcu")
    Reported-by: Martin Weinelt <martin@linuxlounge.net>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Acked-by: Antonio Quartulli <a@unstable.cc>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>

commit 3d65b9accab4a7ed5038f6df403fbd5e298398c7
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce tt_local hash refcnt only for removed entry
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_tt_local_remove is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: ef72706a0543 ("batman-adv: protect tt_local_entry from concurrent delete events")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>

commit 4ba104f468bbfc27362c393815d03aa18fb7a20f
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sat Feb 23 14:27:10 2019 +0100

    batman-adv: Reduce claim hash refcnt only for removed entry
    
    The batadv_hash_remove is a function which searches the hashtable for an
    entry using a needle, a hashtable bucket selection function and a compare
    function. It will lock the bucket list and delete an entry when the compare
    function matches it with the needle. It returns the pointer to the
    hlist_node which matches or NULL when no entry matches the needle.
    
    The batadv_bla_del_claim is not itself protected in anyway to avoid that
    any other function is modifying the hashtable between the search for the
    entry and the call to batadv_hash_remove. It can therefore happen that the
    entry either doesn't exist anymore or an entry was deleted which is not the
    same object as the needle. In such an situation, the reference counter (for
    the reference stored in the hashtable) must not be reduced for the needle.
    Instead the reference counter of the actually removed entry has to be
    reduced.
    
    Otherwise the reference counter will underflow and the object might be
    freed before all its references were dropped. The kref helpers reported
    this problem as:
    
      refcount_t: underflow; use-after-free.
    
    Fixes: 23721387c409 ("batman-adv: add basic bridge loop avoidance code")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>

commit 59c39840f5abf4a71e1810a8da71aaccd6c17d26
Author: Prasad Sodagudi <psodagud@codeaurora.org>
Date:   Sun Mar 24 07:57:04 2019 -0700

    genirq: Prevent use-after-free and work list corruption
    
    When irq_set_affinity_notifier() replaces the notifier, then the
    reference count on the old notifier is dropped which causes it to be
    freed. But nothing ensures that the old notifier is not longer queued
    in the work list. If it is queued this results in a use after free and
    possibly in work list corruption.
    
    Ensure that the work is canceled before the reference is dropped.
    
    Signed-off-by: Prasad Sodagudi <psodagud@codeaurora.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: marc.zyngier@arm.com
    Link: https://lkml.kernel.org/r/1553439424-6529-1-git-send-email-psodagud@codeaurora.org

commit ee3bbfe806cdb46b02cda63626cb50a7a7b19fc5
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Wed Mar 20 15:00:16 2019 +0100

    net/sched: let actions use RCU to access 'goto_chain'
    
    use RCU when accessing the action chain, to avoid use after free in the
    traffic path when 'goto chain' is replaced on existing TC actions (see
    script below). Since the control action is read in the traffic path
    without holding the action spinlock, we need to explicitly ensure that
    a->goto_chain is not NULL before dereferencing (i.e it's not sufficient
    to rely on the value of TC_ACT_GOTO_CHAIN bits). Not doing so caused NULL
    dereferences in tcf_action_goto_chain_exec() when the following script:
    
     # tc chain add dev dd0 chain 42 ingress protocol ip flower \
     > ip_proto udp action pass index 4
     # tc filter add dev dd0 ingress protocol ip flower \
     > ip_proto udp action csum udp goto chain 42 index 66
     # tc chain del dev dd0 chain 42 ingress
     (start UDP traffic towards dd0)
     # tc action replace action csum udp pass index 66
    
    was run repeatedly for several hours.
    
    Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
    Suggested-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77d5ad4048fba5bd6e16f78498d4b41e5534b8f5
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 21 17:25:17 2019 +0700

    tipc: fix use-after-free in tipc_sk_filter_rcv
    
    skb free-ed in:
      1/ condition 1: tipc_sk_filter_rcv -> tipc_sk_proto_rcv
      2/ condition 2: tipc_sk_filter_rcv -> tipc_group_filter_msg
    This leads to a "use-after-free" access in the next condition.
    
    We fix this by intializing the variable at declaration, then it is safe
    to check this variable to continue processing if condition matches.
    
    syzbot report:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_sk_filter_rcv+0x2166/0x34f0
     net/tipc/socket.c:2167
    Read of size 4 at addr ffff88808ea58534 by task kworker/u4:0/7
    
    CPU: 0 PID: 7 Comm: kworker/u4:0 Not tainted 5.0.0+ #61
    Hardware name: Google Google Compute Engine/Google Compute Engine,
     BIOS Google 01/01/2011
    Workqueue: tipc_send tipc_conn_send_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/generic_report.c:131
     tipc_sk_filter_rcv+0x2166/0x34f0 net/tipc/socket.c:2167
     tipc_sk_enqueue net/tipc/socket.c:2254 [inline]
     tipc_sk_rcv+0xc45/0x25a0 net/tipc/socket.c:2305
     tipc_topsrv_kern_evt+0x3b7/0x580 net/tipc/topsrv.c:610
     tipc_conn_send_to_sock+0x43e/0x5f0 net/tipc/topsrv.c:283
     tipc_conn_send_work+0x65/0x80 net/tipc/topsrv.c:303
     process_one_work+0x98e/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x357/0x430 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Reported-by: syzbot+e863893591cc7a622e40@syzkaller.appspotmail.com
    Fixes: c55c8eda ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0803278b0b4d8eeb2b461fb698785df65a725d9e
Author: Xu Yu <xuyu@linux.alibaba.com>
Date:   Thu Mar 21 18:00:35 2019 +0800

    bpf: do not restore dst_reg when cur_state is freed
    
    Syzkaller hit 'KASAN: use-after-free Write in sanitize_ptr_alu' bug.
    
    Call trace:
    
      dump_stack+0xbf/0x12e
      print_address_description+0x6a/0x280
      kasan_report+0x237/0x360
      sanitize_ptr_alu+0x85a/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fault injection trace:
    
      kfree+0xea/0x290
      free_func_state+0x4a/0x60
      free_verifier_state+0x61/0xe0
      push_stack+0x216/0x2f0                  <- inject failslab
      sanitize_ptr_alu+0x2b1/0x8d0
      adjust_ptr_min_max_vals+0x8f2/0x1ca0
      adjust_reg_min_max_vals+0x8ed/0x22e0
      do_check+0x1ca6/0x5d00
      bpf_check+0x9ca/0x2570
      bpf_prog_load+0xc91/0x1030
      __se_sys_bpf+0x61e/0x1f00
      do_syscall_64+0xc8/0x550
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    When kzalloc() fails in push_stack(), free_verifier_state() will free
    current verifier state. As push_stack() returns, dst_reg was restored
    if ptr_is_dst_reg is false. However, as member of the cur_state,
    dst_reg is also freed, and error occurs when dereferencing dst_reg.
    Simply fix it by testing ret of push_stack() before restoring dst_reg.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Xu Yu <xuyu@linux.alibaba.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 82efcab3b9f3ef59e9713237c6e3c05c3a95c1ae
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Mar 11 16:02:55 2019 -0700

    workqueue: Only unregister a registered lockdep key
    
    The recent change to prevent use after free and a memory leak introduced an
    unconditional call to wq_unregister_lockdep() in the error handling
    path. If the lockdep key had not been registered yet, then the lockdep core
    emits a warning.
    
    Only call wq_unregister_lockdep() if wq_register_lockdep() has been
    called first.
    
    Fixes: 009bb421b6ce ("workqueue, lockdep: Fix an alloc_workqueue() error path")
    Reported-by: syzbot+be0c198232f86389c3dd@syzkaller.appspotmail.com
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Qian Cai <cai@lca.pw>
    Link: https://lkml.kernel.org/r/20190311230255.176081-1-bvanassche@acm.org

commit 5cec2d2e5839f9c0fec319c523a911e0a7fd299f
Author: Todd Kjos <tkjos@android.com>
Date:   Fri Mar 1 15:06:06 2019 -0800

    binder: fix race between munmap() and direct reclaim
    
    An munmap() on a binder device causes binder_vma_close() to be called
    which clears the alloc->vma pointer.
    
    If direct reclaim causes binder_alloc_free_page() to be called, there
    is a race where alloc->vma is read into a local vma pointer and then
    used later after the mm->mmap_sem is acquired. This can result in
    calling zap_page_range() with an invalid vma which manifests as a
    use-after-free in zap_page_range().
    
    The fix is to check alloc->vma after acquiring the mmap_sem (which we
    were acquiring anyway) and skip zap_page_range() if it has changed
    to NULL.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56cd26b618855c9af48c8301aa6754ced8dd0beb
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Mar 5 00:40:26 2019 -0500

    media: serial_ir: Fix use-after-free in serial_ir_init_module
    
    Syzkaller report this:
    
    BUG: KASAN: use-after-free in sysfs_remove_file_ns+0x5f/0x70 fs/sysfs/file.c:468
    Read of size 8 at addr ffff8881dc7ae030 by task syz-executor.0/6249
    
    CPU: 1 PID: 6249 Comm: syz-executor.0 Not tainted 5.0.0-rc8+ #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xfa/0x1ce lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     ? 0xffffffffc1728000
     sysfs_remove_file_ns+0x5f/0x70 fs/sysfs/file.c:468
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     remove_bind_files drivers/base/bus.c:585 [inline]
     bus_remove_driver+0x186/0x220 drivers/base/bus.c:725
     driver_unregister+0x6c/0xa0 drivers/base/driver.c:197
     serial_ir_init_module+0x169/0x1000 [serial_ir]
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f9450132c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00007f9450132c70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f94501336bc
    R13: 00000000004bcefa R14: 00000000006f6fb0 R15: 0000000000000004
    
    Allocated by task 6249:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:495
     kmalloc include/linux/slab.h:545 [inline]
     kzalloc include/linux/slab.h:740 [inline]
     bus_add_driver+0xc0/0x610 drivers/base/bus.c:651
     driver_register+0x1bb/0x3f0 drivers/base/driver.c:170
     serial_ir_init_module+0xe8/0x1000 [serial_ir]
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 6249:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:457
     slab_free_hook mm/slub.c:1430 [inline]
     slab_free_freelist_hook mm/slub.c:1457 [inline]
     slab_free mm/slub.c:3005 [inline]
     kfree+0xe1/0x270 mm/slub.c:3957
     kobject_cleanup lib/kobject.c:662 [inline]
     kobject_release lib/kobject.c:691 [inline]
     kref_put include/linux/kref.h:67 [inline]
     kobject_put+0x146/0x240 lib/kobject.c:708
     bus_remove_driver+0x10e/0x220 drivers/base/bus.c:732
     driver_unregister+0x6c/0xa0 drivers/base/driver.c:197
     serial_ir_init_module+0x14c/0x1000 [serial_ir]
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881dc7ae000
     which belongs to the cache kmalloc-256 of size 256
    The buggy address is located 48 bytes inside of
     256-byte region [ffff8881dc7ae000, ffff8881dc7ae100)
    The buggy address belongs to the page:
    page:ffffea000771eb80 count:1 mapcount:0 mapping:ffff8881f6c02e00 index:0x0
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 ffffea0007d14800 0000000400000002 ffff8881f6c02e00
    raw: 0000000000000000 00000000800c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881dc7adf00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8881dc7adf80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff8881dc7ae000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                         ^
     ffff8881dc7ae080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8881dc7ae100: fc fc fc fc fc fc fc fc 00 00 00 00 00 00 00 00
    
    There are already cleanup handlings in serial_ir_init error path,
    no need to call serial_ir_exit do it again in serial_ir_init_module,
    otherwise will trigger a use-after-free issue.
    
    Fixes: fa5dc29c1fcc ("[media] lirc_serial: move out of staging and rename to serial_ir")
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit fdfa59cd63b184e1e96d51ff170fcac739bc6f6f
Author: Stefan Brüns <stefan.bruens@rwth-aachen.de>
Date:   Sat Jan 19 20:30:04 2019 -0500

    media: dvbsky: Avoid leaking dvb frontend
    
    Commit 14f4eaeddabc ("media: dvbsky: fix driver unregister logic") fixed
    a use-after-free by removing the reference to the frontend after deleting
    the backing i2c device.
    
    This has the unfortunate side effect the frontend device is never freed
    in the dvb core leaving a dangling device, leading to errors when the
    dvb core tries to register the frontend after e.g. a replug as reported
    here: https://www.spinics.net/lists/linux-media/msg138181.html
    
    media: dvbsky: issues with DVBSky T680CI
    
    ===
    [  561.119145] sp2 8-0040: CIMaX SP2 successfully attached
    [  561.119161] usb 2-3: DVB: registering adapter 0 frontend 0 (Silicon Labs
    Si2168)...
    [  561.119174] sysfs: cannot create duplicate filename '/class/dvb/
    dvb0.frontend0'
    ===
    
    The use after free happened as dvb_usbv2_disconnect calls in this order:
    - dvb_usb_device::props->exit(...)
    - dvb_usbv2_adapter_frontend_exit(...)
      + if (fe) dvb_unregister_frontend(fe)
      + dvb_usb_device::props->frontend_detach(...)
    
    Moving the release of the i2c device from exit() to frontend_detach()
    avoids the dangling pointer access and allows the core to unregister
    the frontend.
    
    This was originally reported for a DVBSky T680CI, but it also affects
    the MyGica T230C. As all supported devices structure the registration/
    unregistration identically, apply the change for all device types.
    
    Signed-off-by: Stefan Brüns <stefan.bruens@rwth-aachen.de>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 0dba9e4be95b59e77060645ca8e37ca3231061f5
Author: Changbin Du <changbin.du@gmail.com>
Date:   Sat Mar 16 16:05:47 2019 +0800

    perf top: Delete the evlist before perf_session, fixing heap-use-after-free issue
    
    The evlist should be destroyed before the perf session.
    
    Detected with gcc's ASan:
    
      =================================================================
      ==27350==ERROR: AddressSanitizer: heap-use-after-free on address 0x62b000002e38 at pc 0x5611da276999 bp 0x7ffce8f1d1a0 sp 0x7ffce8f1d190
      WRITE of size 8 at 0x62b000002e38 thread T0
          #0 0x5611da276998 in __list_del /home/work/linux/tools/include/linux/list.h:89
          #1 0x5611da276d4a in __list_del_entry /home/work/linux/tools/include/linux/list.h:102
          #2 0x5611da276e77 in list_del_init /home/work/linux/tools/include/linux/list.h:145
          #3 0x5611da2781cd in thread__put util/thread.c:130
          #4 0x5611da2cc0a8 in __thread__zput util/thread.h:68
          #5 0x5611da2d2dcb in hist_entry__delete util/hist.c:1148
          #6 0x5611da2cdf91 in hists__delete_entry util/hist.c:337
          #7 0x5611da2ce19e in hists__delete_entries util/hist.c:365
          #8 0x5611da2db2ab in hists__delete_all_entries util/hist.c:2639
          #9 0x5611da2db325 in hists_evsel__exit util/hist.c:2651
          #10 0x5611da1c5352 in perf_evsel__exit util/evsel.c:1304
          #11 0x5611da1c5390 in perf_evsel__delete util/evsel.c:1309
          #12 0x5611da1b35f0 in perf_evlist__purge util/evlist.c:124
          #13 0x5611da1b38e2 in perf_evlist__delete util/evlist.c:148
          #14 0x5611da069781 in cmd_top /home/changbin/work/linux/tools/perf/builtin-top.c:1645
          #15 0x5611da17d038 in run_builtin /home/changbin/work/linux/tools/perf/perf.c:302
          #16 0x5611da17d577 in handle_internal_command /home/changbin/work/linux/tools/perf/perf.c:354
          #17 0x5611da17d97b in run_argv /home/changbin/work/linux/tools/perf/perf.c:398
          #18 0x5611da17e0e9 in main /home/changbin/work/linux/tools/perf/perf.c:520
          #19 0x7fdcc970f09a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
          #20 0x5611d9ff35c9 in _start (/home/work/linux/tools/perf/perf+0x3e95c9)
    
      0x62b000002e38 is located 11320 bytes inside of 27448-byte region [0x62b000000200,0x62b000006d38)
      freed by thread T0 here:
          #0 0x7fdccb04ab70 in free (/usr/lib/x86_64-linux-gnu/libasan.so.5+0xedb70)
          #1 0x5611da260df4 in perf_session__delete util/session.c:201
          #2 0x5611da063de5 in __cmd_top /home/changbin/work/linux/tools/perf/builtin-top.c:1300
          #3 0x5611da06973c in cmd_top /home/changbin/work/linux/tools/perf/builtin-top.c:1642
          #4 0x5611da17d038 in run_builtin /home/changbin/work/linux/tools/perf/perf.c:302
          #5 0x5611da17d577 in handle_internal_command /home/changbin/work/linux/tools/perf/perf.c:354
          #6 0x5611da17d97b in run_argv /home/changbin/work/linux/tools/perf/perf.c:398
          #7 0x5611da17e0e9 in main /home/changbin/work/linux/tools/perf/perf.c:520
          #8 0x7fdcc970f09a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    
      previously allocated by thread T0 here:
          #0 0x7fdccb04b138 in calloc (/usr/lib/x86_64-linux-gnu/libasan.so.5+0xee138)
          #1 0x5611da26010c in zalloc util/util.h:23
          #2 0x5611da260824 in perf_session__new util/session.c:118
          #3 0x5611da0633a6 in __cmd_top /home/changbin/work/linux/tools/perf/builtin-top.c:1192
          #4 0x5611da06973c in cmd_top /home/changbin/work/linux/tools/perf/builtin-top.c:1642
          #5 0x5611da17d038 in run_builtin /home/changbin/work/linux/tools/perf/perf.c:302
          #6 0x5611da17d577 in handle_internal_command /home/changbin/work/linux/tools/perf/perf.c:354
          #7 0x5611da17d97b in run_argv /home/changbin/work/linux/tools/perf/perf.c:398
          #8 0x5611da17e0e9 in main /home/changbin/work/linux/tools/perf/perf.c:520
          #9 0x7fdcc970f09a in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2409a)
    
      SUMMARY: AddressSanitizer: heap-use-after-free /home/work/linux/tools/include/linux/list.h:89 in __list_del
      Shadow bytes around the buggy address:
        0x0c567fff8570: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff8580: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff8590: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff85a0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff85b0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
      =>0x0c567fff85c0: fd fd fd fd fd fd fd[fd]fd fd fd fd fd fd fd fd
        0x0c567fff85d0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff85e0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff85f0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff8600: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
        0x0c567fff8610: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
      Shadow byte legend (one shadow byte represents 8 application bytes):
        Addressable:           00
        Partially addressable: 01 02 03 04 05 06 07
        Heap left redzone:       fa
        Freed heap region:       fd
        Stack left redzone:      f1
        Stack mid redzone:       f2
        Stack right redzone:     f3
        Stack after return:      f5
        Stack use after scope:   f8
        Global redzone:          f9
        Global init order:       f6
        Poisoned by user:        f7
        Container overflow:      fc
        Array cookie:            ac
        Intra object redzone:    bb
        ASan internal:           fe
        Left alloca redzone:     ca
        Right alloca redzone:    cb
      ==27350==ABORTING
    
    Signed-off-by: Changbin Du <changbin.du@gmail.com>
    Reviewed-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Link: http://lkml.kernel.org/r/20190316080556.3075-8-changbin.du@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit dea37a97265588da604c6ba80160a287b72c7bfd
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 07:45:08 2019 -0500

    media: cpia2: Fix use-after-free in cpia2_exit
    
    Syzkaller report this:
    
    BUG: KASAN: use-after-free in sysfs_remove_file_ns+0x5f/0x70 fs/sysfs/file.c:468
    Read of size 8 at addr ffff8881f59a6b70 by task syz-executor.0/8363
    
    CPU: 0 PID: 8363 Comm: syz-executor.0 Not tainted 5.0.0-rc8+ #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xfa/0x1ce lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     sysfs_remove_file_ns+0x5f/0x70 fs/sysfs/file.c:468
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     usb_remove_newid_files drivers/usb/core/driver.c:212 [inline]
     usb_deregister+0x12a/0x3b0 drivers/usb/core/driver.c:1005
     cpia2_exit+0xa/0x16 [cpia2]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f86f3754c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000300
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f86f37556bc
    R13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff
    
    Allocated by task 8363:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:495
     kmalloc include/linux/slab.h:545 [inline]
     kzalloc include/linux/slab.h:740 [inline]
     bus_add_driver+0xc0/0x610 drivers/base/bus.c:651
     driver_register+0x1bb/0x3f0 drivers/base/driver.c:170
     usb_register_driver+0x267/0x520 drivers/usb/core/driver.c:965
     0xffffffffc1b4817c
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 8363:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:457
     slab_free_hook mm/slub.c:1430 [inline]
     slab_free_freelist_hook mm/slub.c:1457 [inline]
     slab_free mm/slub.c:3005 [inline]
     kfree+0xe1/0x270 mm/slub.c:3957
     kobject_cleanup lib/kobject.c:662 [inline]
     kobject_release lib/kobject.c:691 [inline]
     kref_put include/linux/kref.h:67 [inline]
     kobject_put+0x146/0x240 lib/kobject.c:708
     bus_remove_driver+0x10e/0x220 drivers/base/bus.c:732
     driver_unregister+0x6c/0xa0 drivers/base/driver.c:197
     usb_register_driver+0x341/0x520 drivers/usb/core/driver.c:980
     0xffffffffc1b4817c
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881f59a6b40
     which belongs to the cache kmalloc-256 of size 256
    The buggy address is located 48 bytes inside of
     256-byte region [ffff8881f59a6b40, ffff8881f59a6c40)
    The buggy address belongs to the page:
    page:ffffea0007d66980 count:1 mapcount:0 mapping:ffff8881f6c02e00 index:0x0
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 dead000000000100 dead000000000200 ffff8881f6c02e00
    raw: 0000000000000000 00000000800c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881f59a6a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8881f59a6a80: 00 00 00 00 00 00 00 00 00 00 fc fc fc fc fc fc
    >ffff8881f59a6b00: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                                                 ^
     ffff8881f59a6b80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8881f59a6c00: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    
    cpia2_init does not check return value of cpia2_init, if it failed
    in usb_register_driver, there is already cleanup using driver_unregister.
    No need call cpia2_usb_cleanup on module exit.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 9b1640686470fbbd1c6efb35ada6fe1427ea8d0f
Author: James Smart <jsmart2021@gmail.com>
Date:   Tue Mar 12 16:30:06 2019 -0700

    scsi: lpfc: Fix use-after-free mailbox cmd completion
    
    When unloading the driver, mailbox commands may be sent without holding a
    reference on the ndlp. By the time the mailbox command completes, the ndlp
    may have reduced its ref counts and been freed.  The problem was reported
    by KASAN.
    
    While unregistering due to driver unload, have the completion noop'd by
    setting the ndlp context NULL'd. Due to the unload, no further action was
    necessary.  Also, while reviewing this path, the generic nulling of the
    context after handling should be slightly moved.
    
    Reported by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit bbfaa7d36c1eb465f120f2a3dfe25c1fe022195d
Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
Date:   Thu Mar 7 07:51:09 2019 +0800

    ASoC: dpcm: prevent snd_soc_dpcm use after free
    
    The dpcm get from fe_clients/be_clients
    may be free before use
    
    Add a spin lock at snd_soc_card level,
    to protect the dpcm instance.
    The lock may be used in atomic context, so use spin lock.
    
    possible race condition between
    void dpcm_be_disconnect(
            ...
            list_del(&dpcm->list_be);
            list_del(&dpcm->list_fe);
            kfree(dpcm);
            ...
    
    and
            for_each_dpcm_fe()
            for_each_dpcm_be*()
    
    race condition example
    Thread 1:
        snd_soc_dapm_mixer_update_power()
            -> soc_dpcm_runtime_update()
                -> dpcm_be_disconnect()
                    -> kfree(dpcm);
    Thread 2:
        dpcm_fe_dai_trigger()
            -> dpcm_be_dai_trigger()
                -> snd_soc_dpcm_can_be_free_stop()
                    -> if (dpcm->fe == fe)
    
    Excpetion Scenario:
            two FE link to same BE
            FE1 -> BE
            FE2 ->
    
            Thread 1: switch of mixer between FE2 -> BE
            Thread 2: pcm_stop FE1
    
    Exception:
    
    Unable to handle kernel paging request at virtual address dead0000000000e0
    
    pc=<> [<ffffff8960e2cd10>] dpcm_be_dai_trigger+0x29c/0x47c
            sound/soc/soc-pcm.c:3226
                    if (dpcm->fe == fe)
    lr=<> [<ffffff8960e2f694>] dpcm_fe_dai_do_trigger+0x94/0x26c
    
    Backtrace:
    [<ffffff89602dba80>] notify_die+0x68/0xb8
    [<ffffff896028c7dc>] die+0x118/0x2a8
    [<ffffff89602a2f84>] __do_kernel_fault+0x13c/0x14c
    [<ffffff89602a27f4>] do_translation_fault+0x64/0xa0
    [<ffffff8960280cf8>] do_mem_abort+0x4c/0xd0
    [<ffffff8960282ad0>] el1_da+0x24/0x40
    [<ffffff8960e2cd10>] dpcm_be_dai_trigger+0x29c/0x47c
    [<ffffff8960e2f694>] dpcm_fe_dai_do_trigger+0x94/0x26c
    [<ffffff8960e2edec>] dpcm_fe_dai_trigger+0x3c/0x44
    [<ffffff8960de5588>] snd_pcm_do_stop+0x50/0x5c
    [<ffffff8960dded24>] snd_pcm_action+0xb4/0x13c
    [<ffffff8960ddfdb4>] snd_pcm_drop+0xa0/0x128
    [<ffffff8960de69bc>] snd_pcm_common_ioctl+0x9d8/0x30f0
    [<ffffff8960de1cac>] snd_pcm_ioctl_compat+0x29c/0x2f14
    [<ffffff89604c9d60>] compat_SyS_ioctl+0x128/0x244
    [<ffffff8960283740>] el0_svc_naked+0x34/0x38
    [<ffffffffffffffff>] 0xffffffffffffffff
    
    Signed-off-by: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 36b6c9ed45afe89045973e8dee1b004dd5372d40
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 26 14:08:58 2019 -0800

    drm/vkms: fix use-after-free when drm_gem_handle_create() fails
    
    If drm_gem_handle_create() fails in vkms_gem_create(), then the
    vkms_gem_object is freed twice: once when the reference is dropped by
    drm_gem_object_put_unlocked(), and again by the extra calls to
    drm_gem_object_release() and kfree().
    
    Fix it by skipping the second release and free.
    
    This bug was originally found in the vgem driver by syzkaller using
    fault injection, but I noticed it's also present in the vkms driver.
    
    Fixes: 559e50fd34d1 ("drm/vkms: Add dumb operations")
    Cc: Rodrigo Siqueira <rodrigosiqueiramelo@gmail.com>
    Cc: Haneen Mohammed <hamohammed.sa@gmail.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Rodrigo Siqueira <rodrigosiqueiramelo@gmail.com>
    Signed-off-by: Rodrigo Siqueira <rodrigosiqueiramelo@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190226220858.214438-1-ebiggers@kernel.org
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>

commit 21d2b122732318b48c10b7262e15595ce54511d3
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 26 13:44:51 2019 -0800

    drm/vgem: fix use-after-free when drm_gem_handle_create() fails
    
    If drm_gem_handle_create() fails in vgem_gem_create(), then the
    drm_vgem_gem_object is freed twice: once when the reference is dropped
    by drm_gem_object_put_unlocked(), and again by __vgem_gem_destroy().
    
    This was hit by syzkaller using fault injection.
    
    Fix it by skipping the second free.
    
    Reported-by: syzbot+e73f2fb5ed5a5df36d33@syzkaller.appspotmail.com
    Fixes: af33a9190d02 ("drm/vgem: Enable dmabuf import interfaces")
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Rodrigo Siqueira <rodrigosiqueiramelo@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190226214451.195123-1-ebiggers@kernel.org
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>

commit 862e4644fd2d7df8998edc65e0963ea2f567bde9
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Sun Mar 10 14:58:25 2019 -0400

    iio: adc: xilinx: fix potential use-after-free on probe
    
    If probe errors out after request_irq(), its error path
    does not explicitly cancel the delayed work, which may
    have been scheduled by the interrupt handler.
    
    This means the delayed work may still be running when
    the core frees the private structure (struct xadc).
    This is a potential use-after-free.
    
    Fix by inserting cancel_delayed_work_sync() in the probe
    error path.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 62039b6aef63380ba7a37c113bbaeee8a55c5342
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Sun Mar 10 14:58:24 2019 -0400

    iio: adc: xilinx: fix potential use-after-free on remove
    
    When cancel_delayed_work() returns, the delayed work may still
    be running. This means that the core could potentially free
    the private structure (struct xadc) while the delayed work
    is still using it. This is a potential use-after-free.
    
    Fix by calling cancel_delayed_work_sync(), which waits for
    any residual work to finish before returning.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>

commit 09bb839434bd845c01da3d159b0c126fe7fa90da
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Mar 13 12:39:28 2019 -0600

    io_uring: fix fget/fput handling
    
    This isn't a straight port of commit 84c4e1f89fef for aio.c, since
    io_uring doesn't use files in exactly the same way. But it's pretty
    close. See the commit message for that commit.
    
    This essentially fixes a use-after-free with the poll command
    handling, but it takes cue from Linus's approach to just simplifying
    the file handling. We move the setup of the file into a higher level
    location, so the individual commands don't have to deal with it. And
    then we release the reference when we free the associated io_kiocb.
    
    Fixes: 221c5eb23382 ("io_uring: add support for IORING_OP_POLL")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit e15ce4b8d11227007577e6dc1364d288b8874fbe
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Tue Mar 12 17:05:47 2019 +0200

    net/mlx4_core: Fix reset flow when in command polling mode
    
    As part of unloading a device, the driver switches from
    FW command event mode to FW command polling mode.
    
    Part of switching over to polling mode is freeing the command context array
    memory (unfortunately, currently, without NULLing the command context array
    pointer).
    
    The reset flow calls "complete" to complete all outstanding fw commands
    (if we are in event mode). The check for event vs. polling mode here
    is to test if the command context array pointer is NULL.
    
    If the reset flow is activated after the switch to polling mode, it will
    attempt (incorrectly) to complete all the commands in the context array --
    because the pointer was not NULLed when the driver switched over to polling
    mode.
    
    As a result, we have a use-after-free situation, which results in a
    kernel crash.
    
    For example:
    BUG: unable to handle kernel NULL pointer dereference at           (null)
    IP: [<ffffffff876c4a8e>] __wake_up_common+0x2e/0x90
    PGD 0
    Oops: 0000 [#1] SMP
    Modules linked in: netconsole nfsv3 nfs_acl nfs lockd grace ...
    CPU: 2 PID: 940 Comm: kworker/2:3 Kdump: loaded Not tainted 3.10.0-862.el7.x86_64 #1
    Hardware name: Microsoft Corporation Virtual Machine/Virtual Machine, BIOS 090006  04/28/2016
    Workqueue: events hv_eject_device_work [pci_hyperv]
    task: ffff8d1734ca0fd0 ti: ffff8d17354bc000 task.ti: ffff8d17354bc000
    RIP: 0010:[<ffffffff876c4a8e>]  [<ffffffff876c4a8e>] __wake_up_common+0x2e/0x90
    RSP: 0018:ffff8d17354bfa38  EFLAGS: 00010082
    RAX: 0000000000000000 RBX: ffff8d17362d42c8 RCX: 0000000000000000
    RDX: 0000000000000001 RSI: 0000000000000003 RDI: ffff8d17362d42c8
    RBP: ffff8d17354bfa70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000298 R11: ffff8d173610e000 R12: ffff8d17362d42d0
    R13: 0000000000000246 R14: 0000000000000000 R15: 0000000000000003
    FS:  0000000000000000(0000) GS:ffff8d1802680000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000000 CR3: 00000000f16d8000 CR4: 00000000001406e0
    Call Trace:
     [<ffffffff876c7adc>] complete+0x3c/0x50
     [<ffffffffc04242f0>] mlx4_cmd_wake_completions+0x70/0x90 [mlx4_core]
     [<ffffffffc041e7b1>] mlx4_enter_error_state+0xe1/0x380 [mlx4_core]
     [<ffffffffc041fa4b>] mlx4_comm_cmd+0x29b/0x360 [mlx4_core]
     [<ffffffffc041ff51>] __mlx4_cmd+0x441/0x920 [mlx4_core]
     [<ffffffff877f62b1>] ? __slab_free+0x81/0x2f0
     [<ffffffff87951384>] ? __radix_tree_lookup+0x84/0xf0
     [<ffffffffc043a8eb>] mlx4_free_mtt_range+0x5b/0xb0 [mlx4_core]
     [<ffffffffc043a957>] mlx4_mtt_cleanup+0x17/0x20 [mlx4_core]
     [<ffffffffc04272c7>] mlx4_free_eq+0xa7/0x1c0 [mlx4_core]
     [<ffffffffc042803e>] mlx4_cleanup_eq_table+0xde/0x130 [mlx4_core]
     [<ffffffffc0433e08>] mlx4_unload_one+0x118/0x300 [mlx4_core]
     [<ffffffffc0434191>] mlx4_remove_one+0x91/0x1f0 [mlx4_core]
    
    The fix is to set the command context array pointer to NULL after freeing
    the array.
    
    Fixes: f5aef5aa3506 ("net/mlx4_core: Activate reset flow upon fatal command cases")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ee74d0bd4325efb41e38affe5955f920ed973f23
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 11 13:48:44 2019 -0700

    net/x25: reset state in x25_connect()
    
    In case x25_connect() fails and frees the socket neighbour,
    we also need to undo the change done to x25->state.
    
    Before my last bug fix, we had use-after-free so this
    patch fixes a latent bug.
    
    syzbot report :
    
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 16137 Comm: syz-executor.1 Not tainted 5.0.0+ #117
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:x25_write_internal+0x1e8/0xdf0 net/x25/x25_subr.c:173
    Code: 00 40 88 b5 e0 fe ff ff 0f 85 01 0b 00 00 48 8b 8b 80 04 00 00 48 ba 00 00 00 00 00 fc ff df 48 8d 79 1c 48 89 fe 48 c1 ee 03 <0f> b6 34 16 48 89 fa 83 e2 07 83 c2 03 40 38 f2 7c 09 40 84 f6 0f
    RSP: 0018:ffff888076717a08 EFLAGS: 00010207
    RAX: ffff88805f2f2292 RBX: ffff8880a0ae6000 RCX: 0000000000000000
    kobject: 'loop5' (0000000018d0d0ee): kobject_uevent_env
    RDX: dffffc0000000000 RSI: 0000000000000003 RDI: 000000000000001c
    RBP: ffff888076717b40 R08: ffff8880950e0580 R09: ffffed100be5e46d
    R10: ffffed100be5e46c R11: ffff88805f2f2363 R12: ffff888065579840
    kobject: 'loop5' (0000000018d0d0ee): fill_kobj_path: path = '/devices/virtual/block/loop5'
    R13: 1ffff1100ece2f47 R14: 0000000000000013 R15: 0000000000000013
    FS:  00007fb88cf43700(0000) GS:ffff8880ae900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f9a42a41028 CR3: 0000000087a67000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     x25_release+0xd0/0x340 net/x25/af_x25.c:658
     __sock_release+0xd3/0x2b0 net/socket.c:579
     sock_close+0x1b/0x30 net/socket.c:1162
     __fput+0x2df/0x8d0 fs/file_table.c:278
     ____fput+0x16/0x20 fs/file_table.c:309
     task_work_run+0x14a/0x1c0 kernel/task_work.c:113
     get_signal+0x1961/0x1d50 kernel/signal.c:2388
     do_signal+0x87/0x1940 arch/x86/kernel/signal.c:816
     exit_to_usermode_loop+0x244/0x2c0 arch/x86/entry/common.c:162
     prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
     do_syscall_64+0x52d/0x610 arch/x86/entry/common.c:293
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457f29
    Code: ad b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 7b b8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fb88cf42c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002a
    RAX: fffffffffffffe00 RBX: 0000000000000003 RCX: 0000000000457f29
    RDX: 0000000000000012 RSI: 0000000020000080 RDI: 0000000000000004
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fb88cf436d4
    R13: 00000000004be462 R14: 00000000004cec98 R15: 00000000ffffffff
    Modules linked in:
    
    Fixes: 95d6ebd53c79 ("net/x25: fix use-after-free in x25_device_event()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: andrew hendry <andrew.hendry@gmail.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a9764869779081e8bf24da07ac040e8f3efcf13a
Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
Date:   Fri Mar 8 13:05:53 2019 +0800

    ASoC: dpcm: prevent snd_soc_dpcm use after free
    
    The dpcm get from fe_clients/be_clients
    may be free before use
    
    Add a spin lock at snd_soc_card level,
    to protect the dpcm instance.
    The lock may be used in atomic context, so use spin lock.
    
    Use irq spin lock version,
    since the lock may be used in interrupts.
    
    possible race condition between
    void dpcm_be_disconnect(
            ...
            list_del(&dpcm->list_be);
            list_del(&dpcm->list_fe);
            kfree(dpcm);
            ...
    
    and
            for_each_dpcm_fe()
            for_each_dpcm_be*()
    
    race condition example
    Thread 1:
        snd_soc_dapm_mixer_update_power()
            -> soc_dpcm_runtime_update()
                -> dpcm_be_disconnect()
                    -> kfree(dpcm);
    Thread 2:
        dpcm_fe_dai_trigger()
            -> dpcm_be_dai_trigger()
                -> snd_soc_dpcm_can_be_free_stop()
                    -> if (dpcm->fe == fe)
    
    Excpetion Scenario:
            two FE link to same BE
            FE1 -> BE
            FE2 ->
    
            Thread 1: switch of mixer between FE2 -> BE
            Thread 2: pcm_stop FE1
    
    Exception:
    
    Unable to handle kernel paging request at virtual address dead0000000000e0
    
    pc=<> [<ffffff8960e2cd10>] dpcm_be_dai_trigger+0x29c/0x47c
            sound/soc/soc-pcm.c:3226
                    if (dpcm->fe == fe)
    lr=<> [<ffffff8960e2f694>] dpcm_fe_dai_do_trigger+0x94/0x26c
    
    Backtrace:
    [<ffffff89602dba80>] notify_die+0x68/0xb8
    [<ffffff896028c7dc>] die+0x118/0x2a8
    [<ffffff89602a2f84>] __do_kernel_fault+0x13c/0x14c
    [<ffffff89602a27f4>] do_translation_fault+0x64/0xa0
    [<ffffff8960280cf8>] do_mem_abort+0x4c/0xd0
    [<ffffff8960282ad0>] el1_da+0x24/0x40
    [<ffffff8960e2cd10>] dpcm_be_dai_trigger+0x29c/0x47c
    [<ffffff8960e2f694>] dpcm_fe_dai_do_trigger+0x94/0x26c
    [<ffffff8960e2edec>] dpcm_fe_dai_trigger+0x3c/0x44
    [<ffffff8960de5588>] snd_pcm_do_stop+0x50/0x5c
    [<ffffff8960dded24>] snd_pcm_action+0xb4/0x13c
    [<ffffff8960ddfdb4>] snd_pcm_drop+0xa0/0x128
    [<ffffff8960de69bc>] snd_pcm_common_ioctl+0x9d8/0x30f0
    [<ffffff8960de1cac>] snd_pcm_ioctl_compat+0x29c/0x2f14
    [<ffffff89604c9d60>] compat_SyS_ioctl+0x128/0x244
    [<ffffff8960283740>] el0_svc_naked+0x34/0x38
    [<ffffffffffffffff>] 0xffffffffffffffff
    
    Signed-off-by: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commits)
      gro_cells: make sure device is up in gro_cells_receive()
      vxlan: test dev->flags & IFF_UP before calling gro_cells_receive()
      net/x25: fix use-after-free in x25_device_event()
      isdn: mISDNinfineon: fix potential NULL pointer dereference
      net: hns3: fix to stop multiple HNS reset due to the AER changes
      ip: fix ip_mc_may_pull() return value
      net: keep refcount warning in reqsk_free()
      net: stmmac: Avoid one more sometimes uninitialized Clang warning
      net: dsa: mv88e6xxx: Set correct interface mode for CPU/DSA ports
      rxrpc: Fix client call queueing, waiting for channel
      tcp: handle inet_csk_reqsk_queue_add() failures
      net: ethernet: sun: Zero initialize class in default case in niu_add_ethtool_tcam_entry
      8139too : Add support for U.S. Robotics USR997901A 10/100 Cardbus NIC
      fou, fou6: avoid uninit-value in gue_err() and gue6_err()
      net: sched: fix potential use-after-free in __tcf_chain_put()
      vhost: silence an unused-variable warning
      vsock/virtio: fix kernel panic from virtio_transport_reset_no_sock
      connector: fix unsafe usage of ->real_parent
      vxlan: do not need BH again in vxlan_cleanup()
      net: hns3: add dma_rmb() for rx description
      ...

commit 3f3a390dbd59d236f62cff8e8b20355ef7069e3d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Mar 11 13:04:16 2019 +0100

    netfilter: nf_tables: use-after-free in dynamic operations
    
    Smatch reports:
    
           net/netfilter/nf_tables_api.c:2167 nf_tables_expr_destroy()
            error: dereferencing freed memory 'expr->ops'
    
    net/netfilter/nf_tables_api.c
        2162 static void nf_tables_expr_destroy(const struct nft_ctx *ctx,
        2163                                   struct nft_expr *expr)
        2164 {
        2165        if (expr->ops->destroy)
        2166                expr->ops->destroy(ctx, expr);
                                                    ^^^^
    --> 2167        module_put(expr->ops->type->owner);
                               ^^^^^^^^^
        2168 }
    
    Smatch says there are three functions which free expr->ops.
    
    Fixes: b8e204006340 ("netfilter: nft_compat: use .release_ops and remove list of extension")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 59cbf56fcd98ba2a715b6e97c4e43f773f956393
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Mar 10 10:36:40 2019 -0700

    vxlan: test dev->flags & IFF_UP before calling gro_cells_receive()
    
    Same reasons than the ones explained in commit 4179cb5a4c92
    ("vxlan: test dev->flags & IFF_UP before calling netif_rx()")
    
    netif_rx() or gro_cells_receive() must be called under a strict contract.
    
    At device dismantle phase, core networking clears IFF_UP
    and flush_all_backlogs() is called after rcu grace period
    to make sure no incoming packet might be in a cpu backlog
    and still referencing the device.
    
    A similar protocol is used for gro_cells infrastructure, as
    gro_cells_destroy() will be called only after a full rcu
    grace period is observed after IFF_UP has been cleared.
    
    Most drivers call netif_rx() from their interrupt handler,
    and since the interrupts are disabled at device dismantle,
    netif_rx() does not have to check dev->flags & IFF_UP
    
    Virtual drivers do not have this guarantee, and must
    therefore make the check themselves.
    
    Otherwise we risk use-after-free and/or crashes.
    
    Fixes: d342894c5d2f ("vxlan: virtual extensible lan")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 95d6ebd53c79522bf9502dbc7e89e0d63f94dae4
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Mar 10 09:07:14 2019 -0700

    net/x25: fix use-after-free in x25_device_event()
    
    In case of failure x25_connect() does a x25_neigh_put(x25->neighbour)
    but forgets to clear x25->neighbour pointer, thus triggering use-after-free.
    
    Since the socket is visible in x25_list, we need to hold x25_list_lock
    to protect the operation.
    
    syzbot report :
    
    BUG: KASAN: use-after-free in x25_kill_by_device net/x25/af_x25.c:217 [inline]
    BUG: KASAN: use-after-free in x25_device_event+0x296/0x2b0 net/x25/af_x25.c:252
    Read of size 8 at addr ffff8880a030edd0 by task syz-executor003/7854
    
    CPU: 0 PID: 7854 Comm: syz-executor003 Not tainted 5.0.0+ #97
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135
     x25_kill_by_device net/x25/af_x25.c:217 [inline]
     x25_device_event+0x296/0x2b0 net/x25/af_x25.c:252
     notifier_call_chain+0xc7/0x240 kernel/notifier.c:93
     __raw_notifier_call_chain kernel/notifier.c:394 [inline]
     raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:401
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1739
     call_netdevice_notifiers_extack net/core/dev.c:1751 [inline]
     call_netdevice_notifiers net/core/dev.c:1765 [inline]
     __dev_notify_flags+0x1e9/0x2c0 net/core/dev.c:7607
     dev_change_flags+0x10d/0x170 net/core/dev.c:7643
     dev_ifsioc+0x2b0/0x940 net/core/dev_ioctl.c:237
     dev_ioctl+0x1b8/0xc70 net/core/dev_ioctl.c:488
     sock_do_ioctl+0x1bd/0x300 net/socket.c:995
     sock_ioctl+0x32b/0x610 net/socket.c:1096
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0xd6e/0x1390 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4467c9
    Code: e8 0c e8 ff ff 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 5b 07 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fdbea222d98 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00000000006dbc58 RCX: 00000000004467c9
    RDX: 0000000020000340 RSI: 0000000000008914 RDI: 0000000000000003
    RBP: 00000000006dbc50 R08: 00007fdbea223700 R09: 0000000000000000
    R10: 00007fdbea223700 R11: 0000000000000246 R12: 00000000006dbc5c
    R13: 6000030030626669 R14: 0000000000000000 R15: 0000000030626669
    
    Allocated by task 7843:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc mm/kasan/common.c:495 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:468
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:509
     kmem_cache_alloc_trace+0x151/0x760 mm/slab.c:3615
     kmalloc include/linux/slab.h:545 [inline]
     x25_link_device_up+0x46/0x3f0 net/x25/x25_link.c:249
     x25_device_event+0x116/0x2b0 net/x25/af_x25.c:242
     notifier_call_chain+0xc7/0x240 kernel/notifier.c:93
     __raw_notifier_call_chain kernel/notifier.c:394 [inline]
     raw_notifier_call_chain+0x2e/0x40 kernel/notifier.c:401
     call_netdevice_notifiers_info+0x3f/0x90 net/core/dev.c:1739
     call_netdevice_notifiers_extack net/core/dev.c:1751 [inline]
     call_netdevice_notifiers net/core/dev.c:1765 [inline]
     __dev_notify_flags+0x121/0x2c0 net/core/dev.c:7605
     dev_change_flags+0x10d/0x170 net/core/dev.c:7643
     dev_ifsioc+0x2b0/0x940 net/core/dev_ioctl.c:237
     dev_ioctl+0x1b8/0xc70 net/core/dev_ioctl.c:488
     sock_do_ioctl+0x1bd/0x300 net/socket.c:995
     sock_ioctl+0x32b/0x610 net/socket.c:1096
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0xd6e/0x1390 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 7865:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:457
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:465
     __cache_free mm/slab.c:3494 [inline]
     kfree+0xcf/0x230 mm/slab.c:3811
     x25_neigh_put include/net/x25.h:253 [inline]
     x25_connect+0x8d8/0xde0 net/x25/af_x25.c:824
     __sys_connect+0x266/0x330 net/socket.c:1685
     __do_sys_connect net/socket.c:1696 [inline]
     __se_sys_connect net/socket.c:1693 [inline]
     __x64_sys_connect+0x73/0xb0 net/socket.c:1693
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8880a030edc0
     which belongs to the cache kmalloc-256 of size 256
    The buggy address is located 16 bytes inside of
     256-byte region [ffff8880a030edc0, ffff8880a030eec0)
    The buggy address belongs to the page:
    page:ffffea000280c380 count:1 mapcount:0 mapping:ffff88812c3f07c0 index:0x0
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea0002806788 ffffea00027f0188 ffff88812c3f07c0
    raw: 0000000000000000 ffff8880a030e000 000000010000000c 0000000000000000
    page dumped because: kasan: bad access detected
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+04babcefcd396fabec37@syzkaller.appspotmail.com
    Cc: andrew hendry <andrew.hendry@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 083b78a9ed64bc71957dd7da866c128a307ea062
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Mar 9 14:43:38 2019 -0800

    ip: fix ip_mc_may_pull() return value
    
    ip_mc_may_pull() must return 0 if there is a problem, not an errno.
    
    syzbot reported :
    
    BUG: KASAN: use-after-free in br_ip4_multicast_igmp3_report net/bridge/br_multicast.c:947 [inline]
    BUG: KASAN: use-after-free in br_multicast_ipv4_rcv net/bridge/br_multicast.c:1631 [inline]
    BUG: KASAN: use-after-free in br_multicast_rcv+0x3cd8/0x4440 net/bridge/br_multicast.c:1741
    Read of size 4 at addr ffff88820a4084ee by task syz-executor.2/11183
    
    CPU: 1 PID: 11183 Comm: syz-executor.2 Not tainted 5.0.0+ #14
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/generic_report.c:131
     br_ip4_multicast_igmp3_report net/bridge/br_multicast.c:947 [inline]
     br_multicast_ipv4_rcv net/bridge/br_multicast.c:1631 [inline]
     br_multicast_rcv+0x3cd8/0x4440 net/bridge/br_multicast.c:1741
     br_handle_frame_finish+0xa3a/0x14c0 net/bridge/br_input.c:108
     br_nf_hook_thresh+0x2ec/0x380 net/bridge/br_netfilter_hooks.c:1005
     br_nf_pre_routing_finish+0x8e2/0x1750 net/bridge/br_netfilter_hooks.c:410
     NF_HOOK include/linux/netfilter.h:289 [inline]
     NF_HOOK include/linux/netfilter.h:283 [inline]
     br_nf_pre_routing+0x7e7/0x13a0 net/bridge/br_netfilter_hooks.c:506
     nf_hook_entry_hookfn include/linux/netfilter.h:119 [inline]
     nf_hook_slow+0xbf/0x1f0 net/netfilter/core.c:511
     nf_hook include/linux/netfilter.h:244 [inline]
     NF_HOOK include/linux/netfilter.h:287 [inline]
     br_handle_frame+0x95b/0x1450 net/bridge/br_input.c:305
     __netif_receive_skb_core+0xa96/0x3040 net/core/dev.c:4902
     __netif_receive_skb_one_core+0xa8/0x1a0 net/core/dev.c:4971
     __netif_receive_skb+0x2c/0x1c0 net/core/dev.c:5083
     netif_receive_skb_internal+0x117/0x660 net/core/dev.c:5186
     netif_receive_skb+0x6e/0x5a0 net/core/dev.c:5261
    
    Fixes: ba5ea614622d ("bridge: simplify ip_mc_check_igmp() and ipv6_mc_check_mld() calls")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Linus Lüssing <linus.luessing@c0d3.blue>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      PCI: Update PCIEPORTBUS Kconfig help text
      PCI: Fix "try" semantics of bus and slot reset
      PCI/LINK: Report degraded links via link bandwidth notification
      dt-bindings: PCI: altera: Add altr,pcie-root-port-2.0
      PCI: altera: Enable driver on ARM64
      PCI: altera: Add Stratix 10 PCIe support
      PCI/PME: Fix possible use-after-free on remove
      PCI: aardvark: Make symbol 'advk_pci_bridge_emul_ops' static
      PCI: dwc: skip MSI init if MSIs have been explicitly disabled
      PCI: hv: Refactor hv_irq_unmask() to use cpumask_to_vpset()
      PCI: hv: Replace hv_vp_set with hv_vpset
      PCI: hv: Add __aligned(8) to struct retarget_msi_interrupt
      PCI: mediatek: Enlarge PCIe2AHB window size to support 4GB DRAM
      PCI: mediatek: Fix memory mapped IO range size computation
      PCI: dwc: Remove superfluous shifting in definitions
      PCI: dwc: Make use of GENMASK/FIELD_PREP
      PCI: dwc: Make use of BIT() in constant definitions
      PCI: dwc: Share code for dw_pcie_rd/wr_other_conf()
      PCI: dwc: Make use of IS_ALIGNED()
      PCI: imx6: Add code to request/control "pcie_aux" clock for i.MX8MQ
      ...

commit 009bb421b6ceb7916ce627023d0eb7ced04c8910
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Sun Mar 3 14:00:46 2019 -0800

    workqueue, lockdep: Fix an alloc_workqueue() error path
    
    This patch fixes a use-after-free and a memory leak in an alloc_workqueue()
    error path.
    
    Repoted by syzkaller and KASAN:
    
      BUG: KASAN: use-after-free in __read_once_size include/linux/compiler.h:197 [inline]
      BUG: KASAN: use-after-free in lockdep_register_key+0x3b9/0x490 kernel/locking/lockdep.c:1023
      Read of size 8 at addr ffff888090fc2698 by task syz-executor134/7858
    
      CPU: 1 PID: 7858 Comm: syz-executor134 Not tainted 5.0.0-rc8-next-20190301 #1
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x172/0x1f0 lib/dump_stack.c:113
       print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
       kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
       __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:132
       __read_once_size include/linux/compiler.h:197 [inline]
       lockdep_register_key+0x3b9/0x490 kernel/locking/lockdep.c:1023
       wq_init_lockdep kernel/workqueue.c:3444 [inline]
       alloc_workqueue+0x427/0xe70 kernel/workqueue.c:4263
       ucma_open+0x76/0x290 drivers/infiniband/core/ucma.c:1732
       misc_open+0x398/0x4c0 drivers/char/misc.c:141
       chrdev_open+0x247/0x6b0 fs/char_dev.c:417
       do_dentry_open+0x488/0x1160 fs/open.c:771
       vfs_open+0xa0/0xd0 fs/open.c:880
       do_last fs/namei.c:3416 [inline]
       path_openat+0x10e9/0x46e0 fs/namei.c:3533
       do_filp_open+0x1a1/0x280 fs/namei.c:3563
       do_sys_open+0x3fe/0x5d0 fs/open.c:1063
       __do_sys_openat fs/open.c:1090 [inline]
       __se_sys_openat fs/open.c:1084 [inline]
       __x64_sys_openat+0x9d/0x100 fs/open.c:1084
       do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Allocated by task 7789:
       save_stack+0x45/0xd0 mm/kasan/common.c:75
       set_track mm/kasan/common.c:87 [inline]
       __kasan_kmalloc mm/kasan/common.c:497 [inline]
       __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:470
       kasan_kmalloc+0x9/0x10 mm/kasan/common.c:511
       __do_kmalloc mm/slab.c:3726 [inline]
       __kmalloc+0x15c/0x740 mm/slab.c:3735
       kmalloc include/linux/slab.h:553 [inline]
       kzalloc include/linux/slab.h:743 [inline]
       alloc_workqueue+0x13c/0xe70 kernel/workqueue.c:4236
       ucma_open+0x76/0x290 drivers/infiniband/core/ucma.c:1732
       misc_open+0x398/0x4c0 drivers/char/misc.c:141
       chrdev_open+0x247/0x6b0 fs/char_dev.c:417
       do_dentry_open+0x488/0x1160 fs/open.c:771
       vfs_open+0xa0/0xd0 fs/open.c:880
       do_last fs/namei.c:3416 [inline]
       path_openat+0x10e9/0x46e0 fs/namei.c:3533
       do_filp_open+0x1a1/0x280 fs/namei.c:3563
       do_sys_open+0x3fe/0x5d0 fs/open.c:1063
       __do_sys_openat fs/open.c:1090 [inline]
       __se_sys_openat fs/open.c:1084 [inline]
       __x64_sys_openat+0x9d/0x100 fs/open.c:1084
       do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      Freed by task 7789:
       save_stack+0x45/0xd0 mm/kasan/common.c:75
       set_track mm/kasan/common.c:87 [inline]
       __kasan_slab_free+0x102/0x150 mm/kasan/common.c:459
       kasan_slab_free+0xe/0x10 mm/kasan/common.c:467
       __cache_free mm/slab.c:3498 [inline]
       kfree+0xcf/0x230 mm/slab.c:3821
       alloc_workqueue+0xc3e/0xe70 kernel/workqueue.c:4295
       ucma_open+0x76/0x290 drivers/infiniband/core/ucma.c:1732
       misc_open+0x398/0x4c0 drivers/char/misc.c:141
       chrdev_open+0x247/0x6b0 fs/char_dev.c:417
       do_dentry_open+0x488/0x1160 fs/open.c:771
       vfs_open+0xa0/0xd0 fs/open.c:880
       do_last fs/namei.c:3416 [inline]
       path_openat+0x10e9/0x46e0 fs/namei.c:3533
       do_filp_open+0x1a1/0x280 fs/namei.c:3563
       do_sys_open+0x3fe/0x5d0 fs/open.c:1063
       __do_sys_openat fs/open.c:1090 [inline]
       __se_sys_openat fs/open.c:1084 [inline]
       __x64_sys_openat+0x9d/0x100 fs/open.c:1084
       do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
       entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
      The buggy address belongs to the object at ffff888090fc2580
       which belongs to the cache kmalloc-512 of size 512
      The buggy address is located 280 bytes inside of
       512-byte region [ffff888090fc2580, ffff888090fc2780)
    
    Reported-by: syzbot+17335689e239ce135d8b@syzkaller.appspotmail.com
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Fixes: 669de8bda87b ("kernel/workqueue: Use dynamic lockdep keys for workqueues")
    Link: https://lkml.kernel.org/r/20190303220046.29448-1-bvanassche@acm.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b62989fc4ea27863e7aef00c93a10118324d3ed0
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Wed Mar 6 17:50:43 2019 +0200

    net: sched: fix potential use-after-free in __tcf_chain_put()
    
    When used with unlocked classifier that have filters attached to actions
    with goto chain, __tcf_chain_put() for last non action reference can race
    with calls to same function from action cleanup code that releases last
    action reference. In this case action cleanup handler could free the chain
    if it executes after all references to chain were released, but before all
    concurrent users finished using it. Modify __tcf_chain_put() to only access
    tcf_chain fields when holding block->lock. Remove local variables that were
    used to cache some tcf_chain fields and are no longer needed because their
    values can now be obtained directly from chain under block->lock
    protection.
    
    Fixes: 726d061286ce ("net: sched: prevent insertion of new classifiers during chain flush")
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6d2b0f02f5a07a4bf02e4cbc90d7eaa85cac2986
Author: Li RongQing <lirongqing@baidu.com>
Date:   Wed Mar 6 14:46:27 2019 +0800

    connector: fix unsafe usage of ->real_parent
    
    proc_exit_connector() uses ->real_parent lockless. This is not
    safe that its parent can go away at any moment, so use RCU to
    protect it, and ensure that this task is not released.
    
    [  747.624551] ==================================================================
    [  747.632946] BUG: KASAN: use-after-free in proc_exit_connector+0x1f7/0x310
    [  747.640686] Read of size 4 at addr ffff88a0276988e0 by task sshd/2882
    [  747.648032]
    [  747.649804] CPU: 11 PID: 2882 Comm: sshd Tainted: G            E     4.19.26-rc2 #11
    [  747.658629] Hardware name: IBM x3550M4 -[7914OFV]-/00AM544, BIOS -[D7E142BUS-1.71]- 07/31/2014
    [  747.668419] Call Trace:
    [  747.671269]  dump_stack+0xf0/0x19b
    [  747.675186]  ? show_regs_print_info+0x5/0x5
    [  747.679988]  ? kmsg_dump_rewind_nolock+0x59/0x59
    [  747.685302]  print_address_description+0x6a/0x270
    [  747.691162]  kasan_report+0x258/0x380
    [  747.695835]  ? proc_exit_connector+0x1f7/0x310
    [  747.701402]  proc_exit_connector+0x1f7/0x310
    [  747.706767]  ? proc_coredump_connector+0x2d0/0x2d0
    [  747.712715]  ? _raw_write_unlock_irq+0x29/0x50
    [  747.718270]  ? _raw_write_unlock_irq+0x29/0x50
    [  747.723820]  ? ___preempt_schedule+0x16/0x18
    [  747.729193]  ? ___preempt_schedule+0x16/0x18
    [  747.734574]  do_exit+0xa11/0x14f0
    [  747.738880]  ? mm_update_next_owner+0x590/0x590
    [  747.744525]  ? debug_show_all_locks+0x3c0/0x3c0
    [  747.761448]  ? ktime_get_coarse_real_ts64+0xeb/0x1c0
    [  747.767589]  ? lockdep_hardirqs_on+0x1a6/0x290
    [  747.773154]  ? check_chain_key+0x139/0x1f0
    [  747.778345]  ? check_flags.part.35+0x240/0x240
    [  747.783908]  ? __lock_acquire+0x2300/0x2300
    [  747.789171]  ? _raw_spin_unlock_irqrestore+0x59/0x70
    [  747.795316]  ? _raw_spin_unlock_irqrestore+0x59/0x70
    [  747.801457]  ? do_raw_spin_unlock+0x10f/0x1e0
    [  747.806914]  ? do_raw_spin_trylock+0x120/0x120
    [  747.812481]  ? preempt_count_sub+0x14/0xc0
    [  747.817645]  ? _raw_spin_unlock+0x2e/0x50
    [  747.822708]  ? __handle_mm_fault+0x12db/0x1fa0
    [  747.828367]  ? __pmd_alloc+0x2d0/0x2d0
    [  747.833143]  ? check_noncircular+0x50/0x50
    [  747.838309]  ? match_held_lock+0x7f/0x340
    [  747.843380]  ? check_noncircular+0x50/0x50
    [  747.848561]  ? handle_mm_fault+0x21a/0x5f0
    [  747.853730]  ? check_flags.part.35+0x240/0x240
    [  747.859290]  ? check_chain_key+0x139/0x1f0
    [  747.864474]  ? __do_page_fault+0x40f/0x760
    [  747.869655]  ? __audit_syscall_entry+0x4b/0x1f0
    [  747.875319]  ? syscall_trace_enter+0x1d5/0x7b0
    [  747.880877]  ? trace_raw_output_preemptirq_template+0x90/0x90
    [  747.887895]  ? trace_raw_output_sys_exit+0x80/0x80
    [  747.893860]  ? up_read+0x3b/0x90
    [  747.898142]  ? stop_critical_timings+0x260/0x260
    [  747.903909]  do_group_exit+0xe0/0x1c0
    [  747.908591]  ? __x64_sys_exit+0x30/0x30
    [  747.913460]  ? trace_raw_output_preemptirq_template+0x90/0x90
    [  747.920485]  ? tracer_hardirqs_on+0x270/0x270
    [  747.925956]  __x64_sys_exit_group+0x28/0x30
    [  747.931214]  do_syscall_64+0x117/0x400
    [  747.935988]  ? syscall_return_slowpath+0x2f0/0x2f0
    [  747.941931]  ? trace_hardirqs_off_thunk+0x1a/0x1c
    [  747.947788]  ? trace_hardirqs_on_caller+0x1d0/0x1d0
    [  747.953838]  ? lockdep_sys_exit+0x16/0x8e
    [  747.958915]  ? trace_hardirqs_off_thunk+0x1a/0x1c
    [  747.964784]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  747.971021] RIP: 0033:0x7f572f154c68
    [  747.975606] Code: Bad RIP value.
    [  747.979791] RSP: 002b:00007ffed2dfaa58 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    [  747.989324] RAX: ffffffffffffffda RBX: 00007f572f431840 RCX: 00007f572f154c68
    [  747.997910] RDX: 0000000000000001 RSI: 000000000000003c RDI: 0000000000000001
    [  748.006495] RBP: 0000000000000001 R08: 00000000000000e7 R09: fffffffffffffee0
    [  748.015079] R10: 00007f572f4387e8 R11: 0000000000000246 R12: 00007f572f431840
    [  748.023664] R13: 000055a7f90f2c50 R14: 000055a7f96e2310 R15: 000055a7f96e2310
    [  748.032287]
    [  748.034509] Allocated by task 2300:
    [  748.038982]  kasan_kmalloc+0xa0/0xd0
    [  748.043562]  kmem_cache_alloc_node+0xf5/0x2e0
    [  748.049018]  copy_process+0x1781/0x4790
    [  748.053884]  _do_fork+0x166/0x9a0
    [  748.058163]  do_syscall_64+0x117/0x400
    [  748.062943]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  748.069180]
    [  748.071405] Freed by task 15395:
    [  748.075591]  __kasan_slab_free+0x130/0x180
    [  748.080752]  kmem_cache_free+0xc2/0x310
    [  748.085619]  free_task+0xea/0x130
    [  748.089901]  __put_task_struct+0x177/0x230
    [  748.095063]  finish_task_switch+0x51b/0x5d0
    [  748.100315]  __schedule+0x506/0xfa0
    [  748.104791]  schedule+0xca/0x260
    [  748.108978]  futex_wait_queue_me+0x27e/0x420
    [  748.114333]  futex_wait+0x251/0x550
    [  748.118814]  do_futex+0x75b/0xf80
    [  748.123097]  __x64_sys_futex+0x231/0x2a0
    [  748.128065]  do_syscall_64+0x117/0x400
    [  748.132835]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  748.139066]
    [  748.141289] The buggy address belongs to the object at ffff88a027698000
    [  748.141289]  which belongs to the cache task_struct of size 12160
    [  748.156589] The buggy address is located 2272 bytes inside of
    [  748.156589]  12160-byte region [ffff88a027698000, ffff88a02769af80)
    [  748.171114] The buggy address belongs to the page:
    [  748.177055] page:ffffea00809da600 count:1 mapcount:0 mapping:ffff888107d01e00 index:0x0 compound_mapcount: 0
    [  748.189136] flags: 0x57ffffc0008100(slab|head)
    [  748.194688] raw: 0057ffffc0008100 ffffea00809a3200 0000000300000003 ffff888107d01e00
    [  748.204424] raw: 0000000000000000 0000000000020002 00000001ffffffff 0000000000000000
    [  748.214146] page dumped because: kasan: bad access detected
    [  748.220976]
    [  748.223197] Memory state around the buggy address:
    [  748.229128]  ffff88a027698780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  748.238271]  ffff88a027698800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  748.247414] >ffff88a027698880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  748.256564]                                                        ^
    [  748.264267]  ffff88a027698900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  748.273493]  ffff88a027698980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  748.282630] ==================================================================
    
    Fixes: b086ff87251b4a4 ("connector: add parent pid and tgid to coredump and exit events")
    Signed-off-by: Zhang Yu <zhangyu31@baidu.com>
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Acked-by: Evgeniy Polyakov <zbr@ioremap.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      power: reset: at91-reset: add support for sam9x60 SoC
      dt-bindings: arm: atmel: add new sam9x60 reset controller binding
      dt-bindings: arm: atmel: add missing samx7 to reset controller
      max17042_battery: fix potential use-after-free on device remove
      power: supply: core: Add a field to support battery max voltage
      dt-bindings: power: supply: Add voltage-max-design-microvolt property
      bq27x00: use cached flags
      power: supply: ds2782: fix possible use-after-free on remove
      power: supply: bq25890: show max charge current/voltage as configured
      power: supply: sc27xx: Fix capacity saving function
      power: supply: sc27xx: Fix the incorrect formula when converting capacity to coulomb counter
      power: supply: sc27xx: Add one property to read charge voltage
      dt-bindings: power: sc27xx: Add one IIO channel to read charge voltage
      drivers: power: supply: goldfish_battery: Add support for reading more properties
      power: supply: charger-manager: Fix trivial language typos
      cpcap-charger: generate events for userspace
      power: supply: remove some duplicated includes
      power: twl4030: fix a missing check of return value
      drivers: power: supply: goldfish_battery: Use tabs for alignment
      drivers: power: supply: goldfish_battery: Fix alignment
      ...

commit 40ba1d9b4d19796afc9b7ece872f5f3e8f5e2c13
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Mar 8 00:58:53 2019 +0100

    netfilter: nf_tables: fix set double-free in abort path
    
    The abort path can cause a double-free of an anonymous set.
    Added-and-to-be-aborted rule looks like this:
    
    udp dport { 137, 138 } drop
    
    The to-be-aborted transaction list looks like this:
    
    newset
    newsetelem
    newsetelem
    rule
    
    This gets walked in reverse order, so first pass disables the rule, the
    set elements, then the set.
    
    After synchronize_rcu(), we then destroy those in same order: rule, set
    element, set element, newset.
    
    Problem is that the anonymous set has already been bound to the rule, so
    the rule (lookup expression destructor) already frees the set, when then
    cause use-after-free when trying to delete the elements from this set,
    then try to free the set again when handling the newset expression.
    
    Rule releases the bound set in first place from the abort path, this
    causes the use-after-free on set element removal when undoing the new
    element transactions. To handle this, skip new element transaction if
    set is bound from the abort path.
    
    This is still causes the use-after-free on set element removal.  To
    handle this, remove transaction from the list when the set is already
    bound.
    
    Joint work with Florian Westphal.
    
    Fixes: f6ac85858976 ("netfilter: nf_tables: unbind set in rule from commit path")
    Bugzilla: https://bugzilla.netfilter.org/show_bug.cgi?id=1325
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 39e07cb60860e3162fc377380b8a60409315681e
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Thu Mar 7 16:30:00 2019 -0800

    kcov: convert kcov.refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
    
     - a resource is freed upon counter reaching zero
    
     - once counter reaches zero, its further
       increments aren't allowed
    
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided refcount_t
    type and API that prevents accidental counter overflows and underflows.
    This is important since overflows and underflows can lead to
    use-after-free situation and be exploitable.
    
    The variable kcov.refcount is used as pure reference counter.  Convert
    it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c have
    different memory ordering guarantees than their atomic counterparts.
    
    The full comparison can be seen in https://lkml.org/lkml/2017/11/15/57
    and it is hopefully soon in state to be merged to the documentation
    tree.  Normally the differences should not matter since refcount_t
    provides enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.  Please double check that you don't
    have some undocumented memory guarantees for this variable usage.
    
    For the kcov.refcount it might make a difference
    in following places:
     - kcov_put(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Link: http://lkml.kernel.org/r/1547634429-772-1-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bc5add09764c123f58942a37c8335247e683d234
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Tue Feb 26 08:45:35 2019 -0800

    IB/hfi1: Close race condition on user context disable and close
    
    When disabling and removing a receive context, it is possible for an
    asynchronous event (i.e IRQ) to occur.  Because of this, there is a race
    between cleaning up the context, and the context being used by the
    asynchronous event.
    
    cpu 0  (context cleanup)
        rc->ref_count-- (ref_count == 0)
        hfi1_rcd_free()
    cpu 1  (IRQ (with rcd index))
            rcd_get_by_index()
            lock
            ref_count+++     <-- reference count race (WARNING)
            return rcd
            unlock
    cpu 0
        hfi1_free_ctxtdata() <-- incorrect free location
        lock
        remove rcd from array
        unlock
        free rcd
    
    This race will cause the following WARNING trace:
    
    WARNING: CPU: 0 PID: 175027 at include/linux/kref.h:52 hfi1_rcd_get_by_index+0x84/0xa0 [hfi1]
    CPU: 0 PID: 175027 Comm: IMB-MPI1 Kdump: loaded Tainted: G OE ------------ 3.10.0-957.el7.x86_64 #1
    Hardware name: Intel Corporation S2600KP/S2600KP, BIOS SE5C610.86B.11.01.0076.C4.111920150602 11/19/2015
    Call Trace:
      dump_stack+0x19/0x1b
      __warn+0xd8/0x100
      warn_slowpath_null+0x1d/0x20
      hfi1_rcd_get_by_index+0x84/0xa0 [hfi1]
      is_rcv_urgent_int+0x24/0x90 [hfi1]
      general_interrupt+0x1b6/0x210 [hfi1]
      __handle_irq_event_percpu+0x44/0x1c0
      handle_irq_event_percpu+0x32/0x80
      handle_irq_event+0x3c/0x60
      handle_edge_irq+0x7f/0x150
      handle_irq+0xe4/0x1a0
      do_IRQ+0x4d/0xf0
      common_interrupt+0x162/0x162
    
    The race can also lead to a use after free which could be similar to:
    
    general protection fault: 0000 1 SMP
    CPU: 71 PID: 177147 Comm: IMB-MPI1 Kdump: loaded Tainted: G W OE ------------ 3.10.0-957.el7.x86_64 #1
    Hardware name: Intel Corporation S2600KP/S2600KP, BIOS SE5C610.86B.11.01.0076.C4.111920150602 11/19/2015
    task: ffff9962a8098000 ti: ffff99717a508000 task.ti: ffff99717a508000 __kmalloc+0x94/0x230
    Call Trace:
      ? hfi1_user_sdma_process_request+0x9c8/0x1250 [hfi1]
      hfi1_user_sdma_process_request+0x9c8/0x1250 [hfi1]
      hfi1_aio_write+0xba/0x110 [hfi1]
      do_sync_readv_writev+0x7b/0xd0
      do_readv_writev+0xce/0x260
      ? handle_mm_fault+0x39d/0x9b0
      ? pick_next_task_fair+0x5f/0x1b0
      ? sched_clock_cpu+0x85/0xc0
      ? __schedule+0x13a/0x890
      vfs_writev+0x35/0x60
      SyS_writev+0x7f/0x110
      system_call_fastpath+0x22/0x27
    
    Use the appropriate kref API to verify access.
    
    Reorder context cleanup to ensure context removal before cleanup occurs
    correctly.
    
    Cc: stable@vger.kernel.org # v4.14.0+
    Fixes: f683c80ca68e ("IB/hfi1: Resolve kernel panics by reference counting receive contexts")
    Reviewed-by: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 27da0d2ef998e222a876c0cec72aa7829a626266
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Mar 6 11:52:36 2019 +0100

    appletalk: Fix compile regression
    
    A bugfix just broke compilation of appletalk when CONFIG_SYSCTL
    is disabled:
    
    In file included from net/appletalk/ddp.c:65:
    net/appletalk/ddp.c: In function 'atalk_init':
    include/linux/atalk.h:164:34: error: expected expression before 'do'
     #define atalk_register_sysctl()  do { } while(0)
                                      ^~
    net/appletalk/ddp.c:1934:7: note: in expansion of macro 'atalk_register_sysctl'
      rc = atalk_register_sysctl();
    
    This is easier to avoid by using conventional inline functions
    as stubs rather than macros. The header already has inline
    functions for other purposes, so I'm changing over all the
    macros for consistency.
    
    Fixes: 6377f787aeb9 ("appletalk: Fix use-after-free in atalk_proc_exit")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4117992df66a26fa33908b4969e04801534baab1
Author: Qian Cai <cai@lca.pw>
Date:   Tue Mar 5 15:41:24 2019 -0800

    page_poison: play nicely with KASAN
    
    KASAN does not play well with the page poisoning (CONFIG_PAGE_POISONING).
    It triggers false positives in the allocation path:
    
      BUG: KASAN: use-after-free in memchr_inv+0x2ea/0x330
      Read of size 8 at addr ffff88881f800000 by task swapper/0
      CPU: 0 PID: 0 Comm: swapper Not tainted 5.0.0-rc1+ #54
      Call Trace:
       dump_stack+0xe0/0x19a
       print_address_description.cold.2+0x9/0x28b
       kasan_report.cold.3+0x7a/0xb5
       __asan_report_load8_noabort+0x19/0x20
       memchr_inv+0x2ea/0x330
       kernel_poison_pages+0x103/0x3d5
       get_page_from_freelist+0x15e7/0x4d90
    
    because KASAN has not yet unpoisoned the shadow page for allocation
    before it checks memchr_inv() but only found a stale poison pattern.
    
    Also, false positives in free path,
    
      BUG: KASAN: slab-out-of-bounds in kernel_poison_pages+0x29e/0x3d5
      Write of size 4096 at addr ffff8888112cc000 by task swapper/0/1
      CPU: 5 PID: 1 Comm: swapper/0 Not tainted 5.0.0-rc1+ #55
      Call Trace:
       dump_stack+0xe0/0x19a
       print_address_description.cold.2+0x9/0x28b
       kasan_report.cold.3+0x7a/0xb5
       check_memory_region+0x22d/0x250
       memset+0x28/0x40
       kernel_poison_pages+0x29e/0x3d5
       __free_pages_ok+0x75f/0x13e0
    
    due to KASAN adds poisoned redzones around slab objects, but the page
    poisoning needs to poison the whole page.
    
    Link: http://lkml.kernel.org/r/20190114233405.67843-1-cai@lca.pw
    Signed-off-by: Qian Cai <cai@lca.pw>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6377f787aeb945cae7abbb6474798de129e1f3ac
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Mar 1 10:57:57 2019 +0800

    appletalk: Fix use-after-free in atalk_proc_exit
    
    KASAN report this:
    
    BUG: KASAN: use-after-free in pde_subdir_find+0x12d/0x150 fs/proc/generic.c:71
    Read of size 8 at addr ffff8881f41fe5b0 by task syz-executor.0/2806
    
    CPU: 0 PID: 2806 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xfa/0x1ce lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     pde_subdir_find+0x12d/0x150 fs/proc/generic.c:71
     remove_proc_entry+0xe8/0x420 fs/proc/generic.c:667
     atalk_proc_exit+0x18/0x820 [appletalk]
     atalk_exit+0xf/0x5a [appletalk]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fb2de6b9c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200001c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fb2de6ba6bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    
    Allocated by task 2806:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:496
     slab_post_alloc_hook mm/slab.h:444 [inline]
     slab_alloc_node mm/slub.c:2739 [inline]
     slab_alloc mm/slub.c:2747 [inline]
     kmem_cache_alloc+0xcf/0x250 mm/slub.c:2752
     kmem_cache_zalloc include/linux/slab.h:730 [inline]
     __proc_create+0x30f/0xa20 fs/proc/generic.c:408
     proc_mkdir_data+0x47/0x190 fs/proc/generic.c:469
     0xffffffffc10c01bb
     0xffffffffc10c0166
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 2806:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:458
     slab_free_hook mm/slub.c:1409 [inline]
     slab_free_freelist_hook mm/slub.c:1436 [inline]
     slab_free mm/slub.c:2986 [inline]
     kmem_cache_free+0xa6/0x2a0 mm/slub.c:3002
     pde_put+0x6e/0x80 fs/proc/generic.c:647
     remove_proc_entry+0x1d3/0x420 fs/proc/generic.c:684
     0xffffffffc10c031c
     0xffffffffc10c0166
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881f41fe500
     which belongs to the cache proc_dir_entry of size 256
    The buggy address is located 176 bytes inside of
     256-byte region [ffff8881f41fe500, ffff8881f41fe600)
    The buggy address belongs to the page:
    page:ffffea0007d07f80 count:1 mapcount:0 mapping:ffff8881f6e69a00 index:0x0
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 dead000000000100 dead000000000200 ffff8881f6e69a00
    raw: 0000000000000000 00000000800c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881f41fe480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8881f41fe500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8881f41fe580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                         ^
     ffff8881f41fe600: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8881f41fe680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    It should check the return value of atalk_proc_init fails,
    otherwise atalk_exit will trgger use-after-free in pde_subdir_find
    while unload the module.This patch fix error cleanup path of atalk_init
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7cf58b79b3072029af127ae865ffc6f00f34b1f8
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Fri Mar 1 11:54:19 2019 -0500

    PCI/PME: Fix possible use-after-free on remove
    
    In remove(), ensure that the PME work cannot run after kfree() is called.
    Otherwise, this could result in a use-after-free.
    
    This issue was detected with the help of Coccinelle.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: Sinan Kaya <okaya@kernel.org>
    Cc: Frederick Lawler <fred@fredlawl.com>
    Cc: Mika Westerberg <mika.westerberg@linux.intel.com>
    Cc: Keith Busch <keith.busch@intel.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 2216322919c8608a448d7ebc560a845238a5d6b6
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Jan 7 12:41:46 2019 -0500

    drm: Block fb changes for async plane updates
    
    The prepare_fb call always happens on new_plane_state.
    
    The drm_atomic_helper_cleanup_planes checks to see if
    plane state pointer has changed when deciding to call cleanup_fb on
    either the new_plane_state or the old_plane_state.
    
    For a non-async atomic commit the state pointer is swapped, so this
    helper calls prepare_fb on the new_plane_state and cleanup_fb on the
    old_plane_state. This makes sense, since we want to prepare the
    framebuffer we are going to use and cleanup the the framebuffer we are
    no longer using.
    
    For the async atomic update helpers this differs. The async atomic
    update helpers perform in-place updates on the existing state. They call
    drm_atomic_helper_cleanup_planes but the state pointer is not swapped.
    This means that prepare_fb is called on the new_plane_state and
    cleanup_fb is called on the new_plane_state (not the old).
    
    In the case where old_plane_state->fb == new_plane_state->fb then
    there should be no behavioral difference between an async update
    and a non-async commit. But there are issues that arise when
    old_plane_state->fb != new_plane_state->fb.
    
    The first is that the new_plane_state->fb is immediately cleaned up
    after it has been prepared, so we're using a fb that we shouldn't
    be.
    
    The second occurs during a sequence of async atomic updates and
    non-async regular atomic commits. Suppose there are two framebuffers
    being interleaved in a double-buffering scenario, fb1 and fb2:
    
    - Async update, oldfb = NULL, newfb = fb1, prepare fb1, cleanup fb1
    - Async update, oldfb = fb1, newfb = fb2, prepare fb2, cleanup fb2
    - Non-async commit, oldfb = fb2, newfb = fb1, prepare fb1, cleanup fb2
    
    We call cleanup_fb on fb2 twice in this example scenario, and any
    further use will result in use-after-free.
    
    The simple fix to this problem is to block framebuffer changes
    in the drm_atomic_helper_async_check function for now.
    
    v2: Move check by itself, add a FIXME (Daniel)
    
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Cc: <stable@vger.kernel.org> # v4.14+
    Fixes: fef9df8b5945 ("drm/atomic: initial support for asynchronous plane update")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Link: https://patchwork.freedesktop.org/patch/275364/
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit af692e117cb8cd9d3d844d413095775abc1217f9
Author: Gao Xiang <gaoxiang25@huawei.com>
Date:   Wed Feb 27 13:33:30 2019 +0800

    staging: erofs: compressed_pages should not be accessed again after freed
    
    This patch resolves the following page use-after-free issue,
    z_erofs_vle_unzip:
        ...
        for (i = 0; i < nr_pages; ++i) {
            ...
            z_erofs_onlinepage_endio(page);  (1)
        }
    
        for (i = 0; i < clusterpages; ++i) {
            page = compressed_pages[i];
    
            if (page->mapping == mngda)      (2)
                continue;
            /* recycle all individual staging pages */
            (void)z_erofs_gather_if_stagingpage(page_pool, page); (3)
            WRITE_ONCE(compressed_pages[i], NULL);
        }
        ...
    
    After (1) is executed, page is freed and could be then reused, if
    compressed_pages is scanned after that, it could fall info (2) or
    (3) by mistake and that could finally be in a mess.
    
    This patch aims to solve the above issue only with little changes
    as much as possible in order to make the fix backport easier.
    
    Fixes: 3883a79abd02 ("staging: erofs: introduce VLE decompression support")
    Cc: <stable@vger.kernel.org> # 4.19+
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56897b217a1d0a91c9920cb418d6b3fe922f590a
Author: Kefeng Wang <wangkefeng.wang@huawei.com>
Date:   Sat Feb 23 12:33:27 2019 +0800

    Bluetooth: hci_ldisc: Postpone HCI_UART_PROTO_READY bit set in hci_uart_set_proto()
    
    task A:                                task B:
    hci_uart_set_proto                     flush_to_ldisc
     - p->open(hu) -> h5_open  //alloc h5  - receive_buf
     - set_bit HCI_UART_PROTO_READY         - tty_port_default_receive_buf
     - hci_uart_register_dev                 - tty_ldisc_receive_buf
                                              - hci_uart_tty_receive
                                               - test_bit HCI_UART_PROTO_READY
                                                - h5_recv
     - clear_bit HCI_UART_PROTO_READY             while() {
     - p->open(hu) -> h5_close //free h5
                                                  - h5_rx_3wire_hdr
                                                   - h5_reset()  //use-after-free
                                                  }
    
    It could use ioctl to set hci uart proto, but there is
    a use-after-free issue when hci_uart_register_dev() fail in
    hci_uart_set_proto(), see stack above, fix this by setting
    HCI_UART_PROTO_READY bit only when hci_uart_register_dev()
    return success.
    
    Reported-by: syzbot+899a33dc0fa0dbaf06a6@syzkaller.appspotmail.com
    Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
    Reviewed-by: Jeremy Cline <jcline@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit ff7b11aa481f682e0e9711abfeb7d03f5cd612bf
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Feb 21 14:13:56 2019 -0800

    net: socket: set sock->sk to NULL after calling proto_ops::release()
    
    Commit 9060cb719e61 ("net: crypto set sk to NULL when af_alg_release.")
    fixed a use-after-free in sockfs_setattr() when an AF_ALG socket is
    closed concurrently with fchownat().  However, it ignored that many
    other proto_ops::release() methods don't set sock->sk to NULL and
    therefore allow the same use-after-free:
    
        - base_sock_release
        - bnep_sock_release
        - cmtp_sock_release
        - data_sock_release
        - dn_release
        - hci_sock_release
        - hidp_sock_release
        - iucv_sock_release
        - l2cap_sock_release
        - llcp_sock_release
        - llc_ui_release
        - rawsock_release
        - rfcomm_sock_release
        - sco_sock_release
        - svc_release
        - vcc_release
        - x25_release
    
    Rather than fixing all these and relying on every socket type to get
    this right forever, just make __sock_release() set sock->sk to NULL
    itself after calling proto_ops::release().
    
    Reproducer that produces the KASAN splat when any of these socket types
    are configured into the kernel:
    
        #include <pthread.h>
        #include <stdlib.h>
        #include <sys/socket.h>
        #include <unistd.h>
    
        pthread_t t;
        volatile int fd;
    
        void *close_thread(void *arg)
        {
            for (;;) {
                usleep(rand() % 100);
                close(fd);
            }
        }
    
        int main()
        {
            pthread_create(&t, NULL, close_thread, NULL);
            for (;;) {
                fd = socket(rand() % 50, rand() % 11, 0);
                fchownat(fd, "", 1000, 1000, 0x1000);
                close(fd);
            }
        }
    
    Fixes: 86741ec25462 ("net: core: Add a UID field to struct sock.")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 669e859b5ea7c6f4fce0149d3907c64e550c294b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 11 21:32:10 2019 +0300

    btrfs: drop the lock on error in btrfs_dev_replace_cancel
    
    We should drop the lock on this error path.  This has been found by a
    static tool.
    
    The lock needs to be released, it's there to protect access to the
    dev_replace members and is not supposed to be left locked. The value of
    state that's being switched would need to be artifically changed to an
    invalid value so the default: branch is taken.
    
    Fixes: d189dd70e255 ("btrfs: fix use-after-free due to race between replace start and cancel")
    CC: stable@vger.kernel.org # 5.0+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commits)
      net: phy: realtek: Dummy IRQ calls for RTL8366RB
      tcp: repaired skbs must init their tso_segs
      net/x25: fix a race in x25_bind()
      net: dsa: Remove documentation for port_fdb_prepare
      Revert "bridge: do not add port to router list when receives query with source 0.0.0.0"
      selftests: fib_tests: sleep after changing carrier. again.
      net: set static variable an initial value in atl2_probe()
      net: phy: marvell10g: Fix Multi-G advertisement to only advertise 10G
      bpf, doc: add bpf list as secondary entry to maintainers file
      udp: fix possible user after free in error handler
      udpv6: fix possible user after free in error handler
      fou6: fix proto error handler argument type
      udpv6: add the required annotation to mib type
      mdio_bus: Fix use-after-free on device_register fails
      net: Set rtm_table to RT_TABLE_COMPAT for ipv6 for tables > 255
      bnxt_en: Wait longer for the firmware message response to complete.
      bnxt_en: Fix typo in firmware message timeout logic.
      nfp: bpf: fix ALU32 high bits clearance bug
      nfp: bpf: fix code-gen bug on BPF_ALU | BPF_XOR | BPF_K
      Documentation: networking: switchdev: Update port parent ID section
      ...

commit 6ff7b060535e87c2ae14dd8548512abfdda528fb
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Feb 21 22:42:01 2019 +0800

    mdio_bus: Fix use-after-free on device_register fails
    
    KASAN has found use-after-free in fixed_mdio_bus_init,
    commit 0c692d07842a ("drivers/net/phy/mdio_bus.c: call
    put_device on device_register() failure") call put_device()
    while device_register() fails,give up the last reference
    to the device and allow mdiobus_release to be executed
    ,kfreeing the bus. However in most drives, mdiobus_free
    be called to free the bus while mdiobus_register fails.
    use-after-free occurs when access bus again, this patch
    revert it to let mdiobus_free free the bus.
    
    KASAN report details as below:
    
    BUG: KASAN: use-after-free in mdiobus_free+0x85/0x90 drivers/net/phy/mdio_bus.c:482
    Read of size 4 at addr ffff8881dc824d78 by task syz-executor.0/3524
    
    CPU: 1 PID: 3524 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xfa/0x1ce lib/dump_stack.c:113
     print_address_description+0x65/0x270 mm/kasan/report.c:187
     kasan_report+0x149/0x18d mm/kasan/report.c:317
     mdiobus_free+0x85/0x90 drivers/net/phy/mdio_bus.c:482
     fixed_mdio_bus_init+0x283/0x1000 [fixed_phy]
     ? 0xffffffffc0e40000
     ? 0xffffffffc0e40000
     ? 0xffffffffc0e40000
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f6215c19c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003
    RBP: 00007f6215c19c70 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f6215c1a6bc
    R13: 00000000004bcefb R14: 00000000006f7030 R15: 0000000000000004
    
    Allocated by task 3524:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:496
     kmalloc include/linux/slab.h:545 [inline]
     kzalloc include/linux/slab.h:740 [inline]
     mdiobus_alloc_size+0x54/0x1b0 drivers/net/phy/mdio_bus.c:143
     fixed_mdio_bus_init+0x163/0x1000 [fixed_phy]
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 3524:
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x130/0x180 mm/kasan/common.c:458
     slab_free_hook mm/slub.c:1409 [inline]
     slab_free_freelist_hook mm/slub.c:1436 [inline]
     slab_free mm/slub.c:2986 [inline]
     kfree+0xe1/0x270 mm/slub.c:3938
     device_release+0x78/0x200 drivers/base/core.c:919
     kobject_cleanup lib/kobject.c:662 [inline]
     kobject_release lib/kobject.c:691 [inline]
     kref_put include/linux/kref.h:67 [inline]
     kobject_put+0x146/0x240 lib/kobject.c:708
     put_device+0x1c/0x30 drivers/base/core.c:2060
     __mdiobus_register+0x483/0x560 drivers/net/phy/mdio_bus.c:382
     fixed_mdio_bus_init+0x26b/0x1000 [fixed_phy]
     do_one_initcall+0xfa/0x5ca init/main.c:887
     do_init_module+0x204/0x5f6 kernel/module.c:3460
     load_module+0x66b2/0x8570 kernel/module.c:3808
     __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8881dc824c80
     which belongs to the cache kmalloc-2k of size 2048
    The buggy address is located 248 bytes inside of
     2048-byte region [ffff8881dc824c80, ffff8881dc825480)
    The buggy address belongs to the page:
    page:ffffea0007720800 count:1 mapcount:0 mapping:ffff8881f6c02800 index:0x0 compound_mapcount: 0
    flags: 0x2fffc0000010200(slab|head)
    raw: 02fffc0000010200 0000000000000000 0000000500000001 ffff8881f6c02800
    raw: 0000000000000000 00000000800f000f 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8881dc824c00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8881dc824c80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8881dc824d00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                    ^
     ffff8881dc824d80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8881dc824e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 0c692d07842a ("drivers/net/phy/mdio_bus.c: call put_device on device_register() failure")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3d210534cc93dab39a9d1a8d674aa2872c268d38
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Feb 16 10:58:26 2019 -0800

    net_sched: fix a race condition in tcindex_destroy()
    
    (cherry picked from commit 8015d93ebd27484418d4952284fd02172fa4b0b2)
    
    tcindex_destroy() invokes tcindex_destroy_element() via
    a walker to delete each filter result in its perfect hash
    table, and tcindex_destroy_element() calls tcindex_delete()
    which schedules tcf RCU works to do the final deletion work.
    Unfortunately this races with the RCU callback
    __tcindex_destroy(), which could lead to use-after-free as
    reported by Adrian.
    
    Fix this by migrating this RCU callback to tcf RCU work too,
    as that workqueue is ordered, we will not have use-after-free.
    
    Note, we don't need to hold netns refcnt because we don't call
    tcf_exts_destroy() here.
    
    Fixes: 27ce4f05e2ab ("net_sched: use tcf_queue_work() in tcindex filter")
    Reported-by: Adrian <bugs@abtelecom.ro>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca22354b140853b8155692d5b2bc0110aa54e937
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Tue Feb 12 21:12:56 2019 -0700

    RDMA/rxe: Close a race after ib_register_device
    
    Since rxe allows unregistration from other threads the rxe pointer can
    become invalid any moment after ib_register_driver returns. This could
    cause a user triggered use after free.
    
    Add another driver callback to be called right after the device becomes
    registered to complete any device setup required post-registration.  This
    callback has enough core locking to prevent the device from becoming
    unregistered.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit bf592c56b1650eb12511c4b3f422fecf3871bbb9
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Fri Feb 15 17:03:44 2019 -0500

    max17042_battery: fix potential use-after-free on device remove
    
    The work which is scheduled on a POR boot is potentially left
    pending or running until after the device module is removed,
    which could result in a use-after-free.
    
    Fix by registering a cancel/sync callback, which gets executed as
    part of standard resource unwinding.
    
    This issue was detected with the help of Coccinelle.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commit a6d9cef30eb11b2de8cbfed9065e3dc5b1f829a8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 19 15:04:27 2019 +0300

    ASoC: dapm: Potential small memory leak in dapm_cnew_widget()
    
    We should free "w" on the error path.
    
    Fixes: 199ed3e81c49 ("ASoC: dapm: fix use-after-free issue with dailink sname")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8cbd468bdeb5ed3acac2d7a9f7494d5b77e46297
Author: Yangtao Li <tiny.windzz@gmail.com>
Date:   Sat Feb 16 11:31:48 2019 -0500

    cpufreq: scmi: Fix use-after-free in scmi_cpufreq_exit()
    
    This issue was detected with the help of Coccinelle. So
    change the order of function calls to fix it.
    
    Fixes: 1690d8bb91e37 (cpufreq: scpi/scmi: Fix freeing of dynamic OPPs)
    
    Signed-off-by: Yangtao Li <tiny.windzz@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: 4.20+ <stable@vger.kernel.org> # 4.20+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 9060cb719e61b685ec0102574e10337fa5f445ea
Author: Mao Wenan <maowenan@huawei.com>
Date:   Mon Feb 18 10:44:44 2019 +0800

    net: crypto set sk to NULL when af_alg_release.
    
    KASAN has found use-after-free in sockfs_setattr.
    The existed commit 6d8c50dcb029 ("socket: close race condition between sock_close()
    and sockfs_setattr()") is to fix this simillar issue, but it seems to ignore
    that crypto module forgets to set the sk to NULL after af_alg_release.
    
    KASAN report details as below:
    BUG: KASAN: use-after-free in sockfs_setattr+0x120/0x150
    Write of size 4 at addr ffff88837b956128 by task syz-executor0/4186
    
    CPU: 2 PID: 4186 Comm: syz-executor0 Not tainted xxx + #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.10.2-1ubuntu1 04/01/2014
    Call Trace:
     dump_stack+0xca/0x13e
     print_address_description+0x79/0x330
     ? vprintk_func+0x5e/0xf0
     kasan_report+0x18a/0x2e0
     ? sockfs_setattr+0x120/0x150
     sockfs_setattr+0x120/0x150
     ? sock_register+0x2d0/0x2d0
     notify_change+0x90c/0xd40
     ? chown_common+0x2ef/0x510
     chown_common+0x2ef/0x510
     ? chmod_common+0x3b0/0x3b0
     ? __lock_is_held+0xbc/0x160
     ? __sb_start_write+0x13d/0x2b0
     ? __mnt_want_write+0x19a/0x250
     do_fchownat+0x15c/0x190
     ? __ia32_sys_chmod+0x80/0x80
     ? trace_hardirqs_on_thunk+0x1a/0x1c
     __x64_sys_fchownat+0xbf/0x160
     ? lockdep_hardirqs_on+0x39a/0x5e0
     do_syscall_64+0xc8/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462589
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89
    f7 48 89 d6 48 89
    ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3
    48 c7 c1 bc ff ff
    ff f7 d8 64 89 01 48
    RSP: 002b:00007fb4b2c83c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000104
    RAX: ffffffffffffffda RBX: 000000000072bfa0 RCX: 0000000000462589
    RDX: 0000000000000000 RSI: 00000000200000c0 RDI: 0000000000000007
    RBP: 0000000000000005 R08: 0000000000001000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fb4b2c846bc
    R13: 00000000004bc733 R14: 00000000006f5138 R15: 00000000ffffffff
    
    Allocated by task 4185:
     kasan_kmalloc+0xa0/0xd0
     __kmalloc+0x14a/0x350
     sk_prot_alloc+0xf6/0x290
     sk_alloc+0x3d/0xc00
     af_alg_accept+0x9e/0x670
     hash_accept+0x4a3/0x650
     __sys_accept4+0x306/0x5c0
     __x64_sys_accept4+0x98/0x100
     do_syscall_64+0xc8/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4184:
     __kasan_slab_free+0x12e/0x180
     kfree+0xeb/0x2f0
     __sk_destruct+0x4e6/0x6a0
     sk_destruct+0x48/0x70
     __sk_free+0xa9/0x270
     sk_free+0x2a/0x30
     af_alg_release+0x5c/0x70
     __sock_release+0xd3/0x280
     sock_close+0x1a/0x20
     __fput+0x27f/0x7f0
     task_work_run+0x136/0x1b0
     exit_to_usermode_loop+0x1a7/0x1d0
     do_syscall_64+0x461/0x580
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Syzkaller reproducer:
    r0 = perf_event_open(&(0x7f0000000000)={0x0, 0x70, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, @perf_config_ext}, 0x0, 0x0,
    0xffffffffffffffff, 0x0)
    r1 = socket$alg(0x26, 0x5, 0x0)
    getrusage(0x0, 0x0)
    bind(r1, &(0x7f00000001c0)=@alg={0x26, 'hash\x00', 0x0, 0x0,
    'sha256-ssse3\x00'}, 0x80)
    r2 = accept(r1, 0x0, 0x0)
    r3 = accept4$unix(r2, 0x0, 0x0, 0x0)
    r4 = dup3(r3, r0, 0x0)
    fchownat(r4, &(0x7f00000000c0)='\x00', 0x0, 0x0, 0x1000)
    
    Fixes: 6d8c50dcb029 ("socket: close race condition between sock_close() and sockfs_setattr()")
    Signed-off-by: Mao Wenan <maowenan@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b3098121c42caaf3aea239b8655cf52d45be116f
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Sun Feb 10 22:49:15 2019 +0100

    mt76: usb: do not run mt76u_queues_deinit twice
    
    Do not call mt76u_queues_deinit routine in mt76u_alloc_queues error path
    since it will be run in mt76x0u_register_device or
    mt76x2u_register_device error path. Current implementation triggers the
    following kernel warning:
    
    [   67.005516] WARNING: CPU: 2 PID: 761 at lib/refcount.c:187 refcount_sub_and_test_checked+0xa4/0xb8
    [   67.019513] refcount_t: underflow; use-after-free.
    [   67.099872] Hardware name: BCM2835
    [   67.106268] Backtrace:
    [   67.111584] [<8010c91c>] (dump_backtrace) from [<8010cc00>] (show_stack+0x20/0x24)
    [   67.124974]  r6:60000013 r5:ffffffff r4:00000000 r3:a50bade6
    [   67.132226] [<8010cbe0>] (show_stack) from [<807ca5f4>] (dump_stack+0xc8/0x114)
    [   67.141225] [<807ca52c>] (dump_stack) from [<8011e65c>] (__warn+0xf4/0x120)
    [   67.149849]  r9:000000bb r8:804d0138 r7:00000009 r6:8099dc84 r5:00000000 r4:b66c7b58
    [   67.160767] [<8011e568>] (__warn) from [<8011e6d0>] (warn_slowpath_fmt+0x48/0x50)
    [   67.171436]  r9:7f65e128 r8:80d1419c r7:80c0bac4 r6:b97b3044 r5:b7368e00 r4:00000000
    [   67.182433] [<8011e68c>] (warn_slowpath_fmt) from [<804d0138>] (refcount_sub_and_test_checked+0xa4/0xb8)
    [   67.195221]  r3:80c91c25 r2:8099dc94
    [   67.200370]  r4:00000000
    [   67.204397] [<804d0094>] (refcount_sub_and_test_checked) from [<804d0164>] (refcount_dec_and_test_checked+0x18/0x1c)
    [   67.218046]  r4:b7368e00 r3:00000001
    [   67.223125] [<804d014c>] (refcount_dec_and_test_checked) from [<805db49c>] (usb_free_urb+0x20/0x4c)
    [   67.235358] [<805db47c>] (usb_free_urb) from [<7f639804>] (mt76u_buf_free+0x98/0xac [mt76_usb])
    [   67.247302]  r4:00000001 r3:00000001
    [   67.252468] [<7f63976c>] (mt76u_buf_free [mt76_usb]) from [<7f639ef8>] (mt76u_queues_deinit+0x44/0x100 [mt76_usb])
    [   67.266102]  r8:b8fe8600 r7:b5dac480 r6:b5dace20 r5:00000001 r4:00000000 r3:00000080
    [   67.277132] [<7f639eb4>] (mt76u_queues_deinit [mt76_usb]) from [<7f65c040>] (mt76x0u_cleanup+0x40/0x4c [mt76x0u])
    [   67.290737]  r7:b5dac480 r6:b8fe8600 r5:ffffffea r4:b5dace20
    [   67.298069] [<7f65c000>] (mt76x0u_cleanup [mt76x0u]) from [<7f65c564>] (mt76x0u_probe+0x1f0/0x354 [mt76x0u])
    [   67.311174]  r4:b5dace20 r3:00000000
    [   67.316312] [<7f65c374>] (mt76x0u_probe [mt76x0u]) from [<805e0b6c>] (usb_probe_interface+0x104/0x240)
    [   67.328915]  r7:00000000 r6:7f65e034 r5:b6634800 r4:b8fe8620
    [   67.336276] [<805e0a68>] (usb_probe_interface) from [<8056a8bc>] (really_probe+0x224/0x2f8)
    [   67.347965]  r10:b65f0a00 r9:00000019 r8:7f65e034 r7:80d3e124 r6:00000000 r5:80d3e120
    [   67.359175]  r4:b8fe8620 r3:805e0a68
    [   67.364384] [<8056a698>] (really_probe) from [<8056ab60>] (driver_probe_device+0x6c/0x180)
    [   67.375974]  r10:b65f0a00 r9:7f65e2c0 r8:b8fe8620 r7:00000000 r6:7f65e034 r5:7f65e034
    [   67.387170]  r4:b8fe8620 r3:00000000
    [   67.392378] [<8056aaf4>] (driver_probe_device) from [<8056ad54>] (__driver_attach+0xe0/0xe4)
    [   67.404097]  r9:7f65e2c0 r8:7f65d22c r7:00000000 r6:b8fe8654 r5:7f65e034 r4:b8fe8620
    [   67.415122] [<8056ac74>] (__driver_attach) from [<8056880c>] (bus_for_each_dev+0x68/0xa0)
    [   67.426628]  r6:8056ac74 r5:7f65e034 r4:00000000 r3:00000027
    [   67.434017] [<805687a4>] (bus_for_each_dev) from [<8056a1cc>] (driver_attach+0x28/0x30)
    [   67.445394]  r6:80c6ddc8 r5:b7368f80 r4:7f65e034
    [   67.451703] [<8056a1a4>] (driver_attach) from [<80569c24>] (bus_add_driver+0x194/0x21c)
    [   67.463081] [<80569a90>] (bus_add_driver) from [<8056b504>] (driver_register+0x8c/0x124)
    [   67.474560]  r7:80c6ddc8 r6:7f65e034 r5:00000000 r4:7f65e034
    [   67.481964] [<8056b478>] (driver_register) from [<805df510>] (usb_register_driver+0x74/0x140)
    [   67.493901]  r5:00000000 r4:7f65e000
    [   67.499131] [<805df49c>] (usb_register_driver) from [<7f661024>] (mt76x0_driver_init+0x24/0x1000 [mt76x0u])
    [   67.512258]  r9:00000001 r8:7f65e308 r7:00000000 r6:80c08d48 r5:7f661000 r4:7f65e2c0
    [   67.523404] [<7f661000>] (mt76x0_driver_init [mt76x0u]) from [<80102f6c>] (do_one_initcall+0x4c/0x210)
    [   67.536142] [<80102f20>] (do_one_initcall) from [<801ae63c>] (do_init_module+0x6c/0x21c)
    [   67.547639]  r8:7f65e308 r7:80c08d48 r6:b65f0ac0 r5:7f65e2c0 r4:7f65e2c0
    [   67.556129] [<801ae5d0>] (do_init_module) from [<801ad68c>] (load_module+0x1d10/0x2304)
    
    Fixes: b40b15e1521f ("mt76: add usb support to mt76 layer")
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>

commit ce59b8e99c2c3e5828bce0b434850c6fec9d2397
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Jan 16 13:20:27 2019 +0200

    uprobes: convert uprobe.ref to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable uprobe.ref is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the uprobe.ref it might make a difference
    in following places:
     - put_uprobe(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Link: http://lkml.kernel.org/r/1547637627-29526-1-git-send-email-elena.reshetova@intel.com
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commits)
      net: ethernet: freescale: set FEC ethtool regs version
      net: hns: Fix object reference leaks in hns_dsaf_roce_reset()
      mm: page_alloc: fix ref bias in page_frag_alloc() for 1-byte allocs
      net: phy: fix potential race in the phylib state machine
      net: phy: don't use locking in phy_is_started
      selftests: fix timestamping Makefile
      net: dsa: bcm_sf2: potential array overflow in bcm_sf2_sw_suspend()
      net: fix possible overflow in __sk_mem_raise_allocated()
      dsa: mv88e6xxx: Ensure all pending interrupts are handled prior to exit
      net: phy: fix interrupt handling in non-started states
      sctp: set stream ext to NULL after freeing it in sctp_stream_outq_migrate
      sctp: call gso_reset_checksum when computing checksum in sctp_gso_segment
      net/mlx5e: XDP, fix redirect resources availability check
      net/mlx5: Fix a compilation warning in events.c
      net/mlx5: No command allowed when command interface is not ready
      net/mlx5e: Fix NULL pointer derefernce in set channels error flow
      netfilter: nft_compat: use-after-free when deleting targets
      team: avoid complex list operations in team_nl_cmd_options_set()
      net_sched: fix two more memory leaks in cls_tcindex
      net_sched: fix a memory leak in cls_tcindex
      ...

commits)
      usb: phy: twl6030-usb: fix possible use-after-free on remove
      usb: misc: usbtest: add super-speed isoc support
      usb: dwc3: Reset num_trbs after skipping
      usb: dwc3: gadget: don't enable interrupt when disabling endpoint
      fotg210-udc: pass struct device to DMA API functions
      fotg210-udc: remove a bogus dma_sync_single_for_device call
      usb: gadget: Change Andrzej Pietrasiewicz's e-mail address
      usb: f_fs: Avoid crash due to out-of-scope stack ptr access
      usb: dwc3: haps: Workaround matching VID PID
      usb: gadget: f_fs: preserve wMaxPacketSize across usb_ep_autoconfig() call
      usb: gadget: move non-super speed code out of usb_ep_autoconfig_ss()
      usb: gadget: function: sync f_uac1 ac header baInterfaceNr
      usb: dwc2: gadget: Add scatter-gather mode
      usb: gadget: fix various indentation issues
      usb: dwc2: Fix EP TxFIFO number setting
      udc: net2280: Fix net2280_disable
      USB: gadget: Improve kerneldoc for usb_ep_dequeue()
      usb: dwc3: debug: purge usage of strcat
      usb: dwc3: trace: pass trace buffer size to decoding functions
      usb: dwc3: gadget: remove DWC3_EP_END_TRANSFER_PENDING
      ...

commit dac7c08f988bbc7208fc7403a5d75d4bb791139c
Author: Parav Pandit <parav@mellanox.com>
Date:   Tue Feb 12 14:24:08 2019 -0600

    devlink: Fix list access without lock while reading region
    
    While finding the devlink device during region reading,
    devlink device list is accessed and devlink device is
    returned without holding a lock. This could lead to use-after-free
    accesses.
    
    While at it, add lockdep assert to ensure that all future callers hold
    the lock when calling devlink_get_from_attrs().
    
    Fixes: 4e54795a27f5 ("devlink: Add support for region snapshot read command")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25dc194b34dd5919dd07b8873ee338182e15df9d
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Jan 7 12:41:46 2019 -0500

    drm: Block fb changes for async plane updates
    
    The prepare_fb call always happens on new_plane_state.
    
    The drm_atomic_helper_cleanup_planes checks to see if
    plane state pointer has changed when deciding to call cleanup_fb on
    either the new_plane_state or the old_plane_state.
    
    For a non-async atomic commit the state pointer is swapped, so this
    helper calls prepare_fb on the new_plane_state and cleanup_fb on the
    old_plane_state. This makes sense, since we want to prepare the
    framebuffer we are going to use and cleanup the the framebuffer we are
    no longer using.
    
    For the async atomic update helpers this differs. The async atomic
    update helpers perform in-place updates on the existing state. They call
    drm_atomic_helper_cleanup_planes but the state pointer is not swapped.
    This means that prepare_fb is called on the new_plane_state and
    cleanup_fb is called on the new_plane_state (not the old).
    
    In the case where old_plane_state->fb == new_plane_state->fb then
    there should be no behavioral difference between an async update
    and a non-async commit. But there are issues that arise when
    old_plane_state->fb != new_plane_state->fb.
    
    The first is that the new_plane_state->fb is immediately cleaned up
    after it has been prepared, so we're using a fb that we shouldn't
    be.
    
    The second occurs during a sequence of async atomic updates and
    non-async regular atomic commits. Suppose there are two framebuffers
    being interleaved in a double-buffering scenario, fb1 and fb2:
    
    - Async update, oldfb = NULL, newfb = fb1, prepare fb1, cleanup fb1
    - Async update, oldfb = fb1, newfb = fb2, prepare fb2, cleanup fb2
    - Non-async commit, oldfb = fb2, newfb = fb1, prepare fb1, cleanup fb2
    
    We call cleanup_fb on fb2 twice in this example scenario, and any
    further use will result in use-after-free.
    
    The simple fix to this problem is to block framebuffer changes
    in the drm_atomic_helper_async_check function for now.
    
    v2: Move check by itself, add a FIXME (Daniel)
    
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Cc: <stable@vger.kernel.org> # v4.14+
    Fixes: fef9df8b5945 ("drm/atomic: initial support for asynchronous plane update")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Acked-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Link: https://patchwork.freedesktop.org/patch/275364/

commit 753c111f655e38bbd52fc01321266633f022ebe2
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Feb 13 13:03:53 2019 +0100

    netfilter: nft_compat: use-after-free when deleting targets
    
    Fetch pointer to module before target object is released.
    
    Fixes: 29e3880109e3 ("netfilter: nf_tables: fix use-after-free when deleting compat expressions")
    Fixes: 0ca743a55991 ("netfilter: nf_tables: add compatibility layer for x_tables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit c5de16cca2d7268833abfd6456d73fbba447c19b
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Mon Nov 26 12:46:20 2018 +0300

    fuse: Replace page without copying in fuse_writepage_in_flight()
    
    It looks like we can optimize page replacement and avoid copying by simple
    updating the request's page.
    
    [SzM: swap with new request's tmp page to avoid use after free.]
    
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit 5895d311d28f2605e2f71c1a3e043ed38f3ac9d2
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Mon Feb 11 10:04:26 2019 -0500

    usb: phy: twl6030-usb: fix possible use-after-free on remove
    
    In remove(), use cancel_delayed_work_sync() to cancel the
    delayed work. Otherwise there's a chance that this work
    will continue to run until after the device has been removed.
    
    This issue was detected with the help of Coccinelle.
    
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Bin Liu <b-liu@ti.com>
    Fixes: b6a619a883c3 ("usb: phy: Check initial state for twl6030")
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 388a49959ee4e4e99f160241d9599efa62cd4299
Author: Bill Kuzeja <William.Kuzeja@stratus.com>
Date:   Tue Feb 12 09:29:50 2019 -0500

    scsi: qla2xxx: Fix panic from use after free in qla2x00_async_tm_cmd
    
    In qla2x00_async_tm_cmd, we reference off sp after it has been freed.  This
    caused a panic on a system running a slub debug kernel. Since fcport is
    passed in anyways, just use that instead.
    
    Signed-off-by: Bill Kuzeja <william.kuzeja@stratus.com>
    Acked-by: Giridhar Malavali <gmalavali@marvell.com>
    Acked-by: Himanshu Madhani <hmadhani@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 74f0aaba7c7161f2f777015f6c2e6d8c2c44aa8f
Author: Sven Van Asbroeck <thesven73@gmail.com>
Date:   Tue Feb 12 11:21:49 2019 -0500

    power: supply: ds2782: fix possible use-after-free on remove
    
    In remove(), use cancel_delayed_work_sync() to cancel the
    delayed work. Otherwise there's a chance that this work
    will continue to run until after the device has been removed.
    
    While we're here, fix the deallocation order in remove(),
    to correspond to the inverse of the probe() allocation
    order. This guarantees that any remaining work can run
    to completion with all driver structures still intact.
    
    This issue was detected with the help of Coccinelle.
    
    Signed-off-by: Sven Van Asbroeck <TheSven73@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>

commit 8015d93ebd27484418d4952284fd02172fa4b0b2
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Feb 11 13:06:14 2019 -0800

    net_sched: fix a race condition in tcindex_destroy()
    
    tcindex_destroy() invokes tcindex_destroy_element() via
    a walker to delete each filter result in its perfect hash
    table, and tcindex_destroy_element() calls tcindex_delete()
    which schedules tcf RCU works to do the final deletion work.
    Unfortunately this races with the RCU callback
    __tcindex_destroy(), which could lead to use-after-free as
    reported by Adrian.
    
    Fix this by migrating this RCU callback to tcf RCU work too,
    as that workqueue is ordered, we will not have use-after-free.
    
    Note, we don't need to hold netns refcnt because we don't call
    tcf_exts_destroy() here.
    
    Fixes: 27ce4f05e2ab ("net_sched: use tcf_queue_work() in tcindex filter")
    Reported-by: Adrian <bugs@abtelecom.ro>
    Cc: Ben Hutchings <ben@decadent.org.uk>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4179cb5a4c924cd233eaadd081882425bc98f44e
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Feb 7 12:27:38 2019 -0800

    vxlan: test dev->flags & IFF_UP before calling netif_rx()
    
    netif_rx() must be called under a strict contract.
    
    At device dismantle phase, core networking clears IFF_UP
    and flush_all_backlogs() is called after rcu grace period
    to make sure no incoming packet might be in a cpu backlog
    and still referencing the device.
    
    Most drivers call netif_rx() from their interrupt handler,
    and since the interrupts are disabled at device dismantle,
    netif_rx() does not have to check dev->flags & IFF_UP
    
    Virtual drivers do not have this guarantee, and must
    therefore make the check themselves.
    
    Otherwise we risk use-after-free and/or crashes.
    
    Note this patch also fixes a small issue that came
    with commit ce6502a8f957 ("vxlan: fix a use after free
    in vxlan_encap_bypass"), since the dev->stats.rx_dropped
    change was done on the wrong device.
    
    Fixes: d342894c5d2f ("vxlan: virtual extensible lan")
    Fixes: ce6502a8f957 ("vxlan: fix a use after free in vxlan_encap_bypass")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Petr Machata <petrm@mellanox.com>
    Cc: Ido Schimmel <idosch@mellanox.com>
    Cc: Roopa Prabhu <roopa@cumulusnetworks.com>
    Cc: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 49262de2270e09882d7bd8866a691cdd69ab32f6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 5 14:24:27 2019 +0200

    futex: Convert futex_pi_state.refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable futex_pi_state.refcount is used as pure
    reference counter. Convert it to refcount_t and fix up
    the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts. Please check Documentation/core-api/refcount-vs-atomic.rst
    for more information.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the futex_pi_state.refcount it might make a difference
    in following places:
    
     - get_pi_state() and exit_pi_state_list(): increment in
       refcount_inc_not_zero() only guarantees control dependency
       on success vs. fully ordered atomic counterpart
     - put_pi_state(): decrement in refcount_dec_and_test() provides
       RELEASE ordering and ACQUIRE ordering on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: dvhart@infradead.org
    Link: http://lkml.kernel.org/r/1549369467-3505-1-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 401e7e88d4ef80188ffa07095ac00456f901b8c4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Jan 28 11:08:54 2019 +0800

    ipmi_si: fix use-after-free of resource->name
    
    When we excute the following commands, we got oops
    rmmod ipmi_si
    cat /proc/ioports
    
    [ 1623.482380] Unable to handle kernel paging request at virtual address ffff00000901d478
    [ 1623.482382] Mem abort info:
    [ 1623.482383]   ESR = 0x96000007
    [ 1623.482385]   Exception class = DABT (current EL), IL = 32 bits
    [ 1623.482386]   SET = 0, FnV = 0
    [ 1623.482387]   EA = 0, S1PTW = 0
    [ 1623.482388] Data abort info:
    [ 1623.482389]   ISV = 0, ISS = 0x00000007
    [ 1623.482390]   CM = 0, WnR = 0
    [ 1623.482393] swapper pgtable: 4k pages, 48-bit VAs, pgdp = 00000000d7d94a66
    [ 1623.482395] [ffff00000901d478] pgd=000000dffbfff003, pud=000000dffbffe003, pmd=0000003f5d06e003, pte=0000000000000000
    [ 1623.482399] Internal error: Oops: 96000007 [#1] SMP
    [ 1623.487407] Modules linked in: ipmi_si(E) nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm dm_mirror dm_region_hash dm_log iw_cm dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ses ghash_ce sha2_ce enclosure sha256_arm64 sg sha1_ce hisi_sas_v2_hw hibmc_drm sbsa_gwdt hisi_sas_main ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe mdio hns_dsaf ipmi_devintf hns_enet_drv ipmi_msghandler hns_mdio [last unloaded: ipmi_si]
    [ 1623.532410] CPU: 30 PID: 11438 Comm: cat Kdump: loaded Tainted: G            E     5.0.0-rc3+ #168
    [ 1623.541498] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017
    [ 1623.548822] pstate: a0000005 (NzCv daif -PAN -UAO)
    [ 1623.553684] pc : string+0x28/0x98
    [ 1623.557040] lr : vsnprintf+0x368/0x5e8
    [ 1623.560837] sp : ffff000013213a80
    [ 1623.564191] x29: ffff000013213a80 x28: ffff00001138abb5
    [ 1623.569577] x27: ffff000013213c18 x26: ffff805f67d06049
    [ 1623.574963] x25: 0000000000000000 x24: ffff00001138abb5
    [ 1623.580349] x23: 0000000000000fb7 x22: ffff0000117ed000
    [ 1623.585734] x21: ffff000011188fd8 x20: ffff805f67d07000
    [ 1623.591119] x19: ffff805f67d06061 x18: ffffffffffffffff
    [ 1623.596505] x17: 0000000000000200 x16: 0000000000000000
    [ 1623.601890] x15: ffff0000117ed748 x14: ffff805f67d07000
    [ 1623.607276] x13: ffff805f67d0605e x12: 0000000000000000
    [ 1623.612661] x11: 0000000000000000 x10: 0000000000000000
    [ 1623.618046] x9 : 0000000000000000 x8 : 000000000000000f
    [ 1623.623432] x7 : ffff805f67d06061 x6 : fffffffffffffffe
    [ 1623.628817] x5 : 0000000000000012 x4 : ffff00000901d478
    [ 1623.634203] x3 : ffff0a00ffffff04 x2 : ffff805f67d07000
    [ 1623.639588] x1 : ffff805f67d07000 x0 : ffffffffffffffff
    [ 1623.644974] Process cat (pid: 11438, stack limit = 0x000000008d4cbc10)
    [ 1623.651592] Call trace:
    [ 1623.654068]  string+0x28/0x98
    [ 1623.657071]  vsnprintf+0x368/0x5e8
    [ 1623.660517]  seq_vprintf+0x70/0x98
    [ 1623.668009]  seq_printf+0x7c/0xa0
    [ 1623.675530]  r_show+0xc8/0xf8
    [ 1623.682558]  seq_read+0x330/0x440
    [ 1623.689877]  proc_reg_read+0x78/0xd0
    [ 1623.697346]  __vfs_read+0x60/0x1a0
    [ 1623.704564]  vfs_read+0x94/0x150
    [ 1623.711339]  ksys_read+0x6c/0xd8
    [ 1623.717939]  __arm64_sys_read+0x24/0x30
    [ 1623.725077]  el0_svc_common+0x120/0x148
    [ 1623.732035]  el0_svc_handler+0x30/0x40
    [ 1623.738757]  el0_svc+0x8/0xc
    [ 1623.744520] Code: d1000406 aa0103e2 54000149 b4000080 (39400085)
    [ 1623.753441] ---[ end trace f91b6a4937de9835 ]---
    [ 1623.760871] Kernel panic - not syncing: Fatal exception
    [ 1623.768935] SMP: stopping secondary CPUs
    [ 1623.775718] Kernel Offset: disabled
    [ 1623.781998] CPU features: 0x002,21006008
    [ 1623.788777] Memory Limit: none
    [ 1623.798329] Starting crashdump kernel...
    [ 1623.805202] Bye!
    
    If io_setup is called successful in try_smi_init() but try_smi_init()
    goes out_err before calling ipmi_register_smi(), so ipmi_unregister_smi()
    will not be called while removing module. It leads to the resource that
    allocated in io_setup() can not be freed, but the name(DEVICE_NAME) of
    resource is freed while removing the module. It causes use-after-free
    when cat /proc/ioports.
    
    Fix this by calling io_cleanup() while try_smi_init() goes to out_err.
    and don't call io_cleanup() until io_setup() returns successful to avoid
    warning prints.
    
    Fixes: 93c303d2045b ("ipmi_si: Clean up shutdown a bit")
    Cc: stable@vger.kernel.org
    Reported-by: NuoHan Qiao <qiaonuohan@huawei.com>
    Suggested-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit 628442880af8c201d307a45f3862a7a17df8a189
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue Feb 5 13:52:26 2019 -0800

    Input: cap11xx - switch to using set_brightness_blocking()
    
    Updating LED state requires access to regmap and therefore we may sleep,
    so we could not do that directly form set_brightness() method.
    Historically we used private work to adjust the brightness, but with the
    introduction of set_brightness_blocking() we no longer need it.
    
    As a bonus, not having our own work item means we do not have
    use-after-free issue as we neglected to cancel outstanding work on
    driver unbind.
    
    Reported-by: Sven Van Asbroeck <thesven73@gmail.com>
    Reviewed-by: Sven Van Asbroeck <TheSven73@googlemail.com>
    Acked-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commits)
      net: dsa: b53: Fix for failure when irq is not defined in dt
      sit: check if IPv6 enabled before calling ip6_err_gen_icmpv6_unreach()
      geneve: should not call rt6_lookup() when ipv6 was disabled
      net: Don't default Cavium PTP driver to 'y'
      net: broadcom: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: via-velocity: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: tehuti: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: sun: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: fsl_ucc_hdlc: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: fec_mpc52xx: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: smsc: epic100: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: dscc4: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: tulip: de2104x: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net: defxx: replace dev_kfree_skb_irq by dev_consume_skb_irq for drop profiles
      net/mlx5e: Don't overwrite pedit action when multiple pedit used
      net/mlx5e: Update hw flows when encap source mac changed
      qed*: Advance drivers version to 8.37.0.20
      qed: Change verbosity for coalescing message.
      qede: Fix system crash on configuring channels.
      qed: Consider TX tcs while deriving the max num_queues for PF.
      ...

commit bdcc5bc25548ef6b08e2e43937148f907c212292
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Feb 5 15:38:44 2019 -0800

    mISDN: fix a race in dev_expire_timer()
    
    Since mISDN_close() uses dev->pending to iterate over active
    timers, there is a chance that one timer got removed from the
    ->pending list in dev_expire_timer() but that the thread
    has not called yet wake_up_interruptible()
    
    So mISDN_close() could miss this and free dev before
    completion of at least one dev_expire_timer()
    
    syzbot was able to catch this race :
    
    BUG: KASAN: use-after-free in register_lock_class+0x140c/0x1bf0 kernel/locking/lockdep.c:827
    Write of size 8 at addr ffff88809fc18948 by task syz-executor1/24769
    
    CPU: 1 PID: 24769 Comm: syz-executor1 Not tainted 5.0.0-rc5 #60
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_store8_noabort+0x17/0x20 mm/kasan/generic_report.c:140
     register_lock_class+0x140c/0x1bf0 kernel/locking/lockdep.c:827
     __lock_acquire+0x11f/0x4700 kernel/locking/lockdep.c:3224
     lock_acquire+0x16f/0x3f0 kernel/locking/lockdep.c:3841
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x95/0xcd kernel/locking/spinlock.c:152
     __wake_up_common_lock+0xc7/0x190 kernel/sched/wait.c:120
     __wake_up+0xe/0x10 kernel/sched/wait.c:145
     dev_expire_timer+0xe4/0x3b0 drivers/isdn/mISDN/timerdev.c:174
     call_timer_fn+0x190/0x720 kernel/time/timer.c:1325
    protocol 88fb is buggy, dev hsr_slave_0
    protocol 88fb is buggy, dev hsr_slave_1
     expire_timers kernel/time/timer.c:1362 [inline]
     __run_timers kernel/time/timer.c:1681 [inline]
     __run_timers kernel/time/timer.c:1649 [inline]
     run_timer_softirq+0x652/0x1700 kernel/time/timer.c:1694
     __do_softirq+0x266/0x95a kernel/softirq.c:292
     invoke_softirq kernel/softirq.c:373 [inline]
     irq_exit+0x180/0x1d0 kernel/softirq.c:413
     exiting_irq arch/x86/include/asm/apic.h:536 [inline]
     smp_apic_timer_interrupt+0x14a/0x570 arch/x86/kernel/apic/apic.c:1062
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:807
     </IRQ>
    RIP: 0010:__sanitizer_cov_trace_pc+0x26/0x50 kernel/kcov.c:101
    Code: 90 90 90 90 55 48 89 e5 48 8b 75 08 65 48 8b 04 25 40 ee 01 00 65 8b 15 98 12 92 7e 81 e2 00 01 1f 00 75 2b 8b 90 d8 12 00 00 <83> fa 02 75 20 48 8b 88 e0 12 00 00 8b 80 dc 12 00 00 48 8b 11 48
    RSP: 0018:ffff8880589b7a60 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
    RAX: ffff888087ce25c0 RBX: 0000000000000001 RCX: ffffffff818f8ca3
    RDX: 0000000000000000 RSI: ffffffff818f8b48 RDI: 0000000000000001
    RBP: ffff8880589b7a60 R08: ffff888087ce25c0 R09: ffffed1015d25bd0
    R10: ffffed1015d25bcf R11: ffff8880ae92de7b R12: ffffea0001ae4680
    R13: ffffea0001ae4688 R14: 0000000000000000 R15: ffffea0001b41648
     PageIdle include/linux/page-flags.h:398 [inline]
     page_is_idle include/linux/page_idle.h:29 [inline]
     mark_page_accessed+0x618/0x1140 mm/swap.c:398
     touch_buffer fs/buffer.c:59 [inline]
     __find_get_block+0x312/0xcc0 fs/buffer.c:1298
     sb_find_get_block include/linux/buffer_head.h:338 [inline]
     recently_deleted fs/ext4/ialloc.c:682 [inline]
     find_inode_bit.isra.0+0x202/0x510 fs/ext4/ialloc.c:722
     __ext4_new_inode+0x14ad/0x52c0 fs/ext4/ialloc.c:914
     ext4_symlink+0x3f8/0xbe0 fs/ext4/namei.c:3096
     vfs_symlink fs/namei.c:4126 [inline]
     vfs_symlink+0x378/0x5d0 fs/namei.c:4112
     do_symlinkat+0x22b/0x290 fs/namei.c:4153
     __do_sys_symlink fs/namei.c:4172 [inline]
     __se_sys_symlink fs/namei.c:4170 [inline]
     __x64_sys_symlink+0x59/0x80 fs/namei.c:4170
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457b67
    Code: 0f 1f 00 b8 5c 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 6d bb fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 b8 58 00 00 00 0f 05 <48> 3d 01 f0 ff ff 0f 83 4d bb fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fff045ce0f8 EFLAGS: 00000202 ORIG_RAX: 0000000000000058
    RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 0000000000457b67
    RDX: 00007fff045ce173 RSI: 00000000004bd63f RDI: 00007fff045ce160
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000013
    R10: 0000000000000075 R11: 0000000000000202 R12: 0000000000000000
    R13: 0000000000000001 R14: 000000000000029b R15: 0000000000000001
    
    Allocated by task 24763:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc mm/kasan/common.c:496 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:469
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:504
     kmem_cache_alloc_trace+0x151/0x760 mm/slab.c:3609
     kmalloc include/linux/slab.h:545 [inline]
     mISDN_open+0x9a/0x270 drivers/isdn/mISDN/timerdev.c:59
     misc_open+0x398/0x4c0 drivers/char/misc.c:141
     chrdev_open+0x247/0x6b0 fs/char_dev.c:417
     do_dentry_open+0x47d/0x1130 fs/open.c:771
     vfs_open+0xa0/0xd0 fs/open.c:880
     do_last fs/namei.c:3418 [inline]
     path_openat+0x10d7/0x4690 fs/namei.c:3534
     do_filp_open+0x1a1/0x280 fs/namei.c:3564
     do_sys_open+0x3fe/0x5d0 fs/open.c:1063
     __do_sys_openat fs/open.c:1090 [inline]
     __se_sys_openat fs/open.c:1084 [inline]
     __x64_sys_openat+0x9d/0x100 fs/open.c:1084
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 24762:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:458
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:466
     __cache_free mm/slab.c:3487 [inline]
     kfree+0xcf/0x230 mm/slab.c:3806
     mISDN_close+0x2a1/0x390 drivers/isdn/mISDN/timerdev.c:97
     __fput+0x2df/0x8d0 fs/file_table.c:278
     ____fput+0x16/0x20 fs/file_table.c:309
     task_work_run+0x14a/0x1c0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:188 [inline]
     exit_to_usermode_loop+0x273/0x2c0 arch/x86/entry/common.c:166
     prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
     do_syscall_64+0x52d/0x610 arch/x86/entry/common.c:293
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff88809fc18900
     which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 72 bytes inside of
     192-byte region [ffff88809fc18900, ffff88809fc189c0)
    The buggy address belongs to the page:
    page:ffffea00027f0600 count:1 mapcount:0 mapping:ffff88812c3f0040 index:0xffff88809fc18000
    flags: 0x1fffc0000000200(slab)
    raw: 01fffc0000000200 ffffea000269f648 ffffea00029f7408 ffff88812c3f0040
    raw: ffff88809fc18000 ffff88809fc18000 000000010000000b 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88809fc18800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff88809fc18880: 00 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88809fc18900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                  ^
     ffff88809fc18980: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff88809fc18a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Karsten Keil <isdn@linux-pingi.de>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3a8844c298522fa22df4bdd863011e5b639a4e84
Author: Lyude Paul <lyude@redhat.com>
Date:   Fri Feb 1 19:20:01 2019 -0500

    drm/dp_mst: Fix unbalanced malloc ref in drm_dp_mst_deallocate_vcpi()
    
    In drm_dp_mst_deallocate_vcpi(), we currently unconditionally call
    drm_dp_mst_put_port_malloc() on the port that's passed to us, even if we
    never successfully allocated VCPI to it. This is contrary to what we do
    in drm_dp_mst_allocate_vcpi(), where we only call
    drm_dp_mst_get_port_malloc() on the passed port if we successfully
    allocated VCPI to it.
    
    As a result, if drm_dp_mst_allocate_vcpi() fails during a modeset and
    another successive modeset calls drm_dp_mst_deallocate_vcpi() we will
    end up dropping someone else's malloc reference to the port. Example:
    
    [  962.309260] ==================================================================
    [  962.309290] BUG: KASAN: use-after-free in drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309296] Read of size 4 at addr ffff888416c30004 by task kworker/0:1H/500
    
    [  962.309308] CPU: 0 PID: 500 Comm: kworker/0:1H Tainted: G        W  O      5.0.0-rc2Lyude-Test+ #1
    [  962.309313] Hardware name: LENOVO 20L8S2N800/20L8S2N800, BIOS N22ET35W (1.12 ) 04/09/2018
    [  962.309428] Workqueue: events_highpri intel_atomic_cleanup_work [i915]
    [  962.309434] Call Trace:
    [  962.309452]  dump_stack+0xad/0x150
    [  962.309462]  ? dump_stack_print_info.cold.0+0x1b/0x1b
    [  962.309472]  ? kmsg_dump_rewind_nolock+0xd9/0xd9
    [  962.309504]  ? drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309515]  print_address_description+0x6c/0x23c
    [  962.309542]  ? drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309568]  ? drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309577]  kasan_report.cold.3+0x1a/0x32
    [  962.309605]  ? drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309631]  drm_dp_mst_put_port_malloc+0x72/0x180 [drm_kms_helper]
    [  962.309658]  ? drm_dp_mst_put_mstb_malloc+0x180/0x180 [drm_kms_helper]
    [  962.309687]  drm_dp_mst_destroy_state+0xcd/0x120 [drm_kms_helper]
    [  962.309745]  drm_atomic_state_default_clear+0x6ee/0xcc0 [drm]
    [  962.309864]  intel_atomic_state_clear+0xe/0x80 [i915]
    [  962.309928]  __drm_atomic_state_free+0x35/0xd0 [drm]
    [  962.310044]  intel_atomic_cleanup_work+0x56/0x70 [i915]
    [  962.310057]  process_one_work+0x884/0x1400
    [  962.310067]  ? drain_workqueue+0x5a0/0x5a0
    [  962.310075]  ? __schedule+0x87f/0x1e80
    [  962.310086]  ? __sched_text_start+0x8/0x8
    [  962.310095]  ? run_rebalance_domains+0x400/0x400
    [  962.310110]  ? deref_stack_reg+0xb4/0x120
    [  962.310117]  ? __read_once_size_nocheck.constprop.7+0x10/0x10
    [  962.310124]  ? worker_enter_idle+0x47f/0x6a0
    [  962.310134]  ? schedule+0xd7/0x2e0
    [  962.310141]  ? __schedule+0x1e80/0x1e80
    [  962.310148]  ? _raw_spin_lock_irq+0x9f/0x130
    [  962.310155]  ? _raw_write_unlock_irqrestore+0x110/0x110
    [  962.310164]  worker_thread+0x196/0x11e0
    [  962.310175]  ? set_load_weight+0x2e0/0x2e0
    [  962.310181]  ? __switch_to_asm+0x34/0x70
    [  962.310187]  ? __switch_to_asm+0x40/0x70
    [  962.310194]  ? process_one_work+0x1400/0x1400
    [  962.310199]  ? __switch_to_asm+0x40/0x70
    [  962.310205]  ? __switch_to_asm+0x34/0x70
    [  962.310211]  ? __switch_to_asm+0x34/0x70
    [  962.310216]  ? __switch_to_asm+0x40/0x70
    [  962.310221]  ? __switch_to_asm+0x34/0x70
    [  962.310226]  ? __switch_to_asm+0x40/0x70
    [  962.310231]  ? __switch_to_asm+0x34/0x70
    [  962.310236]  ? __switch_to_asm+0x40/0x70
    [  962.310242]  ? syscall_return_via_sysret+0xf/0x7f
    [  962.310248]  ? __switch_to_asm+0x34/0x70
    [  962.310253]  ? __switch_to_asm+0x40/0x70
    [  962.310258]  ? __switch_to_asm+0x34/0x70
    [  962.310263]  ? __switch_to_asm+0x40/0x70
    [  962.310268]  ? __switch_to_asm+0x34/0x70
    [  962.310273]  ? __switch_to_asm+0x40/0x70
    [  962.310281]  ? __schedule+0x87f/0x1e80
    [  962.310292]  ? __sched_text_start+0x8/0x8
    [  962.310300]  ? save_stack+0x8c/0xb0
    [  962.310308]  ? __kasan_kmalloc.constprop.6+0xc6/0xd0
    [  962.310313]  ? kthread+0x98/0x3a0
    [  962.310318]  ? ret_from_fork+0x35/0x40
    [  962.310334]  ? __wake_up_common+0x178/0x6f0
    [  962.310343]  ? _raw_spin_lock_irqsave+0xa4/0x140
    [  962.310349]  ? __lock_text_start+0x8/0x8
    [  962.310355]  ? _raw_write_lock_irqsave+0x70/0x130
    [  962.310360]  ? __lock_text_start+0x8/0x8
    [  962.310371]  ? process_one_work+0x1400/0x1400
    [  962.310376]  kthread+0x2e2/0x3a0
    [  962.310383]  ? kthread_create_on_node+0xc0/0xc0
    [  962.310389]  ret_from_fork+0x35/0x40
    
    [  962.310401] Allocated by task 1462:
    [  962.310410]  __kasan_kmalloc.constprop.6+0xc6/0xd0
    [  962.310437]  drm_dp_add_port+0xd60/0x1960 [drm_kms_helper]
    [  962.310464]  drm_dp_send_link_address+0x4b0/0x770 [drm_kms_helper]
    [  962.310491]  drm_dp_check_and_send_link_address+0x197/0x1f0 [drm_kms_helper]
    [  962.310515]  drm_dp_mst_link_probe_work+0x2b6/0x330 [drm_kms_helper]
    [  962.310522]  process_one_work+0x884/0x1400
    [  962.310529]  worker_thread+0x196/0x11e0
    [  962.310533]  kthread+0x2e2/0x3a0
    [  962.310538]  ret_from_fork+0x35/0x40
    
    [  962.310543] Freed by task 500:
    [  962.310550]  __kasan_slab_free+0x133/0x180
    [  962.310555]  kfree+0x92/0x1a0
    [  962.310581]  drm_dp_mst_put_port_malloc+0x14d/0x180 [drm_kms_helper]
    [  962.310693]  intel_connector_destroy+0xb2/0xe0 [i915]
    [  962.310747]  drm_mode_object_put.part.0+0x12b/0x1a0 [drm]
    [  962.310802]  drm_atomic_state_default_clear+0x1f2/0xcc0 [drm]
    [  962.310916]  intel_atomic_state_clear+0xe/0x80 [i915]
    [  962.310972]  __drm_atomic_state_free+0x35/0xd0 [drm]
    [  962.311083]  intel_atomic_cleanup_work+0x56/0x70 [i915]
    [  962.311092]  process_one_work+0x884/0x1400
    [  962.311098]  worker_thread+0x196/0x11e0
    [  962.311103]  kthread+0x2e2/0x3a0
    [  962.311108]  ret_from_fork+0x35/0x40
    
    [  962.311116] The buggy address belongs to the object at ffff888416c30000
                    which belongs to the cache kmalloc-2k of size 2048
    [  962.311122] The buggy address is located 4 bytes inside of
                    2048-byte region [ffff888416c30000, ffff888416c30800)
    [  962.311124] The buggy address belongs to the page:
    [  962.311132] page:ffffea00105b0c00 count:1 mapcount:0 mapping:ffff88841d003040 index:0x0 compound_mapcount: 0
    [  962.311142] flags: 0x8000000000010200(slab|head)
    [  962.311152] raw: 8000000000010200 dead000000000100 dead000000000200 ffff88841d003040
    [  962.311159] raw: 0000000000000000 00000000000f000f 00000001ffffffff 0000000000000000
    [  962.311162] page dumped because: kasan: bad access detected
    
    So, bail early if drm_dp_mst_deallocate_vcpi() is called on a port with
    no VCPI allocation. Additionally, clean up the surrounding kerneldoc
    while we're at it since the port is assumed to be kept around because
    the DRM driver is expected to hold a malloc reference to it, not just
    us.
    
    Changes since v1:
    * Doc changes - danvet
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Fixes: eceae1472467 ("drm/dp_mst: Start tracking per-port VCPI allocations")
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190202002023.29665-2-lyude@redhat.com

commit 947e492c0fc2132ae5fca081a9c2952ccaab0404
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Feb 5 12:16:18 2019 +0100

    netfilter: nft_compat: don't use refcount_inc on newly allocated entry
    
    When I moved the refcount to refcount_t type I missed the fact that
    refcount_inc() will result in use-after-free warning with
    CONFIG_REFCOUNT_FULL=y builds.
    
    The correct fix would be to init the reference count to 1 at allocation
    time, but, unfortunately we cannot do this, as we can't undo that
    in case something else fails later in the batch.
    
    So only solution I see is to special-case the 'new entry' condition
    and replace refcount_inc() with a "delayed" refcount_set(1) in this case,
    as done here.
    
    The .activate callback can be removed to simplify things, we only
    need to make sure that deactivate() decrements/unlinks the entry
    from the list at end of transaction phase (commit or abort).
    
    Fixes: 12c44aba6618 ("netfilter: nft_compat: use refcnt_t type for nft_xt reference count")
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit c1959066ac02bd123201352ff5a8c506469a1645
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 4 17:10:05 2019 +0300

    soc: fsl: dpio: Use after free in dpaa2_dpio_remove()
    
    The dpaa2_io_down(priv->io) call frees "priv->io" so I've shifted the
    code around a little bit to avoid the use after free.
    
    Fixes: 991e873223e9 ("soc: fsl: dpio: use a cpumask to identify which cpus are unused")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>

commit c0a2e4d10d9366ada133a8ae4ff2f32397f8b15b
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Mon Feb 4 17:40:09 2019 +0100

    s390/qeth: conclude all event processing before offlining a card
    
    Work for Bridgeport events is currently placed on a driver-wide
    workqueue. If the card is removed and freed while any such work is still
    active, this causes a use-after-free.
    So put the events on a per-card queue, where we can control their
    lifetime. As we also don't want stale events to last beyond an
    offline & online cycle, flush this queue when setting the card offline.
    
    Fixes: b4d72c08b358 ("qeth: bridgeport support - basic control")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c2780c1a3fb724560b1d44f7976e0de17bf153c7
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Mon Feb 4 17:40:08 2019 +0100

    s390/qeth: cancel close_dev work before removing a card
    
    A card's close_dev work is scheduled on a driver-wide workqueue. If the
    card is removed and freed while the work is still active, this causes a
    use-after-free.
    So make sure that the work is completed before freeing the card.
    
    Fixes: 0f54761d167f ("qeth: Support VEPA mode")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit afa0c5904ba16d59b0454f7ee4c807dae350f432
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Mon Feb 4 17:40:07 2019 +0100

    s390/qeth: fix use-after-free in error path
    
    The error path in qeth_alloc_qdio_buffers() that takes care of
    cleaning up the Output Queues is buggy. It first frees the queue, but
    then calls qeth_clear_outq_buffers() with that very queue struct.
    
    Make the call to qeth_clear_outq_buffers() part of the free action
    (in the correct order), and while at it fix the naming of the helper.
    
    Fixes: 0da9581ddb0f ("qeth: exploit asynchronous delivery of storage blocks")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f0b89d3958d73cd0785ec381f0ddf8efb6f183d8
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Jan 18 14:27:30 2019 +0200

    sched/core: Convert task_struct.stack_refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable task_struct.stack_refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the task_struct.stack_refcount it might make a difference
    in following places:
    
     - try_get_task_stack(): increment in refcount_inc_not_zero() only
       guarantees control dependency on success vs. fully ordered
       atomic counterpart
     - put_task_stack(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: akpm@linux-foundation.org
    Cc: viro@zeniv.linux.org.uk
    Link: https://lkml.kernel.org/r/1547814450-18902-6-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ec1d281923cf81cc660343d0cb8ffc837ffb991d
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Jan 18 14:27:29 2019 +0200

    sched/core: Convert task_struct.usage to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable task_struct.usage is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the task_struct.usage it might make a difference
    in following places:
    
     - put_task_struct(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: akpm@linux-foundation.org
    Cc: viro@zeniv.linux.org.uk
    Link: https://lkml.kernel.org/r/1547814450-18902-5-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit c45a77952427b678aa9205e1b0ee3bcf33339a2e
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Jan 18 14:27:28 2019 +0200

    sched/fair: Convert numa_group.refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable numa_group.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the numa_group.refcount it might make a difference
    in following places:
    
     - get_numa_group(): increment in refcount_inc_not_zero() only
       guarantees control dependency on success vs. fully ordered
       atomic counterpart
     - put_numa_group(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: akpm@linux-foundation.org
    Cc: viro@zeniv.linux.org.uk
    Link: https://lkml.kernel.org/r/1547814450-18902-4-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 60d4de3ff7f775509deba94b3db3c1abe55bf7a5
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Jan 18 14:27:27 2019 +0200

    sched/core: Convert signal_struct.sigcnt to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable signal_struct.sigcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the signal_struct.sigcnt it might make a difference
    in following places:
    
     - put_signal_struct(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: akpm@linux-foundation.org
    Cc: viro@zeniv.linux.org.uk
    Link: https://lkml.kernel.org/r/1547814450-18902-3-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit d036bda7d0e7269c2982eb979acfef855f5d7977
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Jan 18 14:27:26 2019 +0200

    sched/core: Convert sighand_struct.count to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable sighand_struct.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the sighand_struct.count it might make a difference
    in following places:
    
     - __cleanup_sighand: decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Andrea Parri <andrea.parri@amarulasolutions.com>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: akpm@linux-foundation.org
    Cc: viro@zeniv.linux.org.uk
    Link: https://lkml.kernel.org/r/1547814450-18902-2-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ca3bb3d027f69ac3ab1dafb32bde2f5a3a44439c
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Jan 28 14:27:28 2019 +0200

    perf/ring_buffer: Convert ring_buffer.aux_refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable ring_buffer.aux_refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts. Please check Documentation/core-api/refcount-vs-atomic.rst
    for more information.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the ring_buffer.aux_refcount it might make a difference
    in following places:
    
     - perf_aux_output_begin(): increment in refcount_inc_not_zero() only
       guarantees control dependency on success vs. fully ordered
       atomic counterpart
     - rb_free_aux(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and ACQUIRE ordering + control dependency
       on success vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@kernel.org
    Cc: namhyung@kernel.org
    Link: https://lkml.kernel.org/r/1548678448-24458-4-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit fecb8ed2ce7010db373f8517ee815380d8e3c0c4
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Jan 28 14:27:27 2019 +0200

    perf/ring_buffer: Convert ring_buffer.refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable ring_buffer.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts. Please check Documentation/core-api/refcount-vs-atomic.rst
    for more information.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the ring_buffer.refcount it might make a difference
    in following places:
    
     - ring_buffer_get(): increment in refcount_inc_not_zero() only
       guarantees control dependency on success vs. fully ordered
       atomic counterpart
     - ring_buffer_put(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and ACQUIRE ordering + control dependency
       on success vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@kernel.org
    Cc: namhyung@kernel.org
    Link: https://lkml.kernel.org/r/1548678448-24458-3-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8c94abbbe1ba24961278055434504b7dc3595415
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Jan 28 14:27:26 2019 +0200

    perf: Convert perf_event_context.refcount to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable perf_event_context.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    ** Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts. Please check Documentation/core-api/refcount-vs-atomic.rst
    for more information.
    
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the perf_event_context.refcount it might make a difference
    in following places:
    
     - get_ctx(), perf_event_ctx_lock_nested(), perf_lock_task_context()
       and __perf_event_ctx_lock_double(): increment in
       refcount_inc_not_zero() only guarantees control dependency
       on success vs. fully ordered atomic counterpart
     - put_ctx(): decrement in refcount_dec_and_test() provides
       RELEASE ordering and ACQUIRE ordering + control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: acme@kernel.org
    Cc: namhyung@kernel.org
    Link: https://lkml.kernel.org/r/1548678448-24458-2-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commits)
      autofs: fix error return in autofs_fill_super()
      autofs: drop dentry reference only when it is never used
      fs/drop_caches.c: avoid softlockups in drop_pagecache_sb()
      mm: migrate: don't rely on __PageMovable() of newpage after unlocking it
      psi: clarify the Kconfig text for the default-disable option
      mm, memory_hotplug: __offline_pages fix wrong locking
      mm: hwpoison: use do_send_sig_info() instead of force_sig()
      kasan: mark file common so ftrace doesn't trace it
      init/Kconfig: fix grammar by moving a closing parenthesis
      lib/test_kmod.c: potential double free in error handling
      mm, oom: fix use-after-free in oom_kill_process
      mm/hotplug: invalid PFNs from pfn_to_online_page()
      mm,memory_hotplug: fix scan_movable_pages() for gigantic hugepages
      psi: fix aggregation idle shut-off
      mm, memory_hotplug: test_pages_in_a_zone do not pass the end of zone
      mm, memory_hotplug: is_mem_section_removable do not pass the end of a zone
      oom, oom_reaper: do not enqueue same task twice
      mm: migrate: make buffer_migrate_page_norefs() actually succeed
      kernel/exit.c: release ptraced tasks before zap_pid_ns_processes
      x86_64: increase stack size for KASAN_EXTRA
      ...

commit 52abe6cc1866ac3d54612f5d80563e6608c0ddfc
Author: Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
Date:   Fri Feb 1 11:05:13 2019 -0600

    ASoC: topology: fix oops/use-after-free case with dai driver
    
    rmmod/modprobe tests expose a kernel oops when accessing the dai
    driver pointer. This comes from the topology design which operates in
    multiple passes. Each object removal happens at a specific iteration,
    and the code checks for the iteration (order) number after the memory
    containing the order was freed.
    
    Fix this be clearing a reference to the dai driver and check its
    validity to avoid dereferences.
    
    Signed-off-by: Guennadi Liakhovetski <guennadi.liakhovetski@intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 199ed3e81c49a621ce6fcb630ab9f30d92db6718
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Fri Feb 1 11:05:12 2019 -0600

    ASoC: dapm: fix use-after-free issue with dailink sname
    
    Commit 7620fe9161ce ("ASoC: topology: fix memory leak in
    soc_tplg_dapm_widget_create") fixed a memory leak issue, but
    additional tests and KASAN reports show a use-after-free in soc-dapm.
    
    The widgets are created with a kmemdup operating on a template. The
    "name" string is also duplicated, but the "sname" string is not. As a
    result, when the template is freed after widget creation, its sname
    string is still used.
    
    Fix by explicitly duplicating the "sname" string, and freeing it when
    required.
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit cefc7ef3c87d02fc9307835868ff721ea12cc597
Author: Shakeel Butt <shakeelb@google.com>
Date:   Fri Feb 1 14:20:54 2019 -0800

    mm, oom: fix use-after-free in oom_kill_process
    
    Syzbot instance running on upstream kernel found a use-after-free bug in
    oom_kill_process.  On further inspection it seems like the process
    selected to be oom-killed has exited even before reaching
    read_lock(&tasklist_lock) in oom_kill_process().  More specifically the
    tsk->usage is 1 which is due to get_task_struct() in oom_evaluate_task()
    and the put_task_struct within for_each_thread() frees the tsk and
    for_each_thread() tries to access the tsk.  The easiest fix is to do
    get/put across the for_each_thread() on the selected task.
    
    Now the next question is should we continue with the oom-kill as the
    previously selected task has exited? However before adding more
    complexity and heuristics, let's answer why we even look at the children
    of oom-kill selected task? The select_bad_process() has already selected
    the worst process in the system/memcg.  Due to race, the selected
    process might not be the worst at the kill time but does that matter?
    The userspace can use the oom_score_adj interface to prefer children to
    be killed before the parent.  I looked at the history but it seems like
    this is there before git history.
    
    Link: http://lkml.kernel.org/r/20190121215850.221745-1-shakeelb@google.com
    Reported-by: syzbot+7fbbfa368521945f0e3d@syzkaller.appspotmail.com
    Fixes: 6b0c81b3be11 ("mm, oom: reduce dependency on tasklist_lock")
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit baef1c90aac7e5bf13f0360a3b334825a23d31a1
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Tue Jan 15 14:54:47 2019 -0800

    soc: qcom: rpmh: Avoid accessing freed memory from batch API
    
    Using the batch API from the interconnect driver sometimes leads to a
    KASAN error due to an access to freed memory. This is easier to trigger
    with threadirqs on the kernel commandline.
    
     BUG: KASAN: use-after-free in rpmh_tx_done+0x114/0x12c
     Read of size 1 at addr fffffff51414ad84 by task irq/110-apps_rs/57
    
     CPU: 0 PID: 57 Comm: irq/110-apps_rs Tainted: G        W         4.19.10 #72
     Call trace:
      dump_backtrace+0x0/0x2f8
      show_stack+0x20/0x2c
      __dump_stack+0x20/0x28
      dump_stack+0xcc/0x10c
      print_address_description+0x74/0x240
      kasan_report+0x250/0x26c
      __asan_report_load1_noabort+0x20/0x2c
      rpmh_tx_done+0x114/0x12c
      tcs_tx_done+0x450/0x768
      irq_forced_thread_fn+0x58/0x9c
      irq_thread+0x120/0x1dc
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     Allocated by task 385:
      kasan_kmalloc+0xac/0x148
      __kmalloc+0x170/0x1e4
      rpmh_write_batch+0x174/0x540
      qcom_icc_set+0x8dc/0x9ac
      icc_set+0x288/0x2e8
      a6xx_gmu_stop+0x320/0x3c0
      a6xx_pm_suspend+0x108/0x124
      adreno_suspend+0x50/0x60
      pm_generic_runtime_suspend+0x60/0x78
      __rpm_callback+0x214/0x32c
      rpm_callback+0x54/0x184
      rpm_suspend+0x3f8/0xa90
      pm_runtime_work+0xb4/0x178
      process_one_work+0x544/0xbc0
      worker_thread+0x514/0x7d0
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     Freed by task 385:
      __kasan_slab_free+0x12c/0x1e0
      kasan_slab_free+0x10/0x1c
      kfree+0x134/0x588
      rpmh_write_batch+0x49c/0x540
      qcom_icc_set+0x8dc/0x9ac
      icc_set+0x288/0x2e8
      a6xx_gmu_stop+0x320/0x3c0
      a6xx_pm_suspend+0x108/0x124
      adreno_suspend+0x50/0x60
     cr50_spi spi5.0: SPI transfer timed out
      pm_generic_runtime_suspend+0x60/0x78
      __rpm_callback+0x214/0x32c
      rpm_callback+0x54/0x184
      rpm_suspend+0x3f8/0xa90
      pm_runtime_work+0xb4/0x178
      process_one_work+0x544/0xbc0
      worker_thread+0x514/0x7d0
      kthread+0x248/0x260
      ret_from_fork+0x10/0x18
    
     The buggy address belongs to the object at fffffff51414ac80
      which belongs to the cache kmalloc-512 of size 512
     The buggy address is located 260 bytes inside of
      512-byte region [fffffff51414ac80, fffffff51414ae80)
     The buggy address belongs to the page:
     page:ffffffbfd4505200 count:1 mapcount:0 mapping:fffffff51e00c680 index:0x0 compound_mapcount: 0
     flags: 0x4000000000008100(slab|head)
     raw: 4000000000008100 ffffffbfd4529008 ffffffbfd44f9208 fffffff51e00c680
     raw: 0000000000000000 0000000000200020 00000001ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      fffffff51414ac80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      fffffff51414ad00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     >fffffff51414ad80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                        ^
      fffffff51414ae00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      fffffff51414ae80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    The batch API sets the same completion for each rpmh message that's sent
    and then loops through all the messages and waits for that single
    completion declared on the stack to be completed before returning from
    the function and freeing the message structures. Unfortunately, some
    messages may still be in process and 'stuck' in the TCS. At some later
    point, the tcs_tx_done() interrupt will run and try to process messages
    that have already been freed at the end of rpmh_write_batch(). This will
    in turn access the 'needs_free' member of the rpmh_request structure and
    cause KASAN to complain. Furthermore, if there's a message that's
    completed in rpmh_tx_done() and freed immediately after the complete()
    call is made we'll be racing with potentially freed memory when
    accessing the 'needs_free' member:
    
            CPU0                         CPU1
            ----                         ----
            rpmh_tx_done()
             complete(&compl)
                                         wait_for_completion(&compl)
                                         kfree(rpm_msg)
             if (rpm_msg->needs_free)
             <KASAN warning splat>
    
    Let's fix this by allocating a chunk of completions for each message and
    waiting for all of them to be completed before returning from the batch
    API. Alternatively, we could wait for the last message in the batch, but
    that may be a more complicated change because it looks like
    tcs_tx_done() just iterates through the indices of the queue and
    completes each message instead of tracking the last inserted message and
    completing that first.
    
    Fixes: c8790cb6da58 ("drivers: qcom: rpmh: add support for batch RPMH request")
    Cc: Lina Iyer <ilina@codeaurora.org>
    Cc: "Raju P.L.S.S.S.N" <rplsssn@codeaurora.org>
    Cc: Matthias Kaehlcke <mka@chromium.org>
    Cc: Evan Green <evgreen@chromium.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Lina Iyer <ilina@codeaurora.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 70ed7148dadb812f2f7c9927e98ef3cf4869dfa9
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Feb 1 10:03:12 2019 +0100

    mic: vop: Fix use-after-free on remove
    
    KASAN detects a use-after-free when vop devices are removed.
    
    This problem was introduced by commit 0063e8bbd2b62d136 ("virtio_vop:
    don't kfree device on register failure").  That patch moved the freeing
    of the struct _vop_vdev to the release function, but failed to ensure
    that vop holds a reference to the device when it doesn't want it to go
    away.  A kfree() was replaced with a put_device() in the unregistration
    path, but the last reference to the device is already dropped in
    unregister_virtio_device() so the struct is freed before vop is done
    with it.
    
    Fix it by holding a reference until cleanup is done.  This is similar to
    the fix in virtio_pci in commit 2989be09a8a9d6 ("virtio_pci: fix use
    after free on release").
    
     ==================================================================
     BUG: KASAN: use-after-free in vop_scan_devices+0xc6c/0xe50 [vop]
     Read of size 8 at addr ffff88800da18580 by task kworker/0:1/12
    
     CPU: 0 PID: 12 Comm: kworker/0:1 Not tainted 5.0.0-rc4+ #53
     Workqueue: events vop_hotplug_devices [vop]
     Call Trace:
      dump_stack+0x74/0xbb
      print_address_description+0x5d/0x2b0
      ? vop_scan_devices+0xc6c/0xe50 [vop]
      kasan_report+0x152/0x1aa
      ? vop_scan_devices+0xc6c/0xe50 [vop]
      ? vop_scan_devices+0xc6c/0xe50 [vop]
      vop_scan_devices+0xc6c/0xe50 [vop]
      ? vop_loopback_free_irq+0x160/0x160 [vop_loopback]
      process_one_work+0x7c0/0x14b0
      ? pwq_dec_nr_in_flight+0x2d0/0x2d0
      ? do_raw_spin_lock+0x120/0x280
      worker_thread+0x8f/0xbf0
      ? __kthread_parkme+0x78/0xf0
      ? process_one_work+0x14b0/0x14b0
      kthread+0x2ae/0x3a0
      ? kthread_park+0x120/0x120
      ret_from_fork+0x3a/0x50
    
     Allocated by task 12:
      kmem_cache_alloc_trace+0x13a/0x2a0
      vop_scan_devices+0x473/0xe50 [vop]
      process_one_work+0x7c0/0x14b0
      worker_thread+0x8f/0xbf0
      kthread+0x2ae/0x3a0
      ret_from_fork+0x3a/0x50
    
     Freed by task 12:
      kfree+0x104/0x310
      device_release+0x73/0x1d0
      kobject_put+0x14f/0x420
      unregister_virtio_device+0x32/0x50
      vop_scan_devices+0x19d/0xe50 [vop]
      process_one_work+0x7c0/0x14b0
      worker_thread+0x8f/0xbf0
      kthread+0x2ae/0x3a0
      ret_from_fork+0x3a/0x50
    
     The buggy address belongs to the object at ffff88800da18008
      which belongs to the cache kmalloc-2k of size 2048
     The buggy address is located 1400 bytes inside of
      2048-byte region [ffff88800da18008, ffff88800da18808)
     The buggy address belongs to the page:
     page:ffffea0000368600 count:1 mapcount:0 mapping:ffff88801440dbc0 index:0x0 compound_mapcount: 0
     flags: 0x4000000000010200(slab|head)
     raw: 4000000000010200 ffffea0000378608 ffffea000037a008 ffff88801440dbc0
     raw: 0000000000000000 00000000000d000d 00000001ffffffff 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      ffff88800da18480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff88800da18500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     >ffff88800da18580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                        ^
      ffff88800da18600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff88800da18680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ==================================================================
    
    Fixes: 0063e8bbd2b62d136 ("virtio_vop: don't kfree device on register failure")
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8d50986da5d74ddfc233b13b91d0a13369fa164
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Feb 1 01:45:55 2019 +0100

    driver core: Fix DL_FLAG_AUTOREMOVE_SUPPLIER device link flag handling
    
    Change the list walk in device_links_driver_cleanup() to a safe one
    to avoid use-after-free when dropping a link from the list during the
    walk.
    
    Also, while at it, fix device_link_add() to refuse to create
    stateless device links with DL_FLAG_AUTOREMOVE_SUPPLIER set, which is
    an invalid combination (setting that flag means that the driver core
    should manage the link, so it cannot be stateless), and extend the
    kerneldoc comment of device_link_add() to cover the
    DL_FLAG_AUTOREMOVE_SUPPLIER flag properly too.
    
    Fixes: 1689cac5b32a ("driver core: Add flag to autoremove device link on supplier unbind")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6fa19f5637a6c22bc0999596bcc83bdcac8a4fa6
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 31 08:47:10 2019 -0800

    rds: fix refcount bug in rds_sock_addref
    
    syzbot was able to catch a bug in rds [1]
    
    The issue here is that the socket might be found in a hash table
    but that its refcount has already be set to 0 by another cpu.
    
    We need to use refcount_inc_not_zero() to be safe here.
    
    [1]
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 1 PID: 23129 at lib/refcount.c:153 refcount_inc_checked lib/refcount.c:153 [inline]
    WARNING: CPU: 1 PID: 23129 at lib/refcount.c:153 refcount_inc_checked+0x61/0x70 lib/refcount.c:151
    Kernel panic - not syncing: panic_on_warn set ...
    CPU: 1 PID: 23129 Comm: syz-executor3 Not tainted 5.0.0-rc4+ #53
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1db/0x2d0 lib/dump_stack.c:113
     panic+0x2cb/0x65c kernel/panic.c:214
     __warn.cold+0x20/0x48 kernel/panic.c:571
     report_bug+0x263/0x2b0 lib/bug.c:186
     fixup_bug arch/x86/kernel/traps.c:178 [inline]
     fixup_bug arch/x86/kernel/traps.c:173 [inline]
     do_error_trap+0x11b/0x200 arch/x86/kernel/traps.c:271
     do_invalid_op+0x37/0x50 arch/x86/kernel/traps.c:290
     invalid_op+0x14/0x20 arch/x86/entry/entry_64.S:973
    RIP: 0010:refcount_inc_checked lib/refcount.c:153 [inline]
    RIP: 0010:refcount_inc_checked+0x61/0x70 lib/refcount.c:151
    Code: 1d 51 63 c8 06 31 ff 89 de e8 eb 1b f2 fd 84 db 75 dd e8 a2 1a f2 fd 48 c7 c7 60 9f 81 88 c6 05 31 63 c8 06 01 e8 af 65 bb fd <0f> 0b eb c1 90 66 2e 0f 1f 84 00 00 00 00 00 55 48 89 e5 41 54 49
    RSP: 0018:ffff8880a0cbf1e8 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: ffffc90006113000
    RDX: 000000000001047d RSI: ffffffff81685776 RDI: 0000000000000005
    RBP: ffff8880a0cbf1f8 R08: ffff888097c9e100 R09: ffffed1015ce5021
    R10: ffffed1015ce5020 R11: ffff8880ae728107 R12: ffff8880723c20c0
    R13: ffff8880723c24b0 R14: dffffc0000000000 R15: ffffed1014197e64
     sock_hold include/net/sock.h:647 [inline]
     rds_sock_addref+0x19/0x20 net/rds/af_rds.c:675
     rds_find_bound+0x97c/0x1080 net/rds/bind.c:82
     rds_recv_incoming+0x3be/0x1430 net/rds/recv.c:362
     rds_loop_xmit+0xf3/0x2a0 net/rds/loop.c:96
     rds_send_xmit+0x1355/0x2a10 net/rds/send.c:355
     rds_sendmsg+0x323c/0x44e0 net/rds/send.c:1368
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xdd/0x130 net/socket.c:631
     __sys_sendto+0x387/0x5f0 net/socket.c:1788
     __do_sys_sendto net/socket.c:1800 [inline]
     __se_sys_sendto net/socket.c:1796 [inline]
     __x64_sys_sendto+0xe1/0x1a0 net/socket.c:1796
     do_syscall_64+0x1a3/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458089
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fc266df8c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000006 RCX: 0000000000458089
    RDX: 0000000000000000 RSI: 00000000204b3fff RDI: 0000000000000005
    RBP: 000000000073bf00 R08: 00000000202b4000 R09: 0000000000000010
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fc266df96d4
    R13: 00000000004c56e4 R14: 00000000004d94a8 R15: 00000000ffffffff
    
    Fixes: cc4dfb7f70a3 ("rds: fix two RCU related problems")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Cc: rds-devel@oss.oracle.com
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 221a1f4ac12d2ab46246c160b2e00d1b1160d5d9
Author: Liu Jian <liujian56@huawei.com>
Date:   Wed Jan 23 06:45:38 2019 +0800

    driver: uio: fix possible use-after-free in __uio_register_device
    
    In uio_dev_add_attributes() error handing case, idev is used after
    device_unregister(), in which 'idev' has been released, touch idev cause
    use-after-free.
    
    Fixes: a93e7b331568 ("uio: Prevent device destruction while fds are open")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Reviewed-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d339adc12a4f885b572c5412e4869af8939db854
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Thu Jan 31 13:46:07 2019 +0100

    CIFS: fix use-after-free of the lease keys
    
    The request buffers are freed right before copying the pointers.
    Use the func args instead which are identical and still valid.
    
    Simple reproducer (requires KASAN enabled) on a cifs mount:
    
    echo foo > foo ; tail -f foo & rm foo
    
    Cc: <stable@vger.kernel.org> # 4.20
    Fixes: 179e44d49c2f ("smb3: add tracepoint for sending lease break responses to server")
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Paulo Alcantara <palcantara@suse.de>

commit c7cc64a98512ffc41df86d14a414eb3b09bf7481
Author: David Sterba <dsterba@suse.com>
Date:   Wed Jan 23 17:09:16 2019 +0100

    btrfs: clean up pending block groups when transaction commit aborts
    
    The fstests generic/475 stresses transaction aborts and can reveal
    space accounting or use-after-free bugs regarding block goups.
    
    In this case the pending block groups that remain linked to the
    structures after transaction commit aborts in the middle.
    
    The corrupted slabs lead to failures in following tests, eg. generic/476
    
      [ 8172.752887] BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
      [ 8172.755799] #PF error: [normal kernel read fault]
      [ 8172.757571] PGD 661ae067 P4D 661ae067 PUD 3db8e067 PMD 0
      [ 8172.759000] Oops: 0000 [#1] PREEMPT SMP
      [ 8172.760209] CPU: 0 PID: 39 Comm: kswapd0 Tainted: G        W         5.0.0-rc2-default #408
      [ 8172.762495] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626cc-prebuilt.qemu-project.org 04/01/2014
      [ 8172.765772] RIP: 0010:shrink_page_list+0x2f9/0xe90
      [ 8172.770453] RSP: 0018:ffff967f00663b18 EFLAGS: 00010287
      [ 8172.771184] RAX: 0000000000000000 RBX: ffff967f00663c20 RCX: 0000000000000000
      [ 8172.772850] RDX: 0000000000000000 RSI: 0000000000000001 RDI: ffff8c0620ab20e0
      [ 8172.774629] RBP: ffff967f00663dd8 R08: 0000000000000000 R09: 0000000000000000
      [ 8172.776094] R10: ffff8c0620ab22f8 R11: ffff8c063f772688 R12: ffff967f00663b78
      [ 8172.777533] R13: ffff8c063f625600 R14: ffff8c063f625608 R15: dead000000000200
      [ 8172.778886] FS:  0000000000000000(0000) GS:ffff8c063d400000(0000) knlGS:0000000000000000
      [ 8172.780545] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 8172.781787] CR2: 0000000000000058 CR3: 000000004e962000 CR4: 00000000000006f0
      [ 8172.783547] Call Trace:
      [ 8172.784112]  shrink_inactive_list+0x194/0x410
      [ 8172.784747]  shrink_node_memcg.constprop.85+0x3a5/0x6a0
      [ 8172.785472]  shrink_node+0x62/0x1e0
      [ 8172.786011]  balance_pgdat+0x216/0x460
      [ 8172.786577]  kswapd+0xe3/0x4a0
      [ 8172.787085]  ? finish_wait+0x80/0x80
      [ 8172.787795]  ? balance_pgdat+0x460/0x460
      [ 8172.788799]  kthread+0x116/0x130
      [ 8172.789640]  ? kthread_create_on_node+0x60/0x60
      [ 8172.790323]  ret_from_fork+0x24/0x30
      [ 8172.794253] CR2: 0000000000000058
    
    or accounting errors at umount time:
    
      [ 8159.537251] WARNING: CPU: 2 PID: 19031 at fs/btrfs/extent-tree.c:5987 btrfs_free_block_groups+0x3d5/0x410 [btrfs]
      [ 8159.543325] CPU: 2 PID: 19031 Comm: umount Tainted: G        W         5.0.0-rc2-default #408
      [ 8159.545472] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.11.2-0-gf9626cc-prebuilt.qemu-project.org 04/01/2014
      [ 8159.548155] RIP: 0010:btrfs_free_block_groups+0x3d5/0x410 [btrfs]
      [ 8159.554030] RSP: 0018:ffff967f079cbde8 EFLAGS: 00010206
      [ 8159.555144] RAX: 0000000001000000 RBX: ffff8c06366cf800 RCX: 0000000000000000
      [ 8159.556730] RDX: 0000000000000002 RSI: 0000000000000001 RDI: ffff8c06255ad800
      [ 8159.558279] RBP: ffff8c0637ac0000 R08: 0000000000000001 R09: 0000000000000000
      [ 8159.559797] R10: 0000000000000000 R11: 0000000000000001 R12: ffff8c0637ac0108
      [ 8159.561296] R13: ffff8c0637ac0158 R14: 0000000000000000 R15: dead000000000100
      [ 8159.562852] FS:  00007f7f693b9fc0(0000) GS:ffff8c063d800000(0000) knlGS:0000000000000000
      [ 8159.564839] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 8159.566160] CR2: 00007f7f68fab7b0 CR3: 000000000aec7000 CR4: 00000000000006e0
      [ 8159.567898] Call Trace:
      [ 8159.568597]  close_ctree+0x17f/0x350 [btrfs]
      [ 8159.569628]  generic_shutdown_super+0x64/0x100
      [ 8159.570808]  kill_anon_super+0x14/0x30
      [ 8159.571857]  btrfs_kill_super+0x12/0xa0 [btrfs]
      [ 8159.573063]  deactivate_locked_super+0x29/0x60
      [ 8159.574234]  cleanup_mnt+0x3b/0x70
      [ 8159.575176]  task_work_run+0x98/0xc0
      [ 8159.576177]  exit_to_usermode_loop+0x83/0x90
      [ 8159.577315]  do_syscall_64+0x15b/0x180
      [ 8159.578339]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    This fix is based on 2 Josef's patches that used sideefects of
    btrfs_create_pending_block_groups, this fix introduces the helper that
    does what we need.
    
    CC: stable@vger.kernel.org # 4.4+
    CC: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 1d79895aef18fa05789995d86d523c9b2ee58a02
Author: Jakub Sitnicki <jakub@cloudflare.com>
Date:   Mon Jan 28 10:13:35 2019 +0100

    sk_msg: Always cancel strp work before freeing the psock
    
    Despite having stopped the parser, we still need to deinitialize it
    by calling strp_done so that it cancels its work. Otherwise the worker
    thread can run after we have freed the parser, and attempt to access
    its workqueue resulting in a use-after-free:
    
    ==================================================================
    BUG: KASAN: use-after-free in pwq_activate_delayed_work+0x1b/0x1d0
    Read of size 8 at addr ffff888069975240 by task kworker/u2:2/93
    
    CPU: 0 PID: 93 Comm: kworker/u2:2 Not tainted 5.0.0-rc2-00335-g28f9d1a3d4fe-dirty #14
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    Workqueue:            (null) (kstrp)
    Call Trace:
     print_address_description+0x6e/0x2b0
     ? pwq_activate_delayed_work+0x1b/0x1d0
     kasan_report+0xfd/0x177
     ? pwq_activate_delayed_work+0x1b/0x1d0
     ? pwq_activate_delayed_work+0x1b/0x1d0
     pwq_activate_delayed_work+0x1b/0x1d0
     ? process_one_work+0x4aa/0x660
     pwq_dec_nr_in_flight+0x9b/0x100
     worker_thread+0x82/0x680
     ? process_one_work+0x660/0x660
     kthread+0x1b9/0x1e0
     ? __kthread_create_on_node+0x250/0x250
     ret_from_fork+0x1f/0x30
    
    Allocated by task 111:
     sk_psock_init+0x3c/0x1b0
     sock_map_link.isra.2+0x103/0x4b0
     sock_map_update_common+0x94/0x270
     sock_map_update_elem+0x145/0x160
     __se_sys_bpf+0x152e/0x1e10
     do_syscall_64+0xb2/0x3e0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 112:
     kfree+0x7f/0x140
     process_one_work+0x40b/0x660
     worker_thread+0x82/0x680
     kthread+0x1b9/0x1e0
     ret_from_fork+0x1f/0x30
    
    The buggy address belongs to the object at ffff888069975180
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 192 bytes inside of
     512-byte region [ffff888069975180, ffff888069975380)
    The buggy address belongs to the page:
    page:ffffea0001a65d00 count:1 mapcount:0 mapping:ffff88806d401280 index:0x0 compound_mapcount: 0
    flags: 0x4000000000010200(slab|head)
    raw: 4000000000010200 dead000000000100 dead000000000200 ffff88806d401280
    raw: 0000000000000000 00000000800c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888069975100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff888069975180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff888069975200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                               ^
     ffff888069975280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888069975300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Reported-by: Marek Majkowski <marek@cloudflare.com>
    Signed-off-by: Jakub Sitnicki <jakub@cloudflare.com>
    Link: https://lore.kernel.org/netdev/CAJPywTLwgXNEZ2dZVoa=udiZmtrWJ0q5SuBW64aYs0Y1khXX3A@mail.gmail.com
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 09db51241118aeb06e1c8cd393b45879ce099b36
Author: Martin Willi <martin@strongswan.org>
Date:   Mon Jan 28 09:35:35 2019 +0100

    esp: Skip TX bytes accounting when sending from a request socket
    
    On ESP output, sk_wmem_alloc is incremented for the added padding if a
    socket is associated to the skb. When replying with TCP SYNACKs over
    IPsec, the associated sk is a casted request socket, only. Increasing
    sk_wmem_alloc on a request socket results in a write at an arbitrary
    struct offset. In the best case, this produces the following WARNING:
    
    WARNING: CPU: 1 PID: 0 at lib/refcount.c:102 esp_output_head+0x2e4/0x308 [esp4]
    refcount_t: addition on 0; use-after-free.
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.0.0-rc3 #2
    Hardware name: Marvell Armada 380/385 (Device Tree)
    [...]
    [<bf0ff354>] (esp_output_head [esp4]) from [<bf1006a4>] (esp_output+0xb8/0x180 [esp4])
    [<bf1006a4>] (esp_output [esp4]) from [<c05dee64>] (xfrm_output_resume+0x558/0x664)
    [<c05dee64>] (xfrm_output_resume) from [<c05d07b0>] (xfrm4_output+0x44/0xc4)
    [<c05d07b0>] (xfrm4_output) from [<c05956bc>] (tcp_v4_send_synack+0xa8/0xe8)
    [<c05956bc>] (tcp_v4_send_synack) from [<c0586ad8>] (tcp_conn_request+0x7f4/0x948)
    [<c0586ad8>] (tcp_conn_request) from [<c058c404>] (tcp_rcv_state_process+0x2a0/0xe64)
    [<c058c404>] (tcp_rcv_state_process) from [<c05958ac>] (tcp_v4_do_rcv+0xf0/0x1f4)
    [<c05958ac>] (tcp_v4_do_rcv) from [<c0598a4c>] (tcp_v4_rcv+0xdb8/0xe20)
    [<c0598a4c>] (tcp_v4_rcv) from [<c056eb74>] (ip_protocol_deliver_rcu+0x2c/0x2dc)
    [<c056eb74>] (ip_protocol_deliver_rcu) from [<c056ee6c>] (ip_local_deliver_finish+0x48/0x54)
    [<c056ee6c>] (ip_local_deliver_finish) from [<c056eecc>] (ip_local_deliver+0x54/0xec)
    [<c056eecc>] (ip_local_deliver) from [<c056efac>] (ip_rcv+0x48/0xb8)
    [<c056efac>] (ip_rcv) from [<c0519c2c>] (__netif_receive_skb_one_core+0x50/0x6c)
    [...]
    
    The issue triggers only when not using TCP syncookies, as for syncookies
    no socket is associated.
    
    Fixes: cac2661c53f3 ("esp4: Avoid skb_cow_data whenever possible")
    Fixes: 03e2a30f6a27 ("esp6: Avoid skb_cow_data whenever possible")
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>

commit 146820cc240f4389cf33481c058d9493aef95e25
Author: Nir Dotan <nird@mellanox.com>
Date:   Sun Jan 27 09:26:22 2019 +0200

    ip6mr: Fix notifiers call on mroute_clean_tables()
    
    When the MC route socket is closed, mroute_clean_tables() is called to
    cleanup existing routes. Mistakenly notifiers call was put on the cleanup
    of the unresolved MC route entries cache.
    In a case where the MC socket closes before an unresolved route expires,
    the notifier call leads to a crash, caused by the driver trying to
    increment a non initialized refcount_t object [1] and then when handling
    is done, to decrement it [2]. This was detected by a test recently added in
    commit 6d4efada3b82 ("selftests: forwarding: Add multicast routing test").
    
    Fix that by putting notifiers call on the resolved entries traversal,
    instead of on the unresolved entries traversal.
    
    [1]
    
    [  245.748967] refcount_t: increment on 0; use-after-free.
    [  245.754829] WARNING: CPU: 3 PID: 3223 at lib/refcount.c:153 refcount_inc_checked+0x2b/0x30
    ...
    [  245.802357] Hardware name: Mellanox Technologies Ltd. MSN2740/SA001237, BIOS 5.6.5 06/07/2016
    [  245.811873] RIP: 0010:refcount_inc_checked+0x2b/0x30
    ...
    [  245.907487] Call Trace:
    [  245.910231]  mlxsw_sp_router_fib_event.cold.181+0x42/0x47 [mlxsw_spectrum]
    [  245.917913]  notifier_call_chain+0x45/0x7
    [  245.922484]  atomic_notifier_call_chain+0x15/0x20
    [  245.927729]  call_fib_notifiers+0x15/0x30
    [  245.932205]  mroute_clean_tables+0x372/0x3f
    [  245.936971]  ip6mr_sk_done+0xb1/0xc0
    [  245.940960]  ip6_mroute_setsockopt+0x1da/0x5f0
    ...
    
    [2]
    
    [  246.128487] refcount_t: underflow; use-after-free.
    [  246.133859] WARNING: CPU: 0 PID: 7 at lib/refcount.c:187 refcount_sub_and_test_checked+0x4c/0x60
    [  246.183521] Hardware name: Mellanox Technologies Ltd. MSN2740/SA001237, BIOS 5.6.5 06/07/2016
    ...
    [  246.193062] Workqueue: mlxsw_core_ordered mlxsw_sp_router_fibmr_event_work [mlxsw_spectrum]
    [  246.202394] RIP: 0010:refcount_sub_and_test_checked+0x4c/0x60
    ...
    [  246.298889] Call Trace:
    [  246.301617]  refcount_dec_and_test_checked+0x11/0x20
    [  246.307170]  mlxsw_sp_router_fibmr_event_work.cold.196+0x47/0x78 [mlxsw_spectrum]
    [  246.315531]  process_one_work+0x1fa/0x3f0
    [  246.320005]  worker_thread+0x2f/0x3e0
    [  246.324083]  kthread+0x118/0x130
    [  246.327683]  ? wq_update_unbound_numa+0x1b0/0x1b0
    [  246.332926]  ? kthread_park+0x80/0x80
    [  246.337013]  ret_from_fork+0x1f/0x30
    
    Fixes: 088aa3eec2ce ("ip6mr: Support fib notifications")
    Signed-off-by: Nir Dotan <nird@mellanox.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      qed: Revert error handling changes.
      cfg80211: extend range deviation for DMG
      cfg80211: reg: remove warn_on for a normal case
      mac80211: Add attribute aligned(2) to struct 'action'
      mac80211: don't initiate TDLS connection if station is not associated to AP
      nl80211: fix NLA_POLICY_NESTED() arguments
      ibmveth: Do not process frames after calling napi_reschedule
      net: dev_is_mac_header_xmit() true for ARPHRD_RAWIP
      net: usb: asix: ax88772_bind return error when hw_reset fail
      MAINTAINERS: Update cavium networking drivers
      net/mlx4_core: Fix error handling when initializing CQ bufs in the driver
      net/mlx4_core: Add masking for a few queries on HCA caps
      sctp: set flow sport from saddr only when it's 0
      sctp: set chunk transport correctly when it's a new asoc
      sctp: improve the events for sctp stream adding
      sctp: improve the events for sctp stream reset
      ip_tunnel: Make none-tunnel-dst tunnel port work with lwtunnel
      ax25: fix possible use-after-free
      sfc: suppress duplicate nvmem partition types in efx_ef10_mtd_probe
      hv_netvsc: fix typos in code comments
      ...

commit 4ea899ead2786a30aaa8181fefa81a3df4ad28f6
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jan 17 08:58:58 2019 -0800

    iomap: fix a use after free in iomap_dio_rw
    
    Introduce a local wait_for_completion variable to avoid an access to the
    potentially freed dio struture after dropping the last reference count.
    
    Also use the chance to document the completion behavior to make the
    refcounting clear to the reader of the code.
    
    Fixes: ff6a9292e6 ("iomap: implement direct I/O")
    Reported-by: Chandan Rajendra <chandan@linux.ibm.com>
    Reported-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Chandan Rajendra <chandan@linux.ibm.com>
    Tested-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit 6ab4aba00f811a5265acc4d3eb1863bb3ca60562
Author: Feras Daoud <ferasda@mellanox.com>
Date:   Thu Jan 24 14:33:19 2019 +0200

    IB/ipoib: Fix for use-after-free in ipoib_cm_tx_start
    
    The following BUG was reported by kasan:
    
     BUG: KASAN: use-after-free in ipoib_cm_tx_start+0x430/0x1390 [ib_ipoib]
     Read of size 80 at addr ffff88034c30bcd0 by task kworker/u16:1/24020
    
     Workqueue: ipoib_wq ipoib_cm_tx_start [ib_ipoib]
     Call Trace:
      dump_stack+0x9a/0xeb
      print_address_description+0xe3/0x2e0
      kasan_report+0x18a/0x2e0
      ? ipoib_cm_tx_start+0x430/0x1390 [ib_ipoib]
      memcpy+0x1f/0x50
      ipoib_cm_tx_start+0x430/0x1390 [ib_ipoib]
      ? kvm_clock_read+0x1f/0x30
      ? ipoib_cm_skb_reap+0x610/0x610 [ib_ipoib]
      ? __lock_is_held+0xc2/0x170
      ? process_one_work+0x880/0x1960
      ? process_one_work+0x912/0x1960
      process_one_work+0x912/0x1960
      ? wq_pool_ids_show+0x310/0x310
      ? lock_acquire+0x145/0x440
      worker_thread+0x87/0xbb0
      ? process_one_work+0x1960/0x1960
      kthread+0x314/0x3d0
      ? kthread_create_worker_on_cpu+0xc0/0xc0
      ret_from_fork+0x3a/0x50
    
     Allocated by task 0:
      kasan_kmalloc+0xa0/0xd0
      kmem_cache_alloc_trace+0x168/0x3e0
      path_rec_create+0xa2/0x1f0 [ib_ipoib]
      ipoib_start_xmit+0xa98/0x19e0 [ib_ipoib]
      dev_hard_start_xmit+0x159/0x8d0
      sch_direct_xmit+0x226/0xb40
      __dev_queue_xmit+0x1d63/0x2950
      neigh_update+0x889/0x1770
      arp_process+0xc47/0x21f0
      arp_rcv+0x462/0x760
      __netif_receive_skb_core+0x1546/0x2da0
      netif_receive_skb_internal+0xf2/0x590
      napi_gro_receive+0x28e/0x390
      ipoib_ib_handle_rx_wc_rss+0x873/0x1b60 [ib_ipoib]
      ipoib_rx_poll_rss+0x17d/0x320 [ib_ipoib]
      net_rx_action+0x427/0xe30
      __do_softirq+0x28e/0xc42
    
     Freed by task 26680:
      __kasan_slab_free+0x11d/0x160
      kfree+0xf5/0x360
      ipoib_flush_paths+0x532/0x9d0 [ib_ipoib]
      ipoib_set_mode_rss+0x1ad/0x560 [ib_ipoib]
      set_mode+0xc8/0x150 [ib_ipoib]
      kernfs_fop_write+0x279/0x440
      __vfs_write+0xd8/0x5c0
      vfs_write+0x15e/0x470
      ksys_write+0xb8/0x180
      do_syscall_64+0x9b/0x420
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
     The buggy address belongs to the object at ffff88034c30bcc8
                    which belongs to the cache kmalloc-512 of size 512
     The buggy address is located 8 bytes inside of
                    512-byte region [ffff88034c30bcc8, ffff88034c30bec8)
     The buggy address belongs to the page:
    
    The following race between change mode and xmit flow is the reason for
    this use-after-free:
    
    Change mode     Send packet 1 to GID XX      Send packet 2 to GID XX
         |                    |                             |
       start                  |                             |
         |                    |                             |
         |                    |                             |
         |         Create new path for GID XX               |
         |           and update neigh path                  |
         |                    |                             |
         |                    |                             |
         |                    |                             |
     flush_paths              |                             |
                              |                             |
                   queue_work(cm.start_task)                |
                              |                 Path for GID XX not found
                              |                      create new path
                              |
                              |
                   start_task runs with old
                        released path
    
    There is no locking to protect the lifetime of the path through the
    ipoib_cm_tx struct, so delete it entirely and always use the newly looked
    up path under the priv->lock.
    
    Fixes: 546481c2816e ("IB/ipoib: Fix memory corruption in ipoib cm mode connect flow")
    Signed-off-by: Feras Daoud <ferasda@mellanox.com>
    Reviewed-by: Erez Shitrit <erezsh@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 425784aa5b029eeb80498c73a68f62c3ad1d3b3f
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Thu Jan 24 14:33:12 2019 +0200

    IB/uverbs: Fix OOPs upon device disassociation
    
    The async_file might be freed before the disassociation has been ended,
    causing qp shutdown to use after free on it.
    
    Since uverbs_destroy_ufile_hw is not a fence, it returns if a
    disassociation is ongoing in another thread. It has to be written this way
    to avoid deadlock. However this means that the ufile FD close cannot
    destroy anything that may still be used by an active kref, such as the the
    async_file.
    
    To fix that move the kref_put() to be in ib_uverbs_release_file().
    
     BUG: unable to handle kernel paging request at ffffffffba682787
     PGD bc80e067 P4D bc80e067 PUD bc80f063 PMD 1313df163 PTE 80000000bc682061
     Oops: 0003 [#1] SMP PTI
     CPU: 1 PID: 32410 Comm: bash Tainted: G           OE 4.20.0-rc6+ #3
     Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
     RIP: 0010:__pv_queued_spin_lock_slowpath+0x1b3/0x2a0
     Code: 98 83 e2 60 49 89 df 48 8b 04 c5 80 18 72 ba 48 8d
                    ba 80 32 02 00 ba 00 80 00 00 4c 8d 65 14 41 bd 01 00 00 00 48 01 c7 85
                    d2 <48> 89 2f 48 89 fb 74 14 8b 45 08 85 c0 75 42 84 d2 74 6b f3 90 83
     RSP: 0018:ffffc1bbc064fb58 EFLAGS: 00010006
     RAX: ffffffffba65f4e7 RBX: ffff9f209c656c00 RCX: 0000000000000001
     RDX: 0000000000008000 RSI: 0000000000000000 RDI: ffffffffba682787
     RBP: ffff9f217bb23280 R08: 0000000000000001 R09: 0000000000000000
     R10: ffff9f209d2c7800 R11: ffffffffffffffe8 R12: ffff9f217bb23294
     R13: 0000000000000001 R14: 0000000000000000 R15: ffff9f209c656c00
     FS:  00007fac55aad740(0000) GS:ffff9f217bb00000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: ffffffffba682787 CR3: 000000012f8e0000 CR4: 00000000000006e0
     Call Trace:
      _raw_spin_lock_irq+0x27/0x30
      ib_uverbs_release_uevent+0x1e/0xa0 [ib_uverbs]
      uverbs_free_qp+0x7e/0x90 [ib_uverbs]
      destroy_hw_idr_uobject+0x1c/0x50 [ib_uverbs]
      uverbs_destroy_uobject+0x2e/0x180 [ib_uverbs]
      __uverbs_cleanup_ufile+0x73/0x90 [ib_uverbs]
      uverbs_destroy_ufile_hw+0x5d/0x120 [ib_uverbs]
      ib_uverbs_remove_one+0xea/0x240 [ib_uverbs]
      ib_unregister_device+0xfb/0x200 [ib_core]
      mlx5_ib_remove+0x51/0xe0 [mlx5_ib]
      mlx5_remove_device+0xc1/0xd0 [mlx5_core]
      mlx5_unregister_device+0x3d/0xb0 [mlx5_core]
      remove_one+0x2a/0x90 [mlx5_core]
      pci_device_remove+0x3b/0xc0
      device_release_driver_internal+0x16d/0x240
      unbind_store+0xb2/0x100
      kernfs_fop_write+0x102/0x180
      __vfs_write+0x36/0x1a0
      ? __alloc_fd+0xa9/0x170
      ? set_close_on_exec+0x49/0x70
      vfs_write+0xad/0x1a0
      ksys_write+0x52/0xc0
      do_syscall_64+0x5b/0x180
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7fac551aac60
    
    Cc: <stable@vger.kernel.org> # 4.2
    Fixes: 036b10635739 ("IB/uverbs: Enable device removal when there are active user space applications")
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 63530aba7826a0f8e129874df9c4d264f9db3f9e
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jan 22 10:40:59 2019 -0800

    ax25: fix possible use-after-free
    
    syzbot found that ax25 routes where not properly protected
    against concurrent use [1].
    
    In this particular report the bug happened while
    copying ax25->digipeat.
    
    Fix this problem by making sure we call ax25_get_route()
    while ax25_route_lock is held, so that no modification
    could happen while using the route.
    
    The current two ax25_get_route() callers do not sleep,
    so this change should be fine.
    
    Once we do that, ax25_get_route() no longer needs to
    grab a reference on the found route.
    
    [1]
    ax25_connect(): syz-executor0 uses autobind, please contact jreuter@yaina.de
    BUG: KASAN: use-after-free in memcpy include/linux/string.h:352 [inline]
    BUG: KASAN: use-after-free in kmemdup+0x42/0x60 mm/util.c:113
    Read of size 66 at addr ffff888066641a80 by task syz-executor2/531
    
    ax25_connect(): syz-executor0 uses autobind, please contact jreuter@yaina.de
    CPU: 1 PID: 531 Comm: syz-executor2 Not tainted 5.0.0-rc2+ #10
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1db/0x2d0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     check_memory_region_inline mm/kasan/generic.c:185 [inline]
     check_memory_region+0x123/0x190 mm/kasan/generic.c:191
     memcpy+0x24/0x50 mm/kasan/common.c:130
     memcpy include/linux/string.h:352 [inline]
     kmemdup+0x42/0x60 mm/util.c:113
     kmemdup include/linux/string.h:425 [inline]
     ax25_rt_autobind+0x25d/0x750 net/ax25/ax25_route.c:424
     ax25_connect.cold+0x30/0xa4 net/ax25/af_ax25.c:1224
     __sys_connect+0x357/0x490 net/socket.c:1664
     __do_sys_connect net/socket.c:1675 [inline]
     __se_sys_connect net/socket.c:1672 [inline]
     __x64_sys_connect+0x73/0xb0 net/socket.c:1672
     do_syscall_64+0x1a3/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x458099
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f870ee22c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002a
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000458099
    RDX: 0000000000000048 RSI: 0000000020000080 RDI: 0000000000000005
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    ax25_connect(): syz-executor4 uses autobind, please contact jreuter@yaina.de
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f870ee236d4
    R13: 00000000004be48e R14: 00000000004ce9a8 R15: 00000000ffffffff
    
    Allocated by task 526:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_kmalloc mm/kasan/common.c:496 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:469
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:504
    ax25_connect(): syz-executor5 uses autobind, please contact jreuter@yaina.de
     kmem_cache_alloc_trace+0x151/0x760 mm/slab.c:3609
     kmalloc include/linux/slab.h:545 [inline]
     ax25_rt_add net/ax25/ax25_route.c:95 [inline]
     ax25_rt_ioctl+0x3b9/0x1270 net/ax25/ax25_route.c:233
     ax25_ioctl+0x322/0x10b0 net/ax25/af_ax25.c:1763
     sock_do_ioctl+0xe2/0x400 net/socket.c:950
     sock_ioctl+0x32f/0x6c0 net/socket.c:1074
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0x107b/0x17d0 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0x1a3/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    ax25_connect(): syz-executor5 uses autobind, please contact jreuter@yaina.de
    Freed by task 550:
     save_stack+0x45/0xd0 mm/kasan/common.c:73
     set_track mm/kasan/common.c:85 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:458
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:466
     __cache_free mm/slab.c:3487 [inline]
     kfree+0xcf/0x230 mm/slab.c:3806
     ax25_rt_add net/ax25/ax25_route.c:92 [inline]
     ax25_rt_ioctl+0x304/0x1270 net/ax25/ax25_route.c:233
     ax25_ioctl+0x322/0x10b0 net/ax25/af_ax25.c:1763
     sock_do_ioctl+0xe2/0x400 net/socket.c:950
     sock_ioctl+0x32f/0x6c0 net/socket.c:1074
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0x107b/0x17d0 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0x1a3/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff888066641a80
     which belongs to the cache kmalloc-96 of size 96
    The buggy address is located 0 bytes inside of
     96-byte region [ffff888066641a80, ffff888066641ae0)
    The buggy address belongs to the page:
    page:ffffea0001999040 count:1 mapcount:0 mapping:ffff88812c3f04c0 index:0x0
    flags: 0x1fffc0000000200(slab)
    ax25_connect(): syz-executor4 uses autobind, please contact jreuter@yaina.de
    raw: 01fffc0000000200 ffffea0001817948 ffffea0002341dc8 ffff88812c3f04c0
    raw: 0000000000000000 ffff888066641000 0000000100000020 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff888066641980: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
     ffff888066641a00: 00 00 00 00 00 00 00 00 02 fc fc fc fc fc fc fc
    >ffff888066641a80: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
                       ^
     ffff888066641b00: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
     ffff888066641b80: 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc fc
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77f8269606bf95fcb232ee86f6da80886f1dfae8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Jan 16 13:33:22 2019 +0800

    ipmi: fix use-after-free of user->release_barrier.rda
    
    When we do the following test, we got oops in ipmi_msghandler driver
    while((1))
    do
            service ipmievd restart & service ipmievd restart
    done
    
    ---------------------------------------------------------------
    [  294.230186] Unable to handle kernel paging request at virtual address 0000803fea6ea008
    [  294.230188] Mem abort info:
    [  294.230190]   ESR = 0x96000004
    [  294.230191]   Exception class = DABT (current EL), IL = 32 bits
    [  294.230193]   SET = 0, FnV = 0
    [  294.230194]   EA = 0, S1PTW = 0
    [  294.230195] Data abort info:
    [  294.230196]   ISV = 0, ISS = 0x00000004
    [  294.230197]   CM = 0, WnR = 0
    [  294.230199] user pgtable: 4k pages, 48-bit VAs, pgdp = 00000000a1c1b75a
    [  294.230201] [0000803fea6ea008] pgd=0000000000000000
    [  294.230204] Internal error: Oops: 96000004 [#1] SMP
    [  294.235211] Modules linked in: nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm iw_cm dm_mirror dm_region_hash dm_log dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ghash_ce sha2_ce ses sha256_arm64 sha1_ce hibmc_drm hisi_sas_v2_hw enclosure sg hisi_sas_main sbsa_gwdt ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe ipmi_si mdio hns_dsaf ipmi_devintf ipmi_msghandler hns_enet_drv hns_mdio
    [  294.277745] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Not tainted 5.0.0-rc2+ #113
    [  294.285511] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017
    [  294.292835] pstate: 80000005 (Nzcv daif -PAN -UAO)
    [  294.297695] pc : __srcu_read_lock+0x38/0x58
    [  294.301940] lr : acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]
    [  294.307853] sp : ffff00001001bc80
    [  294.311208] x29: ffff00001001bc80 x28: ffff0000117e5000
    [  294.316594] x27: 0000000000000000 x26: dead000000000100
    [  294.321980] x25: dead000000000200 x24: ffff803f6bd06800
    [  294.327366] x23: 0000000000000000 x22: 0000000000000000
    [  294.332752] x21: ffff00001001bd04 x20: ffff80df33d19018
    [  294.338137] x19: ffff80df33d19018 x18: 0000000000000000
    [  294.343523] x17: 0000000000000000 x16: 0000000000000000
    [  294.348908] x15: 0000000000000000 x14: 0000000000000002
    [  294.354293] x13: 0000000000000000 x12: 0000000000000000
    [  294.359679] x11: 0000000000000000 x10: 0000000000100000
    [  294.365065] x9 : 0000000000000000 x8 : 0000000000000004
    [  294.370451] x7 : 0000000000000000 x6 : ffff80df34558678
    [  294.375836] x5 : 000000000000000c x4 : 0000000000000000
    [  294.381221] x3 : 0000000000000001 x2 : 0000803fea6ea000
    [  294.386607] x1 : 0000803fea6ea008 x0 : 0000000000000001
    [  294.391994] Process swapper/3 (pid: 0, stack limit = 0x0000000083087293)
    [  294.398791] Call trace:
    [  294.401266]  __srcu_read_lock+0x38/0x58
    [  294.405154]  acquire_ipmi_user+0x2c/0x70 [ipmi_msghandler]
    [  294.410716]  deliver_response+0x80/0xf8 [ipmi_msghandler]
    [  294.416189]  deliver_local_response+0x28/0x68 [ipmi_msghandler]
    [  294.422193]  handle_one_recv_msg+0x158/0xcf8 [ipmi_msghandler]
    [  294.432050]  handle_new_recv_msgs+0xc0/0x210 [ipmi_msghandler]
    [  294.441984]  smi_recv_tasklet+0x8c/0x158 [ipmi_msghandler]
    [  294.451618]  tasklet_action_common.isra.5+0x88/0x138
    [  294.460661]  tasklet_action+0x2c/0x38
    [  294.468191]  __do_softirq+0x120/0x2f8
    [  294.475561]  irq_exit+0x134/0x140
    [  294.482445]  __handle_domain_irq+0x6c/0xc0
    [  294.489954]  gic_handle_irq+0xb8/0x178
    [  294.497037]  el1_irq+0xb0/0x140
    [  294.503381]  arch_cpu_idle+0x34/0x1a8
    [  294.510096]  do_idle+0x1d4/0x290
    [  294.516322]  cpu_startup_entry+0x28/0x30
    [  294.523230]  secondary_start_kernel+0x184/0x1d0
    [  294.530657] Code: d538d082 d2800023 8b010c81 8b020021 (c85f7c25)
    [  294.539746] ---[ end trace 8a7a880dee570b29 ]---
    [  294.547341] Kernel panic - not syncing: Fatal exception in interrupt
    [  294.556837] SMP: stopping secondary CPUs
    [  294.563996] Kernel Offset: disabled
    [  294.570515] CPU features: 0x002,21006008
    [  294.577638] Memory Limit: none
    [  294.587178] Starting crashdump kernel...
    [  294.594314] Bye!
    
    Because the user->release_barrier.rda is freed in ipmi_destroy_user(), but
    the refcount is not zero, when acquire_ipmi_user() uses user->release_barrier.rda
    in __srcu_read_lock(), it causes oops.
    Fix this by calling cleanup_srcu_struct() when the refcount is zero.
    
    Fixes: e86ee2d44b44 ("ipmi: Rework locking and shutdown for hot remove")
    Cc: stable@vger.kernel.org # 4.18
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit 479d6b39b9e0d2de648ebf146f23a1e40962068f
Author: Fred Klassen <fklassen@appneta.com>
Date:   Sat Jan 19 14:28:18 2019 -0800

    ipmi: Prevent use-after-free in deliver_response
    
    Some IPMI modules (e.g. ibmpex_msg_handler()) will have ipmi_usr_hdlr
    handlers that call ipmi_free_recv_msg() directly. This will essentially
    kfree(msg), leading to use-after-free.
    
    This does not happen in the ipmi_devintf module, which will queue the
    message and run ipmi_free_recv_msg() later.
    
    BUG: KASAN: use-after-free in deliver_response+0x12f/0x1b0
    Read of size 8 at addr ffff888a7bf20018 by task ksoftirqd/3/27
    CPU: 3 PID: 27 Comm: ksoftirqd/3 Tainted: G           O      4.19.11-amd64-ani99-debug #12.0.1.601133+pv
    Hardware name: AppNeta r1000/X11SPW-TF, BIOS 2.1a-AP 09/17/2018
    Call Trace:
    dump_stack+0x92/0xeb
    print_address_description+0x73/0x290
    kasan_report+0x258/0x380
    deliver_response+0x12f/0x1b0
    ? ipmi_free_recv_msg+0x50/0x50
    deliver_local_response+0xe/0x50
    handle_one_recv_msg+0x37a/0x21d0
    handle_new_recv_msgs+0x1ce/0x440
    ...
    
    Allocated by task 9885:
    kasan_kmalloc+0xa0/0xd0
    kmem_cache_alloc_trace+0x116/0x290
    ipmi_alloc_recv_msg+0x28/0x70
    i_ipmi_request+0xb4a/0x1640
    ipmi_request_settime+0x1b8/0x1e0
    ...
    
    Freed by task 27:
    __kasan_slab_free+0x12e/0x180
    kfree+0xe9/0x280
    deliver_response+0x122/0x1b0
    deliver_local_response+0xe/0x50
    handle_one_recv_msg+0x37a/0x21d0
    handle_new_recv_msgs+0x1ce/0x440
    tasklet_action_common.isra.19+0xc4/0x250
    __do_softirq+0x11f/0x51f
    
    Fixes: e86ee2d44b44 ("ipmi: Rework locking and shutdown for hot remove")
    Cc: stable@vger.kernel.org # 4.18
    Signed-off-by: Fred Klassen <fklassen@appneta.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit 40d883b091758472c79b81fa1c0e0347e24a9cff
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Jan 22 18:10:51 2019 +0800

    scsi: tcmu: fix use after free
    
    Fixes: a94a2572b977 ("scsi: tcmu: avoid cmd/qfull timers updated whenever a new cmd comes")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Mike Christie <mchristi@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit c41f59884be5cca293ed61f3d64637dbba3a6381
Author: Ewan D. Milne <emilne@redhat.com>
Date:   Thu Jan 17 11:14:45 2019 -0500

    scsi: lpfc: nvmet: avoid hang / use-after-free when destroying targetport
    
    We cannot wait on a completion object in the lpfc_nvme_targetport structure
    in the _destroy_targetport() code path because the NVMe/fc transport will
    free that structure immediately after the .targetport_delete() callback.
    This results in a use-after-free, and a hang if slub_debug=FZPU is enabled.
    
    Fix this by putting the completion on the stack.
    
    Signed-off-by: Ewan D. Milne <emilne@redhat.com>
    Acked-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 7961cba6f7d8215fa632df3d220e5154bb825249
Author: Ewan D. Milne <emilne@redhat.com>
Date:   Thu Jan 17 11:14:44 2019 -0500

    scsi: lpfc: nvme: avoid hang / use-after-free when destroying localport
    
    We cannot wait on a completion object in the lpfc_nvme_lport structure in
    the _destroy_localport() code path because the NVMe/fc transport will free
    that structure immediately after the .localport_delete() callback.  This
    results in a use-after-free, and a hang if slub_debug=FZPU is enabled.
    
    Fix this by putting the completion on the stack.
    
    Signed-off-by: Ewan D. Milne <emilne@redhat.com>
    Acked-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 6c57f0458022298e4da1729c67bd33ce41c14e7a
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Thu Jan 17 15:34:38 2019 +0000

    net: Fix usage of pskb_trim_rcsum
    
    In certain cases, pskb_trim_rcsum() may change skb pointers.
    Reinitialize header pointers afterwards to avoid potential
    use-after-frees. Add a note in the documentation of
    pskb_trim_rcsum(). Found by KASAN.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf52572ebbd7189a1966c2b5fc34b97078cd1dce
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jan 14 14:28:49 2019 +0100

    netfilter: nft_compat: make lists per netns
    
    There are two problems with nft_compat since the netlink config
    plane uses a per-netns mutex:
    
    1. Concurrent add/del accesses to the same list
    2. accesses to a list element after it has been free'd already.
    
    This patch fixes the first problem.
    
    Freeing occurs from a work queue, after transaction mutexes have been
    released, i.e., it still possible for a new transaction (even from
    same net ns) to find the to-be-deleted expression in the list.
    
    The ->destroy functions are not allowed to have any such side effects,
    i.e. the list_del() in the destroy function is not allowed.
    
    This part of the problem is solved in the next patch.
    I tried to make this work by serializing list access via mutex
    and by moving list_del() to a deactivate callback, but
    Taehee spotted following race on this approach:
    
      NET #0                          NET #1
       >select_ops()
       ->init()
                                       ->select_ops()
       ->deactivate()
       ->destroy()
          nft_xt_put()
           kfree_rcu(xt, rcu_head);
                                       ->init() <-- use-after-free occurred.
    
    Unfortunately, we can't increment reference count in
    select_ops(), because we can't undo the refcount increase in
    case a different expression fails in the same batch.
    
    (The destroy hook will only be called in case the expression
     was initialized successfully).
    
    Fixes: f102d66b335a ("netfilter: nf_tables: use dedicated mutex to guard transactions")
    Reported-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit aed13f2e00ce278f039b76e7ac84d419aff48ef6
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jan 16 11:23:33 2019 +0100

    net: dsa: lantiq_gswip: fix use-after-free on failed probe
    
    Make sure to disable and deregister the switch on late probe errors to
    avoid use-after-free when the device-resource-managed switch is freed.
    
    Fixes: 14fceff4771e ("net: dsa: Add Lantiq / Intel DSA driver for vrx200")
    Cc: stable <stable@vger.kernel.org>     # 4.20
    Cc: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f6bab199315b70fd83fe3ee0947bc84c7a35f3d4
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Wed Jan 9 17:09:42 2019 +0100

    sched: Avoid dereferencing skb pointer after child enqueue
    
    Parent qdiscs may dereference the pointer to the enqueued skb after
    enqueue. However, both CAKE and TBF call consume_skb() on the original skb
    when splitting GSO packets, leading to a potential use-after-free in the
    parent. Fix this by avoiding dereferencing the skb pointer after enqueueing
    to the child.
    
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 09ac6a817bd687e7f5dac00470262efdd72f9319
Author: Curtis Malainey <cujomalainey@chromium.org>
Date:   Thu Jan 10 16:21:04 2019 -0800

    ASoC: soc-core: fix init platform memory handling
    
    snd_soc_init_platform initializes pointers to snd_soc_dai_link which is
    statically allocated and it does this by devm_kzalloc. In the event of
    an EPROBE_DEFER the memory will be freed and the pointers are left
    dangling. snd_soc_init_platform sees the dangling pointers and assumes
    they are pointing to initialized memory and does not reallocate them on
    the second probe attempt which results in a use after free bug since
    devm has freed the memory from the first probe attempt.
    
    Since the intention for snd_soc_dai_link->platform is that it can be set
    statically by the machine driver we need to respect the pointer in the
    event we did not set it but still catch dangling pointers. The solution
    is to add a flag to track whether the pointer was dynamically allocated
    or not.
    
    Signed-off-by: Curtis Malainey <cujomalainey@chromium.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 7fbe078c37aba3088359c9256c1a1d0c3e39ee81
Author: Zha Bin <zhabin@linux.alibaba.com>
Date:   Tue Jan 8 16:07:03 2019 +0800

    vhost/vsock: fix vhost vsock cid hashing inconsistent
    
    The vsock core only supports 32bit CID, but the Virtio-vsock spec define
    CID (dst_cid and src_cid) as u64 and the upper 32bits is reserved as
    zero. This inconsistency causes one bug in vhost vsock driver. The
    scenarios is:
    
      0. A hash table (vhost_vsock_hash) is used to map an CID to a vsock
      object. And hash_min() is used to compute the hash key. hash_min() is
      defined as:
      (sizeof(val) <= 4 ? hash_32(val, bits) : hash_long(val, bits)).
      That means the hash algorithm has dependency on the size of macro
      argument 'val'.
      0. In function vhost_vsock_set_cid(), a 64bit CID is passed to
      hash_min() to compute the hash key when inserting a vsock object into
      the hash table.
      0. In function vhost_vsock_get(), a 32bit CID is passed to hash_min()
      to compute the hash key when looking up a vsock for an CID.
    
    Because the different size of the CID, hash_min() returns different hash
    key, thus fails to look up the vsock object for an CID.
    
    To fix this bug, we keep CID as u64 in the IOCTLs and virtio message
    headers, but explicitly convert u64 to u32 when deal with the hash table
    and vsock core.
    
    Fixes: 834e772c8db0 ("vhost/vsock: fix use-after-free in network stack callers")
    Link: https://github.com/stefanha/virtio/blob/vsock/trunk/content.tex
    Signed-off-by: Zha Bin <zhabin@linux.alibaba.com>
    Reviewed-by: Liu Jiang <gerry@linux.alibaba.com>
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eceae147246749c6dbaeefda802b30f804a3c54c
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jan 10 19:53:41 2019 -0500

    drm/dp_mst: Start tracking per-port VCPI allocations
    
    There has been a TODO waiting for quite a long time in
    drm_dp_mst_topology.c:
    
            /* We cannot rely on port->vcpi.num_slots to update
             * topology_state->avail_slots as the port may not exist if the parent
             * branch device was unplugged. This should be fixed by tracking
             * per-port slot allocation in drm_dp_mst_topology_state instead of
             * depending on the caller to tell us how many slots to release.
             */
    
    That's not the only reason we should fix this: forcing the driver to
    track the VCPI allocations throughout a state's atomic check is
    error prone, because it means that extra care has to be taken with the
    order that drm_dp_atomic_find_vcpi_slots() and
    drm_dp_atomic_release_vcpi_slots() are called in in order to ensure
    idempotency. Currently the only driver actually using these helpers,
    i915, doesn't even do this correctly: multiple ->best_encoder() checks
    with i915's current implementation would not be idempotent and would
    over-allocate VCPI slots, something I learned trying to implement
    fallback retraining in MST.
    
    So: simplify this whole mess, and teach drm_dp_atomic_find_vcpi_slots()
    and drm_dp_atomic_release_vcpi_slots() to track the VCPI allocations for
    each port. This allows us to ensure idempotency without having to rely
    on the driver as much. Additionally: the driver doesn't need to do any
    kind of VCPI slot tracking anymore if it doesn't need it for it's own
    internal state.
    
    Additionally; this adds a new drm_dp_mst_atomic_check() helper which
    must be used by atomic drivers to perform validity checks for the new
    VCPI allocations incurred by a state.
    
    Also: update the documentation and make it more obvious that these
    /must/ be called by /all/ atomic drivers supporting MST.
    
    Changes since v9:
    * Add some missing changes that were requested by danvet that I forgot
      about after I redid all of the kref stuff:
      * Remove unnecessary state changes in intel_dp_mst_atomic_check
      * Cleanup atomic check logic for VCPI allocations - all we need to check in
        compute_config is whether or not this state disables a CRTC, then free
        VCPI based off that
    
    Changes since v8:
     * Fix compile errors, whoops!
    
    Changes since v7:
     - Don't check for mixed stale/valid VCPI allocations, just rely on
     connector registration to stop such erroneous modesets
    
    Changes since v6:
     - Keep a kref to all of the ports we have allocations on. This required
       a good bit of changing to when we call drm_dp_find_vcpi_slots(),
       mainly that we need to ensure that we only redo VCPI allocations on
       actual mode or CRTC changes, not crtc_state->active changes.
       Additionally, we no longer take the registration of the DRM connector
       for each port into account because so long as we have a kref to the
       port in the new or previous atomic state, the connector will stay
       registered.
     - Use the small changes to drm_dp_put_port() to add even more error
       checking to make misusage of the helpers more obvious. I added this
       after having to chase down various use-after-free conditions that
       started popping up from the new helpers so no one else has to
       troubleshoot that.
     - Move some accidental DRM_DEBUG_KMS() calls to DRM_DEBUG_ATOMIC()
     - Update documentation again, note that find/release() should both not be
       called on the same port in a single atomic check phase (but multiple
       calls to one or the other is OK)
    
    Changes since v4:
     - Don't skip the atomic checks for VCPI allocations if no new VCPI
       allocations happen in a state. This makes the next change I'm about
       to list here a lot easier to implement.
     - Don't ignore VCPI allocations on destroyed ports, instead ensure that
       when ports are destroyed and still have VCPI allocations in the
       topology state, the only state changes allowed are releasing said
       ports' VCPI. This prevents a state with a mix of VCPI allocations
       from destroyed ports, and allocations from valid ports.
    
    Changes since v3:
     - Don't release VCPI allocations in the topology state immediately in
       drm_dp_atomic_release_vcpi_slots(), instead mark them as 0 and skip
       over them in drm_dp_mst_duplicate_state(). This makes it so
       drm_dp_atomic_release_vcpi_slots() is still idempotent while also
       throwing warnings if the driver messes up it's book keeping and tries
       to release VCPI slots on a port that doesn't have any pre-existing
       VCPI allocation - danvet
     - Change mst_state/state in some debugging messages to "mst state"
    
    Changes since v2:
     - Use kmemdup() for duplicating MST state - danvet
     - Move port validation out of duplicate state callback - danvet
     - Handle looping through MST topology states in
       drm_dp_mst_atomic_check() so the driver doesn't have to do it
     - Fix documentation in drm_dp_atomic_find_vcpi_slots()
     - Move the atomic check for each individual topology state into it's
       own function, reduces indenting
     - Don't consider "stale" MST ports when calculating the bandwidth
       requirements. This is needed because originally we relied on the
       state duplication functions to prune any stale ports from the new
       state, which would prevent us from incorrectly considering their
       bandwidth requirements alongside legitimate new payloads.
     - Add function references in drm_dp_atomic_release_vcpi_slots() - danvet
     - Annotate atomic VCPI and atomic check functions with __must_check
       - danvet
    
    Changes since v1:
     - Don't use the now-removed ->atomic_check() for private objects hook,
       just give drivers a function to call themselves
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@redhat.com>
    Cc: Jerry Zuo <Jerry.Zuo@amd.com>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Juston Li <juston.li@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190111005343.17443-19-lyude@redhat.com

commit 5e292e7646ef369e6f19c1f83f7795d5eafe3455
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jan 10 19:53:36 2019 -0500

    drm/nouveau: Remove unnecessary VCPI checks in nv50_msto_cleanup()
    
    There is no need to look at the port's VCPI allocation before calling
    drm_dp_mst_deallocate_vcpi(), as we already have msto->disabled to let
    us avoid cleaning up an msto more then once. The DP MST core will never
    call drm_dp_mst_deallocate_vcpi() on it's own, which is presumably what
    these checks are meant to protect against.
    
    More importantly though, we're about to stop clearing mstc->port in the
    next commit, which means if we could potentially hit a use-after-free
    error if we tried to check mstc->port->vcpi here. So to make life easier
    for anyone who bisects this code in the future, use msto->disabled
    instead to check whether or not we need to deallocate VCPI instead.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Ben Skeggs <bskeggs@redhat.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@redhat.com>
    Cc: Jerry Zuo <Jerry.Zuo@amd.com>
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Juston Li <juston.li@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190111005343.17443-14-lyude@redhat.com

commit ebcc0e6b509108b4a67daa4c55809a05ab7f4b77
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jan 10 19:53:29 2019 -0500

    drm/dp_mst: Introduce new refcounting scheme for mstbs and ports
    
    The current way of handling refcounting in the DP MST helpers is really
    confusing and probably just plain wrong because it's been hacked up many
    times over the years without anyone actually going over the code and
    seeing if things could be simplified.
    
    To the best of my understanding, the current scheme works like this:
    drm_dp_mst_port and drm_dp_mst_branch both have a single refcount. When
    this refcount hits 0 for either of the two, they're removed from the
    topology state, but not immediately freed. Both ports and branch devices
    will reinitialize their kref once it's hit 0 before actually destroying
    themselves. The intended purpose behind this is so that we can avoid
    problems like not being able to free a remote payload that might still
    be active, due to us having removed all of the port/branch device
    structures in memory, as per:
    
    commit 91a25e463130 ("drm/dp/mst: deallocate payload on port destruction")
    
    Which may have worked, but then it caused use-after-free errors. Being
    new to MST at the time, I tried fixing it;
    
    commit 263efde31f97 ("drm/dp/mst: Get validated port ref in drm_dp_update_payload_part1()")
    
    But, that was broken: both drm_dp_mst_port and drm_dp_mst_branch structs
    are validated in almost every DP MST helper function. Simply put, this
    means we go through the topology and try to see if the given
    drm_dp_mst_branch or drm_dp_mst_port is still attached to something
    before trying to use it in order to avoid dereferencing freed memory
    (something that has happened a LOT in the past with this library).
    Because of this it doesn't actually matter whether or not we keep keep
    the ports and branches around in memory as that's not enough, because
    any function that validates the branches and ports passed to it will
    still reject them anyway since they're no longer in the topology
    structure. So, use-after-free errors were fixed but payload deallocation
    was completely broken.
    
    Two years later, AMD informed me about this issue and I attempted to
    come up with a temporary fix, pending a long-overdue cleanup of this
    library:
    
    commit c54c7374ff44 ("drm/dp_mst: Skip validating ports during destruction, just ref")
    
    But then that introduced use-after-free errors, so I quickly reverted
    it:
    
    commit 9765635b3075 ("Revert "drm/dp_mst: Skip validating ports during destruction, just ref"")
    
    And in the process, learned that there is just no simple fix for this:
    the design is just broken. Unfortunately, the usage of these helpers are
    quite broken as well. Some drivers like i915 have been smart enough to
    avoid accessing any kind of information from MST port structures, but
    others like nouveau have assumed, understandably so, that
    drm_dp_mst_port structures are normal and can just be accessed at any
    time without worrying about use-after-free errors.
    
    After a lot of discussion, me and Daniel Vetter came up with a better
    idea to replace all of this.
    
    To summarize, since this is documented far more indepth in the
    documentation this patch introduces, we make it so that drm_dp_mst_port
    and drm_dp_mst_branch structures have two different classes of
    refcounts: topology_kref, and malloc_kref. topology_kref corresponds to
    the lifetime of the given drm_dp_mst_port or drm_dp_mst_branch in it's
    given topology. Once it hits zero, any associated connectors are removed
    and the branch or port can no longer be validated. malloc_kref
    corresponds to the lifetime of the memory allocation for the actual
    structure, and will always be non-zero so long as the topology_kref is
    non-zero. This gives us a way to allow callers to hold onto port and
    branch device structures past their topology lifetime, and dramatically
    simplifies the lifetimes of both structures. This also finally fixes the
    port deallocation problem, properly.
    
    Additionally: since this now means that we can keep ports and branch
    devices allocated in memory for however long we need, we no longer need
    a significant amount of the port validation that we currently do.
    
    Additionally, there is one last scenario that this fixes, which couldn't
    have been fixed properly beforehand:
    
    - CPU1 unrefs port from topology (refcount 1->0)
    - CPU2 refs port in topology(refcount 0->1)
    
    Since we now can guarantee memory safety for ports and branches
    as-needed, we also can make our main reference counting functions fix
    this problem by using kref_get_unless_zero() internally so that topology
    refcounts can only ever reach 0 once.
    
    Changes since v4:
    * Change the kernel-figure summary for dp-mst/topology-figure-1.dot a
      bit - danvet
    * Remove figure numbers - danvet
    
    Changes since v3:
    * Remove rebase detritus - danvet
    * Split out purely style changes into separate patches - hwentlan
    
    Changes since v2:
    * Fix commit message - checkpatch
    * s/)-1/) - 1/g - checkpatch
    
    Changes since v1:
    * Remove forward declarations - danvet
    * Move "Branch device and port refcounting" section from documentation
      into kernel-doc comments - danvet
    * Export internal topology lifetime functions into their own section in
      the kernel-docs - danvet
    * s/@/&/g for struct references in kernel-docs - danvet
    * Drop the "when they are no longer being used" bits from the kernel
      docs - danvet
    * Modify diagrams to show how the DRM driver interacts with the topology
      and payloads - danvet
    * Make suggested documentation changes for
      drm_dp_mst_topology_get_mstb() and drm_dp_mst_topology_get_port() -
      danvet
    * Better explain the relationship between malloc refs and topology krefs
      in the documentation for drm_dp_mst_topology_get_port() and
      drm_dp_mst_topology_get_mstb() - danvet
    * Fix "See also" in drm_dp_mst_topology_get_mstb() - danvet
    * Rename drm_dp_mst_topology_get_(port|mstb)() ->
      drm_dp_mst_topology_try_get_(port|mstb)() and
      drm_dp_mst_topology_ref_(port|mstb)() ->
      drm_dp_mst_topology_get_(port|mstb)() - danvet
    * s/should/must in docs - danvet
    * WARN_ON(refcount == 0) in topology_get_(mstb|port) - danvet
    * Move kdocs for mstb/port structs inline - danvet
    * Split drm_dp_get_last_connected_port_and_mstb() changes into their own
      commit - danvet
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@redhat.com>
    Cc: Jerry Zuo <Jerry.Zuo@amd.com>
    Cc: Juston Li <juston.li@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190111005343.17443-7-lyude@redhat.com

commit 51c8d24101c79ffce3e79137e2cee5dfeb956dd7
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Sat Dec 22 10:34:54 2018 +0000

    cw1200: fix missing unlock on error in cw1200_hw_scan()
    
    Add the missing unlock before return from function cw1200_hw_scan()
    in the error handling case.
    
    Fixes: 4f68ef64cd7f ("cw1200: Fix concurrency use-after-free bugs in cw1200_hw_scan()")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit ba422731316dde1e22dcc84b83c7349dc0ce1c3c
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Jan 9 16:51:17 2019 -0800

    mm/mmu_notifier: mm/rmap.c: Fix a mmu_notifier range bug in try_to_unmap_one
    
    The conversion to use a structure for mmu_notifier_invalidate_range_*()
    unintentionally changed the usage in try_to_unmap_one() to init the
    'struct mmu_notifier_range' with vma->vm_start instead of @address,
    i.e. it invalidates the wrong address range.  Revert to the correct
    address range.
    
    Manifests as KVM use-after-free WARNINGs and subsequent "BUG: Bad page
    state in process X" errors when reclaiming from a KVM guest due to KVM
    removing the wrong pages from its own mappings.
    
    Reported-by: leozinho29_eu@hotmail.com
    Reported-by: Mike Galbraith <efault@gmx.de>
    Reported-and-tested-by: Adam Borowski <kilobyte@angband.pl>
    Reviewed-by: Jérôme Glisse <jglisse@redhat.com>
    Reviewed-by: Pankaj gupta <pagupta@redhat.com>
    Cc: Christian König <christian.koenig@amd.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Matthew Wilcox <mawilcox@microsoft.com>
    Cc: Ross Zwisler <zwisler@kernel.org>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Felix Kuehling <felix.kuehling@amd.com>
    Cc: Ralph Campbell <rcampbell@nvidia.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Fixes: ac46d4f3c432 ("mm/mmu_notifier: use structure for invalidate_range_start/end calls v2")
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7c77bf7de1574ac7a31a2b76f4927404307d13e7
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Tue Jan 1 00:11:30 2019 -0800

    f2fs: don't access node/meta inode mapping after iput
    
    This fixes wrong access of address spaces of node and meta inodes after iput.
    
    Fixes: 60aa4d5536ab ("f2fs: fix use-after-free issue when accessing sbi->stat_info")
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit 26d92e951fe0a44ee4aec157cabb65a818cc8151
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Jan 5 23:45:26 2019 -0800

    smc: move unhash as early as possible in smc_release()
    
    In smc_release() we release smc->clcsock before unhash the smc
    sock, but a parallel smc_diag_dump() may be still reading
    smc->clcsock, therefore this could cause a use-after-free as
    reported by syzbot.
    
    Reported-and-tested-by: syzbot+fbd1e5476e4c94c7b34e@syzkaller.appspotmail.com
    Fixes: 51f1de79ad8e ("net/smc: replace sock_put worker by socket refcounting")
    Cc: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reported-by: syzbot+0bf2e01269f1274b4b03@syzkaller.appspotmail.com
    Reported-by: syzbot+e3132895630f957306bc@syzkaller.appspotmail.com
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bb989501abcafa0de5f18b0ec0ec459b5b817908
Author: Yonglong Liu <liuyonglong@huawei.com>
Date:   Fri Jan 4 20:18:11 2019 +0800

    net: hns: Fix use after free identified by SLUB debug
    
    When enable SLUB debug, than remove hns_enet_drv module, SLUB debug will
    identify a use after free bug:
    
    [134.189505] Unable to handle kernel paging request at virtual address
                    006b6b6b6b6b6b6b
    [134.197553] Mem abort info:
    [134.200381]   ESR = 0x96000004
    [134.203487]   Exception class = DABT (current EL), IL = 32 bits
    [134.209497]   SET = 0, FnV = 0
    [134.212596]   EA = 0, S1PTW = 0
    [134.215777] Data abort info:
    [134.218701]   ISV = 0, ISS = 0x00000004
    [134.222596]   CM = 0, WnR = 0
    [134.225606] [006b6b6b6b6b6b6b] address between user and kernel address ranges
    [134.232851] Internal error: Oops: 96000004 [#1] SMP
    [134.237798] CPU: 21 PID: 27834 Comm: rmmod Kdump: loaded Tainted: G
                    OE     4.19.5-1.2.34.aarch64 #1
    [134.247856] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.58 10/24/2018
    [134.255181] pstate: 20000005 (nzCv daif -PAN -UAO)
    [134.260044] pc : hns_ae_put_handle+0x38/0x60
    [134.264372] lr : hns_ae_put_handle+0x24/0x60
    [134.268700] sp : ffff00001be93c50
    [134.272054] x29: ffff00001be93c50 x28: ffff802faaec8040
    [134.277442] x27: 0000000000000000 x26: 0000000000000000
    [134.282830] x25: 0000000056000000 x24: 0000000000000015
    [134.288284] x23: ffff0000096fe098 x22: ffff000001050070
    [134.293671] x21: ffff801fb3c044a0 x20: ffff80afb75ec098
    [134.303287] x19: ffff80afb75ec098 x18: 0000000000000000
    [134.312945] x17: 0000000000000000 x16: 0000000000000000
    [134.322517] x15: 0000000000000002 x14: 0000000000000000
    [134.332030] x13: dead000000000100 x12: ffff7e02bea3c988
    [134.341487] x11: ffff80affbee9e68 x10: 0000000000000000
    [134.351033] x9 : 6fffff8000008101 x8 : 0000000000000000
    [134.360569] x7 : dead000000000100 x6 : ffff000009579748
    [134.370059] x5 : 0000000000210d00 x4 : 0000000000000000
    [134.379550] x3 : 0000000000000001 x2 : 0000000000000000
    [134.388813] x1 : 6b6b6b6b6b6b6b6b x0 : 0000000000000000
    [134.397993] Process rmmod (pid: 27834, stack limit = 0x00000000d474b7fd)
    [134.408498] Call trace:
    [134.414611]  hns_ae_put_handle+0x38/0x60
    [134.422208]  hnae_put_handle+0xd4/0x108
    [134.429563]  hns_nic_dev_remove+0x60/0xc0 [hns_enet_drv]
    [134.438342]  platform_drv_remove+0x2c/0x70
    [134.445958]  device_release_driver_internal+0x174/0x208
    [134.454810]  driver_detach+0x70/0xd8
    [134.461913]  bus_remove_driver+0x64/0xe8
    [134.469396]  driver_unregister+0x34/0x60
    [134.476822]  platform_driver_unregister+0x20/0x30
    [134.485130]  hns_nic_dev_driver_exit+0x14/0x6e4 [hns_enet_drv]
    [134.494634]  __arm64_sys_delete_module+0x238/0x290
    
    struct hnae_handle is a member of struct hnae_vf_cb, so when vf_cb is
    freed, than use hnae_handle will cause use after free panic.
    
    This patch frees vf_cb after hnae_handle used.
    
    Signed-off-by: Yonglong Liu <liuyonglong@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      block/swim3: Fix regression on PowerBook G3
      block/swim3: Fix -EBUSY error when re-opening device after unmount
      block/swim3: Remove dead return statement
      block/amiflop: Don't log error message on invalid ioctl
      gdrom: fix a memory leak bug
      lightnvm: pblk: fix use-after-free bug
      block: sunvdc: remove redundant code
      block: loop: remove redundant code
      bsg: deprecate BIDI support in bsg
      blkcg: remove unused __blkg_release_rcu()
      blkcg: clean up blkg_tryget_closest()
      drbd: Change drbd_request_detach_interruptible's return type to int
      drbd: Avoid Clang warning about pointless switch statment
      drbd: introduce P_ZEROES (REQ_OP_WRITE_ZEROES on the "wire")
      drbd: skip spurious timeout (ping-timeo) when failing promote
      drbd: don't retry connection if peers do not agree on "authentication" settings
      drbd: fix print_st_err()'s prototype to match the definition
      drbd: avoid spurious self-outdating with concurrent disconnect / down
      drbd: do not block when adjusting "disk-options" while IO is frozen
      drbd: fix comment typos
      ...

commits)
      nfs: fixed broken compilation in nfs_callback_up_net()
      nfs: minor typo in nfs4_callback_up_net()
      sunrpc: fix debug message in svc_create_xprt()
      sunrpc: make visible processing error in bc_svc_process()
      sunrpc: remove unused xpo_prep_reply_hdr callback
      sunrpc: remove svc_rdma_bc_class
      sunrpc: remove svc_tcp_bc_class
      sunrpc: remove unused bc_up operation from rpc_xprt_ops
      sunrpc: replace svc_serv->sv_bc_xprt by boolean flag
      sunrpc: use-after-free in svc_process_common()
      sunrpc: use SVC_NET() in svcauth_gss_* functions
      nfsd: drop useless LIST_HEAD
      lockd: Show pid of lockd for remote locks
      NFSD remove OP_CACHEME from 4.2 op_flags
      nfsd: Return EPERM, not EACCES, in some SETATTR cases
      sunrpc: fix cache_head leak due to queued request
      nfsd: clean up indentation, increase indentation in switch statement
      svcrdma: Optimize the logic that selects the R_key to invalidate
      nfsd: fix a warning in __cld_pipe_upcall()
      nfsd4: fix crash on writing v4_end_grace before nfsd startup
      ...

commits)
      rtc: rename core files
      rtc: nvmem: fix possible use after free
      rtc: add i.MX system controller RTC support
      dt-bindings: fsl: scu: add rtc binding
      rtc: pcf2123: Add Microcrystal rv2123
      rtc: class: reimplement devm_rtc_device_register
      rtc: enforce rtc_timer_init private_data type
      rtc: abx80x: Implement RTC_VL_READ,CLR ioctls
      rtc: pcf85363: Add support for NXP pcf85263 rtc
      dt-bindings: rtc: pcf85363: Document pcf85263 real-time clock
      rtc: pcf8523: don't return invalid date when battery is low
      dt-bindings: rtc: use a generic node name for ds1307
      PM: Switch to use %ptR
      m68k/mac: Switch to use %ptR
      Input: hp_sdc_rtc - Switch to use %ptR
      rtc: tegra: Switch to use %ptR
      rtc: s5m: Switch to use %ptR
      rtc: s3c: Switch to use %ptR
      rtc: rx8025: Switch to use %ptR
      rtc: rx6110: Switch to use %ptR
      ...

commits)
      f2fs: sanity check of xattr entry size
      f2fs: fix use-after-free issue when accessing sbi->stat_info
      f2fs: check PageWriteback flag for ordered case
      f2fs: fix validation of the block count in sanity_check_raw_super
      f2fs: fix missing unlock(sbi->gc_mutex)
      f2fs: fix to dirty inode synchronously
      f2fs: clean up structure extent_node
      f2fs: fix block address for __check_sit_bitmap
      f2fs: fix sbi->extent_list corruption issue
      f2fs: clean up checkpoint flow
      f2fs: flush stale issued discard candidates
      f2fs: correct wrong spelling, issing_*
      f2fs: use kvmalloc, if kmalloc is failed
      f2fs: remove redundant comment of unused wio_mutex
      f2fs: fix to reorder set_page_dirty and wait_on_page_writeback
      f2fs: clear PG_writeback if IPU failed
      f2fs: add an ioctl() to explicitly trigger fsck later
      f2fs: avoid frequent costly fsck triggers
      f2fs: fix m_may_create to make OPU DIO write correctly
      f2fs: fix to update new block address correctly for OPU
      ...

commit bba3d2daa8a9bc888902275401f15ef48fcdd378
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Mon Dec 31 00:49:36 2018 +0100

    rtc: nvmem: fix possible use after free
    
    In cas of probe failure, devres may free the memory allocated for
    rtc->nvram before devm_rtc_release_device() is called. This leads to
    rtc_nvram_unregister using it after being freed which may lead to a crash.
    
    This has been shown to happen after commit 461e557b9727 ("rtc: nvmem: use
    devm_nvmem_register()")
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>

commit c433570458e49bccea5c551df628d058b3526289
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Dec 29 13:56:36 2018 -0800

    ax25: fix a use-after-free in ax25_fillin_cb()
    
    There are multiple issues here:
    
    1. After freeing dev->ax25_ptr, we need to set it to NULL otherwise
       we may use a dangling pointer.
    
    2. There is a race between ax25_setsockopt() and device notifier as
       reported by syzbot. Close it by holding RTNL lock.
    
    3. We need to test if dev->ax25_ptr is NULL before using it.
    
    Reported-and-tested-by: syzbot+ae6bb869cbed29b29040@syzkaller.appspotmail.com
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7418e6520f22a2e35815122fa5a53d5bbfa2c10f
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Wed Dec 26 22:09:34 2018 +0800

    isdn: hisax: hfc_pci: Fix a possible concurrency use-after-free bug in HFCPCI_l1hw()
    
    In drivers/isdn/hisax/hfc_pci.c, the functions hfcpci_interrupt() and
    HFCPCI_l1hw() may be concurrently executed.
    
    HFCPCI_l1hw()
      line 1173: if (!cs->tx_skb)
    
    hfcpci_interrupt()
      line 942: spin_lock_irqsave();
      line 1066: dev_kfree_skb_irq(cs->tx_skb);
    
    Thus, a possible concurrency use-after-free bug may occur
    in HFCPCI_l1hw().
    
    To fix these bugs, the calls to spin_lock_irqsave() and
    spin_unlock_irqrestore() are added in HFCPCI_l1hw(), to protect the
    access to cs->tx_skb.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      MAINTAINERS: add another Android binder maintainer
      intel_th: msu: Fix an off-by-one in attribute store
      stm class: Add a reference to the SyS-T document
      stm class: Fix a module refcount leak in policy creation error path
      char: lp: use new parport device model
      char: lp: properly count the lp devices
      char: lp: use first unused lp number while registering
      char: lp: detach the device when parallel port is removed
      char: lp: introduce list to save port number
      bus: qcom: remove duplicated include from qcom-ebi2.c
      VMCI: Use memdup_user() rather than duplicating its implementation
      char/rtc: Use of_node_name_eq for node name comparisons
      misc: mic: fix a DMA pool free failure
      ptp: fix an IS_ERR() vs NULL check
      genwqe: Fix size check
      binder: implement binderfs
      binder: fix use-after-free due to ksys_close() during fdget()
      bus: fsl-mc: remove duplicated include files
      bus: fsl-mc: explicitly define the fsl_mc_command endianness
      misc: ti-st: make array read_ver_cmd static, shrinks object size
      ...

commits)
      USB: serial: option: add Fibocom NL678 series
      cdc-acm: fix abnormal DATA RX issue for Mediatek Preloader.
      usb: r8a66597: Fix a possible concurrency use-after-free bug in r8a66597_endpoint_disable()
      usb: typec: tcpm: Extend the matching rules on PPS APDO selection
      usb: typec: Improve Alt Mode documentation
      usb: musb: dsps: fix runtime pm for peripheral mode
      usb: musb: dsps: fix otg state machine
      USB: serial: pl2303: add ids for Hewlett-Packard HP POS pole displays
      usb: renesas_usbhs: add support for RZ/G2E
      usb: ehci-omap: Fix deferred probe for phy handling
      usb: roles: Add a description for the class to Kconfig
      usb: renesas_usbhs: mark PM functions as __maybe_unused
      usb: core: Remove unnecessary memset()
      usb: host: isp1362-hcd: convert to DEFINE_SHOW_ATTRIBUTE
      phy: qcom-qmp: Expose provided clocks to DT
      dt-bindings: phy-qcom-qmp: Move #clock-cells to child
      phy: qcom-qmp: Utilize fully-specified DT registers
      dt-bindings: phy-qcom-qmp: Fix register underspecification
      phy: ti: fix semicolon.cocci warnings
      phy: dphy: Add configuration helpers
      ...

commit 2f971a8f425545da52ca0e6bee81f5b1ea0ccc5f
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Dec 28 01:24:47 2018 +0100

    netfilter: nf_conncount: move all list iterations under spinlock
    
    Two CPUs may race to remove a connection from the list, the existing
    conn->dead will result in a use-after-free. Use the per-list spinlock to
    protect list iterations.
    
    As all accesses to the list now happen while holding the per-list lock,
    we no longer need to delay free operations with rcu.
    
    Joint work with Florian.
    
    Fixes: 5c789e131cbb9 ("netfilter: nf_conncount: Add list lock and gc worker, and RCU for init tree search")
    Reviewed-by: Shawn Bohrer <sbohrer@cloudflare.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 7f94ffbc4c6a1bdb51d39965e4f2acaa19bd798f
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Fri Dec 28 00:30:50 2018 -0800

    kasan: add hooks implementation for tag-based mode
    
    This commit adds tag-based KASAN specific hooks implementation and
    adjusts common generic and tag-based KASAN ones.
    
    1. When a new slab cache is created, tag-based KASAN rounds up the size of
       the objects in this cache to KASAN_SHADOW_SCALE_SIZE (== 16).
    
    2. On each kmalloc tag-based KASAN generates a random tag, sets the shadow
       memory, that corresponds to this object to this tag, and embeds this
       tag value into the top byte of the returned pointer.
    
    3. On each kfree tag-based KASAN poisons the shadow memory with a random
       tag to allow detection of use-after-free bugs.
    
    The rest of the logic of the hook implementation is very much similar to
    the one provided by generic KASAN. Tag-based KASAN saves allocation and
    free stack metadata to the slab object the same way generic KASAN does.
    
    Link: http://lkml.kernel.org/r/bda78069e3b8422039794050ddcb2d53d053ed41.1544099024.git.andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4d176711ea7a8d4873e7157ac6ab242ade3ba351
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Fri Dec 28 00:30:23 2018 -0800

    kasan: preassign tags to objects with ctors or SLAB_TYPESAFE_BY_RCU
    
    An object constructor can initialize pointers within this objects based on
    the address of the object.  Since the object address might be tagged, we
    need to assign a tag before calling constructor.
    
    The implemented approach is to assign tags to objects with constructors
    when a slab is allocated and call constructors once as usual.  The
    downside is that such object would always have the same tag when it is
    reallocated, so we won't catch use-after-frees on it.
    
    Also pressign tags for objects from SLAB_TYPESAFE_BY_RCU caches, since
    they can be validy accessed after having been freed.
    
    Link: http://lkml.kernel.org/r/f158a8a74a031d66f0a9398a5b0ed453c37ba09a.1544099024.git.andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0116523cfffa62aeb5aa3b85ce7419f3dae0c1b8
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Fri Dec 28 00:29:37 2018 -0800

    kasan, mm: change hooks signatures
    
    Patch series "kasan: add software tag-based mode for arm64", v13.
    
    This patchset adds a new software tag-based mode to KASAN [1].  (Initially
    this mode was called KHWASAN, but it got renamed, see the naming rationale
    at the end of this section).
    
    The plan is to implement HWASan [2] for the kernel with the incentive,
    that it's going to have comparable to KASAN performance, but in the same
    time consume much less memory, trading that off for somewhat imprecise bug
    detection and being supported only for arm64.
    
    The underlying ideas of the approach used by software tag-based KASAN are:
    
    1. By using the Top Byte Ignore (TBI) arm64 CPU feature, we can store
       pointer tags in the top byte of each kernel pointer.
    
    2. Using shadow memory, we can store memory tags for each chunk of kernel
       memory.
    
    3. On each memory allocation, we can generate a random tag, embed it into
       the returned pointer and set the memory tags that correspond to this
       chunk of memory to the same value.
    
    4. By using compiler instrumentation, before each memory access we can add
       a check that the pointer tag matches the tag of the memory that is being
       accessed.
    
    5. On a tag mismatch we report an error.
    
    With this patchset the existing KASAN mode gets renamed to generic KASAN,
    with the word "generic" meaning that the implementation can be supported
    by any architecture as it is purely software.
    
    The new mode this patchset adds is called software tag-based KASAN.  The
    word "tag-based" refers to the fact that this mode uses tags embedded into
    the top byte of kernel pointers and the TBI arm64 CPU feature that allows
    to dereference such pointers.  The word "software" here means that shadow
    memory manipulation and tag checking on pointer dereference is done in
    software.  As it is the only tag-based implementation right now, "software
    tag-based" KASAN is sometimes referred to as simply "tag-based" in this
    patchset.
    
    A potential expansion of this mode is a hardware tag-based mode, which
    would use hardware memory tagging support (announced by Arm [3]) instead
    of compiler instrumentation and manual shadow memory manipulation.
    
    Same as generic KASAN, software tag-based KASAN is strictly a debugging
    feature.
    
    [1] https://www.kernel.org/doc/html/latest/dev-tools/kasan.html
    
    [2] http://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html
    
    [3] https://community.arm.com/processors/b/blog/posts/arm-a-profile-architecture-2018-developments-armv85a
    
    ====== Rationale
    
    On mobile devices generic KASAN's memory usage is significant problem.
    One of the main reasons to have tag-based KASAN is to be able to perform a
    similar set of checks as the generic one does, but with lower memory
    requirements.
    
    Comment from Vishwath Mohan <vishwath@google.com>:
    
    I don't have data on-hand, but anecdotally both ASAN and KASAN have proven
    problematic to enable for environments that don't tolerate the increased
    memory pressure well.  This includes
    
    (a) Low-memory form factors - Wear, TV, Things, lower-tier phones like Go,
    (c) Connected components like Pixel's visual core [1].
    
    These are both places I'd love to have a low(er) memory footprint option at
    my disposal.
    
    Comment from Evgenii Stepanov <eugenis@google.com>:
    
    Looking at a live Android device under load, slab (according to
    /proc/meminfo) + kernel stack take 8-10% available RAM (~350MB).  KASAN's
    overhead of 2x - 3x on top of it is not insignificant.
    
    Not having this overhead enables near-production use - ex.  running
    KASAN/KHWASAN kernel on a personal, daily-use device to catch bugs that do
    not reproduce in test configuration.  These are the ones that often cost
    the most engineering time to track down.
    
    CPU overhead is bad, but generally tolerable.  RAM is critical, in our
    experience.  Once it gets low enough, OOM-killer makes your life
    miserable.
    
    [1] https://www.blog.google/products/pixel/pixel-visual-core-image-processing-and-machine-learning-pixel-2/
    
    ====== Technical details
    
    Software tag-based KASAN mode is implemented in a very similar way to the
    generic one. This patchset essentially does the following:
    
    1. TCR_TBI1 is set to enable Top Byte Ignore.
    
    2. Shadow memory is used (with a different scale, 1:16, so each shadow
       byte corresponds to 16 bytes of kernel memory) to store memory tags.
    
    3. All slab objects are aligned to shadow scale, which is 16 bytes.
    
    4. All pointers returned from the slab allocator are tagged with a random
       tag and the corresponding shadow memory is poisoned with the same value.
    
    5. Compiler instrumentation is used to insert tag checks. Either by
       calling callbacks or by inlining them (CONFIG_KASAN_OUTLINE and
       CONFIG_KASAN_INLINE flags are reused).
    
    6. When a tag mismatch is detected in callback instrumentation mode
       KASAN simply prints a bug report. In case of inline instrumentation,
       clang inserts a brk instruction, and KASAN has it's own brk handler,
       which reports the bug.
    
    7. The memory in between slab objects is marked with a reserved tag, and
       acts as a redzone.
    
    8. When a slab object is freed it's marked with a reserved tag.
    
    Bug detection is imprecise for two reasons:
    
    1. We won't catch some small out-of-bounds accesses, that fall into the
       same shadow cell, as the last byte of a slab object.
    
    2. We only have 1 byte to store tags, which means we have a 1/256
       probability of a tag match for an incorrect access (actually even
       slightly less due to reserved tag values).
    
    Despite that there's a particular type of bugs that tag-based KASAN can
    detect compared to generic KASAN: use-after-free after the object has been
    allocated by someone else.
    
    ====== Testing
    
    Some kernel developers voiced a concern that changing the top byte of
    kernel pointers may lead to subtle bugs that are difficult to discover.
    To address this concern deliberate testing has been performed.
    
    It doesn't seem feasible to do some kind of static checking to find
    potential issues with pointer tagging, so a dynamic approach was taken.
    All pointer comparisons/subtractions have been instrumented in an LLVM
    compiler pass and a kernel module that would print a bug report whenever
    two pointers with different tags are being compared/subtracted (ignoring
    comparisons with NULL pointers and with pointers obtained by casting an
    error code to a pointer type) has been used.  Then the kernel has been
    booted in QEMU and on an Odroid C2 board and syzkaller has been run.
    
    This yielded the following results.
    
    The two places that look interesting are:
    
    is_vmalloc_addr in include/linux/mm.h
    is_kernel_rodata in mm/util.c
    
    Here we compare a pointer with some fixed untagged values to make sure
    that the pointer lies in a particular part of the kernel address space.
    Since tag-based KASAN doesn't add tags to pointers that belong to rodata
    or vmalloc regions, this should work as is.  To make sure debug checks to
    those two functions that check that the result doesn't change whether we
    operate on pointers with or without untagging has been added.
    
    A few other cases that don't look that interesting:
    
    Comparing pointers to achieve unique sorting order of pointee objects
    (e.g. sorting locks addresses before performing a double lock):
    
    tty_ldisc_lock_pair_timeout in drivers/tty/tty_ldisc.c
    pipe_double_lock in fs/pipe.c
    unix_state_double_lock in net/unix/af_unix.c
    lock_two_nondirectories in fs/inode.c
    mutex_lock_double in kernel/events/core.c
    
    ep_cmp_ffd in fs/eventpoll.c
    fsnotify_compare_groups fs/notify/mark.c
    
    Nothing needs to be done here, since the tags embedded into pointers
    don't change, so the sorting order would still be unique.
    
    Checks that a pointer belongs to some particular allocation:
    
    is_sibling_entry in lib/radix-tree.c
    object_is_on_stack in include/linux/sched/task_stack.h
    
    Nothing needs to be done here either, since two pointers can only belong
    to the same allocation if they have the same tag.
    
    Overall, since the kernel boots and works, there are no critical bugs.
    As for the rest, the traditional kernel testing way (use until fails) is
    the only one that looks feasible.
    
    Another point here is that tag-based KASAN is available under a separate
    config option that needs to be deliberately enabled. Even though it might
    be used in a "near-production" environment to find bugs that are not found
    during fuzzing or running tests, it is still a debug tool.
    
    ====== Benchmarks
    
    The following numbers were collected on Odroid C2 board. Both generic and
    tag-based KASAN were used in inline instrumentation mode.
    
    Boot time [1]:
    * ~1.7 sec for clean kernel
    * ~5.0 sec for generic KASAN
    * ~5.0 sec for tag-based KASAN
    
    Network performance [2]:
    * 8.33 Gbits/sec for clean kernel
    * 3.17 Gbits/sec for generic KASAN
    * 2.85 Gbits/sec for tag-based KASAN
    
    Slab memory usage after boot [3]:
    * ~40 kb for clean kernel
    * ~105 kb (~260% overhead) for generic KASAN
    * ~47 kb (~20% overhead) for tag-based KASAN
    
    KASAN memory overhead consists of three main parts:
    1. Increased slab memory usage due to redzones.
    2. Shadow memory (the whole reserved once during boot).
    3. Quaratine (grows gradually until some preset limit; the more the limit,
       the more the chance to detect a use-after-free).
    
    Comparing tag-based vs generic KASAN for each of these points:
    1. 20% vs 260% overhead.
    2. 1/16th vs 1/8th of physical memory.
    3. Tag-based KASAN doesn't require quarantine.
    
    [1] Time before the ext4 driver is initialized.
    [2] Measured as `iperf -s & iperf -c 127.0.0.1 -t 30`.
    [3] Measured as `cat /proc/meminfo | grep Slab`.
    
    ====== Some notes
    
    A few notes:
    
    1. The patchset can be found here:
       https://github.com/xairy/kasan-prototype/tree/khwasan
    
    2. Building requires a recent Clang version (7.0.0 or later).
    
    3. Stack instrumentation is not supported yet and will be added later.
    
    This patch (of 25):
    
    Tag-based KASAN changes the value of the top byte of pointers returned
    from the kernel allocation functions (such as kmalloc).  This patch
    updates KASAN hooks signatures and their usage in SLAB and SLUB code to
    reflect that.
    
    Link: http://lkml.kernel.org/r/aec2b5e3973781ff8a6bb6760f8543643202c451.1544099024.git.andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Reviewed-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d4b09acf924b84bae77cad090a9d108e70b43643
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Dec 24 14:44:52 2018 +0300

    sunrpc: use-after-free in svc_process_common()
    
    if node have NFSv41+ mounts inside several net namespaces
    it can lead to use-after-free in svc_process_common()
    
    svc_process_common()
            /* Setup reply header */
            rqstp->rq_xprt->xpt_ops->xpo_prep_reply_hdr(rqstp); <<< HERE
    
    svc_process_common() can use incorrect rqstp->rq_xprt,
    its caller function bc_svc_process() takes it from serv->sv_bc_xprt.
    The problem is that serv is global structure but sv_bc_xprt
    is assigned per-netnamespace.
    
    According to Trond, the whole "let's set up rqstp->rq_xprt
    for the back channel" is nothing but a giant hack in order
    to work around the fact that svc_process_common() uses it
    to find the xpt_ops, and perform a couple of (meaningless
    for the back channel) tests of xpt_flags.
    
    All we really need in svc_process_common() is to be able to run
    rqstp->rq_xprt->xpt_ops->xpo_prep_reply_hdr()
    
    Bruce J Fields points that this xpo_prep_reply_hdr() call
    is an awfully roundabout way just to do "svc_putnl(resv, 0);"
    in the tcp case.
    
    This patch does not initialiuze rqstp->rq_xprt in bc_svc_process(),
    now it calls svc_process_common() with rqstp->rq_xprt = NULL.
    
    To adjust reply header svc_process_common() just check
    rqstp->rq_prot and calls svc_tcp_prep_reply_hdr() for tcp case.
    
    To handle rqstp->rq_xprt = NULL case in functions called from
    svc_process_common() patch intruduces net namespace pointer
    svc_rqst->rq_bc_net and adjust SVC_NET() definition.
    Some other function was also adopted to properly handle described case.
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Cc: stable@vger.kernel.org
    Fixes: 23c20ecd4475 ("NFS: callback up - users counting cleanup")
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit code"
    
    * tag 'ext4_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/ext4:
      ext4: check for shutdown and r/o file system in ext4_write_inode()
      ext4: force inode writes when nfsd calls commit_metadata()
      ext4: avoid declaring fs inconsistent due to invalid file handles
      ext4: include terminating u32 in size of xattr entries when expanding inodes
      ext4: compare old and new mode before setting update_mode flag
      ext4: fix EXT4_IOC_GROUP_ADD ioctl
      ext4: hard fail dax mount on unsupported devices
      jbd2: update locking documentation for transaction_t
      ext4: remove redundant condition check
      jbd2: clean up indentation issue, replace spaces with tab
      ext4: clean up indentation issues, remove extraneous tabs
      ext4: missing unlock/put_page() in ext4_try_to_write_inline_data()
      ext4: fix possible use after free in ext4_quota_enable
      jbd2: avoid long hold times of j_state_lock while committing a transaction
      ext4: add ext4_sb_bread() to disambiguate ENOMEM cases

commit 60aa4d5536ab7fe32433ca1173bd9d6633851f27
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Dec 26 11:20:29 2018 +0530

    f2fs: fix use-after-free issue when accessing sbi->stat_info
    
    iput() on sbi->node_inode can update sbi->stat_info
    in the below context, if the f2fs_write_checkpoint()
    has failed with error.
    
    f2fs_balance_fs_bg+0x1ac/0x1ec
    f2fs_write_node_pages+0x4c/0x260
    do_writepages+0x80/0xbc
    __writeback_single_inode+0xdc/0x4ac
    writeback_single_inode+0x9c/0x144
    write_inode_now+0xc4/0xec
    iput+0x194/0x22c
    f2fs_put_super+0x11c/0x1e8
    generic_shutdown_super+0x70/0xf4
    kill_block_super+0x2c/0x5c
    kill_f2fs_super+0x44/0x50
    deactivate_locked_super+0x60/0x8c
    deactivate_super+0x68/0x74
    cleanup_mnt+0x40/0x78
    
    Fix this by moving f2fs_destroy_stats() further below iput() in
    both f2fs_put_super() and f2fs_fill_super() paths.
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit d52c499b476b2f82eebecdd5fc4be8318a4e8ef7
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Dec 22 01:39:52 2018 -0600

    lightnvm: pblk: fix use-after-free bug
    
    Remove one of the calls to function bio_put(), so *bio* is only
    freed once.
    
    Notice that bio is being dereferenced in bio_put(), hence leading to
    a use-after-free bug once *bio* has already been freed.
    
    Addresses-Coverity-ID: 1475952 ("Use after free")
    Fixes: 55d8ec35398e ("lightnvm: pblk: support packed metadata")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit cbb49697d5512ce9e61b45ce75d3ee43d7ea5524
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 21 07:47:51 2018 -0800

    ipv6: tunnels: fix two use-after-free
    
    xfrm6_policy_check() might have re-allocated skb->head, we need
    to reload ipv6 header pointer.
    
    sysbot reported :
    
    BUG: KASAN: use-after-free in __ipv6_addr_type+0x302/0x32f net/ipv6/addrconf_core.c:40
    Read of size 4 at addr ffff888191b8cb70 by task syz-executor2/1304
    
    CPU: 0 PID: 1304 Comm: syz-executor2 Not tainted 4.20.0-rc7+ #356
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x244/0x39d lib/dump_stack.c:113
     print_address_description.cold.7+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:432
     __ipv6_addr_type+0x302/0x32f net/ipv6/addrconf_core.c:40
     ipv6_addr_type include/net/ipv6.h:403 [inline]
     ip6_tnl_get_cap+0x27/0x190 net/ipv6/ip6_tunnel.c:727
     ip6_tnl_rcv_ctl+0xdb/0x2a0 net/ipv6/ip6_tunnel.c:757
     vti6_rcv+0x336/0x8f3 net/ipv6/ip6_vti.c:321
     xfrm6_ipcomp_rcv+0x1a5/0x3a0 net/ipv6/xfrm6_protocol.c:132
     ip6_protocol_deliver_rcu+0x372/0x1940 net/ipv6/ip6_input.c:394
     ip6_input_finish+0x84/0x170 net/ipv6/ip6_input.c:434
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:443
    IPVS: ftp: loaded support on port[0] = 21
     ip6_mc_input+0x514/0x11c0 net/ipv6/ip6_input.c:537
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x115/0x640 net/ipv6/ip6_input.c:272
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4973
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5083
     process_backlog+0x24e/0x7a0 net/core/dev.c:5923
     napi_poll net/core/dev.c:6346 [inline]
     net_rx_action+0x7fa/0x19b0 net/core/dev.c:6412
     __do_softirq+0x308/0xb7e kernel/softirq.c:292
     do_softirq_own_stack+0x2a/0x40 arch/x86/entry/entry_64.S:1027
     </IRQ>
     do_softirq.part.14+0x126/0x160 kernel/softirq.c:337
     do_softirq+0x19/0x20 kernel/softirq.c:340
     netif_rx_ni+0x521/0x860 net/core/dev.c:4569
     dev_loopback_xmit+0x287/0x8c0 net/core/dev.c:3576
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_finish_output2+0x193a/0x2930 net/ipv6/ip6_output.c:84
     ip6_fragment+0x2b06/0x3850 net/ipv6/ip6_output.c:727
     ip6_finish_output+0x6b7/0xc50 net/ipv6/ip6_output.c:152
     NF_HOOK_COND include/linux/netfilter.h:278 [inline]
     ip6_output+0x232/0x9d0 net/ipv6/ip6_output.c:171
     dst_output include/net/dst.h:444 [inline]
     ip6_local_out+0xc5/0x1b0 net/ipv6/output_core.c:176
     ip6_send_skb+0xbc/0x340 net/ipv6/ip6_output.c:1727
     ip6_push_pending_frames+0xc5/0xf0 net/ipv6/ip6_output.c:1747
     rawv6_push_pending_frames net/ipv6/raw.c:615 [inline]
     rawv6_sendmsg+0x3a3e/0x4b40 net/ipv6/raw.c:945
    kobject: 'queues' (0000000089e6eea2): kobject_add_internal: parent: 'tunl0', set: '<NULL>'
    kobject: 'queues' (0000000089e6eea2): kobject_uevent_env
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
    kobject: 'queues' (0000000089e6eea2): kobject_uevent_env: filter function caused the event to drop!
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     sock_write_iter+0x35e/0x5c0 net/socket.c:900
     call_write_iter include/linux/fs.h:1857 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6b8/0x9f0 fs/read_write.c:487
    kobject: 'rx-0' (00000000e2d902d9): kobject_add_internal: parent: 'queues', set: 'queues'
    kobject: 'rx-0' (00000000e2d902d9): kobject_uevent_env
     vfs_write+0x1fc/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
    kobject: 'rx-0' (00000000e2d902d9): fill_kobj_path: path = '/devices/virtual/net/tunl0/queues/rx-0'
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
    kobject: 'tx-0' (00000000443b70ac): kobject_add_internal: parent: 'queues', set: 'queues'
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457669
    Code: fd b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b3 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f9bd200bc78 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457669
    RDX: 000000000000058f RSI: 00000000200033c0 RDI: 0000000000000003
    kobject: 'tx-0' (00000000443b70ac): kobject_uevent_env
    RBP: 000000000072bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f9bd200c6d4
    R13: 00000000004c2dcc R14: 00000000004da398 R15: 00000000ffffffff
    
    Allocated by task 1304:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     __do_kmalloc_node mm/slab.c:3684 [inline]
     __kmalloc_node_track_caller+0x50/0x70 mm/slab.c:3698
     __kmalloc_reserve.isra.41+0x41/0xe0 net/core/skbuff.c:140
     __alloc_skb+0x155/0x760 net/core/skbuff.c:208
    kobject: 'tx-0' (00000000443b70ac): fill_kobj_path: path = '/devices/virtual/net/tunl0/queues/tx-0'
     alloc_skb include/linux/skbuff.h:1011 [inline]
     __ip6_append_data.isra.49+0x2f1a/0x3f50 net/ipv6/ip6_output.c:1450
     ip6_append_data+0x1bc/0x2d0 net/ipv6/ip6_output.c:1619
     rawv6_sendmsg+0x15ab/0x4b40 net/ipv6/raw.c:938
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2116
     __sys_sendmsg+0x11d/0x280 net/socket.c:2154
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg net/socket.c:2161 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2161
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    kobject: 'gre0' (00000000cb1b2d7b): kobject_add_internal: parent: 'net', set: 'devices'
    
    Freed by task 1304:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xcf/0x230 mm/slab.c:3817
     skb_free_head+0x93/0xb0 net/core/skbuff.c:553
     pskb_expand_head+0x3b2/0x10d0 net/core/skbuff.c:1498
     __pskb_pull_tail+0x156/0x18a0 net/core/skbuff.c:1896
     pskb_may_pull include/linux/skbuff.h:2188 [inline]
     _decode_session6+0xd11/0x14d0 net/ipv6/xfrm6_policy.c:150
     __xfrm_decode_session+0x71/0x140 net/xfrm/xfrm_policy.c:3272
    kobject: 'gre0' (00000000cb1b2d7b): kobject_uevent_env
     __xfrm_policy_check+0x380/0x2c40 net/xfrm/xfrm_policy.c:3322
     __xfrm_policy_check2 include/net/xfrm.h:1170 [inline]
     xfrm_policy_check include/net/xfrm.h:1175 [inline]
     xfrm6_policy_check include/net/xfrm.h:1185 [inline]
     vti6_rcv+0x4bd/0x8f3 net/ipv6/ip6_vti.c:316
     xfrm6_ipcomp_rcv+0x1a5/0x3a0 net/ipv6/xfrm6_protocol.c:132
     ip6_protocol_deliver_rcu+0x372/0x1940 net/ipv6/ip6_input.c:394
     ip6_input_finish+0x84/0x170 net/ipv6/ip6_input.c:434
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:443
     ip6_mc_input+0x514/0x11c0 net/ipv6/ip6_input.c:537
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x115/0x640 net/ipv6/ip6_input.c:272
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4973
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5083
     process_backlog+0x24e/0x7a0 net/core/dev.c:5923
    kobject: 'gre0' (00000000cb1b2d7b): fill_kobj_path: path = '/devices/virtual/net/gre0'
     napi_poll net/core/dev.c:6346 [inline]
     net_rx_action+0x7fa/0x19b0 net/core/dev.c:6412
     __do_softirq+0x308/0xb7e kernel/softirq.c:292
    
    The buggy address belongs to the object at ffff888191b8cac0
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 176 bytes inside of
     512-byte region [ffff888191b8cac0, ffff888191b8ccc0)
    The buggy address belongs to the page:
    page:ffffea000646e300 count:1 mapcount:0 mapping:ffff8881da800940 index:0x0
    flags: 0x2fffc0000000200(slab)
    raw: 02fffc0000000200 ffffea0006eaaa48 ffffea00065356c8 ffff8881da800940
    raw: 0000000000000000 ffff888191b8c0c0 0000000100000006 0000000000000000
    page dumped because: kasan: bad access detected
    kobject: 'queues' (000000005fd6226e): kobject_add_internal: parent: 'gre0', set: '<NULL>'
    
    Memory state around the buggy address:
     ffff888191b8ca00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff888191b8ca80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    >ffff888191b8cb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                 ^
     ffff888191b8cb80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888191b8cc00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 0d3c703a9d17 ("ipv6: Cleanup IPv6 tunnel receive path")
    Fixes: ed1efb2aefbb ("ipv6: Add support for IPsec virtual tunnel interfaces")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f0c928d878e7d01b613c9ae5c971a6b1e473a938
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 20 15:28:56 2018 -0800

    tcp: fix a race in inet_diag_dump_icsk()
    
    Alexei reported use after frees in inet_diag_dump_icsk() [1]
    
    Because we use refcount_set() when various sockets are setup and
    inserted into ehash, we also need to make sure inet_diag_dump_icsk()
    wont race with the refcount_set() operations.
    
    Jonathan Lemon sent a patch changing net_twsk_hashdance() but
    other spots would need risky changes.
    
    Instead, fix inet_diag_dump_icsk() as this bug came with
    linux-4.10 only.
    
    [1] Quoting Alexei :
    
    First something iterating over sockets finds already freed tw socket:
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 2 PID: 2738 at lib/refcount.c:153 refcount_inc+0x26/0x30
    RIP: 0010:refcount_inc+0x26/0x30
    RSP: 0018:ffffc90004c8fbc0 EFLAGS: 00010282
    RAX: 000000000000002b RBX: 0000000000000000 RCX: 0000000000000000
    RDX: ffff88085ee9d680 RSI: ffff88085ee954c8 RDI: ffff88085ee954c8
    RBP: ffff88010ecbd2c0 R08: 0000000000000000 R09: 000000000000174c
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: 0000000000000000
    R13: ffff8806ba9bf210 R14: ffffffff82304600 R15: ffff88010ecbd328
    FS:  00007f81f5a7d700(0000) GS:ffff88085ee80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f81e2a95000 CR3: 000000069b2eb006 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     inet_diag_dump_icsk+0x2b3/0x4e0 [inet_diag]  // sock_hold(sk); in net/ipv4/inet_diag.c:1002
     ? kmalloc_large_node+0x37/0x70
     ? __kmalloc_node_track_caller+0x1cb/0x260
     ? __alloc_skb+0x72/0x1b0
     ? __kmalloc_reserve.isra.40+0x2e/0x80
     __inet_diag_dump+0x3b/0x80 [inet_diag]
     netlink_dump+0x116/0x2a0
     netlink_recvmsg+0x205/0x3c0
     sock_read_iter+0x89/0xd0
     __vfs_read+0xf7/0x140
     vfs_read+0x8a/0x140
     SyS_read+0x3f/0xa0
     do_syscall_64+0x5a/0x100
    
    then a minute later twsk timer fires and hits two bad refcnts
    for this freed socket:
    
    refcount_t: decrement hit 0; leaking memory.
    WARNING: CPU: 31 PID: 0 at lib/refcount.c:228 refcount_dec+0x2e/0x40
    Modules linked in:
    RIP: 0010:refcount_dec+0x2e/0x40
    RSP: 0018:ffff88085f5c3ea8 EFLAGS: 00010296
    RAX: 000000000000002c RBX: ffff88010ecbd2c0 RCX: 000000000000083f
    RDX: 0000000000000000 RSI: 00000000000000f6 RDI: 000000000000003f
    RBP: ffffc90003c77280 R08: 0000000000000000 R09: 00000000000017d3
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: ffffffff82ad2d80
    R13: ffffffff8182de00 R14: ffff88085f5c3ef8 R15: 0000000000000000
    FS:  0000000000000000(0000) GS:ffff88085f5c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fbe42685250 CR3: 0000000002209001 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     inet_twsk_kill+0x9d/0xc0  // inet_twsk_bind_unhash(tw, hashinfo);
     call_timer_fn+0x29/0x110
     run_timer_softirq+0x36b/0x3a0
    
    refcount_t: underflow; use-after-free.
    WARNING: CPU: 31 PID: 0 at lib/refcount.c:187 refcount_sub_and_test+0x46/0x50
    RIP: 0010:refcount_sub_and_test+0x46/0x50
    RSP: 0018:ffff88085f5c3eb8 EFLAGS: 00010296
    RAX: 0000000000000026 RBX: ffff88010ecbd2c0 RCX: 000000000000083f
    RDX: 0000000000000000 RSI: 00000000000000f6 RDI: 000000000000003f
    RBP: ffff88010ecbd358 R08: 0000000000000000 R09: 000000000000185b
    R10: ffffffff81e7c5a0 R11: 0000000000000000 R12: ffff88010ecbd358
    R13: ffffffff8182de00 R14: ffff88085f5c3ef8 R15: 0000000000000000
    FS:  0000000000000000(0000) GS:ffff88085f5c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fbe42685250 CR3: 0000000002209001 CR4: 00000000003606e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <IRQ>
     inet_twsk_put+0x12/0x20  // inet_twsk_put(tw);
     call_timer_fn+0x29/0x110
     run_timer_softirq+0x36b/0x3a0
    
    Fixes: 67db3e4bfbc9 ("tcp: no longer hold ehash lock while calling tcp_get_info()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Alexei Starovoitov <ast@kernel.org>
    Cc: Jonathan Lemon <jonathan.lemon@gmail.com>
    Acked-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 553a7cca769d551f1317186760631487c47e23bf
Author: Karthikeyan Periyasamy <periyasa@codeaurora.org>
Date:   Thu Dec 20 09:53:17 2018 +0200

    ath10k: fix kernel panic due to use after free
    
    This issue arise in a race condition between ath10k_sta_state() and
    ath10k_htt_fetch_peer_stats(), explained in below scenario
    
    Steps:
    1. In ath10k_sta_state(), arsta->tx_stats get deallocated before peer deletion
       when the station moves from IEEE80211_STA_NONE to IEEE80211_STA_NOTEXIST
       state.
    2. Meanwhile ath10k receive HTT_T2H_MSG_TYPE_PEER_STATS message.
       In ath10k_htt_fetch_peer_stats(), arsta->tx_stats get accessed after
       the peer validation check.
    
    Since arsta->tx_stats get freed before the peer deletion [1].
    ath10k_htt_fetch_peer_stats() ended up in "use after free" situation.
    
    Fixed this issue by moving the arsta->tx_stats free handling after the
    peer deletion. so that ath10k_htt_fetch_peer_stats() will not end up in
    "use after free" situation.
    
    Kernel Panic:
    
    Unable to handle kernel NULL pointer dereference at virtual address 00000286
    pgd = d8754000
    [00000286] *pgd=00000000
    Internal error: Oops: 5 [#1] PREEMPT SMP ARM
    ...
    CPU: 0 PID: 6245 Comm: hostapd Not tainted
    task: dc44cac0 ti: d4a38000 task.ti: d4a38000
    PC is at kmem_cache_alloc+0x7c/0x114
    LR is at ath10k_sta_state+0x190/0xd58 [ath10k_core]
    pc : [<c02bdc50>]    lr : [<bf916b78>]    psr: 20000013
    sp : d4a39b88  ip : 00000000  fp : 00000001
    r10: 00000000  r9 : 1d3bc000  r8 : 00000dc0
    r7 : 000080d0  r6 : d4a38000  r5 : dd401b00  r4 : 00000286
    r3 : 00000000  r2 : d4a39ba0  r1 : 000080d0  r0 : dd401b00
    Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    Control: 10c5787d  Table: 5a75406a  DAC: 00000015
    Process hostapd (pid: 6245, stack limit = 0xd4a38238)
    Stack: (0xd4a39b88 to 0xd4a3a000)
    ...
    [<c02bdc50>] (kmem_cache_alloc) from [<bf916b78>] (ath10k_sta_state+0x190/0xd58 [ath10k_core])
    [<bf916b78>] (ath10k_sta_state [ath10k_core]) from [<bf870d4c>] (sta_info_insert_rcu+0x418/0x61c [mac80211])
    [<bf870d4c>] (sta_info_insert_rcu [mac80211]) from [<bf88634c>] (ieee80211_add_station+0xf0/0x134 [mac80211])
    [<bf88634c>] (ieee80211_add_station [mac80211]) from [<bf83f3c4>] (nl80211_new_station+0x330/0x36c [cfg80211])
    [<bf83f3c4>] (nl80211_new_station [cfg80211]) from [<bf6c4040>] (extack_doit+0x2c/0x74 [compat])
    [<bf6c4040>] (extack_doit [compat]) from [<c05c285c>] (genl_rcv_msg+0x274/0x30c)
    [<c05c285c>] (genl_rcv_msg) from [<c05c1d98>] (netlink_rcv_skb+0x58/0xac)
    [<c05c1d98>] (netlink_rcv_skb) from [<c05c25d4>] (genl_rcv+0x20/0x34)
    [<c05c25d4>] (genl_rcv) from [<c05c1750>] (netlink_unicast+0x11c/0x204)
    [<c05c1750>] (netlink_unicast) from [<c05c1be0>] (netlink_sendmsg+0x30c/0x370)
    [<c05c1be0>] (netlink_sendmsg) from [<c0587e90>] (sock_sendmsg+0x70/0x84)
    [<c0587e90>] (sock_sendmsg) from [<c058970c>] (___sys_sendmsg.part.3+0x188/0x228)
    [<c058970c>] (___sys_sendmsg.part.3) from [<c058a594>] (__sys_sendmsg+0x4c/0x70)
    [<c058a594>] (__sys_sendmsg) from [<c0208c80>] (ret_fast_syscall+0x0/0x44)
    Code: ebfffec1 e1a04000 ea00001b e5953014 (e7940003)
    ath10k_pci 0000:01:00.0: SWBA overrun on vdev 0, skipped old beacon
    
    Hardware tested: QCA9984
    Firmware tested: 10.4-3.6.0.1-00004
    
    Fixes: a904417fc ("ath10k: add extended per sta tx statistics support")
    Signed-off-by: Karthikeyan Periyasamy <periyasa@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 4f68ef64cd7feb1220232bd8f501d8aad340a099
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Dec 14 11:55:21 2018 +0800

    cw1200: Fix concurrency use-after-free bugs in cw1200_hw_scan()
    
    The function cw1200_bss_info_changed() and cw1200_hw_scan() can be
    concurrently executed.
    The two functions both access a possible shared variable "frame.skb".
    
    This shared variable is freed by dev_kfree_skb() in cw1200_upload_beacon(),
    which is called by cw1200_bss_info_changed(). The free operation is
    protected by a mutex lock "priv->conf_mutex" in cw1200_bss_info_changed().
    
    In cw1200_hw_scan(), this shared variable is accessed without the
    protection of the mutex lock "priv->conf_mutex".
    Thus, concurrency use-after-free bugs may occur.
    
    To fix these bugs, the original calls to mutex_lock(&priv->conf_mutex) and
    mutex_unlock(&priv->conf_mutex) are moved to the places, which can
    protect the accesses to the shared variable.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit b61cd7c6f992cca57166d0cabe242c49b93609eb
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Dec 19 06:08:50 2018 +0000

    mlxsw: spectrum_router: Hold a reference on RIF's netdev
    
    Previous patches tried to make RIF deletion more robust and avoid
    use-after-free situations.
    
    As another precaution, hold a reference on a RIF's netdev and release it
    when the RIF is deleted.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ed041919f0d23c109d52cde8da6ddc211c52d67e
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Dec 17 13:20:40 2018 -0800

    RDMA/srpt: Fix a use-after-free in the channel release code
    
    This patch avoids that KASAN sporadically reports the following:
    
    BUG: KASAN: use-after-free in rxe_run_task+0x1e/0x60 [rdma_rxe]
    Read of size 1 at addr ffff88801c50d8f4 by task check/24830
    
    CPU: 4 PID: 24830 Comm: check Not tainted 4.20.0-rc6-dbg+ #3
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
    Call Trace:
     dump_stack+0x86/0xca
     print_address_description+0x71/0x239
     kasan_report.cold.5+0x242/0x301
     __asan_load1+0x47/0x50
     rxe_run_task+0x1e/0x60 [rdma_rxe]
     rxe_post_send+0x4bd/0x8d0 [rdma_rxe]
     srpt_zerolength_write+0xe1/0x160 [ib_srpt]
     srpt_close_ch+0x8b/0xe0 [ib_srpt]
     srpt_set_enabled+0xe7/0x150 [ib_srpt]
     srpt_tpg_enable_store+0xc0/0x100 [ib_srpt]
     configfs_write_file+0x157/0x1d0
     __vfs_write+0xd7/0x3d0
     vfs_write+0x102/0x290
     ksys_write+0xab/0x130
     __x64_sys_write+0x43/0x50
     do_syscall_64+0x71/0x210
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Allocated by task 13856:
     save_stack+0x43/0xd0
     kasan_kmalloc+0xc7/0xe0
     kasan_slab_alloc+0x11/0x20
     kmem_cache_alloc+0x105/0x320
     rxe_alloc+0xff/0x1f0 [rdma_rxe]
     rxe_create_qp+0x9f/0x160 [rdma_rxe]
     ib_create_qp+0xf5/0x690 [ib_core]
     rdma_create_qp+0x6a/0x140 [rdma_cm]
     srpt_cm_req_recv.cold.59+0x1588/0x237b [ib_srpt]
     srpt_rdma_cm_req_recv.isra.35+0x1d5/0x220 [ib_srpt]
     srpt_rdma_cm_handler+0x6f/0x100 [ib_srpt]
     cma_listen_handler+0x59/0x60 [rdma_cm]
     cma_ib_req_handler+0xd5b/0x2570 [rdma_cm]
     cm_process_work+0x2e/0x110 [ib_cm]
     cm_work_handler+0x2aae/0x502b [ib_cm]
     process_one_work+0x481/0x9e0
     worker_thread+0x67/0x5b0
     kthread+0x1cf/0x1f0
     ret_from_fork+0x24/0x30
    
    Freed by task 3440:
     save_stack+0x43/0xd0
     __kasan_slab_free+0x139/0x190
     kasan_slab_free+0xe/0x10
     kmem_cache_free+0xbc/0x330
     rxe_elem_release+0x66/0xe0 [rdma_rxe]
     rxe_destroy_qp+0x3f/0x50 [rdma_rxe]
     ib_destroy_qp+0x140/0x360 [ib_core]
     srpt_release_channel_work+0xdc/0x310 [ib_srpt]
     process_one_work+0x481/0x9e0
     worker_thread+0x67/0x5b0
     kthread+0x1cf/0x1f0
     ret_from_fork+0x24/0x30
    
    Cc: Sergey Gorenko <sergeygo@mellanox.com>
    Cc: Max Gurtovoy <maxg@mellanox.com>
    Cc: Laurence Oberman <loberman@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit dbe3ece1287dafe4113c64ada3113c39f344c64a
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Dec 19 09:13:34 2018 -0700

    dm: don't reuse bio for flushes
    
    DM currently has a statically allocated bio that it uses to issue empty
    flushes. It doesn't submit this bio, it just uses it for maintaining
    state while setting up clones. Multiple users can access this bio at the
    same time. This wasn't previously an issue, even if it was a bit iffy,
    but with the blkg associations it can become one.
    
    We setup the blkg association, then clone bio's and submit, then remove
    the blkg assocation again. But since we can have multiple tasks doing
    this at the same time, against multiple blkg's, then we can either lose
    references to a blkg, or put it twice. The latter causes complaints on
    the percpu ref being <= 0 when released, and can cause use-after-free as
    well. Ming reports that xfstest generic/475 triggers this:
    
    ------------[ cut here ]------------
    percpu ref (blkg_release) <= 0 (0) after switching to atomic
    WARNING: CPU: 13 PID: 0 at lib/percpu-refcount.c:155 percpu_ref_switch_to_atomic_rcu+0x2c9/0x4a0
    
    Switch to just using an on-stack bio for this, and get rid of the
    embedded bio.
    
    Fixes: 5cdf2e3fea5e ("blkcg: associate blkg when associating a device")
    Reported-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 80cd795630d6526ba729a089a435bf74a57af927
Author: Todd Kjos <tkjos@android.com>
Date:   Fri Dec 14 15:58:21 2018 -0800

    binder: fix use-after-free due to ksys_close() during fdget()
    
    44d8047f1d8 ("binder: use standard functions to allocate fds")
    exposed a pre-existing issue in the binder driver.
    
    fdget() is used in ksys_ioctl() as a performance optimization.
    One of the rules associated with fdget() is that ksys_close() must
    not be called between the fdget() and the fdput(). There is a case
    where this requirement is not met in the binder driver which results
    in the reference count dropping to 0 when the device is still in
    use. This can result in use-after-free or other issues.
    
    If userpace has passed a file-descriptor for the binder driver using
    a BINDER_TYPE_FDA object, then kys_close() is called on it when
    handling a binder_ioctl(BC_FREE_BUFFER) command. This violates
    the assumptions for using fdget().
    
    The problem is fixed by deferring the close using task_work_add(). A
    new variant of __close_fd() was created that returns a struct file
    with a reference. The fput() is deferred instead of using ksys_close().
    
    Fixes: 44d8047f1d87a ("binder: use standard functions to allocate fds")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c85400f886e3d41e69966470879f635a2b50084c
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Tue Dec 18 20:04:25 2018 +0800

    usb: r8a66597: Fix a possible concurrency use-after-free bug in r8a66597_endpoint_disable()
    
    The function r8a66597_endpoint_disable() and r8a66597_urb_enqueue() may
    be concurrently executed.
    The two functions both access a possible shared variable "hep->hcpriv".
    
    This shared variable is freed by r8a66597_endpoint_disable() via the
    call path:
    r8a66597_endpoint_disable
      kfree(hep->hcpriv) (line 1995 in Linux-4.19)
    
    This variable is read by r8a66597_urb_enqueue() via the call path:
    r8a66597_urb_enqueue
      spin_lock_irqsave(&r8a66597->lock)
      init_pipe_info
        enable_r8a66597_pipe
          pipe = hep->hcpriv (line 802 in Linux-4.19)
    
    The read operation is protected by a spinlock, but the free operation
    is not protected by this spinlock, thus a concurrency use-after-free bug
    may occur.
    
    To fix this bug, the spin-lock and spin-unlock function calls in
    r8a66597_endpoint_disable() are moved to protect the free operation.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77acd1cd912987ffd62dad6a09275a1fb406f0c2
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Dec 14 12:26:58 2018 -0500

    drm/amd/display: Skip fast cursor updates for fb changes
    
    [Why]
    The behavior of drm_atomic_helper_cleanup_planes differs depending on
    whether the commit was asynchronous or not. When it's called from
    amdgpu_dm_atomic_commit_tail during a typical atomic commit the
    plane state has been swapped so it calls cleanup_fb on the old plane
    state.
    
    However, in the asynchronous commit codepath the call to
    drm_atomic_helper_commit also calls dm_plane_helper_cleanup_fb after
    atomic_async_update has been called. Since the plane state is updated
    in place and has not been swapped the cleanup_fb call affects the new
    plane state.
    
    This results in a use after free for the given sequence:
    
    - Fast update, fb1 pin/ref, fb1 unpin/unref
    - Fast update, fb2 pin/ref, fb2 unpin/unref
    - Slow update, fb1 pin/ref, fb2 unpin/unref
    - Fast update, fb2 pin/ref -> use after free. bug
    
    [How]
    Disallow framebuffer changes in the fast path. Since this includes
    a NULL framebuffer, this means that only framebuffers that have
    been previously pin+ref at least once will be used, preventing a
    use after free.
    
    This has a significant throughput reduction for cursor updates where
    the framebuffer changes. For most desktop usage this isn't a problem,
    but it does introduce performance regressions for two specific IGT
    tests:
    
    - cursor-vs-flip-toggle
    - cursor-vs-flip-varying-size
    
    Fixes: 2cc751931afc ("drm/amd/display: Add fast path for cursor plane updates")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 987d1149be7ddcc1380ff946cf236874421a7e1b
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Dec 17 09:36:19 2018 -0800

    KVM: fix unregistering coalesced mmio zone from wrong bus
    
    If you register a kvm_coalesced_mmio_zone with '.pio = 0' but then
    unregister it with '.pio = 1', KVM_UNREGISTER_COALESCED_MMIO will try to
    unregister it from KVM_PIO_BUS rather than KVM_MMIO_BUS, which is a
    no-op.  But it frees the kvm_coalesced_mmio_dev anyway, causing a
    use-after-free.
    
    Fix it by only unregistering and freeing the zone if the correct value
    of 'pio' is provided.
    
    Reported-by: syzbot+f87f60bb6f13f39b54e3@syzkaller.appspotmail.com
    Fixes: 0804c849f1df ("kvm/x86 : add coalesced pio support")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit a50e5fb8db83c5b57392204c21ea6c5c4ccefde6
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Sat Dec 15 11:03:10 2018 +0200

    mac80211: fix a kernel panic when TXing after TXQ teardown
    
    Recently TXQ teardown was moved earlier in ieee80211_unregister_hw(),
    to avoid a use-after-free of the netdev data. However, interfaces
    aren't fully removed at the point, and cfg80211_shutdown_all_interfaces
    can for example, TX a deauth frame. Move the TXQ teardown to the
    point between cfg80211_shutdown_all_interfaces and the free of
    netdev queues, so we can be sure they are torn down before netdev
    is freed, but after there is no ongoing TX.
    
    Fixes: 77cfaf52eca5 ("mac80211: Run TXQ teardown code before de-registering interfaces")
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit d189dd70e2556181732598956d808ea53cc8774e
Author: Anand Jain <anand.jain@oracle.com>
Date:   Wed Nov 14 13:50:26 2018 +0800

    btrfs: fix use-after-free due to race between replace start and cancel
    
    The device replace cancel thread can race with the replace start thread
    and if fs_info::scrubs_running is not yet set, btrfs_scrub_cancel() will
    fail to stop the scrub thread.
    
    The scrub thread continues with the scrub for replace which then will
    try to write to the target device and which is already freed by the
    cancel thread.
    
    scrub_setup_ctx() warns as tgtdev is NULL.
    
      struct scrub_ctx *scrub_setup_ctx(struct btrfs_device *dev, int is_dev_replace)
      {
      ...
              if (is_dev_replace) {
                      WARN_ON(!fs_info->dev_replace.tgtdev);  <===
                      sctx->pages_per_wr_bio = SCRUB_PAGES_PER_WR_BIO;
                      sctx->wr_tgtdev = fs_info->dev_replace.tgtdev;
                      sctx->flush_all_writes = false;
              }
    
      [ 6724.497655] BTRFS info (device sdb): dev_replace from /dev/sdb (devid 1) to /dev/sdc started
      [ 6753.945017] BTRFS info (device sdb): dev_replace from /dev/sdb (devid 1) to /dev/sdc canceled
      [ 6852.426700] WARNING: CPU: 0 PID: 4494 at fs/btrfs/scrub.c:622 scrub_setup_ctx.isra.19+0x220/0x230 [btrfs]
      ...
      [ 6852.428928] RIP: 0010:scrub_setup_ctx.isra.19+0x220/0x230 [btrfs]
      ...
      [ 6852.432970] Call Trace:
      [ 6852.433202]  btrfs_scrub_dev+0x19b/0x5c0 [btrfs]
      [ 6852.433471]  btrfs_dev_replace_start+0x48c/0x6a0 [btrfs]
      [ 6852.433800]  btrfs_dev_replace_by_ioctl+0x3a/0x60 [btrfs]
      [ 6852.434097]  btrfs_ioctl+0x2476/0x2d20 [btrfs]
      [ 6852.434365]  ? do_sigaction+0x7d/0x1e0
      [ 6852.434623]  do_vfs_ioctl+0xa9/0x6c0
      [ 6852.434865]  ? syscall_trace_enter+0x1c8/0x310
      [ 6852.435124]  ? syscall_trace_enter+0x1c8/0x310
      [ 6852.435387]  ksys_ioctl+0x60/0x90
      [ 6852.435663]  __x64_sys_ioctl+0x16/0x20
      [ 6852.435907]  do_syscall_64+0x50/0x180
      [ 6852.436150]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Further, as the replace thread enters scrub_write_page_to_dev_replace()
    without the target device it panics:
    
      static int scrub_add_page_to_wr_bio(struct scrub_ctx *sctx,
                                          struct scrub_page *spage)
      {
      ...
            bio_set_dev(bio, sbio->dev->bdev); <======
    
      [ 6929.715145] BUG: unable to handle kernel NULL pointer dereference at 00000000000000a0
      ..
      [ 6929.717106] Workqueue: btrfs-scrub btrfs_scrub_helper [btrfs]
      [ 6929.717420] RIP: 0010:scrub_write_page_to_dev_replace+0xb4/0x260
      [btrfs]
      ..
      [ 6929.721430] Call Trace:
      [ 6929.721663]  scrub_write_block_to_dev_replace+0x3f/0x60 [btrfs]
      [ 6929.721975]  scrub_bio_end_io_worker+0x1af/0x490 [btrfs]
      [ 6929.722277]  normal_work_helper+0xf0/0x4c0 [btrfs]
      [ 6929.722552]  process_one_work+0x1f4/0x520
      [ 6929.722805]  ? process_one_work+0x16e/0x520
      [ 6929.723063]  worker_thread+0x46/0x3d0
      [ 6929.723313]  kthread+0xf8/0x130
      [ 6929.723544]  ? process_one_work+0x520/0x520
      [ 6929.723800]  ? kthread_delayed_work_timer_fn+0x80/0x80
      [ 6929.724081]  ret_from_fork+0x3a/0x50
    
    Fix this by letting the btrfs_dev_replace_finishing() to do the job of
    cleaning after the cancel, including freeing of the target device.
    btrfs_dev_replace_finishing() is called when btrfs_scub_dev() returns
    along with the scrub return status.
    
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit afbb1947db94eacc5a13302eee88a9772fb78935
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 29 18:48:10 2018 +0800

    rtl818x: fix potential use after free
    
    entry is released via usb_put_urb just after calling usb_submit_urb.
    However, entry is used if the submission fails, resulting in a use after
    free bug. The patch fixes this.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    ACKed-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 1dcd9429212b98bea87fc6ec92fb50bf5953eb47
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 29 18:25:19 2018 +0800

    mwifiex: fix potential NULL dereference and use after free
    
    There are two defects: (1) passing a NULL bss to
    mwifiex_save_hidden_ssid_channels will result in NULL dereference,
    (2) using bss after dropping the reference to it via cfg80211_put_bss.
    To fix them, the patch moves the buggy code to the branch that bss is
    not NULL and puts it before cfg80211_put_bss.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 86a07da34380bc9467fa407dc3e484488a8ad40d
Author: Jason Wang <jasowang@redhat.com>
Date:   Thu Dec 13 10:53:39 2018 +0800

    Revert "net: vhost: lock the vqs one by one"
    
    This reverts commit 78139c94dc8c96a478e67dab3bee84dc6eccb5fd. We don't
    protect device IOTLB with vq mutex, which will lead e.g use after free
    for device IOTLB entries. And since we've switched to use
    mutex_trylock() in previous patch, it's safe to revert it without
    having deadlock.
    
    Fixes: commit 78139c94dc8c ("net: vhost: lock the vqs one by one")
    Cc: Tonghao Zhang <xiangxia.m.yue@gmail.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ad669505c4e9db9af9faeb5c51aa399326a80d91
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Nov 27 15:51:58 2018 -0800

    scsi: target/core: Make sure that target_wait_for_sess_cmds() waits long enough
    
    A session must only be released after all code that accesses the session
    structure has finished. Make sure that this is the case by introducing a
    new command counter per session that is only decremented after the
    .release_cmd() callback has finished. This patch fixes the following crash:
    
    BUG: KASAN: use-after-free in do_raw_spin_lock+0x1c/0x130
    Read of size 4 at addr ffff8801534b16e4 by task rmdir/14805
    CPU: 16 PID: 14805 Comm: rmdir Not tainted 4.18.0-rc2-dbg+ #5
    Call Trace:
    dump_stack+0xa4/0xf5
    print_address_description+0x6f/0x270
    kasan_report+0x241/0x360
    __asan_load4+0x78/0x80
    do_raw_spin_lock+0x1c/0x130
    _raw_spin_lock_irqsave+0x52/0x60
    srpt_set_ch_state+0x27/0x70 [ib_srpt]
    srpt_disconnect_ch+0x1b/0xc0 [ib_srpt]
    srpt_close_session+0xa8/0x260 [ib_srpt]
    target_shutdown_sessions+0x170/0x180 [target_core_mod]
    core_tpg_del_initiator_node_acl+0xf3/0x200 [target_core_mod]
    target_fabric_nacl_base_release+0x25/0x30 [target_core_mod]
    config_item_release+0x9c/0x110 [configfs]
    config_item_put+0x26/0x30 [configfs]
    configfs_rmdir+0x3b8/0x510 [configfs]
    vfs_rmdir+0xb3/0x1e0
    do_rmdir+0x262/0x2c0
    do_syscall_64+0x77/0x230
    entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Cc: Nicholas Bellinger <nab@linux-iscsi.org>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: David Disseldorp <ddiss@suse.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 848bd9acdcd00c164b42b14aacec242949ecd471
Author: Gao Xiang <gaoxiang25@huawei.com>
Date:   Sat Dec 8 00:19:12 2018 +0800

    staging: erofs: fix use-after-free of on-stack `z_erofs_vle_unzip_io'
    
    The root cause is the race as follows:
     Thread #0                         Thread #1
    
     z_erofs_vle_unzip_kickoff         z_erofs_submit_and_unzip
    
                                        struct z_erofs_vle_unzip_io io[]
       atomic_add_return()
                                        wait_event()
                                        [end of function]
       wake_up()
    
    Fix it by taking the waitqueue lock between atomic_add_return and
    wake_up to close such the race.
    
    kernel message:
    
    Unable to handle kernel paging request at virtual address 97f7052caa1303dc
    ...
    Workqueue: kverityd verity_work
    task: ffffffe32bcb8000 task.stack: ffffffe3298a0000
    PC is at __wake_up_common+0x48/0xa8
    LR is at __wake_up+0x3c/0x58
    ...
    Call trace:
    ...
    [<ffffff94a08ff648>] __wake_up_common+0x48/0xa8
    [<ffffff94a08ff8b8>] __wake_up+0x3c/0x58
    [<ffffff94a0c11b60>] z_erofs_vle_unzip_kickoff+0x40/0x64
    [<ffffff94a0c118e4>] z_erofs_vle_read_endio+0x94/0x134
    [<ffffff94a0c83c9c>] bio_endio+0xe4/0xf8
    [<ffffff94a1076540>] dec_pending+0x134/0x32c
    [<ffffff94a1076f28>] clone_endio+0x90/0xf4
    [<ffffff94a0c83c9c>] bio_endio+0xe4/0xf8
    [<ffffff94a1095024>] verity_work+0x210/0x368
    [<ffffff94a08c4150>] process_one_work+0x188/0x4b4
    [<ffffff94a08c45bc>] worker_thread+0x140/0x458
    [<ffffff94a08cad48>] kthread+0xec/0x108
    [<ffffff94a0883ab4>] ret_from_fork+0x10/0x1c
    Code: d1006273 54000260 f9400804 b9400019 (b85fc081)
    ---[ end trace be9dde154f677cd1 ]---
    
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Gao Xiang <gaoxiang25@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7dcdf9d4e15189ecfda24cc87339a3425448d5c
Author: Israel Rukshin <israelr@mellanox.com>
Date:   Wed Dec 5 16:54:57 2018 +0000

    nvmet-rdma: fix response use after free
    
    nvmet_rdma_release_rsp() may free the response before using it at error
    flow.
    
    Fixes: 8407879 ("nvmet-rdma: fix possible bogus dereference under heavy load")
    Signed-off-by: Israel Rukshin <israelr@mellanox.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit 993107fea5eefdfdfde1ca38d3f01f0bebf76e77
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Dec 6 17:44:53 2018 +0000

    mlxsw: spectrum_switchdev: Fix VLAN device deletion via ioctl
    
    When deleting a VLAN device using an ioctl the netdev is unregistered
    before the VLAN filter is updated via ndo_vlan_rx_kill_vid(). It can
    lead to a use-after-free in mlxsw in case the VLAN device is deleted
    while being enslaved to a bridge.
    
    The reason for the above is that when mlxsw receives the CHANGEUPPER
    event, it wrongly assumes that the VLAN device is no longer its upper
    and thus destroys the internal representation of the bridge port despite
    the reference count being non-zero.
    
    Fix this by checking if the VLAN device is our upper using its real
    device. In net-next I'm going to remove this trick and instead make
    mlxsw completely agnostic to the order of the events.
    
    Fixes: c57529e1d5d8 ("mlxsw: spectrum: Replace vPorts with Port-VLAN")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 834e772c8db0c6a275d75315d90aba4ebbb1e249
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Mon Nov 5 10:35:47 2018 +0000

    vhost/vsock: fix use-after-free in network stack callers
    
    If the network stack calls .send_pkt()/.cancel_pkt() during .release(),
    a struct vhost_vsock use-after-free is possible.  This occurs because
    .release() does not wait for other CPUs to stop using struct
    vhost_vsock.
    
    Switch to an RCU-enabled hashtable (indexed by guest CID) so that
    .release() can wait for other CPUs by calling synchronize_rcu().  This
    also eliminates vhost_vsock_lock acquisition in the data path so it
    could have a positive effect on performance.
    
    This is CVE-2018-14625 "kernel: use-after-free Read in vhost_transport_send_pkt".
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: syzbot+bd391451452fb0b93039@syzkaller.appspotmail.com
    Reported-by: syzbot+e3e074963495f92a89ed@syzkaller.appspotmail.com
    Reported-by: syzbot+d5a0a170c5069658b141@syzkaller.appspotmail.com
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>

commit 22f6bbb7bcfcef0b373b0502a7ff390275c575dd
Author: Edward Cree <ecree@solarflare.com>
Date:   Tue Dec 4 17:37:57 2018 +0000

    net: use skb_list_del_init() to remove from RX sublists
    
    list_del() leaves the skb->next pointer poisoned, which can then lead to
     a crash in e.g. OVS forwarding.  For example, setting up an OVS VXLAN
     forwarding bridge on sfc as per:
    
    ========
    $ ovs-vsctl show
    5dfd9c47-f04b-4aaa-aa96-4fbb0a522a30
        Bridge "br0"
            Port "br0"
                Interface "br0"
                    type: internal
            Port "enp6s0f0"
                Interface "enp6s0f0"
            Port "vxlan0"
                Interface "vxlan0"
                    type: vxlan
                    options: {key="1", local_ip="10.0.0.5", remote_ip="10.0.0.4"}
        ovs_version: "2.5.0"
    ========
    (where 10.0.0.5 is an address on enp6s0f1)
    and sending traffic across it will lead to the following panic:
    ========
    general protection fault: 0000 [#1] SMP PTI
    CPU: 5 PID: 0 Comm: swapper/5 Not tainted 4.20.0-rc3-ehc+ #701
    Hardware name: Dell Inc. PowerEdge R710/0M233H, BIOS 6.4.0 07/23/2013
    RIP: 0010:dev_hard_start_xmit+0x38/0x200
    Code: 53 48 89 fb 48 83 ec 20 48 85 ff 48 89 54 24 08 48 89 4c 24 18 0f 84 ab 01 00 00 48 8d 86 90 00 00 00 48 89 f5 48 89 44 24 10 <4c> 8b 33 48 c7 03 00 00 00 00 48 8b 05 c7 d1 b3 00 4d 85 f6 0f 95
    RSP: 0018:ffff888627b437e0 EFLAGS: 00010202
    RAX: 0000000000000000 RBX: dead000000000100 RCX: ffff88862279c000
    RDX: ffff888614a342c0 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffff888618a88000 R08: 0000000000000001 R09: 00000000000003e8
    R10: 0000000000000000 R11: ffff888614a34140 R12: 0000000000000000
    R13: 0000000000000062 R14: dead000000000100 R15: ffff888616430000
    FS:  0000000000000000(0000) GS:ffff888627b40000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f6d2bc6d000 CR3: 000000000200a000 CR4: 00000000000006e0
    Call Trace:
     <IRQ>
     __dev_queue_xmit+0x623/0x870
     ? masked_flow_lookup+0xf7/0x220 [openvswitch]
     ? ep_poll_callback+0x101/0x310
     do_execute_actions+0xaba/0xaf0 [openvswitch]
     ? __wake_up_common+0x8a/0x150
     ? __wake_up_common_lock+0x87/0xc0
     ? queue_userspace_packet+0x31c/0x5b0 [openvswitch]
     ovs_execute_actions+0x47/0x120 [openvswitch]
     ovs_dp_process_packet+0x7d/0x110 [openvswitch]
     ovs_vport_receive+0x6e/0xd0 [openvswitch]
     ? dst_alloc+0x64/0x90
     ? rt_dst_alloc+0x50/0xd0
     ? ip_route_input_slow+0x19a/0x9a0
     ? __udp_enqueue_schedule_skb+0x198/0x1b0
     ? __udp4_lib_rcv+0x856/0xa30
     ? __udp4_lib_rcv+0x856/0xa30
     ? cpumask_next_and+0x19/0x20
     ? find_busiest_group+0x12d/0xcd0
     netdev_frame_hook+0xce/0x150 [openvswitch]
     __netif_receive_skb_core+0x205/0xae0
     __netif_receive_skb_list_core+0x11e/0x220
     netif_receive_skb_list+0x203/0x460
     ? __efx_rx_packet+0x335/0x5e0 [sfc]
     efx_poll+0x182/0x320 [sfc]
     net_rx_action+0x294/0x3c0
     __do_softirq+0xca/0x297
     irq_exit+0xa6/0xb0
     do_IRQ+0x54/0xd0
     common_interrupt+0xf/0xf
     </IRQ>
    ========
    So, in all listified-receive handling, instead pull skbs off the lists with
     skb_list_del_init().
    
    Fixes: 9af86f933894 ("net: core: fix use-after-free in __netif_receive_skb_list_core")
    Fixes: 7da517a3bc52 ("net: core: Another step of skb receive list processing")
    Fixes: a4ca8b7df73c ("net: ipv4: fix drop handling in ip_list_rcv() and ip_list_rcv_finish()")
    Fixes: d8269e2cbf90 ("net: ipv6: listify ipv6_rcv() and ip6_rcv_finish()")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit '0072a0c14d5b7cb72c611d396f143f5dcd73ebe2': (1108 commits)
      ide: Change to use DEFINE_SHOW_ATTRIBUTE macro
      ide: pmac: add of_node_put()
      drivers/tty: add missing of_node_put()
      drivers/sbus/char: add of_node_put()
      sbus: char: add of_node_put()
      Linux 4.20-rc5
      PCI: Fix incorrect value returned from pcie_get_speed_cap()
      MAINTAINERS: Update linux-mips mailing list address
      ocfs2: fix potential use after free
      mm/khugepaged: fix the xas_create_range() error path
      mm/khugepaged: collapse_shmem() do not crash on Compound
      mm/khugepaged: collapse_shmem() without freezing new_page
      mm/khugepaged: minor reorderings in collapse_shmem()
      mm/khugepaged: collapse_shmem() remember to clear holes
      mm/khugepaged: fix crashes due to misaccounted holes
      mm/khugepaged: collapse_shmem() stop if punched or truncated
      mm/huge_memory: fix lockdep complaint on 32-bit i_size_read()
      mm/huge_memory: splitting set mapping+index before unfreeze
      mm/huge_memory: rename freeze_page() to unmap_page()
      initramfs: clean old path before creating a hardlink
      ...

commits)
      Linux 4.20-rc5
      PCI: Fix incorrect value returned from pcie_get_speed_cap()
      MAINTAINERS: Update linux-mips mailing list address
      ocfs2: fix potential use after free
      mm/khugepaged: fix the xas_create_range() error path
      mm/khugepaged: collapse_shmem() do not crash on Compound
      mm/khugepaged: collapse_shmem() without freezing new_page
      mm/khugepaged: minor reorderings in collapse_shmem()
      mm/khugepaged: collapse_shmem() remember to clear holes
      mm/khugepaged: fix crashes due to misaccounted holes
      mm/khugepaged: collapse_shmem() stop if punched or truncated
      mm/huge_memory: fix lockdep complaint on 32-bit i_size_read()
      mm/huge_memory: splitting set mapping+index before unfreeze
      mm/huge_memory: rename freeze_page() to unmap_page()
      initramfs: clean old path before creating a hardlink
      kernel/kcov.c: mark funcs in __sanitizer_cov_trace_pc() as notrace
      psi: make disabling/enabling easier for vendor kernels
      proc: fixup map_files test on arm
      debugobjects: avoid recursive calls with kmemleak
      userfaultfd: shmem: UFFDIO_COPY: set the page dirty if VM_WRITE is not set
      ...

commit 61157b24e60fb3cd1f85f2c76a7b1d628f970144
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Dec 3 23:28:02 2018 -0500

    ext4: fix possible use after free in ext4_quota_enable
    
    The function frees qf_inode via iput but then pass qf_inode to
    lockdep_set_quota_inode on the failure path. This may result in a
    use-after-free bug. The patch frees df_inode only when it is never used.
    
    Fixes: daf647d2dd5 ("ext4: add lockdep annotations for i_data_sem")
    Cc: stable@kernel.org # 4.6
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>

commit fb6df5a6234c38a9c551559506a49a677ac6f07a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 1 01:36:59 2018 +0800

    sctp: kfree_rcu asoc
    
    In sctp_hash_transport/sctp_epaddr_lookup_transport, it dereferences
    a transport's asoc under rcu_read_lock while asoc is freed not after
    a grace period, which leads to a use-after-free panic.
    
    This patch fixes it by calling kfree_rcu to make asoc be freed after
    a grace period.
    
    Note that only the asoc's memory is delayed to free in the patch, it
    won't cause sk to linger longer.
    
    Thanks Neil and Marcelo to make this clear.
    
    Fixes: 7fda702f9315 ("sctp: use new rhlist interface on sctp transport rhashtable")
    Fixes: cd2b70875058 ("sctp: check duplicate node before inserting a new transport")
    Reported-by: syzbot+0b05d8aa7cb185107483@syzkaller.appspotmail.com
    Reported-by: syzbot+aad231d51b1923158444@syzkaller.appspotmail.com
    Suggested-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e4b08e55889da97dec750759f3ade8cc92b4644
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Dec 3 18:09:24 2018 +0900

    tun: remove skb access after netif_receive_skb
    
    In tun.c skb->len was accessed while doing stats accounting after a
    call to netif_receive_skb. We can not access skb after this call
    because buffers may be dropped.
    
    The fix for this bug would be to store skb->len in local variable and
    then use it after netif_receive_skb(). IMO using xdp data size for
    accounting bytes will be better because input for tun_xdp_one() is
    xdp_buff.
    
    Hence this patch:
    - fixes a bug by removing skb access after netif_receive_skb()
    - uses xdp data size for accounting bytes
    
    [613.019057] BUG: KASAN: use-after-free in tun_sendmsg+0x77c/0xc50 [tun]
    [613.021062] Read of size 4 at addr ffff8881da9ab7c0 by task vhost-1115/1155
    [613.023073]
    [613.024003] CPU: 0 PID: 1155 Comm: vhost-1115 Not tainted 4.20.0-rc3-vm+ #232
    [613.026029] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [613.029116] Call Trace:
    [613.031145]  dump_stack+0x5b/0x90
    [613.032219]  print_address_description+0x6c/0x23c
    [613.034156]  ? tun_sendmsg+0x77c/0xc50 [tun]
    [613.036141]  kasan_report.cold.5+0x241/0x308
    [613.038125]  tun_sendmsg+0x77c/0xc50 [tun]
    [613.040109]  ? tun_get_user+0x1960/0x1960 [tun]
    [613.042094]  ? __isolate_free_page+0x270/0x270
    [613.045173]  vhost_tx_batch.isra.14+0xeb/0x1f0 [vhost_net]
    [613.047127]  ? peek_head_len.part.13+0x90/0x90 [vhost_net]
    [613.049096]  ? get_tx_bufs+0x5a/0x2c0 [vhost_net]
    [613.051106]  ? vhost_enable_notify+0x2d8/0x420 [vhost]
    [613.053139]  handle_tx_copy+0x2d0/0x8f0 [vhost_net]
    [613.053139]  ? vhost_net_buf_peek+0x340/0x340 [vhost_net]
    [613.053139]  ? __mutex_lock+0x8d9/0xb30
    [613.053139]  ? finish_task_switch+0x8f/0x3f0
    [613.053139]  ? handle_tx+0x32/0x120 [vhost_net]
    [613.053139]  ? mutex_trylock+0x110/0x110
    [613.053139]  ? finish_task_switch+0xcf/0x3f0
    [613.053139]  ? finish_task_switch+0x240/0x3f0
    [613.053139]  ? __switch_to_asm+0x34/0x70
    [613.053139]  ? __switch_to_asm+0x40/0x70
    [613.053139]  ? __schedule+0x506/0xf10
    [613.053139]  handle_tx+0xc7/0x120 [vhost_net]
    [613.053139]  vhost_worker+0x166/0x200 [vhost]
    [613.053139]  ? vhost_dev_init+0x580/0x580 [vhost]
    [613.053139]  ? __kthread_parkme+0x77/0x90
    [613.053139]  ? vhost_dev_init+0x580/0x580 [vhost]
    [613.053139]  kthread+0x1b1/0x1d0
    [613.053139]  ? kthread_park+0xb0/0xb0
    [613.053139]  ret_from_fork+0x35/0x40
    [613.088705]
    [613.088705] Allocated by task 1155:
    [613.088705]  kasan_kmalloc+0xbf/0xe0
    [613.088705]  kmem_cache_alloc+0xdc/0x220
    [613.088705]  __build_skb+0x2a/0x160
    [613.088705]  build_skb+0x14/0xc0
    [613.088705]  tun_sendmsg+0x4f0/0xc50 [tun]
    [613.088705]  vhost_tx_batch.isra.14+0xeb/0x1f0 [vhost_net]
    [613.088705]  handle_tx_copy+0x2d0/0x8f0 [vhost_net]
    [613.088705]  handle_tx+0xc7/0x120 [vhost_net]
    [613.088705]  vhost_worker+0x166/0x200 [vhost]
    [613.088705]  kthread+0x1b1/0x1d0
    [613.088705]  ret_from_fork+0x35/0x40
    [613.088705]
    [613.088705] Freed by task 1155:
    [613.088705]  __kasan_slab_free+0x12e/0x180
    [613.088705]  kmem_cache_free+0xa0/0x230
    [613.088705]  ip6_mc_input+0x40f/0x5a0
    [613.088705]  ipv6_rcv+0xc9/0x1e0
    [613.088705]  __netif_receive_skb_one_core+0xc1/0x100
    [613.088705]  netif_receive_skb_internal+0xc4/0x270
    [613.088705]  br_pass_frame_up+0x2b9/0x2e0
    [613.088705]  br_handle_frame_finish+0x2fb/0x7a0
    [613.088705]  br_handle_frame+0x30f/0x6c0
    [613.088705]  __netif_receive_skb_core+0x61a/0x15b0
    [613.088705]  __netif_receive_skb_one_core+0x8e/0x100
    [613.088705]  netif_receive_skb_internal+0xc4/0x270
    [613.088705]  tun_sendmsg+0x738/0xc50 [tun]
    [613.088705]  vhost_tx_batch.isra.14+0xeb/0x1f0 [vhost_net]
    [613.088705]  handle_tx_copy+0x2d0/0x8f0 [vhost_net]
    [613.088705]  handle_tx+0xc7/0x120 [vhost_net]
    [613.088705]  vhost_worker+0x166/0x200 [vhost]
    [613.088705]  kthread+0x1b1/0x1d0
    [613.088705]  ret_from_fork+0x35/0x40
    [613.088705]
    [613.088705] The buggy address belongs to the object at ffff8881da9ab740
    [613.088705]  which belongs to the cache skbuff_head_cache of size 232
    
    Fixes: 043d222f93ab ("tuntap: accept an array of XDP buffs through sendmsg()")
    Reviewed-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f8cf712582617d523120df67d392059eaf2fc4b
Author: Hui Peng <benquike@gmail.com>
Date:   Mon Dec 3 16:09:34 2018 +0100

    ALSA: usb-audio: Fix UAF decrement if card has no live interfaces in card.c
    
    If a USB sound card reports 0 interfaces, an error condition is triggered
    and the function usb_audio_probe errors out. In the error path, there was a
    use-after-free vulnerability where the memory object of the card was first
    freed, followed by a decrement of the number of active chips. Moving the
    decrement above the atomic_dec fixes the UAF.
    
    [ The original problem was introduced in 3.1 kernel, while it was
      developed in a different form.  The Fixes tag below indicates the
      original commit but it doesn't mean that the patch is applicable
      cleanly. -- tiwai ]
    
    Fixes: 362e4e49abe5 ("ALSA: usb-audio - clear chip->probing on error exit")
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Signed-off-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commits)
      ocfs2: fix potential use after free
      mm/khugepaged: fix the xas_create_range() error path
      mm/khugepaged: collapse_shmem() do not crash on Compound
      mm/khugepaged: collapse_shmem() without freezing new_page
      mm/khugepaged: minor reorderings in collapse_shmem()
      mm/khugepaged: collapse_shmem() remember to clear holes
      mm/khugepaged: fix crashes due to misaccounted holes
      mm/khugepaged: collapse_shmem() stop if punched or truncated
      mm/huge_memory: fix lockdep complaint on 32-bit i_size_read()
      mm/huge_memory: splitting set mapping+index before unfreeze
      mm/huge_memory: rename freeze_page() to unmap_page()
      initramfs: clean old path before creating a hardlink
      kernel/kcov.c: mark funcs in __sanitizer_cov_trace_pc() as notrace
      psi: make disabling/enabling easier for vendor kernels
      proc: fixup map_files test on arm
      debugobjects: avoid recursive calls with kmemleak
      userfaultfd: shmem: UFFDIO_COPY: set the page dirty if VM_WRITE is not set
      userfaultfd: shmem: add i_size checks
      userfaultfd: shmem/hugetlbfs: only allow to register VM_MAYWRITE vmas
      userfaultfd: shmem: allocate anonymous memory for MAP_PRIVATE shmem
      ...

commit 164f7e586739d07eb56af6f6d66acebb11f315c8
Author: Pan Bian <bianpan2016@163.com>
Date:   Fri Nov 30 14:10:54 2018 -0800

    ocfs2: fix potential use after free
    
    ocfs2_get_dentry() calls iput(inode) to drop the reference count of
    inode, and if the reference count hits 0, inode is freed.  However, in
    this function, it then reads inode->i_generation, which may result in a
    use after free bug.  Move the put operation later.
    
    Link: http://lkml.kernel.org/r/1543109237-110227-1-git-send-email-bianpan2016@163.com
    Fixes: 781f200cb7a("ocfs2: Remove masklog ML_EXPORT.")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Joseph Qi <jiangqi903@gmail.com>
    Cc: Changwei Ge <ge.changwei@h3c.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c7d7d620dcbd2a1c595092280ca943f2fced7bbd
Author: Pan Bian <bianpan2016@163.com>
Date:   Fri Nov 30 14:09:18 2018 -0800

    hfsplus: do not free node before using
    
    hfs_bmap_free() frees node via hfs_bnode_put(node).  However it then
    reads node->this when dumping error message on an error path, which may
    result in a use-after-free bug.  This patch frees node only when it is
    never used.
    
    Link: http://lkml.kernel.org/r/1543053441-66942-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Ernesto A. Fernandez <ernesto.mnd.fernandez@gmail.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ce96a407adef126870b3f4a1b73529dd8aa80f49
Author: Pan Bian <bianpan2016@163.com>
Date:   Fri Nov 30 14:09:14 2018 -0800

    hfs: do not free node before using
    
    hfs_bmap_free() frees the node via hfs_bnode_put(node).  However, it
    then reads node->this when dumping error message on an error path, which
    may result in a use-after-free bug.  This patch frees the node only when
    it is never again used.
    
    Link: http://lkml.kernel.org/r/1542963889-128825-1-git-send-email-bianpan2016@163.com
    Fixes: a1185ffa2fc ("HFS rewrite")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Joe Perches <joe@perches.com>
    Cc: Ernesto A. Fernandez <ernesto.mnd.fernandez@gmail.com>
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e5bde04ccce64d808f8b00a489a1fe5825d285cb
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Nov 22 18:00:16 2018 +0800

    crypto: do not free algorithm before using
    
    In multiple functions, the algorithm fields are read after its reference
    is dropped through crypto_mod_put. In this case, the algorithm memory
    may be freed, resulting in use-after-free bugs. This patch delays the
    put operation until the algorithm is never used.
    
    Fixes: 79c65d179a40 ("crypto: cbc - Convert to skcipher")
    Fixes: a7d85e06ed80 ("crypto: cfb - add support for Cipher FeedBack mode")
    Fixes: 043a44001b9e ("crypto: pcbc - Convert to skcipher")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 9765635b30756eb74e05e260ac812659c296cd28
Author: Lyude Paul <lyude@redhat.com>
Date:   Wed Nov 28 16:00:05 2018 -0500

    Revert "drm/dp_mst: Skip validating ports during destruction, just ref"
    
    This reverts commit:
    
    c54c7374ff44 ("drm/dp_mst: Skip validating ports during destruction, just ref")
    
    ugh.
    
    In drm_dp_destroy_connector_work(), we have a pretty good chance of
    freeing the actual struct drm_dp_mst_port. However, after destroying
    things we send a hotplug through (*mgr->cbs->hotplug)(mgr) which is
    where the problems start.
    
    For i915, this calls all the way down to the fbcon probing helpers,
    which start trying to access the port in a modeset.
    
    [   45.062001] ==================================================================
    [   45.062112] BUG: KASAN: use-after-free in ex_handler_refcount+0x146/0x180
    [   45.062196] Write of size 4 at addr ffff8882b4b70968 by task kworker/3:1/53
    
    [   45.062325] CPU: 3 PID: 53 Comm: kworker/3:1 Kdump: loaded Tainted: G           O      4.20.0-rc4Lyude-Test+ #3
    [   45.062442] Hardware name: LENOVO 20BWS1KY00/20BWS1KY00, BIOS JBET71WW (1.35 ) 09/14/2018
    [   45.062554] Workqueue: events drm_dp_destroy_connector_work [drm_kms_helper]
    [   45.062641] Call Trace:
    [   45.062685]  dump_stack+0xbd/0x15a
    [   45.062735]  ? dump_stack_print_info.cold.0+0x1b/0x1b
    [   45.062801]  ? printk+0x9f/0xc5
    [   45.062847]  ? kmsg_dump_rewind_nolock+0xe4/0xe4
    [   45.062909]  ? ex_handler_refcount+0x146/0x180
    [   45.062970]  print_address_description+0x71/0x239
    [   45.063036]  ? ex_handler_refcount+0x146/0x180
    [   45.063095]  kasan_report.cold.5+0x242/0x30b
    [   45.063155]  __asan_report_store4_noabort+0x1c/0x20
    [   45.063313]  ex_handler_refcount+0x146/0x180
    [   45.063371]  ? ex_handler_clear_fs+0xb0/0xb0
    [   45.063428]  fixup_exception+0x98/0xd7
    [   45.063484]  ? raw_notifier_call_chain+0x20/0x20
    [   45.063548]  do_trap+0x6d/0x210
    [   45.063605]  ? _GLOBAL__sub_I_65535_1_drm_dp_aux_unregister_devnode+0x2f/0x1c6 [drm_kms_helper]
    [   45.063732]  do_error_trap+0xc0/0x170
    [   45.063802]  ? _GLOBAL__sub_I_65535_1_drm_dp_aux_unregister_devnode+0x2f/0x1c6 [drm_kms_helper]
    [   45.063929]  do_invalid_op+0x3b/0x50
    [   45.063997]  ? _GLOBAL__sub_I_65535_1_drm_dp_aux_unregister_devnode+0x2f/0x1c6 [drm_kms_helper]
    [   45.064103]  invalid_op+0x14/0x20
    [   45.064162] RIP: 0010:_GLOBAL__sub_I_65535_1_drm_dp_aux_unregister_devnode+0x2f/0x1c6 [drm_kms_helper]
    [   45.064274] Code: 00 48 c7 c7 80 fe 53 a0 48 89 e5 e8 5b 6f 26 e1 5d c3 48 8d 0e 0f 0b 48 8d 0b 0f 0b 48 8d 0f 0f 0b 48 8d 0f 0f 0b 49 8d 4d 00 <0f> 0b 49 8d 0e 0f 0b 48 8d 08 0f 0b 49 8d 4d 00 0f 0b 48 8d 0b 0f
    [   45.064569] RSP: 0018:ffff8882b789ee10 EFLAGS: 00010282
    [   45.064637] RAX: ffff8882af47ae70 RBX: ffff8882af47aa60 RCX: ffff8882b4b70968
    [   45.064723] RDX: ffff8882af47ae70 RSI: 0000000000000008 RDI: ffff8882b788bdb8
    [   45.064808] RBP: ffff8882b789ee28 R08: ffffed1056f13db4 R09: ffffed1056f13db3
    [   45.064894] R10: ffffed1056f13db3 R11: ffff8882b789ed9f R12: ffff8882af47ad28
    [   45.064980] R13: ffff8882b4b70968 R14: ffff8882acd86728 R15: ffff8882b4b75dc8
    [   45.065084]  drm_dp_mst_reset_vcpi_slots+0x12/0x80 [drm_kms_helper]
    [   45.065225]  intel_mst_disable_dp+0xda/0x180 [i915]
    [   45.065361]  intel_encoders_disable.isra.107+0x197/0x310 [i915]
    [   45.065498]  haswell_crtc_disable+0xbe/0x400 [i915]
    [   45.065622]  ? i9xx_disable_plane+0x1c0/0x3e0 [i915]
    [   45.065750]  intel_atomic_commit_tail+0x74e/0x3e60 [i915]
    [   45.065884]  ? intel_pre_plane_update+0xbc0/0xbc0 [i915]
    [   45.065968]  ? drm_atomic_helper_swap_state+0x88b/0x1d90 [drm_kms_helper]
    [   45.066054]  ? kasan_check_write+0x14/0x20
    [   45.066165]  ? i915_gem_track_fb+0x13a/0x330 [i915]
    [   45.066277]  ? i915_sw_fence_complete+0xe9/0x140 [i915]
    [   45.066406]  ? __i915_sw_fence_complete+0xc50/0xc50 [i915]
    [   45.066540]  intel_atomic_commit+0x72e/0xef0 [i915]
    [   45.066635]  ? drm_dev_dbg+0x200/0x200 [drm]
    [   45.066764]  ? intel_atomic_commit_tail+0x3e60/0x3e60 [i915]
    [   45.066898]  ? intel_atomic_commit_tail+0x3e60/0x3e60 [i915]
    [   45.067001]  drm_atomic_commit+0xc4/0xf0 [drm]
    [   45.067074]  restore_fbdev_mode_atomic+0x562/0x780 [drm_kms_helper]
    [   45.067166]  ? drm_fb_helper_debug_leave+0x690/0x690 [drm_kms_helper]
    [   45.067249]  ? kasan_check_read+0x11/0x20
    [   45.067324]  restore_fbdev_mode+0x127/0x4b0 [drm_kms_helper]
    [   45.067364]  ? kasan_check_read+0x11/0x20
    [   45.067406]  drm_fb_helper_restore_fbdev_mode_unlocked+0x164/0x200 [drm_kms_helper]
    [   45.067462]  ? drm_fb_helper_hotplug_event+0x30/0x30 [drm_kms_helper]
    [   45.067508]  ? kasan_check_write+0x14/0x20
    [   45.070360]  ? mutex_unlock+0x22/0x40
    [   45.073748]  drm_fb_helper_set_par+0xb2/0xf0 [drm_kms_helper]
    [   45.075846]  drm_fb_helper_hotplug_event.part.33+0x1cd/0x290 [drm_kms_helper]
    [   45.078088]  drm_fb_helper_hotplug_event+0x1c/0x30 [drm_kms_helper]
    [   45.082614]  intel_fbdev_output_poll_changed+0x9f/0x140 [i915]
    [   45.087069]  drm_kms_helper_hotplug_event+0x67/0x90 [drm_kms_helper]
    [   45.089319]  intel_dp_mst_hotplug+0x37/0x50 [i915]
    [   45.091496]  drm_dp_destroy_connector_work+0x510/0x6f0 [drm_kms_helper]
    [   45.093675]  ? drm_dp_update_payload_part1+0x1220/0x1220 [drm_kms_helper]
    [   45.095851]  ? kasan_check_write+0x14/0x20
    [   45.098473]  ? kasan_check_read+0x11/0x20
    [   45.101155]  ? strscpy+0x17c/0x530
    [   45.103808]  ? __switch_to_asm+0x34/0x70
    [   45.106456]  ? syscall_return_via_sysret+0xf/0x7f
    [   45.109711]  ? read_word_at_a_time+0x20/0x20
    [   45.113138]  ? __switch_to_asm+0x40/0x70
    [   45.116529]  ? __switch_to_asm+0x34/0x70
    [   45.119891]  ? __switch_to_asm+0x40/0x70
    [   45.123224]  ? __switch_to_asm+0x34/0x70
    [   45.126540]  ? __switch_to_asm+0x34/0x70
    [   45.129824]  process_one_work+0x88d/0x15d0
    [   45.133172]  ? pool_mayday_timeout+0x850/0x850
    [   45.136459]  ? pci_mmcfg_check_reserved+0x110/0x128
    [   45.139739]  ? wake_q_add+0xb0/0xb0
    [   45.143010]  ? check_preempt_wakeup+0x652/0x1050
    [   45.146304]  ? worker_enter_idle+0x29e/0x740
    [   45.149589]  ? __schedule+0x1ec0/0x1ec0
    [   45.152937]  ? kasan_check_read+0x11/0x20
    [   45.156179]  ? _raw_spin_lock_irq+0xa3/0x130
    [   45.159382]  ? _raw_read_unlock_irqrestore+0x30/0x30
    [   45.162542]  ? kasan_check_write+0x14/0x20
    [   45.165657]  worker_thread+0x1a5/0x1470
    [   45.168725]  ? set_load_weight+0x2e0/0x2e0
    [   45.171755]  ? process_one_work+0x15d0/0x15d0
    [   45.174806]  ? __switch_to_asm+0x34/0x70
    [   45.177645]  ? __switch_to_asm+0x40/0x70
    [   45.180323]  ? __switch_to_asm+0x34/0x70
    [   45.182936]  ? __switch_to_asm+0x40/0x70
    [   45.185539]  ? __switch_to_asm+0x34/0x70
    [   45.188100]  ? __switch_to_asm+0x40/0x70
    [   45.190628]  ? __schedule+0x7d4/0x1ec0
    [   45.193143]  ? save_stack+0xa9/0xd0
    [   45.195632]  ? kasan_check_write+0x10/0x20
    [   45.198162]  ? kasan_kmalloc+0xc4/0xe0
    [   45.200609]  ? kmem_cache_alloc_trace+0xdd/0x190
    [   45.203046]  ? kthread+0x9f/0x3b0
    [   45.205470]  ? ret_from_fork+0x35/0x40
    [   45.207876]  ? unwind_next_frame+0x43/0x50
    [   45.210273]  ? __save_stack_trace+0x82/0x100
    [   45.212658]  ? deactivate_slab.isra.67+0x3d4/0x580
    [   45.215026]  ? default_wake_function+0x35/0x50
    [   45.217399]  ? kasan_check_read+0x11/0x20
    [   45.219825]  ? _raw_spin_lock_irqsave+0xae/0x140
    [   45.222174]  ? __lock_text_start+0x8/0x8
    [   45.224521]  ? replenish_dl_entity.cold.62+0x4f/0x4f
    [   45.226868]  ? __kthread_parkme+0x87/0xf0
    [   45.229200]  kthread+0x2f7/0x3b0
    [   45.231557]  ? process_one_work+0x15d0/0x15d0
    [   45.233923]  ? kthread_park+0x120/0x120
    [   45.236249]  ret_from_fork+0x35/0x40
    
    [   45.240875] Allocated by task 242:
    [   45.243136]  save_stack+0x43/0xd0
    [   45.245385]  kasan_kmalloc+0xc4/0xe0
    [   45.247597]  kmem_cache_alloc_trace+0xdd/0x190
    [   45.249793]  drm_dp_add_port+0x1e0/0x2170 [drm_kms_helper]
    [   45.252000]  drm_dp_send_link_address+0x4a7/0x740 [drm_kms_helper]
    [   45.254389]  drm_dp_check_and_send_link_address+0x1a7/0x210 [drm_kms_helper]
    [   45.256803]  drm_dp_mst_link_probe_work+0x6f/0xb0 [drm_kms_helper]
    [   45.259200]  process_one_work+0x88d/0x15d0
    [   45.261597]  worker_thread+0x1a5/0x1470
    [   45.264038]  kthread+0x2f7/0x3b0
    [   45.266371]  ret_from_fork+0x35/0x40
    
    [   45.270937] Freed by task 53:
    [   45.273170]  save_stack+0x43/0xd0
    [   45.275382]  __kasan_slab_free+0x139/0x190
    [   45.277604]  kasan_slab_free+0xe/0x10
    [   45.279826]  kfree+0x99/0x1b0
    [   45.282044]  drm_dp_free_mst_port+0x4a/0x60 [drm_kms_helper]
    [   45.284330]  drm_dp_destroy_connector_work+0x43e/0x6f0 [drm_kms_helper]
    [   45.286660]  process_one_work+0x88d/0x15d0
    [   45.288934]  worker_thread+0x1a5/0x1470
    [   45.291231]  kthread+0x2f7/0x3b0
    [   45.293547]  ret_from_fork+0x35/0x40
    
    [   45.298206] The buggy address belongs to the object at ffff8882b4b70968
                    which belongs to the cache kmalloc-2k of size 2048
    [   45.303047] The buggy address is located 0 bytes inside of
                    2048-byte region [ffff8882b4b70968, ffff8882b4b71168)
    [   45.308010] The buggy address belongs to the page:
    [   45.310477] page:ffffea000ad2dc00 count:1 mapcount:0 mapping:ffff8882c080cf40 index:0x0 compound_mapcount: 0
    [   45.313051] flags: 0x8000000000010200(slab|head)
    [   45.315635] raw: 8000000000010200 ffffea000aac2808 ffffea000abe8608 ffff8882c080cf40
    [   45.318300] raw: 0000000000000000 00000000000d000d 00000001ffffffff 0000000000000000
    [   45.320966] page dumped because: kasan: bad access detected
    
    [   45.326312] Memory state around the buggy address:
    [   45.329085]  ffff8882b4b70800: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   45.331845]  ffff8882b4b70880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   45.334584] >ffff8882b4b70900: fc fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb
    [   45.337302]                                                           ^
    [   45.340061]  ffff8882b4b70980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   45.342910]  ffff8882b4b70a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [   45.345748] ==================================================================
    
    So, this definitely isn't a fix that we want. This being said; there's
    no real easy fix for this problem because of some of the catch-22's of
    the MST helpers current design. For starters; we always need to validate
    a port with drm_dp_get_validated_port_ref(), but validation relies on
    the lifetime of the port in the actual topology. So once the port is
    gone, it can't be validated again.
    
    If we were to try to make the payload helpers not use port validation,
    then we'd cause another problem: if the port isn't validated, it could
    be freed and we'd just start causing more KASAN issues. There are
    already hacks that attempt to workaround this in
    drm_dp_mst_destroy_connector_work() by re-initializing the kref so that
    it can be used again and it's memory can be freed once the VCPI helpers
    finish removing the port's respective payloads. But none of these really
    do anything helpful since the port still can't be validated since it's
    gone from the topology. Also, that workaround is immensely confusing to
    read through.
    
    What really needs to be done in order to fix this is to teach DRM how to
    track the lifetime of the structs for MST ports and branch devices
    separately from their lifetime in the actual topology. Simply put; this
    means having two different krefs-one that removes the port/branch device
    from the topology, and one that finally calls kfree(). This would let us
    simplify things, since we'd now be able to keep ports around without
    having to keep them in the topology at the same time, which is exactly
    what we need in order to teach our VCPI helpers to only validate ports
    when it's actually necessary without running the risk of trying to use
    unallocated memory.
    
    Such a fix is on it's way, but for now let's play it safe and just
    revert this. If this bug has been around for well over a year, we can
    wait a little while to get an actual proper fix here.
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Fixes: c54c7374ff44 ("drm/dp_mst: Skip validating ports during destruction, just ref")
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Sean Paul <sean@poorly.run>
    Cc: Jerry Zuo <Jerry.Zuo@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: stable@vger.kernel.org # v4.6+
    Acked-by: Sean Paul <sean@poorly.run>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181128210005.24434-1-lyude@redhat.com

commits)
      s390/qeth: fix length check in SNMP processing
      net: hisilicon: remove unexpected free_netdev
      rapidio/rionet: do not free skb before reading its length
      i40e: fix kerneldoc for xsk methods
      ixgbe: recognize 1000BaseLX SFP modules as 1Gbps
      i40e: Fix deletion of MAC filters
      igb: fix uninitialized variables
      netfilter: nf_tables: deactivate expressions in rule replecement routine
      lan743x: Enable driver to work with LAN7431
      tipc: fix lockdep warning during node delete
      lan743x: fix return value for lan743x_tx_napi_poll
      net: via: via-velocity: fix spelling mistake "alignement" -> "alignment"
      qed: fix spelling mistake "attnetion" -> "attention"
      net: thunderx: fix NULL pointer dereference in nic_remove
      sctp: increase sk_wmem_alloc when head->truesize is increased
      firestream: fix spelling mistake: "Inititing" -> "Initializing"
      net: phy: add workaround for issue where PHY driver doesn't bind to the device
      usbnet: ipheth: fix potential recvmsg bug and recvmsg bug 2
      sparc: Adjust bpf JIT prologue for PSEUDO calls.
      bpf, doc: add entries of who looks over which jits
      ...

commit path,
       from Florian Westphal. This includes a selftest for this.
    
    5) Do duplicate rule handles when replacing rules, also from Florian.
    
    6) Remove net_exit path in xt_RATEEST that results in splat, from Taehee.
    
    7) Possible use-after-free in nft_compat when releasing extensions.
       From Florian.
    
    8) Memory leak in xt_hashlimit, from Taehee.
    
    9) Call ip_vs_dst_notifier after ipv6_dev_notf, from Xin Long.
    
    10) Fix cttimeout with udplite and gre, from Florian.
    
    11) Preserve oif for IPv6 link-local generated traffic from mangle
        table, from Alin Nastac.
    
    12) Missing error handling in masquerade notifiers, from Taehee Yoo.
    
    13) Use mutex to protect registration/unregistration of masquerade
        extensions in order to prevent a race, from Taehee.
    
    14) Incorrect condition check in tree_nodes_free(), also from Taehee.
    
    15) Fix chain counter leak in rule replacement path, from Taehee.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c758940158bf29fe14e9d0f89d5848f227b48134
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 28 15:30:24 2018 +0800

    net: hisilicon: remove unexpected free_netdev
    
    The net device ndev is freed via free_netdev when failing to register
    the device. The control flow then jumps to the error handling code
    block. ndev is used and freed again. Resulting in a use-after-free bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cfc435198f53a6fa1f656d98466b24967ff457d0
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 28 14:53:19 2018 +0800

    rapidio/rionet: do not free skb before reading its length
    
    skb is freed via dev_kfree_skb_any, however, skb->len is read then. This
    may result in a use-after-free bug.
    
    Fixes: e6161d64263 ("rapidio/rionet: rework driver initialization and removal")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ecebf55d27a11538ea84aee0be643dd953f830d5
Author: Pan Bian <bianpan2016@163.com>
Date:   Sun Nov 25 08:58:02 2018 +0800

    ext2: fix potential use after free
    
    The function ext2_xattr_set calls brelse(bh) to drop the reference count
    of bh. After that, bh may be freed. However, following brelse(bh),
    it reads bh->b_data via macro HDR(bh). This may result in a
    use-after-free bug. This patch moves brelse(bh) after reading field.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 7bada55ab50697861eee6bb7d60b41e68a961a9c
Author: Todd Kjos <tkjos@android.com>
Date:   Tue Nov 6 15:55:32 2018 -0800

    binder: fix race that allows malicious free of live buffer
    
    Malicious code can attempt to free buffers using the BC_FREE_BUFFER
    ioctl to binder. There are protections against a user freeing a buffer
    while in use by the kernel, however there was a window where
    BC_FREE_BUFFER could be used to free a recently allocated buffer that
    was not completely initialized. This resulted in a use-after-free
    detected by KASAN with a malicious test program.
    
    This window is closed by setting the buffer's allow_user_free attribute
    to 0 when the buffer is allocated or when the user has previously freed
    it instead of waiting for the caller to set it. The problem was that
    when the struct buffer was recycled, allow_user_free was stale and set
    to 1 allowing a free to go through.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Acked-by: Arve Hjønnevåg <arve@android.com>
    Cc: stable <stable@vger.kernel.org> # 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1a7bfe3807974e66f971f2589d4e0197ec0fced
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 22 14:36:17 2018 +0100

    ALSA: control: Fix race between adding and removing a user element
    
    The procedure for adding a user control element has some window opened
    for race against the concurrent removal of a user element.  This was
    caught by syzkaller, hitting a KASAN use-after-free error.
    
    This patch addresses the bug by wrapping the whole procedure to add a
    user control element with the card->controls_rwsem, instead of only
    around the increment of card->user_ctl_count.
    
    This required a slight code refactoring, too.  The function
    snd_ctl_add() is split to two parts: a core function to add the
    control element and a part calling it.  The former is called from the
    function for adding a user control element inside the controls_rwsem.
    
    One change to be noted is that snd_ctl_notify() for adding a control
    element gets called inside the controls_rwsem as well while it was
    called outside the rwsem.  But this should be OK, as snd_ctl_notify()
    takes another (finer) rwlock instead of rwsem, and the call of
    snd_ctl_notify() inside rwsem is already done in another code path.
    
    Reported-by: syzbot+dc09047bce3820621ba2@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commits)
      net: gemini: Fix copy/paste error
      net: phy: mscc: fix deadlock in vsc85xx_default_config
      dt-bindings: dsa: Fix typo in "probed"
      net: thunderx: set tso_hdrs pointer to NULL in nicvf_free_snd_queue
      net: amd: add missing of_node_put()
      team: no need to do team_notify_peers or team_mcast_rejoin when disabling port
      virtio-net: fail XDP set if guest csum is negotiated
      virtio-net: disable guest csum during XDP set
      net/sched: act_police: add missing spinlock initialization
      net: don't keep lonely packets forever in the gro hash
      net/ipv6: re-do dad when interface has IFF_NOARP flag change
      packet: copy user buffers before orphan or clone
      ibmvnic: Update driver queues after change in ring size support
      ibmvnic: Fix RX queue buffer cleanup
      net: thunderx: set xdp_prog to NULL if bpf_prog_add fails
      net/dim: Update DIM start sample after each DIM iteration
      net: faraday: ftmac100: remove netif_running(netdev) check before disabling interrupts
      net/smc: use after free fix in smc_wr_tx_put_slot()
      net/smc: atomic SMCD cursor handling
      net/smc: add SMC-D shutdown signal
      ...

commit 2084ac6c505a58f7efdec13eba633c6aaa085ca5
Author: Pan Bian <bianpan2016@163.com>
Date:   Fri Nov 23 15:56:33 2018 +0800

    exportfs: do not read dentry after free
    
    The function dentry_connected calls dput(dentry) to drop the previously
    acquired reference to dentry. In this case, dentry can be released.
    After that, IS_ROOT(dentry) checks the condition
    (dentry == dentry->d_parent), which may result in a use-after-free bug.
    This patch directly compares dentry with its parent obtained before
    dropping the reference.
    
    Fixes: a056cc8934c("exportfs: stop retrying once we race with
    rename/remove")
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 42a657f57628402c73237547f0134e083e2f6764
Author: Pan Bian <bianpan2016@163.com>
Date:   Fri Nov 23 18:10:15 2018 +0800

    btrfs: relocation: set trans to be NULL after ending transaction
    
    The function relocate_block_group calls btrfs_end_transaction to release
    trans when update_backref_cache returns 1, and then continues the loop
    body. If btrfs_block_rsv_refill fails this time, it will jump out the
    loop and the freed trans will be accessed. This may result in a
    use-after-free bug. The patch assigns NULL to trans after trans is
    released so that it will not be accessed.
    
    Fixes: 0647bf564f1 ("Btrfs: improve forever loop when doing balance relocation")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit c764da98a600a4b068d25c77164f092f159cecec
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Sat Oct 20 10:26:23 2018 -0400

    media: video-i2c: avoid accessing released memory area when removing driver
    
    The video device release() callback for video-i2c driver frees the whole
    struct video_i2c_data.  If there is no user left for the video device
    when video_unregister_device() is called, the release callback is executed.
    
    However, in video_i2c_remove() some fields (v4l2_dev, lock, and queue_lock)
    in struct video_i2c_data are still accessed after video_unregister_device()
    is called.
    
    This fixes the use after free by moving the code from video_i2c_remove()
    to the release() callback.
    
    Fixes: 5cebaac60974 ("media: video-i2c: add video-i2c driver")
    
    Reviewed-by: Matt Ranostay <matt.ranostay@konsulko.com>
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit e438bae43c1e08e688c09c410407b59fc1c173b4
Author: Ursula Braun <ursula.braun@linux.ibm.com>
Date:   Tue Nov 20 16:46:43 2018 +0100

    net/smc: use after free fix in smc_wr_tx_put_slot()
    
    In smc_wr_tx_put_slot() field pend->idx is used after being
    cleared. That means always idx 0 is cleared in the wr_tx_mask.
    This results in a broken administration of available WR send
    payload buffers.
    
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a6c66d6a08b88cc10aca9d3f65cfae31e7652a99
Author: Selvin Xavier <selvin.xavier@broadcom.com>
Date:   Wed Nov 21 00:05:01 2018 -0800

    RDMA/bnxt_re: Avoid accessing the device structure after it is freed
    
    When bnxt_re_ib_reg returns failure, the device structure gets
    freed. Driver tries to access the device pointer
    after it is freed.
    
    [ 4871.034744] Failed to register with netedev: 0xffffffa1
    [ 4871.034765] infiniband (null): Failed to register with IB: 0xffffffea
    [ 4871.046430] ==================================================================
    [ 4871.046437] BUG: KASAN: use-after-free in bnxt_re_task+0x63/0x180 [bnxt_re]
    [ 4871.046439] Write of size 4 at addr ffff880fa8406f48 by task kworker/u48:2/17813
    
    [ 4871.046443] CPU: 20 PID: 17813 Comm: kworker/u48:2 Kdump: loaded Tainted: G B OE  4.20.0-rc1+ #42
    [ 4871.046444] Hardware name: Dell Inc. PowerEdge R730/0599V5, BIOS 1.0.4 08/28/2014
    [ 4871.046447] Workqueue: bnxt_re bnxt_re_task [bnxt_re]
    [ 4871.046449] Call Trace:
    [ 4871.046454]  dump_stack+0x91/0xeb
    [ 4871.046458]  print_address_description+0x6a/0x2a0
    [ 4871.046461]  kasan_report+0x176/0x2d0
    [ 4871.046463]  ? bnxt_re_task+0x63/0x180 [bnxt_re]
    [ 4871.046466]  bnxt_re_task+0x63/0x180 [bnxt_re]
    [ 4871.046470]  process_one_work+0x216/0x5b0
    [ 4871.046471]  ? process_one_work+0x189/0x5b0
    [ 4871.046475]  worker_thread+0x4e/0x3d0
    [ 4871.046479]  kthread+0x10e/0x140
    [ 4871.046480]  ? process_one_work+0x5b0/0x5b0
    [ 4871.046482]  ? kthread_stop+0x220/0x220
    [ 4871.046486]  ret_from_fork+0x3a/0x50
    
    [ 4871.046492] The buggy address belongs to the page:
    [ 4871.046494] page:ffffea003ea10180 count:0 mapcount:0 mapping:0000000000000000 index:0x0
    [ 4871.046495] flags: 0x57ffffc0000000()
    [ 4871.046498] raw: 0057ffffc0000000 0000000000000000 ffffea003ea10188 0000000000000000
    [ 4871.046500] raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    [ 4871.046501] page dumped because: kasan: bad access detected
    
    Avoid accessing the device structure once it is freed.
    
    Fixes: 497158aa5f52 ("RDMA/bnxt_re: Fix the ib_reg failure cleanup")
    Signed-off-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 7513edbc096a006f967eaf39088091442e623b83
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Nov 20 20:24:38 2018 +0000

    drm/i915/gvt: Avoid use-after-free iterating the gtt list
    
    Found by smatch:
    
    drivers/gpu/drm/i915/gvt/gtt.c:2452 intel_vgpu_destroy_ggtt_mm() error: dereferencing freed memory 'pos'
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commits)
      tuntap: fix multiqueue rx
      ipv6: Fix PMTU updates for UDP/raw sockets in presence of VRF
      tipc: don't assume linear buffer when reading ancillary data
      tipc: fix lockdep warning when reinitilaizing sockets
      net-gro: reset skb->pkt_type in napi_reuse_skb()
      tc-testing: tdc.py: Guard against lack of returncode in executed command
      tc-testing: tdc.py: ignore errors when decoding stdout/stderr
      ip_tunnel: don't force DF when MTU is locked
      MAINTAINERS: Add entry for CAKE qdisc
      net: bridge: fix vlan stats use-after-free on destruction
      socket: do a generic_file_splice_read when proto_ops has no splice_read
      net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
      Revert "net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs"
      net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
      net/sched: act_pedit: fix memory leak when IDR allocation fails
      net: lantiq: Fix returned value in case of error in 'xrx200_probe()'
      ipv6: fix a dst leak when removing its exception
      net: mvneta: Don't advertise 2.5G modes
      drivers/net/ethernet/qlogic/qed/qed_rdma.h: fix typo
      net/mlx4: Fix UBSAN warning of signed integer overflow
      ...

commit 5d1e9c2212ea6b4dd735e4fc3dd6279a365d5d10
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:49 2018 +0200

    mtd: rawnand: atmel: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the nfc child
    node instead of using of_find_compatible_node(), which searches the
    entire tree from a given start node and thus can return an unrelated
    (i.e. non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the node of the device being probed).
    
    While at it, also fix a related nfc-node reference leak.
    
    Fixes: f88fc122cc34 ("mtd: nand: Cleanup/rework the atmel_nand driver")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Cc: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: Josh Wu <rainyfeeling@outlook.com>
    Cc: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>

commit 9d332e69c1dc74dcd748de7cbd2dac5c61bda265
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Fri Nov 16 18:50:01 2018 +0200

    net: bridge: fix vlan stats use-after-free on destruction
    
    Syzbot reported a use-after-free of the global vlan context on port vlan
    destruction. When I added per-port vlan stats I missed the fact that the
    global vlan context can be freed before the per-port vlan rcu callback.
    There're a few different ways to deal with this, I've chosen to add a
    new private flag that is set only when per-port stats are allocated so
    we can directly check it on destruction without dereferencing the global
    context at all. The new field in net_bridge_vlan uses a hole.
    
    v2: cosmetic change, move the check to br_process_vlan_info where the
        other checks are done
    v3: add change log in the patch, add private (in-kernel only) flags in a
        hole in net_bridge_vlan struct and use that instead of mixing
        user-space flags with private flags
    
    Fixes: 9163a0fc1f0c ("net: bridge: add support for per-port vlan stats")
    Reported-by: syzbot+04681da557a0e49a52e5@syzkaller.appspotmail.com
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29e3880109e357fdc607b4393f8308cef6af9413
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Nov 12 22:43:45 2018 +0100

    netfilter: nf_tables: fix use-after-free when deleting compat expressions
    
    nft_compat ops do not have static storage duration, unlike all other
    expressions.
    
    When nf_tables_expr_destroy() returns, expr->ops might have been
    free'd already, so we need to store next address before calling
    expression destructor.
    
    For same reason, we can't deref match pointer after nft_xt_put().
    
    This can be easily reproduced by adding msleep() before
    nft_match_destroy() returns.
    
    Fixes: 0ca743a55991 ("netfilter: nf_tables: add compatibility layer for x_tables")
    Reported-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 032080ab43ac02cf7446b3954ace7ccce1abcad6
Author: Moni Shoua <monis@mellanox.com>
Date:   Thu Nov 8 21:10:12 2018 +0200

    IB/mlx5: Lock QP during page fault handling
    
    When page fault event for a WQE arrives, the event data contains the
    resource (e.g. QP) number which will later be used by the page fault
    handler to retrieve the resource. Meanwhile, another context can destroy
    the resource and cause use-after-free. To avoid that, take a reference on the
    resource when handler starts and release it when it ends.
    
    Page fault events for RDMA operations don't need to be protected because
    the driver doesn't need to access the QP in the page fault handler.
    
    Fixes: d9aaed838765 ("{net,IB}/mlx5: Refactor page fault handling")
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

commit 8d20d6e9301d7b3777d66d47dd5b89acd645cd39
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 12 09:54:48 2018 -0500

    audit: Embed key into chunk
    
    Currently chunk hash key (which is in fact pointer to the inode) is
    derived as chunk->mark.conn->obj. It is tricky to make this dereference
    reliable for hash table lookups only under RCU as mark can get detached
    from the connector and connector gets freed independently of the
    running lookup. Thus there is a possible use after free / NULL ptr
    dereference issue:
    
    CPU1                                    CPU2
                                            untag_chunk()
                                              ...
    audit_tree_lookup()
      list_for_each_entry_rcu(p, list, hash) {
                                              list_del_rcu(&chunk->hash);
                                              fsnotify_destroy_mark(entry);
                                              fsnotify_put_mark(entry)
        chunk_to_key(p)
          if (!chunk->mark.connector)
                                                ...
                                                hlist_del_init_rcu(&mark->obj_list);
                                                if (hlist_empty(&conn->list)) {
                                                  inode = fsnotify_detach_connector_from_object(conn);
                                                mark->connector = NULL;
                                                ...
                                                frees connector from workqueue
          chunk->mark.connector->obj
    
    This race is probably impossible to hit in practice as the race window
    on CPU1 is very narrow and CPU2 has a lot of code to execute. Still it's
    better to have this fixed. Since the inode the chunk is attached to is
    constant during chunk's lifetime it is easy to cache the key in the
    chunk itself and thus avoid these issues.
    
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Paul Moore <paul@paul-moore.com>

commit ebacb81273599555a7a19f7754a1451206a5fc4f
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Fri Nov 9 14:51:46 2018 +0100

    fuse: fix use-after-free in fuse_direct_IO()
    
    In async IO blocking case the additional reference to the io is taken for
    it to survive fuse_aio_complete(). In non blocking case this additional
    reference is not needed, however we still reference io to figure out
    whether to wait for completion or not. This is wrong and will lead to
    use-after-free. Fix it by storing blocking information in separate
    variable.
    
    This was spotted by KASAN when running generic/208 fstest.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Reported-by: Zorro Lang <zlang@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 744742d692e3 ("fuse: Add reference counting for fuse_io_priv")
    Cc: <stable@vger.kernel.org> # v4.6

commit 7c528e457d53c75107d5aa56892316d265c778de
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Thu Oct 4 20:25:13 2018 -0700

    of: overlay: add missing of_node_put() after add new node to changeset
    
    The refcount of a newly added overlay node decrements to one
    (instead of zero) when the overlay changeset is destroyed.  This
    change will cause the final decrement be to zero.
    
    After applying this patch, new validation warnings will be
    reported from the devicetree unittest during boot due to
    a pre-existing devicetree bug.  The warnings will be similar to:
    
      OF: ERROR: memory leak before free overlay changeset,  /testcase-data/overlay-node/test-bus/test-unittest4
    
    This pre-existing devicetree bug will also trigger a WARN_ONCE() from
    refcount_sub_and_test_checked() when an overlay changeset is
    destroyed without having first been applied.  This scenario occurs
    when an error in the overlay is detected during the overlay changeset
    creation:
    
      WARNING: CPU: 0 PID: 1 at lib/refcount.c:187 refcount_sub_and_test_checked+0xa8/0xbc
      refcount_t: underflow; use-after-free.
    
      (unwind_backtrace) from (show_stack+0x10/0x14)
      (show_stack) from (dump_stack+0x6c/0x8c)
      (dump_stack) from (__warn+0xdc/0x104)
      (__warn) from (warn_slowpath_fmt+0x44/0x6c)
      (warn_slowpath_fmt) from (refcount_sub_and_test_checked+0xa8/0xbc)
      (refcount_sub_and_test_checked) from (kobject_put+0x24/0x208)
      (kobject_put) from (of_changeset_destroy+0x2c/0xb4)
      (of_changeset_destroy) from (free_overlay_changeset+0x1c/0x9c)
      (free_overlay_changeset) from (of_overlay_remove+0x284/0x2cc)
      (of_overlay_remove) from (of_unittest_apply_revert_overlay_check.constprop.4+0xf8/0x1e8)
      (of_unittest_apply_revert_overlay_check.constprop.4) from (of_unittest_overlay+0x960/0xed8)
      (of_unittest_overlay) from (of_unittest+0x1cc4/0x2138)
      (of_unittest) from (do_one_initcall+0x4c/0x28c)
      (do_one_initcall) from (kernel_init_freeable+0x29c/0x378)
      (kernel_init_freeable) from (kernel_init+0x8/0x110)
      (kernel_init) from (ret_from_fork+0x14/0x2c)
    
    Tested-by: Alan Tull <atull@kernel.org>
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>

commit 539b44e70c5b4ad82d2c0c97a4dfb37523d891f6
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Oct 18 10:36:19 2018 +0300

    ath10k: fixup extended per sta tx statistics
    
    I had a couple concerns with this code.  First, we definitely need to
    set the error code if the kzalloc() fails.  Secondly, I was worried that
    if we didn't set "arsta->tx_stats" to NULL after freeing it, then it
    looks to me like it might lead to a use after free.  I can't test that,
    but it's harmless to set it to NULL so I did.
    
    Fixes: a904417fc876 ("ath10k: add extended per sta tx statistics support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 18534df419041e6c1f4b41af56ee7d41f757815c
Author: Muchun Song <smuchun@gmail.com>
Date:   Thu Nov 1 21:12:50 2018 +0800

    gpiolib: Fix possible use after free on label
    
    gpiod_request_commit() copies the pointer to the label passed as
    an argument only to be used later. But there's a chance the caller
    could immediately free the passed string(e.g., local variable).
    This could trigger a use after free when we use gpio label(e.g.,
    gpiochip_unlock_as_irq(), gpiochip_is_requested()).
    
    To be on the safe side: duplicate the string with kstrdup_const()
    so that if an unaware user passes an address to a stack-allocated
    buffer, we won't get the arbitrary label.
    
    Also fix gpiod_set_consumer_name().
    
    Signed-off-by: Muchun Song <smuchun@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e19e5be8b4cafa8b3f8b0cd1b1dfe20fa0145b83
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 2 19:04:08 2018 +0100

    s390/qeth: sanitize strings in debug messages
    
    As Documentation/s390/s390dbf.txt states quite clearly, using any
    pointer in sprinf-formatted s390dbf debug entries is dangerous.
    The pointers are dereferenced whenever the trace file is read from.
    So if the referenced data has a shorter life-time than the trace file,
    any read operation can result in a use-after-free.
    
    So rip out all hazardous use of indirect data, and replace any usage of
    dev_name() and such by the Bus ID number.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 153fcd5f6d93b8e1e4040b1337f564a10f8d93af
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Nov 2 08:50:51 2018 +0800

    block: brd: associate with queue until adding disk
    
    brd_free() may be called in failure path on one brd instance which
    disk isn't added yet, so release handler of gendisk may free the
    associated request_queue early and causes the following use-after-free[1].
    
    This patch fixes this issue by associating gendisk with request_queue
    just before adding disk.
    
    [1] KASAN: use-after-free Read in del_timer_syncNon-volatile memory driver v1.3
    Linux agpgart interface v0.103
    [drm] Initialized vgem 1.0.0 20120112 for virtual device on minor 0
    usbcore: registered new interface driver udl
    ==================================================================
    BUG: KASAN: use-after-free in __lock_acquire+0x36d9/0x4c20
    kernel/locking/lockdep.c:3218
    Read of size 8 at addr ffff8801d1b6b540 by task swapper/0/1
    
    CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.19.0+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x244/0x39d lib/dump_stack.c:113
      print_address_description.cold.7+0x9/0x1ff mm/kasan/report.c:256
      kasan_report_error mm/kasan/report.c:354 [inline]
      kasan_report.cold.8+0x242/0x309 mm/kasan/report.c:412
      __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
      __lock_acquire+0x36d9/0x4c20 kernel/locking/lockdep.c:3218
      lock_acquire+0x1ed/0x520 kernel/locking/lockdep.c:3844
      del_timer_sync+0xb7/0x270 kernel/time/timer.c:1283
      blk_cleanup_queue+0x413/0x710 block/blk-core.c:809
      brd_free+0x5d/0x71 drivers/block/brd.c:422
      brd_init+0x2eb/0x393 drivers/block/brd.c:518
      do_one_initcall+0x145/0x957 init/main.c:890
      do_initcall_level init/main.c:958 [inline]
      do_initcalls init/main.c:966 [inline]
      do_basic_setup init/main.c:984 [inline]
      kernel_init_freeable+0x5c6/0x6b9 init/main.c:1148
      kernel_init+0x11/0x1ae init/main.c:1068
      ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:350
    
    Reported-by: syzbot+3701447012fe951dabb2@syzkaller.appspotmail.com
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit
      btrfs: fix insert_reserved error handling
      btrfs: only free reserved extent if we didn't insert it
      btrfs: don't use ctl->free_space for max_extent_size
      btrfs: set max_extent_size properly
      btrfs: reset max_extent_size properly
      MAINTAINERS: update my email address for btrfs
      btrfs: delayed-ref: extract find_first_ref_head from find_ref_head
      Btrfs: fix deadlock when writing out free space caches
      Btrfs: fix assertion on fsync of regular file when using no-holes feature
      Btrfs: fix null pointer dereference on compressed write path error

commit df132eff463873e14e019a07f387b4d577d6d1f9
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Oct 29 23:10:29 2018 +0800

    sctp: clear the transport of some out_chunk_list chunks in sctp_assoc_rm_peer
    
    If a transport is removed by asconf but there still are some chunks with
    this transport queuing on out_chunk_list, later an use-after-free issue
    will be caused when accessing this transport from these chunks in
    sctp_outq_flush().
    
    This is an old bug, we fix it by clearing the transport of these chunks
    in out_chunk_list when removing a transport in sctp_assoc_rm_peer().
    
    Reported-by: syzbot+56a40ceee5fb35932f4d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a22712a962912faf257e857ab6857f56a93cfb34
Author: Shalom Toledo <shalomt@mellanox.com>
Date:   Mon Oct 29 14:26:16 2018 +0000

    mlxsw: core: Fix devlink unregister flow
    
    After a failed reload, the driver is still registered to devlink, its
    devlink instance is still allocated and the 'reload_fail' flag is set.
    Then, in the next reload try, the driver's allocated devlink instance will
    be freed without unregistering from devlink and its components (e.g,
    resources). This scenario can cause a use-after-free if the user tries to
    execute command via devlink user-space tool.
    
    Fix by not freeing the devlink instance during reload (failed or not).
    
    Fixes: 24cc68ad6c46 ("mlxsw: core: Add support for reload")
    Signed-off-by: Shalom Toledo <shalomt@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      firmware: tegra: bpmp: Implement suspend/resume support
      drivers: clk: Add ZynqMP clock driver
      dt-bindings: clock: Add bindings for ZynqMP clock driver
      firmware: xilinx: Add zynqmp IOCTL API for device control
      Documentation: xilinx: Add documentation for eemi APIs
      MAINTAINERS: imx: include drivers/firmware/imx path
      firmware: imx: add misc svc support
      firmware: imx: add SCU firmware driver support
      reset: Fix potential use-after-free in __of_reset_control_get()
      dt-bindings: arm: fsl: add scu binding doc
      soc: fsl: qbman: add interrupt coalesce changing APIs
      soc: fsl: bman_portals: defer probe after bman's probe
      soc: fsl: qbman: Use last response to determine valid bit
      soc: fsl: qbman: Add 64 bit DMA addressing requirement to QBMan
      soc: fsl: qbman: replace CPU 0 with any online CPU in hotplug handlers
      soc: fsl: qbman: Check if CPU is offline when initializing portals
      reset: qcom: PDC Global (Power Domain Controller) reset controller
      dt-bindings: reset: Add PDC Global binding for SDM845 SoCs
      reset: Grammar s/more then once/more than once/
      bus: ti-sysc: Just use SET_NOIRQ_SYSTEM_SLEEP_PM_OPS
      ...

commits)
      9p/trans_fd: put worker reqs on destroy
      9p/trans_fd: abort p9_read_work if req status changed
      9p: potential NULL dereference
      9p locks: fix glock.client_id leak in do_lock
      9p: p9dirent_read: check network-provided name length
      9p/rdma: remove useless check in cm_event_handler
      9p: acl: fix uninitialized iattr access
      9p locks: add mount option for lock retry interval
      9p: do not trust pdu content for stat item size
      9p: Rename req to rreq in trans_fd
      9p: fix spelling mistake in fall-through annotation
      9p/rdma: do not disconnect on down_interruptible EAGAIN
      9p: Add refcount to p9_req_t
      9p: rename p9_free_req() function
      9p: add a per-client fcall kmem_cache
      9p: embed fcall in req to round down buffer allocs
      9p: Remove p9_idpool
      9p: Use a slab for allocating requests
      9p: clear dangling pointers in p9stat_free
      v9fs_dir_readdir: fix double-free on p9stat_read error
      ...

commit d8fd9e106fbc291167ebb675ad69234597d0fd98
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Sat Oct 27 00:49:02 2018 +0200

    bpf: fix wrong helper enablement in cgroup local storage
    
    Commit cd3394317653 ("bpf: introduce the bpf_get_local_storage()
    helper function") enabled the bpf_get_local_storage() helper also
    for BPF program types where it does not make sense to use them.
    
    They have been added both in sk_skb_func_proto() and sk_msg_func_proto()
    even though both program types are not invoked in combination with
    cgroups, and neither through BPF_PROG_RUN_ARRAY(). In the latter the
    bpf_cgroup_storage_set() is set shortly before BPF program invocation.
    
    Later, the helper bpf_get_local_storage() retrieves this prior set
    up per-cpu pointer and hands the buffer to the BPF program. The map
    argument in there solely retrieves the enum bpf_cgroup_storage_type
    from a local storage map associated with the program and based on the
    type returns either the global or per-cpu storage. However, there
    is no specific association between the program's map and the actual
    content in bpf_cgroup_storage[].
    
    Meaning, any BPF program that would have been properly run from the
    cgroup side through BPF_PROG_RUN_ARRAY() where bpf_cgroup_storage_set()
    was performed, and that is later unloaded such that prog / maps are
    teared down will cause a use after free if that pointer is retrieved
    from programs that are not run through BPF_PROG_RUN_ARRAY() but have
    the cgroup local storage helper enabled in their func proto.
    
    Lets just remove it from the two sock_map program types to fix it.
    Auditing through the types where this helper is enabled, it appears
    that these are the only ones where it was mistakenly allowed.
    
    Fixes: cd3394317653 ("bpf: introduce the bpf_get_local_storage() helper function")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Roman Gushchin <guro@fb.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Roman Gushchin <guro@fb.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commits)
      ext4: fix use-after-free race in ext4_remount()'s error path
      ext4: cache NULL when both default_acl and acl are NULL
      docs: promote the ext4 data structures book to top level
      docs: move ext4 administrative docs to admin-guide/
      jbd2: fix use after free in jbd2_log_do_checkpoint()
      ext4: propagate error from dquot_initialize() in EXT4_IOC_FSSETXATTR
      ext4: fix setattr project check in fssetxattr ioctl
      docs: make ext4 readme tables readable
      docs: fix ext4 documentation table formatting problems
      docs: generate a separate ext4 pdf file from the documentation
      ext4: convert fault handler to use vm_fault_t type
      ext4: initialize retries variable in ext4_da_write_inline_data_begin()
      ext4: fix EXT4_IOC_SWAP_BOOT
      ext4: fix build error when DX_DEBUG is defined
      ext4: fix argument checking in EXT4_IOC_MOVE_EXT
      ext4: fix reserved cluster accounting at page invalidation time
      ext4: adjust reserved cluster count when removing extents
      ext4: reduce reserved cluster count by number of allocated clusters
      ext4: fix reserved cluster accounting at delayed write time
      ext4: add new pending reservation mechanism
      ...

commits)
      xfs: cancel COW blocks before swapext
      xfs: clear ail delwri queued bufs on unmount of shutdown fs
      xfs: use offsetof() in place of offset macros for __xfsstats
      xfs: Fix xqmstats offsets in /proc/fs/xfs/xqmstat
      xfs: fix use-after-free race in xfs_buf_rele
      xfs: Add attibute remove and helper functions
      xfs: Add attibute set and helper functions
      xfs: Add helper function xfs_attr_try_sf_addname
      xfs: Move fs/xfs/xfs_attr.h to fs/xfs/libxfs/xfs_attr.h
      xfs: issue log message on user force shutdown
      xfs: fix buffer state management in xrep_findroot_block
      xfs: always assign buffer verifiers when one is provided
      xfs: xrep_findroot_block should reject root blocks with siblings
      xfs: add a define for statfs magic to uapi
      xfs: print dangling delalloc extents
      xfs: fix fork selection in xfs_find_trim_cow_extent
      xfs: remove the unused trimmed argument from xfs_reflink_trim_around_shared
      xfs: remove the unused shared argument to xfs_reflink_reserve_cow
      xfs: handle zeroing in xfs_file_iomap_begin_delay
      xfs: remove suport for filesystems without unwritten extent flag
      ...

commit 9844fb2e351311210e6660a9a1c62d17424a6145
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:53 2018 +0200

    power: supply: twl4030-charger: fix OF sibling-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the usb sibling
    node instead of using of_find_compatible_node(), which searches the
    entire tree from a given start node and thus can return an unrelated
    (non-sibling) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the parent device node).
    
    While at it, also fix the related phy-node reference leak.
    
    Fixes: f5e4edb8c888 ("power: twl4030_charger: find associated phy by more reliable means.")
    Cc: stable <stable@vger.kernel.org>     # 4.2
    Cc: NeilBrown <neilb@suse.de>
    Cc: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Sebastian Reichel <sre@kernel.org>
    Reviewed-by: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 5bf59773aaf36dd62117dc83d50e1bbf9ef432da
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:52 2018 +0200

    NFC: nfcmrvl_uart: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the nfc child
    node instead of using of_find_compatible_node(), which searches the
    entire tree from a given start node and thus can return an unrelated
    (i.e. non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the parent node).
    
    Fixes: e097dc624f78 ("NFC: nfcmrvl: add UART driver")
    Fixes: d8e018c0b321 ("NFC: nfcmrvl: update device tree bindings for Marvell NFC")
    Cc: stable <stable@vger.kernel.org>     # 4.2
    Cc: Vincent Cuissard <cuissard@marvell.com>
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit ac63043d8cb5503c7e0fe110f947eacf2663804e
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:51 2018 +0200

    net: stmmac: dwmac-sun8i: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the mdio-internal
    child node instead of using of_find_compatible_node(), which searches
    the entire tree from a given start node and thus can return an unrelated
    (i.e. non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the mdio-mux node). Fortunately, this was inadvertently
    balanced by a failure to drop the mdio-mux reference after lookup.
    
    While at it, also fix the related mdio-internal- and phy-node reference
    leaks.
    
    Fixes: 634db83b8265 ("net: stmmac: dwmac-sun8i: Handle integrated/external MDIOs")
    Tested-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Giuseppe Cavallaro <peppe.cavallaro@st.com>
    Cc: Alexandre Torgue <alexandre.torgue@st.com>
    Cc: Jose Abreu <joabreu@synopsys.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit d397dbe606120a1ea1b11b0020c3f7a3852da5ac
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:50 2018 +0200

    net: bcmgenet: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the mdio child
    node instead of using of_find_compatible_node(), which searches the
    entire tree from a given start node and thus can return an unrelated
    (i.e. non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the node of the device being probed).
    
    Fixes: aa09677cba42 ("net: bcmgenet: add MDIO routines")
    Cc: stable <stable@vger.kernel.org>     # 3.15
    Cc: David S. Miller <davem@davemloft.net>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit f9a7082327e26f54067a49cac2316d31e0cc8ba7
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:47 2018 +0200

    drm/msm: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the legacy
    pwrlevels child node instead of using of_find_compatible_node(), which
    searches the entire tree from a given start node and thus can return an
    unrelated (i.e.  non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the probed device's node).
    
    While at it, also fix the related child-node reference leak.
    
    Fixes: e2af8b6b0ca1 ("drm/msm: gpu: Use OPP tables if we can")
    Cc: stable <stable@vger.kernel.org>     # 4.12
    Cc: Jordan Crouse <jcrouse@codeaurora.org>
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: David Airlie <airlied@linux.ie>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit ceff2f4dcd44abf35864d9a99f85ac619e89a01d
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:46 2018 +0200

    drm/mediatek: fix OF sibling-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the sibling
    instead of using of_find_compatible_node(), which searches the entire
    tree from a given start node and thus can return an unrelated (i.e.
    non-sibling) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the parent device node).
    
    While at it, also fix the related cec-node reference leak.
    
    Fixes: 8f83f26891e1 ("drm/mediatek: Add HDMI support")
    Cc: stable <stable@vger.kernel.org>     # 4.8
    Cc: Junzhi Zhao <junzhi.zhao@mediatek.com>
    Cc: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: CK Hu <ck.hu@mediatek.com>
    Cc: David Airlie <airlied@linux.ie>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 604d415e2bd642b7e02c80e719e0396b9d4a77a6
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 22 09:24:27 2018 -0700

    llc: do not use sk_eat_skb()
    
    syzkaller triggered a use-after-free [1], caused by a combination of
    skb_get() in llc_conn_state_process() and usage of sk_eat_skb()
    
    sk_eat_skb() is assuming the skb about to be freed is only used by
    the current thread. TCP/DCCP stacks enforce this because current
    thread holds the socket lock.
    
    llc_conn_state_process() wants to make sure skb does not disappear,
    and holds a reference on the skb it manipulates. But as soon as this
    skb is added to socket receive queue, another thread can consume it.
    
    This means that llc must use regular skb_unlink() and kfree_skb()
    so that both producer and consumer can safely work on the same skb.
    
    [1]
    BUG: KASAN: use-after-free in atomic_read include/asm-generic/atomic-instrumented.h:21 [inline]
    BUG: KASAN: use-after-free in refcount_read include/linux/refcount.h:43 [inline]
    BUG: KASAN: use-after-free in skb_unref include/linux/skbuff.h:967 [inline]
    BUG: KASAN: use-after-free in kfree_skb+0xb7/0x580 net/core/skbuff.c:655
    Read of size 4 at addr ffff8801d1f6fba4 by task ksoftirqd/1/18
    
    CPU: 1 PID: 18 Comm: ksoftirqd/1 Not tainted 4.19.0-rc8+ #295
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c4/0x2b6 lib/dump_stack.c:113
     print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
     check_memory_region_inline mm/kasan/kasan.c:260 [inline]
     check_memory_region+0x13e/0x1b0 mm/kasan/kasan.c:267
     kasan_check_read+0x11/0x20 mm/kasan/kasan.c:272
     atomic_read include/asm-generic/atomic-instrumented.h:21 [inline]
     refcount_read include/linux/refcount.h:43 [inline]
     skb_unref include/linux/skbuff.h:967 [inline]
     kfree_skb+0xb7/0x580 net/core/skbuff.c:655
     llc_sap_state_process+0x9b/0x550 net/llc/llc_sap.c:224
     llc_sap_rcv+0x156/0x1f0 net/llc/llc_sap.c:297
     llc_sap_handler+0x65e/0xf80 net/llc/llc_sap.c:438
     llc_rcv+0x79e/0xe20 net/llc/llc_input.c:208
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4913
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5023
     process_backlog+0x218/0x6f0 net/core/dev.c:5829
     napi_poll net/core/dev.c:6249 [inline]
     net_rx_action+0x7c5/0x1950 net/core/dev.c:6315
     __do_softirq+0x30c/0xb03 kernel/softirq.c:292
     run_ksoftirqd+0x94/0x100 kernel/softirq.c:653
     smpboot_thread_fn+0x68b/0xa00 kernel/smpboot.c:164
     kthread+0x35a/0x420 kernel/kthread.c:246
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:413
    
    Allocated by task 18:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc_node+0x144/0x730 mm/slab.c:3644
     __alloc_skb+0x119/0x770 net/core/skbuff.c:193
     alloc_skb include/linux/skbuff.h:995 [inline]
     llc_alloc_frame+0xbc/0x370 net/llc/llc_sap.c:54
     llc_station_ac_send_xid_r net/llc/llc_station.c:52 [inline]
     llc_station_rcv+0x1dc/0x1420 net/llc/llc_station.c:111
     llc_rcv+0xc32/0xe20 net/llc/llc_input.c:220
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4913
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5023
     process_backlog+0x218/0x6f0 net/core/dev.c:5829
     napi_poll net/core/dev.c:6249 [inline]
     net_rx_action+0x7c5/0x1950 net/core/dev.c:6315
     __do_softirq+0x30c/0xb03 kernel/softirq.c:292
    
    Freed by task 16383:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x83/0x290 mm/slab.c:3756
     kfree_skbmem+0x154/0x230 net/core/skbuff.c:582
     __kfree_skb+0x1d/0x20 net/core/skbuff.c:642
     sk_eat_skb include/net/sock.h:2366 [inline]
     llc_ui_recvmsg+0xec2/0x1610 net/llc/af_llc.c:882
     sock_recvmsg_nosec net/socket.c:794 [inline]
     sock_recvmsg+0xd0/0x110 net/socket.c:801
     ___sys_recvmsg+0x2b6/0x680 net/socket.c:2278
     __sys_recvmmsg+0x303/0xb90 net/socket.c:2390
     do_sys_recvmmsg+0x181/0x1a0 net/socket.c:2466
     __do_sys_recvmmsg net/socket.c:2484 [inline]
     __se_sys_recvmmsg net/socket.c:2480 [inline]
     __x64_sys_recvmmsg+0xbe/0x150 net/socket.c:2480
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801d1f6fac0
     which belongs to the cache skbuff_head_cache of size 232
    The buggy address is located 228 bytes inside of
     232-byte region [ffff8801d1f6fac0, ffff8801d1f6fba8)
    The buggy address belongs to the page:
    page:ffffea000747dbc0 count:1 mapcount:0 mapping:ffff8801d9be7680 index:0xffff8801d1f6fe80
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0007346e88 ffffea000705b108 ffff8801d9be7680
    raw: ffff8801d1f6fe80 ffff8801d1f6f0c0 000000010000000b 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801d1f6fa80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801d1f6fb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801d1f6fb80: fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc
                                   ^
     ffff8801d1f6fc00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801d1f6fc80: fb fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9084cb6a24bf5838a665af92ded1af8363f9e563
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 22 10:43:06 2018 +0100

    Btrfs: fix use-after-free when dumping free space
    
    We were iterating a block group's free space cache rbtree without locking
    first the lock that protects it (the free_space_ctl->free_space_offset
    rbtree is protected by the free_space_ctl->tree_lock spinlock).
    
    KASAN reported an use-after-free problem when iterating such a rbtree due
    to a concurrent rbtree delete:
    
    [ 9520.359168] ==================================================================
    [ 9520.359656] BUG: KASAN: use-after-free in rb_next+0x13/0x90
    [ 9520.359949] Read of size 8 at addr ffff8800b7ada500 by task btrfs-transacti/1721
    [ 9520.360357]
    [ 9520.360530] CPU: 4 PID: 1721 Comm: btrfs-transacti Tainted: G             L    4.19.0-rc8-nbor #555
    [ 9520.360990] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [ 9520.362682] Call Trace:
    [ 9520.362887]  dump_stack+0xa4/0xf5
    [ 9520.363146]  print_address_description+0x78/0x280
    [ 9520.363412]  kasan_report+0x263/0x390
    [ 9520.363650]  ? rb_next+0x13/0x90
    [ 9520.363873]  __asan_load8+0x54/0x90
    [ 9520.364102]  rb_next+0x13/0x90
    [ 9520.364380]  btrfs_dump_free_space+0x146/0x160 [btrfs]
    [ 9520.364697]  dump_space_info+0x2cd/0x310 [btrfs]
    [ 9520.364997]  btrfs_reserve_extent+0x1ee/0x1f0 [btrfs]
    [ 9520.365310]  __btrfs_prealloc_file_range+0x1cc/0x620 [btrfs]
    [ 9520.365646]  ? btrfs_update_time+0x180/0x180 [btrfs]
    [ 9520.365923]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.366204]  ? btrfs_alloc_data_chunk_ondemand+0x2c0/0x5c0 [btrfs]
    [ 9520.366549]  btrfs_prealloc_file_range_trans+0x23/0x30 [btrfs]
    [ 9520.366880]  cache_save_setup+0x42e/0x580 [btrfs]
    [ 9520.367220]  ? btrfs_check_data_free_space+0xd0/0xd0 [btrfs]
    [ 9520.367518]  ? lock_downgrade+0x2f0/0x2f0
    [ 9520.367799]  ? btrfs_write_dirty_block_groups+0x11f/0x6e0 [btrfs]
    [ 9520.368104]  ? kasan_check_read+0x11/0x20
    [ 9520.368349]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.368638]  btrfs_write_dirty_block_groups+0x2af/0x6e0 [btrfs]
    [ 9520.368978]  ? btrfs_start_dirty_block_groups+0x870/0x870 [btrfs]
    [ 9520.369282]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.369534]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.369811]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.370137]  commit_cowonly_roots+0x4b9/0x610 [btrfs]
    [ 9520.370560]  ? commit_fs_roots+0x350/0x350 [btrfs]
    [ 9520.370926]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.371285]  btrfs_commit_transaction+0x5e5/0x10e0 [btrfs]
    [ 9520.371612]  ? btrfs_apply_pending_changes+0x90/0x90 [btrfs]
    [ 9520.371943]  ? start_transaction+0x168/0x6c0 [btrfs]
    [ 9520.372257]  transaction_kthread+0x21c/0x240 [btrfs]
    [ 9520.372537]  kthread+0x1d2/0x1f0
    [ 9520.372793]  ? btrfs_cleanup_transaction+0xb50/0xb50 [btrfs]
    [ 9520.373090]  ? kthread_park+0xb0/0xb0
    [ 9520.373329]  ret_from_fork+0x3a/0x50
    [ 9520.373567]
    [ 9520.373738] Allocated by task 1804:
    [ 9520.373974]  kasan_kmalloc+0xff/0x180
    [ 9520.374208]  kasan_slab_alloc+0x11/0x20
    [ 9520.374447]  kmem_cache_alloc+0xfc/0x2d0
    [ 9520.374731]  __btrfs_add_free_space+0x40/0x580 [btrfs]
    [ 9520.375044]  unpin_extent_range+0x4f7/0x7a0 [btrfs]
    [ 9520.375383]  btrfs_finish_extent_commit+0x15f/0x4d0 [btrfs]
    [ 9520.375707]  btrfs_commit_transaction+0xb06/0x10e0 [btrfs]
    [ 9520.376027]  btrfs_alloc_data_chunk_ondemand+0x237/0x5c0 [btrfs]
    [ 9520.376365]  btrfs_check_data_free_space+0x81/0xd0 [btrfs]
    [ 9520.376689]  btrfs_delalloc_reserve_space+0x25/0x80 [btrfs]
    [ 9520.377018]  btrfs_direct_IO+0x42e/0x6d0 [btrfs]
    [ 9520.377284]  generic_file_direct_write+0x11e/0x220
    [ 9520.377587]  btrfs_file_write_iter+0x472/0xac0 [btrfs]
    [ 9520.377875]  aio_write+0x25c/0x360
    [ 9520.378106]  io_submit_one+0xaa0/0xdc0
    [ 9520.378343]  __se_sys_io_submit+0xfa/0x2f0
    [ 9520.378589]  __x64_sys_io_submit+0x43/0x50
    [ 9520.378840]  do_syscall_64+0x7d/0x240
    [ 9520.379081]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 9520.379387]
    [ 9520.379557] Freed by task 1802:
    [ 9520.379782]  __kasan_slab_free+0x173/0x260
    [ 9520.380028]  kasan_slab_free+0xe/0x10
    [ 9520.380262]  kmem_cache_free+0xc1/0x2c0
    [ 9520.380544]  btrfs_find_space_for_alloc+0x4cd/0x4e0 [btrfs]
    [ 9520.380866]  find_free_extent+0xa99/0x17e0 [btrfs]
    [ 9520.381166]  btrfs_reserve_extent+0xd5/0x1f0 [btrfs]
    [ 9520.381474]  btrfs_get_blocks_direct+0x60b/0xbd0 [btrfs]
    [ 9520.381761]  __blockdev_direct_IO+0x10ee/0x58a1
    [ 9520.382059]  btrfs_direct_IO+0x25a/0x6d0 [btrfs]
    [ 9520.382321]  generic_file_direct_write+0x11e/0x220
    [ 9520.382623]  btrfs_file_write_iter+0x472/0xac0 [btrfs]
    [ 9520.382904]  aio_write+0x25c/0x360
    [ 9520.383172]  io_submit_one+0xaa0/0xdc0
    [ 9520.383416]  __se_sys_io_submit+0xfa/0x2f0
    [ 9520.383678]  __x64_sys_io_submit+0x43/0x50
    [ 9520.383927]  do_syscall_64+0x7d/0x240
    [ 9520.384165]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 9520.384439]
    [ 9520.384610] The buggy address belongs to the object at ffff8800b7ada500
                    which belongs to the cache btrfs_free_space of size 72
    [ 9520.385175] The buggy address is located 0 bytes inside of
                    72-byte region [ffff8800b7ada500, ffff8800b7ada548)
    [ 9520.385691] The buggy address belongs to the page:
    [ 9520.385957] page:ffffea0002deb680 count:1 mapcount:0 mapping:ffff880108a1d700 index:0x0 compound_mapcount: 0
    [ 9520.388030] flags: 0x8100(slab|head)
    [ 9520.388281] raw: 0000000000008100 ffffea0002deb608 ffffea0002728808 ffff880108a1d700
    [ 9520.388722] raw: 0000000000000000 0000000000130013 00000001ffffffff 0000000000000000
    [ 9520.389169] page dumped because: kasan: bad access detected
    [ 9520.389473]
    [ 9520.389658] Memory state around the buggy address:
    [ 9520.389943]  ffff8800b7ada400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.390368]  ffff8800b7ada480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.390796] >ffff8800b7ada500: fb fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc
    [ 9520.391223]                    ^
    [ 9520.391461]  ffff8800b7ada580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.391885]  ffff8800b7ada600: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [ 9520.392313] ==================================================================
    [ 9520.392772] BTRFS critical (device vdc): entry offset 2258497536, bytes 131072, bitmap no
    [ 9520.393247] BUG: unable to handle kernel NULL pointer dereference at 0000000000000011
    [ 9520.393705] PGD 800000010dbab067 P4D 800000010dbab067 PUD 107551067 PMD 0
    [ 9520.394059] Oops: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [ 9520.394378] CPU: 4 PID: 1721 Comm: btrfs-transacti Tainted: G    B        L    4.19.0-rc8-nbor #555
    [ 9520.394858] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [ 9520.395350] RIP: 0010:rb_next+0x3c/0x90
    [ 9520.396461] RSP: 0018:ffff8801074ff780 EFLAGS: 00010292
    [ 9520.396762] RAX: 0000000000000000 RBX: 0000000000000001 RCX: ffffffff81b5ac4c
    [ 9520.397115] RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000011
    [ 9520.397468] RBP: ffff8801074ff7a0 R08: ffffed0021d64ccc R09: ffffed0021d64ccc
    [ 9520.397821] R10: 0000000000000001 R11: ffffed0021d64ccb R12: ffff8800b91e0000
    [ 9520.398188] R13: ffff8800a3ceba48 R14: ffff8800b627bf80 R15: 0000000000020000
    [ 9520.398555] FS:  0000000000000000(0000) GS:ffff88010eb00000(0000) knlGS:0000000000000000
    [ 9520.399007] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 9520.399335] CR2: 0000000000000011 CR3: 0000000106b52000 CR4: 00000000000006a0
    [ 9520.399679] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 9520.400023] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 9520.400400] Call Trace:
    [ 9520.400648]  btrfs_dump_free_space+0x146/0x160 [btrfs]
    [ 9520.400974]  dump_space_info+0x2cd/0x310 [btrfs]
    [ 9520.401287]  btrfs_reserve_extent+0x1ee/0x1f0 [btrfs]
    [ 9520.401609]  __btrfs_prealloc_file_range+0x1cc/0x620 [btrfs]
    [ 9520.401952]  ? btrfs_update_time+0x180/0x180 [btrfs]
    [ 9520.402232]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.402522]  ? btrfs_alloc_data_chunk_ondemand+0x2c0/0x5c0 [btrfs]
    [ 9520.402882]  btrfs_prealloc_file_range_trans+0x23/0x30 [btrfs]
    [ 9520.403261]  cache_save_setup+0x42e/0x580 [btrfs]
    [ 9520.403570]  ? btrfs_check_data_free_space+0xd0/0xd0 [btrfs]
    [ 9520.403871]  ? lock_downgrade+0x2f0/0x2f0
    [ 9520.404161]  ? btrfs_write_dirty_block_groups+0x11f/0x6e0 [btrfs]
    [ 9520.404481]  ? kasan_check_read+0x11/0x20
    [ 9520.404732]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.405026]  btrfs_write_dirty_block_groups+0x2af/0x6e0 [btrfs]
    [ 9520.405375]  ? btrfs_start_dirty_block_groups+0x870/0x870 [btrfs]
    [ 9520.405694]  ? do_raw_spin_unlock+0xa8/0x140
    [ 9520.405958]  ? _raw_spin_unlock+0x27/0x40
    [ 9520.406243]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.406574]  commit_cowonly_roots+0x4b9/0x610 [btrfs]
    [ 9520.406899]  ? commit_fs_roots+0x350/0x350 [btrfs]
    [ 9520.407253]  ? btrfs_run_delayed_refs+0x1b8/0x230 [btrfs]
    [ 9520.407589]  btrfs_commit_transaction+0x5e5/0x10e0 [btrfs]
    [ 9520.407925]  ? btrfs_apply_pending_changes+0x90/0x90 [btrfs]
    [ 9520.408262]  ? start_transaction+0x168/0x6c0 [btrfs]
    [ 9520.408582]  transaction_kthread+0x21c/0x240 [btrfs]
    [ 9520.408870]  kthread+0x1d2/0x1f0
    [ 9520.409138]  ? btrfs_cleanup_transaction+0xb50/0xb50 [btrfs]
    [ 9520.409440]  ? kthread_park+0xb0/0xb0
    [ 9520.409682]  ret_from_fork+0x3a/0x50
    [ 9520.410508] Dumping ftrace buffer:
    [ 9520.410764]    (ftrace buffer empty)
    [ 9520.411007] CR2: 0000000000000011
    [ 9520.411297] ---[ end trace 01a0863445cf360a ]---
    [ 9520.411568] RIP: 0010:rb_next+0x3c/0x90
    [ 9520.412644] RSP: 0018:ffff8801074ff780 EFLAGS: 00010292
    [ 9520.412932] RAX: 0000000000000000 RBX: 0000000000000001 RCX: ffffffff81b5ac4c
    [ 9520.413274] RDX: 0000000000000000 RSI: 0000000000000008 RDI: 0000000000000011
    [ 9520.413616] RBP: ffff8801074ff7a0 R08: ffffed0021d64ccc R09: ffffed0021d64ccc
    [ 9520.414007] R10: 0000000000000001 R11: ffffed0021d64ccb R12: ffff8800b91e0000
    [ 9520.414349] R13: ffff8800a3ceba48 R14: ffff8800b627bf80 R15: 0000000000020000
    [ 9520.416074] FS:  0000000000000000(0000) GS:ffff88010eb00000(0000) knlGS:0000000000000000
    [ 9520.416536] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 9520.416848] CR2: 0000000000000011 CR3: 0000000106b52000 CR4: 00000000000006a0
    [ 9520.418477] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 9520.418846] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 9520.419204] Kernel panic - not syncing: Fatal exception
    [ 9520.419666] Dumping ftrace buffer:
    [ 9520.419930]    (ftrace buffer empty)
    [ 9520.420168] Kernel Offset: disabled
    [ 9520.420406] ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Fix this by acquiring the respective lock before iterating the rbtree.
    
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 421f0922a2cfb0c75acd9746454aaa576c711a65
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Oct 12 13:02:48 2018 +0100

    Btrfs: fix use-after-free during inode eviction
    
    At inode.c:evict_inode_truncate_pages(), when we iterate over the
    inode's extent states, we access an extent state record's "state" field
    after we unlocked the inode's io tree lock. This can lead to a
    use-after-free issue because after we unlock the io tree that extent
    state record might have been freed due to being merged into another
    adjacent extent state record (a previous inflight bio for a read
    operation finished in the meanwhile which unlocked a range in the io
    tree and cause a merge of extent state records, as explained in the
    comment before the while loop added in commit 6ca0709756710 ("Btrfs: fix
    hang during inode eviction due to concurrent readahead")).
    
    Fix this by keeping a copy of the extent state's flags in a local
    variable and using it after unlocking the io tree.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=201189
    Fixes: b9d0b38928e2 ("btrfs: Add handler for invalidate page")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commits)
      ip6_tunnel: Fix encapsulation layout
      tipc: fix info leak from kernel tipc_event
      net: socket: fix a missing-check bug
      net: sched: Fix for duplicate class dump
      r8169: fix NAPI handling under high load
      net: ipmr: fix unresolved entry dumps
      net: mscc: ocelot: Fix comment in ocelot_vlant_wait_for_completion()
      sctp: fix the data size calculation in sctp_data_size
      virtio_net: avoid using netif_tx_disable() for serializing tx routine
      udp6: fix encap return code for resubmitting
      mlxsw: core: Fix use-after-free when flashing firmware during init
      sctp: not free the new asoc when sctp_wait_for_connect returns err
      sctp: fix race on sctp_id2asoc
      r8169: re-enable MSI-X on RTL8168g
      net: bpfilter: use get_pid_task instead of pid_task
      ptp: fix Spectre v1 vulnerability
      net: qla3xxx: Remove overflowing shift statement
      geneve, vxlan: Don't set exceptions if skb->len < mtu
      geneve, vxlan: Don't check skb_dst() twice
      sctp: get pr_assoc and pr_stream all status with SCTP_PR_SCTP_ALL instead
      ...

commit fd3307130344ef5fa5af0089d343ca4fc074322e
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Wed Sep 26 13:09:44 2018 +0300

    net/mlx5: Take fs_counters dellist before addlist
    
    In fs_counters elements from both addlist and dellist are removed by
    mlx5_fc_stats_work() without any locking. This introduces race condition
    when batch of new rules is created and then immediately deleted (for
    example, when error occurred during flow creation). In such case some of
    the rules might be in dellist, but not in addlist when mlx5_fc_stats_work()
    is executed concurrently with tc, which will result rule deletion and
    use-after-free on next iteration because deleted rules are still in
    addlist.
    
    Always take dellist first to guarantee that rules can only be deleted after
    they were removed from addlist.
    
    Fixes: 6e5e22839136 ("net/mlx5: Add new list to store deleted flow counters")
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Reported-by: Chris Mi <chrism@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>

commit e28fd56ad5273be67d0fae5bedc7e1680e729952
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Thu Oct 18 10:19:29 2018 -0600

    usbip:vudc: BUG kmalloc-2048 (Not tainted): Poison overwritten
    
    In rmmod path, usbip_vudc does platform_device_put() twice once from
    platform_device_unregister() and then from put_vudc_device().
    
    The second put results in:
    
    BUG kmalloc-2048 (Not tainted): Poison overwritten error or
    BUG: KASAN: use-after-free in kobject_put+0x1e/0x230 if KASAN is
    enabled.
    
    [  169.042156] calling  init+0x0/0x1000 [usbip_vudc] @ 1697
    [  169.042396] =============================================================================
    [  169.043678] probe of usbip-vudc.0 returned 1 after 350 usecs
    [  169.044508] BUG kmalloc-2048 (Not tainted): Poison overwritten
    [  169.044509] -----------------------------------------------------------------------------
    ...
    [  169.057849] INFO: Freed in device_release+0x2b/0x80 age=4223 cpu=3 pid=1693
    [  169.057852]  kobject_put+0x86/0x1b0
    [  169.057853]  0xffffffffc0c30a96
    [  169.057855]  __x64_sys_delete_module+0x157/0x240
    
    Fix it to call platform_device_del() instead and let put_vudc_device() do
    the platform_device_put().
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37fd1678245f7a5898c1b05128bc481fb403c290
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Oct 18 17:21:29 2018 +1100

    xfs: fix use-after-free race in xfs_buf_rele
    
    When looking at a 4.18 based KASAN use after free report, I noticed
    that racing xfs_buf_rele() may race on dropping the last reference
    to the buffer and taking the buffer lock. This was the symptom
    displayed by the KASAN report, but the actual issue that was
    reported had already been fixed in 4.19-rc1 by commit e339dd8d8b04
    ("xfs: use sync buffer I/O for sync delwri queue submission").
    
    Despite this, I think there is still an issue with xfs_buf_rele()
    in this code:
    
            release = atomic_dec_and_lock(&bp->b_hold, &pag->pag_buf_lock);
            spin_lock(&bp->b_lock);
            if (!release) {
    .....
    
    If two threads race on the b_lock after both dropping a reference
    and one getting dropping the last reference so release = true, we
    end up with:
    
    CPU 0                           CPU 1
    atomic_dec_and_lock()
                                    atomic_dec_and_lock()
                                    spin_lock(&bp->b_lock)
    spin_lock(&bp->b_lock)
    <spins>
                                    <release = true bp->b_lru_ref = 0>
                                    <remove from lists>
                                    freebuf = true
                                    spin_unlock(&bp->b_lock)
                                    xfs_buf_free(bp)
    <gets lock, reading and writing freed memory>
    <accesses freed memory>
    spin_unlock(&bp->b_lock) <reads/writes freed memory>
    
    IOWs, we can't safely take bp->b_lock after dropping the hold
    reference because the buffer may go away at any time after we
    drop that reference. However, this can be fixed simply by taking the
    bp->b_lock before we drop the reference.
    
    It is safe to nest the pag_buf_lock inside bp->b_lock as the
    pag_buf_lock is only used to serialise against lookup in
    xfs_buf_find() and no other locks are held over or under the
    pag_buf_lock there. Make this clear by documenting the buffer lock
    orders at the top of the file.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit 05c998b738fdd3e5d6a257bcacc8f34b6284d795
Author: Ake Koomsin <ake@igel.co.jp>
Date:   Wed Oct 17 19:44:12 2018 +0900

    virtio_net: avoid using netif_tx_disable() for serializing tx routine
    
    Commit 713a98d90c5e ("virtio-net: serialize tx routine during reset")
    introduces netif_tx_disable() after netif_device_detach() in order to
    avoid use-after-free of tx queues. However, there are two issues.
    
    1) Its operation is redundant with netif_device_detach() in case the
       interface is running.
    2) In case of the interface is not running before suspending and
       resuming, the tx does not get resumed by netif_device_attach().
       This results in losing network connectivity.
    
    It is better to use netif_tx_lock_bh()/netif_tx_unlock_bh() instead for
    serializing tx routine during reset. This also preserves the symmetry
    of netif_device_detach() and netif_device_attach().
    
    Fixes commit 713a98d90c5e ("virtio-net: serialize tx routine during reset")
    Signed-off-by: Ake Koomsin <ake@igel.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9b3bc7db759e64c33471025721817467f8c3ecd4
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Oct 17 08:05:45 2018 +0000

    mlxsw: core: Fix use-after-free when flashing firmware during init
    
    When the switch driver (e.g., mlxsw_spectrum) determines it needs to
    flash a new firmware version it resets the ASIC after the flashing
    process. The bus driver (e.g., mlxsw_pci) then registers itself again
    with mlxsw_core which means (among other things) that the device
    registers itself again with the hwmon subsystem again.
    
    Since the device was registered with the hwmon subsystem using
    devm_hwmon_device_register_with_groups(), then the old hwmon device
    (registered before the flashing) was never unregistered and was
    referencing stale data, resulting in a use-after free.
    
    Fix by removing reliance on device managed APIs in mlxsw_hwmon_init().
    
    Fixes: c86d62cc410c ("mlxsw: spectrum: Reset FW after flash")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Alexander Petrovskiy <alexpe@mellanox.com>
    Tested-by: Alexander Petrovskiy <alexpe@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b336decab22158937975293aea79396525f92bb3
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Tue Oct 16 15:18:17 2018 -0300

    sctp: fix race on sctp_id2asoc
    
    syzbot reported an use-after-free involving sctp_id2asoc.  Dmitry Vyukov
    helped to root cause it and it is because of reading the asoc after it
    was freed:
    
            CPU 1                       CPU 2
    (working on socket 1)            (working on socket 2)
                                     sctp_association_destroy
    sctp_id2asoc
       spin lock
         grab the asoc from idr
       spin unlock
                                       spin lock
                                         remove asoc from idr
                                       spin unlock
                                       free(asoc)
       if asoc->base.sk != sk ... [*]
    
    This can only be hit if trying to fetch asocs from different sockets. As
    we have a single IDR for all asocs, in all SCTP sockets, their id is
    unique on the system. An application can try to send stuff on an id
    that matches on another socket, and the if in [*] will protect from such
    usage. But it didn't consider that as that asoc may belong to another
    socket, it may be freed in parallel (read: under another socket lock).
    
    We fix it by moving the checks in [*] into the protected region. This
    fixes it because the asoc cannot be freed while the lock is held.
    
    Reported-by: syzbot+c7dd55d7aec49d48e49a@syzkaller.appspotmail.com
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 092b5648760a23656f6dcc83b74f4cf661094aca
Author: John Pittman <jpittman@redhat.com>
Date:   Thu Aug 23 13:35:57 2018 -0400

    dm zoned: target: use refcount_t for dm zoned reference counters
    
    The API surrounding refcount_t should be used in place of atomic_t
    when variables are being used as reference counters.  This API can
    prevent issues such as counter overflows and use-after-free
    conditions.  Within the dm zoned target stack, the atomic_t API is
    used for bioctx->ref and cw->refcount.  Change these to use
    refcount_t, avoiding the issues mentioned.
    
    Signed-off-by: John Pittman <jpittman@redhat.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Tested-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit 22d4c291f58752d14efb8a185b772a3fc3e947d2
Author: John Pittman <jpittman@redhat.com>
Date:   Thu Aug 23 13:35:55 2018 -0400

    dm thin: use refcount_t for thin_c reference counting
    
    The API surrounding refcount_t should be used in place of atomic_t
    when variables are being used as reference counters.  It can
    potentially prevent reference counter overflows and use-after-free
    conditions.  In the dm thin layer, one such example is tc->refcount.
    Change this from the atomic_t API to the refcount_t API to prevent
    mentioned conditions.
    
    Signed-off-by: John Pittman <jpittman@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit 92e2921f7eee63450a5f953f4b15dc6210219430
Author: Hou Tao <houtao1@huawei.com>
Date:   Sat Oct 6 17:09:35 2018 +0800

    jffs2: free jffs2_sb_info through jffs2_kill_sb()
    
    When an invalid mount option is passed to jffs2, jffs2_parse_options()
    will fail and jffs2_sb_info will be freed, but then jffs2_sb_info will
    be used (use-after-free) and freeed (double-free) in jffs2_kill_sb().
    
    Fix it by removing the buggy invocation of kfree() when getting invalid
    mount options.
    
    Fixes: 92abc475d8de ("jffs2: implement mount option parsing and compression overriding")
    Cc: stable@kernel.org
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>

commit dc012f3628eaecfb5ba68404a5c30ef501daf63d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 12 18:58:53 2018 -0700

    ipv6: mcast: fix a use-after-free in inet6_mc_check
    
    syzbot found a use-after-free in inet6_mc_check [1]
    
    The problem here is that inet6_mc_check() uses rcu
    and read_lock(&iml->sflock)
    
    So the fact that ip6_mc_leave_src() is called under RTNL
    and the socket lock does not help us, we need to acquire
    iml->sflock in write mode.
    
    In the future, we should convert all this stuff to RCU.
    
    [1]
    BUG: KASAN: use-after-free in ipv6_addr_equal include/net/ipv6.h:521 [inline]
    BUG: KASAN: use-after-free in inet6_mc_check+0xae7/0xb40 net/ipv6/mcast.c:649
    Read of size 8 at addr ffff8801ce7f2510 by task syz-executor0/22432
    
    CPU: 1 PID: 22432 Comm: syz-executor0 Not tainted 4.19.0-rc7+ #280
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c4/0x2b4 lib/dump_stack.c:113
     print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     ipv6_addr_equal include/net/ipv6.h:521 [inline]
     inet6_mc_check+0xae7/0xb40 net/ipv6/mcast.c:649
     __raw_v6_lookup+0x320/0x3f0 net/ipv6/raw.c:98
     ipv6_raw_deliver net/ipv6/raw.c:183 [inline]
     raw6_local_deliver+0x3d3/0xcb0 net/ipv6/raw.c:240
     ip6_input_finish+0x467/0x1aa0 net/ipv6/ip6_input.c:345
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ip6_input+0xe9/0x600 net/ipv6/ip6_input.c:426
     ip6_mc_input+0x48a/0xd20 net/ipv6/ip6_input.c:503
     dst_input include/net/dst.h:450 [inline]
     ip6_rcv_finish+0x17a/0x330 net/ipv6/ip6_input.c:76
     NF_HOOK include/linux/netfilter.h:289 [inline]
     ipv6_rcv+0x120/0x640 net/ipv6/ip6_input.c:271
     __netif_receive_skb_one_core+0x14d/0x200 net/core/dev.c:4913
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:5023
     netif_receive_skb_internal+0x12c/0x620 net/core/dev.c:5126
     napi_frags_finish net/core/dev.c:5664 [inline]
     napi_gro_frags+0x75a/0xc90 net/core/dev.c:5737
     tun_get_user+0x3189/0x4250 drivers/net/tun.c:1923
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:1968
     call_write_iter include/linux/fs.h:1808 [inline]
     do_iter_readv_writev+0x8b0/0xa80 fs/read_write.c:680
     do_iter_write+0x185/0x5f0 fs/read_write.c:959
     vfs_writev+0x1f1/0x360 fs/read_write.c:1004
     do_writev+0x11a/0x310 fs/read_write.c:1039
     __do_sys_writev fs/read_write.c:1112 [inline]
     __se_sys_writev fs/read_write.c:1109 [inline]
     __x64_sys_writev+0x75/0xb0 fs/read_write.c:1109
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457421
    Code: 75 14 b8 14 00 00 00 0f 05 48 3d 01 f0 ff ff 0f 83 34 b5 fb ff c3 48 83 ec 08 e8 1a 2d 00 00 48 89 04 24 b8 14 00 00 00 0f 05 <48> 8b 3c 24 48 89 c2 e8 63 2d 00 00 48 89 d0 48 83 c4 08 48 3d 01
    RSP: 002b:00007f2d30ecaba0 EFLAGS: 00000293 ORIG_RAX: 0000000000000014
    RAX: ffffffffffffffda RBX: 000000000000003e RCX: 0000000000457421
    RDX: 0000000000000001 RSI: 00007f2d30ecabf0 RDI: 00000000000000f0
    RBP: 0000000020000500 R08: 00000000000000f0 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000293 R12: 00007f2d30ecb6d4
    R13: 00000000004c4890 R14: 00000000004d7b90 R15: 00000000ffffffff
    
    Allocated by task 22437:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     __do_kmalloc mm/slab.c:3718 [inline]
     __kmalloc+0x14e/0x760 mm/slab.c:3727
     kmalloc include/linux/slab.h:518 [inline]
     sock_kmalloc+0x15a/0x1f0 net/core/sock.c:1983
     ip6_mc_source+0x14dd/0x1960 net/ipv6/mcast.c:427
     do_ipv6_setsockopt.isra.9+0x3afb/0x45d0 net/ipv6/ipv6_sockglue.c:743
     ipv6_setsockopt+0xbd/0x170 net/ipv6/ipv6_sockglue.c:933
     rawv6_setsockopt+0x59/0x140 net/ipv6/raw.c:1069
     sock_common_setsockopt+0x9a/0xe0 net/core/sock.c:3038
     __sys_setsockopt+0x1ba/0x3c0 net/socket.c:1902
     __do_sys_setsockopt net/socket.c:1913 [inline]
     __se_sys_setsockopt net/socket.c:1910 [inline]
     __x64_sys_setsockopt+0xbe/0x150 net/socket.c:1910
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 22430:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xcf/0x230 mm/slab.c:3813
     __sock_kfree_s net/core/sock.c:2004 [inline]
     sock_kfree_s+0x29/0x60 net/core/sock.c:2010
     ip6_mc_leave_src+0x11a/0x1d0 net/ipv6/mcast.c:2448
     __ipv6_sock_mc_close+0x20b/0x4e0 net/ipv6/mcast.c:310
     ipv6_sock_mc_close+0x158/0x1d0 net/ipv6/mcast.c:328
     inet6_release+0x40/0x70 net/ipv6/af_inet6.c:452
     __sock_release+0xd7/0x250 net/socket.c:579
     sock_close+0x19/0x20 net/socket.c:1141
     __fput+0x385/0xa30 fs/file_table.c:278
     ____fput+0x15/0x20 fs/file_table.c:309
     task_work_run+0x1e8/0x2a0 kernel/task_work.c:113
     tracehook_notify_resume include/linux/tracehook.h:193 [inline]
     exit_to_usermode_loop+0x318/0x380 arch/x86/entry/common.c:166
     prepare_exit_to_usermode arch/x86/entry/common.c:197 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:268 [inline]
     do_syscall_64+0x6be/0x820 arch/x86/entry/common.c:293
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801ce7f2500
     which belongs to the cache kmalloc-192 of size 192
    The buggy address is located 16 bytes inside of
     192-byte region [ffff8801ce7f2500, ffff8801ce7f25c0)
    The buggy address belongs to the page:
    page:ffffea000739fc80 count:1 mapcount:0 mapping:ffff8801da800040 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0006f6e548 ffffea000737b948 ffff8801da800040
    raw: 0000000000000000 ffff8801ce7f2000 0000000100000010 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801ce7f2400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801ce7f2480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    >ffff8801ce7f2500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                             ^
     ffff8801ce7f2580: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff8801ce7f2600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34c2c4f632f232ed2fdb66d4e42cc72d322273fe
Author: Eric Anholt <eric@anholt.net>
Date:   Fri Sep 28 16:21:23 2018 -0700

    drm/v3d: Fix a use-after-free race accessing the scheduler's fences.
    
    Once we push the job, the scheduler could run it and free it.  So, if
    we want to reference their fences, we need to grab them before then.
    I haven't seen this happen in many days of conformance test runtime,
    but let's still close the race.
    
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Fixes: 57692c94dcbe ("drm/v3d: Introduce a new DRM driver for Broadcom V3D V3.x+")
    Link: https://patchwork.freedesktop.org/patch/254119/
    Reviewed-by: Boris Brezillon <boris.brezillon@bootlin.com>

commit 7f8d236ae132a8886a0186008c828e21f7460474
Author: David Sterba <dsterba@suse.com>
Date:   Thu Apr 5 01:04:49 2018 +0200

    btrfs: dev-replace: move replace members out of fs_info
    
    The replace_wait and bio_counter were mistakenly added to fs_info in
    commit c404e0dc2c843b154f ("Btrfs: fix use-after-free in the finishing
    procedure of the device replace"), but they logically belong to
    fs_info::dev_replace. Besides, bio_counter is a very generic name and is
    confusing in bare fs_info context.
    
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 33458eaba4dfe778a426df6a19b7aad2ff9f7eec
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Oct 12 09:28:09 2018 -0400

    ext4: fix use-after-free race in ext4_remount()'s error path
    
    It's possible for ext4_show_quota_options() to try reading
    s_qf_names[i] while it is being modified by ext4_remount() --- most
    notably, in ext4_remount's error path when the original values of the
    quota file name gets restored.
    
    Reported-by: syzbot+a2872d6feea6918008a9@syzkaller.appspotmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org # 3.2+

commit 6d757753cef8d523342fe544299068d30b5be490
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Sep 6 17:43:23 2018 -0400

    drm/nouveau: Move backlight device into nouveau_connector
    
    Currently module unloading is broken in nouveau due to a rather annoying
    race condition resulting from nouveau_backlight.c having gone a bit
    stale over time:
    
    [ 1960.791143] ==================================================================
    [ 1960.791394] BUG: KASAN: use-after-free in nouveau_backlight_exit+0x112/0x150 [nouveau]
    [ 1960.791460] Read of size 4 at addr ffff88075accf350 by task zsh/11185
    [ 1960.791521]
    [ 1960.791545] CPU: 7 PID: 11185 Comm: zsh Kdump: loaded Tainted: G           O      4.18.0Lyude-Test+ #4
    [ 1960.791580] Hardware name: LENOVO 20EQS64N0B/20EQS64N0B, BIOS N1EET79W (1.52 ) 07/13/2018
    [ 1960.791628] Call Trace:
    [ 1960.791680]  dump_stack+0xa4/0xfd
    [ 1960.791721]  print_address_description+0x71/0x239
    [ 1960.791833]  ? nouveau_backlight_exit+0x112/0x150 [nouveau]
    [ 1960.791877]  kasan_report.cold.6+0x242/0x2fe
    [ 1960.791919]  __asan_report_load4_noabort+0x19/0x20
    [ 1960.792012]  nouveau_backlight_exit+0x112/0x150 [nouveau]
    [ 1960.792081]  nouveau_display_destroy+0x76/0x150 [nouveau]
    [ 1960.792150]  nouveau_drm_device_fini+0xb7/0x190 [nouveau]
    [ 1960.792265]  nouveau_drm_device_remove+0x14b/0x1d0 [nouveau]
    [ 1960.792347]  ? nouveau_cli_work_queue+0x2e0/0x2e0 [nouveau]
    [ 1960.792378]  ? trace_hardirqs_on_caller+0x38b/0x570
    [ 1960.792406]  ? trace_hardirqs_on+0xd/0x10
    [ 1960.792472]  nouveau_drm_remove+0x37/0x50 [nouveau]
    [ 1960.792502]  pci_device_remove+0x112/0x2d0
    [ 1960.792530]  ? pcibios_free_irq+0x10/0x10
    [ 1960.792558]  ? kasan_check_write+0x14/0x20
    [ 1960.792587]  device_release_driver_internal+0x35c/0x650
    [ 1960.792617]  device_release_driver+0x12/0x20
    [ 1960.792643]  pci_stop_bus_device+0x172/0x1e0
    [ 1960.792671]  pci_stop_and_remove_bus_device_locked+0x1a/0x30
    [ 1960.792715]  remove_store+0xcb/0xe0
    [ 1960.792753]  ? sriov_numvfs_store+0x2e0/0x2e0
    [ 1960.792779]  ? __lock_is_held+0xb5/0x140
    [ 1960.792808]  ? component_add+0x530/0x530
    [ 1960.792834]  dev_attr_store+0x3f/0x70
    [ 1960.792859]  ? sysfs_file_ops+0x11d/0x170
    [ 1960.792885]  sysfs_kf_write+0x104/0x150
    [ 1960.792915]  ? sysfs_file_ops+0x170/0x170
    [ 1960.792940]  kernfs_fop_write+0x24f/0x400
    [ 1960.792978]  ? __lock_acquire+0x6ea/0x47f0
    [ 1960.793021]  __vfs_write+0xeb/0x760
    [ 1960.793048]  ? kernel_read+0x130/0x130
    [ 1960.793076]  ? __lock_is_held+0xb5/0x140
    [ 1960.793107]  ? rcu_read_lock_sched_held+0xdd/0x110
    [ 1960.793135]  ? rcu_sync_lockdep_assert+0x78/0xb0
    [ 1960.793162]  ? __sb_start_write+0x183/0x220
    [ 1960.793189]  vfs_write+0x14d/0x4a0
    [ 1960.793229]  ksys_write+0xd2/0x1b0
    [ 1960.793255]  ? __ia32_sys_read+0xb0/0xb0
    [ 1960.793298]  ? fput+0x1d/0x120
    [ 1960.793324]  ? filp_close+0xf3/0x130
    [ 1960.793349]  ? entry_SYSCALL_64_after_hwframe+0x59/0xbe
    [ 1960.793380]  __x64_sys_write+0x73/0xb0
    [ 1960.793407]  do_syscall_64+0xaa/0x400
    [ 1960.793433]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 1960.793460] RIP: 0033:0x7f59df433164
    [ 1960.793486] Code: 89 02 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 8d 05 81 38 2d 00 8b 00 85 c0 75 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 41 54 49 89 d4 55 48 89 f5 53
    [ 1960.793541] RSP: 002b:00007ffd70ee2fb8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 1960.793576] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f59df433164
    [ 1960.793620] RDX: 0000000000000002 RSI: 00005578088640c0 RDI: 0000000000000001
    [ 1960.793665] RBP: 00005578088640c0 R08: 00007f59df7038c0 R09: 00007f59e0995b80
    [ 1960.793696] R10: 000000000000000a R11: 0000000000000246 R12: 00007f59df702760
    [ 1960.793730] R13: 0000000000000002 R14: 00007f59df6fd760 R15: 0000000000000002
    [ 1960.793768]
    [ 1960.793790] Allocated by task 11167:
    [ 1960.793816]  save_stack+0x43/0xd0
    [ 1960.793841]  kasan_kmalloc+0xc4/0xe0
    [ 1960.793880]  kasan_slab_alloc+0x11/0x20
    [ 1960.793905]  kmem_cache_alloc+0xd7/0x270
    [ 1960.793944]  getname_flags+0xbd/0x520
    [ 1960.793969]  user_path_at_empty+0x23/0x50
    [ 1960.793994]  do_faccessat+0x1fc/0x5d0
    [ 1960.794018]  __x64_sys_access+0x59/0x80
    [ 1960.794043]  do_syscall_64+0xaa/0x400
    [ 1960.794067]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 1960.794093]
    [ 1960.794127] Freed by task 11167:
    [ 1960.794152]  save_stack+0x43/0xd0
    [ 1960.794190]  __kasan_slab_free+0x139/0x190
    [ 1960.794215]  kasan_slab_free+0xe/0x10
    [ 1960.794239]  kmem_cache_free+0xcb/0x2c0
    [ 1960.794264]  putname+0xad/0xe0
    [ 1960.794287]  filename_lookup.part.59+0x1f1/0x360
    [ 1960.794313]  user_path_at_empty+0x3e/0x50
    [ 1960.794338]  do_faccessat+0x1fc/0x5d0
    [ 1960.794362]  __x64_sys_access+0x59/0x80
    [ 1960.794393]  do_syscall_64+0xaa/0x400
    [ 1960.794421]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 1960.794461]
    [ 1960.794483] The buggy address belongs to the object at ffff88075acceac0
    [ 1960.794483]  which belongs to the cache names_cache of size 4096
    [ 1960.794540] The buggy address is located 2192 bytes inside of
    [ 1960.794540]  4096-byte region [ffff88075acceac0, ffff88075accfac0)
    [ 1960.794581] The buggy address belongs to the page:
    [ 1960.794609] page:ffffea001d6b3200 count:1 mapcount:0 mapping:ffff880778e4b1c0 index:0x0 compound_mapcount: 0
    [ 1960.794651] flags: 0x8000000000008100(slab|head)
    [ 1960.794679] raw: 8000000000008100 ffffea001d39e808 ffffea001d39ea08 ffff880778e4b1c0
    [ 1960.794739] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [ 1960.794785] page dumped because: kasan: bad access detected
    [ 1960.794813]
    [ 1960.794834] Memory state around the buggy address:
    [ 1960.794861]  ffff88075accf200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1960.794894]  ffff88075accf280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1960.794925] >ffff88075accf300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1960.794956]                                                  ^
    [ 1960.794985]  ffff88075accf380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1960.795017]  ffff88075accf400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1960.795061] ==================================================================
    [ 1960.795106] Disabling lock debugging due to kernel taint
    [ 1960.795131] ------------[ cut here ]------------
    [ 1960.795148] ida_remove called for id=1802201963 which is not allocated.
    [ 1960.795193] WARNING: CPU: 7 PID: 11185 at lib/idr.c:521 ida_remove+0x184/0x210
    [ 1960.795213] Modules linked in: nouveau(O) mxm_wmi ttm i2c_algo_bit drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm joydev vfat fat intel_rapl x86_pkg_temp_thermal coretemp crc32_pclmul iTCO_wdt psmouse wmi_bmof mei_me tpm_tis mei tpm_tis_core tpm i2c_i801 thinkpad_acpi pcc_cpufreq crc32c_intel serio_raw xhci_pci xhci_hcd wmi video i2c_dev i2c_core
    [ 1960.795305] CPU: 7 PID: 11185 Comm: zsh Kdump: loaded Tainted: G    B      O      4.18.0Lyude-Test+ #4
    [ 1960.795330] Hardware name: LENOVO 20EQS64N0B/20EQS64N0B, BIOS N1EET79W (1.52 ) 07/13/2018
    [ 1960.795352] RIP: 0010:ida_remove+0x184/0x210
    [ 1960.795370] Code: 4c 89 f7 e8 ae c8 00 00 eb 22 41 83 c4 02 4c 89 e8 41 83 fc 3f 0f 86 64 ff ff ff 44 89 fe 48 c7 c7 20 94 1e 83 e8 54 ed 81 fe <0f> 0b 48 b8 00 00 00 00 00 fc ff df 48 01 c3 c7 03 00 00 00 00 c7
    [ 1960.795402] RSP: 0018:ffff88074d4df7b8 EFLAGS: 00010082
    [ 1960.795421] RAX: 0000000000000000 RBX: 1ffff100e9a9befa RCX: ffffffff81479975
    [ 1960.795440] RDX: 0000000000000000 RSI: 0000000000000008 RDI: ffff88077c1de690
    [ 1960.795460] RBP: ffff88074d4df878 R08: ffffed00ef83bcd3 R09: ffffed00ef83bcd2
    [ 1960.795479] R10: ffffed00ef83bcd2 R11: ffff88077c1de697 R12: 000000000000036b
    [ 1960.795498] R13: 0000000000000202 R14: ffffffffa0aa7fa0 R15: 000000006b6b6b6b
    [ 1960.795518] FS:  00007f59e0995b80(0000) GS:ffff88077c1c0000(0000) knlGS:0000000000000000
    [ 1960.795553] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1960.795571] CR2: 00007f59e09a2010 CR3: 00000004a1a70005 CR4: 00000000003606e0
    [ 1960.795596] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1960.795629] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1960.795649] Call Trace:
    [ 1960.795667]  ? ida_destroy+0x1d0/0x1d0
    [ 1960.795686]  ? kasan_check_write+0x14/0x20
    [ 1960.795704]  ? do_raw_spin_lock+0xc2/0x1c0
    [ 1960.795724]  ida_simple_remove+0x26/0x40
    [ 1960.795794]  nouveau_backlight_exit+0x9d/0x150 [nouveau]
    [ 1960.795867]  nouveau_display_destroy+0x76/0x150 [nouveau]
    [ 1960.795930]  nouveau_drm_device_fini+0xb7/0x190 [nouveau]
    [ 1960.795989]  nouveau_drm_device_remove+0x14b/0x1d0 [nouveau]
    [ 1960.796047]  ? nouveau_cli_work_queue+0x2e0/0x2e0 [nouveau]
    [ 1960.796067]  ? trace_hardirqs_on_caller+0x38b/0x570
    [ 1960.796089]  ? trace_hardirqs_on+0xd/0x10
    [ 1960.796146]  nouveau_drm_remove+0x37/0x50 [nouveau]
    [ 1960.796167]  pci_device_remove+0x112/0x2d0
    [ 1960.796186]  ? pcibios_free_irq+0x10/0x10
    [ 1960.796218]  ? kasan_check_write+0x14/0x20
    [ 1960.796237]  device_release_driver_internal+0x35c/0x650
    [ 1960.796257]  device_release_driver+0x12/0x20
    [ 1960.796289]  pci_stop_bus_device+0x172/0x1e0
    [ 1960.796308]  pci_stop_and_remove_bus_device_locked+0x1a/0x30
    [ 1960.796328]  remove_store+0xcb/0xe0
    [ 1960.796345]  ? sriov_numvfs_store+0x2e0/0x2e0
    [ 1960.796364]  ? __lock_is_held+0xb5/0x140
    [ 1960.796383]  ? component_add+0x530/0x530
    [ 1960.796401]  dev_attr_store+0x3f/0x70
    [ 1960.796419]  ? sysfs_file_ops+0x11d/0x170
    [ 1960.796436]  sysfs_kf_write+0x104/0x150
    [ 1960.796454]  ? sysfs_file_ops+0x170/0x170
    [ 1960.796471]  kernfs_fop_write+0x24f/0x400
    [ 1960.796488]  ? __lock_acquire+0x6ea/0x47f0
    [ 1960.796520]  __vfs_write+0xeb/0x760
    [ 1960.796538]  ? kernel_read+0x130/0x130
    [ 1960.796556]  ? __lock_is_held+0xb5/0x140
    [ 1960.796590]  ? rcu_read_lock_sched_held+0xdd/0x110
    [ 1960.796608]  ? rcu_sync_lockdep_assert+0x78/0xb0
    [ 1960.796626]  ? __sb_start_write+0x183/0x220
    [ 1960.796648]  vfs_write+0x14d/0x4a0
    [ 1960.796666]  ksys_write+0xd2/0x1b0
    [ 1960.796684]  ? __ia32_sys_read+0xb0/0xb0
    [ 1960.796701]  ? fput+0x1d/0x120
    [ 1960.796732]  ? filp_close+0xf3/0x130
    [ 1960.796749]  ? entry_SYSCALL_64_after_hwframe+0x59/0xbe
    [ 1960.796768]  __x64_sys_write+0x73/0xb0
    [ 1960.796800]  do_syscall_64+0xaa/0x400
    [ 1960.796818]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 1960.796836] RIP: 0033:0x7f59df433164
    [ 1960.796854] Code: 89 02 48 c7 c0 ff ff ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 8d 05 81 38 2d 00 8b 00 85 c0 75 13 b8 01 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 54 c3 0f 1f 00 41 54 49 89 d4 55 48 89 f5 53
    [ 1960.796884] RSP: 002b:00007ffd70ee2fb8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [ 1960.796906] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f59df433164
    [ 1960.796926] RDX: 0000000000000002 RSI: 00005578088640c0 RDI: 0000000000000001
    [ 1960.796946] RBP: 00005578088640c0 R08: 00007f59df7038c0 R09: 00007f59e0995b80
    [ 1960.796966] R10: 000000000000000a R11: 0000000000000246 R12: 00007f59df702760
    [ 1960.796985] R13: 0000000000000002 R14: 00007f59df6fd760 R15: 0000000000000002
    [ 1960.797008] irq event stamp: 509990
    [ 1960.797026] hardirqs last  enabled at (509989): [<ffffffff8119ff78>] flush_work+0x4b8/0x6d0
    [ 1960.797063] hardirqs last disabled at (509990): [<ffffffff8297c395>] _raw_spin_lock_irqsave+0x25/0x60
    [ 1960.797085] softirqs last  enabled at (509744): [<ffffffff82c005ad>] __do_softirq+0x5ad/0x8c0
    [ 1960.797121] softirqs last disabled at (509735): [<ffffffff8115aa15>] irq_exit+0x1a5/0x1e0
    [ 1960.797142] ---[ end trace fb1342325f1846b8 ]---
    
    While I haven't actually gone into the details of what's causing this to
    happen (maybe the kernel removes the backlight device in the device core
    before we get to it?), it doesn't really matter anyway because the way
    nouveau handles backlights has long since been deprecated.
    
    According to the documentation on the drm_connector->late_register()
    hook, the ->late_register() hook should be used for adding extra
    connector-related devices. Vice versa, the ->early_unregister() hook is
    meant to be used for removing those devices.
    
    So: gut nouveau_drm->bl_list and nouveau_drm->backlight, and replace
    them with per-connector backlight structures. Additionally, move
    backlight registration/teardown into the ->late_register() and
    ->early_unregister() hooks so that DRM can give us a chance to remove
    the backlight before the connector is even removed. This appears to fix
    the problem once and for all.
    
    Changes since v2:
    - Use NV_INFO_ONCE for printing GMUX information, since otherwise this
      will end up printing that message for as many times as we have
      connectors
    
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Reviewed-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 3c587768271e9c20276522025729e4ebca51583b
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Aug 13 20:14:00 2018 +0300

    thermal: core: Fix use-after-free in thermal_cooling_device_destroy_sysfs
    
    This patch fixes use-after-free that was detected by KASAN. The bug is
    triggered on a CPUFreq driver module unload by freeing 'cdev' on device
    unregister and then using the freed structure during of the cdev's sysfs
    data destruction. The solution is to unregister the sysfs at first, then
    destroy sysfs data and finally release the cooling device.
    
    Cc: <stable@vger.kernel.org> # v4.17+
    Fixes: 8ea229511e06 ("thermal: Add cooling device's statistics in sysfs")
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Acked-by: Eduardo Valentin <edubezval@gmail.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

commit b790c8ea5593d6dc3580adfad8e117eeb56af874
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Oct 8 13:14:35 2018 +0200

    reset: Fix potential use-after-free in __of_reset_control_get()
    
    Calling of_node_put() decreases the reference count of a device tree
    object, and may free some data.
    
    However, the of_phandle_args structure embedding it is passed to
    reset_controller_dev.of_xlate() after that, so it may still be accessed.
    
    Move the call to of_node_put() down to fix this.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    [p.zabel@pengutronix.de: moved of_node_put after mutex_unlock]
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

commit 48f78be3326052a7718678ff9a78d6d884a50323
Author: Keith Busch <keith.busch@intel.com>
Date:   Fri Oct 5 08:57:06 2018 -0600

    nvme: remove ns sibling before clearing path
    
    The code had been clearing a namespace being deleted as the current
    path while that namespace was still in the path siblings list. It is
    possible a new IO could set that namespace back to the current path
    since it appeared to be an eligable path to select, which may result in
    a use-after-free error.
    
    This patch ensures a namespace being removed is not eligable to be reset
    as a current path prior to clearing it as the current path.
    
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit ccd3c4373eacb044eb3832966299d13d2631f66f
Author: Jan Kara <jack@suse.cz>
Date:   Fri Oct 5 18:44:40 2018 -0400

    jbd2: fix use after free in jbd2_log_do_checkpoint()
    
    The code cleaning transaction's lists of checkpoint buffers has a bug
    where it increases bh refcount only after releasing
    journal->j_list_lock. Thus the following race is possible:
    
    CPU0                                    CPU1
    jbd2_log_do_checkpoint()
                                            jbd2_journal_try_to_free_buffers()
                                              __journal_try_to_free_buffer(bh)
      ...
      while (transaction->t_checkpoint_io_list)
      ...
        if (buffer_locked(bh)) {
    
    <-- IO completes now, buffer gets unlocked -->
    
          spin_unlock(&journal->j_list_lock);
                                                spin_lock(&journal->j_list_lock);
                                                __jbd2_journal_remove_checkpoint(jh);
                                                spin_unlock(&journal->j_list_lock);
                                              try_to_free_buffers(page);
          get_bh(bh) <-- accesses freed bh
    
    Fix the problem by grabbing bh reference before unlocking
    journal->j_list_lock.
    
    Fixes: dc6e8d669cf5 ("jbd2: don't call get_bh() before calling __jbd2_journal_remove_checkpoint()")
    Fixes: be1158cc615f ("jbd2: fold __process_buffer() into jbd2_log_do_checkpoint()")
    Reported-by: syzbot+7f4a27091759e2fe7453@syzkaller.appspotmail.com
    CC: stable@vger.kernel.org
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>

commit a688caa34beb2fd2a92f1b6d33e40cde433ba160
Author: Wei Wang <weiwan@google.com>
Date:   Thu Oct 4 10:12:37 2018 -0700

    ipv6: take rcu lock in rawv6_send_hdrinc()
    
    In rawv6_send_hdrinc(), in order to avoid an extra dst_hold(), we
    directly assign the dst to skb and set passed in dst to NULL to avoid
    double free.
    However, in error case, we free skb and then do stats update with the
    dst pointer passed in. This causes use-after-free on the dst.
    Fix it by taking rcu read lock right before dst could get released to
    make sure dst does not get freed until the stats update is done.
    Note: we don't have this issue in ipv4 cause dst is not used for stats
    update in v4.
    
    Syzkaller reported following crash:
    BUG: KASAN: use-after-free in rawv6_send_hdrinc net/ipv6/raw.c:692 [inline]
    BUG: KASAN: use-after-free in rawv6_sendmsg+0x4421/0x4630 net/ipv6/raw.c:921
    Read of size 8 at addr ffff8801d95ba730 by task syz-executor0/32088
    
    CPU: 1 PID: 32088 Comm: syz-executor0 Not tainted 4.19.0-rc2+ #93
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c4/0x2b4 lib/dump_stack.c:113
     print_address_description.cold.8+0x9/0x1ff mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.9+0x242/0x309 mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     rawv6_send_hdrinc net/ipv6/raw.c:692 [inline]
     rawv6_sendmsg+0x4421/0x4630 net/ipv6/raw.c:921
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2114
     __sys_sendmsg+0x11d/0x280 net/socket.c:2152
     __do_sys_sendmsg net/socket.c:2161 [inline]
     __se_sys_sendmsg net/socket.c:2159 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2159
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x457099
    Code: fd b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 cb b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f83756edc78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f83756ee6d4 RCX: 0000000000457099
    RDX: 0000000000000000 RSI: 0000000020003840 RDI: 0000000000000004
    RBP: 00000000009300a0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000004d4b30 R14: 00000000004c90b1 R15: 0000000000000000
    
    Allocated by task 32088:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc7/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x730 mm/slab.c:3554
     dst_alloc+0xbb/0x1d0 net/core/dst.c:105
     ip6_dst_alloc+0x35/0xa0 net/ipv6/route.c:353
     ip6_rt_cache_alloc+0x247/0x7b0 net/ipv6/route.c:1186
     ip6_pol_route+0x8f8/0xd90 net/ipv6/route.c:1895
     ip6_pol_route_output+0x54/0x70 net/ipv6/route.c:2093
     fib6_rule_lookup+0x277/0x860 net/ipv6/fib6_rules.c:122
     ip6_route_output_flags+0x2c5/0x350 net/ipv6/route.c:2121
     ip6_route_output include/net/ip6_route.h:88 [inline]
     ip6_dst_lookup_tail+0xe27/0x1d60 net/ipv6/ip6_output.c:951
     ip6_dst_lookup_flow+0xc8/0x270 net/ipv6/ip6_output.c:1079
     rawv6_sendmsg+0x12d9/0x4630 net/ipv6/raw.c:905
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:631
     ___sys_sendmsg+0x7fd/0x930 net/socket.c:2114
     __sys_sendmsg+0x11d/0x280 net/socket.c:2152
     __do_sys_sendmsg net/socket.c:2161 [inline]
     __se_sys_sendmsg net/socket.c:2159 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2159
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 5356:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x83/0x290 mm/slab.c:3756
     dst_destroy+0x267/0x3c0 net/core/dst.c:141
     dst_destroy_rcu+0x16/0x19 net/core/dst.c:154
     __rcu_reclaim kernel/rcu/rcu.h:236 [inline]
     rcu_do_batch kernel/rcu/tree.c:2576 [inline]
     invoke_rcu_callbacks kernel/rcu/tree.c:2880 [inline]
     __rcu_process_callbacks kernel/rcu/tree.c:2847 [inline]
     rcu_process_callbacks+0xf23/0x2670 kernel/rcu/tree.c:2864
     __do_softirq+0x30b/0xad8 kernel/softirq.c:292
    
    Fixes: 1789a640f556 ("raw: avoid two atomics in xmit")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 95278ddaa15cfa23e4a06ee9ed7b6ee0197c500b
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Oct 2 12:50:19 2018 -0700

    net_sched: convert idrinfo->lock from spinlock to a mutex
    
    In commit ec3ed293e766 ("net_sched: change tcf_del_walker() to take idrinfo->lock")
    we move fl_hw_destroy_tmplt() to a workqueue to avoid blocking
    with the spinlock held. Unfortunately, this causes a lot of
    troubles here:
    
    1. tcf_chain_destroy() could be called right after we queue the work
       but before the work runs. This is a use-after-free.
    
    2. The chain refcnt is already 0, we can't even just hold it again.
       We can check refcnt==1 but it is ugly.
    
    3. The chain with refcnt 0 is still visible in its block, which means
       it could be still found and used!
    
    4. The block has a refcnt too, we can't hold it without introducing a
       proper API either.
    
    We can make it working but the end result is ugly. Instead of wasting
    time on reviewing it, let's just convert the troubling spinlock to
    a mutex, which allows us to use non-atomic allocations too.
    
    Fixes: ec3ed293e766 ("net_sched: change tcf_del_walker() to take idrinfo->lock")
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Vlad Buslov <vladbu@mellanox.com>
    Cc: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Tested-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      ixgbe: check return value of napi_complete_done()
      sctp: fix fall-through annotation
      r8169: always autoneg on resume
      ipv4: fix use-after-free in ip_cmsg_recv_dstaddr()
      net: qualcomm: rmnet: Fix incorrect allocation flag in receive path
      net: qualcomm: rmnet: Fix incorrect allocation flag in transmit
      net: qualcomm: rmnet: Skip processing loopback packets
      net: systemport: Fix wake-up interrupt race during resume
      rtnl: limit IFLA_NUM_TX_QUEUES and IFLA_NUM_RX_QUEUES to 4096
      bonding: fix warning message
      inet: make sure to grab rcu_read_lock before using ireq->ireq_opt
      nfp: avoid soft lockups under control message storm
      declance: Fix continuation with the adapter identification message
      net: fec: fix rare tx timeout
      r8169: fix network stalls due to missing bit TXCFG_AUTO_FIFO
      tun: napi flags belong to tfile
      tun: initialize napi_mutex unconditionally
      tun: remove unused parameters
      bond: take rcu lock in netpoll_send_skb_on_dev
      rtnetlink: Fail dump if target netnsid is invalid
      ...

commit bc2477f7d3f3083d344b327e358e43093054023c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Oct 3 12:09:41 2018 +0100

    drm/i915/execlists: Flush the CS events before unpinning
    
    Inside the execlists submission tasklet, we often make the mistake of
    assuming that everything beneath the request is available for use.
    However, the submission and the request live on two separate timelines,
    and the request contents may be freed from an early retirement before we
    have had a chance to run the submission tasklet (think ksoftirqd). To
    safeguard ourselves against any mistakes, flush the tasklet before we
    unpin the context if execlists still has a reference to this context.
    
    v2: Pull hw_context->active tracking into schedule_in and schedule_out.
    
    References: 60367132a214 ("drm/i915: Avoid use-after-free of ctx in request tracepoints")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181003110941.27886-1-chris@chris-wilson.co.uk

commit 64199fc0a46ba211362472f7f942f900af9492fd
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Sep 30 11:33:39 2018 -0700

    ipv4: fix use-after-free in ip_cmsg_recv_dstaddr()
    
    Caching ip_hdr(skb) before a call to pskb_may_pull() is buggy,
    do not do it.
    
    Fixes: 2efd4fca703a ("ip: in cmsg IP(V6)_ORIGDSTADDR call pskb_may_pull")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 11924ba5e671d6caef1516923e2bd8c72929a3fe
Author: Jorgen Hansen <jhansen@vmware.com>
Date:   Fri Sep 21 00:31:05 2018 -0700

    VMCI: Resource wildcard match fixed
    
    When adding a VMCI resource, the check for an existing entry
    would ignore that the new entry could be a wildcard. This could
    result in multiple resource entries that would match a given
    handle. One disastrous outcome of this is that the
    refcounting used to ensure that delayed callbacks for VMCI
    datagrams have run before the datagram is destroyed can be
    wrong, since the refcount could be increased on the duplicate
    entry. This in turn leads to a use after free bug. This issue
    was discovered by Hangbin Liu using KASAN and syzkaller.
    
    Fixes: bc63dedb7d46 ("VMCI: resource object implementation")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Reviewed-by: Adit Ranadive <aditr@vmware.com>
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: Jorgen Hansen <jhansen@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d4c2d89913e2d891bd6a34b12050a2576e60525
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Mon Oct 1 21:45:36 2018 +0200

    drm/cma-helper: Fix crash in fbdev error path
    
    Sergey Suloev reported a crash happening in drm_client_dev_hotplug()
    when fbdev had failed to register.
    
    [    9.124598] vc4_hdmi 3f902000.hdmi: ASoC: Failed to create component debugfs directory
    [    9.147667] vc4_hdmi 3f902000.hdmi: vc4-hdmi-hifi <-> 3f902000.hdmi mapping ok
    [    9.155184] vc4_hdmi 3f902000.hdmi: ASoC: no DMI vendor name!
    [    9.166544] vc4-drm soc:gpu: bound 3f902000.hdmi (ops vc4_hdmi_ops [vc4])
    [    9.173840] vc4-drm soc:gpu: bound 3f806000.vec (ops vc4_vec_ops [vc4])
    [    9.181029] vc4-drm soc:gpu: bound 3f004000.txp (ops vc4_txp_ops [vc4])
    [    9.188519] vc4-drm soc:gpu: bound 3f400000.hvs (ops vc4_hvs_ops [vc4])
    [    9.195690] vc4-drm soc:gpu: bound 3f206000.pixelvalve (ops vc4_crtc_ops [vc4])
    [    9.203523] vc4-drm soc:gpu: bound 3f207000.pixelvalve (ops vc4_crtc_ops [vc4])
    [    9.215032] vc4-drm soc:gpu: bound 3f807000.pixelvalve (ops vc4_crtc_ops [vc4])
    [    9.274785] vc4-drm soc:gpu: bound 3fc00000.v3d (ops vc4_v3d_ops [vc4])
    [    9.290246] [drm] Initialized vc4 0.0.0 20140616 for soc:gpu on minor 0
    [    9.297464] [drm] Supports vblank timestamp caching Rev 2 (21.10.2013).
    [    9.304600] [drm] Driver supports precise vblank timestamp query.
    [    9.382856] vc4-drm soc:gpu: [drm:drm_fb_helper_fbdev_setup [drm_kms_helper]] *ERROR* Failed to set fbdev configuration
    [   10.404937] Unable to handle kernel paging request at virtual address 00330a656369768a
    [   10.441620] [00330a656369768a] address between user and kernel address ranges
    [   10.449087] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    [   10.454762] Modules linked in: brcmfmac vc4 drm_kms_helper cfg80211 drm rfkill smsc95xx brcmutil usbnet drm_panel_orientation_quirks raspberrypi_hwmon bcm2835_dma crc32_ce pwm_bcm2835 bcm2835_rng virt_dma rng_core i2c_bcm2835 ip_tables x_tables ipv6
    [   10.477296] CPU: 2 PID: 45 Comm: kworker/2:1 Not tainted 4.19.0-rc5 #3
    [   10.483934] Hardware name: Raspberry Pi 3 Model B Rev 1.2 (DT)
    [   10.489966] Workqueue: events output_poll_execute [drm_kms_helper]
    [   10.596515] Process kworker/2:1 (pid: 45, stack limit = 0x000000007e8924dc)
    [   10.603590] Call trace:
    [   10.606259]  drm_client_dev_hotplug+0x5c/0xb0 [drm]
    [   10.611303]  drm_kms_helper_hotplug_event+0x30/0x40 [drm_kms_helper]
    [   10.617849]  output_poll_execute+0xc4/0x1e0 [drm_kms_helper]
    [   10.623616]  process_one_work+0x1c8/0x318
    [   10.627695]  worker_thread+0x48/0x428
    [   10.631420]  kthread+0xf8/0x128
    [   10.634615]  ret_from_fork+0x10/0x18
    [   10.638255] Code: 54000220 f9401261 aa1303e0 b4000141 (f9400c21)
    [   10.644456] ---[ end trace c75b4a4b0e141908 ]---
    
    The reason for this is that drm_fbdev_cma_init() removes the drm_client
    when fbdev registration fails, but it doesn't remove the client from the
    drm_device client list. So the client list now has a pointer that points
    into the unknown and we have a 'use after free' situation.
    
    Split drm_client_new() into drm_client_init() and drm_client_add() to fix
    removal in the error path.
    
    Fixes: 894a677f4b3e ("drm/cma-helper: Use the generic fbdev emulation")
    Reported-by: Sergey Suloev <ssuloev@orpaltech.com>
    Cc: Stefan Wahren <stefan.wahren@i2se.com>
    Cc: Eric Anholt <eric@anholt.net>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181001194536.57756-1-noralf@tronnes.org

commit 12d43deb1ee639d01a2a8d2a7a4cc8ad31224475
Author: Jann Horn <jannh@google.com>
Date:   Mon Oct 1 17:31:17 2018 +0200

    drm: fix use-after-free read in drm_mode_create_lease_ioctl()
    
    fd_install() moves the reference given to it into the file descriptor table
    of the current process. If the current process is multithreaded, then
    immediately after fd_install(), another thread can close() the file
    descriptor and cause the file's resources to be cleaned up.
    
    Since the reference to "lessee" is held by the file, we must not access
    "lessee" after the fd_install() call.
    
    As far as I can tell, to reach this codepath, the caller must have an open
    file descriptor to a DRI device in master mode. I'm not sure what the
    requirements for that are.
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Fixes: 62884cd386b8 ("drm: Add four ioctls for managing drm mode object leases [v7]")
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181001153117.216923-1-jannh@google.com

commit 393b9b0f830efc21c26a4ef9a9ce4d517eb98463
Author: Govind Singh <govinds@codeaurora.org>
Date:   Thu Sep 20 10:34:26 2018 +0530

    ath10k: disable napi before resource cleanup to avoid "use after free"
    
    CE buffers are cleaned up prior to napi disable and this is causing
    NULL pointer dereference due to "use after free".
    
    Disable napi before resource cleanup to avoid "use after free".
    
    Signed-off-by: Govind Singh <govinds@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 1db58529454742f67ebd96e3588315e880b72837
Author: Yu Zhao <yuzhao@google.com>
Date:   Thu Sep 27 17:05:04 2018 -0600

    cfg80211: fix use-after-free in reg_process_hint()
    
    reg_process_hint_country_ie() can free regulatory_request and return
    REG_REQ_ALREADY_SET. We shouldn't use regulatory_request after it's
    called. KASAN error was observed when this happens.
    
    BUG: KASAN: use-after-free in reg_process_hint+0x839/0x8aa [cfg80211]
    Read of size 4 at addr ffff8800c430d434 by task kworker/1:3/89
    <snipped>
    Workqueue: events reg_todo [cfg80211]
    Call Trace:
     dump_stack+0xc1/0x10c
     ? _atomic_dec_and_lock+0x1ad/0x1ad
     ? _raw_spin_lock_irqsave+0xa0/0xd2
     print_address_description+0x86/0x26f
     ? reg_process_hint+0x839/0x8aa [cfg80211]
     kasan_report+0x241/0x29b
     reg_process_hint+0x839/0x8aa [cfg80211]
     reg_todo+0x204/0x5b9 [cfg80211]
     process_one_work+0x55f/0x8d0
     ? worker_detach_from_pool+0x1b5/0x1b5
     ? _raw_spin_unlock_irq+0x65/0xdd
     ? _raw_spin_unlock_irqrestore+0xf3/0xf3
     worker_thread+0x5dd/0x841
     ? kthread_parkme+0x1d/0x1d
     kthread+0x270/0x285
     ? pr_cont_work+0xe3/0xe3
     ? rcu_read_unlock_sched_notrace+0xca/0xca
     ret_from_fork+0x22/0x40
    
    Allocated by task 2718:
     set_track+0x63/0xfa
     __kmalloc+0x119/0x1ac
     regulatory_hint_country_ie+0x38/0x329 [cfg80211]
     __cfg80211_connect_result+0x854/0xadd [cfg80211]
     cfg80211_rx_assoc_resp+0x3bc/0x4f0 [cfg80211]
    smsc95xx v1.0.6
     ieee80211_sta_rx_queued_mgmt+0x1803/0x7ed5 [mac80211]
     ieee80211_iface_work+0x411/0x696 [mac80211]
     process_one_work+0x55f/0x8d0
     worker_thread+0x5dd/0x841
     kthread+0x270/0x285
     ret_from_fork+0x22/0x40
    
    Freed by task 89:
     set_track+0x63/0xfa
     kasan_slab_free+0x6a/0x87
     kfree+0xdc/0x470
     reg_process_hint+0x31e/0x8aa [cfg80211]
     reg_todo+0x204/0x5b9 [cfg80211]
     process_one_work+0x55f/0x8d0
     worker_thread+0x5dd/0x841
     kthread+0x270/0x285
     ret_from_fork+0x22/0x40
    <snipped>
    
    Signed-off-by: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit d2d2d4fb1f54eff0f3faa9762d84f6446a4bc5d0
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Tue Sep 25 12:52:42 2018 +0300

    fuse: Fix use-after-free in fuse_dev_do_write()
    
    After we found req in request_find() and released the lock,
    everything may happen with the req in parallel:
    
    cpu0                              cpu1
    fuse_dev_do_write()               fuse_dev_do_write()
      req = request_find(fpq, ...)    ...
      spin_unlock(&fpq->lock)         ...
      ...                             req = request_find(fpq, oh.unique)
      ...                             spin_unlock(&fpq->lock)
      queue_interrupt(&fc->iq, req);   ...
      ...                              ...
      ...                              ...
      request_end(fc, req);
        fuse_put_request(fc, req);
      ...                              queue_interrupt(&fc->iq, req);
    
    
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 46c34a348b0a ("fuse: no fc->lock for pqueue parts")
    Cc: <stable@vger.kernel.org> # v4.2

commit bc78abbd55dd28e2287ec6d6502b842321a17c87
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Tue Sep 25 12:28:55 2018 +0300

    fuse: Fix use-after-free in fuse_dev_do_read()
    
    We may pick freed req in this way:
    
    [cpu0]                                  [cpu1]
    fuse_dev_do_read()                      fuse_dev_do_write()
       list_move_tail(&req->list, ...);     ...
       spin_unlock(&fpq->lock);             ...
       ...                                  request_end(fc, req);
       ...                                    fuse_put_request(fc, req);
       if (test_bit(FR_INTERRUPTED, ...))
             queue_interrupt(fiq, req);
    
    Fix that by keeping req alive until we finish all manipulations.
    
    Reported-by: syzbot+4e975615ca01f2277bdd@syzkaller.appspotmail.com
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 46c34a348b0a ("fuse: no fc->lock for pqueue parts")
    Cc: <stable@vger.kernel.org> # v4.2

commit 8d908eb045bb1ad8a842910360938a204a203617
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Wed Sep 26 18:29:11 2018 +0200

    s390/qeth: remove CARD_FROM_CDEV helper
    
    The cdev-to-card translation walks through two layers of drvdata,
    with no locking or refcounting (where eg. the ccwgroup core only
    accesses a cdev's drvdata while holding the ccwlock).
    
    This might be safe for now, but any careless usage of the helper has the
    potential for subtle races and use-after-free's. Luckily there's only
    one occurrence where we _really_ need it (in qeth_irq()), for any other
    user we can just pass through an appropriate card pointer.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1c47eb61d52379de5747d02bb36be20d7a2d0d3
Author: Martin Willi <martin@strongswan.org>
Date:   Tue Sep 25 09:41:14 2018 +0200

    mac80211_hwsim: fix race in radio destruction from netlink notifier
    
    The asynchronous destruction from a work-queue of radios tagged with
    destroy-on-close may race with the owning namespace about to exit,
    resulting in potential use-after-free of that namespace.
    
    Instead of using a work-queue, move radios about to destroy to a
    temporary list, which can be worked on synchronously after releasing
    the lock. This should be safe to do from the netlink socket notifier,
    as the namespace is guaranteed to not get released.
    
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 628980e5c8f038f730582c6ee50b7410741cd96e
Author: Martin Willi <martin@strongswan.org>
Date:   Tue Sep 25 09:41:13 2018 +0200

    mac80211_hwsim: fix locking when iterating radios during ns exit
    
    The cleanup of radios during namespace exit has recently been reworked
    to directly delete a radio while temporarily releasing the spinlock,
    fixing a race condition between the work-queue execution and namespace
    exits. However, the temporary unlock allows unsafe modifications on the
    iterated list, resulting in a potential crash when continuing the
    iteration of additional radios.
    
    Move radios about to destroy to a temporary list, and clean that up
    after releasing the spinlock once iteration is complete.
    
    Fixes: 8cfd36a0b53a ("mac80211_hwsim: fix use-after-free bug in hwsim_exit_net")
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit b90cd6f2b905905fb42671009dc0e27c310a16ae
Author: Jason Yan <yanaijie@huawei.com>
Date:   Tue Sep 25 10:56:54 2018 +0800

    scsi: libsas: fix a race condition when smp task timeout
    
    When the lldd is processing the complete sas task in interrupt and set the
    task stat as SAS_TASK_STATE_DONE, the smp timeout timer is able to be
    triggered at the same time. And smp_task_timedout() will complete the task
    wheter the SAS_TASK_STATE_DONE is set or not. Then the sas task may freed
    before lldd end the interrupt process. Thus a use-after-free will happen.
    
    Fix this by calling the complete() only when SAS_TASK_STATE_DONE is not
    set. And remove the check of the return value of the del_timer(). Once the
    LLDD sets DONE, it must call task->done(), which will call
    smp_task_done()->complete() and the task will be completed and freed
    correctly.
    
    Reported-by: chenxiang <chenxiang66@hisilicon.com>
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    CC: John Garry <john.garry@huawei.com>
    CC: Johannes Thumshirn <jthumshirn@suse.de>
    CC: Ewan Milne <emilne@redhat.com>
    CC: Christoph Hellwig <hch@lst.de>
    CC: Tomas Henzl <thenzl@redhat.com>
    CC: Dan Williams <dan.j.williams@intel.com>
    CC: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 5c5702e259dc66e6fceed5117effab79c186e87a
Author: Parav Pandit <parav@mellanox.com>
Date:   Tue Sep 25 12:10:40 2018 +0300

    RDMA/core: Set right entry state before releasing reference
    
    Currently add_modify_gid() for IB link layer has followong issue
    in cache update path.
    
    When GID update event occurs, core releases reference to the GID
    table without updating its state and/or entry pointer.
    
    CPU-0                              CPU-1
    ------                             -----
    ib_cache_update()                    IPoIB ULP
       add_modify_gid()                   [..]
          put_gid_entry()
          refcnt = 0, but
          state = valid,
          entry is valid.
          (work item is not yet executed).
                                       ipoib_create_ah()
                                         rdma_create_ah()
                                            rdma_get_gid_attr() <--
                                            Tries to acquire gid_attr
                                            which has refcnt = 0.
                                            This is incorrect.
    
    GID entry state and entry pointer is provides the accurate GID enty
    state. Such fields must be updated with rwlock to protect against
    readers and, such fields must be in sane state before refcount can drop
    to zero. Otherwise above race condition can happen leading to
    use-after-free situation.
    
    Following backtrace has been observed when cache update for an IB port
    is triggered while IPoIB ULP is creating an AH.
    
    Therefore, when updating GID entry, first mark a valid entry as invalid
    through state and set the barrier so that no callers can acquired
    the GID entry, followed by release reference to it.
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 4 PID: 29106 at lib/refcount.c:153 refcount_inc_checked+0x30/0x50
    Workqueue: ib-comp-unb-wq ib_cq_poll_work [ib_core]
    RIP: 0010:refcount_inc_checked+0x30/0x50
    RSP: 0018:ffff8802ad36f600 EFLAGS: 00010082
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000000
    RDX: 0000000000000002 RSI: 0000000000000008 RDI: ffffffff86710100
    RBP: ffff8802d6e60a30 R08: ffffed005d67bf8b R09: ffffed005d67bf8b
    R10: 0000000000000001 R11: ffffed005d67bf8a R12: ffff88027620cee8
    R13: ffff8802d6e60988 R14: ffff8802d6e60a78 R15: 0000000000000202
    FS: 0000000000000000(0000) GS:ffff8802eb200000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f3ab35e5c88 CR3: 00000002ce84a000 CR4: 00000000000006e0
    IPv6: ADDRCONF(NETDEV_CHANGE): ib1: link becomes ready
    Call Trace:
    rdma_get_gid_attr+0x220/0x310 [ib_core]
    ? lock_acquire+0x145/0x3a0
    rdma_fill_sgid_attr+0x32c/0x470 [ib_core]
    rdma_create_ah+0x89/0x160 [ib_core]
    ? rdma_fill_sgid_attr+0x470/0x470 [ib_core]
    ? ipoib_create_ah+0x52/0x260 [ib_ipoib]
    ipoib_create_ah+0xf5/0x260 [ib_ipoib]
    ipoib_mcast_join_complete+0xbbe/0x2540 [ib_ipoib]
    
    Fixes: b150c3862d21 ("IB/core: Introduce GID entry reference counts")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit bd729f9d67aa9a303d8925bb8c4f06af25f407d1
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Sep 10 13:59:59 2018 -0400

    USB: fix error handling in usb_driver_claim_interface()
    
    The syzbot fuzzing project found a use-after-free bug in the USB
    core.  The bug was caused by usbfs not unbinding from an interface
    when the USB device file was closed, which led another process to
    attempt the unbind later on, after the private data structure had been
    deallocated.
    
    The reason usbfs did not unbind the interface at the appropriate time
    was because it thought the interface had never been claimed in the
    first place.  This was caused by the fact that
    usb_driver_claim_interface() does not clean up properly when
    device_bind_driver() returns an error.  Although the error code gets
    passed back to the caller, the iface->dev.driver pointer remains set
    and iface->condition remains equal to USB_INTERFACE_BOUND.
    
    This patch adds proper error handling to usb_driver_claim_interface().
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: syzbot+f84aa7209ccec829536f@syzkaller.appspotmail.com
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8675860592321a43bbb0b5aedc244a9b2321edc3
Author: Wei Wang <weiwan@google.com>
Date:   Tue Sep 18 13:44:59 2018 -0700

    Revert "ipv6: fix double refcount of fib6_metrics"
    
    This reverts commit e70a3aad44cc8b24986687ffc98c4a4f6ecf25ea.
    
    This change causes use-after-free on dst->_metrics.
    The crash trace looks like this:
    [   97.763269] BUG: KASAN: use-after-free in ip6_mtu+0x116/0x140
    [   97.769038] Read of size 4 at addr ffff881781d2cf84 by task svw_NetThreadEv/8801
    
    [   97.777954] CPU: 76 PID: 8801 Comm: svw_NetThreadEv Not tainted 4.15.0-smp-DEV #11
    [   97.777956] Hardware name: Default string Default string/Indus_QC_02, BIOS 5.46.4 03/29/2018
    [   97.777957] Call Trace:
    [   97.777971]  [<ffffffff895709db>] dump_stack+0x4d/0x72
    [   97.777985]  [<ffffffff881651df>] print_address_description+0x6f/0x260
    [   97.777997]  [<ffffffff88165747>] kasan_report+0x257/0x370
    [   97.778001]  [<ffffffff894488e6>] ? ip6_mtu+0x116/0x140
    [   97.778004]  [<ffffffff881658b9>] __asan_report_load4_noabort+0x19/0x20
    [   97.778008]  [<ffffffff894488e6>] ip6_mtu+0x116/0x140
    [   97.778013]  [<ffffffff892bb91e>] tcp_current_mss+0x12e/0x280
    [   97.778016]  [<ffffffff892bb7f0>] ? tcp_mtu_to_mss+0x2d0/0x2d0
    [   97.778022]  [<ffffffff887b45b8>] ? depot_save_stack+0x138/0x4a0
    [   97.778037]  [<ffffffff87c38985>] ? __mmdrop+0x145/0x1f0
    [   97.778040]  [<ffffffff881643b1>] ? save_stack+0xb1/0xd0
    [   97.778046]  [<ffffffff89264c82>] tcp_send_mss+0x22/0x220
    [   97.778059]  [<ffffffff89273a49>] tcp_sendmsg_locked+0x4f9/0x39f0
    [   97.778062]  [<ffffffff881642b4>] ? kasan_check_write+0x14/0x20
    [   97.778066]  [<ffffffff89273550>] ? tcp_sendpage+0x60/0x60
    [   97.778070]  [<ffffffff881cb359>] ? rw_copy_check_uvector+0x69/0x280
    [   97.778075]  [<ffffffff8873c65f>] ? import_iovec+0x9f/0x430
    [   97.778078]  [<ffffffff88164be7>] ? kasan_slab_free+0x87/0xc0
    [   97.778082]  [<ffffffff8873c5c0>] ? memzero_page+0x140/0x140
    [   97.778085]  [<ffffffff881642b4>] ? kasan_check_write+0x14/0x20
    [   97.778088]  [<ffffffff89276f6c>] tcp_sendmsg+0x2c/0x50
    [   97.778092]  [<ffffffff89276f6c>] ? tcp_sendmsg+0x2c/0x50
    [   97.778098]  [<ffffffff89352d43>] inet_sendmsg+0x103/0x480
    [   97.778102]  [<ffffffff89352c40>] ? inet_gso_segment+0x15b0/0x15b0
    [   97.778105]  [<ffffffff890294da>] sock_sendmsg+0xba/0xf0
    [   97.778108]  [<ffffffff8902ab6a>] ___sys_sendmsg+0x6ca/0x8e0
    [   97.778113]  [<ffffffff87dccac1>] ? hrtimer_try_to_cancel+0x71/0x3b0
    [   97.778116]  [<ffffffff8902a4a0>] ? copy_msghdr_from_user+0x3d0/0x3d0
    [   97.778119]  [<ffffffff881646d1>] ? memset+0x31/0x40
    [   97.778123]  [<ffffffff87a0cff5>] ? schedule_hrtimeout_range_clock+0x165/0x380
    [   97.778127]  [<ffffffff87a0ce90>] ? hrtimer_nanosleep_restart+0x250/0x250
    [   97.778130]  [<ffffffff87dcc700>] ? __hrtimer_init+0x180/0x180
    [   97.778133]  [<ffffffff87dd1f82>] ? ktime_get_ts64+0x172/0x200
    [   97.778137]  [<ffffffff8822b8ec>] ? __fget_light+0x8c/0x2f0
    [   97.778141]  [<ffffffff8902d5c6>] __sys_sendmsg+0xe6/0x190
    [   97.778144]  [<ffffffff8902d5c6>] ? __sys_sendmsg+0xe6/0x190
    [   97.778147]  [<ffffffff8902d4e0>] ? SyS_shutdown+0x20/0x20
    [   97.778152]  [<ffffffff87cd4370>] ? wake_up_q+0xe0/0xe0
    [   97.778155]  [<ffffffff8902d670>] ? __sys_sendmsg+0x190/0x190
    [   97.778158]  [<ffffffff8902d683>] SyS_sendmsg+0x13/0x20
    [   97.778162]  [<ffffffff87a1600c>] do_syscall_64+0x2ac/0x430
    [   97.778166]  [<ffffffff87c17515>] ? do_page_fault+0x35/0x3d0
    [   97.778171]  [<ffffffff8960131f>] ? page_fault+0x2f/0x50
    [   97.778174]  [<ffffffff89600071>] entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    [   97.778177] RIP: 0033:0x7f83fa36000d
    [   97.778178] RSP: 002b:00007f83ef9229e0 EFLAGS: 00000293 ORIG_RAX: 000000000000002e
    [   97.778180] RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 00007f83fa36000d
    [   97.778182] RDX: 0000000000004000 RSI: 00007f83ef922f00 RDI: 0000000000000036
    [   97.778183] RBP: 00007f83ef923040 R08: 00007f83ef9231f8 R09: 00007f83ef923168
    [   97.778184] R10: 0000000000000000 R11: 0000000000000293 R12: 00007f83f69c5b40
    [   97.778185] R13: 000000000000001c R14: 0000000000000001 R15: 0000000000004000
    
    [   97.779684] Allocated by task 5919:
    [   97.783185]  save_stack+0x46/0xd0
    [   97.783187]  kasan_kmalloc+0xad/0xe0
    [   97.783189]  kmem_cache_alloc_trace+0xdf/0x580
    [   97.783190]  ip6_convert_metrics.isra.79+0x7e/0x190
    [   97.783192]  ip6_route_info_create+0x60a/0x2480
    [   97.783193]  ip6_route_add+0x1d/0x80
    [   97.783195]  inet6_rtm_newroute+0xdd/0xf0
    [   97.783198]  rtnetlink_rcv_msg+0x641/0xb10
    [   97.783200]  netlink_rcv_skb+0x27b/0x3e0
    [   97.783202]  rtnetlink_rcv+0x15/0x20
    [   97.783203]  netlink_unicast+0x4be/0x720
    [   97.783204]  netlink_sendmsg+0x7bc/0xbf0
    [   97.783205]  sock_sendmsg+0xba/0xf0
    [   97.783207]  ___sys_sendmsg+0x6ca/0x8e0
    [   97.783208]  __sys_sendmsg+0xe6/0x190
    [   97.783209]  SyS_sendmsg+0x13/0x20
    [   97.783211]  do_syscall_64+0x2ac/0x430
    [   97.783213]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    [   97.784709] Freed by task 0:
    [   97.785056] knetbase: Error: /proc/sys/net/core/txcs_enable does not exist
    [   97.794497]  save_stack+0x46/0xd0
    [   97.794499]  kasan_slab_free+0x71/0xc0
    [   97.794500]  kfree+0x7c/0xf0
    [   97.794501]  fib6_info_destroy_rcu+0x24f/0x310
    [   97.794504]  rcu_process_callbacks+0x38b/0x1730
    [   97.794506]  __do_softirq+0x1c8/0x5d0
    
    Reported-by: John Sperbeck <jsperbeck@google.com>
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      net/ipv6: do not copy dst flags on rt init
      qmi_wwan: set DTR for modems in forced USB2 mode
      clk: x86: Stop marking clocks as CLK_IS_CRITICAL
      r8169: Get and enable optional ether_clk clock
      clk: x86: add "ether_clk" alias for Bay Trail / Cherry Trail
      r8169: enable ASPM on RTL8106E
      r8169: Align ASPM/CLKREQ setting function with vendor driver
      Revert "kcm: remove any offset before parsing messages"
      kcm: remove any offset before parsing messages
      net: ethernet: Fix a unused function warning.
      net: dsa: mv88e6xxx: Fix ATU Miss Violation
      tls: fix currently broken MSG_PEEK behavior
      hv_netvsc: pair VF based on serial number
      PCI: hv: support reporting serial number as slot information
      bnxt_en: Fix VF mac address regression.
      ipv6: fix possible use-after-free in ip6_xmit()
      net: hp100: fix always-true check for link up state
      ARM: dts: at91: add new compatibility string for macb on sama5d3
      net: macb: disable scatter-gather for macb on sama5d3
      net: mvpp2: let phylink manage the carrier state
      ...

commit bbd6528d28c1b8e80832b3b018ec402b6f5c3215
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 14 12:02:31 2018 -0700

    ipv6: fix possible use-after-free in ip6_xmit()
    
    In the unlikely case ip6_xmit() has to call skb_realloc_headroom(),
    we need to call skb_set_owner_w() before consuming original skb,
    otherwise we risk a use-after-free.
    
    Bring IPv6 in line with what we do in IPv4 to fix this.
    
    Fixes: 1da177e4c3f41 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Revert "cdc-acm: implement put_char() and flush_chars()"
      usb: Change usb_of_get_companion_dev() place to usb/common
      usb: xhci: fix interrupt transfer error happened on MTK platforms
      usb: cdc-wdm: Fix a sleep-in-atomic-context bug in service_outstanding_interrupt()
      usb: misc: uss720: Fix two sleep-in-atomic-context bugs
      usb: host: u132-hcd: Fix a sleep-in-atomic-context bug in u132_get_frame()
      usb: Avoid use-after-free by flushing endpoints early in usb_set_interface()
      linux/mod_devicetable.h: fix kernel-doc missing notation for typec_device_id
      usb/typec: fix kernel-doc notation warning for typec_match_altmode
      usb: Don't die twice if PCI xhci host is not responding in resume
      usb: mtu3: fix error of xhci port id when enable U3 dual role
      usb: uas: add support for more quirk flags
      USB: Add quirk to support DJI CineSSD
      usb: typec: fix kernel-doc parameter warning
      usb/dwc3/gadget: fix kernel-doc parameter warning
      USB: yurex: Check for truncation in yurex_read()
      USB: yurex: Fix buffer over-read in yurex_write()
      usb: host: xhci-plat: Iterate over parent nodes for finding quirks
      xhci: Fix use after free for URB cancellation on a reallocated endpoint
      USB: add quirk for WORLDE Controller KS49 or Prodipe MIDI 49C USB controller
      ...

commit 6a15f3ff19a8dd394e3a21480512c2cb98e26b3c
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Wed Sep 12 18:07:10 2018 +0200

    drm/amdgpu: Initialize fences array entries in amdgpu_sa_bo_next_hole
    
    The entries were only initialized once in amdgpu_sa_bo_new. If a fence
    wasn't signalled yet in the first amdgpu_sa_bo_next_hole call, but then
    got signalled before a later amdgpu_sa_bo_next_hole call, it could
    destroy the fence but leave its pointer in the array, resulting in
    use-after-free in amdgpu_sa_bo_new.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5fe23f262e0548ca7f19fb79f89059a60d087d22
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Sep 12 16:27:44 2018 -0700

    ucma: fix a use-after-free in ucma_resolve_ip()
    
    There is a race condition between ucma_close() and ucma_resolve_ip():
    
    CPU0                            CPU1
    ucma_resolve_ip():              ucma_close():
    
    ctx = ucma_get_ctx(file, cmd.id);
    
            list_for_each_entry_safe(ctx, tmp, &file->ctx_list, list) {
                    mutex_lock(&mut);
                    idr_remove(&ctx_idr, ctx->id);
                    mutex_unlock(&mut);
                    ...
                    mutex_lock(&mut);
                    if (!ctx->closing) {
                            mutex_unlock(&mut);
                            rdma_destroy_id(ctx->cm_id);
                    ...
                    ucma_free_ctx(ctx);
    
    ret = rdma_resolve_addr();
    ucma_put_ctx(ctx);
    
    Before idr_remove(), ucma_get_ctx() could still find the ctx
    and after rdma_destroy_id(), rdma_resolve_addr() may still
    access id_priv pointer. Also, ucma_put_ctx() may use ctx after
    ucma_free_ctx() too.
    
    ucma_close() should call ucma_put_ctx() too which tests the
    refcnt and waits for the last one releasing it. The similar
    pattern is already used by ucma_destroy_id().
    
    Reported-and-tested-by: syzbot+da2591e115d57a9cbb8b@syzkaller.appspotmail.com
    Reported-by: syzbot+cfe3c1e8ef634ba8964b@syzkaller.appspotmail.com
    Cc: Jason Gunthorpe <jgg@mellanox.com>
    Cc: Doug Ledford <dledford@redhat.com>
    Cc: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit c1a214ad82d7ac6f19fe48f90b13403b40ead9dc
Author: John Hubbard <jhubbard@nvidia.com>
Date:   Thu Aug 23 09:16:58 2018 +0300

    mei: fix use-after-free in mei_cl_write
    
    KASAN reports a use-after-free during startup, in mei_cl_write:
    
        BUG: KASAN: use-after-free in mei_cl_write+0x601/0x870 [mei]
           (drivers/misc/mei/client.c:1770)
    
    This is caused by commit 98e70866aacb ("mei: add support for variable
    length mei headers."), which changed the return value from len, to
    buf->size. That ends up using a stale buf pointer, because blocking
    call, the cb (callback) is deleted in me_cl_complete() function.
    
    However, fortunately, len remains unchanged throughout the function
    (and I don't see anything else that would require re-reading buf->size
    either), so the fix is to simply revert the change, and return len, as
    before.
    
    Fixes: 98e70866aacb ("mei: add support for variable length mei headers.")
    CC: Arnd Bergmann <arnd@arndb.de>
    CC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc4dfb7f70a344f24c1c71e298deea0771dadcb2
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Sep 10 18:27:26 2018 -0700

    rds: fix two RCU related problems
    
    When a rds sock is bound, it is inserted into the bind_hash_table
    which is protected by RCU. But when releasing rds sock, after it
    is removed from this hash table, it is freed immediately without
    respecting RCU grace period. This could cause some use-after-free
    as reported by syzbot.
    
    Mark the rds sock with SOCK_RCU_FREE before inserting it into the
    bind_hash_table, so that it would be always freed after a RCU grace
    period.
    
    The other problem is in rds_find_bound(), the rds sock could be
    freed in between rhashtable_lookup_fast() and rds_sock_addref(),
    so we need to extend RCU read lock protection in rds_find_bound()
    to close this race condition.
    
    Reported-and-tested-by: syzbot+8967084bcac563795dc6@syzkaller.appspotmail.com
    Reported-by: syzbot+93a5839deb355537440f@syzkaller.appspotmail.com
    Cc: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Cc: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Cc: rds-devel@oss.oracle.com
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oarcle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bf8744e40cd6db20dfbd231ad44943f6bc8ac311
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Mon Sep 10 15:21:56 2018 +0200

    qxl: refactor to use drm_fb_helper_fbdev_setup
    
    Lots of code can be removed by relying on fb-helper:
    - "struct drm_framebuffer" moves to fb_helper.fb.
    - "struct drm_gem_object" moves to fb_helper.obj[0].
    - "struct qxl_device" can be inferred as drm_fb_helper is embedded.
    - qxl_user_framebuffer_create -> drm_gem_fb_create.
    - qxl_user_framebuffer_destroy -> drm_gem_fb_destroy.
    - qxl_fbdev_destroy -> drm_fb_helper_fbdev_teardown + vfree(shadow).
    
    Remove unused code:
    - qxl_fbdev_qobj_is_fb, qxl_fbdev_set_suspend.
    - Unused fields of qxl_fbdev: delayed_ops, delayed_ops_lock, size.
    
    Misc notes:
    - The dirty callback is preserved as it is necessary to trigger update
      commands in the hw (the screen stays black otherwise).
    - No idea when .create_handle in drm_framebuffer_funcs is used, but use
      the same drm_gem_fb_create_handle to match drm_gem_fb_funcs.
    - I don't know why qxl_fb_find_or_create_single used to check for an
      existing framebuffer and removed that check to match other drivers.
    - Use of drm_fb_helper_fbdev_teardown also requires "info->fbdefio" to
      be dynamically allocated. Replace the existing defio config by
      drm_fb_helper_defio_init to accomodate this.
    
    Testing results: startx with fbdev, modesetting and qxl all seems to
    work. Tested also with CONFIG_DRM_FBDEV_EMULATION=n, fbdev obviously
    fails but others are fine. QEMU -spice and QEMU -spice with vdagent and
    multiple (resized) displays (via remote-viewer) also works.
    unbind vtconsole and rmmod has *not* regressed (i.e. it still trips on a
    use-after-free in qxl_check_idle via qxl_ttm_fini).
    
    Ideally setup/teardown is replaced by drm_fbdev_generic_setup as that
    would result in further code reduction, improve error handling (like not
    leaking shadow memory), but unfortunately QXL has no implementation for
    qxl_gem_prime_vmap.
    
    Signed-off-by: Peter Wu <peter@lekensteyn.nl>
    Link: http://patchwork.freedesktop.org/patch/msgid/20180910132156.23201-1-peter@lekensteyn.nl
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

commit fbbf794cbd4872cc4e894ab236d45c97b98008ea
Author: Christian König <christian.koenig@amd.com>
Date:   Wed Sep 5 17:04:44 2018 +0200

    drm/amdgpu: set bulk_moveable to false when a per VM is released
    
    Otherwise we might run into a use after free during bulk move.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

committed
      early this week"
    
    * tag 'ceph-for-4.19-rc3' of https://github.com/ceph/ceph-client:
      rbd: support cloning across namespaces
      rbd: factor out get_parent_info()
      ceph: avoid a use-after-free in ceph_destroy_options()

commit 728356dedeff8ef999cb436c71333ef4ac51a81c
Author: Tomas Bortoli <tomasbortoli@gmail.com>
Date:   Tue Aug 14 19:43:42 2018 +0200

    9p: Add refcount to p9_req_t
    
    To avoid use-after-free(s), use a refcount to keep track of the
    usable references to any instantiated struct p9_req_t.
    
    This commit adds p9_req_put(), p9_req_get() and p9_req_try_get() as
    wrappers to kref_put(), kref_get() and kref_get_unless_zero().
    These are used by the client and the transports to keep track of
    valid requests' references.
    
    p9_free_req() is added back and used as callback by kref_put().
    
    Add SLAB_TYPESAFE_BY_RCU as it ensures that the memory freed by
    kmem_cache_free() will not be reused for another type until the rcu
    synchronisation period is over, so an address gotten under rcu read
    lock is safe to inc_ref() without corrupting random memory while
    the lock is held.
    
    Link: http://lkml.kernel.org/r/1535626341-20693-1-git-send-email-asmadeus@codewreck.org
    Co-developed-by: Dominique Martinet <dominique.martinet@cea.fr>
    Signed-off-by: Tomas Bortoli <tomasbortoli@gmail.com>
    Reported-by: syzbot+467050c1ce275af2a5b8@syzkaller.appspotmail.com
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>

commit d5274b3cd6a814ccb2f56d81ee87cbbf51bd4cf7
Author: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
Date:   Thu Sep 6 11:05:44 2018 +0300

    block: bfq: swap puts in bfqg_and_blkg_put
    
    Fix trivial use-after-free. This could be last reference to bfqg.
    
    Fixes: 8f9bebc33dd7 ("block, bfq: access and cache blkg data only when safe")
    Acked-by: Paolo Valente <paolo.valente@linaro.org>
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit transaction at the end
      btrfs: fix qgroup_free wrong num_bytes in btrfs_subvolume_reserve_metadata
      Btrfs: fix data corruption when deduplicating between different files
      Btrfs: sync log after logging new name
      Btrfs: fix unexpected failure of nocow buffered writes after snapshotting when low on space

commit 8aaff15168cfbc7c8980fdb0e8a585f1afe56ec0
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Fri Aug 24 15:32:43 2018 +0200

    ceph: avoid a use-after-free in ceph_destroy_options()
    
    syzbot reported a use-after-free in ceph_destroy_options(), called from
    ceph_mount().  The problem was that create_fs_client() consumed the opt
    pointer on some errors, but not on all of them.  Make sure it always
    consumes both libceph and ceph options.
    
    Reported-by: syzbot+8ab6f1042021b4eed062@syzkaller.appspotmail.com
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>

commit 76d5581c870454be5f1f1a106c57985902e7ea20
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Sun Aug 5 09:19:33 2018 +0300

    net/mlx5: Fix use-after-free in self-healing flow
    
    When the mlx5 health mechanism detects a problem while the driver
    is in the middle of init_one or remove_one, the driver needs to prevent
    the health mechanism from scheduling future work; if future work
    is scheduled, there is a problem with use-after-free: the system WQ
    tries to run the work item (which has been freed) at the scheduled
    future time.
    
    Prevent this by disabling work item scheduling in the health mechanism
    when the driver is in the middle of init_one() or remove_one().
    
    Fixes: e126ba97dba9 ("mlx5: Add driver for Mellanox Connect-IB adapters")
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Reviewed-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit f9a5b4f58b280c1d26255376713c132f93837621
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon Sep 3 15:44:16 2018 +0300

    usb: Avoid use-after-free by flushing endpoints early in usb_set_interface()
    
    The steps taken by usb core to set a new interface is very different from
    what is done on the xHC host side.
    
    xHC hardware will do everything in one go. One command is used to set up
    new endpoints, free old endpoints, check bandwidth, and run the new
    endpoints.
    
    All this is done by xHC when usb core asks the hcd to check for
    available bandwidth. At this point usb core has not yet flushed the old
    endpoints, which will cause use-after-free issues in xhci driver as
    queued URBs are cancelled on a re-allocated endpoint.
    
    To resolve this add a call to usb_disable_interface() which will flush
    the endpoints before calling usb_hcd_alloc_bandwidth()
    
    Additional checks in xhci driver will also be implemented to gracefully
    handle stale URB cancel on freed and re-allocated endpoints
    
    Cc: <stable@vger.kernel.org>
    Reported-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4937213ba7fafa13f30496b3965ffe93970d8b53
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Aug 31 17:24:43 2018 +0300

    xhci: Fix use after free for URB cancellation on a reallocated endpoint
    
    Make sure the cancelled URB is on the current endpoint ring.
    
    If the endpoint ring has been reallocated since the URB was enqueued
    then the URB may contain TD and TRB pointers to a already freed ring.
    In this the case return the URB without touching any of the freed ring
    structure data.
    
    Don't try to stop the ring. It would be useless.
    
    This can occur if endpoint is not flushed before it is dropped and
    re-added, which is the case in usb_set_interface() as xhci does
    things in an odd order.
    
    Cc: <stable@vger.kernel.org>
    Tested-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c483a5cc9d09f4ceaa9abb106f863cc89cb643d9
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:48 2018 +0200

    mmc: meson-mx-sdio: fix OF child-node lookup
    
    Use the new of_get_compatible_child() helper to lookup the slot child
    node instead of using of_find_compatible_node(), which searches the
    entire tree from a given start node and thus can return an unrelated
    (i.e. non-child) node.
    
    This also addresses a potential use-after-free (e.g. after probe
    deferral) as the tree-wide helper drops a reference to its first
    argument (i.e. the node of the device being probed).
    
    While at it, also fix up the related slot-node reference leak.
    
    Fixes: ed80a13bb4c4 ("mmc: meson-mx-sdio: Add a driver for the Amlogic Meson8 and Meson8b SoCs")
    Cc: stable <stable@vger.kernel.org>     # 4.15
    Cc: Carlo Caione <carlo@endlessm.com>
    Cc: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commits)
      net: phy: sfp: Handle unimplemented hwmon limits and alarms
      net: sched: action_ife: take reference to meta module
      act_ife: fix a potential use-after-free
      net/mlx5: Fix SQ offset in QPs with small RQ
      tipc: correct spelling errors for tipc_topsrv_queue_evt() comments
      tipc: correct spelling errors for struct tipc_bc_base's comment
      bnxt_en: Do not adjust max_cp_rings by the ones used by RDMA.
      bnxt_en: Clean up unused functions.
      bnxt_en: Fix firmware signaled resource change logic in open.
      sctp: not traverse asoc trans list if non-ipv6 trans exists for ipv6_flowlabel
      sctp: fix invalid reference to the index variable of the iterator
      net/ibm/emac: wrong emac_calc_base call was used by typo
      net: sched: null actions array pointer before releasing action
      vhost: fix VHOST_GET_BACKEND_FEATURES ioctl request definition
      r8169: add support for NCube 8168 network card
      ip6_tunnel: respect ttl inherit for ip6tnl
      mac80211: shorten the IBSS debug messages
      mac80211: don't Tx a deauth frame if the AP forbade Tx
      mac80211: Fix station bandwidth setting after channel switch
      mac80211: fix a race between restart and CSA flows
      ...

commit 6d784f1625ea68783cc1fb17de8f6cd3e1660c3f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Sep 3 11:08:15 2018 -0700

    act_ife: fix a potential use-after-free
    
    Immediately after module_put(), user could delete this
    module, so e->ops could be already freed before we call
    e->ops->release().
    
    Fix this by moving module_put() after ops->release().
    
    Fixes: ef6980b6becb ("introduce IFE action")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5ddd6582cd7ba018b7527eed1777b7d83e6d9b62
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Sep 3 10:31:55 2018 +0100

    drm: Remove "protection" around drm_vma_offset_manager_destroy()
    
    Using a spinlock to serialize the destroy function, within the destroy
    function itself does not prevent the buggy driver from shooting
    themselves in the foot - either way they still have a use-after-free
    issue.
    
    Reported-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Liviu Dudau <Liviu.Dudau@arm.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180903093155.3825-1-chris@chris-wilson.co.uk

commit c10bbfae3ae43fae1d77e16f05a73474acf514ff
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Mon Sep 3 10:04:55 2018 +0300

    net: sched: null actions array pointer before releasing action
    
    Currently, tcf_action_delete() nulls actions array pointer after putting
    and deleting it. However, if tcf_idr_delete_index() returns an error,
    pointer to action is not set to null. That results it being released second
    time in error handling code of tca_action_gd().
    
    Kasan error:
    
    [  807.367755] ==================================================================
    [  807.375844] BUG: KASAN: use-after-free in tc_setup_cb_call+0x14e/0x250
    [  807.382763] Read of size 8 at addr ffff88033e636000 by task tc/2732
    
    [  807.391289] CPU: 0 PID: 2732 Comm: tc Tainted: G        W         4.19.0-rc1+ #799
    [  807.399542] Hardware name: Supermicro SYS-2028TP-DECR/X10DRT-P, BIOS 2.0b 03/30/2017
    [  807.407948] Call Trace:
    [  807.410763]  dump_stack+0x92/0xeb
    [  807.414456]  print_address_description+0x70/0x360
    [  807.419549]  kasan_report+0x14d/0x300
    [  807.423582]  ? tc_setup_cb_call+0x14e/0x250
    [  807.428150]  tc_setup_cb_call+0x14e/0x250
    [  807.432539]  ? nla_put+0x65/0xe0
    [  807.436146]  fl_dump+0x394/0x3f0 [cls_flower]
    [  807.440890]  ? fl_tmplt_dump+0x140/0x140 [cls_flower]
    [  807.446327]  ? lock_downgrade+0x320/0x320
    [  807.450702]  ? lock_acquire+0xe2/0x220
    [  807.454819]  ? is_bpf_text_address+0x5/0x140
    [  807.459475]  ? memcpy+0x34/0x50
    [  807.462980]  ? nla_put+0x65/0xe0
    [  807.466582]  tcf_fill_node+0x341/0x430
    [  807.470717]  ? tcf_block_put+0xe0/0xe0
    [  807.474859]  tcf_node_dump+0xdb/0xf0
    [  807.478821]  fl_walk+0x8e/0x170 [cls_flower]
    [  807.483474]  tcf_chain_dump+0x35a/0x4d0
    [  807.487703]  ? tfilter_notify+0x170/0x170
    [  807.492091]  ? tcf_fill_node+0x430/0x430
    [  807.496411]  tc_dump_tfilter+0x362/0x3f0
    [  807.500712]  ? tc_del_tfilter+0x850/0x850
    [  807.505104]  ? kasan_unpoison_shadow+0x30/0x40
    [  807.509940]  ? __mutex_unlock_slowpath+0xcf/0x410
    [  807.515031]  netlink_dump+0x263/0x4f0
    [  807.519077]  __netlink_dump_start+0x2a0/0x300
    [  807.523817]  ? tc_del_tfilter+0x850/0x850
    [  807.528198]  rtnetlink_rcv_msg+0x46a/0x6d0
    [  807.532671]  ? rtnl_fdb_del+0x3f0/0x3f0
    [  807.536878]  ? tc_del_tfilter+0x850/0x850
    [  807.541280]  netlink_rcv_skb+0x18d/0x200
    [  807.545570]  ? rtnl_fdb_del+0x3f0/0x3f0
    [  807.549773]  ? netlink_ack+0x500/0x500
    [  807.553913]  netlink_unicast+0x2d0/0x370
    [  807.558212]  ? netlink_attachskb+0x340/0x340
    [  807.562855]  ? _copy_from_iter_full+0xe9/0x3e0
    [  807.567677]  ? import_iovec+0x11e/0x1c0
    [  807.571890]  netlink_sendmsg+0x3b9/0x6a0
    [  807.576192]  ? netlink_unicast+0x370/0x370
    [  807.580684]  ? netlink_unicast+0x370/0x370
    [  807.585154]  sock_sendmsg+0x6b/0x80
    [  807.589015]  ___sys_sendmsg+0x4a1/0x520
    [  807.593230]  ? copy_msghdr_from_user+0x210/0x210
    [  807.598232]  ? do_wp_page+0x174/0x880
    [  807.602276]  ? __handle_mm_fault+0x749/0x1c10
    [  807.607021]  ? __handle_mm_fault+0x1046/0x1c10
    [  807.611849]  ? __pmd_alloc+0x320/0x320
    [  807.615973]  ? check_chain_key+0x140/0x1f0
    [  807.620450]  ? check_chain_key+0x140/0x1f0
    [  807.624929]  ? __fget_light+0xbc/0xd0
    [  807.628970]  ? __sys_sendmsg+0xd7/0x150
    [  807.633172]  __sys_sendmsg+0xd7/0x150
    [  807.637201]  ? __ia32_sys_shutdown+0x30/0x30
    [  807.641846]  ? up_read+0x53/0x90
    [  807.645442]  ? __do_page_fault+0x484/0x780
    [  807.649949]  ? do_syscall_64+0x1e/0x2c0
    [  807.654164]  do_syscall_64+0x72/0x2c0
    [  807.658198]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  807.663625] RIP: 0033:0x7f42e9870150
    [  807.667568] Code: 8b 15 3c 7d 2b 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb cd 66 0f 1f 44 00 00 83 3d b9 d5 2b 00 00 75 10 b8 2e 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 31 c3 48 83 ec 08 e8 be cd 00 00 48 89 04 24
    [  807.687328] RSP: 002b:00007ffdbf595b58 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    [  807.695564] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f42e9870150
    [  807.703083] RDX: 0000000000000000 RSI: 00007ffdbf595b80 RDI: 0000000000000003
    [  807.710605] RBP: 00007ffdbf599d90 R08: 0000000000679bc0 R09: 000000000000000f
    [  807.718127] R10: 00000000000005e7 R11: 0000000000000246 R12: 00007ffdbf599d88
    [  807.725651] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    [  807.735048] Allocated by task 2687:
    [  807.738902]  kasan_kmalloc+0xa0/0xd0
    [  807.742852]  __kmalloc+0x118/0x2d0
    [  807.746615]  tcf_idr_create+0x44/0x320
    [  807.750738]  tcf_nat_init+0x41e/0x530 [act_nat]
    [  807.755638]  tcf_action_init_1+0x4e0/0x650
    [  807.760104]  tcf_action_init+0x1ce/0x2d0
    [  807.764395]  tcf_exts_validate+0x1d8/0x200
    [  807.768861]  fl_change+0x55a/0x26b4 [cls_flower]
    [  807.773845]  tc_new_tfilter+0x748/0xa20
    [  807.778051]  rtnetlink_rcv_msg+0x56a/0x6d0
    [  807.782517]  netlink_rcv_skb+0x18d/0x200
    [  807.786804]  netlink_unicast+0x2d0/0x370
    [  807.791095]  netlink_sendmsg+0x3b9/0x6a0
    [  807.795387]  sock_sendmsg+0x6b/0x80
    [  807.799240]  ___sys_sendmsg+0x4a1/0x520
    [  807.803445]  __sys_sendmsg+0xd7/0x150
    [  807.807473]  do_syscall_64+0x72/0x2c0
    [  807.811506]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  807.818776] Freed by task 2728:
    [  807.822283]  __kasan_slab_free+0x122/0x180
    [  807.826752]  kfree+0xf4/0x2f0
    [  807.830080]  __tcf_action_put+0x5a/0xb0
    [  807.834281]  tcf_action_put_many+0x46/0x70
    [  807.838747]  tca_action_gd+0x232/0xc40
    [  807.842862]  tc_ctl_action+0x215/0x230
    [  807.846977]  rtnetlink_rcv_msg+0x56a/0x6d0
    [  807.851444]  netlink_rcv_skb+0x18d/0x200
    [  807.855731]  netlink_unicast+0x2d0/0x370
    [  807.860021]  netlink_sendmsg+0x3b9/0x6a0
    [  807.864312]  sock_sendmsg+0x6b/0x80
    [  807.868166]  ___sys_sendmsg+0x4a1/0x520
    [  807.872372]  __sys_sendmsg+0xd7/0x150
    [  807.876401]  do_syscall_64+0x72/0x2c0
    [  807.880431]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    [  807.887704] The buggy address belongs to the object at ffff88033e636000
                    which belongs to the cache kmalloc-256 of size 256
    [  807.900909] The buggy address is located 0 bytes inside of
                    256-byte region [ffff88033e636000, ffff88033e636100)
    [  807.913155] The buggy address belongs to the page:
    [  807.918322] page:ffffea000cf98d80 count:1 mapcount:0 mapping:ffff88036f80ee00 index:0x0 compound_mapcount: 0
    [  807.928831] flags: 0x5fff8000008100(slab|head)
    [  807.933647] raw: 005fff8000008100 ffffea000db44f00 0000000400000004 ffff88036f80ee00
    [  807.942050] raw: 0000000000000000 0000000080190019 00000001ffffffff 0000000000000000
    [  807.950456] page dumped because: kasan: bad access detected
    
    [  807.958240] Memory state around the buggy address:
    [  807.963405]  ffff88033e635f00: fc fc fc fc fb fb fb fb fb fb fb fc fc fc fc fb
    [  807.971288]  ffff88033e635f80: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
    [  807.979166] >ffff88033e636000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  807.994882]                    ^
    [  807.998477]  ffff88033e636080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  808.006352]  ffff88033e636100: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    [  808.014230] ==================================================================
    [  808.022108] Disabling lock debugging due to kernel taint
    
    Fixes: edfaf94fa705 ("net_sched: improve and refactor tcf_action_put_many()")
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7915919bb94e12460c58e27c708472e6f85f6699
Author: Vincent Pelletier <plr.vincent@gmail.com>
Date:   Mon Aug 27 14:45:15 2018 -0500

    scsi: iscsi: target: Set conn->sess to NULL when iscsi_login_set_conn_values fails
    
    Fixes a use-after-free reported by KASAN when later
    iscsi_target_login_sess_out gets called and it tries to access
    conn->sess->se_sess:
    
    Disabling lock debugging due to kernel taint
    iSCSI Login timeout on Network Portal [::]:3260
    iSCSI Login negotiation failed.
    ==================================================================
    BUG: KASAN: use-after-free in
    iscsi_target_login_sess_out.cold.12+0x58/0xff [iscsi_target_mod]
    Read of size 8 at addr ffff880109d070c8 by task iscsi_np/980
    
    CPU: 1 PID: 980 Comm: iscsi_np Tainted: G           O
    4.17.8kasan.sess.connops+ #4
    Hardware name: To be filled by O.E.M. To be filled by O.E.M./Aptio CRB,
    BIOS 5.6.5 05/19/2014
    Call Trace:
     dump_stack+0x71/0xac
     print_address_description+0x65/0x22e
     ? iscsi_target_login_sess_out.cold.12+0x58/0xff [iscsi_target_mod]
     kasan_report.cold.6+0x241/0x2fd
     iscsi_target_login_sess_out.cold.12+0x58/0xff [iscsi_target_mod]
     iscsi_target_login_thread+0x1086/0x1710 [iscsi_target_mod]
     ? __sched_text_start+0x8/0x8
     ? iscsi_target_login_sess_out+0x250/0x250 [iscsi_target_mod]
     ? __kthread_parkme+0xcc/0x100
     ? parse_args.cold.14+0xd3/0xd3
     ? iscsi_target_login_sess_out+0x250/0x250 [iscsi_target_mod]
     kthread+0x1a0/0x1c0
     ? kthread_bind+0x30/0x30
     ret_from_fork+0x35/0x40
    
    Allocated by task 980:
     kasan_kmalloc+0xbf/0xe0
     kmem_cache_alloc_trace+0x112/0x210
     iscsi_target_login_thread+0x816/0x1710 [iscsi_target_mod]
     kthread+0x1a0/0x1c0
     ret_from_fork+0x35/0x40
    
    Freed by task 980:
     __kasan_slab_free+0x125/0x170
     kfree+0x90/0x1d0
     iscsi_target_login_thread+0x1577/0x1710 [iscsi_target_mod]
     kthread+0x1a0/0x1c0
     ret_from_fork+0x35/0x40
    
    The buggy address belongs to the object at ffff880109d06f00
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 456 bytes inside of
     512-byte region [ffff880109d06f00, ffff880109d07100)
    The buggy address belongs to the page:
    page:ffffea0004274180 count:1 mapcount:0 mapping:0000000000000000
    index:0x0 compound_mapcount: 0
    flags: 0x17fffc000008100(slab|head)
    raw: 017fffc000008100 0000000000000000 0000000000000000 00000001000c000c
    raw: dead000000000100 dead000000000200 ffff88011b002e00 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff880109d06f80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880109d07000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff880109d07080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                  ^
     ffff880109d07100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff880109d07180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    ==================================================================
    
    Signed-off-by: Vincent Pelletier <plr.vincent@gmail.com>
    [rebased against idr/ida changes and to handle ret review comments from Matthew]
    Signed-off-by: Mike Christie <mchristi@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Reviewed-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 9a07efa9aea2f4a59f35da0785a4e6a6b5a96192
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Aug 24 12:28:06 2018 -0700

    tipc: switch to rhashtable iterator
    
    syzbot reported a use-after-free in tipc_group_fill_sock_diag(),
    where tipc_group_fill_sock_diag() still reads tsk->group meanwhile
    tipc_group_delete() just deletes it in tipc_release().
    
    tipc_nl_sk_walk() aims to lock this sock when walking each sock
    in the hash table to close race conditions with sock changes like
    this one, by acquiring tsk->sk.sk_lock.slock spinlock, unfortunately
    this doesn't work at all. All non-BH call path should take
    lock_sock() instead to make it work.
    
    tipc_nl_sk_walk() brutally iterates with raw rht_for_each_entry_rcu()
    where RCU read lock is required, this is the reason why lock_sock()
    can't be taken on this path. This could be resolved by switching to
    rhashtable iterator API's, where taking a sleepable lock is possible.
    Also, the iterator API's are friendly for restartable calls like
    diag dump, the last position is remembered behind the scence,
    all we need to do here is saving the iterator into cb->args[].
    
    I tested this with parallel tipc diag dump and thousands of tipc
    socket creation and release, no crash or memory leak.
    
    Reported-by: syzbot+b9c8f3ab2994b7cd1625@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36156f9241cb0f9e37d998052873ca7501ad4b36
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Aug 27 10:21:45 2018 +0200

    of: add helper to lookup compatible child node
    
    Add of_get_compatible_child() helper that can be used to lookup
    compatible child nodes.
    
    Several drivers currently use of_find_compatible_node() to lookup child
    nodes while failing to notice that the of_find_ functions search the
    entire tree depth-first (from a given start node) and therefore can
    match unrelated nodes. The fact that these functions also drop a
    reference to the node they start searching from (e.g. the parent node)
    is typically also overlooked, something which can lead to use-after-free
    bugs.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 62e3941776fea8678bb8120607039410b1b61a65
Author: Dominique Martinet <dominique.martinet@cea.fr>
Date:   Tue Aug 28 07:32:35 2018 +0900

    9p: clear dangling pointers in p9stat_free
    
    p9stat_free is more of a cleanup function than a 'free' function as it
    only frees the content of the struct; there are chances of use-after-free
    if it is improperly used (e.g. p9stat_free called twice as it used to be
    possible to)
    
    Clearing dangling pointers makes the function idempotent and safer to use.
    
    Link: http://lkml.kernel.org/r/1535410108-20650-2-git-send-email-asmadeus@codewreck.org
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Reported-by: syzbot+d4252148d198410b864f@syzkaller.appspotmail.com

commit e06fa9c16ce4b740996189fa5610eabcee734e6c
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Aug 24 22:08:50 2018 +0200

    bpf, sockmap: fix potential use after free in bpf_tcp_close
    
    bpf_tcp_close() we pop the psock linkage to a map via psock_map_pop().
    A parallel update on the sock hash map can happen between psock_map_pop()
    and lookup_elem_raw() where we override the element under link->hash /
    link->key. In bpf_tcp_close()'s lookup_elem_raw() we subsequently only
    test whether an element is present, but we do not test whether the
    element is infact the element we were looking for.
    
    We lock the sock in bpf_tcp_close() during that time, so do we hold
    the lock in sock_hash_update_elem(). However, the latter locks the
    sock which is newly updated, not the one we're purging from the hash
    table. This means that while one CPU is doing the lookup from bpf_tcp_close(),
    another CPU is doing the map update in parallel, dropped our sock from
    the hlist and released the psock.
    
    Subsequently the first CPU will find the new sock and attempts to drop
    and release the old sock yet another time. Fix is that we need to check
    the elements for a match after lookup, similar as we do in the sock map.
    Note that the hash tab elems are freed via RCU, so access to their
    link->hash / link->key is fine since we're under RCU read side there.
    
    Fixes: e9db4ef6bf4c ("bpf: sockhash fix omitted bucket lock in sock_close")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commit db193954ed9e35701b6e489fa4cc97b08589341b
Author: John Pittman <jpittman@redhat.com>
Date:   Mon Aug 27 14:33:05 2018 -0400

    block: bsg: move atomic_t ref_count variable to refcount API
    
    Currently, variable ref_count within the bsg_device struct is of
    type atomic_t.  For variables being used as reference counters,
    the refcount API should be used instead of atomic.  The newer
    refcount API works to prevent counter overflows and use-after-free
    bugs.  So, move this varable from the atomic API to refcount,
    potentially avoiding the issues mentioned.
    
    Signed-off-by: John Pittman <jpittman@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit bab1be79a5169ac748d8292b20c86d874022d7ba
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Aug 27 18:38:31 2018 +0800

    sctp: hold transport before accessing its asoc in sctp_transport_get_next
    
    As Marcelo noticed, in sctp_transport_get_next, it is iterating over
    transports but then also accessing the association directly, without
    checking any refcnts before that, which can cause an use-after-free
    Read.
    
    So fix it by holding transport before accessing the association. With
    that, sctp_transport_hold calls can be removed in the later places.
    
    Fixes: 626d16f50f39 ("sctp: export some apis or variables for sctp_diag and reuse some for proc")
    Reported-by: syzbot+fe62a0c9aa6a85c6de16@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b50282f3241acee880514212d88b6049fb5039c8
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Mon Aug 27 01:47:09 2018 -0400

    ext4: check to make sure the rename(2)'s destination is not freed
    
    If the destination of the rename(2) system call exists, the inode's
    link count (i_nlinks) must be non-zero.  If it is, the inode can end
    up on the orphan list prematurely, leading to all sorts of hilarity,
    including a use-after-free.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=200931
    
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reported-by: Wen Xu <wen.xu@gatech.edu>
    Cc: stable@vger.kernel.org

commit b9b8a41adeff5666b402996020b698504c927353
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Aug 20 11:25:33 2018 +0300

    btrfs: use after free in btrfs_quota_enable
    
    The issue here is that btrfs_commit_transaction() frees "trans" on both
    the error and the success path.  So the problem would be if
    btrfs_commit_transaction() succeeds, and then qgroup_rescan_init()
    fails.  That means that "ret" is non-zero and "trans" is non-NULL and it
    leads to a use after free inside the btrfs_end_transaction() macro.
    
    Fixes: 340f1aa27f36 ("btrfs: qgroups: Move transaction management inside btrfs_quota_enable/disable")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 801660b040d132f67fac6a95910ad307c5929b49
Author: Anand Jain <anand.jain@oracle.com>
Date:   Mon Aug 6 18:12:37 2018 +0800

    btrfs: btrfs_shrink_device should call commit transaction at the end
    
    Test case btrfs/164 reports use-after-free:
    
    [ 6712.084324] general protection fault: 0000 [#1] PREEMPT SMP
    ..
    [ 6712.195423]  btrfs_update_commit_device_size+0x75/0xf0 [btrfs]
    [ 6712.201424]  btrfs_commit_transaction+0x57d/0xa90 [btrfs]
    [ 6712.206999]  btrfs_rm_device+0x627/0x850 [btrfs]
    [ 6712.211800]  btrfs_ioctl+0x2b03/0x3120 [btrfs]
    
    Reason for this is that btrfs_shrink_device adds the resized device to
    the fs_devices::resized_devices after it has called the last commit
    transaction.
    
    So the list fs_devices::resized_devices is not empty when
    btrfs_shrink_device returns.  Now the parent function
    btrfs_rm_device calls:
    
            btrfs_close_bdev(device);
            call_rcu(&device->rcu, free_device_rcu);
    
    and then does the transactio ncommit. It goes through the
    fs_devices::resized_devices in btrfs_update_commit_device_size and
    leads to use-after-free.
    
    Fix this by making sure btrfs_shrink_device calls the last needed
    btrfs_commit_transaction before the return. This is consistent with what
    the grow counterpart does and this makes sure the on-disk state is
    persistent when the function returns.
    
    Reported-by: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
    Tested-by: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ update changelog ]
    Signed-off-by: David Sterba <dsterba@suse.com>

commits)
      f2fs: readahead encrypted block during GC
      f2fs: avoid fi->i_gc_rwsem[WRITE] lock in f2fs_gc
      f2fs: fix performance issue observed with multi-thread sequential read
      f2fs: fix to skip verifying block address for non-regular inode
      f2fs: rework fault injection handling to avoid a warning
      f2fs: support fault_type mount option
      f2fs: fix to return success when trimming meta area
      f2fs: fix use-after-free of dicard command entry
      f2fs: support discard submission error injection
      f2fs: split discard command in prior to block layer
      f2fs: wake up gc thread immediately when gc_urgent is set
      f2fs: fix incorrect range->len in f2fs_trim_fs()
      f2fs: refresh recent accessed nat entry in lru list
      f2fs: fix avoid race between truncate and background GC
      f2fs: avoid race between zero_range and background GC
      f2fs: fix to do sanity check with block address in main area v2
      f2fs: fix to do sanity check with inline flags
      f2fs: fix to reset i_gc_failures correctly
      f2fs: fix invalid memory access
      f2fs: fix to avoid broken of dnode block list
      ...

commit fc37191272a972d449bab3d8247cf52cadf5d4e6
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Aug 21 21:55:38 2018 -0700

    userns: use refcount_t for reference counting instead atomic_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    wh en the variable is used as a reference counter.  This avoids accidental
    refcounter overflows that might lead to use-after-free situations.
    
    Link: http://lkml.kernel.org/r/20180703200141.28415-6-bigeasy@linutronix.de
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e58dd0de5eadf145895b13451a1fef8ef03946eb
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Tue Aug 21 21:55:31 2018 -0700

    bdi: use refcount_t for reference counting instead atomic_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.  This permits avoiding
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Link: http://lkml.kernel.org/r/20180703200141.28415-4-bigeasy@linutronix.de
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6a48de0144767f2c6880540c0a4ac6741e3c440b
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 2 21:44:41 2018 +0200

    netfilter: nf_tables: don't prevent event handler from device cleanup on netns exit
    
    When a netnsamespace exits, the nf_tables pernet_ops will remove all rules.
    However, there is one caveat:
    
    Base chains that register ingress hooks will cause use-after-free:
    device is already gone at that point.
    
    The device event handlers prevent this from happening:
    netns exit synthesizes unregister events for all devices.
    
    However, an improper fix for a race condition made the notifiers a no-op
    in case they get called from netns exit path, so revert that part.
    
    This is safe now as the previous patch fixed nf_tables pernet ops
    and device notifier initialisation ordering.
    
    Fixes: 0a2cf5ee432c2 ("netfilter: nf_tables: close race between netns exit and rmmod")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 77cfaf52eca5cac30ed029507e0cab065f888995
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Mon Aug 13 14:16:25 2018 +0200

    mac80211: Run TXQ teardown code before de-registering interfaces
    
    The TXQ teardown code can reference the vif data structures that are
    stored in the netdev private memory area if there are still packets on
    the queue when it is being freed. Since the TXQ teardown code is run
    after the netdevs are freed, this can lead to a use-after-free. Fix this
    by moving the TXQ teardown code to earlier in ieee80211_unregister_hw().
    
    Reported-by: Ben Greear <greearb@candelatech.com>
    Tested-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 6b9cb1242cb082044c8c3f8b9f35d9ada101dc41
Author: Chao Yu <yuchao0@huawei.com>
Date:   Wed Aug 8 10:14:55 2018 +0800

    f2fs: fix use-after-free of dicard command entry
    
    As Dan Carpenter reported:
    
    The patch 20ee4382322c: "f2fs: issue small discard by LBA order" from
    Jul 8, 2018, leads to the following Smatch warning:
    
            fs/f2fs/segment.c:1277 __issue_discard_cmd_orderly()
            warn: 'dc' was already freed.
    
    See also:
    fs/f2fs/segment.c:2550 __issue_discard_cmd_range() warn: 'dc' was already freed.
    
    In order to fix this issue, let's get error from __submit_discard_cmd(),
    and release current discard command after we referenced next one.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit 6d37fa49da1e8db8fb1995be22ac837ca41ac8a8
Author: Wei Wang <weiwan@google.com>
Date:   Fri Aug 10 11:14:56 2018 -0700

    l2tp: use sk_dst_check() to avoid race on sk->sk_dst_cache
    
    In l2tp code, if it is a L2TP_UDP_ENCAP tunnel, tunnel->sk points to a
    UDP socket. User could call sendmsg() on both this tunnel and the UDP
    socket itself concurrently. As l2tp_xmit_skb() holds socket lock and call
    __sk_dst_check() to refresh sk->sk_dst_cache, while udpv6_sendmsg() is
    lockless and call sk_dst_check() to refresh sk->sk_dst_cache, there
    could be a race and cause the dst cache to be freed multiple times.
    So we fix l2tp side code to always call sk_dst_check() to garantee
    xchg() is called when refreshing sk->sk_dst_cache to avoid race
    conditions.
    
    Syzkaller reported stack trace:
    BUG: KASAN: use-after-free in atomic_read include/asm-generic/atomic-instrumented.h:21 [inline]
    BUG: KASAN: use-after-free in atomic_fetch_add_unless include/linux/atomic.h:575 [inline]
    BUG: KASAN: use-after-free in atomic_add_unless include/linux/atomic.h:597 [inline]
    BUG: KASAN: use-after-free in dst_hold_safe include/net/dst.h:308 [inline]
    BUG: KASAN: use-after-free in ip6_hold_safe+0xe6/0x670 net/ipv6/route.c:1029
    Read of size 4 at addr ffff8801aea9a880 by task syz-executor129/4829
    
    CPU: 0 PID: 4829 Comm: syz-executor129 Not tainted 4.18.0-rc7-next-20180802+ #30
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x30d mm/kasan/report.c:412
     check_memory_region_inline mm/kasan/kasan.c:260 [inline]
     check_memory_region+0x13e/0x1b0 mm/kasan/kasan.c:267
     kasan_check_read+0x11/0x20 mm/kasan/kasan.c:272
     atomic_read include/asm-generic/atomic-instrumented.h:21 [inline]
     atomic_fetch_add_unless include/linux/atomic.h:575 [inline]
     atomic_add_unless include/linux/atomic.h:597 [inline]
     dst_hold_safe include/net/dst.h:308 [inline]
     ip6_hold_safe+0xe6/0x670 net/ipv6/route.c:1029
     rt6_get_pcpu_route net/ipv6/route.c:1249 [inline]
     ip6_pol_route+0x354/0xd20 net/ipv6/route.c:1922
     ip6_pol_route_output+0x54/0x70 net/ipv6/route.c:2098
     fib6_rule_lookup+0x283/0x890 net/ipv6/fib6_rules.c:122
     ip6_route_output_flags+0x2c5/0x350 net/ipv6/route.c:2126
     ip6_dst_lookup_tail+0x1278/0x1da0 net/ipv6/ip6_output.c:978
     ip6_dst_lookup_flow+0xc8/0x270 net/ipv6/ip6_output.c:1079
     ip6_sk_dst_lookup_flow+0x5ed/0xc50 net/ipv6/ip6_output.c:1117
     udpv6_sendmsg+0x2163/0x36b0 net/ipv6/udp.c:1354
     inet_sendmsg+0x1a1/0x690 net/ipv4/af_inet.c:798
     sock_sendmsg_nosec net/socket.c:622 [inline]
     sock_sendmsg+0xd5/0x120 net/socket.c:632
     ___sys_sendmsg+0x51d/0x930 net/socket.c:2115
     __sys_sendmmsg+0x240/0x6f0 net/socket.c:2210
     __do_sys_sendmmsg net/socket.c:2239 [inline]
     __se_sys_sendmmsg net/socket.c:2236 [inline]
     __x64_sys_sendmmsg+0x9d/0x100 net/socket.c:2236
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x446a29
    Code: e8 ac b8 02 00 48 83 c4 18 c3 0f 1f 80 00 00 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 eb 08 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f4de5532db8 EFLAGS: 00000246 ORIG_RAX: 0000000000000133
    RAX: ffffffffffffffda RBX: 00000000006dcc38 RCX: 0000000000446a29
    RDX: 00000000000000b8 RSI: 0000000020001b00 RDI: 0000000000000003
    RBP: 00000000006dcc30 R08: 00007f4de5533700 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000006dcc3c
    R13: 00007ffe2b830fdf R14: 00007f4de55339c0 R15: 0000000000000001
    
    Fixes: 71b1391a4128 ("l2tp: ensure sk->dst is still valid")
    Reported-by: syzbot+05f840f3b04f211bad55@syzkaller.appspotmail.com
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Cc: Guillaume Nault <g.nault@alphalink.fr>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b13f9c6364373a1b9f71e9846dc4fb199296f926
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Aug 8 11:43:04 2018 +0800

    vhost: reset metadata cache when initializing new IOTLB
    
    We need to reset metadata cache during new IOTLB initialization,
    otherwise the stale pointers to previous IOTLB may be still accessed
    which will lead a use after free.
    
    Reported-by: syzbot+c51e6736a1bf614b3272@syzkaller.appspotmail.com
    Fixes: f88949138058 ("vhost: introduce O(1) vq metadata cache")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 39379faaad79e3cf403a6904a08676b7850043ae
Author: Naohiro Aota <naota@elisp.net>
Date:   Fri Jul 27 09:04:55 2018 +0900

    btrfs: revert fs_devices state on error of btrfs_init_new_device
    
    When btrfs hits error after modifying fs_devices in
    btrfs_init_new_device() (such as btrfs_add_dev_item() returns error), it
    leaves everything as is, but frees allocated btrfs_device. As a result,
    fs_devices->devices and fs_devices->alloc_list contain already freed
    btrfs_device, leading to later use-after-free bug.
    
    Error path also messes the things like ->num_devices. While they go back
    to the original value by unscanning btrfs devices, it is safe to revert
    them here.
    
    Fixes: 79787eaab461 ("btrfs: replace many BUG_ONs with proper error handling")
    Signed-off-by: Naohiro Aota <naota@elisp.net>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 25405d98a2aa0b9983bb9c36b0b00815d39394f4
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Sun Jul 29 11:34:58 2018 +0300

    IB/ipoib: Do not remove child devices from within the ndo_uninit
    
    Switching to priv_destructor and needs_free_netdev created a subtle
    ordering problem in ipoib_remove_one.
    
    Now that unregister_netdev frees the netdev and priv we must ensure that
    the children are unregistered before trying to unregister the parent,
    or child unregister will use after free.
    
    The solution is to unregister the children, then parent, in the same batch
    all while holding the rtnl_lock. This closes all the races where a new
    child could have been added and ensures proper ordering.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

commit 2d7d4fd35e6e15b47c13c70368da83add19f01e7
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Tue Jul 31 15:46:01 2018 +0200

    scsi: fcoe: fix use-after-free in fcoe_ctlr_els_send
    
    KASAN reports a use-after-free in fcoe_ctlr_els_send() when we're sending a
    LOGO and have FIP debugging enabled. This is because we're first freeing
    the skb and then printing the frame's DID. But the DID is a member of the
    FC frame header which in turn is the skb's payload.
    
    Exchange the debug print and kfree_skb() calls so we're not touching the
    freed data.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit e6aed040eafb4ce1881bbc59a225f6b27d250396
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Aug 1 21:32:30 2018 -0700

    Revert "net/ipv6: fix metrics leak"
    
    This reverts commit df18b50448fab1dff093731dfd0e25e77e1afcd1.
    
    This change causes other problems and use-after-free situations as
    found by syzbot.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 54648cf1ec2d7f4b6a71767799c45676a138ca24
Author: xiao jin <jin.xiao@intel.com>
Date:   Mon Jul 30 14:11:12 2018 +0800

    block: blk_init_allocated_queue() set q->fq as NULL in the fail case
    
    We find the memory use-after-free issue in __blk_drain_queue()
    on the kernel 4.14. After read the latest kernel 4.18-rc6 we
    think it has the same problem.
    
    Memory is allocated for q->fq in the blk_init_allocated_queue().
    If the elevator init function called with error return, it will
    run into the fail case to free the q->fq.
    
    Then the __blk_drain_queue() uses the same memory after the free
    of the q->fq, it will lead to the unpredictable event.
    
    The patch is to set q->fq as NULL in the fail case of
    blk_init_allocated_queue().
    
    Fixes: commit 7c94e1c157a2 ("block: introduce blk_flush_queue to drive flush machinery")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
    Signed-off-by: xiao jin <jin.xiao@intel.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 4dbe38dc386910c668c75ae616b99b823b59f3eb
Author: Chao Yu <yuchao0@huawei.com>
Date:   Sat Jun 30 18:13:40 2018 +0800

    f2fs: fix to do sanity check with reserved blkaddr of inline inode
    
    As Wen Xu reported in bugzilla, after image was injected with random data
    by fuzzing, inline inode would contain invalid reserved blkaddr, then
    during inline conversion, we will encounter illegal memory accessing
    reported by KASAN, the root cause of this is when writing out converted
    inline page, we will use invalid reserved blkaddr to update sit bitmap,
    result in accessing memory beyond sit bitmap boundary.
    
    In order to fix this issue, let's do sanity check with reserved block
    address of inline inode to avoid above condition.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=200179
    
    [ 1428.846352] BUG: KASAN: use-after-free in update_sit_entry+0x80/0x7f0
    [ 1428.846618] Read of size 4 at addr ffff880194483540 by task a.out/2741
    
    [ 1428.846855] CPU: 0 PID: 2741 Comm: a.out Tainted: G        W         4.17.0+ #1
    [ 1428.846858] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [ 1428.846860] Call Trace:
    [ 1428.846868]  dump_stack+0x71/0xab
    [ 1428.846875]  print_address_description+0x6b/0x290
    [ 1428.846881]  kasan_report+0x28e/0x390
    [ 1428.846888]  ? update_sit_entry+0x80/0x7f0
    [ 1428.846898]  update_sit_entry+0x80/0x7f0
    [ 1428.846906]  f2fs_allocate_data_block+0x6db/0xc70
    [ 1428.846914]  ? f2fs_get_node_info+0x14f/0x590
    [ 1428.846920]  do_write_page+0xc8/0x150
    [ 1428.846928]  f2fs_outplace_write_data+0xfe/0x210
    [ 1428.846935]  ? f2fs_do_write_node_page+0x170/0x170
    [ 1428.846941]  ? radix_tree_tag_clear+0xff/0x130
    [ 1428.846946]  ? __mod_node_page_state+0x22/0xa0
    [ 1428.846951]  ? inc_zone_page_state+0x54/0x100
    [ 1428.846956]  ? __test_set_page_writeback+0x336/0x5d0
    [ 1428.846964]  f2fs_convert_inline_page+0x407/0x6d0
    [ 1428.846971]  ? f2fs_read_inline_data+0x3b0/0x3b0
    [ 1428.846978]  ? __get_node_page+0x335/0x6b0
    [ 1428.846987]  f2fs_convert_inline_inode+0x41b/0x500
    [ 1428.846994]  ? f2fs_convert_inline_page+0x6d0/0x6d0
    [ 1428.847000]  ? kasan_unpoison_shadow+0x31/0x40
    [ 1428.847005]  ? kasan_kmalloc+0xa6/0xd0
    [ 1428.847024]  f2fs_file_mmap+0x79/0xc0
    [ 1428.847029]  mmap_region+0x58b/0x880
    [ 1428.847037]  ? arch_get_unmapped_area+0x370/0x370
    [ 1428.847042]  do_mmap+0x55b/0x7a0
    [ 1428.847048]  vm_mmap_pgoff+0x16f/0x1c0
    [ 1428.847055]  ? vma_is_stack_for_current+0x50/0x50
    [ 1428.847062]  ? __fsnotify_update_child_dentry_flags.part.1+0x160/0x160
    [ 1428.847068]  ? do_sys_open+0x206/0x2a0
    [ 1428.847073]  ? __fget+0xb4/0x100
    [ 1428.847079]  ksys_mmap_pgoff+0x278/0x360
    [ 1428.847085]  ? find_mergeable_anon_vma+0x50/0x50
    [ 1428.847091]  do_syscall_64+0x73/0x160
    [ 1428.847098]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [ 1428.847102] RIP: 0033:0x7fb1430766ba
    [ 1428.847103] Code: 89 f5 41 54 49 89 fc 55 53 74 35 49 63 e8 48 63 da 4d 89 f9 49 89 e8 4d 63 d6 48 89 da 4c 89 ee 4c 89 e7 b8 09 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 56 5b 5d 41 5c 41 5d 41 5e 41 5f c3 0f 1f 00
    [ 1428.847162] RSP: 002b:00007ffc651d9388 EFLAGS: 00000246 ORIG_RAX: 0000000000000009
    [ 1428.847167] RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 00007fb1430766ba
    [ 1428.847170] RDX: 0000000000000001 RSI: 0000000000001000 RDI: 0000000000000000
    [ 1428.847173] RBP: 0000000000000003 R08: 0000000000000003 R09: 0000000000000000
    [ 1428.847176] R10: 0000000000008002 R11: 0000000000000246 R12: 0000000000000000
    [ 1428.847179] R13: 0000000000001000 R14: 0000000000008002 R15: 0000000000000000
    
    [ 1428.847252] Allocated by task 2683:
    [ 1428.847372]  kasan_kmalloc+0xa6/0xd0
    [ 1428.847380]  kmem_cache_alloc+0xc8/0x1e0
    [ 1428.847385]  getname_flags+0x73/0x2b0
    [ 1428.847390]  user_path_at_empty+0x1d/0x40
    [ 1428.847395]  vfs_statx+0xc1/0x150
    [ 1428.847401]  __do_sys_newlstat+0x7e/0xd0
    [ 1428.847405]  do_syscall_64+0x73/0x160
    [ 1428.847411]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [ 1428.847466] Freed by task 2683:
    [ 1428.847566]  __kasan_slab_free+0x137/0x190
    [ 1428.847571]  kmem_cache_free+0x85/0x1e0
    [ 1428.847575]  filename_lookup+0x191/0x280
    [ 1428.847580]  vfs_statx+0xc1/0x150
    [ 1428.847585]  __do_sys_newlstat+0x7e/0xd0
    [ 1428.847590]  do_syscall_64+0x73/0x160
    [ 1428.847596]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [ 1428.847648] The buggy address belongs to the object at ffff880194483300
                    which belongs to the cache names_cache of size 4096
    [ 1428.847946] The buggy address is located 576 bytes inside of
                    4096-byte region [ffff880194483300, ffff880194484300)
    [ 1428.848234] The buggy address belongs to the page:
    [ 1428.848366] page:ffffea0006512000 count:1 mapcount:0 mapping:ffff8801f3586380 index:0x0 compound_mapcount: 0
    [ 1428.848606] flags: 0x17fff8000008100(slab|head)
    [ 1428.848737] raw: 017fff8000008100 dead000000000100 dead000000000200 ffff8801f3586380
    [ 1428.848931] raw: 0000000000000000 0000000000070007 00000001ffffffff 0000000000000000
    [ 1428.849122] page dumped because: kasan: bad access detected
    
    [ 1428.849305] Memory state around the buggy address:
    [ 1428.849436]  ffff880194483400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1428.849620]  ffff880194483480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1428.849804] >ffff880194483500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1428.849985]                                            ^
    [ 1428.850120]  ffff880194483580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1428.850303]  ffff880194483600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [ 1428.850498] ==================================================================
    
    Reported-by: Wen Xu <wen.xu@gatech.edu>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit c77ec61ca0a49544ca81881cc5d5529858f7e196
Author: Chao Yu <yuchao0@huawei.com>
Date:   Sat Jun 23 11:25:19 2018 +0800

    f2fs: fix to do sanity check with {sit,nat}_ver_bitmap_bytesize
    
    This patch adds to do sanity check with {sit,nat}_ver_bitmap_bytesize
    during mount, in order to avoid accessing across cache boundary with
    this abnormal bitmap size.
    
    - Overview
    buffer overrun in build_sit_info() when mounting a crafted f2fs image
    
    - Reproduce
    
    - Kernel message
    [  548.580867] F2FS-fs (loop0): Invalid log blocks per segment (8201)
    
    [  548.580877] F2FS-fs (loop0): Can't find valid F2FS filesystem in 1th superblock
    [  548.584979] ==================================================================
    [  548.586568] BUG: KASAN: use-after-free in kmemdup+0x36/0x50
    [  548.587715] Read of size 64 at addr ffff8801e9c265ff by task mount/1295
    
    [  548.589428] CPU: 1 PID: 1295 Comm: mount Not tainted 4.18.0-rc1+ #4
    [  548.589432] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [  548.589438] Call Trace:
    [  548.589474]  dump_stack+0x7b/0xb5
    [  548.589487]  print_address_description+0x70/0x290
    [  548.589492]  kasan_report+0x291/0x390
    [  548.589496]  ? kmemdup+0x36/0x50
    [  548.589509]  check_memory_region+0x139/0x190
    [  548.589514]  memcpy+0x23/0x50
    [  548.589518]  kmemdup+0x36/0x50
    [  548.589545]  f2fs_build_segment_manager+0x8fa/0x3410
    [  548.589551]  ? __asan_loadN+0xf/0x20
    [  548.589560]  ? f2fs_sanity_check_ckpt+0x1be/0x240
    [  548.589566]  ? f2fs_flush_sit_entries+0x10c0/0x10c0
    [  548.589587]  ? __put_user_ns+0x40/0x40
    [  548.589604]  ? find_next_bit+0x57/0x90
    [  548.589610]  f2fs_fill_super+0x194b/0x2b40
    [  548.589617]  ? f2fs_commit_super+0x1b0/0x1b0
    [  548.589637]  ? set_blocksize+0x90/0x140
    [  548.589651]  mount_bdev+0x1c5/0x210
    [  548.589655]  ? f2fs_commit_super+0x1b0/0x1b0
    [  548.589667]  f2fs_mount+0x15/0x20
    [  548.589672]  mount_fs+0x60/0x1a0
    [  548.589683]  ? alloc_vfsmnt+0x309/0x360
    [  548.589688]  vfs_kern_mount+0x6b/0x1a0
    [  548.589699]  do_mount+0x34a/0x18c0
    [  548.589710]  ? lockref_put_or_lock+0xcf/0x160
    [  548.589716]  ? copy_mount_string+0x20/0x20
    [  548.589728]  ? memcg_kmem_put_cache+0x1b/0xa0
    [  548.589734]  ? kasan_check_write+0x14/0x20
    [  548.589740]  ? _copy_from_user+0x6a/0x90
    [  548.589744]  ? memdup_user+0x42/0x60
    [  548.589750]  ksys_mount+0x83/0xd0
    [  548.589755]  __x64_sys_mount+0x67/0x80
    [  548.589781]  do_syscall_64+0x78/0x170
    [  548.589797]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  548.589820] RIP: 0033:0x7f76fc331b9a
    [  548.589821] Code: 48 8b 0d 01 c3 2b 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d ce c2 2b 00 f7 d8 64 89 01 48
    [  548.589880] RSP: 002b:00007ffd4f0a0e48 EFLAGS: 00000206 ORIG_RAX: 00000000000000a5
    [  548.589890] RAX: ffffffffffffffda RBX: 000000000146c030 RCX: 00007f76fc331b9a
    [  548.589892] RDX: 000000000146c210 RSI: 000000000146df30 RDI: 0000000001474ec0
    [  548.589895] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000013
    [  548.589897] R10: 00000000c0ed0000 R11: 0000000000000206 R12: 0000000001474ec0
    [  548.589900] R13: 000000000146c210 R14: 0000000000000000 R15: 0000000000000003
    
    [  548.590242] The buggy address belongs to the page:
    [  548.591243] page:ffffea0007a70980 count:0 mapcount:0 mapping:0000000000000000 index:0x0
    [  548.592886] flags: 0x2ffff0000000000()
    [  548.593665] raw: 02ffff0000000000 dead000000000100 dead000000000200 0000000000000000
    [  548.595258] raw: 0000000000000000 0000000000000000 00000000ffffffff 0000000000000000
    [  548.603713] page dumped because: kasan: bad access detected
    
    [  548.605203] Memory state around the buggy address:
    [  548.606198]  ffff8801e9c26480: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  548.607676]  ffff8801e9c26500: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  548.609157] >ffff8801e9c26580: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  548.610629]                                                                 ^
    [  548.612088]  ffff8801e9c26600: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  548.613674]  ffff8801e9c26680: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  548.615141] ==================================================================
    [  548.616613] Disabling lock debugging due to kernel taint
    [  548.622871] WARNING: CPU: 1 PID: 1295 at mm/page_alloc.c:4065 __alloc_pages_slowpath+0xe4a/0x1420
    [  548.622878] Modules linked in: snd_hda_codec_generic snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_pcm snd_timer snd mac_hid i2c_piix4 soundcore ib_iser rdma_cm iw_cm ib_cm ib_core iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx raid1 raid0 multipath linear 8139too crct10dif_pclmul crc32_pclmul qxl drm_kms_helper syscopyarea aesni_intel sysfillrect sysimgblt fb_sys_fops ttm drm aes_x86_64 crypto_simd cryptd 8139cp glue_helper mii pata_acpi floppy
    [  548.623217] CPU: 1 PID: 1295 Comm: mount Tainted: G    B             4.18.0-rc1+ #4
    [  548.623219] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [  548.623226] RIP: 0010:__alloc_pages_slowpath+0xe4a/0x1420
    [  548.623227] Code: ff ff 01 89 85 c8 fe ff ff e9 91 fc ff ff 41 89 c5 e9 5c fc ff ff 0f 0b 89 f8 25 ff ff f7 ff 89 85 8c fe ff ff e9 d5 f2 ff ff <0f> 0b e9 65 f2 ff ff 65 8b 05 38 81 d2 47 f6 c4 01 74 1c 65 48 8b
    [  548.623281] RSP: 0018:ffff8801f28c7678 EFLAGS: 00010246
    [  548.623284] RAX: 0000000000000000 RBX: 00000000006040c0 RCX: ffffffffb82f73b7
    [  548.623287] RDX: 1ffff1003e518eeb RSI: 000000000000000c RDI: 0000000000000000
    [  548.623290] RBP: ffff8801f28c7880 R08: 0000000000000000 R09: ffffed0047fff2c5
    [  548.623292] R10: 0000000000000001 R11: ffffed0047fff2c4 R12: ffff8801e88de040
    [  548.623295] R13: 00000000006040c0 R14: 000000000000000c R15: ffff8801f28c7938
    [  548.623299] FS:  00007f76fca51840(0000) GS:ffff8801f6f00000(0000) knlGS:0000000000000000
    [  548.623302] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  548.623304] CR2: 00007f19b9171760 CR3: 00000001ed952000 CR4: 00000000000006e0
    [  548.623317] Call Trace:
    [  548.623325]  ? kasan_check_read+0x11/0x20
    [  548.623330]  ? __zone_watermark_ok+0x92/0x240
    [  548.623336]  ? get_page_from_freelist+0x1c3/0x1d90
    [  548.623347]  ? _raw_spin_lock_irqsave+0x2a/0x60
    [  548.623353]  ? warn_alloc+0x250/0x250
    [  548.623358]  ? save_stack+0x46/0xd0
    [  548.623361]  ? kasan_kmalloc+0xad/0xe0
    [  548.623366]  ? __isolate_free_page+0x2a0/0x2a0
    [  548.623370]  ? mount_fs+0x60/0x1a0
    [  548.623374]  ? vfs_kern_mount+0x6b/0x1a0
    [  548.623378]  ? do_mount+0x34a/0x18c0
    [  548.623383]  ? ksys_mount+0x83/0xd0
    [  548.623387]  ? __x64_sys_mount+0x67/0x80
    [  548.623391]  ? do_syscall_64+0x78/0x170
    [  548.623396]  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  548.623401]  __alloc_pages_nodemask+0x3c5/0x400
    [  548.623407]  ? __alloc_pages_slowpath+0x1420/0x1420
    [  548.623412]  ? __mutex_lock_slowpath+0x20/0x20
    [  548.623417]  ? kvmalloc_node+0x31/0x80
    [  548.623424]  alloc_pages_current+0x75/0x110
    [  548.623436]  kmalloc_order+0x24/0x60
    [  548.623442]  kmalloc_order_trace+0x24/0xb0
    [  548.623448]  __kmalloc_track_caller+0x207/0x220
    [  548.623455]  ? f2fs_build_node_manager+0x399/0xbb0
    [  548.623460]  kmemdup+0x20/0x50
    [  548.623465]  f2fs_build_node_manager+0x399/0xbb0
    [  548.623470]  f2fs_fill_super+0x195e/0x2b40
    [  548.623477]  ? f2fs_commit_super+0x1b0/0x1b0
    [  548.623481]  ? set_blocksize+0x90/0x140
    [  548.623486]  mount_bdev+0x1c5/0x210
    [  548.623489]  ? f2fs_commit_super+0x1b0/0x1b0
    [  548.623495]  f2fs_mount+0x15/0x20
    [  548.623498]  mount_fs+0x60/0x1a0
    [  548.623503]  ? alloc_vfsmnt+0x309/0x360
    [  548.623508]  vfs_kern_mount+0x6b/0x1a0
    [  548.623513]  do_mount+0x34a/0x18c0
    [  548.623518]  ? lockref_put_or_lock+0xcf/0x160
    [  548.623523]  ? copy_mount_string+0x20/0x20
    [  548.623528]  ? memcg_kmem_put_cache+0x1b/0xa0
    [  548.623533]  ? kasan_check_write+0x14/0x20
    [  548.623537]  ? _copy_from_user+0x6a/0x90
    [  548.623542]  ? memdup_user+0x42/0x60
    [  548.623547]  ksys_mount+0x83/0xd0
    [  548.623552]  __x64_sys_mount+0x67/0x80
    [  548.623557]  do_syscall_64+0x78/0x170
    [  548.623562]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  548.623566] RIP: 0033:0x7f76fc331b9a
    [  548.623567] Code: 48 8b 0d 01 c3 2b 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 49 89 ca b8 a5 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d ce c2 2b 00 f7 d8 64 89 01 48
    [  548.623632] RSP: 002b:00007ffd4f0a0e48 EFLAGS: 00000206 ORIG_RAX: 00000000000000a5
    [  548.623636] RAX: ffffffffffffffda RBX: 000000000146c030 RCX: 00007f76fc331b9a
    [  548.623639] RDX: 000000000146c210 RSI: 000000000146df30 RDI: 0000000001474ec0
    [  548.623641] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000013
    [  548.623643] R10: 00000000c0ed0000 R11: 0000000000000206 R12: 0000000001474ec0
    [  548.623646] R13: 000000000146c210 R14: 0000000000000000 R15: 0000000000000003
    [  548.623650] ---[ end trace 4ce02f25ff7d3df5 ]---
    [  548.623656] F2FS-fs (loop0): Failed to initialize F2FS node manager
    [  548.627936] F2FS-fs (loop0): Invalid log blocks per segment (8201)
    
    [  548.627940] F2FS-fs (loop0): Can't find valid F2FS filesystem in 1th superblock
    [  548.635835] F2FS-fs (loop0): Failed to initialize F2FS node manager
    
    - Location
    https://elixir.bootlin.com/linux/v4.18-rc1/source/fs/f2fs/segment.c#L3578
    
            sit_i->sit_bitmap = kmemdup(src_bitmap, bitmap_size, GFP_KERNEL);
    
    Buffer overrun happens when doing memcpy. I suspect there is missing (inconsistent) checks on bitmap_size.
    
    Reported by Wen Xu (wen.xu@gatech.edu) from SSLab, Gatech.
    
    Reported-by: Wen Xu <wen.xu@gatech.edu>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit bd91b56cb3b27492963caeb5fccefe20a986ca8d
Author: Thomas Tai <thomas.tai@oracle.com>
Date:   Thu Jul 26 12:13:04 2018 -0500

    PCI/AER: Work around use-after-free in pcie_do_fatal_recovery()
    
    When an fatal error is received by a non-bridge device, the device is
    removed, and pci_stop_and_remove_bus_device() deallocates the device
    structure.  The freed device structure is used by subsequent code to send
    uevents and print messages.
    
    Hold a reference on the device until we're finished using it.  This is not
    an ideal fix because pcie_do_fatal_recovery() should not use the device at
    all after removing it, but that's too big a project for right now.
    
    Fixes: 7e9084b36740 ("PCI/AER: Handle ERR_FATAL with removal and re-enumeration of devices")
    Signed-off-by: Thomas Tai <thomas.tai@oracle.com>
    [bhelgaas: changelog, reduce get/put coverage]
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

commit 52dda80d62dff39979fb407d67b7c9fc02381589
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Jul 26 09:50:31 2018 +0100

    drm/i915: Protect guc_fini_wq() against module load abort
    
    Prevent
    [  397.873143] general protection fault: 0000 [#1] PREEMPT SMP PTI
    [  397.873154] CPU: 4 PID: 4799 Comm: drv_module_relo Tainted: G     U            4.18.0-rc6-CI-CI_DRM_4534+ #1
    [  397.873162] Hardware name: Micro-Star International Co., Ltd. MS-7B54/Z370M MORTAR (MS-7B54), BIOS 1.10 12/28/2017
    [  397.873175] RIP: 0010:__lock_acquire+0xf6/0x1b50
    [  397.873179] Code: 85 c0 4c 8b 9d 40 ff ff ff 8b 8d 38 ff ff ff 44 8b 8d 30 ff ff ff 4c 8b 85 28 ff ff ff 44 8b 95 24 ff ff ff 0f 84 54 03 00 00 <f0> ff 80 38 01 00 00 8b 15 45 8c 59 02 45 8b bc 24 70 08 00 00 85
    [  397.873240] RSP: 0018:ffffc90000497b40 EFLAGS: 00010002
    [  397.873246] RAX: 6b6b6b6b6b6b6b6b RBX: 0000000000000001 RCX: 0000000000000000
    [  397.873252] RDX: 0000000000000046 RSI: 0000000000000000 RDI: 0000000000000000
    [  397.873258] RBP: ffffc90000497c20 R08: ffffffff810a25e9 R09: 0000000000000000
    [  397.873264] R10: 0000000000000000 R11: ffff880255c63c28 R12: ffff8801093b2840
    [  397.873270] R13: 0000000000000001 R14: 0000000000000001 R15: 0000000000000246
    [  397.873277] FS:  00007faf88d71980(0000) GS:ffff880266300000(0000) knlGS:0000000000000000
    [  397.873284] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  397.873289] CR2: 000055d866c9ca10 CR3: 000000025472e006 CR4: 00000000003606e0
    [  397.873295] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  397.873301] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  397.873308] Call Trace:
    [  397.873318]  ? lock_acquire+0xa6/0x210
    [  397.873323]  lock_acquire+0xa6/0x210
    [  397.873331]  ? drain_workqueue+0x19/0x180
    [  397.873339]  __mutex_lock+0x89/0x980
    [  397.873346]  ? drain_workqueue+0x19/0x180
    [  397.873352]  ? _raw_spin_unlock_irqrestore+0x4c/0x60
    [  397.873359]  ? trace_hardirqs_on_caller+0xe0/0x1b0
    [  397.873365]  ? drain_workqueue+0x19/0x180
    [  397.873373]  ? debug_object_active_state+0x127/0x150
    [  397.873381]  ? drain_workqueue+0x19/0x180
    [  397.873387]  drain_workqueue+0x19/0x180
    [  397.873395]  destroy_workqueue+0x12/0x1f0
    [  397.873476]  intel_guc_fini_misc+0x36/0x90 [i915]
    [  397.873540]  i915_gem_fini+0x91/0x100 [i915]
    [  397.873588]  i915_driver_unload+0xd2/0x110 [i915]
    [  397.873638]  i915_pci_remove+0x19/0x30 [i915]
    [  397.873646]  pci_device_remove+0x36/0xb0
    [  397.873653]  device_release_driver_internal+0x185/0x250
    [  397.873660]  driver_detach+0x35/0x70
    [  397.873668]  bus_remove_driver+0x53/0xd0
    [  397.873675]  pci_unregister_driver+0x25/0xa0
    [  397.873683]  __se_sys_delete_module+0x162/0x210
    [  397.873691]  ? do_syscall_64+0xd/0x190
    [  397.873697]  do_syscall_64+0x55/0x190
    [  397.873704]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [  397.873710] RIP: 0033:0x7faf884231b7
    [  397.873714] Code: 73 01 c3 48 8b 0d d1 8c 2c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 b8 b0 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d a1 8c 2c 00 f7 d8 64 89 01 48
    [  397.873775] RSP: 002b:00007ffda4e98cf8 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [  397.873784] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007faf884231b7
    [  397.873790] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 000055fbb18f1bd8
    [  397.873796] RBP: 000055fbb18f1b70 R08: 000055fbb18f1bdc R09: 00007ffda4e98d38
    [  397.873802] R10: 00007ffda4e97cf4 R11: 0000000000000206 R12: 000055fbb0d32470
    [  397.873808] R13: 00007ffda4e992e0 R14: 0000000000000000 R15: 0000000000000000
    
    v2: It's use-after-free; not a NULL pointer.
    
    Testcase: igt/drv_module_reload/basic-reload-inject
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Michal Wajdeczko <michal.wajdeczko@intel.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180726085033.4044-1-chris@chris-wilson.co.uk

commit 29859aeb8a6ea17ba207933a81b6b77b4d4df81a
Author: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
Date:   Tue Jun 19 13:52:24 2018 +0100

    iommu/io-pgtable-arm-v7s: Abort allocation when table address overflows the PTE
    
    When run on a 64-bit system in selftest, the v7s driver may obtain page
    table with physical addresses larger than 32-bit. Level-2 tables are 1KB
    and are are allocated with slab, which doesn't accept the GFP_DMA32
    flag. Currently map() truncates the address written in the PTE, causing
    iova_to_phys() or unmap() to access invalid memory. Kasan reports it as
    a use-after-free. To avoid any nasty surprise, test if the physical
    address fits in a PTE before returning a new table. 32-bit systems,
    which are the main users of this page table format, shouldn't see any
    difference.
    
    Signed-off-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

commit 51bbf9bee34ff5d4006d266f24a54dc9c1669eb5
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 19 17:27:43 2018 -0500

    PCI: hotplug: Demidlayer registration with the core
    
    When a hotplug driver calls pci_hp_register(), all steps necessary for
    registration are carried out in one go, including creation of a kobject
    and addition to sysfs.  That's a problem for pciehp once it's converted
    to enable/disable the slot exclusively from the IRQ thread:  The thread
    needs to be spawned after creation of the kobject (because it uses the
    kobject's name), but before addition to sysfs (because it will handle
    enable/disable requests submitted via sysfs).
    
    pci_hp_deregister() does offer a ->release callback that's invoked
    after deletion from sysfs and before destruction of the kobject.  But
    because pci_hp_register() doesn't offer a counterpart, hotplug drivers'
    ->probe and ->remove code becomes asymmetric, which is error prone
    as recently discovered use-after-free bugs in pciehp's ->remove hook
    have shown.
    
    In a sense, this appears to be a case of the midlayer antipattern:
    
       "The core thesis of the "midlayer mistake" is that midlayers are
        bad and should not exist.  That common functionality which it is
        so tempting to put in a midlayer should instead be provided as
        library routines which can [be] used, augmented, or ignored by
        each bottom level driver independently.  Thus every subsystem
        that supports multiple implementations (or drivers) should
        provide a very thin top layer which calls directly into the
        bottom layer drivers, and a rich library of support code that
        eases the implementation of those drivers.  This library is
        available to, but not forced upon, those drivers."
            --  Neil Brown (2009), https://lwn.net/Articles/336262/
    
    The presence of midlayer traits in the PCI hotplug core might be ascribed
    to its age:  When it was introduced in February 2002, the blessings of a
    library approach might not have been well known:
    https://git.kernel.org/tglx/history/c/a8a2069f432c
    
    For comparison, the driver core does offer split functions for creating
    a kobject (device_initialize()) and addition to sysfs (device_add()) as
    an alternative to carrying out everything at once (device_register()).
    This was introduced in October 2002:
    https://git.kernel.org/tglx/history/c/8b290eb19962
    
    The odd ->release callback in the PCI hotplug core was added in 2003:
    https://git.kernel.org/tglx/history/c/69f8d663b595
    
    Clearly, a library approach would not force every hotplug driver to
    implement a ->release callback, but rather allow the driver to remove
    the sysfs files, release its data structures and finally destroy the
    kobject.  Alternatively, a driver may choose to remove everything with
    pci_hp_deregister(), then release its data structures.
    
    To this end, offer drivers pci_hp_initialize() and pci_hp_add() as a
    split-up version of pci_hp_register().  Likewise, offer pci_hp_del()
    and pci_hp_destroy() as a split-up version of pci_hp_deregister().
    
    Eliminate the ->release callback and move its code into each driver's
    teardown routine.
    
    Declare pci_hp_deregister() void, in keeping with the usual kernel
    pattern that enablement can fail, but disablement cannot.  It only
    returned an error if the caller passed in a NULL pointer or a slot which
    has never or is no longer registered or is sharing its name with another
    slot.  Those would be bugs, so WARN about them.  Few hotplug drivers
    actually checked the return value and those that did only printed a
    useless error message to dmesg.  Remove that.
    
    For most drivers the conversion was straightforward since it doesn't
    matter whether the code in the ->release callback is executed before or
    after destruction of the kobject.  But in the case of ibmphp, it was
    unclear to me whether setting slot_cur->ctrl and slot_cur->bus_on to
    NULL needs to happen before the kobject is destroyed, so I erred on
    the side of caution and ensured that the order stays the same.  Another
    nontrivial case is pnv_php, I've found the list and kref logic difficult
    to understand, however my impression was that it is safe to delete the
    list element and drop the references until after the kobject is
    destroyed.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Andy Shevchenko <andy.shevchenko@gmail.com>  # drivers/platform/x86
    Cc: Rafael J. Wysocki <rjw@rjwysocki.net>
    Cc: Len Brown <lenb@kernel.org>
    Cc: Scott Murray <scott@spiteful.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Cc: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Cc: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Cc: Corentin Chary <corentin.chary@gmail.com>
    Cc: Darren Hart <dvhart@infradead.org>
    Cc: Andy Shevchenko <andy@infradead.org>

commit 281e878eab191cce4259abbbf1a0322e3adae02c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Jul 19 17:27:32 2018 -0500

    PCI: pciehp: Fix use-after-free on unplug
    
    When pciehp is unbound (e.g. on unplug of a Thunderbolt device), the
    hotplug_slot struct is deregistered and thus freed before freeing the
    IRQ.  The IRQ handler and the work items it schedules print the slot
    name referenced from the freed structure in various informational and
    debug log messages, each time resulting in a quadruple dereference of
    freed pointers (hotplug_slot -> pci_slot -> kobject -> name).
    
    At best the slot name is logged as "(null)", at worst kernel memory is
    exposed in logs or the driver crashes:
    
      pciehp 0000:10:00.0:pcie204: Slot((null)): Card not present
    
    An attacker may provoke the bug by unplugging multiple devices on a
    Thunderbolt daisy chain at once.  Unplugging can also be simulated by
    powering down slots via sysfs.  The bug is particularly easy to trigger
    in poll mode.
    
    It has been present since the driver's introduction in 2004:
    https://git.kernel.org/tglx/history/c/c16b4b14d980
    
    Fix by rearranging teardown such that the IRQ is freed first.  Run the
    work items queued by the IRQ handler to completion before freeing the
    hotplug_slot struct by draining the work queue from the ->release_slot
    callback which is invoked by pci_hp_deregister().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org # v2.6.4

commit 9f15bde671355c351cf20d9f879004b234353100
Author: Jing Xia <jing.xia.mail@gmail.com>
Date:   Fri Jul 20 17:53:48 2018 -0700

    mm: memcg: fix use after free in mem_cgroup_iter()
    
    It was reported that a kernel crash happened in mem_cgroup_iter(), which
    can be triggered if the legacy cgroup-v1 non-hierarchical mode is used.
    
    Unable to handle kernel paging request at virtual address 6b6b6b6b6b6b8f
    ......
    Call trace:
      mem_cgroup_iter+0x2e0/0x6d4
      shrink_zone+0x8c/0x324
      balance_pgdat+0x450/0x640
      kswapd+0x130/0x4b8
      kthread+0xe8/0xfc
      ret_from_fork+0x10/0x20
    
      mem_cgroup_iter():
          ......
          if (css_tryget(css))    <-- crash here
                break;
          ......
    
    The crashing reason is that mem_cgroup_iter() uses the memcg object whose
    pointer is stored in iter->position, which has been freed before and
    filled with POISON_FREE(0x6b).
    
    And the root cause of the use-after-free issue is that
    invalidate_reclaim_iterators() fails to reset the value of iter->position
    to NULL when the css of the memcg is released in non- hierarchical mode.
    
    Link: http://lkml.kernel.org/r/1531994807-25639-1-git-send-email-jing.xia@unisoc.com
    Fixes: 6df38689e0e9 ("mm: memcontrol: fix possible memcg leak due to interrupted reclaim")
    Signed-off-by: Jing Xia <jing.xia.mail@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: <chunyan.zhang@unisoc.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1481ecf1941a35a3e82d0f3e8fe9a2bdce28ee6f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Jul 17 10:58:10 2018 +0200

    serial: sh-sci: Fix use-after-free on subsequent port startup
    
    sci_request_irq() checks port->irqstr[j] for a NULL pointer, to decide
    if a fallback interrupt name string should be allocated or not.
    
    While this string is freed during port shutdown, the pointer is not
    zeroed.  Hence on a subsequent startup of the port, it will still be
    pointing to the freed memory, leading to e.g.
    
        WARNING: CPU: 0 PID: 404 at fs/proc/generic.c:388 __proc_create+0xbc/0x260
        name len 0
    
    or to a crash (the latter is more likely with CONFIG_DEBUG_SLAB=y, due
    to the poisoning of freed memory).
    
    Instead of zeroeing the pointer at multiple places, preinitialize
    port->irqstr[j] to zero to fix this.
    
    Fixes: 8b0bbd956228ae87 ("serial: sh-sci: Add support for R7S9210")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Ulrich Hecht <ulrich.hecht+renesas@gmail.com>
    Reviewed-by: Simon Horman <horms+renesas@verge.net.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baa2a4fdd525c8c4b0f704d20457195b29437839
Author: Ronny Chevalier <ronny.chevalier@hp.com>
Date:   Wed Jul 11 14:39:37 2018 +0200

    audit: fix use-after-free in audit_add_watch
    
    audit_add_watch stores locally krule->watch without taking a reference
    on watch. Then, it calls audit_add_to_parent, and uses the watch stored
    locally.
    
    Unfortunately, it is possible that audit_add_to_parent updates
    krule->watch.
    When it happens, it also drops a reference of watch which
    could free the watch.
    
    How to reproduce (with KASAN enabled):
    
        auditctl -w /etc/passwd -F success=0 -k test_passwd
        auditctl -w /etc/passwd -F success=1 -k test_passwd2
    
    The second call to auditctl triggers the use-after-free, because
    audit_to_parent updates krule->watch to use a previous existing watch
    and drops the reference to the newly created watch.
    
    To fix the issue, we grab a reference of watch and we release it at the
    end of the function.
    
    Signed-off-by: Ronny Chevalier <ronny.chevalier@hp.com>
    Reviewed-by: Richard Guy Briggs <rgb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>

commit 9432a3175770e06cb83eada2d91fac90c977cb99
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon May 28 13:31:13 2018 +0200

    KVM: irqfd: fix race between EPOLLHUP and irq_bypass_register_consumer
    
    A comment warning against this bug is there, but the code is not doing what
    the comment says.  Therefore it is possible that an EPOLLHUP races against
    irq_bypass_register_consumer.  The EPOLLHUP handler schedules irqfd_shutdown,
    and if that runs soon enough, you get a use-after-free.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>

commit b5020a8e6b54d2ece80b1e7dedb33c79a40ebd47
Author: Lan Tianyu <tianyu.lan@intel.com>
Date:   Thu Dec 21 21:10:36 2017 -0500

    KVM/Eventfd: Avoid crash when assign and deassign specific eventfd in parallel.
    
    Syzbot reports crashes in kvm_irqfd_assign(), caused by use-after-free
    when kvm_irqfd_assign() and kvm_irqfd_deassign() run in parallel
    for one specific eventfd. When the assign path hasn't finished but irqfd
    has been added to kvm->irqfds.items list, another thead may deassign the
    eventfd and free struct kvm_kernel_irqfd(). The assign path then uses
    the struct kvm_kernel_irqfd that has been freed by deassign path. To avoid
    such issue, keep irqfd under kvm->irq_srcu protection after the irqfd
    has been added to kvm->irqfds.items list, and call synchronize_srcu()
    in irq_shutdown() to make sure that irqfd has been fully initialized in
    the assign path.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tianyu Lan <tianyu.lan@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 56bc61587daadef67712068f251c4ef2e3932d94
Author: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
Date:   Thu Jun 21 17:22:52 2018 +0200

    usb: gadget: u_audio: protect stream runtime fields with stream spinlock
    
    The change protects almost the whole body of u_audio_iso_complete()
    function by PCM stream lock, this is mainly sufficient to avoid a race
    between USB request completion and stream termination, the change
    prevents a possibility of invalid memory access in interrupt context
    by memcpy():
    
        Unable to handle kernel paging request at virtual address 00004e80
        pgd = c0004000
        [00004e80] *pgd=00000000
        Internal error: Oops: 817 [#1] PREEMPT SMP ARM
        CPU: 0 PID: 3 Comm: ksoftirqd/0 Tainted: G         C   3.14.54+ #117
        task: da180b80 ti: da192000 task.ti: da192000
        PC is at memcpy+0x50/0x330
        LR is at 0xcdd92b0e
        pc : [<c029ef30>]    lr : [<cdd92b0e>]    psr: 20000193
        sp : da193ce4  ip : dd86ae26  fp : 0000b180
        r10: daf81680  r9 : 00000000  r8 : d58a01ea
        r7 : 2c0b43e4  r6 : acdfb08b  r5 : 01a271cf  r4 : 87389377
        r3 : 69469782  r2 : 00000020  r1 : daf82fe0  r0 : 00004e80
        Flags: nzCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment kernel
        Control: 10c5387d  Table: 2b70804a  DAC: 00000015
        Process ksoftirqd/0 (pid: 3, stack limit = 0xda192238)
    
    Also added a check for potential !runtime condition, commonly it is
    done by PCM_RUNTIME_CHECK(substream) in the beginning, however this
    does not completely prevent from oopses in u_audio_iso_complete(),
    because the proper protection scheme must be implemented in PCM
    library functions.
    
    An example of *not fixed* oops due to substream->runtime->*
    dereference by snd_pcm_running(substream) from
    snd_pcm_period_elapsed(), where substream->runtime is gone while
    waiting the substream lock:
    
        Unable to handle kernel paging request at virtual address 6b6b6b6b
        pgd = db7e4000
        [6b6b6b6b] *pgd=00000000
        CPU: 0 PID: 193 Comm: klogd Tainted: G         C   3.14.54+ #118
        task: db5ac500 ti: db60c000 task.ti: db60c000
        PC is at snd_pcm_period_elapsed+0x48/0xd8 [snd_pcm]
        LR is at snd_pcm_period_elapsed+0x40/0xd8 [snd_pcm]
        pc : [<>]    lr : [<>]    psr: 60000193
        Flags: nZCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM  Segment user
        Control: 10c5387d  Table: 2b7e404a  DAC: 00000015
        Process klogd (pid: 193, stack limit = 0xdb60c238)
        [<>] (snd_pcm_period_elapsed [snd_pcm]) from [<>] (udc_irq+0x500/0xbbc)
        [<>] (udc_irq) from [<>] (ci_irq+0x280/0x304)
        [<>] (ci_irq) from [<>] (handle_irq_event_percpu+0xa4/0x40c)
        [<>] (handle_irq_event_percpu) from [<>] (handle_irq_event+0x3c/0x5c)
        [<>] (handle_irq_event) from [<>] (handle_fasteoi_irq+0xc4/0x110)
        [<>] (handle_fasteoi_irq) from [<>] (generic_handle_irq+0x20/0x30)
        [<>] (generic_handle_irq) from [<>] (handle_IRQ+0x80/0xc0)
        [<>] (handle_IRQ) from [<>] (gic_handle_irq+0x3c/0x60)
        [<>] (gic_handle_irq) from [<>] (__irq_svc+0x44/0x78)
    
    Signed-off-by: Vladimir Zapolskiy <vladimir_zapolskiy@mentor.com>
    [erosca: W/o this patch, with minimal instrumentation [1], I can
             consistently reproduce BUG: KASAN: use-after-free [2]]
    
    [1] Instrumentation to reproduce issue [2]:
     diff --git a/drivers/usb/gadget/function/u_audio.c b/drivers/usb/gadget/function/u_audio.c
     index a72295c953bb..bd0b308024fe 100644
     --- a/drivers/usb/gadget/function/u_audio.c
     +++ b/drivers/usb/gadget/function/u_audio.c
     @@ -16,6 +16,7 @@
      #include <sound/core.h>
      #include <sound/pcm.h>
      #include <sound/pcm_params.h>
     +#include <linux/delay.h>
    
      #include "u_audio.h"
    
     @@ -147,6 +148,8 @@ static void u_audio_iso_complete(struct usb_ep *ep, struct usb_request *req)
    
            spin_unlock_irqrestore(&prm->lock, flags);
    
     +      udelay(500); //delay here to increase probability of parallel activities
     +
            /* Pack USB load in ALSA ring buffer */
            pending = prm->dma_bytes - hw_ptr;
    
    [2] After applying [1], below BUG occurs on Rcar-H3-Salvator-X board:
    ==================================================================
    BUG: KASAN: use-after-free in u_audio_iso_complete+0x24c/0x520 [u_audio]
    Read of size 8 at addr ffff8006cafcc248 by task swapper/0/0
    
    CPU: 0 PID: 0 Comm: swapper/0 Tainted: G        WC      4.14.47+ #160
    Hardware name: Renesas Salvator-X board based on r8a7795 ES2.0+ (DT)
    Call trace:
    [<ffff2000080925ac>] dump_backtrace+0x0/0x364
    [<ffff200008092924>] show_stack+0x14/0x1c
    [<ffff200008f8dbcc>] dump_stack+0x108/0x174
    [<ffff2000083c71b8>] print_address_description+0x7c/0x32c
    [<ffff2000083c78e8>] kasan_report+0x324/0x354
    [<ffff2000083c6114>] __asan_load8+0x24/0x94
    [<ffff2000021d1b34>] u_audio_iso_complete+0x24c/0x520 [u_audio]
    [<ffff20000152fe50>] usb_gadget_giveback_request+0x480/0x4d0 [udc_core]
    [<ffff200001860ab8>] usbhsg_queue_done+0x100/0x130 [renesas_usbhs]
    [<ffff20000185f814>] usbhsf_pkt_handler+0x1a4/0x298 [renesas_usbhs]
    [<ffff20000185fb38>] usbhsf_irq_ready+0x128/0x178 [renesas_usbhs]
    [<ffff200001859cc8>] usbhs_interrupt+0x440/0x490 [renesas_usbhs]
    [<ffff2000081a0288>] __handle_irq_event_percpu+0x594/0xa58
    [<ffff2000081a07d0>] handle_irq_event_percpu+0x84/0x12c
    [<ffff2000081a0928>] handle_irq_event+0xb0/0x10c
    [<ffff2000081a8384>] handle_fasteoi_irq+0x1e0/0x2ec
    [<ffff20000819e5f8>] generic_handle_irq+0x2c/0x44
    [<ffff20000819f0d0>] __handle_domain_irq+0x190/0x194
    [<ffff20000808177c>] gic_handle_irq+0x80/0xac
    Exception stack(0xffff200009e97c80 to 0xffff200009e97dc0)
    7c80: 0000000000000000 0000000000000000 0000000000000003 ffff200008179298
    7ca0: ffff20000ae1c180 dfff200000000000 0000000000000000 ffff2000081f9a88
    7cc0: ffff200009eb5960 ffff200009e97cf0 0000000000001600 ffff0400041b064b
    7ce0: 0000000000000000 0000000000000002 0000000200000001 0000000000000001
    7d00: ffff20000842197c 0000ffff958c4970 0000000000000000 ffff8006da0d5b80
    7d20: ffff8006d4678498 0000000000000000 000000126bde0a8b ffff8006d4678480
    7d40: 0000000000000000 000000126bdbea64 ffff200008fd0000 ffff8006fffff980
    7d60: 00000000495f0018 ffff200009e97dc0 ffff200008b6c4ec ffff200009e97dc0
    7d80: ffff200008b6c4f0 0000000020000145 ffff8006da0d5b80 ffff8006d4678498
    7da0: ffffffffffffffff ffff8006d4678498 ffff200009e97dc0 ffff200008b6c4f0
    [<ffff200008084034>] el1_irq+0xb4/0x12c
    [<ffff200008b6c4f0>] cpuidle_enter_state+0x818/0x844
    [<ffff200008b6c59c>] cpuidle_enter+0x18/0x20
    [<ffff20000815f2e4>] call_cpuidle+0x98/0x9c
    [<ffff20000815f674>] do_idle+0x214/0x264
    [<ffff20000815facc>] cpu_startup_entry+0x20/0x24
    [<ffff200008fb09d8>] rest_init+0x30c/0x320
    [<ffff2000095f1338>] start_kernel+0x570/0x5b0
    ---<-snip->---
    
    Fixes: 132fcb460839 ("usb: gadget: Add Audio Class 2.0 Driver")
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit b7ed879425be371905d856410d19e9a42a62bcf3
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Fri Jul 13 14:40:50 2018 +0900

    net: ip6_gre: get ipv6hdr after skb_cow_head()
    
    A KASAN:use-after-free bug was found related to ip6-erspan
    while running selftests/net/ip6_gre_headroom.sh
    
    It happens because of following sequence:
    - ipv6hdr pointer is obtained from skb
    - skb_cow_head() is called, skb->head memory is reallocated
    - old data is accessed using ipv6hdr pointer
    
    skb_cow_head() call was added in e41c7c68ea77 ("ip6erspan: make sure
    enough headroom at xmit."), but looking at the history there was a
    chance of similar bug because gre_handle_offloads() and pskb_trim()
    can also reallocate skb->head memory. Fixes tag points to commit
    which introduced possibility of this bug.
    
    This patch moves ipv6hdr pointer assignment after skb_cow_head() call.
    
    Fixes: 5a963eb61b7c ("ip6_gre: Add ERSPAN native tunnel support")
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Acked-by: William Tu <u9012063@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e8cfd6d9d8049e2fd5b2de8a328519dc58ea1e6
Author: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
Date:   Fri Jul 13 13:24:38 2018 +0900

    tun: Fix use-after-free on XDP_TX
    
    On XDP_TX we need to free up the frame only when tun_xdp_tx() returns a
    negative value. A positive value indicates that the packet is
    successfully enqueued to the ptr_ring, so freeing the page causes
    use-after-free.
    
    Fixes: 735fc4054b3a ("xdp: change ndo_xdp_xmit API to support bulking")
    Signed-off-by: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e1a720d0312fd510699032c7694a362a010170f
Author: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
Date:   Sun Jul 15 20:36:50 2018 +0100

    Bluetooth: avoid killing an already killed socket
    
    slub debug reported:
    
    [  440.648642] =============================================================================
    [  440.648649] BUG kmalloc-1024 (Tainted: G    BU     O   ): Poison overwritten
    [  440.648651] -----------------------------------------------------------------------------
    
    [  440.648655] INFO: 0xe70f4bec-0xe70f4bec. First byte 0x6a instead of 0x6b
    [  440.648665] INFO: Allocated in sk_prot_alloc+0x6b/0xc6 age=33155 cpu=1 pid=1047
    [  440.648671]  ___slab_alloc.constprop.24+0x1fc/0x292
    [  440.648675]  __slab_alloc.isra.18.constprop.23+0x1c/0x25
    [  440.648677]  __kmalloc+0xb6/0x17f
    [  440.648680]  sk_prot_alloc+0x6b/0xc6
    [  440.648683]  sk_alloc+0x1e/0xa1
    [  440.648700]  sco_sock_alloc.constprop.6+0x26/0xaf [bluetooth]
    [  440.648716]  sco_connect_cfm+0x166/0x281 [bluetooth]
    [  440.648731]  hci_conn_request_evt.isra.53+0x258/0x281 [bluetooth]
    [  440.648746]  hci_event_packet+0x28b/0x2326 [bluetooth]
    [  440.648759]  hci_rx_work+0x161/0x291 [bluetooth]
    [  440.648764]  process_one_work+0x163/0x2b2
    [  440.648767]  worker_thread+0x1a9/0x25c
    [  440.648770]  kthread+0xf8/0xfd
    [  440.648774]  ret_from_fork+0x2e/0x38
    [  440.648779] INFO: Freed in __sk_destruct+0xd3/0xdf age=3815 cpu=1 pid=1047
    [  440.648782]  __slab_free+0x4b/0x27a
    [  440.648784]  kfree+0x12e/0x155
    [  440.648787]  __sk_destruct+0xd3/0xdf
    [  440.648790]  sk_destruct+0x27/0x29
    [  440.648793]  __sk_free+0x75/0x91
    [  440.648795]  sk_free+0x1c/0x1e
    [  440.648810]  sco_sock_kill+0x5a/0x5f [bluetooth]
    [  440.648825]  sco_conn_del+0x8e/0xba [bluetooth]
    [  440.648840]  sco_disconn_cfm+0x3a/0x41 [bluetooth]
    [  440.648855]  hci_event_packet+0x45e/0x2326 [bluetooth]
    [  440.648868]  hci_rx_work+0x161/0x291 [bluetooth]
    [  440.648872]  process_one_work+0x163/0x2b2
    [  440.648875]  worker_thread+0x1a9/0x25c
    [  440.648877]  kthread+0xf8/0xfd
    [  440.648880]  ret_from_fork+0x2e/0x38
    [  440.648884] INFO: Slab 0xf4718580 objects=27 used=27 fp=0x  (null) flags=0x40008100
    [  440.648886] INFO: Object 0xe70f4b88 @offset=19336 fp=0xe70f54f8
    
    When KASAN was enabled, it reported:
    
    [  210.096613] ==================================================================
    [  210.096634] BUG: KASAN: use-after-free in ex_handler_refcount+0x5b/0x127
    [  210.096641] Write of size 4 at addr ffff880107e17160 by task kworker/u9:1/2040
    
    [  210.096651] CPU: 1 PID: 2040 Comm: kworker/u9:1 Tainted: G     U     O    4.14.47-20180606+ #2
    [  210.096654] Hardware name: , BIOS 2017.01-00087-g43e04de 08/30/2017
    [  210.096693] Workqueue: hci0 hci_rx_work [bluetooth]
    [  210.096698] Call Trace:
    [  210.096711]  dump_stack+0x46/0x59
    [  210.096722]  print_address_description+0x6b/0x23b
    [  210.096729]  ? ex_handler_refcount+0x5b/0x127
    [  210.096736]  kasan_report+0x220/0x246
    [  210.096744]  ex_handler_refcount+0x5b/0x127
    [  210.096751]  ? ex_handler_clear_fs+0x85/0x85
    [  210.096757]  fixup_exception+0x8c/0x96
    [  210.096766]  do_trap+0x66/0x2c1
    [  210.096773]  do_error_trap+0x152/0x180
    [  210.096781]  ? fixup_bug+0x78/0x78
    [  210.096817]  ? hci_debugfs_create_conn+0x244/0x26a [bluetooth]
    [  210.096824]  ? __schedule+0x113b/0x1453
    [  210.096830]  ? sysctl_net_exit+0xe/0xe
    [  210.096837]  ? __wake_up_common+0x343/0x343
    [  210.096843]  ? insert_work+0x107/0x163
    [  210.096850]  invalid_op+0x1b/0x40
    [  210.096888] RIP: 0010:hci_debugfs_create_conn+0x244/0x26a [bluetooth]
    [  210.096892] RSP: 0018:ffff880094a0f970 EFLAGS: 00010296
    [  210.096898] RAX: 0000000000000000 RBX: ffff880107e170e8 RCX: ffff880107e17160
    [  210.096902] RDX: 000000000000002f RSI: ffff88013b80ed40 RDI: ffffffffa058b940
    [  210.096906] RBP: ffff88011b2b0578 R08: 00000000852f0ec9 R09: ffffffff81cfcf9b
    [  210.096909] R10: 00000000d21bdad7 R11: 0000000000000001 R12: ffff8800967b0488
    [  210.096913] R13: ffff880107e17168 R14: 0000000000000068 R15: ffff8800949c0008
    [  210.096920]  ? __sk_destruct+0x2c6/0x2d4
    [  210.096959]  hci_event_packet+0xff5/0x7de2 [bluetooth]
    [  210.096969]  ? __local_bh_enable_ip+0x43/0x5b
    [  210.097004]  ? l2cap_sock_recv_cb+0x158/0x166 [bluetooth]
    [  210.097039]  ? hci_le_meta_evt+0x2bb3/0x2bb3 [bluetooth]
    [  210.097075]  ? l2cap_ertm_init+0x94e/0x94e [bluetooth]
    [  210.097093]  ? xhci_urb_enqueue+0xbd8/0xcf5 [xhci_hcd]
    [  210.097102]  ? __accumulate_pelt_segments+0x24/0x33
    [  210.097109]  ? __accumulate_pelt_segments+0x24/0x33
    [  210.097115]  ? __update_load_avg_se.isra.2+0x217/0x3a4
    [  210.097122]  ? set_next_entity+0x7c3/0x12cd
    [  210.097128]  ? pick_next_entity+0x25e/0x26c
    [  210.097135]  ? pick_next_task_fair+0x2ca/0xc1a
    [  210.097141]  ? switch_mm_irqs_off+0x346/0xb4f
    [  210.097147]  ? __switch_to+0x769/0xbc4
    [  210.097153]  ? compat_start_thread+0x66/0x66
    [  210.097188]  ? hci_conn_check_link_mode+0x1cd/0x1cd [bluetooth]
    [  210.097195]  ? finish_task_switch+0x392/0x431
    [  210.097228]  ? hci_rx_work+0x154/0x487 [bluetooth]
    [  210.097260]  hci_rx_work+0x154/0x487 [bluetooth]
    [  210.097269]  process_one_work+0x579/0x9e9
    [  210.097277]  worker_thread+0x68f/0x804
    [  210.097285]  kthread+0x31c/0x32b
    [  210.097292]  ? rescuer_thread+0x70c/0x70c
    [  210.097299]  ? kthread_create_on_node+0xa3/0xa3
    [  210.097306]  ret_from_fork+0x35/0x40
    
    [  210.097314] Allocated by task 2040:
    [  210.097323]  kasan_kmalloc.part.1+0x51/0xc7
    [  210.097328]  __kmalloc+0x17f/0x1b6
    [  210.097335]  sk_prot_alloc+0xf2/0x1a3
    [  210.097340]  sk_alloc+0x22/0x297
    [  210.097375]  sco_sock_alloc.constprop.7+0x23/0x202 [bluetooth]
    [  210.097410]  sco_connect_cfm+0x2d0/0x566 [bluetooth]
    [  210.097443]  hci_conn_request_evt.isra.53+0x6d3/0x762 [bluetooth]
    [  210.097476]  hci_event_packet+0x85e/0x7de2 [bluetooth]
    [  210.097507]  hci_rx_work+0x154/0x487 [bluetooth]
    [  210.097512]  process_one_work+0x579/0x9e9
    [  210.097517]  worker_thread+0x68f/0x804
    [  210.097523]  kthread+0x31c/0x32b
    [  210.097529]  ret_from_fork+0x35/0x40
    
    [  210.097533] Freed by task 2040:
    [  210.097539]  kasan_slab_free+0xb3/0x15e
    [  210.097544]  kfree+0x103/0x1a9
    [  210.097549]  __sk_destruct+0x2c6/0x2d4
    [  210.097584]  sco_conn_del.isra.1+0xba/0x10e [bluetooth]
    [  210.097617]  hci_event_packet+0xff5/0x7de2 [bluetooth]
    [  210.097648]  hci_rx_work+0x154/0x487 [bluetooth]
    [  210.097653]  process_one_work+0x579/0x9e9
    [  210.097658]  worker_thread+0x68f/0x804
    [  210.097663]  kthread+0x31c/0x32b
    [  210.097670]  ret_from_fork+0x35/0x40
    
    [  210.097676] The buggy address belongs to the object at ffff880107e170e8
     which belongs to the cache kmalloc-1024 of size 1024
    [  210.097681] The buggy address is located 120 bytes inside of
     1024-byte region [ffff880107e170e8, ffff880107e174e8)
    [  210.097683] The buggy address belongs to the page:
    [  210.097689] page:ffffea00041f8400 count:1 mapcount:0 mapping:          (null) index:0xffff880107e15b68 compound_mapcount: 0
    [  210.110194] flags: 0x8000000000008100(slab|head)
    [  210.115441] raw: 8000000000008100 0000000000000000 ffff880107e15b68 0000000100170016
    [  210.115448] raw: ffffea0004a47620 ffffea0004b48e20 ffff88013b80ed40 0000000000000000
    [  210.115451] page dumped because: kasan: bad access detected
    
    [  210.115454] Memory state around the buggy address:
    [  210.115460]  ffff880107e17000: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [  210.115465]  ffff880107e17080: fc fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb
    [  210.115469] >ffff880107e17100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  210.115472]                                                        ^
    [  210.115477]  ffff880107e17180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  210.115481]  ffff880107e17200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  210.115483] ==================================================================
    
    And finally when BT_DBG() and ftrace was enabled it showed:
    
           <...>-14979 [001] ....   186.104191: sco_sock_kill <-sco_sock_close
           <...>-14979 [001] ....   186.104191: sco_sock_kill <-sco_sock_release
           <...>-14979 [001] ....   186.104192: sco_sock_kill: sk ef0497a0 state 9
           <...>-14979 [001] ....   186.104193: bt_sock_unlink <-sco_sock_kill
    kworker/u9:2-792   [001] ....   186.104246: sco_sock_kill <-sco_conn_del
    kworker/u9:2-792   [001] ....   186.104248: sco_sock_kill: sk ef0497a0 state 9
    kworker/u9:2-792   [001] ....   186.104249: bt_sock_unlink <-sco_sock_kill
    kworker/u9:2-792   [001] ....   186.104250: sco_sock_destruct <-__sk_destruct
    kworker/u9:2-792   [001] ....   186.104250: sco_sock_destruct: sk ef0497a0
    kworker/u9:2-792   [001] ....   186.104860: hci_conn_del <-hci_event_packet
    kworker/u9:2-792   [001] ....   186.104864: hci_conn_del: hci0 hcon ef0484c0 handle 266
    
    Only in the failed case, sco_sock_kill() gets called with the same sock
    pointer two times. Add a check for SOCK_DEAD to avoid continue killing
    a socket which has already been killed.
    
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit 726e41097920a73e4c7c33385dcc0debb1281e18
Author: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Date:   Tue Jul 10 10:29:10 2018 +1000

    drivers: core: Remove glue dirs from sysfs earlier
    
    For devices with a class, we create a "glue" directory between
    the parent device and the new device with the class name.
    
    This directory is never "explicitely" removed when empty however,
    this is left to the implicit sysfs removal done by kobject_release()
    when the object loses its last reference via kobject_put().
    
    This is problematic because as long as it's not been removed from
    sysfs, it is still present in the class kset and in sysfs directory
    structure.
    
    The presence in the class kset exposes a use after free bug fixed
    by the previous patch, but the presence in sysfs means that until
    the kobject is released, which can take a while (especially with
    kobject debugging), any attempt at re-creating such as binding a
    new device for that class/parent pair, will result in a sysfs
    duplicate file name error.
    
    This fixes it by instead doing an explicit kobject_del() when
    the glue dir is empty, by keeping track of the number of
    child devices of the gluedir.
    
    This is made easy by the fact that all glue dir operations are
    done with a global mutex, and there's already a function
    (cleanup_glue_dir) called in all the right places taking that
    mutex that can be enhanced for this. It appears that this was
    in fact the intent of the function, but the implementation was
    wrong.
    
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c012691508f5fcc09b0a777fd1747f266093fe1b
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Wed Jul 11 11:20:29 2018 +0300

    IB/cm: Remove cma_multicast->igmp_joined
    
    This variable isn't read and written to with proper locking, so it is
    racy. Instead of using an unlocked bool use presence in the mc->list
    
    The caller could race rdma_join_multicast with rdma_leave_multicast which
    would leak a mc join and cause a use after free of mc.
    
    Instead, do not add the mc to the list until it has completed
    initialization, all mcs on the list require leaving.
    
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

commit 97b191702b05a7cb9fa6d846adba68419cbbc7a6
Author: Naohiro Aota <naota@elisp.net>
Date:   Fri Jul 13 23:07:20 2018 +0900

    btrfs: fix use-after-free of cmp workspace pages
    
    btrfs_cmp_data_free() puts cmp's src_pages and dst_pages, but leaves
    their page address intact. Now, if you hit "goto again" in
    btrfs_extent_same_range() and hit some error in
    btrfs_cmp_data_prepare(), you'll try to unlock/put already put pages.
    
    This is simple fix to reset the address to avoid use-after-free.
    
    Fixes: 67b07bd4bec5 ("Btrfs: reuse cmp workspace in EXTENT_SAME ioctl")
    Signed-off-by: Naohiro Aota <naota@elisp.net>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 68d2f84a1368cc5d4ccbbbfc6821f159d27681c9
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Thu Jul 12 16:24:59 2018 +0900

    net: gro: properly remove skb from list
    
    Following crash occurs in validate_xmit_skb_list() when same skb is
    iterated multiple times in the loop and consume_skb() is called.
    
    The root cause is calling list_del_init(&skb->list) and not clearing
    skb->next in d4546c2509b1. list_del_init(&skb->list) sets skb->next
    to point to skb itself. skb->next needs to be cleared because other
    parts of network stack uses another kind of SKB lists.
    validate_xmit_skb_list() uses such list.
    
    A similar type of bugfix was reported by Jesper Dangaard Brouer.
    https://patchwork.ozlabs.org/patch/942541/
    
    This patch clears skb->next and changes list_del_init() to list_del()
    so that list->prev will maintain the list poison.
    
    [  148.185511] ==================================================================
    [  148.187865] BUG: KASAN: use-after-free in validate_xmit_skb_list+0x4b/0xa0
    [  148.190158] Read of size 8 at addr ffff8801e52eefc0 by task swapper/1/0
    [  148.192940]
    [  148.193642] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.18.0-rc3+ #25
    [  148.195423] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20180531_142017-buildhw-08.phx2.fedoraproject.org-1.fc28 04/01/2014
    [  148.199129] Call Trace:
    [  148.200565]  <IRQ>
    [  148.201911]  dump_stack+0xc6/0x14c
    [  148.203572]  ? dump_stack_print_info.cold.1+0x2f/0x2f
    [  148.205083]  ? kmsg_dump_rewind_nolock+0x59/0x59
    [  148.206307]  ? validate_xmit_skb+0x2c6/0x560
    [  148.207432]  ? debug_show_held_locks+0x30/0x30
    [  148.208571]  ? validate_xmit_skb_list+0x4b/0xa0
    [  148.211144]  print_address_description+0x6c/0x23c
    [  148.212601]  ? validate_xmit_skb_list+0x4b/0xa0
    [  148.213782]  kasan_report.cold.6+0x241/0x2fd
    [  148.214958]  validate_xmit_skb_list+0x4b/0xa0
    [  148.216494]  sch_direct_xmit+0x1b0/0x680
    [  148.217601]  ? dev_watchdog+0x4e0/0x4e0
    [  148.218675]  ? do_raw_spin_trylock+0x10/0x120
    [  148.219818]  ? do_raw_spin_lock+0xe0/0xe0
    [  148.221032]  __dev_queue_xmit+0x1167/0x1810
    [  148.222155]  ? sched_clock+0x5/0x10
    [...]
    
    [  148.474257] Allocated by task 0:
    [  148.475363]  kasan_kmalloc+0xbf/0xe0
    [  148.476503]  kmem_cache_alloc+0xb4/0x1b0
    [  148.477654]  __build_skb+0x91/0x250
    [  148.478677]  build_skb+0x67/0x180
    [  148.479657]  e1000_clean_rx_irq+0x542/0x8a0
    [  148.480757]  e1000_clean+0x652/0xd10
    [  148.481772]  net_rx_action+0x4ea/0xc20
    [  148.482808]  __do_softirq+0x1f9/0x574
    [  148.483831]
    [  148.484575] Freed by task 0:
    [  148.485504]  __kasan_slab_free+0x12e/0x180
    [  148.486589]  kmem_cache_free+0xb4/0x240
    [  148.487634]  kfree_skbmem+0xed/0x150
    [  148.488648]  consume_skb+0x146/0x250
    [  148.489665]  validate_xmit_skb+0x2b7/0x560
    [  148.490754]  validate_xmit_skb_list+0x70/0xa0
    [  148.491897]  sch_direct_xmit+0x1b0/0x680
    [  148.493949]  __dev_queue_xmit+0x1167/0x1810
    [  148.495103]  br_dev_queue_push_xmit+0xce/0x250
    [  148.496196]  br_forward_finish+0x276/0x280
    [  148.497234]  __br_forward+0x44f/0x520
    [  148.498260]  br_forward+0x19f/0x1b0
    [  148.499264]  br_handle_frame_finish+0x65e/0x980
    [  148.500398]  NF_HOOK.constprop.10+0x290/0x2a0
    [  148.501522]  br_handle_frame+0x417/0x640
    [  148.502582]  __netif_receive_skb_core+0xaac/0x18f0
    [  148.503753]  __netif_receive_skb_one_core+0x98/0x120
    [  148.504958]  netif_receive_skb_internal+0xe3/0x330
    [  148.506154]  napi_gro_complete+0x190/0x2a0
    [  148.507243]  dev_gro_receive+0x9f7/0x1100
    [  148.508316]  napi_gro_receive+0xcb/0x260
    [  148.509387]  e1000_clean_rx_irq+0x2fc/0x8a0
    [  148.510501]  e1000_clean+0x652/0xd10
    [  148.511523]  net_rx_action+0x4ea/0xc20
    [  148.512566]  __do_softirq+0x1f9/0x574
    [  148.513598]
    [  148.514346] The buggy address belongs to the object at ffff8801e52eefc0
    [  148.514346]  which belongs to the cache skbuff_head_cache of size 232
    [  148.517047] The buggy address is located 0 bytes inside of
    [  148.517047]  232-byte region [ffff8801e52eefc0, ffff8801e52ef0a8)
    [  148.519549] The buggy address belongs to the page:
    [  148.520726] page:ffffea000794bb00 count:1 mapcount:0 mapping:ffff880106f4dfc0 index:0xffff8801e52ee840 compound_mapcount: 0
    [  148.524325] flags: 0x17ffffc0008100(slab|head)
    [  148.525481] raw: 0017ffffc0008100 ffff880106b938d0 ffff880106b938d0 ffff880106f4dfc0
    [  148.527503] raw: ffff8801e52ee840 0000000000190011 00000001ffffffff 0000000000000000
    [  148.529547] page dumped because: kasan: bad access detected
    
    Fixes: d4546c2509b1 ("net: Convert GRO SKB handling to list_head.")
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reported-by: Tyler Hicks <tyhicks@canonical.com>
    Tested-by: Tyler Hicks <tyhicks@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f67a43a73b543f686577507fe9ccdfae212b9924
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Wed Jul 11 17:42:39 2018 +0200

    s390/qeth: remove unused buffer->aob pointer
    
    Except for tracing, the pointer is not used.
    
    At the same time, accessing it from qeth_qdio_output_handler() is racy:
    whenever qeth_qdio_cq_handler() gets control, its call to
    qeth_qdio_handle_aob() frees the AOB.
    
    So the AOB pointer that qeth_qdio_output_handler() stores into 'buffer'
    can go stale at any time, and trigger a use-after-free.
    
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e6fddc78323533be570873abb728b7e0ba7e024
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Jul 11 15:30:14 2018 +0200

    bpf: fix panic due to oob in bpf_prog_test_run_skb
    
    sykzaller triggered several panics similar to the below:
    
      [...]
      [  248.851531] BUG: KASAN: use-after-free in _copy_to_user+0x5c/0x90
      [  248.857656] Read of size 985 at addr ffff8808017ffff2 by task a.out/1425
      [...]
      [  248.865902] CPU: 1 PID: 1425 Comm: a.out Not tainted 4.18.0-rc4+ #13
      [  248.865903] Hardware name: Supermicro SYS-5039MS-H12TRF/X11SSE-F, BIOS 2.1a 03/08/2018
      [  248.865905] Call Trace:
      [  248.865910]  dump_stack+0xd6/0x185
      [  248.865911]  ? show_regs_print_info+0xb/0xb
      [  248.865913]  ? printk+0x9c/0xc3
      [  248.865915]  ? kmsg_dump_rewind_nolock+0xe4/0xe4
      [  248.865919]  print_address_description+0x6f/0x270
      [  248.865920]  kasan_report+0x25b/0x380
      [  248.865922]  ? _copy_to_user+0x5c/0x90
      [  248.865924]  check_memory_region+0x137/0x190
      [  248.865925]  kasan_check_read+0x11/0x20
      [  248.865927]  _copy_to_user+0x5c/0x90
      [  248.865930]  bpf_test_finish.isra.8+0x4f/0xc0
      [  248.865932]  bpf_prog_test_run_skb+0x6a0/0xba0
      [...]
    
    After scrubbing the BPF prog a bit from the noise, turns out it called
    bpf_skb_change_head() for the lwt_xmit prog with headroom of 2. Nothing
    wrong in that, however, this was run with repeat >> 0 in bpf_prog_test_run_skb()
    and the same skb thus keeps changing until the pskb_expand_head() called
    from skb_cow() keeps bailing out in atomic alloc context with -ENOMEM.
    So upon return we'll basically have 0 headroom left yet blindly do the
    __skb_push() of 14 bytes and keep copying data from there in bpf_test_finish()
    out of bounds. Fix to check if we have enough headroom and if pskb_expand_head()
    fails, bail out with error.
    
    Another bug independent of this fix (but related in triggering above) is
    that BPF_PROG_TEST_RUN should be reworked to reset the skb/xdp buffer to
    it's original state from input as otherwise repeating the same test in a
    loop won't work for benchmarking when underlying input buffer is getting
    changed by the prog each time and reused for the next run leading to
    unexpected results.
    
    Fixes: 1cf1cae963c2 ("bpf: introduce BPF_PROG_TEST_RUN command")
    Reported-by: syzbot+709412e651e55ed96498@syzkaller.appspotmail.com
    Reported-by: syzbot+54f39d6ab58f39720a55@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commit 9af86f9338949a9369bda5e6fed69347d1813054
Author: Edward Cree <ecree@solarflare.com>
Date:   Mon Jul 9 18:10:19 2018 +0100

    net: core: fix use-after-free in __netif_receive_skb_list_core
    
    __netif_receive_skb_core can free the skb, so we have to use the dequeue-
     enqueue model when calling it from __netif_receive_skb_list_core.
    
    Fixes: 88eb1944e18c ("net: core: propagate SKB lists through packet_type lookup")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9f17dbf04ddf55ae48f5bbafea4c4920ea943215
Author: Edward Cree <ecree@solarflare.com>
Date:   Mon Jul 9 18:10:02 2018 +0100

    netfilter: fix use-after-free in NF_HOOK_LIST
    
    nf_hook() can free the skb, so we need to remove it from the list before
     calling, and add passed skbs to a sublist afterwards.
    
    Fixes: 17266ee93984 ("net: ipv4: listified version of ip_rcv")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 932cac10c8fb07e72a1eba28e71b92f7f2cd756e
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Jul 9 14:01:58 2018 +0100

    drm/i915/selftests: Prevent background reaping of active objects
    
    igt_mmap_offset_exhaustion() wants to test what happens when the mmap
    space is filled with zombie objects, objects discarded by userspace but
    still active on the GPU. As they are only protected by the active
    reference, we have to be certain that active reference is kept while we
    peek into our dangling pointer. That active reference should not be
    freed until we retire, but we do that retirement from a background
    thread. This leaves us with a subtle timing problem, exacerbated and
    highlighted by KASAN:
    
    <3>[  132.380399] BUG: KASAN: use-after-free in drm_gem_create_mmap_offset+0x8c/0xd0
    <3>[  132.380430] Read of size 8 at addr ffff8801e13245f8 by task drv_selftest/5822
    
    <4>[  132.380470] CPU: 0 PID: 5822 Comm: drv_selftest Tainted: G     U            4.18.0-rc3-g7ae7763aa2be-kasan_48+ #1
    <4>[  132.380473] Hardware name: Dell Inc. XPS 8300  /0Y2MRG, BIOS A06 10/17/2011
    <4>[  132.380475] Call Trace:
    <4>[  132.380481]  dump_stack+0x7c/0xbb
    <4>[  132.380487]  print_address_description+0x65/0x270
    <4>[  132.380493]  kasan_report+0x25b/0x380
    <4>[  132.380497]  ? drm_gem_create_mmap_offset+0x8c/0xd0
    <4>[  132.380503]  drm_gem_create_mmap_offset+0x8c/0xd0
    <4>[  132.380584]  i915_gem_object_create_mmap_offset+0x6d/0x100 [i915]
    <4>[  132.380650]  igt_mmap_offset_exhaustion+0x462/0x940 [i915]
    <4>[  132.380714]  ? i915_gem_close_object+0x740/0x740 [i915]
    <4>[  132.380784]  ? igt_gem_huge+0x269/0x3d0 [i915]
    <4>[  132.380865]  __i915_subtests+0x5a/0x160 [i915]
    <4>[  132.380936]  __run_selftests+0x1a2/0x2f0 [i915]
    <4>[  132.381008]  i915_live_selftests+0x4e/0x80 [i915]
    <4>[  132.381071]  i915_pci_probe+0xd8/0x1b0 [i915]
    <4>[  132.381077]  pci_device_probe+0x1c5/0x3a0
    <4>[  132.381087]  driver_probe_device+0x6b6/0xcb0
    <4>[  132.381094]  __driver_attach+0x22d/0x2c0
    <4>[  132.381100]  ? driver_probe_device+0xcb0/0xcb0
    <4>[  132.381103]  bus_for_each_dev+0x113/0x1a0
    <4>[  132.381108]  ? check_flags.part.24+0x450/0x450
    <4>[  132.381112]  ? subsys_dev_iter_exit+0x10/0x10
    <4>[  132.381123]  bus_add_driver+0x38b/0x6e0
    <4>[  132.381131]  driver_register+0x189/0x400
    <4>[  132.381136]  ? 0xffffffffc12d8000
    <4>[  132.381140]  do_one_initcall+0xa0/0x4c0
    <4>[  132.381145]  ? initcall_blacklisted+0x180/0x180
    <4>[  132.381152]  ? do_init_module+0x4a/0x54c
    <4>[  132.381156]  ? rcu_lockdep_current_cpu_online+0xdc/0x130
    <4>[  132.381161]  ? kasan_unpoison_shadow+0x30/0x40
    <4>[  132.381169]  do_init_module+0x1b5/0x54c
    <4>[  132.381177]  load_module+0x619e/0x9b70
    <4>[  132.381202]  ? module_frob_arch_sections+0x20/0x20
    <4>[  132.381211]  ? vfs_read+0x257/0x2f0
    <4>[  132.381214]  ? vfs_read+0x257/0x2f0
    <4>[  132.381221]  ? kernel_read+0x8b/0x130
    <4>[  132.381231]  ? copy_strings_kernel+0x120/0x120
    <4>[  132.381244]  ? __se_sys_finit_module+0x17c/0x1a0
    <4>[  132.381248]  __se_sys_finit_module+0x17c/0x1a0
    <4>[  132.381252]  ? __ia32_sys_init_module+0xa0/0xa0
    <4>[  132.381261]  ? __se_sys_newstat+0x77/0xd0
    <4>[  132.381265]  ? cp_new_stat+0x590/0x590
    <4>[  132.381269]  ? kmem_cache_free+0x2f0/0x340
    <4>[  132.381285]  do_syscall_64+0x97/0x400
    <4>[  132.381292]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    <4>[  132.381295] RIP: 0033:0x7eff4af46839
    <4>[  132.381297] Code: 00 f3 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 1f f6 2c 00 f7 d8 64 89 01 48
    <4>[  132.381426] RSP: 002b:00007ffcd84f4cf8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    <4>[  132.381432] RAX: ffffffffffffffda RBX: 000055dfdeb429a0 RCX: 00007eff4af46839
    <4>[  132.381435] RDX: 0000000000000000 RSI: 000055dfdeb43670 RDI: 0000000000000004
    <4>[  132.381437] RBP: 000055dfdeb43670 R08: 0000000000000004 R09: 0000000000000000
    <4>[  132.381440] R10: 00007ffcd84f4e60 R11: 0000000000000246 R12: 0000000000000000
    <4>[  132.381442] R13: 000055dfdeb3bec0 R14: 0000000000000000 R15: 000000000000003b
    
    <3>[  132.381466] Allocated by task 5822:
    <4>[  132.381485]  kmem_cache_alloc+0xdf/0x2e0
    <4>[  132.381546]  i915_gem_object_create_internal+0x24/0x1e0 [i915]
    <4>[  132.381609]  igt_mmap_offset_exhaustion+0x257/0x940 [i915]
    <4>[  132.381677]  __i915_subtests+0x5a/0x160 [i915]
    <4>[  132.381742]  __run_selftests+0x1a2/0x2f0 [i915]
    <4>[  132.381806]  i915_live_selftests+0x4e/0x80 [i915]
    <4>[  132.381865]  i915_pci_probe+0xd8/0x1b0 [i915]
    <4>[  132.381868]  pci_device_probe+0x1c5/0x3a0
    <4>[  132.381871]  driver_probe_device+0x6b6/0xcb0
    <4>[  132.381874]  __driver_attach+0x22d/0x2c0
    <4>[  132.381877]  bus_for_each_dev+0x113/0x1a0
    <4>[  132.381880]  bus_add_driver+0x38b/0x6e0
    <4>[  132.381884]  driver_register+0x189/0x400
    <4>[  132.381886]  do_one_initcall+0xa0/0x4c0
    <4>[  132.381889]  do_init_module+0x1b5/0x54c
    <4>[  132.381892]  load_module+0x619e/0x9b70
    <4>[  132.381895]  __se_sys_finit_module+0x17c/0x1a0
    <4>[  132.381898]  do_syscall_64+0x97/0x400
    <4>[  132.381901]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    <3>[  132.381914] Freed by task 150:
    <4>[  132.381931]  kmem_cache_free+0xb7/0x340
    <4>[  132.381995]  __i915_gem_free_objects+0x875/0xf50 [i915]
    <4>[  132.382054]  __i915_gem_free_work+0x69/0xb0 [i915]
    <4>[  132.382058]  process_one_work+0x78b/0x1740
    <4>[  132.382061]  worker_thread+0x82/0xb80
    <4>[  132.382064]  kthread+0x30c/0x3d0
    <4>[  132.382067]  ret_from_fork+0x3a/0x50
    
    <3>[  132.382081] The buggy address belongs to the object at ffff8801e1324500
                       which belongs to the cache drm_i915_gem_object of size 1168
    <3>[  132.382133] The buggy address is located 248 bytes inside of
                       1168-byte region [ffff8801e1324500, ffff8801e1324990)
    <3>[  132.382179] The buggy address belongs to the page:
    <0>[  132.382202] page:ffffea000784c800 count:1 mapcount:0 mapping:ffff8801dedf6500 index:0xffff8801e1323ec0 compound_mapcount: 0
    <0>[  132.382251] flags: 0x8000000000008100(slab|head)
    <1>[  132.382274] raw: 8000000000008100 ffff8801d6317440 ffff8801d6317440 ffff8801dedf6500
    <1>[  132.382307] raw: ffff8801e1323ec0 0000000000140013 00000001ffffffff 0000000000000000
    <1>[  132.382339] page dumped because: kasan: bad access detected
    
    <3>[  132.382373] Memory state around the buggy address:
    <3>[  132.382395]  ffff8801e1324480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    <3>[  132.382426]  ffff8801e1324500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    <3>[  132.382457] >ffff8801e1324580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    <3>[  132.382488]                                                                 ^
    <3>[  132.382517]  ffff8801e1324600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    <3>[  132.382548]  ffff8801e1324680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    This patch tricks the system into running without the background retire
    thread, until after we finish the test. The only reaping should then be
    performed by the mmap offset routine to reclaim the space as required.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180709130208.11730-1-chris@chris-wilson.co.uk

commit 696e420bb2a6624478105651d5368d45b502b324
Author: Lars Persson <lars.persson@axis.com>
Date:   Mon Jun 25 14:05:25 2018 +0200

    cifs: Fix use after free of a mid_q_entry
    
    With protocol version 2.0 mounts we have seen crashes with corrupt mid
    entries. Either the server->pending_mid_q list becomes corrupt with a
    cyclic reference in one element or a mid object fetched by the
    demultiplexer thread becomes overwritten during use.
    
    Code review identified a race between the demultiplexer thread and the
    request issuing thread. The demultiplexer thread seems to be written
    with the assumption that it is the sole user of the mid object until
    it calls the mid callback which either wakes the issuer task or
    deletes the mid.
    
    This assumption is not true because the issuer task can be woken up
    earlier by a signal. If the demultiplexer thread has proceeded as far
    as setting the mid_state to MID_RESPONSE_RECEIVED then the issuer
    thread will happily end up calling cifs_delete_mid while the
    demultiplexer thread still is using the mid object.
    
    Inserting a delay in the cifs demultiplexer thread widens the race
    window and makes reproduction of the race very easy:
    
                    if (server->large_buf)
                            buf = server->bigbuf;
    
    +               usleep_range(500, 4000);
    
                    server->lstrp = jiffies;
    
    To resolve this I think the proper solution involves putting a
    reference count on the mid object. This patch makes sure that the
    demultiplexer thread holds a reference until it has finished
    processing the transaction.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Lars Persson <larper@axis.com>
    Acked-by: Paulo Alcantara <palcantara@suse.de>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>

commit 14d15c2b278011056482eb015dff89f9cbf2b841
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Mon Jul 2 14:08:45 2018 -0700

    ib_srpt: Fix a use-after-free in __srpt_close_all_ch()
    
    BUG: KASAN: use-after-free in srpt_set_enabled+0x1a9/0x1e0 [ib_srpt]
    Read of size 4 at addr ffff8801269d23f8 by task check/29726
    
    CPU: 4 PID: 29726 Comm: check Not tainted 4.18.0-rc2-dbg+ #4
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
    Call Trace:
     dump_stack+0xa4/0xf5
     print_address_description+0x6f/0x270
     kasan_report+0x241/0x360
     __asan_load4+0x78/0x80
     srpt_set_enabled+0x1a9/0x1e0 [ib_srpt]
     srpt_tpg_enable_store+0xb8/0x120 [ib_srpt]
     configfs_write_file+0x14e/0x1d0 [configfs]
     __vfs_write+0xd2/0x3b0
     vfs_write+0x101/0x270
     ksys_write+0xab/0x120
     __x64_sys_write+0x43/0x50
     do_syscall_64+0x77/0x230
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f235cfe6154
    
    Fixes: aaf45bd83eba ("IB/srpt: Detect session shutdown reliably")
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 995250959d22fc341b5424e3343b0ce5df672461
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Mon Jul 2 14:08:18 2018 -0700

    ib_srpt: Fix a use-after-free in srpt_close_ch()
    
    Avoid that KASAN reports the following:
    
    BUG: KASAN: use-after-free in srpt_close_ch+0x4f/0x1b0 [ib_srpt]
    Read of size 4 at addr ffff880151180cb8 by task check/4681
    
    CPU: 15 PID: 4681 Comm: check Not tainted 4.18.0-rc2-dbg+ #4
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
    Call Trace:
     dump_stack+0xa4/0xf5
     print_address_description+0x6f/0x270
     kasan_report+0x241/0x360
     __asan_load4+0x78/0x80
     srpt_close_ch+0x4f/0x1b0 [ib_srpt]
     srpt_set_enabled+0xf7/0x1e0 [ib_srpt]
     srpt_tpg_enable_store+0xb8/0x120 [ib_srpt]
     configfs_write_file+0x14e/0x1d0 [configfs]
     __vfs_write+0xd2/0x3b0
     vfs_write+0x101/0x270
     ksys_write+0xab/0x120
     __x64_sys_write+0x43/0x50
     do_syscall_64+0x77/0x230
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fixes: aaf45bd83eba ("IB/srpt: Detect session shutdown reliably")
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commits)
      qede: Adverstise software timestamp caps when PHC is not available.
      qed: Fix use of incorrect size in memcpy call.
      qed: Fix setting of incorrect eswitch mode.
      qed: Limit msix vectors in kdump kernel to the minimum required count.
      ipvlan: call dev_change_flags when ipvlan mode is reset
      ipv6: sr: fix passing wrong flags to crypto_alloc_shash()
      net: fix use-after-free in GRO with ESP
      tcp: prevent bogus FRTO undos with non-SACK flows
      bpf: sockhash, add release routine
      bpf: sockhash fix omitted bucket lock in sock_close
      bpf: sockmap, fix smap_list_map_remove when psock is in many maps
      bpf: sockmap, fix crash when ipv6 sock is added
      net: fib_rules: bring back rule_exists to match rule during add
      hv_netvsc: split sub-channel setup into async and sync
      net: use dev_change_tx_queue_len() for SIOCSIFTXQLEN
      atm: zatm: Fix potential Spectre v1
      s390/qeth: consistently re-enable device features
      s390/qeth: don't clobber buffer on async TX completion
      s390/qeth: avoid using is_multicast_ether_addr_64bits on (u8 *)[6]
      s390/qeth: fix race when setting MAC address
      ...

commit 603d4cf8fe095b1ee78f423d514427be507fb513
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Sat Jun 30 17:38:55 2018 +0200

    net: fix use-after-free in GRO with ESP
    
    Since the addition of GRO for ESP, gro_receive can consume the skb and
    return -EINPROGRESS. In that case, the lower layer GRO handler cannot
    touch the skb anymore.
    
    Commit 5f114163f2f5 ("net: Add a skb_gro_flush_final helper.") converted
    some of the gro_receive handlers that can lead to ESP's gro_receive so
    that they wouldn't access the skb when -EINPROGRESS is returned, but
    missed other spots, mainly in tunneling protocols.
    
    This patch finishes the conversion to using skb_gro_flush_final(), and
    adds a new helper, skb_gro_flush_final_remcsum(), used in VXLAN and
    GUE.
    
    Fixes: 5f114163f2f5 ("net: Add a skb_gro_flush_final helper.")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 398391071f2576bbc6351bcb92c78fc432190ac3
Author: Parav Pandit <parav@mellanox.com>
Date:   Tue Jun 19 10:59:19 2018 +0300

    IB/cm: Replace members of sa_path_rec with 'struct sgid_attr *'
    
    While processing a path record entry in CM messages the associated GID
    attribute is now also supplied.
    
    Currently for RoCE a netdevice's net namespace pointer and ifindex are
    stored in path record entry. Both of these fields of the netdev can change
    anytime while processing CM messages. Additionally storing net namespace
    without holding reference will lead to use-after-free crash. Therefore it
    is removed. Netdevice information for RoCE is instead provided via
    referenced gid attribute in ib_cm requests.
    
    Such a design leads to a situation where the kernel can crash when the net
    pointer becomes invalid. However today it is always initialized to
    init_net, which cannot become invalid. In order to support processing
    packets in any arbitrary namespace of the received packet, it is necessary
    to avoid such conditions.
    
    This patch removes the dependency on the net pointer and ifindex; instead
    it will rely on SGID attribute which contains a pointer to netdev.
    
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

commit d850c1658328e757635a46763783c6fd56390dcb
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Thu Jun 21 16:19:42 2018 +0300

    xhci: Fix kernel oops in trace_xhci_free_virt_device
    
    commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    set dev->udev pointer to NULL in xhci_free_dev(), it will cause kernel
    panic in trace_xhci_free_virt_device. This patch reimplement the trace
    function trace_xhci_free_virt_device, remove dev->udev dereference and
    added more useful parameters to show in the trace function,it also makes
    sure dev->udev is not NULL before calling trace_xhci_free_virt_device.
    This issue happened when xhci-hcd trace is enabled and USB devices hot
    plug test. Original use-after-free patch went to stable so this needs so
    be applied there as well.
    
    [ 1092.022457] usb 2-4: USB disconnect, device number 6
    [ 1092.092772] BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
    [ 1092.101694] PGD 0 P4D 0
    [ 1092.104601] Oops: 0000 [#1] SMP
    [ 1092.207734] Workqueue: usb_hub_wq hub_event
    [ 1092.212507] RIP: 0010:trace_event_raw_event_xhci_log_virt_dev+0x6c/0xf0
    [ 1092.220050] RSP: 0018:ffff8c252e883d28 EFLAGS: 00010086
    [ 1092.226024] RAX: ffff8c24af86fa84 RBX: 0000000000000003 RCX: ffff8c25255c2a01
    [ 1092.234130] RDX: 0000000000000000 RSI: 00000000aef55009 RDI: ffff8c252e883d28
    [ 1092.242242] RBP: ffff8c252550e2c0 R08: ffff8c24af86fa84 R09: 0000000000000a70
    [ 1092.250364] R10: 0000000000000a70 R11: 0000000000000000 R12: ffff8c251f21a000
    [ 1092.258468] R13: 000000000000000c R14: ffff8c251f21a000 R15: ffff8c251f432f60
    [ 1092.266572] FS:  0000000000000000(0000) GS:ffff8c252e880000(0000) knlGS:0000000000000000
    [ 1092.275757] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1092.282281] CR2: 0000000000000000 CR3: 0000000154209001 CR4: 00000000003606e0
    [ 1092.290384] Call Trace:
    [ 1092.293156]  <IRQ>
    [ 1092.295439]  xhci_free_virt_device.part.34+0x182/0x1a0
    [ 1092.301288]  handle_cmd_completion+0x7ac/0xfa0
    [ 1092.306336]  ? trace_event_raw_event_xhci_log_trb+0x6e/0xa0
    [ 1092.312661]  xhci_irq+0x3e8/0x1f60
    [ 1092.316524]  __handle_irq_event_percpu+0x75/0x180
    [ 1092.321876]  handle_irq_event_percpu+0x20/0x50
    [ 1092.326922]  handle_irq_event+0x36/0x60
    [ 1092.331273]  handle_edge_irq+0x6d/0x180
    [ 1092.335644]  handle_irq+0x16/0x20
    [ 1092.339417]  do_IRQ+0x41/0xc0
    [ 1092.342782]  common_interrupt+0xf/0xf
    [ 1092.346955]  </IRQ>
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      sfc: make function efx_rps_hash_bucket static
      strparser: Corrected typo in documentation.
      qmi_wwan: add support for the Dell Wireless 5821e module
      cxgb4: when disabling dcb set txq dcb priority to 0
      net_sched: remove a bogus warning in hfsc
      net: dccp: switch rx_tstamp_last_feedback to monotonic clock
      net: dccp: avoid crash in ccid3_hc_rx_send_feedback()
      net: Remove depends on HAS_DMA in case of platform dependency
      MAINTAINERS: Add file patterns for dsa device tree bindings
      net: mscc: make sparse happy
      net: mvneta: fix the Rx desc DMA address in the Rx path
      Documentation: e1000: Fix docs build error
      Documentation: e100: Fix docs build error
      Documentation: e1000: Use correct heading adornment
      Documentation: e100: Use correct heading adornment
      ipv6: mcast: fix unsolicited report interval after receiving querys
      vhost_net: validate sock before trying to put its fd
      VSOCK: fix loopback on big-endian systems
      net: ethernet: ti: davinci_cpdma: make function cpdma_desc_pool_create static
      xen-netfront: Update features after registering netdev
      ...

commit fe2a19652918a5247418aed48a247414a5e45fe2
Author: Lyude Paul <lyude@redhat.com>
Date:   Thu Jun 21 16:48:26 2018 -0400

    drm/amdgpu: Count disabled CRTCs in commit tail earlier
    
    This fixes a regression I accidentally reduced that was picked up by
    kasan, where we were checking the CRTC atomic states after DRM's helpers
    had already freed them. Example:
    
    ==================================================================
    BUG: KASAN: use-after-free in amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
    Read of size 1 at addr ffff8803a697b071 by task kworker/u16:0/7
    
    CPU: 7 PID: 7 Comm: kworker/u16:0 Tainted: G           O      4.18.0-rc1Lyude-Upstream+ #1
    Hardware name: HP HP ZBook 15 G4/8275, BIOS P70 Ver. 01.21 05/02/2018
    Workqueue: events_unbound commit_work [drm_kms_helper]
    Call Trace:
     dump_stack+0xc1/0x169
     ? dump_stack_print_info.cold.1+0x42/0x42
     ? kmsg_dump_rewind_nolock+0xd9/0xd9
     ? printk+0x9f/0xc5
     ? amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     print_address_description+0x6c/0x23c
     ? amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     kasan_report.cold.6+0x241/0x2fd
     amdgpu_dm_atomic_commit_tail.cold.50+0x13d/0x15a [amdgpu]
     ? commit_planes_to_stream.constprop.45+0x13b0/0x13b0 [amdgpu]
     ? cpu_load_update_active+0x290/0x290
     ? finish_task_switch+0x2bd/0x840
     ? __switch_to_asm+0x34/0x70
     ? read_word_at_a_time+0xe/0x20
     ? strscpy+0x14b/0x460
     ? drm_atomic_helper_wait_for_dependencies+0x47d/0x7e0 [drm_kms_helper]
     commit_tail+0x96/0xe0 [drm_kms_helper]
     process_one_work+0x88a/0x1360
     ? create_worker+0x540/0x540
     ? __sched_text_start+0x8/0x8
     ? move_queued_task+0x760/0x760
     ? call_rcu_sched+0x20/0x20
     ? vsnprintf+0xcda/0x1350
     ? wait_woken+0x1c0/0x1c0
     ? mutex_unlock+0x1d/0x40
     ? init_timer_key+0x190/0x230
     ? schedule+0xea/0x390
     ? __schedule+0x1ea0/0x1ea0
     ? need_to_create_worker+0xe4/0x210
     ? init_worker_pool+0x700/0x700
     ? try_to_del_timer_sync+0xbf/0x110
     ? del_timer+0x120/0x120
     ? __mutex_lock_slowpath+0x10/0x10
     worker_thread+0x196/0x11f0
     ? flush_rcu_work+0x50/0x50
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __switch_to_asm+0x34/0x70
     ? __switch_to_asm+0x40/0x70
     ? __schedule+0x7d6/0x1ea0
     ? migrate_swap_stop+0x850/0x880
     ? __sched_text_start+0x8/0x8
     ? save_stack+0x8c/0xb0
     ? kasan_kmalloc+0xbf/0xe0
     ? kmem_cache_alloc_trace+0xe4/0x190
     ? kthread+0x98/0x390
     ? ret_from_fork+0x35/0x40
     ? ret_from_fork+0x35/0x40
     ? deactivate_slab.isra.67+0x3c4/0x5c0
     ? kthread+0x98/0x390
     ? kthread+0x98/0x390
     ? set_track+0x76/0x120
     ? schedule+0xea/0x390
     ? __schedule+0x1ea0/0x1ea0
     ? wait_woken+0x1c0/0x1c0
     ? kasan_unpoison_shadow+0x30/0x40
     ? parse_args.cold.15+0x17a/0x17a
     ? flush_rcu_work+0x50/0x50
     kthread+0x2d4/0x390
     ? kthread_create_worker_on_cpu+0xc0/0xc0
     ret_from_fork+0x35/0x40
    
    Allocated by task 1124:
     kasan_kmalloc+0xbf/0xe0
     kmem_cache_alloc_trace+0xe4/0x190
     dm_crtc_duplicate_state+0x78/0x130 [amdgpu]
     drm_atomic_get_crtc_state+0x147/0x410 [drm]
     page_flip_common+0x57/0x230 [drm_kms_helper]
     drm_atomic_helper_page_flip+0xa6/0x110 [drm_kms_helper]
     drm_mode_page_flip_ioctl+0xc4b/0x10a0 [drm]
     drm_ioctl_kernel+0x1d4/0x260 [drm]
     drm_ioctl+0x433/0x920 [drm]
     amdgpu_drm_ioctl+0x11d/0x290 [amdgpu]
     do_vfs_ioctl+0x1a1/0x13d0
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x6f/0xb0
     do_syscall_64+0x147/0x440
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 1124:
     __kasan_slab_free+0x12e/0x180
     kfree+0x92/0x1a0
     drm_atomic_state_default_clear+0x315/0xc40 [drm]
     __drm_atomic_state_free+0x35/0xd0 [drm]
     drm_atomic_helper_update_plane+0xac/0x350 [drm_kms_helper]
     __setplane_internal+0x2d6/0x840 [drm]
     drm_mode_cursor_universal+0x41e/0xbe0 [drm]
     drm_mode_cursor_common+0x49f/0x880 [drm]
     drm_mode_cursor_ioctl+0xd8/0x130 [drm]
     drm_ioctl_kernel+0x1d4/0x260 [drm]
     drm_ioctl+0x433/0x920 [drm]
     amdgpu_drm_ioctl+0x11d/0x290 [amdgpu]
     do_vfs_ioctl+0x1a1/0x13d0
     ksys_ioctl+0x60/0x90
     __x64_sys_ioctl+0x6f/0xb0
     do_syscall_64+0x147/0x440
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff8803a697b068
     which belongs to the cache kmalloc-1024 of size 1024
    The buggy address is located 9 bytes inside of
     1024-byte region [ffff8803a697b068, ffff8803a697b468)
    The buggy address belongs to the page:
    page:ffffea000e9a5e00 count:1 mapcount:0 mapping:ffff88041e00efc0 index:0x0 compound_mapcount: 0
    flags: 0x8000000000008100(slab|head)
    raw: 8000000000008100 ffffea000ecbc208 ffff88041e000c70 ffff88041e00efc0
    raw: 0000000000000000 0000000000170017 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8803a697af00: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8803a697af80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff8803a697b000: fc fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb
                                                                 ^
     ffff8803a697b080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8803a697b100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    So, we fix this by counting the number of CRTCs this atomic commit disabled
    early on in the function before their atomic states have been freed, then use
    that count later to do the appropriate number of RPM puts at the end of the
    function.
    
    Acked-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Cc: stable@vger.kernel.org
    Fixes: 97028037a38ae ("drm/amdgpu: Grab/put runtime PM references in atomic_commit_tail()")
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Cc: Michel Dänzer <michel@daenzer.net>
    Reported-by: Michel Dänzer <michel@daenzer.net>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3ee7e8697d5860b173132606d80a9cd35e7113ee
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jun 18 15:46:58 2018 +0200

    bdi: Fix another oops in wb_workfn()
    
    syzbot is reporting NULL pointer dereference at wb_workfn() [1] due to
    wb->bdi->dev being NULL. And Dmitry confirmed that wb->state was
    WB_shutting_down after wb->bdi->dev became NULL. This indicates that
    unregister_bdi() failed to call wb_shutdown() on one of wb objects.
    
    The problem is in cgwb_bdi_unregister() which does cgwb_kill() and thus
    drops bdi's reference to wb structures before going through the list of
    wbs again and calling wb_shutdown() on each of them. This way the loop
    iterating through all wbs can easily miss a wb if that wb has already
    passed through cgwb_remove_from_bdi_list() called from wb_shutdown()
    from cgwb_release_workfn() and as a result fully shutdown bdi although
    wb_workfn() for this wb structure is still running. In fact there are
    also other ways cgwb_bdi_unregister() can race with
    cgwb_release_workfn() leading e.g. to use-after-free issues:
    
    CPU1                            CPU2
                                    cgwb_bdi_unregister()
                                      cgwb_kill(*slot);
    
    cgwb_release()
      queue_work(cgwb_release_wq, &wb->release_work);
    cgwb_release_workfn()
                                      wb = list_first_entry(&bdi->wb_list, ...)
                                      spin_unlock_irq(&cgwb_lock);
      wb_shutdown(wb);
      ...
      kfree_rcu(wb, rcu);
                                      wb_shutdown(wb); -> oops use-after-free
    
    We solve these issues by synchronizing writeback structure shutdown from
    cgwb_bdi_unregister() with cgwb_release_workfn() using a new mutex. That
    way we also no longer need synchronization using WB_shutting_down as the
    mutex provides it for CONFIG_CGROUP_WRITEBACK case and without
    CONFIG_CGROUP_WRITEBACK wb_shutdown() can be called only once from
    bdi_unregister().
    
    Reported-by: syzbot <syzbot+4a7438e774b21ddd8eca@syzkaller.appspotmail.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 44a5cd436ec067c9a62988aca3331ac6eee5268d
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Thu Jun 21 20:02:16 2018 +0200

    cls_flower: fix use after free in flower S/W path
    
    If flower filter is created without the skip_sw flag, fl_mask_put()
    can race with fl_classify() and we can destroy the mask rhashtable
    while a lookup operation is accessing it.
    
     BUG: unable to handle kernel paging request at 00000000000911d1
     PGD 0 P4D 0
     SMP PTI
     CPU: 3 PID: 5582 Comm: vhost-5541 Not tainted 4.18.0-rc1.vanilla+ #1950
     Hardware name: Dell Inc. PowerEdge R730/072T6D, BIOS 2.1.7 06/16/2016
     RIP: 0010:rht_bucket_nested+0x20/0x60
     Code: 31 c8 c1 c1 18 29 c8 c3 66 90 8b 4f 04 ba 01 00 00 00 8b 07 48 8b bf 80 00 00 0
     RSP: 0018:ffffafc5cfbb7a48 EFLAGS: 00010206
     RAX: 0000000000001978 RBX: ffff9f12dff88a00 RCX: 00000000ffff9f12
     RDX: 00000000000911d1 RSI: 0000000000000148 RDI: 0000000000000001
     RBP: ffff9f12dff88a00 R08: 000000005f1cc119 R09: 00000000a715fae2
     R10: ffffafc5cfbb7aa8 R11: ffff9f1cb4be804e R12: ffff9f1265e13000
     R13: 0000000000000000 R14: ffffafc5cfbb7b48 R15: ffff9f12dff88b68
     FS:  0000000000000000(0000) GS:ffff9f1d3f0c0000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00000000000911d1 CR3: 0000001575a94006 CR4: 00000000001626e0
     Call Trace:
      fl_lookup+0x134/0x140 [cls_flower]
      fl_classify+0xf3/0x180 [cls_flower]
      tcf_classify+0x78/0x150
      __netif_receive_skb_core+0x69e/0xa50
      netif_receive_skb_internal+0x42/0xf0
      tun_get_user+0xdd5/0xfd0 [tun]
      tun_sendmsg+0x52/0x70 [tun]
      handle_tx+0x2b3/0x5f0 [vhost_net]
      vhost_worker+0xab/0x100 [vhost]
      kthread+0xf8/0x130
      ret_from_fork+0x35/0x40
     Modules linked in: act_mirred act_gact cls_flower vhost_net vhost tap sch_ingress
     CR2: 00000000000911d1
    
    Fix the above waiting for a RCU grace period before destroying the
    rhashtable: we need to use tcf_queue_work(), as rhashtable_destroy()
    must run in process context, as pointed out by Cong Wang.
    
    v1 -> v2: use tcf_queue_work to run rhashtable_destroy().
    
    Fixes: 05cd271fd61a ("cls_flower: Support multiple masks per priority")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 945d015ee0c3095d2290e845565a23dedfd8027c
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jun 21 14:16:02 2018 -0700

    net/packet: fix use-after-free
    
    We should put copy_skb in receive_queue only after
    a successful call to virtio_net_hdr_from_skb().
    
    syzbot report :
    
    BUG: KASAN: use-after-free in __skb_unlink include/linux/skbuff.h:1843 [inline]
    BUG: KASAN: use-after-free in __skb_dequeue include/linux/skbuff.h:1863 [inline]
    BUG: KASAN: use-after-free in skb_dequeue+0x16a/0x180 net/core/skbuff.c:2815
    Read of size 8 at addr ffff8801b044ecc0 by task syz-executor217/4553
    
    CPU: 0 PID: 4553 Comm: syz-executor217 Not tainted 4.18.0-rc1+ #111
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1c9/0x2b4 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     __skb_unlink include/linux/skbuff.h:1843 [inline]
     __skb_dequeue include/linux/skbuff.h:1863 [inline]
     skb_dequeue+0x16a/0x180 net/core/skbuff.c:2815
     skb_queue_purge+0x26/0x40 net/core/skbuff.c:2852
     packet_set_ring+0x675/0x1da0 net/packet/af_packet.c:4331
     packet_release+0x630/0xd90 net/packet/af_packet.c:2991
     __sock_release+0xd7/0x260 net/socket.c:603
     sock_close+0x19/0x20 net/socket.c:1186
     __fput+0x35b/0x8b0 fs/file_table.c:209
     ____fput+0x15/0x20 fs/file_table.c:243
     task_work_run+0x1ec/0x2a0 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x1b08/0x2750 kernel/exit.c:865
     do_group_exit+0x177/0x440 kernel/exit.c:968
     __do_sys_exit_group kernel/exit.c:979 [inline]
     __se_sys_exit_group kernel/exit.c:977 [inline]
     __x64_sys_exit_group+0x3e/0x50 kernel/exit.c:977
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4448e9
    Code: Bad RIP value.
    RSP: 002b:00007ffd5f777ca8 EFLAGS: 00000202 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00000000004448e9
    RDX: 00000000004448e9 RSI: 000000000000fcfb RDI: 0000000000000001
    RBP: 00000000006cf018 R08: 00007ffd0000a45b R09: 0000000000000000
    R10: 00007ffd5f777e48 R11: 0000000000000202 R12: 00000000004021f0
    R13: 0000000000402280 R14: 0000000000000000 R15: 0000000000000000
    
    Allocated by task 4553:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x760 mm/slab.c:3554
     skb_clone+0x1f5/0x500 net/core/skbuff.c:1282
     tpacket_rcv+0x28f7/0x3200 net/packet/af_packet.c:2221
     deliver_skb net/core/dev.c:1925 [inline]
     deliver_ptype_list_skb net/core/dev.c:1940 [inline]
     __netif_receive_skb_core+0x1bfb/0x3680 net/core/dev.c:4611
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4693
     netif_receive_skb_internal+0x12e/0x7d0 net/core/dev.c:4767
     netif_receive_skb+0xbf/0x420 net/core/dev.c:4791
     tun_rx_batched.isra.55+0x4ba/0x8c0 drivers/net/tun.c:1571
     tun_get_user+0x2af1/0x42f0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:2009
     call_write_iter include/linux/fs.h:1795 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6c6/0x9f0 fs/read_write.c:487
     vfs_write+0x1f8/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4553:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x86/0x2d0 mm/slab.c:3756
     kfree_skbmem+0x154/0x230 net/core/skbuff.c:582
     __kfree_skb net/core/skbuff.c:642 [inline]
     kfree_skb+0x1a5/0x580 net/core/skbuff.c:659
     tpacket_rcv+0x189e/0x3200 net/packet/af_packet.c:2385
     deliver_skb net/core/dev.c:1925 [inline]
     deliver_ptype_list_skb net/core/dev.c:1940 [inline]
     __netif_receive_skb_core+0x1bfb/0x3680 net/core/dev.c:4611
     __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4693
     netif_receive_skb_internal+0x12e/0x7d0 net/core/dev.c:4767
     netif_receive_skb+0xbf/0x420 net/core/dev.c:4791
     tun_rx_batched.isra.55+0x4ba/0x8c0 drivers/net/tun.c:1571
     tun_get_user+0x2af1/0x42f0 drivers/net/tun.c:1981
     tun_chr_write_iter+0xb9/0x154 drivers/net/tun.c:2009
     call_write_iter include/linux/fs.h:1795 [inline]
     new_sync_write fs/read_write.c:474 [inline]
     __vfs_write+0x6c6/0x9f0 fs/read_write.c:487
     vfs_write+0x1f8/0x560 fs/read_write.c:549
     ksys_write+0x101/0x260 fs/read_write.c:598
     __do_sys_write fs/read_write.c:610 [inline]
     __se_sys_write fs/read_write.c:607 [inline]
     __x64_sys_write+0x73/0xb0 fs/read_write.c:607
     do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801b044ecc0
     which belongs to the cache skbuff_head_cache of size 232
    The buggy address is located 0 bytes inside of
     232-byte region [ffff8801b044ecc0, ffff8801b044eda8)
    The buggy address belongs to the page:
    page:ffffea0006c11380 count:1 mapcount:0 mapping:ffff8801d9be96c0 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0006c17988 ffff8801d9bec248 ffff8801d9be96c0
    raw: 0000000000000000 ffff8801b044e040 000000010000000c 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801b044eb80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8801b044ec00: 00 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc
    >ffff8801b044ec80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                               ^
     ffff8801b044ed00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801b044ed80: fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc
    
    Fixes: 58d19b19cd99 ("packet: vnet_hdr support for tpacket_rcv")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2fa4a32613c9182b00e46872755b0662374424a7
Author: Jason Yan <yanaijie@huawei.com>
Date:   Thu May 10 11:05:16 2018 +0800

    scsi: libsas: dynamically allocate and free ata host
    
    Commit 2623c7a5f2 ("libata: add refcounting to ata_host") v4.17+ introduced
    refcounting to ata_host and will increase or decrease the refcount when
    adding or deleting transport ATA port.
    
    Now the ata host for libsas is embedded in domain_device, and the ->kref
    member is not initialized. Afer we add ata transport class, ata_host_get()
    will be called when adding transport ATA port and a warning will be
    triggered as below:
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 2 PID: 103 at
    lib/refcount.c:153 refcount_inc+0x40/0x48 ......  Call trace:
     refcount_inc+0x40/0x48
     ata_host_get+0x10/0x18
     ata_tport_add+0x40/0x120
     ata_sas_tport_add+0xc/0x14
     sas_ata_init+0x7c/0xc8
     sas_discover_domain+0x380/0x53c
     process_one_work+0x12c/0x288
     worker_thread+0x58/0x3f0
     kthread+0xfc/0x128
     ret_from_fork+0x10/0x18
    
    And also when removing transport ATA port ata_host_put() will be called and
    another similar warning will be triggered. If the refcount decreased to
    zero, the ata host will be freed. But this ata host is only part of
    domain_device, it cannot be freed directly.
    
    So we have to change this embedded static ata host to a dynamically
    allocated ata host and initialize the ->kref member. To use ata_host_get()
    and ata_host_put() in libsas, we need to move the declaration of these
    functions to the public libata.h and export them.
    
    Fixes: b6240a4df018 ("scsi: libsas: add transport class for ATA devices")
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    CC: John Garry <john.garry@huawei.com>
    CC: Taras Kondratiuk <takondra@cisco.com>
    CC: Tejun Heo <tj@kernel.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 9b0a8da8c4c6e91012ab03a801acc5d8011c7c2f
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jun 18 05:24:31 2018 -0700

    net/ipv6: respect rcu grace period before freeing fib6_info
    
    syzbot reported use after free that is caused by fib6_info being
    freed without a proper RCU grace period.
    
    CPU: 0 PID: 1407 Comm: udevd Not tainted 4.17.0+ #39
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     __read_once_size include/linux/compiler.h:188 [inline]
     find_rr_leaf net/ipv6/route.c:705 [inline]
     rt6_select net/ipv6/route.c:761 [inline]
     fib6_table_lookup+0x12b7/0x14d0 net/ipv6/route.c:1823
     ip6_pol_route+0x1c2/0x1020 net/ipv6/route.c:1856
     ip6_pol_route_output+0x54/0x70 net/ipv6/route.c:2082
     fib6_rule_lookup+0x211/0x6d0 net/ipv6/fib6_rules.c:122
     ip6_route_output_flags+0x2c5/0x350 net/ipv6/route.c:2110
     ip6_route_output include/net/ip6_route.h:82 [inline]
     icmpv6_xrlim_allow net/ipv6/icmp.c:211 [inline]
     icmp6_send+0x147c/0x2da0 net/ipv6/icmp.c:535
     icmpv6_send+0x17a/0x300 net/ipv6/ip6_icmp.c:43
     ip6_link_failure+0xa5/0x790 net/ipv6/route.c:2244
     dst_link_failure include/net/dst.h:427 [inline]
     ndisc_error_report+0xd1/0x1c0 net/ipv6/ndisc.c:695
     neigh_invalidate+0x246/0x550 net/core/neighbour.c:892
     neigh_timer_handler+0xaf9/0xde0 net/core/neighbour.c:978
     call_timer_fn+0x230/0x940 kernel/time/timer.c:1326
     expire_timers kernel/time/timer.c:1363 [inline]
     __run_timers+0x79e/0xc50 kernel/time/timer.c:1666
     run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692
     __do_softirq+0x2e0/0xaf5 kernel/softirq.c:284
     invoke_softirq kernel/softirq.c:364 [inline]
     irq_exit+0x1d1/0x200 kernel/softirq.c:404
     exiting_irq arch/x86/include/asm/apic.h:527 [inline]
     smp_apic_timer_interrupt+0x17e/0x710 arch/x86/kernel/apic/apic.c:1052
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:863
     </IRQ>
    RIP: 0010:strlen+0x5e/0xa0 lib/string.c:482
    Code: 24 00 74 3b 48 bb 00 00 00 00 00 fc ff df 4c 89 e0 48 83 c0 01 48 89 c2 48 89 c1 48 c1 ea 03 83 e1 07 0f b6 14 1a 38 ca 7f 04 <84> d2 75 23 80 38 00 75 de 48 83 c4 08 4c 29 e0 5b 41 5c 5d c3 48
    RSP: 0018:ffff8801af117850 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff13
    RAX: ffff880197f53bd0 RBX: dffffc0000000000 RCX: 0000000000000000
    RDX: 0000000000000000 RSI: ffffffff81c5b06c RDI: ffff880197f53bc0
    RBP: ffff8801af117868 R08: ffff88019a976540 R09: 0000000000000000
    R10: ffff88019a976540 R11: 0000000000000000 R12: ffff880197f53bc0
    R13: ffff880197f53bc0 R14: ffffffff899e4e90 R15: ffff8801d91c6a00
     strlen include/linux/string.h:267 [inline]
     getname_kernel+0x24/0x370 fs/namei.c:218
     open_exec+0x17/0x70 fs/exec.c:882
     load_elf_binary+0x968/0x5610 fs/binfmt_elf.c:780
     search_binary_handler+0x17d/0x570 fs/exec.c:1653
     exec_binprm fs/exec.c:1695 [inline]
     __do_execve_file.isra.35+0x16fe/0x2710 fs/exec.c:1819
     do_execveat_common fs/exec.c:1866 [inline]
     do_execve fs/exec.c:1883 [inline]
     __do_sys_execve fs/exec.c:1964 [inline]
     __se_sys_execve fs/exec.c:1959 [inline]
     __x64_sys_execve+0x8f/0xc0 fs/exec.c:1959
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x7f1576a46207
    Code: 77 19 f4 48 89 d7 44 89 c0 0f 05 48 3d 00 f0 ff ff 76 e0 f7 d8 64 41 89 01 eb d8 f7 d8 64 41 89 01 eb df b8 3b 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 02 f3 c3 48 8b 15 00 8c 2d 00 f7 d8 64 89 02
    RSP: 002b:00007ffff2784568 EFLAGS: 00000202 ORIG_RAX: 000000000000003b
    RAX: ffffffffffffffda RBX: 00000000ffffffff RCX: 00007f1576a46207
    RDX: 0000000001215b10 RSI: 00007ffff2784660 RDI: 00007ffff2785670
    RBP: 0000000000625500 R08: 000000000000589c R09: 000000000000589c
    R10: 0000000000000000 R11: 0000000000000202 R12: 0000000001215b10
    R13: 0000000000000007 R14: 0000000001204250 R15: 0000000000000005
    
    Allocated by task 12188:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kmem_cache_alloc_trace+0x152/0x780 mm/slab.c:3620
     kmalloc include/linux/slab.h:513 [inline]
     kzalloc include/linux/slab.h:706 [inline]
     fib6_info_alloc+0xbb/0x280 net/ipv6/ip6_fib.c:152
     ip6_route_info_create+0x782/0x2b50 net/ipv6/route.c:3013
     ip6_route_add+0x23/0xb0 net/ipv6/route.c:3154
     ipv6_route_ioctl+0x5a5/0x760 net/ipv6/route.c:3660
     inet6_ioctl+0x100/0x1f0 net/ipv6/af_inet6.c:546
     sock_do_ioctl+0xe4/0x3e0 net/socket.c:973
     sock_ioctl+0x30d/0x680 net/socket.c:1097
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:500 [inline]
     do_vfs_ioctl+0x1cf/0x16f0 fs/ioctl.c:684
     ksys_ioctl+0xa9/0xd0 fs/ioctl.c:701
     __do_sys_ioctl fs/ioctl.c:708 [inline]
     __se_sys_ioctl fs/ioctl.c:706 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:706
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 1402:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xd9/0x260 mm/slab.c:3813
     fib6_info_destroy+0x29b/0x350 net/ipv6/ip6_fib.c:207
     fib6_info_release include/net/ip6_fib.h:286 [inline]
     __ip6_del_rt_siblings net/ipv6/route.c:3235 [inline]
     ip6_route_del+0x11c4/0x13b0 net/ipv6/route.c:3316
     ipv6_route_ioctl+0x616/0x760 net/ipv6/route.c:3663
     inet6_ioctl+0x100/0x1f0 net/ipv6/af_inet6.c:546
     sock_do_ioctl+0xe4/0x3e0 net/socket.c:973
     sock_ioctl+0x30d/0x680 net/socket.c:1097
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:500 [inline]
     do_vfs_ioctl+0x1cf/0x16f0 fs/ioctl.c:684
     ksys_ioctl+0xa9/0xd0 fs/ioctl.c:701
     __do_sys_ioctl fs/ioctl.c:708 [inline]
     __se_sys_ioctl fs/ioctl.c:706 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:706
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801b5df2580
     which belongs to the cache kmalloc-256 of size 256
    The buggy address is located 8 bytes inside of
     256-byte region [ffff8801b5df2580, ffff8801b5df2680)
    The buggy address belongs to the page:
    page:ffffea0006d77c80 count:1 mapcount:0 mapping:ffff8801da8007c0 index:0xffff8801b5df2e40
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffffea0006c5cc48 ffffea0007363308 ffff8801da8007c0
    raw: ffff8801b5df2e40 ffff8801b5df2080 0000000100000006 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801b5df2480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801b5df2500: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    > ffff8801b5df2580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                          ^
     ffff8801b5df2600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801b5df2680: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    
    Fixes: a64efe142f5e ("net/ipv6: introduce fib6_info struct and helpers")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reported-by: syzbot+9e6d75e3edef427ee888@syzkaller.appspotmail.com
    Acked-by: David Ahern <dsahern@gmail.com>
    Tested-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c24c10a2c1e1bb478b6bb70612d9e885aee044f
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Tue Jun 19 10:26:40 2018 -0700

    Revert "block: Add warning for bi_next not NULL in bio_endio()"
    
    Commit 0ba99ca4838b ("block: Add warning for bi_next not NULL in
    bio_endio()") breaks the dm driver. end_clone_bio() detects whether
    or not a bio is the last bio associated with a request by checking
    the .bi_next field. Commit 0ba99ca4838b clears that field before
    end_clone_bio() has had a chance to inspect that field. Hence revert
    commit 0ba99ca4838b.
    
    This patch avoids that KASAN reports the following complaint when
    running the srp-test software (srp-test/run_tests -c -d -r 10 -t 02-mq):
    
    ==================================================================
    BUG: KASAN: use-after-free in bio_advance+0x11b/0x1d0
    Read of size 4 at addr ffff8801300e06d0 by task ksoftirqd/0/9
    
    CPU: 0 PID: 9 Comm: ksoftirqd/0 Not tainted 4.18.0-rc1-dbg+ #1
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
    Call Trace:
     dump_stack+0xa4/0xf5
     print_address_description+0x6f/0x270
     kasan_report+0x241/0x360
     __asan_load4+0x78/0x80
     bio_advance+0x11b/0x1d0
     blk_update_request+0xa7/0x5b0
     scsi_end_request+0x56/0x320 [scsi_mod]
     scsi_io_completion+0x7d6/0xb20 [scsi_mod]
     scsi_finish_command+0x1c0/0x280 [scsi_mod]
     scsi_softirq_done+0x19a/0x230 [scsi_mod]
     blk_mq_complete_request+0x160/0x240
     scsi_mq_done+0x50/0x1a0 [scsi_mod]
     srp_recv_done+0x515/0x1330 [ib_srp]
     __ib_process_cq+0xa0/0xf0 [ib_core]
     ib_poll_handler+0x38/0xa0 [ib_core]
     irq_poll_softirq+0xe8/0x1f0
     __do_softirq+0x128/0x60d
     run_ksoftirqd+0x3f/0x60
     smpboot_thread_fn+0x352/0x460
     kthread+0x1c1/0x1e0
     ret_from_fork+0x24/0x30
    
    Allocated by task 1918:
     save_stack+0x43/0xd0
     kasan_kmalloc+0xad/0xe0
     kasan_slab_alloc+0x11/0x20
     kmem_cache_alloc+0xfe/0x350
     mempool_alloc_slab+0x15/0x20
     mempool_alloc+0xfb/0x270
     bio_alloc_bioset+0x244/0x350
     submit_bh_wbc+0x9c/0x2f0
     __block_write_full_page+0x299/0x5a0
     block_write_full_page+0x16b/0x180
     blkdev_writepage+0x18/0x20
     __writepage+0x42/0x80
     write_cache_pages+0x376/0x8a0
     generic_writepages+0xbe/0x110
     blkdev_writepages+0xe/0x10
     do_writepages+0x9b/0x180
     __filemap_fdatawrite_range+0x178/0x1c0
     file_write_and_wait_range+0x59/0xc0
     blkdev_fsync+0x46/0x80
     vfs_fsync_range+0x66/0x100
     do_fsync+0x3d/0x70
     __x64_sys_fsync+0x21/0x30
     do_syscall_64+0x77/0x230
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 9:
     save_stack+0x43/0xd0
     __kasan_slab_free+0x137/0x190
     kasan_slab_free+0xe/0x10
     kmem_cache_free+0xd3/0x380
     mempool_free_slab+0x17/0x20
     mempool_free+0x63/0x160
     bio_free+0x81/0xa0
     bio_put+0x59/0x60
     end_bio_bh_io_sync+0x5d/0x70
     bio_endio+0x1a7/0x360
     blk_update_request+0xd0/0x5b0
     end_clone_bio+0xa3/0xd0 [dm_mod]
     bio_endio+0x1a7/0x360
     blk_update_request+0xd0/0x5b0
     scsi_end_request+0x56/0x320 [scsi_mod]
     scsi_io_completion+0x7d6/0xb20 [scsi_mod]
     scsi_finish_command+0x1c0/0x280 [scsi_mod]
     scsi_softirq_done+0x19a/0x230 [scsi_mod]
     blk_mq_complete_request+0x160/0x240
     scsi_mq_done+0x50/0x1a0 [scsi_mod]
     srp_recv_done+0x515/0x1330 [ib_srp]
     __ib_process_cq+0xa0/0xf0 [ib_core]
     ib_poll_handler+0x38/0xa0 [ib_core]
     irq_poll_softirq+0xe8/0x1f0
     __do_softirq+0x128/0x60d
    
    The buggy address belongs to the object at ffff8801300e0640
     which belongs to the cache bio-0 of size 200
    The buggy address is located 144 bytes inside of
     200-byte region [ffff8801300e0640, ffff8801300e0708)
    The buggy address belongs to the page:
    page:ffffea0004c03800 count:1 mapcount:0 mapping:ffff88015a563a00 index:0x0 compound_mapcount: 0
    flags: 0x8000000000008100(slab|head)
    raw: 8000000000008100 dead000000000100 dead000000000200 ffff88015a563a00
    raw: 0000000000000000 0000000000330033 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801300e0580: fb fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc
     ffff8801300e0600: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    >ffff8801300e0680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                     ^
     ffff8801300e0700: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801300e0780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    ==================================================================
    
    Cc: Kent Overstreet <kent.overstreet@gmail.com>
    Fixes: 0ba99ca4838b ("block: Add warning for bi_next not NULL in bio_endio()")
    Acked-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 6c974d4dfafe5e9ee754f2a6fba0eb1864f1649e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jun 12 14:43:35 2018 +0200

    EDAC, i7core: Fix memleaks and use-after-free on probe and remove
    
    Make sure to free and deregister the addrmatch and chancounts devices
    allocated during probe in all error paths. Also fix use-after-free in a
    probe error path and in the remove success path where the devices were
    being put before before deregistration.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Fixes: 356f0a30860d ("i7core_edac: change the mem allocation scheme to make Documentation/kobject.txt happy")
    Link: http://lkml.kernel.org/r/20180612124335.6420-2-johan@kernel.org
    Signed-off-by: Borislav Petkov <bp@suse.de>

commit 896e518883f18e601335908192e33426c1f599a4
Author: Johan Hovold <johan@kernel.org>
Date:   Thu May 31 16:45:52 2018 +0200

    usb: dwc3: of-simple: fix use-after-free on remove
    
    The clocks have already been explicitly disabled and put as part of
    remove() so the runtime suspend callback must not be run when balancing
    the runtime PM usage count before returning.
    
    Fixes: 16adc674d0d6 ("usb: dwc3: add generic OF glue layer")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commits)
      net: stmmac: Run HWIF Quirks after getting HW caps
      neighbour: skip NTF_EXT_LEARNED entries during forced gc
      net: cxgb3: add error handling for sysfs_create_group
      tls: fix waitall behavior in tls_sw_recvmsg
      tls: fix use-after-free in tls_push_record
      l2tp: filter out non-PPP sessions in pppol2tp_tunnel_ioctl()
      l2tp: reject creation of non-PPP sessions on L2TPv2 tunnels
      mlxsw: spectrum_switchdev: Fix port_vlan refcounting
      mlxsw: spectrum_router: Align with new route replace logic
      mlxsw: spectrum_router: Allow appending to dev-only routes
      ipv6: Only emit append events for appended routes
      stmmac: added support for 802.1ad vlan stripping
      cfg80211: fix rcu in cfg80211_unregister_wdev
      mac80211: Move up init of TXQs
      mac80211_hwsim: fix module init error paths
      cfg80211: initialize sinfo in cfg80211_get_station
      nl80211: fix some kernel doc tag mistakes
      hv_netvsc: Fix the variable sizes in ipsecv2 and rsc offload
      rds: avoid unenecessary cong_update in loop transport
      l2tp: clean up stale tunnel or session in pppol2tp_connect's error path
      ...

commit a447da7d00410278c90d3576782a43f8b675d7be
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Jun 15 03:07:45 2018 +0200

    tls: fix use-after-free in tls_push_record
    
    syzkaller managed to trigger a use-after-free in tls like the
    following:
    
      BUG: KASAN: use-after-free in tls_push_record.constprop.15+0x6a2/0x810 [tls]
      Write of size 1 at addr ffff88037aa08000 by task a.out/2317
    
      CPU: 3 PID: 2317 Comm: a.out Not tainted 4.17.0+ #144
      Hardware name: LENOVO 20FBCTO1WW/20FBCTO1WW, BIOS N1FET47W (1.21 ) 11/28/2016
      Call Trace:
       dump_stack+0x71/0xab
       print_address_description+0x6a/0x280
       kasan_report+0x258/0x380
       ? tls_push_record.constprop.15+0x6a2/0x810 [tls]
       tls_push_record.constprop.15+0x6a2/0x810 [tls]
       tls_sw_push_pending_record+0x2e/0x40 [tls]
       tls_sk_proto_close+0x3fe/0x710 [tls]
       ? tcp_check_oom+0x4c0/0x4c0
       ? tls_write_space+0x260/0x260 [tls]
       ? kmem_cache_free+0x88/0x1f0
       inet_release+0xd6/0x1b0
       __sock_release+0xc0/0x240
       sock_close+0x11/0x20
       __fput+0x22d/0x660
       task_work_run+0x114/0x1a0
       do_exit+0x71a/0x2780
       ? mm_update_next_owner+0x650/0x650
       ? handle_mm_fault+0x2f5/0x5f0
       ? __do_page_fault+0x44f/0xa50
       ? mm_fault_error+0x2d0/0x2d0
       do_group_exit+0xde/0x300
       __x64_sys_exit_group+0x3a/0x50
       do_syscall_64+0x9a/0x300
       ? page_fault+0x8/0x30
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This happened through fault injection where aead_req allocation in
    tls_do_encryption() eventually failed and we returned -ENOMEM from
    the function. Turns out that the use-after-free is triggered from
    tls_sw_sendmsg() in the second tls_push_record(). The error then
    triggers a jump to waiting for memory in sk_stream_wait_memory()
    resp. returning immediately in case of MSG_DONTWAIT. What follows is
    the trim_both_sgl(sk, orig_size), which drops elements from the sg
    list added via tls_sw_sendmsg(). Now the use-after-free gets triggered
    when the socket is being closed, where tls_sk_proto_close() callback
    is invoked. The tls_complete_pending_work() will figure that there's
    a pending closed tls record to be flushed and thus calls into the
    tls_push_pending_closed_record() from there. ctx->push_pending_record()
    is called from the latter, which is the tls_sw_push_pending_record()
    from sw path. This again calls into tls_push_record(). And here the
    tls_fill_prepend() will panic since the buffer address has been freed
    earlier via trim_both_sgl(). One way to fix it is to move the aead
    request allocation out of tls_do_encryption() early into tls_push_record().
    This means we don't prep the tls header and advance state to the
    TLS_PENDING_CLOSED_RECORD before allocation which could potentially
    fail happened. That fixes the issue on my side.
    
    Fixes: 3c4d7559159b ("tls: kernel TLS support")
    Reported-by: syzbot+5c74af81c547738e1684@syzkaller.appspotmail.com
    Reported-by: syzbot+709f2810a6a05f11d4d3@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Dave Watson <davejwatson@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 837bf7cc3b7504385ae0e829c72e470dfc27cf6c
Author: Michael Büsch <m@bues.ch>
Date:   Thu Jun 14 20:08:11 2018 +0200

    hwrng: core - Always drop the RNG in hwrng_unregister()
    
    enable_best_rng() is used in hwrng_unregister() to switch away from the
    currently active RNG, if that is the one currently being removed.
    However enable_best_rng() might fail, if the next RNG's init routine
    fails. In that case enable_best_rng() will return an error code and
    the currently active RNG will remain active.
    After unregistering this might lead to crashes due to use-after-free.
    
    Fix this by dropping the currently active RNG, if enable_best_rng()
    failed. This will result in no RNG to be active, if the next-best
    one failed to initialize.
    
    This problem was introduced by 142a27f0a731ddcf467546960a5585970ca98e21
    
    Fixes: 142a27f0a731 ("hwrng: core - Reset user selected rng by...")
    Reported-by: Wirz <spam@lukas-wirz.de>
    Tested-by: Wirz <spam@lukas-wirz.de>
    Signed-off-by: Michael Büsch <m@bues.ch>
    Cc: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit f70b359b3830b7a5b72c78136edc740839b67acd
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 1 10:59:25 2018 +0300

    crypto: chtls - use after free in chtls_pt_recvmsg()
    
    We call chtls_free_skb() but then we dereference it on the next lines.
    Also "skb" can't be NULL, we just dereferenced it on the line before.
    
    I have moved the free down a couple lines to fix this issue.
    
    Fixes: 17a7d24aa89d ("crypto: chtls - generic handling of data and hdr")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commits)
      rbd: flush rbd_dev->watch_dwork after watch is unregistered
      ceph: update description of some mount options
      ceph: show ino32 if the value is different with default
      ceph: strengthen rsize/wsize/readdir_max_bytes validation
      ceph: fix alignment of rasize
      ceph: fix use-after-free in ceph_statfs()
      ceph: prevent i_version from going back
      ceph: fix wrong check for the case of updating link count
      libceph: allocate the locator string with GFP_NOFAIL
      libceph: make abort_on_full a per-osdc setting
      libceph: don't abort reads in ceph_osdc_abort_on_full()
      libceph: avoid a use-after-free during map check
      libceph: don't warn if req->r_abort_on_full is set
      libceph: use for_each_request() in ceph_osdc_abort_on_full()
      libceph: defer __complete_request() to a workqueue
      libceph: move more code into __complete_request()
      libceph: no need to call flush_workqueue() before destruction
      ceph: flush pending works before shutdown super
      ceph: abort osd requests on force umount
      libceph: introduce ceph_osdc_abort_requests()
      ...

commits)
      nfsd: fix error handling in nfs4_set_delegation()
      nfsd: fix potential use-after-free in nfsd4_decode_getdeviceinfo
      Fix 16-byte memory leak in gssp_accept_sec_context_upcall
      svcrdma: Fix incorrect return value/type in svc_rdma_post_recvs
      svcrdma: Remove unused svc_rdma_op_ctxt
      svcrdma: Persistently allocate and DMA-map Send buffers
      svcrdma: Simplify svc_rdma_send()
      svcrdma: Remove post_send_wr
      svcrdma: Don't overrun the SGE array in svc_rdma_send_ctxt
      svcrdma: Introduce svc_rdma_send_ctxt
      svcrdma: Clean up Send SGE accounting
      svcrdma: Refactor svc_rdma_dma_map_buf
      svcrdma: Allocate recv_ctxt's on CPU handling Receives
      svcrdma: Persistently allocate and DMA-map Receive buffers
      svcrdma: Preserve Receive buffer until svc_rdma_sendto
      svcrdma: Simplify svc_rdma_recv_ctxt_put
      svcrdma: Remove sc_rq_depth
      svcrdma: Introduce svc_rdma_recv_ctxt
      svcrdma: Trace key RDMA API events
      svcrdma: Trace key RPC/RDMA protocol events
      ...

commit 190b02ed79e08983bf62d47c05945c1b06a3d7d5
Author: Jens Axboe <axboe@kernel.dk>
Date:   Sat Jun 9 06:37:14 2018 -0600

    block: fix use-after-free in block flush handling
    
    A recent commit reused the original request flags for the flush
    queue handling. However, for some of the kick flush cases, the
    original request was already completed. This caused a use after
    free, if blk-mq wasn't used.
    
    Fixes: 84fca1b0c461 ("block: pass failfast and driver-specific flags to flush requests")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 3171822fdcdd6e6d536047c425af6dc7a92dc585
Author: Scott Mayhew <smayhew@redhat.com>
Date:   Fri Jun 8 16:31:46 2018 -0400

    nfsd: fix potential use-after-free in nfsd4_decode_getdeviceinfo
    
    When running a fuzz tester against a KASAN-enabled kernel, the following
    splat periodically occurs.
    
    The problem occurs when the test sends a GETDEVICEINFO request with a
    malformed xdr array (size but no data) for gdia_notify_types and the
    array size is > 0x3fffffff, which results in an overflow in the value of
    nbytes which is passed to read_buf().
    
    If the array size is 0x40000000, 0x80000000, or 0xc0000000, then after
    the overflow occurs, the value of nbytes 0, and when that happens the
    pointer returned by read_buf() points to the end of the xdr data (i.e.
    argp->end) when really it should be returning NULL.
    
    Fix this by returning NFS4ERR_BAD_XDR if the array size is > 1000 (this
    value is arbitrary, but it's the same threshold used by
    nfsd4_decode_bitmap()... in could really be any value >= 1 since it's
    expected to get at most a single bitmap in gdia_notify_types).
    
    [  119.256854] ==================================================================
    [  119.257611] BUG: KASAN: use-after-free in nfsd4_decode_getdeviceinfo+0x5a4/0x5b0 [nfsd]
    [  119.258422] Read of size 4 at addr ffff880113ada000 by task nfsd/538
    
    [  119.259146] CPU: 0 PID: 538 Comm: nfsd Not tainted 4.17.0+ #1
    [  119.259662] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.3-1.fc25 04/01/2014
    [  119.261202] Call Trace:
    [  119.262265]  dump_stack+0x71/0xab
    [  119.263371]  print_address_description+0x6a/0x270
    [  119.264609]  kasan_report+0x258/0x380
    [  119.265854]  ? nfsd4_decode_getdeviceinfo+0x5a4/0x5b0 [nfsd]
    [  119.267291]  nfsd4_decode_getdeviceinfo+0x5a4/0x5b0 [nfsd]
    [  119.268549]  ? nfs4svc_decode_compoundargs+0xa5b/0x13c0 [nfsd]
    [  119.269873]  ? nfsd4_decode_sequence+0x490/0x490 [nfsd]
    [  119.271095]  nfs4svc_decode_compoundargs+0xa5b/0x13c0 [nfsd]
    [  119.272393]  ? nfsd4_release_compoundargs+0x1b0/0x1b0 [nfsd]
    [  119.273658]  nfsd_dispatch+0x183/0x850 [nfsd]
    [  119.274918]  svc_process+0x161c/0x31a0 [sunrpc]
    [  119.276172]  ? svc_printk+0x190/0x190 [sunrpc]
    [  119.277386]  ? svc_xprt_release+0x451/0x680 [sunrpc]
    [  119.278622]  nfsd+0x2b9/0x430 [nfsd]
    [  119.279771]  ? nfsd_destroy+0x1c0/0x1c0 [nfsd]
    [  119.281157]  kthread+0x2db/0x390
    [  119.282347]  ? kthread_create_worker_on_cpu+0xc0/0xc0
    [  119.283756]  ret_from_fork+0x35/0x40
    
    [  119.286041] Allocated by task 436:
    [  119.287525]  kasan_kmalloc+0xa0/0xd0
    [  119.288685]  kmem_cache_alloc+0xe9/0x1f0
    [  119.289900]  get_empty_filp+0x7b/0x410
    [  119.291037]  path_openat+0xca/0x4220
    [  119.292242]  do_filp_open+0x182/0x280
    [  119.293411]  do_sys_open+0x216/0x360
    [  119.294555]  do_syscall_64+0xa0/0x2f0
    [  119.295721]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [  119.298068] Freed by task 436:
    [  119.299271]  __kasan_slab_free+0x130/0x180
    [  119.300557]  kmem_cache_free+0x78/0x210
    [  119.301823]  rcu_process_callbacks+0x35b/0xbd0
    [  119.303162]  __do_softirq+0x192/0x5ea
    
    [  119.305443] The buggy address belongs to the object at ffff880113ada000
                    which belongs to the cache filp of size 256
    [  119.308556] The buggy address is located 0 bytes inside of
                    256-byte region [ffff880113ada000, ffff880113ada100)
    [  119.311376] The buggy address belongs to the page:
    [  119.312728] page:ffffea00044eb680 count:1 mapcount:0 mapping:0000000000000000 index:0xffff880113ada780
    [  119.314428] flags: 0x17ffe000000100(slab)
    [  119.315740] raw: 0017ffe000000100 0000000000000000 ffff880113ada780 00000001000c0001
    [  119.317379] raw: ffffea0004553c60 ffffea00045c11e0 ffff88011b167e00 0000000000000000
    [  119.319050] page dumped because: kasan: bad access detected
    
    [  119.321652] Memory state around the buggy address:
    [  119.322993]  ffff880113ad9f00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [  119.324515]  ffff880113ad9f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [  119.326087] >ffff880113ada000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  119.327547]                    ^
    [  119.328730]  ffff880113ada080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  119.330218]  ffff880113ada100: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
    [  119.331740] ==================================================================
    
    Signed-off-by: Scott Mayhew <smayhew@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commits)
      dt-bindings: submitting-patches: add guidance on patch content and subject
      of: platform: stop accessing invalid dev in of_platform_device_destroy
      dt-bindings: net: ravb: Add support for r8a77990 SoC
      dt-bindings: Add vendor prefix for ArcherMind
      dt-bindings: fsi-master-gpio: Document "no-gpio-delays" property
      dt-bindings: Add vendor prefix for Logic PD
      of: overlay: validate offset from property fixups
      of: unittest: for strings, account for trailing \0 in property length field
      drm: rcar-du: disable dtc graph-endpoint warnings on DT overlays
      kbuild: disable new dtc graph and unit-address warnings
      scripts/dtc: Update to upstream version v1.4.6-21-g84e414b0b5bc
      MAINTAINERS: add keyword for devicetree overlay notifiers
      dt-bindings: define vendor prefix for Wi2Wi, Inc.
      dt-bindings: Add vendor prefix for Avnet, Inc.
      dt-bindings: Relocate Tegra20 memory controller bindings
      dt-bindings: Add "sifive" vendor prefix
      dt-bindings: exynos: move ADC binding to iio/adc/ directory
      dt-bindings: powerpc/4xx: move 4xx NDFC and EMAC bindings to subsystem directories
      dt-bindings: move various RNG bindings to rng/ directory
      dt-bindings: move various timer bindings to timer/ directory
      ...

commit bf956be520fb534510e31564231163aa05f7f091
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Thu Jun 7 10:23:10 2018 -0700

    umh: fix race condition
    
    kasan reported use-after-free:
    BUG: KASAN: use-after-free in call_usermodehelper_exec_work+0x2d3/0x310 kernel/umh.c:195
    Write of size 4 at addr ffff8801d9202370 by task kworker/u4:2/50
    Workqueue: events_unbound call_usermodehelper_exec_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_store4_noabort+0x17/0x20 mm/kasan/report.c:437
     call_usermodehelper_exec_work+0x2d3/0x310 kernel/umh.c:195
     process_one_work+0xc1e/0x1b50 kernel/workqueue.c:2145
     worker_thread+0x1cc/0x1440 kernel/workqueue.c:2279
     kthread+0x345/0x410 kernel/kthread.c:240
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    The reason is that 'sub_info' cannot be accessed out of parent task
    context, since it will be freed by the child.
    Instead remember the pid in the child task.
    
    Fixes: 449325b52b7a ("umh: introduce fork_usermode_blob() helper")
    Reported-by: syzbot+2c73319c406f1987d156@syzkaller.appspotmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      RDMA/mlx5: Update SPDX tags to show proper license
      RDMA/restrack: Change SPDX tag to properly reflect license
      IB/hfi1: Fix comment on default hdr entry size
      IB/hfi1: Rename exp_lock to exp_mutex
      IB/hfi1: Add bypass register defines and replace blind constants
      IB/hfi1: Remove unused variable
      IB/hfi1: Ensure VL index is within bounds
      IB/hfi1: Fix user context tail allocation for DMA_RTAIL
      IB/hns: Use zeroing memory allocator instead of allocator/memset
      infiniband: fix a possible use-after-free bug
      iw_cxgb4: add INFINIBAND_ADDR_TRANS dependency
      IB/isert: use T10-PI check mask definitions from core layer
      IB/iser: use T10-PI check mask definitions from core layer
      RDMA/core: introduce check masks for T10-PI offload
      IB/isert: fix T10-pi check mask setting
      IB/mlx5: Add counters read support
      IB/mlx5: Add flow counters read support
      IB/mlx5: Add flow counters binding support
      IB/mlx5: Add counters create and destroy support
      IB/uverbs: Add support for flow counters
      ...

commit 58990d1ff3f7896ee341030e9a7c2e4002570683
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Thu Jun 7 17:40:03 2018 +0200

    bpf: reject passing modified ctx to helper functions
    
    As commit 28e33f9d78ee ("bpf: disallow arithmetic operations on
    context pointer") already describes, f1174f77b50c ("bpf/verifier:
    rework value tracking") removed the specific white-listed cases
    we had previously where we would allow for pointer arithmetic in
    order to further generalize it, and allow e.g. context access via
    modified registers. While the dereferencing of modified context
    pointers had been forbidden through 28e33f9d78ee, syzkaller did
    recently manage to trigger several KASAN splats for slab out of
    bounds access and use after frees by simply passing a modified
    context pointer to a helper function which would then do the bad
    access since verifier allowed it in adjust_ptr_min_max_vals().
    
    Rejecting arithmetic on ctx pointer in adjust_ptr_min_max_vals()
    generally could break existing programs as there's a valid use
    case in tracing in combination with passing the ctx to helpers as
    bpf_probe_read(), where the register then becomes unknown at
    verification time due to adding a non-constant offset to it. An
    access sequence may look like the following:
    
      offset = args->filename;  /* field __data_loc filename */
      bpf_probe_read(&dst, len, (char *)args + offset); // args is ctx
    
    There are two options: i) we could special case the ctx and as
    soon as we add a constant or bounded offset to it (hence ctx type
    wouldn't change) we could turn the ctx into an unknown scalar, or
    ii) we generalize the sanity test for ctx member access into a
    small helper and assert it on the ctx register that was passed
    as a function argument. Fwiw, latter is more obvious and less
    complex at the same time, and one case that may potentially be
    legitimate in future for ctx member access at least would be for
    ctx to carry a const offset. Therefore, fix follows approach
    from ii) and adds test cases to BPF kselftests.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Reported-by: syzbot+3d0b2441dbb71751615e@syzkaller.appspotmail.com
    Reported-by: syzbot+c8504affd4fdd0c1b626@syzkaller.appspotmail.com
    Reported-by: syzbot+e5190cb881d8660fb1a3@syzkaller.appspotmail.com
    Reported-by: syzbot+efae31b384d5badbd620@syzkaller.appspotmail.com
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commit 11ff7288beb2b7da889a014aff0a7b80bf8efcf3
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jun 6 12:14:56 2018 +0200

    netfilter: ebtables: reject non-bridge targets
    
    the ebtables evaluation loop expects targets to return
    positive values (jumps), or negative values (absolute verdicts).
    
    This is completely different from what xtables does.
    In xtables, targets are expected to return the standard netfilter
    verdicts, i.e. NF_DROP, NF_ACCEPT, etc.
    
    ebtables will consider these as jumps.
    
    Therefore reject any target found due to unspec fallback.
    v2: also reject watchers.  ebtables ignores their return value, so
    a target that assumes skb ownership (and returns NF_STOLEN) causes
    use-after-free.
    
    The only watchers in the 'ebtables' front-end are log and nflog;
    both have AF_BRIDGE specific wrappers on kernel side.
    
    Reported-by: syzbot+2b43f681169a2a0d306a@syzkaller.appspotmail.com
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 3602207ca6582dd359308b7bd2ce08348cc0854e
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Mon Jun 4 19:43:38 2018 -0600

    net: qualcomm: rmnet: Fix use after free while sending command ack
    
    When sending an ack to a command packet, the skb is still referenced
    after it is sent to the real device. Since the real device could
    free the skb, the device pointer would be invalid.
    Also, remove an unnecessary variable.
    
    Fixes: ceed73a2cf4a ("drivers: net: ethernet: qualcomm: rmnet: Initial implementation")
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f7225172f25aaf0dfd9ad65f05be8da5d6108b12
Author: David Ahern <dsahern@gmail.com>
Date:   Mon Jun 4 13:41:42 2018 -0700

    net/ipv6: prevent use after free in ip6_route_mpath_notify
    
    syzbot reported a use-after-free:
    
    BUG: KASAN: use-after-free in ip6_route_mpath_notify+0xe9/0x100 net/ipv6/route.c:4180
    Read of size 4 at addr ffff8801bf789cf0 by task syz-executor756/4555
    
    CPU: 1 PID: 4555 Comm: syz-executor756 Not tainted 4.17.0-rc7+ #78
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:432
     ip6_route_mpath_notify+0xe9/0x100 net/ipv6/route.c:4180
     ip6_route_multipath_add+0x615/0x1910 net/ipv6/route.c:4303
     inet6_rtm_newroute+0xe3/0x160 net/ipv6/route.c:4391
     ...
    
    Allocated by task 4555:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x760 mm/slab.c:3554
     dst_alloc+0xbb/0x1d0 net/core/dst.c:104
     __ip6_dst_alloc+0x35/0xa0 net/ipv6/route.c:361
     ip6_dst_alloc+0x29/0xb0 net/ipv6/route.c:376
     ip6_route_info_create+0x4d4/0x3a30 net/ipv6/route.c:2834
     ip6_route_multipath_add+0xc7e/0x1910 net/ipv6/route.c:4240
     inet6_rtm_newroute+0xe3/0x160 net/ipv6/route.c:4391
     ...
    
    Freed by task 4555:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x86/0x2d0 mm/slab.c:3756
     dst_destroy+0x267/0x3c0 net/core/dst.c:140
     dst_release_immediate+0x71/0x9e net/core/dst.c:205
     fib6_add+0xa40/0x1650 net/ipv6/ip6_fib.c:1305
     __ip6_ins_rt+0x6c/0x90 net/ipv6/route.c:1011
     ip6_route_multipath_add+0x513/0x1910 net/ipv6/route.c:4267
     inet6_rtm_newroute+0xe3/0x160 net/ipv6/route.c:4391
     ...
    
    The problem is that rt_last can point to a deleted route if the insert
    fails.
    
    One reproducer is to insert a route and then add a multipath route that
    has a duplicate nexthop.e.g,:
        $ ip -6 ro add vrf red 2001:db8:101::/64 nexthop via 2001:db8:1::2
        $ ip -6 ro append vrf red 2001:db8:101::/64 nexthop via 2001:db8:1::4 nexthop via 2001:db8:1::2
    
    Fix by not setting rt_last until the it is verified the insert succeeded.
    
    Fixes: 3b1137fe7482 ("net: ipv6: Change notifications for multipath add to RTA_MULTIPATH")
    Cc: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73fb0949cf246b212ff63d692a0ec88db954bb35
Author: Luis Henriques <lhenriques@suse.com>
Date:   Mon May 28 18:37:40 2018 +0100

    ceph: fix use-after-free in ceph_statfs()
    
    KASAN found an UAF in ceph_statfs.  This was a one-off bug but looking at
    the code it looks like the monmap access needs to be protected as it can
    be modified while we're accessing it.  Fix this by protecting the access
    with the monc->mutex.
    
      BUG: KASAN: use-after-free in ceph_statfs+0x21d/0x2c0
      Read of size 8 at addr ffff88006844f2e0 by task trinity-c5/304
    
      CPU: 0 PID: 304 Comm: trinity-c5 Not tainted 4.17.0-rc6+ #172
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
      Call Trace:
       dump_stack+0xa5/0x11b
       ? show_regs_print_info+0x5/0x5
       ? kmsg_dump_rewind+0x118/0x118
       ? ceph_statfs+0x21d/0x2c0
       print_address_description+0x73/0x2b0
       ? ceph_statfs+0x21d/0x2c0
       kasan_report+0x243/0x360
       ceph_statfs+0x21d/0x2c0
       ? ceph_umount_begin+0x80/0x80
       ? kmem_cache_alloc+0xdf/0x1a0
       statfs_by_dentry+0x79/0xb0
       vfs_statfs+0x28/0x110
       user_statfs+0x8c/0xe0
       ? vfs_statfs+0x110/0x110
       ? __fdget_raw+0x10/0x10
       __se_sys_statfs+0x5d/0xa0
       ? user_statfs+0xe0/0xe0
       ? mutex_unlock+0x1d/0x40
       ? __x64_sys_statfs+0x20/0x30
       do_syscall_64+0xee/0x290
       ? syscall_return_slowpath+0x1c0/0x1c0
       ? page_fault+0x1e/0x30
       ? syscall_return_slowpath+0x13c/0x1c0
       ? prepare_exit_to_usermode+0xdb/0x140
       ? syscall_trace_enter+0x330/0x330
       ? __put_user_4+0x1c/0x30
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      Allocated by task 130:
       __kmalloc+0x124/0x210
       ceph_monmap_decode+0x1c1/0x400
       dispatch+0x113/0xd20
       ceph_con_workfn+0xa7e/0x44e0
       process_one_work+0x5f0/0xa30
       worker_thread+0x184/0xa70
       kthread+0x1a0/0x1c0
       ret_from_fork+0x35/0x40
    
      Freed by task 130:
       kfree+0xb8/0x210
       dispatch+0x15a/0xd20
       ceph_con_workfn+0xa7e/0x44e0
       process_one_work+0x5f0/0xa30
       worker_thread+0x184/0xa70
       kthread+0x1a0/0x1c0
       ret_from_fork+0x35/0x40
    
    Signed-off-by: Luis Henriques <lhenriques@suse.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 6001567c14eb8e93f8bceb35fc02158a3e1f20f8
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue May 22 16:26:51 2018 +0200

    libceph: avoid a use-after-free during map check
    
    Sending map check after complete_request() was called is not only
    useless, but can lead to a use-after-free as req->r_kref decrement in
    __complete_request() races with map check code.
    
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Acked-by: Jeff Layton <jlayton@redhat.com>
    Reviewed-by: "Yan, Zheng" <zyan@redhat.com>

commit cb2595c1393b4a5211534e6f0a0fbad369e21ad8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Jun 1 11:31:44 2018 -0700

    infiniband: fix a possible use-after-free bug
    
    ucma_process_join() will free the new allocated "mc" struct,
    if there is any error after that, especially the copy_to_user().
    
    But in parallel, ucma_leave_multicast() could find this "mc"
    through idr_find() before ucma_process_join() frees it, since it
    is already published.
    
    So "mc" could be used in ucma_leave_multicast() after it is been
    allocated and freed in ucma_process_join(), since we don't refcnt
    it.
    
    Fix this by separating "publish" from ID allocation, so that we
    can get an ID first and publish it later after copy_to_user().
    
    Fixes: c8f6a362bf3e ("RDMA/cma: Add multicast communication support")
    Reported-by: Noam Rathaus <noamr@beyondsecurity.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit eb73190f4fbeedf762394e92d6a4ec9ace684c88
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 1 09:23:02 2018 -0700

    net/packet: refine check for priv area size
    
    syzbot was able to trick af_packet again [1]
    
    Various commits tried to address the problem in the past,
    but failed to take into account V3 header size.
    
    [1]
    
    tpacket_rcv: packet too big, clamped from 72 to 4294967224. macoff=96
    BUG: KASAN: use-after-free in prb_run_all_ft_ops net/packet/af_packet.c:1016 [inline]
    BUG: KASAN: use-after-free in prb_fill_curr_block.isra.59+0x4e5/0x5c0 net/packet/af_packet.c:1039
    Write of size 2 at addr ffff8801cb62000e by task kworker/1:2/2106
    
    CPU: 1 PID: 2106 Comm: kworker/1:2 Not tainted 4.17.0-rc7+ #77
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: ipv6_addrconf addrconf_dad_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_store2_noabort+0x17/0x20 mm/kasan/report.c:436
     prb_run_all_ft_ops net/packet/af_packet.c:1016 [inline]
     prb_fill_curr_block.isra.59+0x4e5/0x5c0 net/packet/af_packet.c:1039
     __packet_lookup_frame_in_block net/packet/af_packet.c:1094 [inline]
     packet_current_rx_frame net/packet/af_packet.c:1117 [inline]
     tpacket_rcv+0x1866/0x3340 net/packet/af_packet.c:2282
     dev_queue_xmit_nit+0x891/0xb90 net/core/dev.c:2018
     xmit_one net/core/dev.c:3049 [inline]
     dev_hard_start_xmit+0x16b/0xc10 net/core/dev.c:3069
     __dev_queue_xmit+0x2724/0x34c0 net/core/dev.c:3584
     dev_queue_xmit+0x17/0x20 net/core/dev.c:3617
     neigh_resolve_output+0x679/0xad0 net/core/neighbour.c:1358
     neigh_output include/net/neighbour.h:482 [inline]
     ip6_finish_output2+0xc9c/0x2810 net/ipv6/ip6_output.c:120
     ip6_finish_output+0x5fe/0xbc0 net/ipv6/ip6_output.c:154
     NF_HOOK_COND include/linux/netfilter.h:277 [inline]
     ip6_output+0x227/0x9b0 net/ipv6/ip6_output.c:171
     dst_output include/net/dst.h:444 [inline]
     NF_HOOK include/linux/netfilter.h:288 [inline]
     ndisc_send_skb+0x100d/0x1570 net/ipv6/ndisc.c:491
     ndisc_send_ns+0x3c1/0x8d0 net/ipv6/ndisc.c:633
     addrconf_dad_work+0xbef/0x1340 net/ipv6/addrconf.c:4033
     process_one_work+0xc1e/0x1b50 kernel/workqueue.c:2145
     worker_thread+0x1cc/0x1440 kernel/workqueue.c:2279
     kthread+0x345/0x410 kernel/kthread.c:240
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    The buggy address belongs to the page:
    page:ffffea00072d8800 count:0 mapcount:-127 mapping:0000000000000000 index:0xffff8801cb620e80
    flags: 0x2fffc0000000000()
    raw: 02fffc0000000000 0000000000000000 ffff8801cb620e80 00000000ffffff80
    raw: ffffea00072e3820 ffffea0007132d20 0000000000000002 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801cb61ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff8801cb61ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff8801cb620000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                          ^
     ffff8801cb620080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8801cb620100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    Fixes: 2b6867c2ce76 ("net/packet: fix overflow in check for priv area size")
    Fixes: dc808110bb62 ("packet: handle too big packets for PACKET_V3")
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      bpf: fix uapi hole for 32 bit compat applications
      net: usb: cdc_mbim: add flag FLAG_SEND_ZLP
      ip6_tunnel: remove magic mtu value 0xFFF8
      ip_tunnel: restore binding to ifaces with a large mtu
      net: dsa: b53: Add BCM5389 support
      kcm: Fix use-after-free caused by clonned sockets
      net-sysfs: Fix memory leak in XPS configuration
      ixgbe: fix parsing of TC actions for HW offload
      net: ethernet: davinci_emac: fix error handling in probe()
      net/ncsi: Fix array size in dumpit handler
      cls_flower: Fix incorrect idr release when failing to modify rule
      net/sonic: Use dma_mapping_error()
      xfrm Fix potential error pointer dereference in xfrm_bundle_create.
      vhost_net: flush batched heads before trying to busy polling
      tun: Fix NULL pointer dereference in XDP redirect
      be2net: Fix error detection logic for BE3
      net: qmi_wwan: Add Netgear Aircard 779S
      mlxsw: spectrum: Forbid creation of VLAN 1 over port/LAG
      atm: zatm: fix memcmp casting
      iwlwifi: pcie: compare with number of IRQs requested for, not number of CPUs
      ...

commit eb7f54b90bd8f469834c5e86dcf72ebf9a629811
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Fri Jun 1 14:30:38 2018 +0300

    kcm: Fix use-after-free caused by clonned sockets
    
    (resend for properly queueing in patchwork)
    
    kcm_clone() creates kernel socket, which does not take net counter.
    Thus, the net may die before the socket is completely destructed,
    i.e. kcm_exit_net() is executed before kcm_done().
    
    Reported-by: syzbot+5f1a04e374a635efc426@syzkaller.appspotmail.com
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 543b8f8662fe6d21f19958b666ab0051af9db21a
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Tue May 1 13:12:14 2018 +0900

    fuse: don't keep dead fuse_conn at fuse_fill_super().
    
    syzbot is reporting use-after-free at fuse_kill_sb_blk() [1].
    Since sb->s_fs_info field is not cleared after fc was released by
    fuse_conn_put() when initialization failed, fuse_kill_sb_blk() finds
    already released fc and tries to hold the lock. Fix this by clearing
    sb->s_fs_info field after calling fuse_conn_put().
    
    [1] https://syzkaller.appspot.com/bug?id=a07a680ed0a9290585ca424546860464dd9658db
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+ec3986119086fe4eec97@syzkaller.appspotmail.com>
    Fixes: 3b463ae0c626 ("fuse: invalidation reverse calls")
    Cc: John Muir <john@jmuir.com>
    Cc: Csaba Henk <csaba@gluster.com>
    Cc: Anand Avati <avati@redhat.com>
    Cc: <stable@vger.kernel.org> # v2.6.31
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit bbb40a0b75209734ff9286f3326171638c9f6569
Author: Mathieu Xhonneux <m.xhonneux@gmail.com>
Date:   Fri May 25 13:29:41 2018 +0100

    ipv6: sr: fix memory OOB access in seg6_do_srh_encap/inline
    
    seg6_do_srh_encap and seg6_do_srh_inline can possibly do an
    out-of-bounds access when adding the SRH to the packet. This no longer
    happen when expanding the skb not only by the size of the SRH (+
    outer IPv6 header), but also by skb->mac_len.
    
    [   53.793056] BUG: KASAN: use-after-free in seg6_do_srh_encap+0x284/0x620
    [   53.794564] Write of size 14 at addr ffff88011975ecfa by task ping/674
    
    [   53.796665] CPU: 0 PID: 674 Comm: ping Not tainted 4.17.0-rc3-ARCH+ #90
    [   53.796670] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
    BIOS 1.11.0-20171110_100015-anatol 04/01/2014
    [   53.796673] Call Trace:
    [   53.796679]  <IRQ>
    [   53.796689]  dump_stack+0x71/0xab
    [   53.796700]  print_address_description+0x6a/0x270
    [   53.796707]  kasan_report+0x258/0x380
    [   53.796715]  ? seg6_do_srh_encap+0x284/0x620
    [   53.796722]  memmove+0x34/0x50
    [   53.796730]  seg6_do_srh_encap+0x284/0x620
    [   53.796741]  ? seg6_do_srh+0x29b/0x360
    [   53.796747]  seg6_do_srh+0x29b/0x360
    [   53.796756]  seg6_input+0x2e/0x2e0
    [   53.796765]  lwtunnel_input+0x93/0xd0
    [   53.796774]  ipv6_rcv+0x690/0x920
    [   53.796783]  ? ip6_input+0x170/0x170
    [   53.796791]  ? eth_gro_receive+0x2d0/0x2d0
    [   53.796800]  ? ip6_input+0x170/0x170
    [   53.796809]  __netif_receive_skb_core+0xcc0/0x13f0
    [   53.796820]  ? netdev_info+0x110/0x110
    [   53.796827]  ? napi_complete_done+0xb6/0x170
    [   53.796834]  ? e1000_clean+0x6da/0xf70
    [   53.796845]  ? process_backlog+0x129/0x2a0
    [   53.796853]  process_backlog+0x129/0x2a0
    [   53.796862]  net_rx_action+0x211/0x5c0
    [   53.796870]  ? napi_complete_done+0x170/0x170
    [   53.796887]  ? run_rebalance_domains+0x11f/0x150
    [   53.796891]  __do_softirq+0x10e/0x39e
    [   53.796894]  do_softirq_own_stack+0x2a/0x40
    [   53.796895]  </IRQ>
    [   53.796898]  do_softirq.part.16+0x54/0x60
    [   53.796900]  __local_bh_enable_ip+0x5b/0x60
    [   53.796903]  ip6_finish_output2+0x416/0x9f0
    [   53.796906]  ? ip6_dst_lookup_flow+0x110/0x110
    [   53.796909]  ? ip6_sk_dst_lookup_flow+0x390/0x390
    [   53.796911]  ? __rcu_read_unlock+0x66/0x80
    [   53.796913]  ? ip6_mtu+0x44/0xf0
    [   53.796916]  ? ip6_output+0xfc/0x220
    [   53.796918]  ip6_output+0xfc/0x220
    [   53.796921]  ? ip6_finish_output+0x2b0/0x2b0
    [   53.796923]  ? memcpy+0x34/0x50
    [   53.796926]  ip6_send_skb+0x43/0xc0
    [   53.796929]  rawv6_sendmsg+0x1216/0x1530
    [   53.796932]  ? __orc_find+0x6b/0xc0
    [   53.796934]  ? rawv6_rcv_skb+0x160/0x160
    [   53.796937]  ? __rcu_read_unlock+0x66/0x80
    [   53.796939]  ? __rcu_read_unlock+0x66/0x80
    [   53.796942]  ? is_bpf_text_address+0x1e/0x30
    [   53.796944]  ? kernel_text_address+0xec/0x100
    [   53.796946]  ? __kernel_text_address+0xe/0x30
    [   53.796948]  ? unwind_get_return_address+0x2f/0x50
    [   53.796950]  ? __save_stack_trace+0x92/0x100
    [   53.796954]  ? save_stack+0x89/0xb0
    [   53.796956]  ? kasan_kmalloc+0xa0/0xd0
    [   53.796958]  ? kmem_cache_alloc+0xd2/0x1f0
    [   53.796961]  ? prepare_creds+0x23/0x160
    [   53.796963]  ? __x64_sys_capset+0x252/0x3e0
    [   53.796966]  ? do_syscall_64+0x69/0x160
    [   53.796968]  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   53.796971]  ? __alloc_pages_nodemask+0x170/0x380
    [   53.796973]  ? __alloc_pages_slowpath+0x12c0/0x12c0
    [   53.796977]  ? tty_vhangup+0x20/0x20
    [   53.796979]  ? policy_nodemask+0x1a/0x90
    [   53.796982]  ? __mod_node_page_state+0x8d/0xa0
    [   53.796986]  ? __check_object_size+0xe7/0x240
    [   53.796989]  ? __sys_sendto+0x229/0x290
    [   53.796991]  ? rawv6_rcv_skb+0x160/0x160
    [   53.796993]  __sys_sendto+0x229/0x290
    [   53.796996]  ? __ia32_sys_getpeername+0x50/0x50
    [   53.796999]  ? commit_creds+0x2de/0x520
    [   53.797002]  ? security_capset+0x57/0x70
    [   53.797004]  ? __x64_sys_capset+0x29f/0x3e0
    [   53.797007]  ? __x64_sys_rt_sigsuspend+0xe0/0xe0
    [   53.797011]  ? __do_page_fault+0x664/0x770
    [   53.797014]  __x64_sys_sendto+0x74/0x90
    [   53.797017]  do_syscall_64+0x69/0x160
    [   53.797019]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   53.797022] RIP: 0033:0x7f43b7a6714a
    [   53.797023] RSP: 002b:00007ffd891bd368 EFLAGS: 00000246 ORIG_RAX:
    000000000000002c
    [   53.797026] RAX: ffffffffffffffda RBX: 00000000006129c0 RCX: 00007f43b7a6714a
    [   53.797028] RDX: 0000000000000040 RSI: 00000000006129c0 RDI: 0000000000000004
    [   53.797029] RBP: 00007ffd891be640 R08: 0000000000610940 R09: 000000000000001c
    [   53.797030] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
    [   53.797032] R13: 000000000060e6a0 R14: 0000000000008004 R15: 000000000040b661
    
    [   53.797171] Allocated by task 642:
    [   53.797460]  kasan_kmalloc+0xa0/0xd0
    [   53.797463]  kmem_cache_alloc+0xd2/0x1f0
    [   53.797465]  getname_flags+0x40/0x210
    [   53.797467]  user_path_at_empty+0x1d/0x40
    [   53.797469]  do_faccessat+0x12a/0x320
    [   53.797471]  do_syscall_64+0x69/0x160
    [   53.797473]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [   53.797607] Freed by task 642:
    [   53.797869]  __kasan_slab_free+0x130/0x180
    [   53.797871]  kmem_cache_free+0xa8/0x230
    [   53.797872]  filename_lookup+0x15b/0x230
    [   53.797874]  do_faccessat+0x12a/0x320
    [   53.797876]  do_syscall_64+0x69/0x160
    [   53.797878]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    [   53.798014] The buggy address belongs to the object at ffff88011975e600
                    which belongs to the cache names_cache of size 4096
    [   53.799043] The buggy address is located 1786 bytes inside of
                    4096-byte region [ffff88011975e600, ffff88011975f600)
    [   53.800013] The buggy address belongs to the page:
    [   53.800414] page:ffffea000465d600 count:1 mapcount:0
    mapping:0000000000000000 index:0x0 compound_mapcount: 0
    [   53.801259] flags: 0x17fff0000008100(slab|head)
    [   53.801640] raw: 017fff0000008100 0000000000000000 0000000000000000
    0000000100070007
    [   53.803147] raw: dead000000000100 dead000000000200 ffff88011b185a40
    0000000000000000
    [   53.803787] page dumped because: kasan: bad access detected
    
    [   53.804384] Memory state around the buggy address:
    [   53.804788]  ffff88011975eb80: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [   53.805384]  ffff88011975ec00: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [   53.805979] >ffff88011975ec80: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [   53.806577]                                                                 ^
    [   53.807165]  ffff88011975ed00: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [   53.807762]  ffff88011975ed80: fb fb fb fb fb fb fb fb fb fb fb fb
    fb fb fb fb
    [   53.808356] ==================================================================
    [   53.808949] Disabling lock debugging due to kernel taint
    
    Fixes: 6c8702c60b88 ("ipv6: sr: add support for SRH encapsulation and injection with lwtunnels")
    Signed-off-by: David Lebrun <dlebrun@google.com>
    Signed-off-by: Mathieu Xhonneux <m.xhonneux@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6992effe5344ceba1c53fd1a062df57e820b27cd
Author: Ezequiel Garcia <ezequiel@collabora.com>
Date:   Wed May 23 16:13:48 2018 -0400

    media: gspca: Kill all URBs before releasing any of them
    
    Some subdrivers access the gspca_dev->urb array in the completion handler.
    To prevent use-after-free (actually, NULL dereferences) we need to
    synchronously kill all the URBs before we release them.
    
    In particular, this is currently the case for drivers such
    as sn9c20x and sonixj, which access the gspca_dev->urb[0]
    in the context of completion handler for *any* of the URBs.
    
    This commit changes the destroy_urb implementation, so it kills
    all URBs first, and then proceed to set the URBs to NULL in the
    array and release them.
    
    Signed-off-by: Ezequiel Garcia <ezequiel@collabora.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 75cb857d2618cca810b8bf13ba5b2ceaaf26ba3d
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri May 11 13:35:27 2018 +0800

    btrfs: Do super block verification before writing it to disk
    
    There are already 2 reports about strangely corrupted super blocks,
    where csum still matches but extra garbage gets slipped into super block.
    
    The corruption would looks like:
    ------
    superblock: bytenr=65536, device=/dev/sdc1
    ---------------------------------------------------------
    csum_type               41700 (INVALID)
    csum                    0x3b252d3a [match]
    bytenr                  65536
    flags                   0x1
                            ( WRITTEN )
    magic                   _BHRfS_M [match]
    ...
    incompat_flags          0x5b22400000000169
                            ( MIXED_BACKREF |
                              COMPRESS_LZO |
                              BIG_METADATA |
                              EXTENDED_IREF |
                              SKINNY_METADATA |
                              unknown flag: 0x5b22400000000000 )
    ...
    ------
    Or
    ------
    superblock: bytenr=65536, device=/dev/mapper/x
    ---------------------------------------------------------
    csum_type              35355 (INVALID)
    csum_size              32
    csum                   0xf0dbeddd [match]
    bytenr                 65536
    flags                  0x1
                           ( WRITTEN )
    magic                  _BHRfS_M [match]
    ...
    incompat_flags         0x176d200000000169
                           ( MIXED_BACKREF |
                             COMPRESS_LZO |
                             BIG_METADATA |
                             EXTENDED_IREF |
                             SKINNY_METADATA |
                             unknown flag: 0x176d200000000000 )
    ------
    
    Obviously, csum_type and incompat_flags get some garbage, but its csum
    still matches, which means kernel calculates the csum based on corrupted
    super block memory.
    And after manually fixing these values, the filesystem is completely
    healthy without any problem exposed by btrfs check.
    
    Although the cause is still unknown, at least detect it and prevent further
    corruption.
    
    Both reports have same symptoms, there's an overwrite on offset 192 of
    the superblock, by 4 bytes. The superblock structure is not allocated or
    freed and stays in the memory for the whole filesystem lifetime, so it's
    not a use-after-free kind of error on someone else's leaked page.
    
    As a vague point for the problable cause is mentioning of other system
    freezing related to graphic card drivers.
    
    Reported-by: Ken Swenson <flat@imo.uto.moe>
    Reported-by: Ben Parsons <9parsonsb@gmail.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add brief analysis of the reports ]
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 2e050f00a0f0e07467050cb4afae0234941e5bf3
Author: Jianchao Wang <jianchao.w.wang@oracle.com>
Date:   Thu May 24 09:27:38 2018 +0800

    nvme-rdma: stop admin queue before freeing it
    
    For any failure after nvme_rdma_start_queue in
    nvme_rdma_configure_admin_queue, the admin queue will be freed with the
    NVME_RDMA_Q_LIVE flag still set.  Once nvme_rdma_stop_queue is invoked,
    that will cause a use-after-free.
    BUG: KASAN: use-after-free in rdma_disconnect+0x1f/0xe0 [rdma_cm]
    
    To fix it, call nvme_rdma_stop_queue for all the failed cases after
    nvme_rdma_start_queue.
    
    Signed-off-by: Jianchao Wang <jianchao.w.wang@oracle.com>
    Suggested-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit af8d3c7c001ae7df1ed2b2715f058113efc86187
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed May 23 14:37:38 2018 -0700

    ppp: remove the PPPIOCDETACH ioctl
    
    The PPPIOCDETACH ioctl effectively tries to "close" the given ppp file
    before f_count has reached 0, which is fundamentally a bad idea.  It
    does check 'f_count < 2', which excludes concurrent operations on the
    file since they would only be possible with a shared fd table, in which
    case each fdget() would take a file reference.  However, it fails to
    account for the fact that even with 'f_count == 1' the file can still be
    linked into epoll instances.  As reported by syzbot, this can trivially
    be used to cause a use-after-free.
    
    Yet, the only known user of PPPIOCDETACH is pppd versions older than
    ppp-2.4.2, which was released almost 15 years ago (November 2003).
    Also, PPPIOCDETACH apparently stopped working reliably at around the
    same time, when the f_count check was added to the kernel, e.g. see
    https://lkml.org/lkml/2002/12/31/83.  Also, the current 'f_count < 2'
    check makes PPPIOCDETACH only work in single-threaded applications; it
    always fails if called from a multithreaded application.
    
    All pppd versions released in the last 15 years just close() the file
    descriptor instead.
    
    Therefore, instead of hacking around this bug by exporting epoll
    internals to modules, and probably missing other related bugs, just
    remove the PPPIOCDETACH ioctl and see if anyone actually notices.  Leave
    a stub in place that prints a one-time warning and returns EINVAL.
    
    Reported-by: syzbot+16363c99d4134717c05b@syzkaller.appspotmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Paul Mackerras <paulus@ozlabs.org>
    Reviewed-by: Guillaume Nault <g.nault@alphalink.fr>
    Tested-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2677d20677314101293e6da0094ede7b5526d2b1
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Mon May 21 19:28:44 2018 +0300

    dccp: don't free ccid2_hc_tx_sock struct in dccp_disconnect()
    
    Syzbot reported the use-after-free in timer_is_static_object() [1].
    
    This can happen because the structure for the rto timer (ccid2_hc_tx_sock)
    is removed in dccp_disconnect(), and ccid2_hc_tx_rto_expire() can be
    called after that.
    
    The report [1] is similar to the one in commit 120e9dabaf55 ("dccp:
    defer ccid_hc_tx_delete() at dismantle time"). And the fix is the same,
    delay freeing ccid2_hc_tx_sock structure, so that it is freed in
    dccp_sk_destruct().
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in timer_is_static_object+0x80/0x90
    kernel/time/timer.c:607
    Read of size 8 at addr ffff8801bebb5118 by task syz-executor2/25299
    
    CPU: 1 PID: 25299 Comm: syz-executor2 Not tainted 4.17.0-rc5+ #54
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      <IRQ>
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x1b9/0x294 lib/dump_stack.c:113
      print_address_description+0x6c/0x20b mm/kasan/report.c:256
      kasan_report_error mm/kasan/report.c:354 [inline]
      kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
      __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
      timer_is_static_object+0x80/0x90 kernel/time/timer.c:607
      debug_object_activate+0x2d9/0x670 lib/debugobjects.c:508
      debug_timer_activate kernel/time/timer.c:709 [inline]
      debug_activate kernel/time/timer.c:764 [inline]
      __mod_timer kernel/time/timer.c:1041 [inline]
      mod_timer+0x4d3/0x13b0 kernel/time/timer.c:1102
      sk_reset_timer+0x22/0x60 net/core/sock.c:2742
      ccid2_hc_tx_rto_expire+0x587/0x680 net/dccp/ccids/ccid2.c:147
      call_timer_fn+0x230/0x940 kernel/time/timer.c:1326
      expire_timers kernel/time/timer.c:1363 [inline]
      __run_timers+0x79e/0xc50 kernel/time/timer.c:1666
      run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692
      __do_softirq+0x2e0/0xaf5 kernel/softirq.c:285
      invoke_softirq kernel/softirq.c:365 [inline]
      irq_exit+0x1d1/0x200 kernel/softirq.c:405
      exiting_irq arch/x86/include/asm/apic.h:525 [inline]
      smp_apic_timer_interrupt+0x17e/0x710 arch/x86/kernel/apic/apic.c:1052
      apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:863
      </IRQ>
    ...
    Allocated by task 25374:
      save_stack+0x43/0xd0 mm/kasan/kasan.c:448
      set_track mm/kasan/kasan.c:460 [inline]
      kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
      kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
      kmem_cache_alloc+0x12e/0x760 mm/slab.c:3554
      ccid_new+0x25b/0x3e0 net/dccp/ccid.c:151
      dccp_hdlr_ccid+0x27/0x150 net/dccp/feat.c:44
      __dccp_feat_activate+0x184/0x270 net/dccp/feat.c:344
      dccp_feat_activate_values+0x3a7/0x819 net/dccp/feat.c:1538
      dccp_create_openreq_child+0x472/0x610 net/dccp/minisocks.c:128
      dccp_v4_request_recv_sock+0x12c/0xca0 net/dccp/ipv4.c:408
      dccp_v6_request_recv_sock+0x125d/0x1f10 net/dccp/ipv6.c:415
      dccp_check_req+0x455/0x6a0 net/dccp/minisocks.c:197
      dccp_v4_rcv+0x7b8/0x1f3f net/dccp/ipv4.c:841
      ip_local_deliver_finish+0x2e3/0xd80 net/ipv4/ip_input.c:215
      NF_HOOK include/linux/netfilter.h:288 [inline]
      ip_local_deliver+0x1e1/0x720 net/ipv4/ip_input.c:256
      dst_input include/net/dst.h:450 [inline]
      ip_rcv_finish+0x81b/0x2200 net/ipv4/ip_input.c:396
      NF_HOOK include/linux/netfilter.h:288 [inline]
      ip_rcv+0xb70/0x143d net/ipv4/ip_input.c:492
      __netif_receive_skb_core+0x26f5/0x3630 net/core/dev.c:4592
      __netif_receive_skb+0x2c/0x1e0 net/core/dev.c:4657
      process_backlog+0x219/0x760 net/core/dev.c:5337
      napi_poll net/core/dev.c:5735 [inline]
      net_rx_action+0x7b7/0x1930 net/core/dev.c:5801
      __do_softirq+0x2e0/0xaf5 kernel/softirq.c:285
    
    Freed by task 25374:
      save_stack+0x43/0xd0 mm/kasan/kasan.c:448
      set_track mm/kasan/kasan.c:460 [inline]
      __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
      kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
      __cache_free mm/slab.c:3498 [inline]
      kmem_cache_free+0x86/0x2d0 mm/slab.c:3756
      ccid_hc_tx_delete+0xc3/0x100 net/dccp/ccid.c:190
      dccp_disconnect+0x130/0xc66 net/dccp/proto.c:286
      dccp_close+0x3bc/0xe60 net/dccp/proto.c:1045
      inet_release+0x104/0x1f0 net/ipv4/af_inet.c:427
      inet6_release+0x50/0x70 net/ipv6/af_inet6.c:460
      sock_release+0x96/0x1b0 net/socket.c:594
      sock_close+0x16/0x20 net/socket.c:1149
      __fput+0x34d/0x890 fs/file_table.c:209
      ____fput+0x15/0x20 fs/file_table.c:243
      task_work_run+0x1e4/0x290 kernel/task_work.c:113
      tracehook_notify_resume include/linux/tracehook.h:191 [inline]
      exit_to_usermode_loop+0x2bd/0x310 arch/x86/entry/common.c:166
      prepare_exit_to_usermode arch/x86/entry/common.c:196 [inline]
      syscall_return_slowpath arch/x86/entry/common.c:265 [inline]
      do_syscall_64+0x6ac/0x800 arch/x86/entry/common.c:290
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801bebb4cc0
      which belongs to the cache ccid2_hc_tx_sock of size 1240
    The buggy address is located 1112 bytes inside of
      1240-byte region [ffff8801bebb4cc0, ffff8801bebb5198)
    The buggy address belongs to the page:
    page:ffffea0006faed00 count:1 mapcount:0 mapping:ffff8801bebb41c0
    index:0xffff8801bebb5240 compound_mapcount: 0
    flags: 0x2fffc0000008100(slab|head)
    raw: 02fffc0000008100 ffff8801bebb41c0 ffff8801bebb5240 0000000100000003
    raw: ffff8801cdba3138 ffffea0007634120 ffff8801cdbaab40 0000000000000000
    page dumped because: kasan: bad access detected
    ...
    ==================================================================
    
    Reported-by: syzbot+5d47e9ec91a6f15dbd6f@syzkaller.appspotmail.com
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      net: ip6_gre: fix tunnel metadata device sharing.
      cxgb4: fix offset in collecting TX rate limit info
      net: sched: red: avoid hashing NULL child
      sock_diag: fix use-after-free read in __sk_free
      sh_eth: Change platform check to CONFIG_ARCH_RENESAS
      net: dsa: Do not register devlink for unused ports
      net: Fix a bug in removing queues from XPS map
      bpf: fix truncated jump targets on heavy expansions
      bpf: parse and verdict prog attach may race with bpf map update
      bpf: sockmap update rollback on error can incorrectly dec prog refcnt
      net: test tailroom before appending to linear skb
      net: ip6_gre: Fix ip6erspan hlen calculation
      net: ip6_gre: Split up ip6gre_changelink()
      net: ip6_gre: Split up ip6gre_newlink()
      net: ip6_gre: Split up ip6gre_tnl_change()
      net: ip6_gre: Split up ip6gre_tnl_link_config()
      net: ip6_gre: Fix headroom request in ip6erspan_tunnel_xmit()
      net: ip6_gre: Request headroom in __gre6_xmit()
      selftests/bpf: check return value of fopen in test_verifier.c
      erspan: fix invalid erspan version.
      ...

commits)
      ARM: davinci: board-dm646x-evm: set VPIF capture card name
      ARM: davinci: board-dm646x-evm: pass correct I2C adapter id for VPIF
      ARM: davinci: dm646x: fix timer interrupt generation
      ARM: keystone: fix platform_domain_notifier array overrun
      arm64: dts: exynos: Fix interrupt type for I2S1 device on Exynos5433
      ARM: dts: imx51-zii-rdu1: fix touchscreen bindings
      firmware: arm_scmi: Use after free in scmi_create_protocol_device()
      ARM: dts: cygnus: fix irq type for arm global timer
      Revert "ARM: dts: logicpd-som-lv: Fix pinmux controller references"
      tee: check shm references are consistent in offset/size
      tee: shm: fix use-after-free via temporarily dropped reference
      ARM: dts: imx7s: Pass the 'fsl,sec-era' property
      ARM: dts: tegra20: Revert "Fix ULPI regression on Tegra20"
      ARM: dts: correct missing "compatible" entry for ti81xx SoCs
      ARM: OMAP1: ams-delta: fix deferred_fiq handler
      arm64: tegra: Make BCM89610 PHY interrupt as active low
      ARM: davinci: fix GPIO lookup for I2C
      ARM: dts: logicpd-som-lv: Fix pinmux controller references
      ARM: dts: logicpd-som-lv: Fix Audio Mute
      ARM: dts: logicpd-som-lv: Fix WL127x Startup Issues
      ...

commit 9709020c86f6bf8439ca3effc58cfca49a5de192
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri May 18 04:47:55 2018 -0700

    sock_diag: fix use-after-free read in __sk_free
    
    We must not call sock_diag_has_destroy_listeners(sk) on a socket
    that has no reference on net structure.
    
    BUG: KASAN: use-after-free in sock_diag_has_destroy_listeners include/linux/sock_diag.h:75 [inline]
    BUG: KASAN: use-after-free in __sk_free+0x329/0x340 net/core/sock.c:1609
    Read of size 8 at addr ffff88018a02e3a0 by task swapper/1/0
    
    CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.17.0-rc5+ #54
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     sock_diag_has_destroy_listeners include/linux/sock_diag.h:75 [inline]
     __sk_free+0x329/0x340 net/core/sock.c:1609
     sk_free+0x42/0x50 net/core/sock.c:1623
     sock_put include/net/sock.h:1664 [inline]
     reqsk_free include/net/request_sock.h:116 [inline]
     reqsk_put include/net/request_sock.h:124 [inline]
     inet_csk_reqsk_queue_drop_and_put net/ipv4/inet_connection_sock.c:672 [inline]
     reqsk_timer_handler+0xe27/0x10e0 net/ipv4/inet_connection_sock.c:739
     call_timer_fn+0x230/0x940 kernel/time/timer.c:1326
     expire_timers kernel/time/timer.c:1363 [inline]
     __run_timers+0x79e/0xc50 kernel/time/timer.c:1666
     run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692
     __do_softirq+0x2e0/0xaf5 kernel/softirq.c:285
     invoke_softirq kernel/softirq.c:365 [inline]
     irq_exit+0x1d1/0x200 kernel/softirq.c:405
     exiting_irq arch/x86/include/asm/apic.h:525 [inline]
     smp_apic_timer_interrupt+0x17e/0x710 arch/x86/kernel/apic/apic.c:1052
     apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:863
     </IRQ>
    RIP: 0010:native_safe_halt+0x6/0x10 arch/x86/include/asm/irqflags.h:54
    RSP: 0018:ffff8801d9ae7c38 EFLAGS: 00000282 ORIG_RAX: ffffffffffffff13
    RAX: dffffc0000000000 RBX: 1ffff1003b35cf8a RCX: 0000000000000000
    RDX: 1ffffffff11a30d0 RSI: 0000000000000001 RDI: ffffffff88d18680
    RBP: ffff8801d9ae7c38 R08: ffffed003b5e46c3 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000001
    R13: ffff8801d9ae7cf0 R14: ffffffff897bef20 R15: 0000000000000000
     arch_safe_halt arch/x86/include/asm/paravirt.h:94 [inline]
     default_idle+0xc2/0x440 arch/x86/kernel/process.c:354
     arch_cpu_idle+0x10/0x20 arch/x86/kernel/process.c:345
     default_idle_call+0x6d/0x90 kernel/sched/idle.c:93
     cpuidle_idle_call kernel/sched/idle.c:153 [inline]
     do_idle+0x395/0x560 kernel/sched/idle.c:262
     cpu_startup_entry+0x104/0x120 kernel/sched/idle.c:368
     start_secondary+0x426/0x5b0 arch/x86/kernel/smpboot.c:269
     secondary_startup_64+0xa5/0xb0 arch/x86/kernel/head_64.S:242
    
    Allocated by task 4557:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:490
     kmem_cache_alloc+0x12e/0x760 mm/slab.c:3554
     kmem_cache_zalloc include/linux/slab.h:691 [inline]
     net_alloc net/core/net_namespace.c:383 [inline]
     copy_net_ns+0x159/0x4c0 net/core/net_namespace.c:423
     create_new_namespaces+0x69d/0x8f0 kernel/nsproxy.c:107
     unshare_nsproxy_namespaces+0xc3/0x1f0 kernel/nsproxy.c:206
     ksys_unshare+0x708/0xf90 kernel/fork.c:2408
     __do_sys_unshare kernel/fork.c:2476 [inline]
     __se_sys_unshare kernel/fork.c:2474 [inline]
     __x64_sys_unshare+0x31/0x40 kernel/fork.c:2474
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 69:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kmem_cache_free+0x86/0x2d0 mm/slab.c:3756
     net_free net/core/net_namespace.c:399 [inline]
     net_drop_ns.part.14+0x11a/0x130 net/core/net_namespace.c:406
     net_drop_ns net/core/net_namespace.c:405 [inline]
     cleanup_net+0x6a1/0xb20 net/core/net_namespace.c:541
     process_one_work+0xc1e/0x1b50 kernel/workqueue.c:2145
     worker_thread+0x1cc/0x1440 kernel/workqueue.c:2279
     kthread+0x345/0x410 kernel/kthread.c:240
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:412
    
    The buggy address belongs to the object at ffff88018a02c140
     which belongs to the cache net_namespace of size 8832
    The buggy address is located 8800 bytes inside of
     8832-byte region [ffff88018a02c140, ffff88018a02e3c0)
    The buggy address belongs to the page:
    page:ffffea0006280b00 count:1 mapcount:0 mapping:ffff88018a02c140 index:0x0 compound_mapcount: 0
    flags: 0x2fffc0000008100(slab|head)
    raw: 02fffc0000008100 ffff88018a02c140 0000000000000000 0000000100000001
    raw: ffffea00062a1320 ffffea0006268020 ffff8801d9bdde40 0000000000000000
    page dumped because: kasan: bad access detected
    
    Fixes: b922622ec6ef ("sock_diag: don't broadcast kernel sockets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Craig Gallek <kraig@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 11e451e74050d9e9030581ce40337838acfcea5b
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue May 8 20:39:47 2018 +1000

    drm/nouveau: remove fence wait code from deferred client work handler
    
    Fences attached to deferred client work items now originate from channels
    belonging to the client, meaning we can be certain they've been signalled
    before we destroy a client.
    
    This closes a race that could happen if the dma_fence_wait_timeout() call
    didn't succeed.  When the fence was later signalled, a use-after-free was
    possible.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit fe816d0f1d4c31c4c31d42ca78a87660565fc800
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Fri Apr 27 12:21:53 2018 +0300

    btrfs: Fix delalloc inodes invalidation during transaction abort
    
    When a transaction is aborted btrfs_cleanup_transaction is called to
    cleanup all the various in-flight bits and pieces which migth be
    active. One of those is delalloc inodes - inodes which have dirty
    pages which haven't been persisted yet. Currently the process of
    freeing such delalloc inodes in exceptional circumstances such as
    transaction abort boiled down to calling btrfs_invalidate_inodes whose
    sole job is to invalidate the dentries for all inodes related to a
    root. This is in fact wrong and insufficient since such delalloc inodes
    will likely have pending pages or ordered-extents and will be linked to
    the sb->s_inode_list. This means that unmounting a btrfs instance with
    an aborted transaction could potentially lead inodes/their pages
    visible to the system long after their superblock has been freed. This
    in turn leads to a "use-after-free" situation once page shrink is
    triggered. This situation could be simulated by running generic/019
    which would cause such inodes to be left hanging, followed by
    generic/176 which causes memory pressure and page eviction which lead
    to touching the freed super block instance. This situation is
    additionally detected by the unmount code of VFS with the following
    message:
    
    "VFS: Busy inodes after unmount of Self-destruct in 5 seconds.  Have a nice day..."
    
    Additionally btrfs hits WARN_ON(!RB_EMPTY_ROOT(&root->inode_tree));
    in free_fs_root for the same reason.
    
    This patch aims to rectify the sitaution by doing the following:
    
    1. Change btrfs_destroy_delalloc_inodes so that it calls
    invalidate_inode_pages2 for every inode on the delalloc list, this
    ensures that all the pages of the inode are released. This function
    boils down to calling btrfs_releasepage. During test I observed cases
    where inodes on the delalloc list were having an i_count of 0, so this
    necessitates using igrab to be sure we are working on a non-freed inode.
    
    2. Since calling btrfs_releasepage might queue delayed iputs move the
    call out to btrfs_cleanup_transaction in btrfs_error_commit_super before
    calling run_delayed_iputs for the last time. This is necessary to ensure
    that delayed iputs are run.
    
    Note: this patch is tagged for 4.14 stable but the fix applies to older
    versions too but needs to be backported manually due to conflicts.
    
    CC: stable@vger.kernel.org # 4.14.x: 2b8773313494: btrfs: Split btrfs_del_delalloc_inode into 2 functions
    CC: stable@vger.kernel.org # 4.14.x
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add comment to igrab ]
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 8364da4751cf22201d74933d5e634176f44ed407
Author: Josef Bacik <jbacik@fb.com>
Date:   Wed May 16 14:51:17 2018 -0400

    nbd: fix nbd device deletion
    
    This fixes a use after free bug, we shouldn't be doing disk->queue right
    after we do del_gendisk(disk).  Save the queue and do the cleanup after
    the del_gendisk.
    
    Fixes: c6a4759ea0c9 ("nbd: add device refcounting")
    cc: stable@vger.kernel.org
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 7063efd33bb15abc0160347f89eb5aba6b7d000e
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed May 16 20:39:33 2018 +0800

    tuntap: fix use after free during release
    
    After commit b196d88aba8a ("tun: fix use after free for ptr_ring") we
    need clean up tx ring during release(). But unfortunately, it tries to
    do the cleanup blindly after socket were destroyed which will lead
    another use-after-free. Fix this by doing the cleanup before dropping
    the last reference of the socket in __tun_detach().
    
    Reported-by: Andrei Vagin <avagin@virtuozzo.com>
    Acked-by: Andrei Vagin <avagin@virtuozzo.com>
    Fixes: b196d88aba8a ("tun: fix use after free for ptr_ring")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c171654caa875919be3c533d3518da8be5be966e
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Tue May 15 17:57:23 2018 -0600

    usbip: usbip_host: fix bad unlock balance during stub_probe()
    
    stub_probe() calls put_busid_priv() in an error path when device isn't
    found in the busid_table. Fix it by making put_busid_priv() safe to be
    called with null struct bus_id_priv pointer.
    
    This problem happens when "usbip bind" is run without loading usbip_host
    driver and then running modprobe. The first failed bind attempt unbinds
    the device from the original driver and when usbip_host is modprobed,
    stub_probe() runs and doesn't find the device in its busid table and calls
    put_busid_priv(0 with null bus_id_priv pointer.
    
    usbip-host 3-10.2: 3-10.2 is not in match_busid table...  skip!
    
    [  367.359679] =====================================
    [  367.359681] WARNING: bad unlock balance detected!
    [  367.359683] 4.17.0-rc4+ #5 Not tainted
    [  367.359685] -------------------------------------
    [  367.359688] modprobe/2768 is trying to release lock (
    [  367.359689]
    ==================================================================
    [  367.359696] BUG: KASAN: null-ptr-deref in print_unlock_imbalance_bug+0x99/0x110
    [  367.359699] Read of size 8 at addr 0000000000000058 by task modprobe/2768
    
    [  367.359705] CPU: 4 PID: 2768 Comm: modprobe Not tainted 4.17.0-rc4+ #5
    
    Fixes: 22076557b07c ("usbip: usbip_host: fix NULL-ptr deref and use-after-free errors") in usb-linus
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22076557b07c12086eeb16b8ce2b0b735f7a27e7
Author: Shuah Khan (Samsung OSG) <shuah@kernel.org>
Date:   Mon May 14 20:49:58 2018 -0600

    usbip: usbip_host: fix NULL-ptr deref and use-after-free errors
    
    usbip_host updates device status without holding lock from stub probe,
    disconnect and rebind code paths. When multiple requests to import a
    device are received, these unprotected code paths step all over each
    other and drive fails with NULL-ptr deref and use-after-free errors.
    
    The driver uses a table lock to protect the busid array for adding and
    deleting busids to the table. However, the probe, disconnect and rebind
    paths get the busid table entry and update the status without holding
    the busid table lock. Add a new finer grain lock to protect the busid
    entry. This new lock will be held to search and update the busid entry
    fields from get_busid_idx(), add_match_busid() and del_match_busid().
    
    match_busid_show() does the same to access the busid entry fields.
    
    get_busid_priv() changed to return the pointer to the busid entry holding
    the busid lock. stub_probe(), stub_disconnect() and stub_device_rebind()
    call put_busid_priv() to release the busid lock before returning. This
    changes fixes the unprotected code paths eliminating the race conditions
    in updating the busid entries.
    
    Reported-by: Jakub Jirasek
    Signed-off-by: Shuah Khan (Samsung OSG) <shuah@kernel.org>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b196d88aba8ac72b775137854121097f4c4c6862
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 11 10:49:25 2018 +0800

    tun: fix use after free for ptr_ring
    
    We used to initialize ptr_ring during TUNSETIFF, this is because its
    size depends on the tx_queue_len of netdevice. And we try to clean it
    up when socket were detached from netdevice. A race were spotted when
    trying to do uninit during a read which will lead a use after free for
    pointer ring. Solving this by always initialize a zero size ptr_ring
    in open() and do resizing during TUNSETIFF, and then we can safely do
    cleanup during close(). With this, there's no need for the workaround
    that was introduced by commit 4df0bfc79904 ("tun: fix a memory leak
    for tfile->tx_array").
    
    Reported-by: syzbot+e8b902c3c3fadf0a9dba@syzkaller.appspotmail.com
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Fixes: 1576d9860599 ("tun: switch to use skb array for tx")
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9594b5be7ec110ed11acec58fa94f3f293668c85
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon May 7 19:11:30 2018 +0200

    tty/serial: atmel: use port->name as name in request_irq()
    
    I was puzzled while looking at /proc/interrupts and random things showed
    up between reboots. This occurred more often but I realised it later. The
    "correct" output should be:
    |38:      11861  atmel-aic5   2 Level     ttyS0
    
    but I saw sometimes
    |38:       6426  atmel-aic5   2 Level     tty1
    
    and accounted it wrongly as correct. This is use after free and the
    former example randomly got the "old" pointer which pointed to the same
    content. With SLAB_FREELIST_RANDOM and HARDENED I even got
    |38:       7067  atmel-aic5   2 Level     E=Started User Manager for UID 0
    
    or other nonsense.
    As it turns out the tty, pointer that is accessed in atmel_startup(), is
    freed() before atmel_shutdown(). It seems to happen quite often that the
    tty for ttyS0 is allocated and freed while ->shutdown is not invoked. I
    don't do anything special - just a systemd boot :)
    
    Use dev_name(&pdev->dev) as the IRQ name for request_irq(). This exists
    as long as the driver is loaded so no use-after-free here.
    
    Cc: stable@vger.kernel.org
    Fixes: 761ed4a94582 ("tty: serial_core: convert uart_close to use tty_port_close")
    Acked-by: Richard Genoud <richard.genoud@gmail.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c81c24758ffbf17cf06c6835d361ffa57be2f0e
Author: Tadeusz Struk <tadeusz.struk@intel.com>
Date:   Wed May 9 11:55:35 2018 -0700

    tpm: fix use after free in tpm2_load_context()
    
    If load context command returns with TPM2_RC_HANDLE or TPM2_RC_REFERENCE_H0
    then we have use after free in line 114 and double free in 117.
    
    Fixes: 4d57856a21ed2 ("tpm2: add session handle context saving and restoring to the space code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off--by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>

commit 2278446e2b7cd33ad894b32e7eb63afc7db6c86e
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Mon May 14 11:57:23 2018 +0300

    xhci: Fix USB3 NULL pointer dereference at logical disconnect.
    
    Hub driver will try to disable a USB3 device twice at logical disconnect,
    racing with xhci_free_dev() callback from the first port disable.
    
    This can be triggered with "udisksctl power-off --block-device <disk>"
    or by writing "1" to the "remove" sysfs file for a USB3 device
    in 4.17-rc4.
    
    USB3 devices don't have a similar disabled link state as USB2 devices,
    and use a U3 suspended link state instead. In this state the port
    is still enabled and connected.
    
    hub_port_connect() first disconnects the device, then later it notices
    that device is still enabled (due to U3 states) it will try to disable
    the port again (set to U3).
    
    The xhci_free_dev() called during device disable is async, so checking
    for existing xhci->devs[i] when setting link state to U3 the second time
    was successful, even if device was being freed.
    
    The regression was caused by, and whole thing revealed by,
    Commit 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    which sets xhci->devs[i]->udev to NULL before xhci_virt_dev() returned.
    and causes a NULL pointer dereference the second time we try to set U3.
    
    Fix this by checking xhci->devs[i]->udev exists before setting link state.
    
    The original patch went to stable so this fix needs to be applied there as
    well.
    
    Fixes: 44a182b9d177 ("xhci: Fix use-after-free in xhci_free_virt_device")
    Cc: <stable@vger.kernel.org>
    Reported-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Tested-by: Jordan Glover <Golden_Miller83@protonmail.ch>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79f546a696bff2590169fb5684e23d65f4d9f591
Author: Dave Chinner <dchinner@redhat.com>
Date:   Fri May 11 11:20:57 2018 +1000

    fs: don't scan the inode cache before SB_BORN is set
    
    We recently had an oops reported on a 4.14 kernel in
    xfs_reclaim_inodes_count() where sb->s_fs_info pointed to garbage
    and so the m_perag_tree lookup walked into lala land.  It produces
    an oops down this path during the failed mount:
    
      radix_tree_gang_lookup_tag+0xc4/0x130
      xfs_perag_get_tag+0x37/0xf0
      xfs_reclaim_inodes_count+0x32/0x40
      xfs_fs_nr_cached_objects+0x11/0x20
      super_cache_count+0x35/0xc0
      shrink_slab.part.66+0xb1/0x370
      shrink_node+0x7e/0x1a0
      try_to_free_pages+0x199/0x470
      __alloc_pages_slowpath+0x3a1/0xd20
      __alloc_pages_nodemask+0x1c3/0x200
      cache_grow_begin+0x20b/0x2e0
      fallback_alloc+0x160/0x200
      kmem_cache_alloc+0x111/0x4e0
    
    The problem is that the superblock shrinker is running before the
    filesystem structures it depends on have been fully set up. i.e.
    the shrinker is registered in sget(), before ->fill_super() has been
    called, and the shrinker can call into the filesystem before
    fill_super() does it's setup work. Essentially we are exposed to
    both use-after-free and use-before-initialisation bugs here.
    
    To fix this, add a check for the SB_BORN flag in super_cache_count.
    In general, this flag is not set until ->fs_mount() completes
    successfully, so we know that it is set after the filesystem
    setup has completed. This matches the trylock_super() behaviour
    which will not let super_cache_scan() run if SB_BORN is not set, and
    hence will not allow the superblock shrinker from entering the
    filesystem while it is being set up or after it has failed setup
    and is being torn down.
    
    Cc: stable@kernel.org
    Signed-Off-By: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 6910e25de2257e2c82c7a2d126e3463cd8e50810
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu May 10 17:34:13 2018 +0800

    sctp: remove sctp_chunk_put from fail_mark err path in sctp_ulpevent_make_rcvmsg
    
    In Commit 1f45f78f8e51 ("sctp: allow GSO frags to access the chunk too"),
    it held the chunk in sctp_ulpevent_make_rcvmsg to access it safely later
    in recvmsg. However, it also added sctp_chunk_put in fail_mark err path,
    which is only triggered before holding the chunk.
    
    syzbot reported a use-after-free crash happened on this err path, where
    it shouldn't call sctp_chunk_put.
    
    This patch simply removes this call.
    
    Fixes: 1f45f78f8e51 ("sctp: allow GSO frags to access the chunk too")
    Reported-by: syzbot+141d898c5f24489db4aa@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f30721c517a9c8512da3bc8d909ff5e810c2b44
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed May 9 02:59:41 2018 +0200

    tipc: clean up removal of binding table items
    
    In commit be47e41d77fb ("tipc: fix use-after-free in tipc_nametbl_stop")
    we fixed a problem caused by premature release of service range items.
    
    That fix is correct, and solved the problem. However, it doesn't address
    the root of the problem, which is that we don't lookup the tipc_service
     -> service_range -> publication items in the correct hierarchical
    order.
    
    In this commit we try to make this right, and as a side effect obtain
    some code simplification.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit afca6c5b2595fc44383919fba740c194b0b76aff
Author: Dave Chinner <dchinner@redhat.com>
Date:   Tue Apr 17 17:17:34 2018 -0700

    xfs: validate cached inodes are free when allocated
    
    A recent fuzzed filesystem image cached random dcache corruption
    when the reproducer was run. This often showed up as panics in
    lookup_slow() on a null inode->i_ops pointer when doing pathwalks.
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000000
    ....
    Call Trace:
     lookup_slow+0x44/0x60
     walk_component+0x3dd/0x9f0
     link_path_walk+0x4a7/0x830
     path_lookupat+0xc1/0x470
     filename_lookup+0x129/0x270
     user_path_at_empty+0x36/0x40
     path_listxattr+0x98/0x110
     SyS_listxattr+0x13/0x20
     do_syscall_64+0xf5/0x280
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    but had many different failure modes including deadlocks trying to
    lock the inode that was just allocated or KASAN reports of
    use-after-free violations.
    
    The cause of the problem was a corrupt INOBT on a v4 fs where the
    root inode was marked as free in the inobt record. Hence when we
    allocated an inode, it chose the root inode to allocate, found it in
    the cache and re-initialised it.
    
    We recently fixed a similar inode allocation issue caused by inobt
    record corruption problem in xfs_iget_cache_miss() in commit
    ee457001ed6c ("xfs: catch inode allocation state mismatch
    corruption"). This change adds similar checks to the cache-hit path
    to catch it, and turns the reproducer into a corruption shutdown
    situation.
    
    Reported-by: Wen Xu <wen.xu@gatech.edu>
    Signed-Off-By: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    [darrick: fix typos in comment]
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit 82e9697250977f3f87cd42e71e8daa8810e64520
Author: Martin KaFai Lau <kafai@fb.com>
Date:   Fri May 4 14:49:50 2018 -0700

    bpf: btf: Avoid WARN_ON when CONFIG_REFCOUNT_FULL=y
    
    If CONFIG_REFCOUNT_FULL=y, refcount_inc() WARN when refcount is 0.
    When creating a new btf, the initial btf->refcnt is 0 and
    triggered the following:
    
    [   34.855452] refcount_t: increment on 0; use-after-free.
    [   34.856252] WARNING: CPU: 6 PID: 1857 at lib/refcount.c:153 refcount_inc+0x26/0x30
    ....
    [   34.868809] Call Trace:
    [   34.869168]  btf_new_fd+0x1af6/0x24d0
    [   34.869645]  ? btf_type_seq_show+0x200/0x200
    [   34.870212]  ? lock_acquire+0x3b0/0x3b0
    [   34.870726]  ? security_capable+0x54/0x90
    [   34.871247]  __x64_sys_bpf+0x1b2/0x310
    [   34.871761]  ? __ia32_sys_bpf+0x310/0x310
    [   34.872285]  ? bad_area_access_error+0x310/0x310
    [   34.872894]  do_syscall_64+0x95/0x3f0
    
    This patch uses refcount_set() instead.
    
    Reported-by: Yonghong Song <yhs@fb.com>
    Tested-by: Yonghong Song <yhs@fb.com>
    Signed-off-by: Martin KaFai Lau <kafai@fb.com>
    Acked-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

commit 98f0a39529e553bb45c0a7d775d2cc2afe9ed91d
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat May 5 08:35:04 2018 -0700

    tls: fix use after free in tls_sk_proto_close
    
    syzbot reported a use-after-free in tls_sk_proto_close
    
    Add a boolean value to cleanup a bit this function.
    
    BUG: KASAN: use-after-free in tls_sk_proto_close+0x8ab/0x9c0 net/tls/tls_main.c:297
    Read of size 1 at addr ffff8801ae40a858 by task syz-executor363/4503
    
    CPU: 0 PID: 4503 Comm: syz-executor363 Not tainted 4.17.0-rc3+ #34
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b9/0x294 lib/dump_stack.c:113
     print_address_description+0x6c/0x20b mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report.cold.7+0x242/0x2fe mm/kasan/report.c:412
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report.c:430
     tls_sk_proto_close+0x8ab/0x9c0 net/tls/tls_main.c:297
     inet_release+0x104/0x1f0 net/ipv4/af_inet.c:427
     inet6_release+0x50/0x70 net/ipv6/af_inet6.c:460
     sock_release+0x96/0x1b0 net/socket.c:594
     sock_close+0x16/0x20 net/socket.c:1149
     __fput+0x34d/0x890 fs/file_table.c:209
     ____fput+0x15/0x20 fs/file_table.c:243
     task_work_run+0x1e4/0x290 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x1aee/0x2730 kernel/exit.c:865
     do_group_exit+0x16f/0x430 kernel/exit.c:968
     get_signal+0x886/0x1960 kernel/signal.c:2469
     do_signal+0x98/0x2040 arch/x86/kernel/signal.c:810
     exit_to_usermode_loop+0x28a/0x310 arch/x86/entry/common.c:162
     prepare_exit_to_usermode arch/x86/entry/common.c:196 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:265 [inline]
     do_syscall_64+0x6ac/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4457b9
    RSP: 002b:00007fdf4d766da8 EFLAGS: 00000246 ORIG_RAX: 00000000000000ca
    RAX: fffffffffffffe00 RBX: 00000000006dac3c RCX: 00000000004457b9
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000006dac3c
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000006dac38
    R13: 3692738801137283 R14: 6bf92c39443c4c1d R15: 0000000000000006
    
    Allocated by task 4498:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     kasan_kmalloc+0xc4/0xe0 mm/kasan/kasan.c:553
     kmem_cache_alloc_trace+0x152/0x780 mm/slab.c:3620
     kmalloc include/linux/slab.h:512 [inline]
     kzalloc include/linux/slab.h:701 [inline]
     create_ctx net/tls/tls_main.c:521 [inline]
     tls_init+0x1f9/0xb00 net/tls/tls_main.c:633
     tcp_set_ulp+0x1bc/0x520 net/ipv4/tcp_ulp.c:153
     do_tcp_setsockopt.isra.39+0x44a/0x2600 net/ipv4/tcp.c:2588
     tcp_setsockopt+0xc1/0xe0 net/ipv4/tcp.c:2893
     sock_common_setsockopt+0x9a/0xe0 net/core/sock.c:3039
     __sys_setsockopt+0x1bd/0x390 net/socket.c:1903
     __do_sys_setsockopt net/socket.c:1914 [inline]
     __se_sys_setsockopt net/socket.c:1911 [inline]
     __x64_sys_setsockopt+0xbe/0x150 net/socket.c:1911
     do_syscall_64+0x1b1/0x800 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 4503:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:448
     set_track mm/kasan/kasan.c:460 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:521
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:528
     __cache_free mm/slab.c:3498 [inline]
     kfree+0xd9/0x260 mm/slab.c:3813
     tls_sw_free_resources+0x2a3/0x360 net/tls/tls_sw.c:1037
     tls_sk_proto_close+0x67c/0x9c0 net/tls/tls_main.c:288
     inet_release+0x104/0x1f0 net/ipv4/af_inet.c:427
     inet6_release+0x50/0x70 net/ipv6/af_inet6.c:460
     sock_release+0x96/0x1b0 net/socket.c:594
     sock_close+0x16/0x20 net/socket.c:1149
     __fput+0x34d/0x890 fs/file_table.c:209
     ____fput+0x15/0x20 fs/file_table.c:243
     task_work_run+0x1e4/0x290 kernel/task_work.c:113
     exit_task_work include/linux/task_work.h:22 [inline]
     do_exit+0x1aee/0x2730 kernel/exit.c:865
     do_group_exit+0x16f/0x430 kernel/exit.c:968
     get_signal+0x886/0x1960 kernel/signal.c:2469
     do_signal+0x98/0x2040 arch/x86/kernel/signal.c:810
     exit_to_usermode_loop+0x28a/0x310 arch/x86/entry/common.c:162
     prepare_exit_to_usermode arch/x86/entry/common.c:196 [inline]
     syscall_return_slowpath arch/x86/entry/common.c:265 [inline]
     do_syscall_64+0x6ac/0x800 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8801ae40a800
     which belongs to the cache kmalloc-256 of size 256
    The buggy address is located 88 bytes inside of
     256-byte region [ffff8801ae40a800, ffff8801ae40a900)
    The buggy address belongs to the page:
    page:ffffea0006b90280 count:1 mapcount:0 mapping:ffff8801ae40a080 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffff8801ae40a080 0000000000000000 000000010000000c
    raw: ffffea0006bea9e0 ffffea0006bc94a0 ffff8801da8007c0 0000000000000000
    page dumped because: kasan: bad access detected
    
    Fixes: dd0bed1665d6 ("tls: support for Inline tls record")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Atul Gupta <atul.gupta@chelsio.com>
    Cc: Steve Wise <swise@opengridcomputing.com>
    Cc: Ilya Lesokhin <ilyal@mellanox.com>
    Cc: Aviad Yehezkel <aviadye@mellanox.com>
    Cc: Dave Watson <davejwatson@fb.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 12d9f07022dcde261ad16e9a11f45096dc68b03c
Author: Jianchao Wang <jianchao.w.wang@oracle.com>
Date:   Fri May 4 16:01:57 2018 +0800

    nvme: fix use-after-free in nvme_free_ns_head
    
    Currently only nvme_ctrl will take a reference counter of
    nvme_subsystem, nvme_ns_head also needs it. Otherwise
    nvme_free_ns_head will access the nvme_subsystem.ns_ida
    which has been freed by __nvme_release_subsystem after all the
    reference of nvme_subsystem have been released by nvme_free_ctrl.
    This could cause memory corruption.
    
     BUG: KASAN: use-after-free in radix_tree_next_chunk+0x9f/0x4b0
     Read of size 8 at addr ffff88036494d2e8 by task fio/1815
    
     CPU: 1 PID: 1815 Comm: fio Kdump: loaded Tainted: G        W         4.17.0-rc1+ #18
     Hardware name: LENOVO 10MLS0E339/3106, BIOS M1AKT22A 06/27/2017
     Call Trace:
      dump_stack+0x91/0xeb
      print_address_description+0x6b/0x290
      kasan_report+0x261/0x360
      radix_tree_next_chunk+0x9f/0x4b0
      ida_remove+0x8b/0x180
      ida_simple_remove+0x26/0x40
      nvme_free_ns_head+0x58/0xc0
      __blkdev_put+0x30a/0x3a0
      blkdev_close+0x44/0x50
      __fput+0x184/0x380
      task_work_run+0xaf/0xe0
      do_exit+0x501/0x1440
      do_group_exit+0x89/0x140
      __x64_sys_exit_group+0x28/0x30
      do_syscall_64+0x72/0x230
    
    Signed-off-by: Jianchao Wang <jianchao.w.wang@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <keith.busch@intel.com>

commit bb765d1c331f62b59049d35607ed2e365802bef9
Author: Jann Horn <jannh@google.com>
Date:   Wed Apr 4 21:03:21 2018 +0200

    tee: shm: fix use-after-free via temporarily dropped reference
    
    Bump the file's refcount before moving the reference into the fd table,
    not afterwards. The old code could drop the file's refcount to zero for a
    short moment before calling get_file() via get_dma_buf().
    
    This code can only be triggered on ARM systems that use Linaro's OP-TEE.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 14f4eaeddabce65deba2e1346efccf80f666f7b7
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Thu Mar 8 13:47:39 2018 -0500

    media: dvbsky: fix driver unregister logic
    
    There's a user-after-free there, if the frontend is attached
    via the new I2C way:
    
    [  112.539806] usbcore: deregistering interface driver dvb_usb_dvbsky
    [  112.568489] ==================================================================
    [  112.568600] BUG: KASAN: use-after-free in dvb_unregister_frontend+0x18/0xb0 [dvb_core]
    [  112.568610] Read of size 8 at addr ffff8803a6f61530 by task rmmod/2246
    
    [  112.568622] CPU: 0 PID: 2246 Comm: rmmod Not tainted 4.16.0-rc4+ #103
    [  112.568624] Hardware name:  /NUC5i7RYB, BIOS RYBDWi35.86A.0364.2017.0511.0949 05/11/2017
    [  112.568625] Call Trace:
    [  112.568631]  dump_stack+0x5c/0x7c
    [  112.568636]  print_address_description+0x6a/0x270
    [  112.568640]  kasan_report+0x258/0x380
    [  112.568657]  ? dvb_unregister_frontend+0x18/0xb0 [dvb_core]
    [  112.568673]  dvb_unregister_frontend+0x18/0xb0 [dvb_core]
    [  112.568681]  dvb_usbv2_exit+0x156/0x4a0 [dvb_usb_v2]
    [  112.568689]  dvb_usbv2_disconnect+0xa0/0x140 [dvb_usb_v2]
    [  112.568694]  usb_unbind_interface+0xd8/0x3f0
    [  112.568700]  device_release_driver_internal+0x1ce/0x2f0
    [  112.568705]  driver_detach+0x66/0xc0
    [  112.568709]  bus_remove_driver+0x86/0x150
    [  112.568713]  usb_deregister+0x90/0x180
    [  112.568718]  SyS_delete_module+0x293/0x330
    [  112.568721]  ? free_module+0x330/0x330
    [  112.568725]  ? _cond_resched+0x16/0x50
    [  112.568729]  ? task_work_run+0x7d/0xd0
    [  112.568732]  ? mem_cgroup_handle_over_high+0x1c/0xc0
    [  112.568736]  ? free_module+0x330/0x330
    [  112.568740]  do_syscall_64+0xe7/0x250
    [  112.568744]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    [  112.568747] RIP: 0033:0x7facafa272a7
    [  112.568749] RSP: 002b:00007fffdea14cc8 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [  112.568753] RAX: ffffffffffffffda RBX: 00007fffdea14d28 RCX: 00007facafa272a7
    [  112.568755] RDX: 000000000000000a RSI: 0000000000000800 RDI: 00005599557337c8
    [  112.568756] RBP: 0000559955733760 R08: 000000000000000a R09: 0000000000000000
    [  112.568758] R10: 00007facafaa0280 R11: 0000000000000206 R12: 00007fffdea14ef0
    [  112.568761] R13: 00007fffdea16eac R14: 0000559955733260 R15: 0000559955733760
    
    [  112.568808] Allocated by task 638:
    [  112.568816]  kasan_kmalloc+0xa0/0xd0
    [  112.568820]  kmem_cache_alloc_trace+0x114/0x230
    [  112.568826]  m88ds3103_probe+0x9a/0x643 [m88ds3103]
    [  112.568830]  i2c_device_probe+0x2e9/0x3c0
    [  112.568833]  driver_probe_device+0x46e/0x6a0
    [  112.568836]  bus_for_each_drv+0xd6/0x130
    [  112.568838]  __device_attach+0x166/0x1f0
    [  112.568841]  bus_probe_device+0xea/0x110
    [  112.568844]  device_add+0x6a3/0x9f0
    [  112.568847]  i2c_new_device+0x28f/0x5c0
    [  112.568861]  dvb_module_probe+0x91/0x110 [dvb_core]
    [  112.568867]  dvbsky_s960c_attach+0x1c4/0x460 [dvb_usb_dvbsky]
    [  112.568873]  dvb_usbv2_probe+0x1191/0x1950 [dvb_usb_v2]
    [  112.568877]  usb_probe_interface+0x1b3/0x430
    [  112.568880]  driver_probe_device+0x46e/0x6a0
    [  112.568882]  __driver_attach+0xeb/0x110
    [  112.568885]  bus_for_each_dev+0xe4/0x140
    [  112.568888]  bus_add_driver+0x249/0x380
    [  112.568891]  driver_register+0xc6/0x170
    [  112.568893]  usb_register_driver+0xec/0x200
    [  112.568896]  do_one_initcall+0x8f/0x1ee
    [  112.568900]  do_init_module+0xde/0x320
    [  112.568902]  load_module+0x3ed0/0x4850
    [  112.568905]  SYSC_finit_module+0x192/0x1c0
    [  112.568908]  do_syscall_64+0xe7/0x250
    [  112.568911]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    [  112.568916] Freed by task 2246:
    [  112.568923]  __kasan_slab_free+0x136/0x180
    [  112.568925]  kfree+0xa5/0x1e0
    [  112.568931]  m88ds3103_remove+0x42/0x60 [m88ds3103]
    [  112.568934]  i2c_device_remove+0x72/0xd0
    [  112.568937]  device_release_driver_internal+0x1ce/0x2f0
    [  112.568940]  bus_remove_device+0x197/0x270
    [  112.568942]  device_del+0x239/0x550
    [  112.568945]  device_unregister+0x16/0x70
    [  112.568949]  dvbsky_exit+0x4c/0x70 [dvb_usb_dvbsky]
    [  112.568955]  dvb_usbv2_disconnect+0x98/0x140 [dvb_usb_v2]
    [  112.568958]  usb_unbind_interface+0xd8/0x3f0
    [  112.568961]  device_release_driver_internal+0x1ce/0x2f0
    [  112.568964]  driver_detach+0x66/0xc0
    [  112.568967]  bus_remove_driver+0x86/0x150
    [  112.568970]  usb_deregister+0x90/0x180
    [  112.568973]  SyS_delete_module+0x293/0x330
    [  112.568976]  do_syscall_64+0xe7/0x250
    [  112.568979]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    [  112.568985] The buggy address belongs to the object at ffff8803a6f61100
                    which belongs to the cache kmalloc-2048 of size 2048
    [  112.568998] The buggy address is located 1072 bytes inside of
                    2048-byte region [ffff8803a6f61100, ffff8803a6f61900)
    [  112.569008] The buggy address belongs to the page:
    [  112.569015] page:ffffea000e9bd800 count:1 mapcount:0 mapping:0000000000000000 index:0x0 compound_mapcount: 0
    [  112.569025] flags: 0x17ffe000008100(slab|head)
    [  112.569034] raw: 0017ffe000008100 0000000000000000 0000000000000000 00000001000f000f
    [  112.569044] raw: ffffea000ee2d000 0000000500000005 ffff880407002a80 0000000000000000
    [  112.569053] page dumped because: kasan: bad access detected
    
    [  112.569062] Memory state around the buggy address:
    [  112.569070]  ffff8803a6f61400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  112.569079]  ffff8803a6f61480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  112.569088] >ffff8803a6f61500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  112.569095]                                      ^
    [  112.569103]  ffff8803a6f61580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  112.569112]  ffff8803a6f61600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  112.569119] ==================================================================
    [  112.569127] Disabling lock debugging due to kernel taint
    [  112.571161] dvb_usb_v2: 'DVBSky S960CI:2-2' successfully deinitialized and disconnected
    
    Fix it by letting the dvb-usb-v2 core to know that the frontend
    was already removed.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 44a182b9d17765514fa2b1cc911e4e65134eef93
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu May 3 17:30:07 2018 +0300

    xhci: Fix use-after-free in xhci_free_virt_device
    
    KASAN found a use-after-free in xhci_free_virt_device+0x33b/0x38e
    where xhci_free_virt_device() sets slot id to 0 if udev exists:
    if (dev->udev && dev->udev->slot_id)
            dev->udev->slot_id = 0;
    
    dev->udev will be true even if udev is freed because dev->udev is
    not set to NULL.
    
    set dev->udev pointer to NULL in xhci_free_dev()
    
    The original patch went to stable so this fix needs to be applied
    there as well.
    
    Fixes: a400efe455f7 ("xhci: zero usb device slot_id member when disabling and freeing a xhci slot")
    Cc: <stable@vger.kernel.org>
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f53823c18131e755905b4f654196fd2cc3953f6e
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Apr 23 11:21:03 2018 +0900

    bdi: Fix use after free bug in debugfs_remove()
    
    syzbot is reporting use after free bug in debugfs_remove() [1].
    
    This is because fault injection made memory allocation for
    debugfs_create_file() from bdi_debug_register() from bdi_register_va()
    fail and continued with setting WB_registered. But when debugfs_remove()
    is called from debugfs_remove(bdi->debug_dir) from bdi_debug_unregister()
     from bdi_unregister() from release_bdi() because WB_registered was set
    by bdi_register_va(), IS_ERR_OR_NULL(bdi->debug_dir) == false despite
    debugfs_remove(bdi->debug_dir) was already called from bdi_register_va().
    
    Fix this by making IS_ERR_OR_NULL(bdi->debug_dir) == true.
    
    [1] https://syzkaller.appspot.com/bug?id=5ab4efd91a96dcea9b68104f159adf4af2a6dfc1
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reported-by: syzbot <syzbot+049cb4ae097049dac137@syzkaller.appspotmail.com>
    Fixes: 97f07697932e6faf ("bdi: convert bdi_debug_register to int")
    Cc: weiping zhang <zhangweiping@didichuxing.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commits)
      net/smc: fix shutdown in state SMC_LISTEN
      bnxt_en: Fix memory fault in bnxt_ethtool_init()
      virtio_net: sparse annotation fix
      virtio_net: fix adding vids on big-endian
      virtio_net: split out ctrl buffer
      net: hns: Avoid action name truncation
      docs: ip-sysctl.txt: fix name of some ipv6 variables
      vmxnet3: fix incorrect dereference when rxvlan is disabled
      llc: hold llc_sap before release_sock()
      MAINTAINERS: Direct networking documentation changes to netdev
      atm: iphase: fix spelling mistake: "Tansmit" -> "Transmit"
      net: qmi_wwan: add Wistron Neweb D19Q1
      net: caif: fix spelling mistake "UKNOWN" -> "UNKNOWN"
      net: stmmac: Disable ACS Feature for GMAC >= 4
      net: mvpp2: Fix DMA address mask size
      net: change the comment of dev_mc_init
      net: qualcomm: rmnet: Fix warning seen with fill_info
      tun: fix vlan packet truncation
      tipc: fix infinite loop when dumping link monitor summary
      tipc: fix use-after-free in tipc_nametbl_stop
      ...

commit be47e41d77fba5bc17e9fb5f1c99217bb6691989
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Apr 17 21:25:42 2018 +0200

    tipc: fix use-after-free in tipc_nametbl_stop
    
    When we delete a service item in tipc_nametbl_stop() we loop over
    all service ranges in the service's RB tree, and for each service
    range we loop over its pertaining publications while calling
    tipc_service_remove_publ() for each of them.
    
    However, tipc_service_remove_publ() has the side effect that it also
    removes the comprising service range item when there are no publications
    left. This leads to a "use-after-free" access when the inner loop
    continues to the next iteration, since the range item holding the list
    we are looping no longer exists.
    
    We fix this by moving the delete of the service range item outside
    the said function. Instead, we now let the two functions calling it
    test if the list is empty and perform the removal when that is the
    case.
    
    Reported-by: syzbot+d64b64afc55660106556@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 539c320bfa9778ef4a96ee4c846d230f80ca6f50
Author: Gustavo Padovan <gustavo.padovan@collabora.com>
Date:   Fri Mar 30 10:54:45 2018 +0200

    drm/vc4: update cursors asynchronously through atomic
    
    Add support for async updates of cursors by using the new atomic
    interface for that. Basically what this commit does is do what
    vc4_update_plane() did but through atomic.
    
    v7: Place the drm_atomic_set_fb_for_plane() call after the new
        FB has been applied to the HW to avoid possible use-after-free
        issues
    v6: add missing drm_atomic_set_fb_for_plane() in
        vc4_plane_atomic_async_update() (Boris Brezillon)
    v5: add missing call to vc4_plane_atomic_check() (Eric Anholt)
    v4: add drm_atomic_helper_async() commit (Eric Anholt)
    v3: move size checks back to drivers (Ville Syrjälä)
    v2: move fb setting to core and use new state (Eric Anholt)
    
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.com>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180330085445.31726-1-boris.brezillon@bootlin.com

commits)
      perf/core: Need CAP_SYS_ADMIN to create k/uprobe with perf_event_open()
      tracing/uprobe_event: Fix strncpy corner case
      perf/core: Fix perf_uprobe_init()
      perf/core: Fix perf_kprobe_init()
      perf/core: Fix use-after-free in uprobe_perf_close()
      perf tests clang: Fix function name for clang IR test
      perf clang: Add support for recent clang versions
      perf tools: Fix perf builds with clang support
      perf tools: No need to include namespaces.h in util.h
      perf hists browser: Remove leftover from row returned from refresh
      perf hists browser: Show extra_title_lines in the 'D' debug hotkey
      perf auxtrace: Make auxtrace_queues__add_buffer() do CPU filtering
      tools headers uapi: Synchronize i915_drm.h
      perf report: Remove duplicated 'samples' in lost samples warning
      perf ui browser: Fixup cleaning unused lines at the bottom
      perf annotate browser: Fixup vertical line separating metrics from instructions
      perf annotate: Show group details on the title line
      perf auxtrace: Make auxtrace_queues__add_buffer() allocate struct buffer
      perf/x86/intel: Move regs->flags EXACT bit init
      perf trace: Remove redundant ')'
      ...

commit 3f05317d9889ab75c7190dcd39491d2a97921984
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c3317f4db831b7564ff8d1670326456a7fbbbcb3
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 11 22:52:09 2018 +0200

    tipc: fix unbalanced reference counter
    
    When a topology subscription is created, we may encounter (or KASAN
    may provoke) a failure to create a corresponding service instance in
    the binding table. Instead of letting the tipc_nametbl_subscribe()
    report the failure back to the caller, the function just makes a warning
    printout and returns, without incrementing the subscription reference
    counter as expected by the caller.
    
    This makes the caller believe that the subscription was successful, so
    it will at a later moment try to unsubscribe the item. This involves
    a sub_put() call. Since the reference counter never was incremented
    in the first place, we get a premature delete of the subscription item,
    followed by a "use-after-free" warning.
    
    We fix this by adding a return value to tipc_nametbl_subscribe() and
    make the caller aware of the failure to subscribe.
    
    This bug seems to always have been around, but this fix only applies
    back to the commit shown below. Given the low risk of this happening
    we believe this to be sufficient.
    
    Fixes: commit 218527fe27ad ("tipc: replace name table service range
    array with rb tree")
    Reported-by: syzbot+aa245f26d42b8305d157@syzkaller.appspotmail.com
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

committed" argument of xfs_dir_ialloc

commit 7709e9bdee96a904ebf18378c803a9288e10bb30
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 21 11:09:42 2018 +0300

    scsi: dpt_i2o: Use after free in I2ORESETCMD ioctl
    
    Here is another use after free if we reset the card.  The adpt_hba_reset()
    function frees "pHba" on error.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 621b6d2ea297d0fb6030452c5bcd221f12165fcf
Author: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
Date:   Mon Apr 9 19:03:46 2018 +0900

    perf/core: Fix use-after-free in uprobe_perf_close()
    
    A use-after-free bug was caught by KASAN while running usdt related
    code (BCC project. bcc/tests/python/test_usdt2.py):
    
            ==================================================================
            BUG: KASAN: use-after-free in uprobe_perf_close+0x222/0x3b0
            Read of size 4 at addr ffff880384f9b4a4 by task test_usdt2.py/870
    
            CPU: 4 PID: 870 Comm: test_usdt2.py Tainted: G        W         4.16.0-next-20180409 #215
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
            Call Trace:
             dump_stack+0xc7/0x15b
             ? show_regs_print_info+0x5/0x5
             ? printk+0x9c/0xc3
             ? kmsg_dump_rewind_nolock+0x6e/0x6e
             ? uprobe_perf_close+0x222/0x3b0
             print_address_description+0x83/0x3a0
             ? uprobe_perf_close+0x222/0x3b0
             kasan_report+0x1dd/0x460
             ? uprobe_perf_close+0x222/0x3b0
             uprobe_perf_close+0x222/0x3b0
             ? probes_open+0x180/0x180
             ? free_filters_list+0x290/0x290
             trace_uprobe_register+0x1bb/0x500
             ? perf_event_attach_bpf_prog+0x310/0x310
             ? probe_event_disable+0x4e0/0x4e0
             perf_uprobe_destroy+0x63/0xd0
             _free_event+0x2bc/0xbd0
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ring_buffer_attach+0x550/0x550
             ? kvm_sched_clock_read+0x1a/0x30
             ? perf_event_release_kernel+0x3e4/0xc00
             ? __mutex_unlock_slowpath+0x12e/0x540
             ? wait_for_completion+0x430/0x430
             ? lock_downgrade+0x3c0/0x3c0
             ? lock_release+0x980/0x980
             ? do_raw_spin_trylock+0x118/0x150
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             perf_event_release_kernel+0x5d4/0xc00
             ? put_event+0x30/0x30
             ? fsnotify+0xd2d/0xea0
             ? sched_clock_cpu+0x18/0x1a0
             ? __fsnotify_update_child_dentry_flags.part.0+0x1b0/0x1b0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? pvclock_read_flags+0x80/0x80
             ? kvm_sched_clock_read+0x1a/0x30
             ? sched_clock_cpu+0x18/0x1a0
             ? pvclock_clocksource_read+0x152/0x2b0
             ? locks_remove_file+0xec/0x470
             ? pvclock_read_flags+0x80/0x80
             ? fcntl_setlk+0x880/0x880
             ? ima_file_free+0x8d/0x390
             ? lockdep_rcu_suspicious+0x100/0x100
             ? ima_file_check+0x110/0x110
             ? fsnotify+0xea0/0xea0
             ? kvm_sched_clock_read+0x1a/0x30
             ? rcu_note_context_switch+0x600/0x600
             perf_release+0x21/0x40
             __fput+0x264/0x620
             ? fput+0xf0/0xf0
             ? do_raw_spin_unlock+0x121/0x210
             ? do_raw_spin_trylock+0x150/0x150
             ? SyS_fchdir+0x100/0x100
             ? fsnotify+0xea0/0xea0
             task_work_run+0x14b/0x1e0
             ? task_work_cancel+0x1c0/0x1c0
             ? copy_fd_bitmaps+0x150/0x150
             ? vfs_read+0xe5/0x260
             exit_to_usermode_loop+0x17b/0x1b0
             ? trace_event_raw_event_sys_exit+0x1a0/0x1a0
             do_syscall_64+0x3f6/0x490
             ? syscall_return_slowpath+0x2c0/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? syscall_return_slowpath+0x1a3/0x2c0
             ? lockdep_sys_exit+0x1f/0xaa
             ? prepare_exit_to_usermode+0x11c/0x1e0
             ? enter_from_user_mode+0x30/0x30
            random: crng init done
             ? __put_user_4+0x1c/0x30
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
            RIP: 0033:0x7f41d95f9340
            RSP: 002b:00007fffe71e4268 EFLAGS: 00000246 ORIG_RAX: 0000000000000003
            RAX: 0000000000000000 RBX: 000000000000000d RCX: 00007f41d95f9340
            RDX: 0000000000000000 RSI: 0000000000002401 RDI: 000000000000000d
            RBP: 0000000000000000 R08: 00007f41ca8ff700 R09: 00007f41d996dd1f
            R10: 00007fffe71e41e0 R11: 0000000000000246 R12: 00007fffe71e4330
            R13: 0000000000000000 R14: fffffffffffffffc R15: 00007fffe71e4290
    
            Allocated by task 870:
             kasan_kmalloc+0xa0/0xd0
             kmem_cache_alloc_node+0x11a/0x430
             copy_process.part.19+0x11a0/0x41c0
             _do_fork+0x1be/0xa20
             do_syscall_64+0x198/0x490
             entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
            Freed by task 0:
             __kasan_slab_free+0x12e/0x180
             kmem_cache_free+0x102/0x4d0
             free_task+0xfe/0x160
             __put_task_struct+0x189/0x290
             delayed_put_task_struct+0x119/0x250
             rcu_process_callbacks+0xa6c/0x1b60
             __do_softirq+0x238/0x7ae
    
            The buggy address belongs to the object at ffff880384f9b480
             which belongs to the cache task_struct of size 12928
    
    It occurs because task_struct is freed before perf_event which refers
    to the task and task flags are checked while teardown of the event.
    perf_event_alloc() assigns task_struct to hw.target of perf_event,
    but there is no reference counting for it.
    
    As a fix we get_task_struct() in perf_event_alloc() at above mentioned
    assignment and put_task_struct() in _free_event().
    
    Signed-off-by: Prashant Bhole <bhole_prashant_q7@lab.ntt.co.jp>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 63b6da39bb38e8f1a1ef3180d32a39d6 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20180409100346.6416-1-bhole_prashant_q7@lab.ntt.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit f9e13c0a5a33d1eaec374d6d4dab53a4f72756a0
Author: Shakeel Butt <shakeelb@google.com>
Date:   Thu Apr 5 16:21:57 2018 -0700

    slab, slub: skip unnecessary kasan_cache_shutdown()
    
    The kasan quarantine is designed to delay freeing slab objects to catch
    use-after-free.  The quarantine can be large (several percent of machine
    memory size).  When kmem_caches are deleted related objects are flushed
    from the quarantine but this requires scanning the entire quarantine
    which can be very slow.  We have seen the kernel busily working on this
    while holding slab_mutex and badly affecting cache_reaper, slabinfo
    readers and memcg kmem cache creations.
    
    It can easily reproduced by following script:
    
            yes . | head -1000000 | xargs stat > /dev/null
            for i in `seq 1 10`; do
                    seq 500 | (cd /cg/memory && xargs mkdir)
                    seq 500 | xargs -I{} sh -c 'echo $BASHPID > \
                            /cg/memory/{}/tasks && exec stat .' > /dev/null
                    seq 500 | (cd /cg/memory && xargs rmdir)
            done
    
    The busy stack:
        kasan_cache_shutdown
        shutdown_cache
        memcg_destroy_kmem_caches
        mem_cgroup_css_free
        css_free_rwork_fn
        process_one_work
        worker_thread
        kthread
        ret_from_fork
    
    This patch is based on the observation that if the kmem_cache to be
    destroyed is empty then there should not be any objects of this cache in
    the quarantine.
    
    Without the patch the script got stuck for couple of hours.  With the
    patch the script completed within a second.
    
    Link: http://lkml.kernel.org/r/20180327230603.54721-1-shakeelb@google.com
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bfacfb457b36911a10140b8cb3ce76a74883ac5a
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 2 18:48:37 2018 -0700

    pptp: remove a buggy dst release in pptp_connect()
    
    Once dst has been cached in socket via sk_setup_caps(),
    it is illegal to call ip_rt_put() (or dst_release()),
    since sk_setup_caps() did not change dst refcount.
    
    We can still dereference it since we hold socket lock.
    
    Caugth by syzbot :
    
    BUG: KASAN: use-after-free in atomic_dec_return include/asm-generic/atomic-instrumented.h:198 [inline]
    BUG: KASAN: use-after-free in dst_release+0x27/0xa0 net/core/dst.c:185
    Write of size 4 at addr ffff8801c54dc040 by task syz-executor4/20088
    
    CPU: 1 PID: 20088 Comm: syz-executor4 Not tainted 4.16.0+ #376
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x1a7/0x27d lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report+0x23c/0x360 mm/kasan/report.c:412
     check_memory_region_inline mm/kasan/kasan.c:260 [inline]
     check_memory_region+0x137/0x190 mm/kasan/kasan.c:267
     kasan_check_write+0x14/0x20 mm/kasan/kasan.c:278
     atomic_dec_return include/asm-generic/atomic-instrumented.h:198 [inline]
     dst_release+0x27/0xa0 net/core/dst.c:185
     sk_dst_set include/net/sock.h:1812 [inline]
     sk_dst_reset include/net/sock.h:1824 [inline]
     sock_setbindtodevice net/core/sock.c:610 [inline]
     sock_setsockopt+0x431/0x1b20 net/core/sock.c:707
     SYSC_setsockopt net/socket.c:1845 [inline]
     SyS_setsockopt+0x2ff/0x360 net/socket.c:1828
     do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    RIP: 0033:0x4552d9
    RSP: 002b:00007f4878126c68 EFLAGS: 00000246 ORIG_RAX: 0000000000000036
    RAX: ffffffffffffffda RBX: 00007f48781276d4 RCX: 00000000004552d9
    RDX: 0000000000000019 RSI: 0000000000000001 RDI: 0000000000000013
    RBP: 000000000072bea0 R08: 0000000000000010 R09: 0000000000000000
    R10: 00000000200010c0 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 0000000000000526 R14: 00000000006fac30 R15: 0000000000000000
    
    Allocated by task 20088:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:552
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc+0x12e/0x760 mm/slab.c:3542
     dst_alloc+0x11f/0x1a0 net/core/dst.c:104
     rt_dst_alloc+0xe9/0x540 net/ipv4/route.c:1520
     __mkroute_output net/ipv4/route.c:2265 [inline]
     ip_route_output_key_hash_rcu+0xa49/0x2c60 net/ipv4/route.c:2493
     ip_route_output_key_hash+0x20b/0x370 net/ipv4/route.c:2322
     __ip_route_output_key include/net/route.h:126 [inline]
     ip_route_output_flow+0x26/0xa0 net/ipv4/route.c:2577
     ip_route_output_ports include/net/route.h:163 [inline]
     pptp_connect+0xa84/0x1170 drivers/net/ppp/pptp.c:453
     SYSC_connect+0x213/0x4a0 net/socket.c:1639
     SyS_connect+0x24/0x30 net/socket.c:1620
     do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    Freed by task 20082:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     __kasan_slab_free+0x11a/0x170 mm/kasan/kasan.c:520
     kasan_slab_free+0xe/0x10 mm/kasan/kasan.c:527
     __cache_free mm/slab.c:3486 [inline]
     kmem_cache_free+0x83/0x2a0 mm/slab.c:3744
     dst_destroy+0x266/0x380 net/core/dst.c:140
     dst_destroy_rcu+0x16/0x20 net/core/dst.c:153
     __rcu_reclaim kernel/rcu/rcu.h:178 [inline]
     rcu_do_batch kernel/rcu/tree.c:2675 [inline]
     invoke_rcu_callbacks kernel/rcu/tree.c:2930 [inline]
     __rcu_process_callbacks kernel/rcu/tree.c:2897 [inline]
     rcu_process_callbacks+0xd6c/0x17b0 kernel/rcu/tree.c:2914
     __do_softirq+0x2d7/0xb85 kernel/softirq.c:285
    
    The buggy address belongs to the object at ffff8801c54dc000
     which belongs to the cache ip_dst_cache of size 168
    The buggy address is located 64 bytes inside of
     168-byte region [ffff8801c54dc000, ffff8801c54dc0a8)
    The buggy address belongs to the page:
    page:ffffea0007153700 count:1 mapcount:0 mapping:ffff8801c54dc000 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffff8801c54dc000 0000000000000000 0000000100000010
    raw: ffffea0006b34b20 ffffea0006b6c1e0 ffff8801d674a1c0 0000000000000000
    page dumped because: kasan: bad access detected
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0612d1166330697d91b8d2d1e71e41485bb0b18e
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon Apr 2 20:08:27 2018 -0700

    xfs: fix intent use-after-free on abort
    
    When an intent is aborted during it's initial commit through
    xfs_defer_trans_abort(), there is a use after free. The current
    report is for a RUI  through this path in generic/388:
    
     Freed by task 6274:
      __kasan_slab_free+0x136/0x180
      kmem_cache_free+0xe7/0x4b0
      xfs_trans_free_items+0x198/0x2e0
      __xfs_trans_commit+0x27f/0xcc0
      xfs_trans_roll+0x17b/0x2a0
      xfs_defer_trans_roll+0x6ad/0xe60
      xfs_defer_finish+0x2a6/0x2140
      xfs_alloc_file_space+0x53a/0xf90
      xfs_file_fallocate+0x5c6/0xac0
      vfs_fallocate+0x2f5/0x930
      ioctl_preallocate+0x1dc/0x320
      do_vfs_ioctl+0xfe4/0x1690
    
    The problem is that the RUI has two active references - one in the
    current transaction, and another held by the defer_ops structure
    that is passed to the RUD (intent done) so that both the intent and
    the intent done structures are freed on commit of the intent done.
    
    Hence during abort, we need to release the intent item, because the
    defer_ops reference is released separately via ->abort_intent
    callback. Fix all the intent code to do this correctly.
    
    Signed-Off-By: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commits)
      net: mvneta: fix enable of all initialized RXQs
      net/ipv6: Fix route leaking between VRFs
      vrf: Fix use after free and double free in vrf_finish_output
      ipv6: sr: fix seg6 encap performances with TSO enabled
      net/dim: Fix int overflow
      vlan: Fix vlan insertion for packets without ethernet header
      net: Fix untag for vlan packets without ethernet header
      atm: iphase: fix spelling mistake: "Receiverd" -> "Received"
      vhost: validate log when IOTLB is enabled
      qede: Do not drop rx-checksum invalidated packets.
      hv_netvsc: enable multicast if necessary
      ip_tunnel: Resolve ipsec merge conflict properly.
      lan78xx: Crash in lan78xx_writ_reg (Workqueue: events lan78xx_deferred_multicast_write)
      qede: Fix barrier usage after tx doorbell write.
      vhost: correctly remove wait queue during poll failure
      net/mlx4_core: Fix memory leak while delete slave's resources
      net/mlx4_en: Fix mixed PFC and Global pause user control requests
      net/smc: use announced length in sock_recvmsg()
      llc: properly handle dev_queue_xmit() return value
      strparser: Fix sign of err codes
      ...

commit 82dd0d2a9a76fc8fa2b18d80b987d455728bf83a
Author: David Ahern <dsahern@gmail.com>
Date:   Thu Mar 29 12:49:52 2018 -0700

    vrf: Fix use after free and double free in vrf_finish_output
    
    Miguel reported an skb use after free / double free in vrf_finish_output
    when neigh_output returns an error. The vrf driver should return after
    the call to neigh_output as it takes over the skb on error path as well.
    
    Patch is a simplified version of Miguel's patch which was written for 4.9,
    and updated to top of tree.
    
    Fixes: 8f58336d3f78a ("net: Add ethernet header for pass through VRF device")
    Signed-off-by: Miguel Fadon Perlines <mfadon@teldat.com>
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9137108cc3d64ade13e753108ec611a0daed16a0
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Thu Mar 22 14:04:23 2018 -0600

    RDMA/rdma_cm: Fix use after free race with process_one_req
    
    process_one_req() can race with rdma_addr_cancel():
    
               CPU0                                 CPU1
               ====                                 ====
     process_one_work()
      debug_work_deactivate(work);
      process_one_req()
                                            rdma_addr_cancel()
                                              mutex_lock(&lock);
                                               set_timeout(&req->work,..);
                                                  __queue_work()
                                                   debug_work_activate(work);
                                              mutex_unlock(&lock);
    
       mutex_lock(&lock);
    [..]
            list_del(&req->list);
       mutex_unlock(&lock);
    [..]
    
       // ODEBUG explodes since the work is still queued.
       kfree(req);
    
    Causing ODEBUG to detect the use after free:
    
    ODEBUG: free active (active state 0) object type: work_struct hint: process_one_req+0x0/0x6c0 include/net/dst.h:165
    WARNING: CPU: 0 PID: 79 at lib/debugobjects.c:291 debug_print_object+0x166/0x220 lib/debugobjects.c:288
    kvm: emulating exchange as write
    Kernel panic - not syncing: panic_on_warn set ...
    
    CPU: 0 PID: 79 Comm: kworker/u4:3 Not tainted 4.16.0-rc6+ #361
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: ib_addr process_one_req
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x24d lib/dump_stack.c:53
     panic+0x1e4/0x41c kernel/panic.c:183
     __warn+0x1dc/0x200 kernel/panic.c:547
     report_bug+0x1f4/0x2b0 lib/bug.c:186
     fixup_bug.part.11+0x37/0x80 arch/x86/kernel/traps.c:178
     fixup_bug arch/x86/kernel/traps.c:247 [inline]
     do_error_trap+0x2d7/0x3e0 arch/x86/kernel/traps.c:296
     do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:315
     invalid_op+0x1b/0x40 arch/x86/entry/entry_64.S:986
    RIP: 0010:debug_print_object+0x166/0x220 lib/debugobjects.c:288
    RSP: 0000:ffff8801d966f210 EFLAGS: 00010086
    RAX: dffffc0000000008 RBX: 0000000000000003 RCX: ffffffff815acd6e
    RDX: 0000000000000000 RSI: 1ffff1003b2cddf2 RDI: 0000000000000000
    RBP: ffff8801d966f250 R08: 0000000000000000 R09: 1ffff1003b2cddc8
    R10: ffffed003b2cde71 R11: ffffffff86f39a98 R12: 0000000000000001
    R13: ffffffff86f15540 R14: ffffffff86408700 R15: ffffffff8147c0a0
     __debug_check_no_obj_freed lib/debugobjects.c:745 [inline]
     debug_check_no_obj_freed+0x662/0xf1f lib/debugobjects.c:774
     kfree+0xc7/0x260 mm/slab.c:3799
     process_one_req+0x2e7/0x6c0 drivers/infiniband/core/addr.c:592
     process_one_work+0xc47/0x1bb0 kernel/workqueue.c:2113
     worker_thread+0x223/0x1990 kernel/workqueue.c:2247
     kthread+0x33c/0x400 kernel/kthread.c:238
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:406
    
    Fixes: 5fff41e1f89d ("IB/core: Fix race condition in resolving IP to MAC")
    Reported-by: <syzbot+3b4acab09b6463472d0a@syzkaller.appspotmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 9ef0f58ed7b4a55da4a64641d538e0d9e46579ac
Author: Carl Huang <cjhuang@codeaurora.org>
Date:   Mon Mar 5 14:44:02 2018 +0800

    ath10k: fix use-after-free in ath10k_wmi_cmd_send_nowait
    
    The skb may be freed in tx completion context before
    trace_ath10k_wmi_cmd is called. This can be easily captured when
    KASAN(Kernel Address Sanitizer) is enabled. The fix is to move
    trace_ath10k_wmi_cmd before the send operation. As the ret has no
    meaning in trace_ath10k_wmi_cmd then, so remove this parameter too.
    
    Signed-off-by: Carl Huang <cjhuang@codeaurora.org>
    Tested-by: Brian Norris <briannorris@chromium.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit e1a2ee249b19c3a65de893150d2045099c693bc3
Author: Israel Rukshin <israelr@mellanox.com>
Date:   Wed Mar 14 10:22:45 2018 +0000

    nvmet-rdma: Fix use after free in nvmet_rdma_cm_handler()
    
    We free nvmet rdma queues while handling rdma_cm events.
    In order to avoid this we destroy the qp and the queue after destroying
    the cm_id which guarantees that all rdma_cm events are done.
    
    Signed-off-by: Israel Rukshin <israelr@mellanox.com>
    Reviewed-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 594619497f3d6d4b8d8440e6d380e8da9dcc9eeb
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Thu Mar 22 13:44:56 2018 -0500

    net/mlx5: Fix use-after-free
    
    _rule_ is being freed and then dereferenced by accessing rule->ctx
    
    Fix this by copying the value returned by PTR_ERR(rule->ctx) into a local
    variable for its safe use after freeing _rule_
    
    Addresses-Coverity-ID: 1466041 ("Read from pointer after free")
    Fixes: 05564d0ae075 ("net/mlx5: Add flow-steering commands for FPGA IPSec implementation")
    Reviewed-by: Yuval Shaia <yuval.shaia@oracle.com>
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8348e0460ab1473f06c8b824699dd2eed3c1979d
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Tue Mar 20 15:03:02 2018 -0700

    hv_netvsc: disable NAPI before channel close
    
    This makes sure that no CPU is still process packets when
    the channel is closed.
    
    Fixes: 76bb5db5c749 ("netvsc: fix use after free on module removal")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d92191aa84e5f187d543867c3d54b38f294833fa
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Mar 21 13:55:42 2018 +0100

    netfilter: nf_tables: cache device name in flowtable object
    
    Devices going away have to grab the nfnl_lock from the netdev event path
    to avoid races with control plane updates.
    
    However, netlink dumps in netfilter do not hold nfnl_lock mutex. Cache
    the device name into the objects to avoid an use-after-free situation
    for a device that is going away.
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 10ff6be6de59e1c7d0bd5d899f896ce991f4fdc2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Mar 19 13:34:01 2018 +0300

    scsi: dpt_i2o: use after free in __adpt_reset()
    
    In __adpt_reset() the problem is that adpt_hba_reset() frees "pHba" on
    error but we dereference it to print the name in the error message.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 24268fd1ad3213079f1af09359b4243fffa95869
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Mar 19 13:33:03 2018 +0300

    scsi: dpt_i2o: use after free in adpt_release()
    
    The scsi_host_put() function frees "pHba" and then we dereference it on
    the next line when we do "scsi_host_put(pHba->host);".
    
    [mkp: included fix from hch]
    
    Fixes: 38e09e3bb056 ("scsi: dpt_i2o: stop using scsi_unregister")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 8cfd36a0b53aeb4ec21d81eb79706697b84dfc3d
Author: Benjamin Beichler <benjamin.beichler@uni-rostock.de>
Date:   Wed Mar 7 18:11:07 2018 +0100

    mac80211_hwsim: fix use-after-free bug in hwsim_exit_net
    
    When destroying a net namespace, all hwsim interfaces, which are not
    created in default namespace are deleted. But the async deletion of the
    interfaces could last longer than the actual destruction of the
    namespace, which results to an use after free bug. Therefore use
    synchronous deletion in this case.
    
    Fixes: 100cb9ff40e0 ("mac80211_hwsim: Allow managing radios from non-initial namespaces")
    Reported-by: syzbot+70ce058e01259de7bb1d@syzkaller.appspotmail.com
    Signed-off-by: Benjamin Beichler <benjamin.beichler@uni-rostock.de>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 088e7c16170645f1e2298ec6e0029079ef603635
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Mar 15 09:37:08 2018 -0400

    drm/amdgpu: Disable irq on device before destroying it
    
    Disable irq on devices before destroying them. That prevents
    use-after-free memory access when unloading the driver.
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ed65a4dc22083e73bac599ded6a262318cad7baf
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Mon Mar 19 14:20:15 2018 +0200

    RDMA/ucma: Fix use-after-free access in ucma_close
    
    The error in ucma_create_id() left ctx in the list of contexts belong
    to ucma file descriptor. The attempt to close this file descriptor causes
    to use-after-free accesses while iterating over such list.
    
    Fixes: 75216638572f ("RDMA/cma: Export rdma cm interface to userspace")
    Reported-by: <syzbot+dcfd344365a56fbebd0f@syzkaller.appspotmail.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Reviewed-by: Sean Hefty <sean.hefty@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit b3a5d111994450909158929560906f2c1c6c1d85
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Mar 14 12:45:12 2018 -0700

    percpu_ref: Update doc to dissuade users from depending on internal RCU grace periods
    
    percpu_ref internally uses sched-RCU to implement the percpu -> atomic
    mode switching and the documentation suggested that this could be
    depended upon.  This doesn't seem like a good idea.
    
    * percpu_ref uses sched-RCU which has different grace periods regular
      RCU.  Users may combine percpu_ref with regular RCU usage and
      incorrectly believe that regular RCU grace periods are performed by
      percpu_ref.  This can lead to, for example, use-after-free due to
      premature freeing.
    
    * percpu_ref has a grace period when switching from percpu to atomic
      mode.  It doesn't have one between the last put and release.  This
      distinction is subtle and can lead to surprising bugs.
    
    * percpu_ref allows starting in and switching to atomic mode manually
      for debugging and other purposes.  This means that there may not be
      any grace periods from kill to release.
    
    This patch makes it clear that the grace periods are percpu_ref's
    internal implementation detail and can't be depended upon by the
    users.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: Kent Overstreet <kent.overstreet@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit 9ffd7503944ec7c0ef41c3245d1306c221aef2be
Author: Andri Yngvason <andri.yngvason@marel.com>
Date:   Thu Mar 15 18:23:17 2018 +0000

    can: cc770: Fix use after free in cc770_tx_interrupt()
    
    This fixes use after free introduced by the last cc770 patch.
    
    Signed-off-by: Andri Yngvason <andri.yngvason@marel.com>
    Fixes: 746201235b3f ("can: cc770: Fix queue stall & dropped RTR reply")
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit cce6294cc2eaa083482e1d85d8db5845c82a7e14
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 14 18:53:00 2018 -0700

    net: sched: fix uses after free
    
    syzbot reported one use-after-free in pfifo_fast_enqueue() [1]
    
    Issue here is that we can not reuse skb after a successful skb_array_produce()
    since another cpu might have consumed it already.
    
    I believe a similar problem exists in try_bulk_dequeue_skb_slow()
    in case we put an skb into qdisc_enqueue_skb_bad_txq() for lockless qdisc.
    
    [1]
    BUG: KASAN: use-after-free in qdisc_pkt_len include/net/sch_generic.h:610 [inline]
    BUG: KASAN: use-after-free in qdisc_qstats_cpu_backlog_inc include/net/sch_generic.h:712 [inline]
    BUG: KASAN: use-after-free in pfifo_fast_enqueue+0x4bc/0x5e0 net/sched/sch_generic.c:639
    Read of size 4 at addr ffff8801cede37e8 by task syzkaller717588/5543
    
    CPU: 1 PID: 5543 Comm: syzkaller717588 Not tainted 4.16.0-rc4+ #265
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x24d lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report+0x23c/0x360 mm/kasan/report.c:412
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:432
     qdisc_pkt_len include/net/sch_generic.h:610 [inline]
     qdisc_qstats_cpu_backlog_inc include/net/sch_generic.h:712 [inline]
     pfifo_fast_enqueue+0x4bc/0x5e0 net/sched/sch_generic.c:639
     __dev_xmit_skb net/core/dev.c:3216 [inline]
    
    Fixes: c5ad119fb6c0 ("net: sched: pfifo_fast use skb_array")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot+ed43b6903ab968b16f54@syzkaller.appspotmail.com
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc:     Cong Wang <xiyou.wangcong@gmail.com>
    Cc:     Jiri Pirko <jiri@resnulli.us>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 95da6e96f1e74e6ddfb347f7a8310f419bb47bf7
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Mar 14 12:45:10 2018 -0700

    RDMAVT: Fix synchronization around percpu_ref
    
    rvt_mregion uses percpu_ref for reference counting and RCU to protect
    accesses from lkey_table.  When a rvt_mregion needs to be freed, it
    first gets unregistered from lkey_table and then rvt_check_refs() is
    called to wait for in-flight usages before the rvt_mregion is freed.
    
    rvt_check_refs() seems to have a couple issues.
    
    * It has a fast exit path which tests percpu_ref_is_zero().  However,
      a percpu_ref reading zero doesn't mean that the object can be
      released.  In fact, the ->release() callback might not even have
      started executing yet.  Proceeding with freeing can lead to
      use-after-free.
    
    * lkey_table is RCU protected but there is no RCU grace period in the
      free path.  percpu_ref uses RCU internally but it's sched-RCU whose
      grace periods are different from regular RCU.  Also, it generally
      isn't a good idea to depend on internal behaviors like this.
    
    To address the above issues, this patch removes the fast exit and adds
    an explicit synchronize_rcu().
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Acked-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Cc: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Cc: linux-rdma@vger.kernel.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 0aee4c259849099cb07ead6cd7fff74e561d5225
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Mar 12 14:15:25 2018 -0400

    sctp: Fix double free in sctp_sendmsg_to_asoc
    
    syzbot/kasan detected a double free in sctp_sendmsg_to_asoc:
    BUG: KASAN: use-after-free in sctp_association_free+0x7b7/0x930
    net/sctp/associola.c:332
    Read of size 8 at addr ffff8801d8006ae0 by task syzkaller914861/4202
    
    CPU: 1 PID: 4202 Comm: syzkaller914861 Not tainted 4.16.0-rc4+ #258
    Hardware name: Google Google Compute Engine/Google Compute Engine
    01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x24d lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:256
     kasan_report_error mm/kasan/report.c:354 [inline]
     kasan_report+0x23c/0x360 mm/kasan/report.c:412
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
     sctp_association_free+0x7b7/0x930 net/sctp/associola.c:332
     sctp_sendmsg+0xc67/0x1a80 net/sctp/socket.c:2075
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:763
     sock_sendmsg_nosec net/socket.c:629 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:639
     SYSC_sendto+0x361/0x5c0 net/socket.c:1748
     SyS_sendto+0x40/0x50 net/socket.c:1716
     do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    This was introduced by commit:
    f84af33 sctp: factor out sctp_sendmsg_to_asoc from sctp_sendmsg
    
    As the newly refactored function moved the wait_for_sndbuf call to a
    point after the association was connected, allowing for peeloff events
    to occur, which in turn caused wait_for_sndbuf to return -EPIPE which
    was not caught by the logic that determines if an association should be
    freed or not.
    
    Fix it the easy way by returning the ordering of
    sctp_primitive_ASSOCIATE and sctp_wait_for_sndbuf to the old order, to
    ensure that EPIPE will not happen.
    
    Tested by myself using the syzbot reproducers with positive results
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: davem@davemloft.net
    CC: Xin Long <lucien.xin@gmail.com>
    Reported-by: syzbot+a4e4112c3aff00c8cfd8@syzkaller.appspotmail.com
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 74b44bbe80b4c62113ac1501482ea1ee40eb9d67
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Mar 14 12:10:18 2018 -0700

    RDMAVT: Fix synchronization around percpu_ref
    
    rvt_mregion uses percpu_ref for reference counting and RCU to protect
    accesses from lkey_table.  When a rvt_mregion needs to be freed, it
    first gets unregistered from lkey_table and then rvt_check_refs() is
    called to wait for in-flight usages before the rvt_mregion is freed.
    
    rvt_check_refs() seems to have a couple issues.
    
    * It has a fast exit path which tests percpu_ref_is_zero().  However,
      a percpu_ref reading zero doesn't mean that the object can be
      released.  In fact, the ->release() callback might not even have
      started executing yet.  Proceeding with freeing can lead to
      use-after-free.
    
    * lkey_table is RCU protected but there is no RCU grace period in the
      free path.  percpu_ref uses RCU internally but it's sched-RCU whose
      grace periods are different from regular RCU.  Also, it generally
      isn't a good idea to depend on internal behaviors like this.
    
    To address the above issues, this patch removes the fast exit and adds
    an explicit synchronize_rcu().
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Acked-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Cc: Mike Marciniszyn <mike.marciniszyn@intel.com>
    Cc: linux-rdma@vger.kernel.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>

commit e0c24bddf07c7735860fe654061938218732c92d
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Mon Feb 12 15:45:47 2018 +1030

    fsi: master: Clarify master lifetimes & fix use-after-free in hub master
    
    Once we call fsi_master_unregister, the core will put_device,
    potentially freeing the hub master. This change adds a comment
    explaining the lifetime of an allocated fsi_master.
    
    We then add a reference from the driver to the hub master, so it stays
    around until we've finished ->remove().
    
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Tested-by: Christopher Bostic <cbostic@linux.vnet.ibm.com>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc3cc75281b3c2b1c5355d88d147b66a753bb9a5
Author: Christophe Jaillet <christophe.jaillet@wanadoo.fr>
Date:   Tue Mar 13 19:36:58 2018 +0100

    spi: bcm-qspi: fIX some error handling paths
    
    For some reason, commit c0368e4db4a3 ("spi: bcm-qspi: Fix use after free
    in bcm_qspi_probe() in error path") has updated some gotos, but not all of
    them.
    
    This looks spurious, so fix it.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 720c84046c26444fe825f8614ddceb5c46539e67
Author: Mark Hairgrove <mhairgrove@nvidia.com>
Date:   Fri Feb 9 19:20:06 2018 -0800

    powerpc/npu-dma.c: Fix crash after __mmu_notifier_register failure
    
    pnv_npu2_init_context wasn't checking the return code from
    __mmu_notifier_register. If  __mmu_notifier_register failed, the
    npu_context was still assigned to the mm and the caller wasn't given any
    indication that things went wrong. Later on pnv_npu2_destroy_context would
    be called, which in turn called mmu_notifier_unregister and dropped
    mm->mm_count without having incremented it in the first place. This led to
    various forms of corruption like mm use-after-free and mm double-free.
    
    __mmu_notifier_register can fail with EINTR if a signal is pending, so
    this case can be frequent.
    
    This patch calls opal_npu_destroy_context on the failure paths, and makes
    sure not to assign mm->context.npu_context until past the failure points.
    
    Signed-off-by: Mark Hairgrove <mhairgrove@nvidia.com>
    Acked-By: Alistair Popple <alistair@popple.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit 2623c7a5f2799569d8bb05eb211da524a8144cb3
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Fri Mar 9 08:34:41 2018 +0000

    libata: add refcounting to ata_host
    
    After commit 9a6d6a2ddabb ("ata: make ata port as parent device of scsi
    host") manual driver unbind/remove causes use-after-free.
    
    Unbind unconditionally invokes devres_release_all() which calls
    ata_host_release() and frees ata_host/ata_port memory while it is still
    being referenced as a parent of SCSI host. When SCSI host is finally
    released scsi_host_dev_release() calls put_device(parent) and accesses
    freed ata_port memory.
    
    Add reference counting to make sure that ata_host lives long enough.
    
    Bug report: https://lkml.org/lkml/2017/11/1/945
    Fixes: 9a6d6a2ddabb ("ata: make ata port as parent device of scsi host")
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Lin Ming <minggr@gmail.com>
    Cc: linux-ide@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit b954f94023dcc61388c8384f0f14eb8e42c863c5
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Mar 12 14:54:24 2018 +0100

    l2tp: fix races with ipv4-mapped ipv6 addresses
    
    The l2tp_tunnel_create() function checks for v4mapped ipv6
    sockets and cache that flag, so that l2tp core code can
    reusing it at xmit time.
    
    If the socket is provided by the userspace, the connection
    status of the tunnel sockets can change between the tunnel
    creation and the xmit call, so that syzbot is able to
    trigger the following splat:
    
    BUG: KASAN: use-after-free in ip6_dst_idev include/net/ip6_fib.h:192
    [inline]
    BUG: KASAN: use-after-free in ip6_xmit+0x1f76/0x2260
    net/ipv6/ip6_output.c:264
    Read of size 8 at addr ffff8801bd949318 by task syz-executor4/23448
    
    CPU: 0 PID: 23448 Comm: syz-executor4 Not tainted 4.16.0-rc4+ #65
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x194/0x24d lib/dump_stack.c:53
      print_address_description+0x73/0x250 mm/kasan/report.c:256
      kasan_report_error mm/kasan/report.c:354 [inline]
      kasan_report+0x23c/0x360 mm/kasan/report.c:412
      __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:433
      ip6_dst_idev include/net/ip6_fib.h:192 [inline]
      ip6_xmit+0x1f76/0x2260 net/ipv6/ip6_output.c:264
      inet6_csk_xmit+0x2fc/0x580 net/ipv6/inet6_connection_sock.c:139
      l2tp_xmit_core net/l2tp/l2tp_core.c:1053 [inline]
      l2tp_xmit_skb+0x105f/0x1410 net/l2tp/l2tp_core.c:1148
      pppol2tp_sendmsg+0x470/0x670 net/l2tp/l2tp_ppp.c:341
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg+0xca/0x110 net/socket.c:640
      ___sys_sendmsg+0x767/0x8b0 net/socket.c:2046
      __sys_sendmsg+0xe5/0x210 net/socket.c:2080
      SYSC_sendmsg net/socket.c:2091 [inline]
      SyS_sendmsg+0x2d/0x50 net/socket.c:2087
      do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x42/0xb7
    RIP: 0033:0x453e69
    RSP: 002b:00007f819593cc68 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00007f819593d6d4 RCX: 0000000000453e69
    RDX: 0000000000000081 RSI: 000000002037ffc8 RDI: 0000000000000004
    RBP: 000000000072bea0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 00000000000004c3 R14: 00000000006f72e8 R15: 0000000000000000
    
    This change addresses the issues:
    * explicitly checking for TCP_ESTABLISHED for user space provided sockets
    * dropping the v4mapped flag usage - it can become outdated - and
      explicitly invoking ipv6_addr_v4mapped() instead
    
    The issue is apparently there since ancient times.
    
    v1 -> v2: (many thanks to Guillaume)
     - with csum issue introduced in v1
     - replace pr_err with pr_debug
     - fix build issue with IPV6 disabled
     - move l2tp_sk_is_v4mapped in l2tp_core.c
    
    v2 -> v3:
     - don't update inet_daddr for v4mapped address, unneeded
     - drop rendundant check at creation time
    
    Reported-and-tested-by: syzbot+92fa328176eb07e4ac1a@syzkaller.appspotmail.com
    Fixes: 3557baabf280 ("[L2TP]: PPP over L2TP driver core")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a35353bb9eb1990a44a0d7585f99e9589bcdb682
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Mon Jan 29 18:26:06 2018 +0100

    locking/atomic, asm-generic: Add KASAN instrumentation to atomic operations
    
    KASAN uses compiler instrumentation to intercept all memory accesses. But it does
    not see memory accesses done in assembly code. One notable user of assembly code
    is atomic operations. Frequently, for example, an atomic reference decrement is
    the last access to an object and a good candidate for a racy use-after-free.
    
    Add manual KASAN checks to atomic operations.
    
    Signed-off-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>,
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>,
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Will Deacon <will.deacon@arm.com>,
    Cc: kasan-dev@googlegroups.com
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/2fa6e7f0210fd20fe404e5b67e6e9213af2b69a1.1517246437.git.dvyukov@google.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 01c0b4265cc16bc1f43f475c5944c55c10d5768f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Mar 10 23:04:23 2018 +0100

    ALSA: pcm: Fix UAF in snd_pcm_oss_get_formats()
    
    snd_pcm_oss_get_formats() has an obvious use-after-free around
    snd_mask_test() calls, as spotted by syzbot.  The passed format_mask
    argument is a pointer to the hw_params object that is freed before the
    loop.  What a surprise that it has been present since the original
    code of decades ago...
    
    Reported-by: syzbot+4090700a4f13fccaf648@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit ad42febe51ae0a2e875f507a37a6329277f75fdd
Author: Tom Zanussi <tom.zanussi@linux.intel.com>
Date:   Mon Jan 15 20:51:45 2018 -0600

    tracing: Add hist trigger timestamp support
    
    Add support for a timestamp event field.  This is actually a 'pseudo-'
    event field in that it behaves like it's part of the event record, but
    is really part of the corresponding ring buffer event.
    
    To make use of the timestamp field, users can specify
    "common_timestamp" as a field name for any histogram.  Note that this
    doesn't make much sense on its own either as either a key or value,
    but needs to be supported even so, since follow-on patches will add
    support for making use of this field in time deltas.  The
    common_timestamp 'field' is not a bona fide event field - so you won't
    find it in the event description - but rather it's a synthetic field
    that can be used like a real field.
    
    Note that the use of this field requires the ring buffer be put into
    'absolute timestamp' mode, which saves the complete timestamp for each
    event rather than an offset.  This mode will be enabled if and only if
    a histogram makes use of the "common_timestamp" field.
    
    Link: http://lkml.kernel.org/r/97afbd646ed146e26271f3458b4b33e16d7817c2.1516069914.git.tom.zanussi@linux.intel.com
    
    Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Baohong Liu <baohong.liu@intel.com>
    [kasan use-after-free fix]
    Signed-off-by: Vedang Patel <vedang.patel@intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commit ec77789032c0d5ab77c32abd762f5a8e65198e1b
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Fri Mar 9 10:37:00 2018 +0800

    net: hns3: fix for use-after-free when setting ring parameter
    
    In hns3_set_ringparam, hns3_uninit_all_ring frees the
    memory pointed by priv->ring_data[i].ring, and
    hns3_change_all_ring_bd_num use that pointer without mallocing,
    which will cause a use-after-free problem.
    
    The patch fixes it by not freeing the memory in
    hns3_uninit_all_ring, and uses hns3_put_ring_config to free it
    when necessary.
    
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: Peng Li <lipeng321@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31135eb3887daf2ed3e88fbefc36243357a9008f
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Wed Feb 28 11:18:13 2018 +0200

    net/mlx5: Fix wrongly assigned CQ reference counter
    
    The kernel compiled with CONFIG_REFCOUNT_FULL produces the following
    error. The reason to it that initial value of refcount_t is supposed
    to be more than 0, change it.
    
    [    3.106634] ------------[ cut here ]------------
    [    3.107756] refcount_t: increment on 0; use-after-free.
    [    3.109130] WARNING: CPU: 0 PID: 1 at lib/refcount.c:153 refcount_inc+0x27/0x30
    [    3.110085] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.16.0-rc1-00028-gf683e04bdccc #137
    [    3.110085] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
    [    3.110085] RIP: 0010:refcount_inc+0x27/0x30
    [    3.110085] RSP: 0000:ffffaa620000fba0 EFLAGS: 00010286
    [    3.110085] RAX: 0000000000000000 RBX: ffff9a6d1a1821c8 RCX: ffffffff98a50f48
    [    3.110085] RDX: 0000000000000001 RSI: 0000000000000086 RDI: 0000000000000246
    [    3.110085] RBP: ffff9a6d1ac800a0 R08: 0000000000000289 R09: 000000000000000a
    [    3.110085] R10: fffff03bc0682840 R11: ffffffff9949856d R12: ffff9a6d1b4a4000
    [    3.110085] R13: 0000000000000000 R14: ffff9a6d1a0a6c00 R15: ffffaa620000fc5c
    [    3.110085] FS:  0000000000000000(0000) GS:ffff9a6d1fc00000(0000) knlGS:0000000000000000
    [    3.110085] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    3.110085] CR2: 0000000000000000 CR3: 000000000ba0a000 CR4: 00000000000006b0
    [    3.110085] Call Trace:
    [    3.110085]  mlx5_core_create_cq+0xde/0x250
    [    3.110085]  ? __kmalloc+0x1ce/0x1e0
    [    3.110085]  mlx5e_create_cq+0x15c/0x1e0
    [    3.110085]  mlx5e_open_drop_rq+0xea/0x190
    [    3.110085]  mlx5e_attach_netdev+0x53/0x140
    [    3.110085]  mlx5e_attach+0x3d/0x60
    [    3.110085]  mlx5e_add+0x11d/0x2f0
    [    3.110085]  mlx5_add_device+0x77/0x170
    [    3.110085]  mlx5_register_interface+0x74/0xc0
    [    3.110085]  ? set_debug_rodata+0x11/0x11
    [    3.110085]  init+0x67/0x72
    [    3.110085]  ? mlx4_en_init_ptys2ethtool_map+0x346/0x346
    [    3.110085]  do_one_initcall+0x98/0x147
    [    3.110085]  ? set_debug_rodata+0x11/0x11
    [    3.110085]  kernel_init_freeable+0x164/0x1e0
    [    3.110085]  ? rest_init+0xb0/0xb0
    [    3.110085]  kernel_init+0xa/0x100
    [    3.110085]  ret_from_fork+0x35/0x40
    [    3.110085] Code: 00 00 00 00 e8 ab ff ff ff 84 c0 74 02 f3 c3 80 3d 3b c3 64 01 00 75 f5 48 c7 c7 68 0b 81 98 c6 05 2b c3 64 01 01 e8 79 d7 a3 ff <0f> ff c3 66 0f 1f 44 00 00 8b 06 83 f8 ff 74 39 31 c9 39 f8 89
    [    3.110085] ---[ end trace a0068e1c68438a74 ]---
    
    Fixes: f105b45bf77c ("net/mlx5: CQ hold/put API")
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit 67f93df79aeefc3add4e4b31a752600f834236e2
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Tue Mar 6 22:57:01 2018 +0300

    dccp: check sk for closed state in dccp_sendmsg()
    
    dccp_disconnect() sets 'dp->dccps_hc_tx_ccid' tx handler to NULL,
    therefore if DCCP socket is disconnected and dccp_sendmsg() is
    called after it, it will cause a NULL pointer dereference in
    dccp_write_xmit().
    
    This crash and the reproducer was reported by syzbot. Looks like
    it is reproduced if commit 69c64866ce07 ("dccp: CVE-2017-8824:
    use-after-free in DCCP code") is applied.
    
    Reported-by: syzbot+f99ab3887ab65d70f816@syzkaller.appspotmail.com
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a087f032111a88e826877449dfb93ceb22b78b9
Author: Xinyong <xinyong.fang@linux.alibaba.com>
Date:   Fri Mar 2 19:20:07 2018 +0800

    usb: gadget: f_fs: Fix use-after-free in ffs_fs_kill_sb()
    
    When I debug a kernel crash issue in funcitonfs, found ffs_data.ref
    overflowed, While functionfs is unmounting, ffs_data is put twice.
    
    Commit 43938613c6fd ("drivers, usb: convert ffs_data.ref from atomic_t to
    refcount_t") can avoid refcount overflow, but that is risk some situations.
    So no need put ffs data in ffs_fs_kill_sb, already put in ffs_data_closed.
    
    The issue can be reproduced in Mediatek mt6763 SoC, ffs for ADB device.
    KASAN enabled configuration reports use-after-free errro.
    
    BUG: KASAN: use-after-free in refcount_dec_and_test+0x14/0xe0 at addr ffffffc0579386a0
    Read of size 4 by task umount/4650
    ====================================================
    BUG kmalloc-512 (Tainted: P        W  O   ): kasan: bad access detected
    -----------------------------------------------------------------------------
    
    INFO: Allocated in ffs_fs_mount+0x194/0x844 age=22856 cpu=2 pid=566
        alloc_debug_processing+0x1ac/0x1e8
        ___slab_alloc.constprop.63+0x640/0x648
        __slab_alloc.isra.57.constprop.62+0x24/0x34
        kmem_cache_alloc_trace+0x1a8/0x2bc
        ffs_fs_mount+0x194/0x844
        mount_fs+0x6c/0x1d0
        vfs_kern_mount+0x50/0x1b4
        do_mount+0x258/0x1034
    INFO: Freed in ffs_data_put+0x25c/0x320 age=0 cpu=3 pid=4650
        free_debug_processing+0x22c/0x434
        __slab_free+0x2d8/0x3a0
        kfree+0x254/0x264
        ffs_data_put+0x25c/0x320
        ffs_data_closed+0x124/0x15c
        ffs_fs_kill_sb+0xb8/0x110
        deactivate_locked_super+0x6c/0x98
        deactivate_super+0xb0/0xbc
    INFO: Object 0xffffffc057938600 @offset=1536 fp=0x          (null)
    ......
    Call trace:
    [<ffffff900808cf5c>] dump_backtrace+0x0/0x250
    [<ffffff900808d3a0>] show_stack+0x14/0x1c
    [<ffffff90084a8c04>] dump_stack+0xa0/0xc8
    [<ffffff900826c2b4>] print_trailer+0x158/0x260
    [<ffffff900826d9d8>] object_err+0x3c/0x40
    [<ffffff90082745f0>] kasan_report_error+0x2a8/0x754
    [<ffffff9008274f84>] kasan_report+0x5c/0x60
    [<ffffff9008273208>] __asan_load4+0x70/0x88
    [<ffffff90084cd81c>] refcount_dec_and_test+0x14/0xe0
    [<ffffff9008d98f9c>] ffs_data_put+0x80/0x320
    [<ffffff9008d9d904>] ffs_fs_kill_sb+0xc8/0x110
    [<ffffff90082852a0>] deactivate_locked_super+0x6c/0x98
    [<ffffff900828537c>] deactivate_super+0xb0/0xbc
    [<ffffff90082af0c0>] cleanup_mnt+0x64/0xec
    [<ffffff90082af1b0>] __cleanup_mnt+0x10/0x18
    [<ffffff90080d9e68>] task_work_run+0xcc/0x124
    [<ffffff900808c8c0>] do_notify_resume+0x60/0x70
    [<ffffff90080866e4>] work_pending+0x10/0x14
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Xinyong <xinyong.fang@linux.alibaba.com>
    
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 39a751a4cb7e4798f0ce1169ec92de4a1aae39e3
Author: Frank Rowand <frank.rowand@sony.com>
Date:   Mon Feb 12 00:19:42 2018 -0800

    of: change overlay apply input data from unflattened to FDT
    
    Move duplicating and unflattening of an overlay flattened devicetree
    (FDT) into the overlay application code.  To accomplish this,
    of_overlay_apply() is replaced by of_overlay_fdt_apply().
    
    The copy of the FDT (aka "duplicate FDT") now belongs to devicetree
    code, which is thus responsible for freeing the duplicate FDT.  The
    caller of of_overlay_fdt_apply() remains responsible for freeing the
    original FDT.
    
    The unflattened devicetree now belongs to devicetree code, which is
    thus responsible for freeing the unflattened devicetree.
    
    These ownership changes prevent early freeing of the duplicated FDT
    or the unflattened devicetree, which could result in use after free
    errors.
    
    of_overlay_fdt_apply() is a private function for the anticipated
    overlay loader.
    
    Update unittest.c to use of_overlay_fdt_apply() instead of
    of_overlay_apply().
    
    Move overlay fragments from artificial locations in
    drivers/of/unittest-data/tests-overlay.dtsi into one devicetree
    source file per overlay.  This led to changes in
    drivers/of/unitest-data/Makefile and drivers/of/unitest.c.
    
      - Add overlay directives to the overlay devicetree source files so
        that dtc will compile them as true overlays into one FDT data
        chunk per overlay.
    
      - Set CFLAGS for drivers/of/unittest-data/testcases.dts so that
        symbols will be generated for overlay resolution of overlays
        that are no longer artificially contained in testcases.dts
    
      - Unflatten and apply each unittest overlay FDT using
        of_overlay_fdt_apply().
    
      - Enable the of_resolve_phandles() check for whether the unflattened
        overlay is detached.  This check was previously disabled because the
        overlays from tests-overlay.dtsi were not unflattened into detached
        trees.
    
      - Other changes to unittest.c infrastructure to manage multiple test
        FDTs built into the kernel image (access by name instead of
        arbitrary number).
    
      - of_unittest_overlay_high_level(): previously unused code to add
        properties from the overlay_base devicetree to the live tree
        was triggered by the restructuring of tests-overlay.dtsi and thus
        testcases.dts.  This exposed two bugs: (1) the need to dup a
        property before adding it, and (2) property 'name' is
        auto-generated in the unflatten code and thus will be a duplicate
        in the __symbols__ node - do not treat this duplicate as an error.
    
    Signed-off-by: Frank Rowand <frank.rowand@sony.com>

commits)
      block: fix a typo
      block: display the correct diskname for bio
      block: fix the count of PGPGOUT for WRITE_SAME
      mq-deadline: Make sure to always unlock zones
      nvmet: fix PSDT field check in command format
      nvme-multipath: fix sysfs dangerously created links
      nbd: fix return value in error handling path
      bcache: fix kcrashes with fio in RAID5 backend dev
      bcache: correct flash only vols (check all uuids)
      blktrace_api.h: fix comment for struct blk_user_trace_setup
      blockdev: Avoid two active bdev inodes for one device
      genhd: Fix BUG in blkdev_open()
      genhd: Fix use after free in __blkdev_get()
      genhd: Add helper put_disk_and_module()
      genhd: Rename get_disk() to get_disk_and_module()
      genhd: Fix leaked module reference for NVME devices
      direct-io: Fix sleep in atomic due to sync AIO
      nvme-pci: Fix nvme queue cleanup if IRQ setup fails
      block: kyber: fix domain token leak during requeue
      blk-mq: don't call io sched's .requeue_request when requeueing rq to ->dispatch
      ...

commit 367a35a6c6c7ea84fe3f47825668ca017cb566ed
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Feb 28 09:47:32 2018 +0000

    drm/i915: Don't deref request->ctx inside unlocked print_request()
    
    Although we protect the request itself, we don't lock inside
    intel_engine_dump() and so the request maybe retired as we peek into it.
    One consequence is that the request->ctx may be freed before we
    dereference it, leading to a use-after-free. Replace the hw_id we are
    peeking from inside request->ctx with the request->fence.context, with
    which we can still track from which context the request originated
    (although to tie to HW reports requires a little more legwork, but is
    good enough to follow the GEM traces).
    
    [52640.729670] general protection fault: 0000 [#2] SMP
    [52640.729694] Dumping ftrace buffer:
    [52640.729701]    (ftrace buffer empty)
    [52640.729705] Modules linked in: vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_\
    temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul snd_hda_intel snd_hda_codec snd_hwdep gha\
    sh_clmulni_intel snd_hda_core snd_pcm mei_me mei i915 r8169 mii prime_numbers i2c_hid
    [52640.729748] CPU: 2 PID: 4335 Comm: gem_exec_schedu Tainted: G     UD W        4.16.0-rc3+ #7
    [52640.729759] Hardware name: Acer Aspire E5-575G/Ironman_SK  , BIOS V1.12 08/02/2016
    [52640.729803] RIP: 0010:print_request+0x2b/0xb0 [i915]
    [52640.729811] RSP: 0018:ffffc90001453c18 EFLAGS: 00010206
    [52640.729820] RAX: 6b6b6b6b6b6b6b6b RBX: ffff8801e0292d40 RCX: 0000000000000006
    [52640.729829] RDX: ffffc90001453c60 RSI: ffff8801e0292d40 RDI: 0000000000000003
    [52640.729838] RBP: ffffc90001453d80 R08: 0000000000000000 R09: 0000000000000001
    [52640.729847] R10: ffffc90001453bd0 R11: ffffc90001453c73 R12: ffffc90001453c60
    [52640.729856] R13: ffffc90001453d80 R14: ffff8801d5a683c8 R15: ffff8801e0292d40
    [52640.729866] FS:  00007f1ee50548c0(0000) GS:ffff8801e8200000(0000) knlGS:0000000000000000
    [52640.729876] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [52640.729884] CR2: 00007f1ee5077000 CR3: 00000001d9411004 CR4: 00000000003606e0
    [52640.729893] Call Trace:
    [52640.729922]  intel_engine_print_registers+0x623/0x890 [i915]
    [52640.729948]  intel_engine_dump+0x4a3/0x590 [i915]
    [52640.729957]  ? seq_printf+0x3a/0x50
    [52640.729977]  i915_engine_info+0xb8/0xe0 [i915]
    [52640.729984]  ? drm_mode_gamma_get_ioctl+0xf0/0xf0
    [52640.729990]  seq_read+0xd5/0x410
    [52640.729997]  full_proxy_read+0x4b/0x70
    [52640.730004]  __vfs_read+0x1e/0x120
    [52640.730009]  ? do_sys_open+0x134/0x220
    [52640.730015]  ? kmem_cache_free+0x174/0x2b0
    [52640.730021]  vfs_read+0xa1/0x150
    [52640.730026]  SyS_read+0x40/0xa0
    [52640.730032]  do_syscall_64+0x65/0x1a0
    [52640.730038]  entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    Reported-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180228094732.28462-1-chris@chris-wilson.co.uk

commit 28f5bfb819195ad9c2eb9486babe7b0e4efe925f
Author: James Chapman <jchapman@katalix.com>
Date:   Fri Feb 23 17:45:47 2018 +0000

    l2tp: fix tunnel lookup use-after-free race
    
    l2tp_tunnel_get walks the tunnel list to find a matching tunnel
    instance and if a match is found, its refcount is increased before
    returning the tunnel pointer. But when tunnel objects are destroyed,
    they are on the tunnel list after their refcount hits zero. Fix this
    by moving the code that removes the tunnel from the tunnel list from
    the tunnel socket destructor into in the l2tp_tunnel_delete path,
    before the tunnel refcount is decremented.
    
    refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 3 PID: 13507 at lib/refcount.c:153 refcount_inc+0x47/0x50
    Modules linked in:
    CPU: 3 PID: 13507 Comm: syzbot_6e6a5ec8 Not tainted 4.16.0-rc2+ #36
    Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    RIP: 0010:refcount_inc+0x47/0x50
    RSP: 0018:ffff8800136ffb20 EFLAGS: 00010286
    RAX: dffffc0000000008 RBX: ffff880017068e68 RCX: ffffffff814d3333
    RDX: 0000000000000000 RSI: ffff88001a59f6d8 RDI: ffff88001a59f6d8
    RBP: ffff8800136ffb28 R08: 0000000000000000 R09: 0000000000000000
    R10: ffff8800136ffab0 R11: 0000000000000000 R12: ffff880017068e50
    R13: 0000000000000000 R14: ffff8800174da800 R15: 0000000000000004
    FS:  00007f403ab1e700(0000) GS:ffff88001a580000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000205fafd2 CR3: 0000000016770000 CR4: 00000000000006e0
    Call Trace:
     l2tp_tunnel_get+0x2dd/0x4e0
     pppol2tp_connect+0x428/0x13c0
     ? pppol2tp_session_create+0x170/0x170
     ? __might_fault+0x115/0x1d0
     ? lock_downgrade+0x860/0x860
     ? __might_fault+0xe5/0x1d0
     ? security_socket_connect+0x8e/0xc0
     SYSC_connect+0x1b6/0x310
     ? SYSC_bind+0x280/0x280
     ? __do_page_fault+0x5d1/0xca0
     ? up_read+0x1f/0x40
     ? __do_page_fault+0x3c8/0xca0
     SyS_connect+0x29/0x30
     ? SyS_accept+0x40/0x40
     do_syscall_64+0x1e0/0x730
     ? trace_hardirqs_off_thunk+0x1a/0x1c
     entry_SYSCALL_64_after_hwframe+0x42/0xb7
    RIP: 0033:0x7f403a42f259
    RSP: 002b:00007f403ab1dee8 EFLAGS: 00000296 ORIG_RAX: 000000000000002a
    RAX: ffffffffffffffda RBX: 00000000205fafe4 RCX: 00007f403a42f259
    RDX: 000000000000002e RSI: 00000000205fafd2 RDI: 0000000000000004
    RBP: 00007f403ab1df20 R08: 00007f403ab1e700 R09: 0000000000000000
    R10: 00007f403ab1e700 R11: 0000000000000296 R12: 0000000000000000
    R13: 00007ffc81906cbf R14: 0000000000000000 R15: 00007f403ab2b040
    Code: 3b ff 5b 5d c3 e8 ca 5f 3b ff 80 3d 49 8e 66 04 00 75 ea e8 bc 5f 3b ff 48 c7 c7 60 69 64 85 c6 05 34 8e 66 04 01 e8 59 49 15 ff <0f> 0b eb ce 0f 1f 44 00 00 55 48 89 e5 41 56 41 55 41 54 53 49
    
    Fixes: f8ccac0e44934 ("l2tp: put tunnel socket release on a workqueue")
    Reported-and-tested-by: syzbot+19c09769f14b48810113@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+347bd5acde002e353a36@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+6e6a5ec8de31a94cd015@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+9df43faf09bd400f2993@syzkaller.appspotmail.com
    Signed-off-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 225eb26489d05c679a4c4197ffcb81c81e9dcaf4
Author: James Chapman <jchapman@katalix.com>
Date:   Fri Feb 23 17:45:44 2018 +0000

    l2tp: don't use inet_shutdown on ppp session destroy
    
    Previously, if a ppp session was closed, we called inet_shutdown to mark
    the socket as unconnected such that userspace would get errors and
    then close the socket. This could race with userspace closing the
    socket. Instead, leave userspace to close the socket in its own time
    (our session will be detached anyway).
    
    BUG: KASAN: use-after-free in inet_shutdown+0x5d/0x1c0
    Read of size 4 at addr ffff880010ea3ac0 by task syzbot_347bd5ac/8296
    
    CPU: 3 PID: 8296 Comm: syzbot_347bd5ac Not tainted 4.16.0-rc1+ #91
    Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    Call Trace:
     dump_stack+0x101/0x157
     ? inet_shutdown+0x5d/0x1c0
     print_address_description+0x78/0x260
     ? inet_shutdown+0x5d/0x1c0
     kasan_report+0x240/0x360
     __asan_load4+0x78/0x80
     inet_shutdown+0x5d/0x1c0
     ? pppol2tp_show+0x80/0x80
     pppol2tp_session_close+0x68/0xb0
     l2tp_tunnel_closeall+0x199/0x210
     ? udp_v6_flush_pending_frames+0x90/0x90
     l2tp_udp_encap_destroy+0x6b/0xc0
     ? l2tp_tunnel_del_work+0x2e0/0x2e0
     udpv6_destroy_sock+0x8c/0x90
     sk_common_release+0x47/0x190
     udp_lib_close+0x15/0x20
     inet_release+0x85/0xd0
     inet6_release+0x43/0x60
     sock_release+0x53/0x100
     ? sock_alloc_file+0x260/0x260
     sock_close+0x1b/0x20
     __fput+0x19f/0x380
     ____fput+0x1a/0x20
     task_work_run+0xd2/0x110
     exit_to_usermode_loop+0x18d/0x190
     do_syscall_64+0x389/0x3b0
     entry_SYSCALL_64_after_hwframe+0x26/0x9b
    RIP: 0033:0x7fe240a45259
    RSP: 002b:00007fe241132df8 EFLAGS: 00000297 ORIG_RAX: 0000000000000003
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00007fe240a45259
    RDX: 00007fe240a45259 RSI: 0000000000000000 RDI: 00000000000000a5
    RBP: 00007fe241132e20 R08: 00007fe241133700 R09: 0000000000000000
    R10: 00007fe241133700 R11: 0000000000000297 R12: 0000000000000000
    R13: 00007ffc49aff84f R14: 0000000000000000 R15: 00007fe241141040
    
    Allocated by task 8331:
     save_stack+0x43/0xd0
     kasan_kmalloc+0xad/0xe0
     kasan_slab_alloc+0x12/0x20
     kmem_cache_alloc+0x144/0x3e0
     sock_alloc_inode+0x22/0x130
     alloc_inode+0x3d/0xf0
     new_inode_pseudo+0x1c/0x90
     sock_alloc+0x30/0x110
     __sock_create+0xaa/0x4c0
     SyS_socket+0xbe/0x130
     do_syscall_64+0x128/0x3b0
     entry_SYSCALL_64_after_hwframe+0x26/0x9b
    
    Freed by task 8314:
     save_stack+0x43/0xd0
     __kasan_slab_free+0x11a/0x170
     kasan_slab_free+0xe/0x10
     kmem_cache_free+0x88/0x2b0
     sock_destroy_inode+0x49/0x50
     destroy_inode+0x77/0xb0
     evict+0x285/0x340
     iput+0x429/0x530
     dentry_unlink_inode+0x28c/0x2c0
     __dentry_kill+0x1e3/0x2f0
     dput.part.21+0x500/0x560
     dput+0x24/0x30
     __fput+0x2aa/0x380
     ____fput+0x1a/0x20
     task_work_run+0xd2/0x110
     exit_to_usermode_loop+0x18d/0x190
     do_syscall_64+0x389/0x3b0
     entry_SYSCALL_64_after_hwframe+0x26/0x9b
    
    Fixes: fd558d186df2c ("l2tp: Split pppol2tp patch into separate l2tp and ppp parts")
    Signed-off-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 897366537fb65e87755b822360c230354c3fc73b
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 26 13:01:40 2018 +0100

    genhd: Fix use after free in __blkdev_get()
    
    When two blkdev_open() calls race with device removal and recreation,
    __blkdev_get() can use looked up gendisk after it is freed:
    
    CPU0                            CPU1                    CPU2
                                                            del_gendisk(disk);
                                                              bdev_unhash_inode(inode);
    blkdev_open()                   blkdev_open()
      bdev = bd_acquire(inode);
        - creates and returns new inode
                                      bdev = bd_acquire(inode);
                                        - returns the same inode
      __blkdev_get(devt)              __blkdev_get(devt)
        disk = get_gendisk(devt);
          - got structure of device going away
                                                            <finish device removal>
                                                            <new device gets
                                                             created under the same
                                                             device number>
                                      disk = get_gendisk(devt);
                                        - got new device structure
                                      if (!bdev->bd_openers) {
                                        does the first open
                                      }
        if (!bdev->bd_openers)
          - false
        } else {
          put_disk_and_module(disk)
            - remember this was old device - this was last ref and disk is
              now freed
        }
        disk_unblock_events(disk); -> oops
    
    Fix the problem by making sure we drop reference to disk in
    __blkdev_get() only after we are really done with it.
    
    Reported-by: Hou Tao <houtao1@huawei.com>
    Tested-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit b078556aecd791b0e5cb3a59f4c3a14273b52121
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Feb 19 08:10:17 2018 +0100

    netfilter: ipv6: fix use-after-free Write in nf_nat_ipv6_manip_pkt
    
    l4proto->manip_pkt() can cause reallocation of skb head so pointer
    to the ipv6 header must be reloaded.
    
    Reported-and-tested-by: <syzbot+10005f4292fc9cc89de7@syzkaller.appspotmail.com>
    Fixes: 58a317f1061c89 ("netfilter: ipv6: add IPv6 NAT support")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commits)
      net_sched: gen_estimator: fix broken estimators based on percpu stats
      gianfar: simplify FCS handling and fix memory leak
      ipv6 sit: work around bogus gcc-8 -Wrestrict warning
      macvlan: fix use-after-free in macvlan_common_newlink()
      bpf, arm64: fix out of bounds access in tail call
      bpf, x64: implement retpoline for tail call
      rxrpc: Fix send in rxrpc_send_data_packet()
      net: aquantia: Fix error handling in aq_pci_probe()
      bpf: fix rcu lockdep warning for lpm_trie map_free callback
      bpf: add schedule points in percpu arrays management
      regulatory: add NUL to request alpha2
      ibmvnic: Fix early release of login buffer
      net/smc9194: Remove bogus CONFIG_MAC reference
      net: ipv4: Set addr_type in hash_keys for forwarded case
      tcp_bbr: better deal with suboptimal GSO
      smsc75xx: fix smsc75xx_set_features()
      netlink: put module reference if dump start fails
      selftests/bpf/test_maps: exit child process without error in ENOMEM case
      selftests/bpf: update gitignore with test_libbpf_open
      selftests/bpf: tcpbpf_kern: use in6_* macros from glibc
      ..

commit 4e14bf4236490306004782813b8b4494b18f5e60
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Thu Feb 22 18:20:30 2018 +0300

    macvlan: fix use-after-free in macvlan_common_newlink()
    
    The following use-after-free was reported by KASan when running
    LTP macvtap01 test on 4.16-rc2:
    
    [10642.528443] BUG: KASAN: use-after-free in
                   macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10642.626607] Read of size 8 at addr ffff880ba49f2100 by task ip/18450
    ...
    [10642.963873] Call Trace:
    [10642.994352]  dump_stack+0x5c/0x7c
    [10643.035325]  print_address_description+0x75/0x290
    [10643.092938]  kasan_report+0x28d/0x390
    [10643.137971]  ? macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.207963]  macvlan_common_newlink+0x12ef/0x14a0 [macvlan]
    [10643.275978]  macvtap_newlink+0x171/0x260 [macvtap]
    [10643.334532]  rtnl_newlink+0xd4f/0x1300
    ...
    [10646.256176] Allocated by task 18450:
    [10646.299964]  kasan_kmalloc+0xa6/0xd0
    [10646.343746]  kmem_cache_alloc_trace+0xf1/0x210
    [10646.397826]  macvlan_common_newlink+0x6de/0x14a0 [macvlan]
    [10646.464386]  macvtap_newlink+0x171/0x260 [macvtap]
    [10646.522728]  rtnl_newlink+0xd4f/0x1300
    ...
    [10647.022028] Freed by task 18450:
    [10647.061549]  __kasan_slab_free+0x138/0x180
    [10647.111468]  kfree+0x9e/0x1c0
    [10647.147869]  macvlan_port_destroy+0x3db/0x650 [macvlan]
    [10647.211411]  rollback_registered_many+0x5b9/0xb10
    [10647.268715]  rollback_registered+0xd9/0x190
    [10647.319675]  register_netdevice+0x8eb/0xc70
    [10647.370635]  macvlan_common_newlink+0xe58/0x14a0 [macvlan]
    [10647.437195]  macvtap_newlink+0x171/0x260 [macvtap]
    
    Commit d02fd6e7d293 ("macvlan: Fix one possible double free") handles
    the case when register_netdevice() invokes ndo_uninit() on error and
    as a result free the port. But 'macvlan_port_get_rtnl(dev))' check
    (returns dev->rx_handler_data), which was added by this commit in order
    to prevent double free, is not quite correct:
    
    * for macvlan it always returns NULL because 'lowerdev' is the one that
      was used to register rx handler (port) in macvlan_port_create() as
      well as to unregister it in macvlan_port_destroy().
    * for macvtap it always returns a valid pointer because macvtap registers
      its own rx handler before macvlan_common_newlink().
    
    Fixes: d02fd6e7d293 ("macvlan: Fix one possible double free")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ad86f605c59500da82d196ac312cfbac3daba31d
Author: Bill.Baker@oracle.com <Bill.Baker@oracle.com>
Date:   Wed Feb 21 12:46:43 2018 -0600

    nfs: system crashes after NFS4ERR_MOVED recovery
    
    nfs4_update_server unconditionally releases the nfs_client for the
    source server. If migration fails, this can cause the source server's
    nfs_client struct to be left with a low reference count, resulting in
    use-after-free.  Also, adjust reference count handling for ELOOP.
    
    NFS: state manager: migration failed on NFSv4 server nfsvmu10 with error 6
    WARNING: CPU: 16 PID: 17960 at fs/nfs/client.c:281 nfs_put_client+0xfa/0x110 [nfs]()
            nfs_put_client+0xfa/0x110 [nfs]
            nfs4_run_state_manager+0x30/0x40 [nfsv4]
            kthread+0xd8/0xf0
    
    BUG: unable to handle kernel NULL pointer dereference at 00000000000002a8
            nfs4_xdr_enc_write+0x6b/0x160 [nfsv4]
            rpcauth_wrap_req+0xac/0xf0 [sunrpc]
            call_transmit+0x18c/0x2c0 [sunrpc]
            __rpc_execute+0xa6/0x490 [sunrpc]
            rpc_async_schedule+0x15/0x20 [sunrpc]
            process_one_work+0x160/0x470
            worker_thread+0x112/0x540
            ? rescuer_thread+0x3f0/0x3f0
            kthread+0xd8/0xf0
    
    This bug was introduced by 32e62b7c ("NFS: Add nfs4_update_server"),
    but the fix applies cleanly to 52442f9b ("NFS4: Avoid migration loops")
    
    Reported-by: Helen Chao <helen.chao@oracle.com>
    Fixes: 52442f9b11b7 ("NFS4: Avoid migration loops")
    Signed-off-by: Bill Baker <bill.baker@oracle.com>
    Reviewed-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit 5d4c05c3ee36f67ddc107ab5ea0898af01a62cc1
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Wed Feb 14 12:35:40 2018 +0200

    RDMA/uverbs: Sanitize user entered port numbers prior to access it
    
    ==================================================================
    BUG: KASAN: use-after-free in copy_ah_attr_from_uverbs+0x6f2/0x8c0
    Read of size 4 at addr ffff88006476a198 by task syzkaller697701/265
    
    CPU: 0 PID: 265 Comm: syzkaller697701 Not tainted 4.15.0+ #90
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
    Call Trace:
     dump_stack+0xde/0x164
     ? dma_virt_map_sg+0x22c/0x22c
     ? show_regs_print_info+0x17/0x17
     ? lock_contended+0x11a0/0x11a0
     print_address_description+0x83/0x3e0
     kasan_report+0x18c/0x4b0
     ? copy_ah_attr_from_uverbs+0x6f2/0x8c0
     ? copy_ah_attr_from_uverbs+0x6f2/0x8c0
     ? lookup_get_idr_uobject+0x120/0x200
     ? copy_ah_attr_from_uverbs+0x6f2/0x8c0
     copy_ah_attr_from_uverbs+0x6f2/0x8c0
     ? modify_qp+0xd0e/0x1350
     modify_qp+0xd0e/0x1350
     ib_uverbs_modify_qp+0xf9/0x170
     ? ib_uverbs_query_qp+0xa70/0xa70
     ib_uverbs_write+0x7f9/0xef0
     ? attach_entity_load_avg+0x8b0/0x8b0
     ? ib_uverbs_query_qp+0xa70/0xa70
     ? uverbs_devnode+0x110/0x110
     ? cyc2ns_read_end+0x10/0x10
     ? print_irqtrace_events+0x280/0x280
     ? sched_clock_cpu+0x18/0x200
     ? _raw_spin_unlock_irq+0x29/0x40
     ? _raw_spin_unlock_irq+0x29/0x40
     ? _raw_spin_unlock_irq+0x29/0x40
     ? time_hardirqs_on+0x27/0x670
     __vfs_write+0x10d/0x700
     ? uverbs_devnode+0x110/0x110
     ? kernel_read+0x170/0x170
     ? _raw_spin_unlock_irq+0x29/0x40
     ? finish_task_switch+0x1bd/0x7a0
     ? finish_task_switch+0x194/0x7a0
     ? prandom_u32_state+0xe/0x180
     ? rcu_read_unlock+0x80/0x80
     ? security_file_permission+0x93/0x260
     vfs_write+0x1b0/0x550
     SyS_write+0xc7/0x1a0
     ? SyS_read+0x1a0/0x1a0
     ? trace_hardirqs_on_thunk+0x1a/0x1c
     entry_SYSCALL_64_fastpath+0x1e/0x8b
    RIP: 0033:0x433c29
    RSP: 002b:00007ffcf2be82a8 EFLAGS: 00000217
    
    Allocated by task 62:
     kasan_kmalloc+0xa0/0xd0
     kmem_cache_alloc+0x141/0x480
     dup_fd+0x101/0xcc0
     copy_process.part.62+0x166f/0x4390
     _do_fork+0x1cb/0xe90
     kernel_thread+0x34/0x40
     call_usermodehelper_exec_work+0x112/0x260
     process_one_work+0x929/0x1aa0
     worker_thread+0x5c6/0x12a0
     kthread+0x346/0x510
     ret_from_fork+0x3a/0x50
    
    Freed by task 259:
     kasan_slab_free+0x71/0xc0
     kmem_cache_free+0xf3/0x4c0
     put_files_struct+0x225/0x2c0
     exit_files+0x88/0xc0
     do_exit+0x67c/0x1520
     do_group_exit+0xe8/0x380
     SyS_exit_group+0x1e/0x20
     entry_SYSCALL_64_fastpath+0x1e/0x8b
    
    The buggy address belongs to the object at ffff88006476a000
     which belongs to the cache files_cache of size 832
    The buggy address is located 408 bytes inside of
     832-byte region [ffff88006476a000, ffff88006476a340)
    The buggy address belongs to the page:
    page:ffffea000191da80 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
    flags: 0x4000000000008100(slab|head)
    raw: 4000000000008100 0000000000000000 0000000000000000 0000000100080008
    raw: 0000000000000000 0000000100000001 ffff88006bcf7a80 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88006476a080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88006476a100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88006476a180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                ^
     ffff88006476a200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88006476a280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Cc: syzkaller <syzkaller@googlegroups.com>
    Cc: <stable@vger.kernel.org> # 4.11
    Fixes: 44c58487d51a ("IB/core: Define 'ib' and 'roce' rdma_ah_attr types")
    Reported-by: Noa Osherovich <noaos@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 0cba0efcc7238d47a045a8d7a4079f6a22993546
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Wed Feb 14 12:35:37 2018 +0200

    RDMA/restrack: Increment CQ restrack object before committing
    
    Once the uobj is committed it is immediately possible another thread
    could destroy it, which worst case, can result in a use-after-free
    of the restrack objects.
    
    Cc: syzkaller <syzkaller@googlegroups.com>
    Fixes: 08f294a1524b ("RDMA/core: Add resource tracking for create and destroy CQs")
    Reported-by: Noa Osherovich <noaos@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit 6623e3e3cd78020016d3fa42555763178e94ab64
Author: Leon Romanovsky <leonro@mellanox.com>
Date:   Tue Feb 13 12:18:37 2018 +0200

    RDMA/uverbs: Protect from races between lookup and destroy of uobjects
    
    The race is between lookup_get_idr_uobject and
    uverbs_idr_remove_uobj -> uverbs_uobject_put.
    
    We deliberately do not call sychronize_rcu after the idr_remove in
    uverbs_idr_remove_uobj for performance reasons, instead we call
    kfree_rcu() during uverbs_uobject_put.
    
    However, this means we can obtain pointers to uobj's that have
    already been released and must protect against krefing them
    using kref_get_unless_zero.
    
    ==================================================================
    BUG: KASAN: use-after-free in copy_ah_attr_from_uverbs.isra.2+0x860/0xa00
    Read of size 4 at addr ffff88005fda1ac8 by task syz-executor2/441
    
    CPU: 1 PID: 441 Comm: syz-executor2 Not tainted 4.15.0-rc2+ #56
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
    Call Trace:
    dump_stack+0x8d/0xd4
    print_address_description+0x73/0x290
    kasan_report+0x25c/0x370
    ? copy_ah_attr_from_uverbs.isra.2+0x860/0xa00
    copy_ah_attr_from_uverbs.isra.2+0x860/0xa00
    ? uverbs_try_lock_object+0x68/0xc0
    ? modify_qp.isra.7+0xdc4/0x10e0
    modify_qp.isra.7+0xdc4/0x10e0
    ib_uverbs_modify_qp+0xfe/0x170
    ? ib_uverbs_query_qp+0x970/0x970
    ? __lock_acquire+0xa11/0x1da0
    ib_uverbs_write+0x55a/0xad0
    ? ib_uverbs_query_qp+0x970/0x970
    ? ib_uverbs_query_qp+0x970/0x970
    ? ib_uverbs_open+0x760/0x760
    ? futex_wake+0x147/0x410
    ? sched_clock_cpu+0x18/0x180
    ? check_prev_add+0x1680/0x1680
    ? do_futex+0x3b6/0xa30
    ? sched_clock_cpu+0x18/0x180
    __vfs_write+0xf7/0x5c0
    ? ib_uverbs_open+0x760/0x760
    ? kernel_read+0x110/0x110
    ? lock_acquire+0x370/0x370
    ? __fget+0x264/0x3b0
    vfs_write+0x18a/0x460
    SyS_write+0xc7/0x1a0
    ? SyS_read+0x1a0/0x1a0
    ? trace_hardirqs_on_thunk+0x1a/0x1c
    entry_SYSCALL_64_fastpath+0x18/0x85
    RIP: 0033:0x448e29
    RSP: 002b:00007f443fee0c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 00007f443fee16bc RCX: 0000000000448e29
    RDX: 0000000000000078 RSI: 00000000209f8000 RDI: 0000000000000012
    RBP: 000000000070bea0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 0000000000008e98 R14: 00000000006ebf38 R15: 0000000000000000
    
    Allocated by task 1:
    kmem_cache_alloc_trace+0x16c/0x2f0
    mlx5_alloc_cmd_msg+0x12e/0x670
    cmd_exec+0x419/0x1810
    mlx5_cmd_exec+0x40/0x70
    mlx5_core_mad_ifc+0x187/0x220
    mlx5_MAD_IFC+0xd7/0x1b0
    mlx5_query_mad_ifc_gids+0x1f3/0x650
    mlx5_ib_query_gid+0xa4/0xc0
    ib_query_gid+0x152/0x1a0
    ib_query_port+0x21e/0x290
    mlx5_port_immutable+0x30f/0x490
    ib_register_device+0x5dd/0x1130
    mlx5_ib_add+0x3e7/0x700
    mlx5_add_device+0x124/0x510
    mlx5_register_interface+0x11f/0x1c0
    mlx5_ib_init+0x56/0x61
    do_one_initcall+0xa3/0x250
    kernel_init_freeable+0x309/0x3b8
    kernel_init+0x14/0x180
    ret_from_fork+0x24/0x30
    
    Freed by task 1:
    kfree+0xeb/0x2f0
    mlx5_free_cmd_msg+0xcd/0x140
    cmd_exec+0xeba/0x1810
    mlx5_cmd_exec+0x40/0x70
    mlx5_core_mad_ifc+0x187/0x220
    mlx5_MAD_IFC+0xd7/0x1b0
    mlx5_query_mad_ifc_gids+0x1f3/0x650
    mlx5_ib_query_gid+0xa4/0xc0
    ib_query_gid+0x152/0x1a0
    ib_query_port+0x21e/0x290
    mlx5_port_immutable+0x30f/0x490
    ib_register_device+0x5dd/0x1130
    mlx5_ib_add+0x3e7/0x700
    mlx5_add_device+0x124/0x510
    mlx5_register_interface+0x11f/0x1c0
    mlx5_ib_init+0x56/0x61
    do_one_initcall+0xa3/0x250
    kernel_init_freeable+0x309/0x3b8
    kernel_init+0x14/0x180
    ret_from_fork+0x24/0x30
    
    The buggy address belongs to the object at ffff88005fda1ab0
    which belongs to the cache kmalloc-32 of size 32
    The buggy address is located 24 bytes inside of
    32-byte region [ffff88005fda1ab0, ffff88005fda1ad0)
    The buggy address belongs to the page:
    page:00000000d5655c19 count:1 mapcount:0 mapping: (null)
    index:0xffff88005fda1fc0
    flags: 0x4000000000000100(slab)
    raw: 4000000000000100 0000000000000000 ffff88005fda1fc0 0000000180550008
    raw: ffffea00017f6780 0000000400000004 ffff88006c803980 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
    ffff88005fda1980: fc fc fb fb fb fb fc fc fb fb fb fb fc fc fb fb
    ffff88005fda1a00: fb fb fc fc fb fb fb fb fc fc 00 00 00 00 fc fc
    ffff88005fda1a80: fb fb fb fb fc fc fb fb fb fb fc fc fb fb fb fb
    ffff88005fda1b00: fc fc 00 00 00 00 fc fc fb fb fb fb fc fc fb fb
    ffff88005fda1b80: fb fb fc fc fb fb fb fb fc fc fb fb fb fb fc fc
    ==================================================================@
    
    Cc: syzkaller <syzkaller@googlegroups.com>
    Cc: <stable@vger.kernel.org> # 4.11
    Fixes: 3832125624b7 ("IB/core: Add support for idr types")
    Reported-by: Noa Osherovich <noaos@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit fa2dfd0ec22e0069c84dfae162972cbbc7c75488
Author: Zhengjun Xing <zhengjun.xing@linux.intel.com>
Date:   Mon Feb 12 14:24:48 2018 +0200

    xhci: Fix NULL pointer in xhci debugfs
    
    Commit dde634057da7 ("xhci: Fix use-after-free in xhci debugfs") causes a
    null pointer dereference while fixing xhci-debugfs usage of ring pointers
    that were freed during hibernate.
    
    The fix passed addresses to ring pointers instead, but forgot to do this
    change for the xhci_ring_trb_show function.
    
    The address of the ring pointer passed to xhci-debugfs was of a temporary
    ring pointer "new_ring" instead of the actual ring "ring" pointer. The
    temporary new_ring pointer will be set to NULL later causing the NULL
    pointer dereference.
    
    This issue was seen when reading xhci related files in debugfs:
    
    cat /sys/kernel/debug/usb/xhci/*/devices/*/ep*/trbs
    
    [  184.604861] BUG: unable to handle kernel NULL pointer dereference at (null)
    [  184.613776] IP: xhci_ring_trb_show+0x3a/0x890
    [  184.618733] PGD 264193067 P4D 264193067 PUD 263238067 PMD 0
    [  184.625184] Oops: 0000 [#1] SMP
    [  184.726410] RIP: 0010:xhci_ring_trb_show+0x3a/0x890
    [  184.731944] RSP: 0018:ffffba8243c0fd90 EFLAGS: 00010246
    [  184.737880] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00000000000295d6
    [  184.746020] RDX: 00000000000295d5 RSI: 0000000000000001 RDI: ffff971a6418d400
    [  184.754121] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    [  184.762222] R10: ffff971a64c98a80 R11: ffff971a62a00e40 R12: ffff971a62a85500
    [  184.770325] R13: 0000000000020000 R14: ffff971a6418d400 R15: ffff971a6418d400
    [  184.778448] FS:  00007fe725a79700(0000) GS:ffff971a6ec00000(0000) knlGS:0000000000000000
    [  184.787644] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  184.794168] CR2: 0000000000000000 CR3: 000000025f365005 CR4: 00000000003606f0
    [  184.802318] Call Trace:
    [  184.805094]  ? seq_read+0x281/0x3b0
    [  184.809068]  seq_read+0xeb/0x3b0
    [  184.812735]  full_proxy_read+0x4d/0x70
    [  184.817007]  __vfs_read+0x23/0x120
    [  184.820870]  vfs_read+0x91/0x130
    [  184.824538]  SyS_read+0x42/0x90
    [  184.828106]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    Fixes: dde634057da7 ("xhci: Fix use-after-free in xhci debugfs")
    Cc: <stable@vger.kernel.org> # v4.15
    Signed-off-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eaf75d1815dad230dac2f1e8f1dc0349b2d50071
Author: Quinn Tran <quinn.tran@cavium.com>
Date:   Thu Feb 1 10:33:17 2018 -0800

    scsi: qla2xxx: Fix double free bug after firmware timeout
    
    This patch is based on Max's original patch.
    
    When the qla2xxx firmware is unavailable, eventually
    qla2x00_sp_timeout() is reached, which calls the timeout function and
    frees the srb_t instance.
    
    The timeout function always resolves to qla2x00_async_iocb_timeout(),
    which invokes another callback function called "done".  All of these
    qla2x00_*_sp_done() callbacks also free the srb_t instance; after
    returning to qla2x00_sp_timeout(), it is freed again.
    
    The fix is to remove the "sp->free(sp)" call from qla2x00_sp_timeout()
    and add it to those code paths in qla2x00_async_iocb_timeout() which
    do not already free the object.
    
    This is how it looks like with KASAN:
    
    BUG: KASAN: use-after-free in qla2x00_sp_timeout+0x228/0x250
    Read of size 8 at addr ffff88278147a590 by task swapper/2/0
    
    Allocated by task 1502:
    save_stack+0x33/0xa0
    kasan_kmalloc+0xa0/0xd0
    kmem_cache_alloc+0xb8/0x1c0
    mempool_alloc+0xd6/0x260
    qla24xx_async_gnl+0x3c5/0x1100
    
    Freed by task 0:
    save_stack+0x33/0xa0
    kasan_slab_free+0x72/0xc0
    kmem_cache_free+0x75/0x200
    qla24xx_async_gnl_sp_done+0x556/0x9e0
    qla2x00_async_iocb_timeout+0x1c7/0x420
    qla2x00_sp_timeout+0x16d/0x250
    call_timer_fn+0x36/0x200
    
    The buggy address belongs to the object at ffff88278147a440
    which belongs to the cache qla2xxx_srbs of size 344
    The buggy address is located 336 bytes inside of
    344-byte region [ffff88278147a440, ffff88278147a598)
    
    Reported-by: Max Kellermann <mk@cm4all.com>
    Signed-off-by: Quinn Tran <quinn.tran@cavium.com>
    Signed-off-by: Himanshu Madhani <himanshu.madhani@cavium.com>
    Cc: Max Kellermann <mk@cm4all.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit e74bd4d358e5455233f1dcc3975425905b270b91
Author: Manu Gautam <mgautam@codeaurora.org>
Date:   Thu Dec 21 09:54:25 2017 +0530

    usb: gadget: core: Fix use-after-free of usb_request
    
    Driver is tracing usb_request after freeing it.
    Fix it by changing the order.
    
    Signed-off-by: Manu Gautam <mgautam@codeaurora.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit ebeeb1ad9b8adcc37c2ec21a96f39e9d35199b46
Author: Sowmini Varadhan <sowmini.varadhan@oracle.com>
Date:   Sat Feb 3 04:26:51 2018 -0800

    rds: tcp: use rds_destroy_pending() to synchronize netns/module teardown and rds connection/workq management
    
    An rds_connection can get added during netns deletion between lines 528
    and 529 of
    
      506 static void rds_tcp_kill_sock(struct net *net)
      :
      /* code to pull out all the rds_connections that should be destroyed */
      :
      528         spin_unlock_irq(&rds_tcp_conn_lock);
      529         list_for_each_entry_safe(tc, _tc, &tmp_list, t_tcp_node)
      530                 rds_conn_destroy(tc->t_cpath->cp_conn);
    
    Such an rds_connection would miss out the rds_conn_destroy()
    loop (that cancels all pending work) and (if it was scheduled
    after netns deletion) could trigger the use-after-free.
    
    A similar race-window exists for the module unload path
    in rds_tcp_exit -> rds_tcp_destroy_conns
    
    Concurrency with netns deletion (rds_tcp_kill_sock()) must be handled
    by checking check_net() before enqueuing new work or adding new
    connections.
    
    Concurrency with module-unload is handled by maintaining a module
    specific flag that is set at the start of the module exit function,
    and must be checked before enqueuing new work or adding new connections.
    
    This commit refactors existing RDS_DESTROY_PENDING checks added by
    commit 3db6e0d172c9 ("rds: use RCU to synchronize work-enqueue with
    connection teardown") and consolidates all the concurrency checks
    listed above into the function rds_destroy_pending().
    
    Signed-off-by: Sowmini Varadhan <sowmini.varadhan@oracle.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0ff90b6c20340e57616a51ae1a1bf18156d6638a
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Feb 7 09:49:02 2018 +0100

    netfilter: nf_flow_offload: fix use-after-free and a resource leak
    
    flow_offload_del frees the flow, so all associated resource must be
    freed before.
    
    Since the ct entry in struct flow_offload_entry was allocated by
    flow_offload_alloc, it should be freed by flow_offload_free to take care
    of the error handling path when flow_offload_add fails.
    
    While at it, make flow_offload_del static, since it should never be
    called directly, only from the gc step
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commits)
      be2net: Handle transmit completion errors in Lancer
      be2net: Fix HW stall issue in Lancer
      RDS: IB: Fix null pointer issue
      nfp: fix kdoc warnings on nested structures
      sample/bpf: fix erspan metadata
      net: erspan: fix erspan config overwrite
      net: erspan: fix metadata extraction
      cls_u32: fix use after free in u32_destroy_key()
      net: amd-xgbe: fix comparison to bitshift when dealing with a mask
      net: phy: Handle not having GPIO enabled in the kernel
      ibmvnic: fix empty firmware version and errors cleanup
      sctp: fix dst refcnt leak in sctp_v4_get_dst
      sctp: fix dst refcnt leak in sctp_v6_get_dst()
      dwc-xlgmac: remove Jie Deng as co-maintainer
      doc: Change the min default value of tcp_wmem/tcp_rmem.
      samples/bpf: use bpf_set_link_xdp_fd
      libbpf: add missing SPDX-License-Identifier
      libbpf: add error reporting in XDP
      libbpf: add function to setup XDP
      tools: add netlink.h and if_link.h in tools uapi
      ...

commit d7cdee5ea8d28ae1b6922deb0c1badaa3aa0ef8c
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Feb 5 22:23:01 2018 +0100

    cls_u32: fix use after free in u32_destroy_key()
    
    Li Shuang reported an Oops with cls_u32 due to an use-after-free
    in u32_destroy_key(). The use-after-free can be triggered with:
    
    dev=lo
    tc qdisc add dev $dev root handle 1: htb default 10
    tc filter add dev $dev parent 1: prio 5 handle 1: protocol ip u32 divisor 256
    tc filter add dev $dev protocol ip parent 1: prio 5 u32 ht 800:: match ip dst\
     10.0.0.0/8 hashkey mask 0x0000ff00 at 16 link 1:
    tc qdisc del dev $dev root
    
    Which causes the following kasan splat:
    
     ==================================================================
     BUG: KASAN: use-after-free in u32_destroy_key.constprop.21+0x117/0x140 [cls_u32]
     Read of size 4 at addr ffff881b83dae618 by task kworker/u48:5/571
    
     CPU: 17 PID: 571 Comm: kworker/u48:5 Not tainted 4.15.0+ #87
     Hardware name: Dell Inc. PowerEdge R730/072T6D, BIOS 2.1.7 06/16/2016
     Workqueue: tc_filter_workqueue u32_delete_key_freepf_work [cls_u32]
     Call Trace:
      dump_stack+0xd6/0x182
      ? dma_virt_map_sg+0x22e/0x22e
      print_address_description+0x73/0x290
      kasan_report+0x277/0x360
      ? u32_destroy_key.constprop.21+0x117/0x140 [cls_u32]
      u32_destroy_key.constprop.21+0x117/0x140 [cls_u32]
      u32_delete_key_freepf_work+0x1c/0x30 [cls_u32]
      process_one_work+0xae0/0x1c80
      ? sched_clock+0x5/0x10
      ? pwq_dec_nr_in_flight+0x3c0/0x3c0
      ? _raw_spin_unlock_irq+0x29/0x40
      ? trace_hardirqs_on_caller+0x381/0x570
      ? _raw_spin_unlock_irq+0x29/0x40
      ? finish_task_switch+0x1e5/0x760
      ? finish_task_switch+0x208/0x760
      ? preempt_notifier_dec+0x20/0x20
      ? __schedule+0x839/0x1ee0
      ? check_noncircular+0x20/0x20
      ? firmware_map_remove+0x73/0x73
      ? find_held_lock+0x39/0x1c0
      ? worker_thread+0x434/0x1820
      ? lock_contended+0xee0/0xee0
      ? lock_release+0x1100/0x1100
      ? init_rescuer.part.16+0x150/0x150
      ? retint_kernel+0x10/0x10
      worker_thread+0x216/0x1820
      ? process_one_work+0x1c80/0x1c80
      ? lock_acquire+0x1a5/0x540
      ? lock_downgrade+0x6b0/0x6b0
      ? sched_clock+0x5/0x10
      ? lock_release+0x1100/0x1100
      ? compat_start_thread+0x80/0x80
      ? do_raw_spin_trylock+0x190/0x190
      ? _raw_spin_unlock_irq+0x29/0x40
      ? trace_hardirqs_on_caller+0x381/0x570
      ? _raw_spin_unlock_irq+0x29/0x40
      ? finish_task_switch+0x1e5/0x760
      ? finish_task_switch+0x208/0x760
      ? preempt_notifier_dec+0x20/0x20
      ? __schedule+0x839/0x1ee0
      ? kmem_cache_alloc_trace+0x143/0x320
      ? firmware_map_remove+0x73/0x73
      ? sched_clock+0x5/0x10
      ? sched_clock_cpu+0x18/0x170
      ? find_held_lock+0x39/0x1c0
      ? schedule+0xf3/0x3b0
      ? lock_downgrade+0x6b0/0x6b0
      ? __schedule+0x1ee0/0x1ee0
      ? do_wait_intr_irq+0x340/0x340
      ? do_raw_spin_trylock+0x190/0x190
      ? _raw_spin_unlock_irqrestore+0x32/0x60
      ? process_one_work+0x1c80/0x1c80
      ? process_one_work+0x1c80/0x1c80
      kthread+0x312/0x3d0
      ? kthread_create_worker_on_cpu+0xc0/0xc0
      ret_from_fork+0x3a/0x50
    
     Allocated by task 1688:
      kasan_kmalloc+0xa0/0xd0
      __kmalloc+0x162/0x380
      u32_change+0x1220/0x3c9e [cls_u32]
      tc_ctl_tfilter+0x1ba6/0x2f80
      rtnetlink_rcv_msg+0x4f0/0x9d0
      netlink_rcv_skb+0x124/0x320
      netlink_unicast+0x430/0x600
      netlink_sendmsg+0x8fa/0xd60
      sock_sendmsg+0xb1/0xe0
      ___sys_sendmsg+0x678/0x980
      __sys_sendmsg+0xc4/0x210
      do_syscall_64+0x232/0x7f0
      return_from_SYSCALL_64+0x0/0x75
    
     Freed by task 112:
      kasan_slab_free+0x71/0xc0
      kfree+0x114/0x320
      rcu_process_callbacks+0xc3f/0x1600
      __do_softirq+0x2bf/0xc06
    
     The buggy address belongs to the object at ffff881b83dae600
      which belongs to the cache kmalloc-4096 of size 4096
     The buggy address is located 24 bytes inside of
      4096-byte region [ffff881b83dae600, ffff881b83daf600)
     The buggy address belongs to the page:
     page:ffffea006e0f6a00 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
     flags: 0x17ffffc0008100(slab|head)
     raw: 0017ffffc0008100 0000000000000000 0000000000000000 0000000100070007
     raw: dead000000000100 dead000000000200 ffff880187c0e600 0000000000000000
     page dumped because: kasan: bad access detected
    
     Memory state around the buggy address:
      ffff881b83dae500: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff881b83dae580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     >ffff881b83dae600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                 ^
      ffff881b83dae680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff881b83dae700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ==================================================================
    
    The problem is that the htnode is freed before the linked knodes and the
    latter will try to access the first at u32_destroy_key() time.
    This change addresses the issue using the htnode refcnt to guarantee
    the correct free order. While at it also add a RCU annotation,
    to keep sparse happy.
    
    v1 -> v2: use rtnl_derefence() instead of RCU read locks
    v2 -> v3:
      - don't check refcnt in u32_destroy_hnode()
      - cleaned-up u32_destroy() implementation
      - cleaned-up code comment
    v3 -> v4:
      - dropped unneeded comment
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Fixes: c0d378ef1266 ("net_sched: use tcf_queue_work() in u32 filter")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fd649f10c3d21ee9d7542c609f29978bdf73ab94
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Jan 30 16:07:37 2018 +0200

    btrfs: Fix use-after-free when cleaning up fs_devs with a single stale device
    
    Commit 4fde46f0cc71 ("Btrfs: free the stale device") introduced
    btrfs_free_stale_device which iterates the device lists for all
    registered btrfs filesystems and deletes those devices which aren't
    mounted. In a btrfs_devices structure has only 1 device attached to it
    and it is unused then btrfs_free_stale_devices will proceed to also free
    the btrfs_fs_devices struct itself. Currently this leads to a use after
    free since list_for_each_entry will try to perform a check on the
    already freed memory to see if it has to terminate the loop.
    
    The fix is to use 'break' when we know we are freeing the current
    fs_devs.
    
    Fixes: 4fde46f0cc71 ("Btrfs: free the stale device")
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 1a932ef4e47984dee227834667b5ff5a334e4805
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Thu Jan 25 11:02:54 2018 -0700

    Btrfs: fix use-after-free on root->orphan_block_rsv
    
    I got these from running generic/475,
    
    WARNING: CPU: 0 PID: 26384 at fs/btrfs/inode.c:3326 btrfs_orphan_commit_root+0x1ac/0x2b0 [btrfs]
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000010
    IP: btrfs_block_rsv_release+0x1c/0x70 [btrfs]
    Call Trace:
      btrfs_orphan_release_metadata+0x9f/0x200 [btrfs]
      btrfs_orphan_del+0x10d/0x170 [btrfs]
      btrfs_setattr+0x500/0x640 [btrfs]
      notify_change+0x7ae/0x870
      do_truncate+0xca/0x130
      vfs_truncate+0x2ee/0x3d0
      do_sys_truncate+0xaf/0xf0
      SyS_truncate+0xe/0x10
      entry_SYSCALL_64_fastpath+0x1f/0x96
    
    The race is between btrfs_orphan_commit_root and btrfs_orphan_del,
            t1                                        t2
    btrfs_orphan_commit_root                     btrfs_orphan_del
       spin_lock
       check (&root->orphan_inodes)
       root->orphan_block_rsv = NULL;
       spin_unlock
                                                 atomic_dec(&root->orphan_inodes);
                                                 access root->orphan_block_rsv
    
    Accessing root->orphan_block_rsv must be done before decreasing
    root->orphan_inodes.
    
    cc: <stable@vger.kernel.org> v3.12+
    Fixes: 703c88e03524 ("Btrfs: fix tracking of orphan inode count")
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 1846430c24d66e85cc58286b3319c82cd54debb2
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Thu Jan 25 11:02:51 2018 -0700

    Btrfs: fix crash due to not cleaning up tree log block's dirty bits
    
    In cases that the whole fs flips into readonly status due to failures in
    critical sections, then log tree's blocks are still dirty, and this leads
    to a crash during umount time, the crash is about use-after-free,
    
    umount
     -> close_ctree
        -> stop workers
        -> iput(btree_inode)
           -> iput_final
              -> write_inode_now
                 -> ...
                   -> queue job on stop'd workers
    
    cc: <stable@vger.kernel.org> v3.12+
    Fixes: 681ae50917df ("Btrfs: cleanup reserved space when freeing tree log on error")
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commits)
      alpha: osf_sys.c: use timespec64 where appropriate
      alpha: osf_sys.c: fix put_tv32 regression
      jffs2: Fix use-after-free bug in jffs2_iget()'s error handling path
      dcache: delete unused d_hash_mask
      dcache: subtract d_hash_shift from 32 in advance
      fs/buffer.c: fold init_buffer() into init_page_buffers()
      fs: fold __inode_permission() into inode_permission()
      fs: add RWF_APPEND
      sctp: use vmemdup_user() rather than badly open-coding memdup_user()
      snd_ctl_elem_init_enum_names(): switch to vmemdup_user()
      replace_user_tlv(): switch to vmemdup_user()
      new primitive: vmemdup_user()
      memdup_user(): switch to GFP_USER
      eventfd: fold eventfd_ctx_get() into eventfd_ctx_fileget()
      eventfd: fold eventfd_ctx_read() into eventfd_read()
      eventfd: convert to use anon_inode_getfd()
      nfs4file: get rid of pointless include of btrfs.h
      uvc_v4l2: clean copyin/copyout up
      vme_user: don't use __copy_..._user()
      usx2y: don't bother with memdup_user() for 16-byte structure
      ...

commit 9b42d55a66d388e4dd5550107df051a9637564fc
Author: Li RongQing <lirongqing@baidu.com>
Date:   Fri Jan 26 16:40:41 2018 +0800

    tcp: release sk_frag.page in tcp_disconnect
    
    socket can be disconnected and gets transformed back to a listening
    socket, if sk_frag.page is not released, which will be cloned into
    a new socket by sk_clone_lock, but the reference count of this page
    is increased, lead to a use after free or double free issue
    
    Signed-off-by: Li RongQing <lirongqing@baidu.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88fae87327a2261cf8db078f6ce4e5a3e55b30b1
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Fri Jan 26 01:36:31 2018 +0200

    tap: fix use-after-free
    
    Lockless access to __ptr_ring_full is only legal if ring is
    never resized, otherwise it might cause use-after free errors.
    Simply drop the lockless test, we'll drop the packet
    a bit later when produce fails.
    
    Fixes: 362899b8 ("macvtap: switch to use skb array")
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5bdd0c6f89fba430e18d636493398389dadc3b17
Author: Jake Daryll Obina <jake.obina@gmail.com>
Date:   Fri Sep 22 00:00:14 2017 +0800

    jffs2: Fix use-after-free bug in jffs2_iget()'s error handling path
    
    If jffs2_iget() fails for a newly-allocated inode, jffs2_do_clear_inode()
    can get called twice in the error handling path, the first call in
    jffs2_iget() itself and the second through iget_failed(). This can result
    to a use-after-free error in the second jffs2_do_clear_inode() call, such
    as shown by the oops below wherein the second jffs2_do_clear_inode() call
    was trying to free node fragments that were already freed in the first
    jffs2_do_clear_inode() call.
    
    [   78.178860] jffs2: error: (1904) jffs2_do_read_inode_internal: CRC failed for read_inode of inode 24 at physical location 0x1fc00c
    [   78.178914] Unable to handle kernel paging request at virtual address 6b6b6b6b6b6b6b7b
    [   78.185871] pgd = ffffffc03a567000
    [   78.188794] [6b6b6b6b6b6b6b7b] *pgd=0000000000000000, *pud=0000000000000000
    [   78.194968] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    ...
    [   78.513147] PC is at rb_first_postorder+0xc/0x28
    [   78.516503] LR is at jffs2_kill_fragtree+0x28/0x90 [jffs2]
    [   78.520672] pc : [<ffffff8008323d28>] lr : [<ffffff8000eb1cc8>] pstate: 60000105
    [   78.526757] sp : ffffff800cea38f0
    [   78.528753] x29: ffffff800cea38f0 x28: ffffffc01f3f8e80
    [   78.532754] x27: 0000000000000000 x26: ffffff800cea3c70
    [   78.536756] x25: 00000000dc67c8ae x24: ffffffc033d6945d
    [   78.540759] x23: ffffffc036811740 x22: ffffff800891a5b8
    [   78.544760] x21: 0000000000000000 x20: 0000000000000000
    [   78.548762] x19: ffffffc037d48910 x18: ffffff800891a588
    [   78.552764] x17: 0000000000000800 x16: 0000000000000c00
    [   78.556766] x15: 0000000000000010 x14: 6f2065646f6e695f
    [   78.560767] x13: 6461657220726f66 x12: 2064656c69616620
    [   78.564769] x11: 435243203a6c616e x10: 7265746e695f6564
    [   78.568771] x9 : 6f6e695f64616572 x8 : ffffffc037974038
    [   78.572774] x7 : bbbbbbbbbbbbbbbb x6 : 0000000000000008
    [   78.576775] x5 : 002f91d85bd44a2f x4 : 0000000000000000
    [   78.580777] x3 : 0000000000000000 x2 : 000000403755e000
    [   78.584779] x1 : 6b6b6b6b6b6b6b6b x0 : 6b6b6b6b6b6b6b6b
    ...
    [   79.038551] [<ffffff8008323d28>] rb_first_postorder+0xc/0x28
    [   79.042962] [<ffffff8000eb5578>] jffs2_do_clear_inode+0x88/0x100 [jffs2]
    [   79.048395] [<ffffff8000eb9ddc>] jffs2_evict_inode+0x3c/0x48 [jffs2]
    [   79.053443] [<ffffff8008201ca8>] evict+0xb0/0x168
    [   79.056835] [<ffffff8008202650>] iput+0x1c0/0x200
    [   79.060228] [<ffffff800820408c>] iget_failed+0x30/0x3c
    [   79.064097] [<ffffff8000eba0c0>] jffs2_iget+0x2d8/0x360 [jffs2]
    [   79.068740] [<ffffff8000eb0a60>] jffs2_lookup+0xe8/0x130 [jffs2]
    [   79.073434] [<ffffff80081f1a28>] lookup_slow+0x118/0x190
    [   79.077435] [<ffffff80081f4708>] walk_component+0xfc/0x28c
    [   79.081610] [<ffffff80081f4dd0>] path_lookupat+0x84/0x108
    [   79.085699] [<ffffff80081f5578>] filename_lookup+0x88/0x100
    [   79.089960] [<ffffff80081f572c>] user_path_at_empty+0x58/0x6c
    [   79.094396] [<ffffff80081ebe14>] vfs_statx+0xa4/0x114
    [   79.098138] [<ffffff80081ec44c>] SyS_newfstatat+0x58/0x98
    [   79.102227] [<ffffff800808354c>] __sys_trace_return+0x0/0x4
    [   79.106489] Code: d65f03c0 f9400001 b40000e1 aa0103e0 (f9400821)
    
    The jffs2_do_clear_inode() call in jffs2_iget() is unnecessary since
    iget_failed() will eventually call jffs2_do_clear_inode() if needed, so
    just remove it.
    
    Fixes: 5451f79f5f81 ("iget: stop JFFS2 from using iget() and read_inode()")
    Reviewed-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Jake Daryll Obina <jake.obina@gmail.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit b423d13c08a656c719fa56324a8f4279c835d90c
Author: William Tu <u9012063@gmail.com>
Date:   Tue Jan 23 17:01:29 2018 -0800

    net: erspan: fix use-after-free
    
    When building the erspan header for either v1 or v2, the eth_hdr()
    does not point to the right inner packet's eth_hdr,
    causing kasan report use-after-free and slab-out-of-bouds read.
    
    The patch fixes the following syzkaller issues:
    [1] BUG: KASAN: slab-out-of-bounds in erspan_xmit+0x22d4/0x2430 net/ipv4/ip_gre.c:735
    [2] BUG: KASAN: slab-out-of-bounds in erspan_build_header+0x3bf/0x3d0 net/ipv4/ip_gre.c:698
    [3] BUG: KASAN: use-after-free in erspan_xmit+0x22d4/0x2430 net/ipv4/ip_gre.c:735
    [4] BUG: KASAN: use-after-free in erspan_build_header+0x3bf/0x3d0 net/ipv4/ip_gre.c:698
    
    [2] CPU: 0 PID: 3654 Comm: syzkaller377964 Not tainted 4.15.0-rc9+ #185
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x25b/0x340 mm/kasan/report.c:409
     __asan_report_load_n_noabort+0xf/0x20 mm/kasan/report.c:440
     erspan_build_header+0x3bf/0x3d0 net/ipv4/ip_gre.c:698
     erspan_xmit+0x3b8/0x13b0 net/ipv4/ip_gre.c:740
     __netdev_start_xmit include/linux/netdevice.h:4042 [inline]
     netdev_start_xmit include/linux/netdevice.h:4051 [inline]
     packet_direct_xmit+0x315/0x6b0 net/packet/af_packet.c:266
     packet_snd net/packet/af_packet.c:2943 [inline]
     packet_sendmsg+0x3aed/0x60b0 net/packet/af_packet.c:2968
     sock_sendmsg_nosec net/socket.c:638 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:648
     SYSC_sendto+0x361/0x5c0 net/socket.c:1729
     SyS_sendto+0x40/0x50 net/socket.c:1697
     do_syscall_32_irqs_on arch/x86/entry/common.c:327 [inline]
     do_fast_syscall_32+0x3ee/0xf9d arch/x86/entry/common.c:389
     entry_SYSENTER_compat+0x54/0x63 arch/x86/entry/entry_64_compat.S:129
    RIP: 0023:0xf7fcfc79
    RSP: 002b:00000000ffc6976c EFLAGS: 00000286 ORIG_RAX: 0000000000000171
    RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 0000000020011000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020008000
    RBP: 000000000000001c R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: f551c91de262 ("net: erspan: introduce erspan v2 for ip_gre")
    Fixes: 84e54fe0a5ea ("gre: introduce native tunnel support for ERSPAN")
    Reported-by: syzbot+9723f2d288e49b492cf0@syzkaller.appspotmail.com
    Reported-by: syzbot+f0ddeb2b032a8e1d9098@syzkaller.appspotmail.com
    Reported-by: syzbot+f14b3703cd8d7670203f@syzkaller.appspotmail.com
    Reported-by: syzbot+eefa384efad8d7997f20@syzkaller.appspotmail.com
    Signed-off-by: William Tu <u9012063@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1d080f096fe33f031d26e19b3ef0146f66b8b0f1
Author: Borislav Petkov <bp@suse.de>
Date:   Tue Jan 23 11:41:33 2018 +0100

    x86/microcode: Fix again accessing initrd after having been freed
    
    Commit 24c2503255d3 ("x86/microcode: Do not access the initrd after it has
    been freed") fixed attempts to access initrd from the microcode loader
    after it has been freed. However, a similar KASAN warning was reported
    (stack trace edited):
    
      smpboot: Booting Node 0 Processor 1 APIC 0x11
      ==================================================================
      BUG: KASAN: use-after-free in find_cpio_data+0x9b5/0xa50
      Read of size 1 at addr ffff880035ffd000 by task swapper/1/0
    
      CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.14.8-slack #7
      Hardware name: System manufacturer System Product Name/A88X-PLUS, BIOS 3003 03/10/2016
      Call Trace:
       dump_stack
       print_address_description
       kasan_report
       ? find_cpio_data
       __asan_report_load1_noabort
       find_cpio_data
       find_microcode_in_initrd
       __load_ucode_amd
       load_ucode_amd_ap
          load_ucode_ap
    
    After some investigation, it turned out that a merge was done using the
    wrong side to resolve, leading to picking up the previous state, before
    the 24c2503255d3 fix. Therefore the Fixes tag below contains a merge
    commit 591ff9ea51cec683e4cb378a3469228ba1d69010
Author: Wei Wang <weiwan@google.com>
Date:   Thu Jan 18 10:40:03 2018 -0800

    ipv6: don't let tb6_root node share routes with other node
    
    After commit 4512c43eac7e, if we add a route to the subtree of tb6_root
    which does not have any route attached to it yet, the current code will
    let tb6_root and the node in the subtree share the same route.
    This could cause problem cause tb6_root has RTN_INFO flag marked and the
    tree repair and clean up code will not work properly.
    This commit makes sure tb6_root->leaf points back to null_entry instead
    of sharing route with other node.
    
    It fixes the following syzkaller reported issue:
    BUG: KASAN: use-after-free in ipv6_prefix_equal include/net/ipv6.h:540 [inline]
    BUG: KASAN: use-after-free in fib6_add_1+0x165f/0x1790 net/ipv6/ip6_fib.c:618
    Read of size 8 at addr ffff8801bc043498 by task syz-executor5/19819
    
    CPU: 1 PID: 19819 Comm: syz-executor5 Not tainted 4.15.0-rc7+ #186
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x25b/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     ipv6_prefix_equal include/net/ipv6.h:540 [inline]
     fib6_add_1+0x165f/0x1790 net/ipv6/ip6_fib.c:618
     fib6_add+0x5fa/0x1540 net/ipv6/ip6_fib.c:1214
     __ip6_ins_rt+0x6c/0x90 net/ipv6/route.c:1003
     ip6_route_add+0x141/0x190 net/ipv6/route.c:2790
     ipv6_route_ioctl+0x4db/0x6b0 net/ipv6/route.c:3299
     inet6_ioctl+0xef/0x1e0 net/ipv6/af_inet6.c:520
     sock_do_ioctl+0x65/0xb0 net/socket.c:958
     sock_ioctl+0x2c2/0x440 net/socket.c:1055
     vfs_ioctl fs/ioctl.c:46 [inline]
     do_vfs_ioctl+0x1b1/0x1520 fs/ioctl.c:686
     SYSC_ioctl fs/ioctl.c:701 [inline]
     SyS_ioctl+0x8f/0xc0 fs/ioctl.c:692
     entry_SYSCALL_64_fastpath+0x23/0x9a
    RIP: 0033:0x452ac9
    RSP: 002b:00007fd42b321c58 EFLAGS: 00000212 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 000000000071bea0 RCX: 0000000000452ac9
    RDX: 0000000020fd7000 RSI: 000000000000890b RDI: 0000000000000013
    RBP: 000000000000049e R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000212 R12: 00000000006f4f70
    R13: 00000000ffffffff R14: 00007fd42b3226d4 R15: 0000000000000000
    
    Fixes: 4512c43eac7e ("ipv6: remove null_entry before adding default route")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4413834452a65dd322aeeb8da3b4da58b3daa73b
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Tue Jan 16 16:14:06 2018 -0800

    IB/srpt: Rework srpt_disconnect_ch_sync()
    
    This patch fixes a use-after-free issue for ch->release_done when
    running the SRP protocol on top of the rdma_rxe driver.
    
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 55edde9fff1ae4114c893c572e641620c76c9c21
Author: Nick Desaulniers <nick.desaulniers@gmail.com>
Date:   Thu Jan 18 11:36:41 2018 -0800

    Input: synaptics-rmi4 - prevent UAF reported by KASAN
    
    KASAN found a UAF due to dangling pointer. As the report below says,
    rmi_f11_attention() accesses drvdata->attn_data.data, which was freed in
    rmi_irq_fn.
    
    [  311.424062] BUG: KASAN: use-after-free in rmi_f11_attention+0x526/0x5e0 [rmi_core]
    [  311.424067] Read of size 27 at addr ffff88041fd610db by task irq/131-i2c_hid/1162
    [  311.424075] CPU: 0 PID: 1162 Comm: irq/131-i2c_hid Not tainted 4.15.0-rc8+ #2
    [  311.424076] Hardware name: Razer Blade Stealth/Razer, BIOS 6.05 01/26/2017
    [  311.424078] Call Trace:
    [  311.424086]  dump_stack+0xae/0x12d
    [  311.424090]  ? _atomic_dec_and_lock+0x103/0x103
    [  311.424094]  ? show_regs_print_info+0xa/0xa
    [  311.424099]  ? input_handle_event+0x10b/0x810
    [  311.424104]  print_address_description+0x65/0x229
    [  311.424108]  kasan_report.cold.5+0xa7/0x281
    [  311.424117]  rmi_f11_attention+0x526/0x5e0 [rmi_core]
    [  311.424123]  ? memcpy+0x1f/0x50
    [  311.424132]  ? rmi_f11_attention+0x526/0x5e0 [rmi_core]
    [  311.424143]  ? rmi_f11_probe+0x1e20/0x1e20 [rmi_core]
    [  311.424153]  ? rmi_process_interrupt_requests+0x220/0x2a0 [rmi_core]
    [  311.424163]  ? rmi_irq_fn+0x22c/0x270 [rmi_core]
    [  311.424173]  ? rmi_process_interrupt_requests+0x2a0/0x2a0 [rmi_core]
    [  311.424177]  ? free_irq+0xa0/0xa0
    [  311.424180]  ? irq_finalize_oneshot.part.39+0xeb/0x180
    [  311.424190]  ? rmi_process_interrupt_requests+0x2a0/0x2a0 [rmi_core]
    [  311.424193]  ? irq_thread_fn+0x3d/0x80
    [  311.424197]  ? irq_finalize_oneshot.part.39+0x180/0x180
    [  311.424200]  ? irq_thread+0x21d/0x290
    [  311.424203]  ? irq_thread_check_affinity+0x170/0x170
    [  311.424207]  ? remove_wait_queue+0x150/0x150
    [  311.424212]  ? kasan_unpoison_shadow+0x30/0x40
    [  311.424214]  ? __init_waitqueue_head+0xa0/0xd0
    [  311.424218]  ? task_non_contending.cold.55+0x18/0x18
    [  311.424221]  ? irq_forced_thread_fn+0xa0/0xa0
    [  311.424226]  ? irq_thread_check_affinity+0x170/0x170
    [  311.424230]  ? kthread+0x19e/0x1c0
    [  311.424233]  ? kthread_create_worker_on_cpu+0xc0/0xc0
    [  311.424237]  ? ret_from_fork+0x32/0x40
    
    [  311.424244] Allocated by task 899:
    [  311.424249]  kasan_kmalloc+0xbf/0xe0
    [  311.424252]  __kmalloc_track_caller+0xd9/0x1f0
    [  311.424255]  kmemdup+0x17/0x40
    [  311.424264]  rmi_set_attn_data+0xa4/0x1b0 [rmi_core]
    [  311.424269]  rmi_raw_event+0x10b/0x1f0 [hid_rmi]
    [  311.424278]  hid_input_report+0x1a8/0x2c0 [hid]
    [  311.424283]  i2c_hid_irq+0x146/0x1d0 [i2c_hid]
    [  311.424286]  irq_thread_fn+0x3d/0x80
    [  311.424288]  irq_thread+0x21d/0x290
    [  311.424291]  kthread+0x19e/0x1c0
    [  311.424293]  ret_from_fork+0x32/0x40
    
    [  311.424296] Freed by task 1162:
    [  311.424300]  kasan_slab_free+0x71/0xc0
    [  311.424303]  kfree+0x90/0x190
    [  311.424311]  rmi_irq_fn+0x1b2/0x270 [rmi_core]
    [  311.424319]  rmi_irq_fn+0x257/0x270 [rmi_core]
    [  311.424322]  irq_thread_fn+0x3d/0x80
    [  311.424324]  irq_thread+0x21d/0x290
    [  311.424327]  kthread+0x19e/0x1c0
    [  311.424330]  ret_from_fork+0x32/0x40
    
    [  311.424334] The buggy address belongs to the object at ffff88041fd610c0 which belongs to the cache kmalloc-64 of size 64
    [  311.424340] The buggy address is located 27 bytes inside of 64-byte region [ffff88041fd610c0, ffff88041fd61100)
    [  311.424344] The buggy address belongs to the page:
    [  311.424348] page:ffffea00107f5840 count:1 mapcount:0 mapping: (null) index:0x0
    [  311.424353] flags: 0x17ffffc0000100(slab)
    [  311.424358] raw: 0017ffffc0000100 0000000000000000 0000000000000000 00000001802a002a
    [  311.424363] raw: dead000000000100 dead000000000200 ffff8804228036c0 0000000000000000
    [  311.424366] page dumped because: kasan: bad access detected
    
    [  311.424369] Memory state around the buggy address:
    [  311.424373]  ffff88041fd60f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [  311.424377]  ffff88041fd61000: fb fb fb fb fb fb fb fb fc fc fc fc fb fb fb fb
    [  311.424381] >ffff88041fd61080: fb fb fb fb fc fc fc fc fb fb fb fb fb fb fb fb
    [  311.424384]                                                     ^
    [  311.424387]  ffff88041fd61100: fc fc fc fc fb fb fb fb fb fb fb fb fc fc fc fc
    [  311.424391]  ffff88041fd61180: fb fb fb fb fb fb fb fb fc fc fc fc fb fb fb fb
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Nick Desaulniers <nick.desaulniers@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>

commit d91c3e17f75f218022140dee18cf515292184a8f
Author: Ilya Lesokhin <ilyal@mellanox.com>
Date:   Tue Jan 16 15:31:52 2018 +0200

    net/tls: Only attach to sockets in ESTABLISHED state
    
    Calling accept on a TCP socket with a TLS ulp attached results
    in two sockets that share the same ulp context.
    The ulp context is freed while a socket is destroyed, so
    after one of the sockets is released, the second second will
    trigger a use after free when it tries to access the ulp context
    attached to it.
    We restrict the TLS ulp to sockets in ESTABLISHED state
    to prevent the scenario above.
    
    Fixes: 3c4d7559159b ("tls: kernel TLS support")
    Reported-by: syzbot+904e7cd6c5c741609228@syzkaller.appspotmail.com
    Signed-off-by: Ilya Lesokhin <ilyal@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d47924417319e3b6a728c0b690f183e75bc2a702
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 16 19:59:59 2018 +0100

    x86/intel_rdt/cqm: Prevent use after free
    
    intel_rdt_iffline_cpu() -> domain_remove_cpu() frees memory first and then
    proceeds accessing it.
    
     BUG: KASAN: use-after-free in find_first_bit+0x1f/0x80
     Read of size 8 at addr ffff883ff7c1e780 by task cpuhp/31/195
     find_first_bit+0x1f/0x80
     has_busy_rmid+0x47/0x70
     intel_rdt_offline_cpu+0x4b4/0x510
    
     Freed by task 195:
     kfree+0x94/0x1a0
     intel_rdt_offline_cpu+0x17d/0x510
    
    Do the teardown first and then free memory.
    
    Fixes: 24247aeeabe9 ("x86/intel_rdt/cqm: Improve limbo list processing")
    Reported-by: Joseph Salisbury <joseph.salisbury@canonical.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ravi Shankar <ravi.v.shankar@intel.com>
    Cc: Peter Zilstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Vikas Shivappa <vikas.shivappa@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: "Roderick W. Smith" <rod.smith@canonical.com>
    Cc: 1733662@bugs.launchpad.net
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/alpine.DEB.2.20.1801161957510.2366@nanos

commits)
      net, sched: fix panic when updating miniq {b,q}stats
      qed: Fix potential use-after-free in qed_spq_post()
      nfp: use the correct index for link speed table
      lan78xx: Fix failure in USB Full Speed
      sctp: do not allow the v4 socket to bind a v4mapped v6 address
      sctp: return error if the asoc has been peeled off in sctp_wait_for_sndbuf
      sctp: reinit stream if stream outcnt has been change by sinit in sendmsg
      ibmvnic: Fix pending MAC address changes
      netlink: extack: avoid parenthesized string constant warning
      ipv4: Make neigh lookup keys for loopback/point-to-point devices be INADDR_ANY
      net: Allow neigh contructor functions ability to modify the primary_key
      sh_eth: fix dumping ARSTR
      Revert "openvswitch: Add erspan tunnel support."
      net/tls: Fix inverted error codes to avoid endless loop
      ipv6: ip6_make_skb() needs to clear cork.base.dst
      sctp: avoid compiler warning on implicit fallthru
      net: ipv4: Make "ip route get" match iif lo rules again.
      netlink: extack needs to be reset each time through loop
      tipc: fix a memory leak in tipc_nl_node_get_link()
      ipv6: fix udpv6 sendmsg crash caused by too small MTU
      ...

commit 70eeff66c4696cee4076d6388b6bede5bd7ff71c
Author: Roland Dreier <roland@purestorage.com>
Date:   Mon Jan 15 12:24:49 2018 -0800

    qed: Fix potential use-after-free in qed_spq_post()
    
    We need to check if p_ent->comp_mode is QED_SPQ_MODE_EBLOCK before
    calling qed_spq_add_entry().  The test is fine is the mode is EBLOCK,
    but if it isn't then qed_spq_add_entry() might kfree(p_ent).
    
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd1c06a4f5e2b2c96b9ff09a13983efb2d013b18
Author: Masamitsu Yamazaki <m-yamazaki@ah.jp.nec.com>
Date:   Mon Jan 15 07:58:12 2018 +0000

    ipmi: Clear smi_info->thread to prevent use-after-free during module unload
    
    During code inspection, I found an use-after-free possibility during unloading
    ipmi_si in the polling mode.
    
    If start_new_msg() is called after kthread_stop(), the function will try to
    wake up non-existing kthread using the dangling pointer.
    
    Possible scenario is when a new internal message is generated after
    ipmi_unregister_smi()[*1] and remains after stop_timer_and_thread()
    in clenaup_one_si() [*2].
    Use-after-free could occur as follows depending on BMC replies.
    
      cleanup_one_si
        => ipmi_unregister_smi
           [*1]
        => stop_timer_and_thread
           => kthread_stop(smi_info->thread)
           [*2]
        => poll
           => smi_event_handler
              => start_new_msg
                 => if (smi_info->thread)
                        wake_up_process(smi_info->thread) <== use-after-free!!
    
    Although currently it seems no such message is generated in the polling mode,
    some changes might introduce that in thefuture. For example in the interrupt
    mode, disable_si_irq() does that at [*2].
    
    So let's prevent such a critical issue possibility now.
    
    Signed-off-by: Yamazaki Masamitsu <m-yamazaki@ah.jp.nec.com>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit fbca30c51350399f49b09421b5ee2ef8d00c05d8
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:46 2017 +0200

    lockd: convert nlm_rqst.a_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nlm_rqst.a_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nlm_rqst.a_count it might make a difference
    in following places:
     - nlmclnt_release_call() and nlmsvc_release_call(): decrement
       in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit 431f125b67d51a84b93095a7df6b3c30222753b1
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:45 2017 +0200

    lockd: convert nlm_lockowner.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nlm_lockowner.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nlm_lockowner.count it might make a difference
    in following places:
     - nlm_put_lockowner(): decrement in refcount_dec_and_lock() only
       provides RELEASE ordering, control dependency on success and
       holds a spin lock on success vs. fully ordered atomic counterpart.
       No changes in spin lock guarantees.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit c751082ceff7d5907f436729dd7cccb88cffc4de
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:44 2017 +0200

    lockd: convert nsm_handle.sm_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nsm_handle.sm_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nsm_handle.sm_count it might make a difference
    in following places:
     - nsm_release(): decrement in refcount_dec_and_lock() only
       provides RELEASE ordering, control dependency on success
       and holds a spin lock on success vs. fully ordered atomic
       counterpart. No change for the spin lock guarantees.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit fee21fb587f57748c3c971e3432c4a28d74146fc
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:43 2017 +0200

    lockd: convert nlm_host.h_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nlm_host.h_count  is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nlm_host.h_count it might make a difference
    in following places:
     - nlmsvc_release_host(): decrement in refcount_dec()
       provides RELEASE ordering, while original atomic_dec()
       was fully unordered. Since the change is for better, it
       should not matter.
     - nlmclnt_release_host(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart. It doesn't seem to
       matter in this case since object freeing happens under mutex
       lock anyway.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commits here, including two that were tagged but never merged.
    Three of them are for the HPT resizing code; two of those fix a
    user-triggerable use-after-free in the host, and one that fixes
    stale TLB entries in the guest.  The remaining commit fixes a bug
    causing PR KVM guests under PowerVM to fail to start.

commit 5005c8514285ae4f28e862f8d91faaa2015e03a3
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jan 6 10:56:18 2018 +0000

    drm/i915: Don't adjust priority on an already signaled fence
    
    When we retire a signaled fence, we free the dependency tree. However,
    we skip clearing the list so that if we then try to adjust the priority
    of the signaled fence, we may walk the list of freed dependencies.
    
    [ 3083.156757] ==================================================================
    [ 3083.156806] BUG: KASAN: use-after-free in execlists_schedule+0x199/0x660 [i915]
    [ 3083.156810] Read of size 8 at addr ffff8806bf20f400 by task Xorg/831
    
    [ 3083.156815] CPU: 0 PID: 831 Comm: Xorg Not tainted 4.15.0-rc6-no-psn+ #1
    [ 3083.156817] Hardware name: Notebook                         N24_25BU/N24_25BU, BIOS 5.12 02/17/2017
    [ 3083.156818] Call Trace:
    [ 3083.156823]  dump_stack+0x5c/0x7a
    [ 3083.156827]  print_address_description+0x6b/0x290
    [ 3083.156830]  kasan_report+0x28f/0x380
    [ 3083.156872]  ? execlists_schedule+0x199/0x660 [i915]
    [ 3083.156914]  execlists_schedule+0x199/0x660 [i915]
    [ 3083.156956]  ? intel_crtc_atomic_check+0x146/0x4e0 [i915]
    [ 3083.156997]  ? execlists_submit_request+0xe0/0xe0 [i915]
    [ 3083.157038]  ? i915_vma_misplaced.part.4+0x25/0xb0 [i915]
    [ 3083.157079]  ? __i915_vma_do_pin+0x7c8/0xc80 [i915]
    [ 3083.157121]  ? intel_atomic_state_alloc+0x44/0x60 [i915]
    [ 3083.157130]  ? drm_atomic_helper_page_flip+0x3e/0xb0 [drm_kms_helper]
    [ 3083.157145]  ? drm_mode_page_flip_ioctl+0x7d2/0x850 [drm]
    [ 3083.157159]  ? drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157172]  ? drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157211]  i915_gem_object_wait_priority+0x14c/0x2c0 [i915]
    [ 3083.157251]  ? i915_gem_get_aperture_ioctl+0x150/0x150 [i915]
    [ 3083.157290]  ? i915_vma_pin_fence+0x1d8/0x320 [i915]
    [ 3083.157331]  ? intel_pin_and_fence_fb_obj+0x175/0x250 [i915]
    [ 3083.157372]  ? intel_rotation_info_size+0x60/0x60 [i915]
    [ 3083.157413]  ? intel_link_compute_m_n+0x80/0x80 [i915]
    [ 3083.157428]  ? drm_dev_printk+0x1b0/0x1b0 [drm]
    [ 3083.157443]  ? drm_dev_printk+0x1b0/0x1b0 [drm]
    [ 3083.157485]  intel_prepare_plane_fb+0x2f8/0x5a0 [i915]
    [ 3083.157527]  ? intel_crtc_get_vblank_counter+0x80/0x80 [i915]
    [ 3083.157536]  drm_atomic_helper_prepare_planes+0xa0/0x1c0 [drm_kms_helper]
    [ 3083.157587]  intel_atomic_commit+0x12e/0x4e0 [i915]
    [ 3083.157605]  drm_atomic_helper_page_flip+0xa2/0xb0 [drm_kms_helper]
    [ 3083.157621]  drm_mode_page_flip_ioctl+0x7d2/0x850 [drm]
    [ 3083.157638]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157652]  ? drm_lease_owner+0x1a/0x30 [drm]
    [ 3083.157668]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157681]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157696]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157711]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157725]  ? drm_getstats+0x20/0x20 [drm]
    [ 3083.157729]  ? timerqueue_del+0x49/0x80
    [ 3083.157732]  ? __remove_hrtimer+0x62/0xb0
    [ 3083.157735]  ? hrtimer_try_to_cancel+0x173/0x210
    [ 3083.157738]  do_vfs_ioctl+0x13b/0x880
    [ 3083.157741]  ? ioctl_preallocate+0x140/0x140
    [ 3083.157744]  ? _raw_spin_unlock_irq+0xe/0x30
    [ 3083.157746]  ? do_setitimer+0x234/0x370
    [ 3083.157750]  ? SyS_setitimer+0x19e/0x1b0
    [ 3083.157752]  ? SyS_alarm+0x140/0x140
    [ 3083.157755]  ? __rcu_read_unlock+0x66/0x80
    [ 3083.157757]  ? __fget+0xc4/0x100
    [ 3083.157760]  SyS_ioctl+0x74/0x80
    [ 3083.157763]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    [ 3083.157765] RIP: 0033:0x7f6135d0c6a7
    [ 3083.157767] RSP: 002b:00007fff01451888 EFLAGS: 00003246 ORIG_RAX: 0000000000000010
    [ 3083.157769] RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 00007f6135d0c6a7
    [ 3083.157771] RDX: 00007fff01451950 RSI: 00000000c01864b0 RDI: 000000000000000c
    [ 3083.157772] RBP: 00007f613076f600 R08: 0000000000000001 R09: 0000000000000000
    [ 3083.157773] R10: 0000000000000060 R11: 0000000000003246 R12: 0000000000000000
    [ 3083.157774] R13: 0000000000000060 R14: 000000000000001b R15: 0000000000000060
    
    [ 3083.157779] Allocated by task 831:
    [ 3083.157783]  kmem_cache_alloc+0xc0/0x200
    [ 3083.157822]  i915_gem_request_await_dma_fence+0x2c4/0x5d0 [i915]
    [ 3083.157861]  i915_gem_request_await_object+0x321/0x370 [i915]
    [ 3083.157900]  i915_gem_do_execbuffer+0x1165/0x19c0 [i915]
    [ 3083.157937]  i915_gem_execbuffer2+0x1ad/0x550 [i915]
    [ 3083.157950]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157962]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157964]  do_vfs_ioctl+0x13b/0x880
    [ 3083.157966]  SyS_ioctl+0x74/0x80
    [ 3083.157968]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    [ 3083.157971] Freed by task 831:
    [ 3083.157973]  kmem_cache_free+0x77/0x220
    [ 3083.158012]  i915_gem_request_retire+0x72c/0xa70 [i915]
    [ 3083.158051]  i915_gem_request_alloc+0x1e9/0x8b0 [i915]
    [ 3083.158089]  i915_gem_do_execbuffer+0xa96/0x19c0 [i915]
    [ 3083.158127]  i915_gem_execbuffer2+0x1ad/0x550 [i915]
    [ 3083.158140]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.158153]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.158155]  do_vfs_ioctl+0x13b/0x880
    [ 3083.158156]  SyS_ioctl+0x74/0x80
    [ 3083.158158]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    [ 3083.158162] The buggy address belongs to the object at ffff8806bf20f400
                    which belongs to the cache i915_dependency of size 64
    [ 3083.158166] The buggy address is located 0 bytes inside of
                    64-byte region [ffff8806bf20f400, ffff8806bf20f440)
    [ 3083.158168] The buggy address belongs to the page:
    [ 3083.158171] page:00000000d43decc4 count:1 mapcount:0 mapping:          (null) index:0x0
    [ 3083.158174] flags: 0x17ffe0000000100(slab)
    [ 3083.158179] raw: 017ffe0000000100 0000000000000000 0000000000000000 0000000180200020
    [ 3083.158182] raw: ffffea001afc16c0 0000000500000005 ffff880731b881c0 0000000000000000
    [ 3083.158184] page dumped because: kasan: bad access detected
    
    [ 3083.158187] Memory state around the buggy address:
    [ 3083.158190]  ffff8806bf20f300: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158192]  ffff8806bf20f380: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158195] >ffff8806bf20f400: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158196]                    ^
    [ 3083.158199]  ffff8806bf20f480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158201]  ffff8806bf20f500: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158203] ==================================================================
    
    Reported-by: Alexandru Chirvasitu <achirvasub@gmail.com>
    Reported-by: Mike Keehan <mike@keehan.net>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=104436
    Fixes: 1f181225f8ec ("drm/i915/execlists: Keep request->priority for its lifetime")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Alexandru Chirvasitu <achirvasub@gmail.com>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Tested-by: Alexandru Chirvasitu <achirvasub@gmail.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180106105618.13532-1-chris@chris-wilson.co.uk
    (cherry picked from commit c218ee03b9315073ce43992792554dafa0626eb8)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit cd52cb26e7ead5093635e98e07e221e4df482d34
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Sun Nov 26 15:31:04 2017 +0200

    iser-target: Fix possible use-after-free in connection establishment error
    
    In case we fail to establish the connection we must drain our pre-posted
    login recieve work request before continuing safely with connection
    teardown.
    
    Fixes: a060b5629ab0 ("IB/core: generic RDMA READ/WRITE API")
    Cc: <stable@vger.kernel.org> # 4.7+
    Reported-by: Amrani, Ram <Ram.Amrani@cavium.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit f5cb779ba16334b45ba8946d6bfa6d9834d1527f
Author: Martijn Coenen <maco@android.com>
Date:   Fri Jan 5 11:27:07 2018 +0100

    ANDROID: binder: remove waitqueue when thread exits.
    
    binder_poll() passes the thread->wait waitqueue that
    can be slept on for work. When a thread that uses
    epoll explicitly exits using BINDER_THREAD_EXIT,
    the waitqueue is freed, but it is never removed
    from the corresponding epoll data structure. When
    the process subsequently exits, the epoll cleanup
    code tries to access the waitlist, which results in
    a use-after-free.
    
    Prevent this by using POLLFREE when the thread exits.
    
    Signed-off-by: Martijn Coenen <maco@android.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: stable <stable@vger.kernel.org> # 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c218ee03b9315073ce43992792554dafa0626eb8
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jan 6 10:56:18 2018 +0000

    drm/i915: Don't adjust priority on an already signaled fence
    
    When we retire a signaled fence, we free the dependency tree. However,
    we skip clearing the list so that if we then try to adjust the priority
    of the signaled fence, we may walk the list of freed dependencies.
    
    [ 3083.156757] ==================================================================
    [ 3083.156806] BUG: KASAN: use-after-free in execlists_schedule+0x199/0x660 [i915]
    [ 3083.156810] Read of size 8 at addr ffff8806bf20f400 by task Xorg/831
    
    [ 3083.156815] CPU: 0 PID: 831 Comm: Xorg Not tainted 4.15.0-rc6-no-psn+ #1
    [ 3083.156817] Hardware name: Notebook                         N24_25BU/N24_25BU, BIOS 5.12 02/17/2017
    [ 3083.156818] Call Trace:
    [ 3083.156823]  dump_stack+0x5c/0x7a
    [ 3083.156827]  print_address_description+0x6b/0x290
    [ 3083.156830]  kasan_report+0x28f/0x380
    [ 3083.156872]  ? execlists_schedule+0x199/0x660 [i915]
    [ 3083.156914]  execlists_schedule+0x199/0x660 [i915]
    [ 3083.156956]  ? intel_crtc_atomic_check+0x146/0x4e0 [i915]
    [ 3083.156997]  ? execlists_submit_request+0xe0/0xe0 [i915]
    [ 3083.157038]  ? i915_vma_misplaced.part.4+0x25/0xb0 [i915]
    [ 3083.157079]  ? __i915_vma_do_pin+0x7c8/0xc80 [i915]
    [ 3083.157121]  ? intel_atomic_state_alloc+0x44/0x60 [i915]
    [ 3083.157130]  ? drm_atomic_helper_page_flip+0x3e/0xb0 [drm_kms_helper]
    [ 3083.157145]  ? drm_mode_page_flip_ioctl+0x7d2/0x850 [drm]
    [ 3083.157159]  ? drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157172]  ? drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157211]  i915_gem_object_wait_priority+0x14c/0x2c0 [i915]
    [ 3083.157251]  ? i915_gem_get_aperture_ioctl+0x150/0x150 [i915]
    [ 3083.157290]  ? i915_vma_pin_fence+0x1d8/0x320 [i915]
    [ 3083.157331]  ? intel_pin_and_fence_fb_obj+0x175/0x250 [i915]
    [ 3083.157372]  ? intel_rotation_info_size+0x60/0x60 [i915]
    [ 3083.157413]  ? intel_link_compute_m_n+0x80/0x80 [i915]
    [ 3083.157428]  ? drm_dev_printk+0x1b0/0x1b0 [drm]
    [ 3083.157443]  ? drm_dev_printk+0x1b0/0x1b0 [drm]
    [ 3083.157485]  intel_prepare_plane_fb+0x2f8/0x5a0 [i915]
    [ 3083.157527]  ? intel_crtc_get_vblank_counter+0x80/0x80 [i915]
    [ 3083.157536]  drm_atomic_helper_prepare_planes+0xa0/0x1c0 [drm_kms_helper]
    [ 3083.157587]  intel_atomic_commit+0x12e/0x4e0 [i915]
    [ 3083.157605]  drm_atomic_helper_page_flip+0xa2/0xb0 [drm_kms_helper]
    [ 3083.157621]  drm_mode_page_flip_ioctl+0x7d2/0x850 [drm]
    [ 3083.157638]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157652]  ? drm_lease_owner+0x1a/0x30 [drm]
    [ 3083.157668]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157681]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157696]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157711]  ? drm_mode_cursor2_ioctl+0x10/0x10 [drm]
    [ 3083.157725]  ? drm_getstats+0x20/0x20 [drm]
    [ 3083.157729]  ? timerqueue_del+0x49/0x80
    [ 3083.157732]  ? __remove_hrtimer+0x62/0xb0
    [ 3083.157735]  ? hrtimer_try_to_cancel+0x173/0x210
    [ 3083.157738]  do_vfs_ioctl+0x13b/0x880
    [ 3083.157741]  ? ioctl_preallocate+0x140/0x140
    [ 3083.157744]  ? _raw_spin_unlock_irq+0xe/0x30
    [ 3083.157746]  ? do_setitimer+0x234/0x370
    [ 3083.157750]  ? SyS_setitimer+0x19e/0x1b0
    [ 3083.157752]  ? SyS_alarm+0x140/0x140
    [ 3083.157755]  ? __rcu_read_unlock+0x66/0x80
    [ 3083.157757]  ? __fget+0xc4/0x100
    [ 3083.157760]  SyS_ioctl+0x74/0x80
    [ 3083.157763]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    [ 3083.157765] RIP: 0033:0x7f6135d0c6a7
    [ 3083.157767] RSP: 002b:00007fff01451888 EFLAGS: 00003246 ORIG_RAX: 0000000000000010
    [ 3083.157769] RAX: ffffffffffffffda RBX: 0000000000000004 RCX: 00007f6135d0c6a7
    [ 3083.157771] RDX: 00007fff01451950 RSI: 00000000c01864b0 RDI: 000000000000000c
    [ 3083.157772] RBP: 00007f613076f600 R08: 0000000000000001 R09: 0000000000000000
    [ 3083.157773] R10: 0000000000000060 R11: 0000000000003246 R12: 0000000000000000
    [ 3083.157774] R13: 0000000000000060 R14: 000000000000001b R15: 0000000000000060
    
    [ 3083.157779] Allocated by task 831:
    [ 3083.157783]  kmem_cache_alloc+0xc0/0x200
    [ 3083.157822]  i915_gem_request_await_dma_fence+0x2c4/0x5d0 [i915]
    [ 3083.157861]  i915_gem_request_await_object+0x321/0x370 [i915]
    [ 3083.157900]  i915_gem_do_execbuffer+0x1165/0x19c0 [i915]
    [ 3083.157937]  i915_gem_execbuffer2+0x1ad/0x550 [i915]
    [ 3083.157950]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.157962]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.157964]  do_vfs_ioctl+0x13b/0x880
    [ 3083.157966]  SyS_ioctl+0x74/0x80
    [ 3083.157968]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    [ 3083.157971] Freed by task 831:
    [ 3083.157973]  kmem_cache_free+0x77/0x220
    [ 3083.158012]  i915_gem_request_retire+0x72c/0xa70 [i915]
    [ 3083.158051]  i915_gem_request_alloc+0x1e9/0x8b0 [i915]
    [ 3083.158089]  i915_gem_do_execbuffer+0xa96/0x19c0 [i915]
    [ 3083.158127]  i915_gem_execbuffer2+0x1ad/0x550 [i915]
    [ 3083.158140]  drm_ioctl_kernel+0xa7/0xf0 [drm]
    [ 3083.158153]  drm_ioctl+0x45b/0x560 [drm]
    [ 3083.158155]  do_vfs_ioctl+0x13b/0x880
    [ 3083.158156]  SyS_ioctl+0x74/0x80
    [ 3083.158158]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    
    [ 3083.158162] The buggy address belongs to the object at ffff8806bf20f400
                    which belongs to the cache i915_dependency of size 64
    [ 3083.158166] The buggy address is located 0 bytes inside of
                    64-byte region [ffff8806bf20f400, ffff8806bf20f440)
    [ 3083.158168] The buggy address belongs to the page:
    [ 3083.158171] page:00000000d43decc4 count:1 mapcount:0 mapping:          (null) index:0x0
    [ 3083.158174] flags: 0x17ffe0000000100(slab)
    [ 3083.158179] raw: 017ffe0000000100 0000000000000000 0000000000000000 0000000180200020
    [ 3083.158182] raw: ffffea001afc16c0 0000000500000005 ffff880731b881c0 0000000000000000
    [ 3083.158184] page dumped because: kasan: bad access detected
    
    [ 3083.158187] Memory state around the buggy address:
    [ 3083.158190]  ffff8806bf20f300: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158192]  ffff8806bf20f380: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158195] >ffff8806bf20f400: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158196]                    ^
    [ 3083.158199]  ffff8806bf20f480: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158201]  ffff8806bf20f500: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [ 3083.158203] ==================================================================
    
    Reported-by: Alexandru Chirvasitu <achirvasub@gmail.com>
    Reported-by: Mike Keehan <mike@keehan.net>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=104436
    Fixes: 1f181225f8ec ("drm/i915/execlists: Keep request->priority for its lifetime")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Alexandru Chirvasitu <achirvasub@gmail.com>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Tested-by: Alexandru Chirvasitu <achirvasub@gmail.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180106105618.13532-1-chris@chris-wilson.co.uk

commit ae6650163c66a7eff1acd6eb8b0f752dcfa8eba5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 5 16:26:00 2018 -0800

    loop: fix concurrent lo_open/lo_release
    
    范龙飞 reports that KASAN can report a use-after-free in __lock_acquire.
    The reason is due to insufficient serialization in lo_release(), which
    will continue to use the loop device even after it has decremented the
    lo_refcnt to zero.
    
    In the meantime, another process can come in, open the loop device
    again as it is being shut down. Confusion ensues.
    
    Reported-by: 范龙飞 <long7573@126.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit fb350e0ad99359768e1e80b4784692031ec340e4
Author: Ming Lei <ming.lei@redhat.com>
Date:   Sat Jan 6 16:27:40 2018 +0800

    blk-mq: fix race between updating nr_hw_queues and switching io sched
    
    In both elevator_switch_mq() and blk_mq_update_nr_hw_queues(), sched tags
    can be allocated, and q->nr_hw_queue is used, and race is inevitable, for
    example: blk_mq_init_sched() may trigger use-after-free on hctx, which is
    freed in blk_mq_realloc_hw_ctxs() when nr_hw_queues is decreased.
    
    This patch fixes the race be holding q->sysfs_lock.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reported-by: Yi Zhang <yi.zhang@redhat.com>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit c2856ae2f315d754a0b6a268e4c6745b332b42e7
Author: Ming Lei <ming.lei@redhat.com>
Date:   Sat Jan 6 16:27:37 2018 +0800

    blk-mq: quiesce queue before freeing queue
    
    After queue is frozen, dispatch still may happen, for example:
    
    1) requests are submitted from several contexts
    2) requests from all these contexts are inserted to queue, but may dispatch
    to LLD in one of these paths, but other paths sill need to move on even all
    these requests are completed(that means blk_mq_freeze_queue_wait() returns
    at that time)
    3) dispatch after queue freezing still moves on and causes use-after-free,
    because request queue is freed
    
    This patch quiesces queue after it is frozen, and makes sure all
    in-progress dispatch are completed.
    
    This patch fixes the following kernel crash when running heavy IOs vs.
    deleting device:
    
    [   36.719251] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
    [   36.720318] IP: kyber_has_work+0x14/0x40
    [   36.720847] PGD 254bf5067 P4D 254bf5067 PUD 255e6a067 PMD 0
    [   36.721584] Oops: 0000 [#1] PREEMPT SMP
    [   36.722105] Dumping ftrace buffer:
    [   36.722570]    (ftrace buffer empty)
    [   36.723057] Modules linked in: scsi_debug ebtable_filter ebtables ip6table_filter ip6_tables tcm_loop iscsi_target_mod target_core_file target_core_iblock target_core_pscsi target_core_mod xt_CHECKSUM iptable_mangle ipt_MASQUERADE nf_nat_masquerade_ipv4 iptable_nat nf_conntrack_ipv4 nf_defrag_ipv4 nf_nat_ipv4 nf_nat nf_conntrack libcrc32c bridge stp llc fuse iptable_filter ip_tables sd_mod sg btrfs xor zstd_decompress zstd_compress xxhash raid6_pq mptsas mptscsih bcache crc32c_intel ahci mptbase libahci serio_raw scsi_transport_sas nvme libata shpchp lpc_ich virtio_scsi nvme_core binfmt_misc dm_mod iscsi_tcp libiscsi_tcp libiscsi scsi_transport_iscsi null_blk configs
    [   36.733438] CPU: 2 PID: 2374 Comm: fio Not tainted 4.15.0-rc2.blk_mq_quiesce+ #714
    [   36.735143] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.9.3-1.fc25 04/01/2014
    [   36.736688] RIP: 0010:kyber_has_work+0x14/0x40
    [   36.737515] RSP: 0018:ffffc9000209bca0 EFLAGS: 00010202
    [   36.738431] RAX: 0000000000000008 RBX: ffff88025578bfc8 RCX: ffff880257bf4ed0
    [   36.739581] RDX: 0000000000000038 RSI: ffffffff81a98c6d RDI: ffff88025578bfc8
    [   36.740730] RBP: ffff880253cebfc8 R08: ffffc9000209bda0 R09: ffff8802554f3480
    [   36.741885] R10: ffffc9000209be60 R11: ffff880263f72538 R12: ffff88025573e9e8
    [   36.743036] R13: ffff88025578bfd0 R14: 0000000000000001 R15: 0000000000000000
    [   36.744189] FS:  00007f9b9bee67c0(0000) GS:ffff88027fc80000(0000) knlGS:0000000000000000
    [   36.746617] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   36.748483] CR2: 0000000000000008 CR3: 0000000254bf4001 CR4: 00000000003606e0
    [   36.750164] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   36.751455] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   36.752796] Call Trace:
    [   36.753992]  blk_mq_do_dispatch_sched+0x7f/0xe0
    [   36.755110]  blk_mq_sched_dispatch_requests+0x119/0x190
    [   36.756179]  __blk_mq_run_hw_queue+0x83/0x90
    [   36.757144]  __blk_mq_delay_run_hw_queue+0xaf/0x110
    [   36.758046]  blk_mq_run_hw_queue+0x24/0x70
    [   36.758845]  blk_mq_flush_plug_list+0x1e7/0x270
    [   36.759676]  blk_flush_plug_list+0xd6/0x240
    [   36.760463]  blk_finish_plug+0x27/0x40
    [   36.761195]  do_io_submit+0x19b/0x780
    [   36.761921]  ? entry_SYSCALL_64_fastpath+0x1a/0x7d
    [   36.762788]  entry_SYSCALL_64_fastpath+0x1a/0x7d
    [   36.763639] RIP: 0033:0x7f9b9699f697
    [   36.764352] RSP: 002b:00007ffc10f991b8 EFLAGS: 00000206 ORIG_RAX: 00000000000000d1
    [   36.765773] RAX: ffffffffffffffda RBX: 00000000008f6f00 RCX: 00007f9b9699f697
    [   36.766965] RDX: 0000000000a5e6c0 RSI: 0000000000000001 RDI: 00007f9b8462a000
    [   36.768377] RBP: 0000000000000000 R08: 0000000000000001 R09: 00000000008f6420
    [   36.769649] R10: 00007f9b846e5000 R11: 0000000000000206 R12: 00007f9b795d6a70
    [   36.770807] R13: 00007f9b795e4140 R14: 00007f9b795e3fe0 R15: 0000000100000000
    [   36.771955] Code: 83 c7 10 e9 3f 68 d1 ff 0f 1f 44 00 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 8b 97 b0 00 00 00 48 8d 42 08 48 83 c2 38 <48> 3b 00 74 06 b8 01 00 00 00 c3 48 3b 40 08 75 f4 48 83 c0 10
    [   36.775004] RIP: kyber_has_work+0x14/0x40 RSP: ffffc9000209bca0
    [   36.776012] CR2: 0000000000000008
    [   36.776690] ---[ end trace 4045cbce364ff2a4 ]---
    [   36.777527] Kernel panic - not syncing: Fatal exception
    [   36.778526] Dumping ftrace buffer:
    [   36.779313]    (ftrace buffer empty)
    [   36.780081] Kernel Offset: disabled
    [   36.780877] ---[ end Kernel panic - not syncing: Fatal exception
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 0cbb4b4f4c44f54af268969b18d8deda63aded59
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Jan 4 16:18:09 2018 -0800

    userfaultfd: clear the vma->vm_userfaultfd_ctx if UFFD_EVENT_FORK fails
    
    The previous fix in commit 384632e67e08 ("userfaultfd: non-cooperative:
    fix fork use after free") corrected the refcounting in case of
    UFFD_EVENT_FORK failure for the fork userfault paths.
    
    That still didn't clear the vma->vm_userfaultfd_ctx of the vmas that
    were set to point to the aborted new uffd ctx earlier in
    dup_userfaultfd.
    
    Link: http://lkml.kernel.org/r/20171223002505.593-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 66717260545b67b04ce6b004fff26de7141b2757
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:19:31 2017 +0200

    posix_acl: convert posix_acl.a_refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable posix_acl.a_refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the posix_acl.a_refcount it might make a difference
    in following places:
     - get_cached_acl(): increment in refcount_inc_not_zero() only
       guarantees control dependency on success vs. fully ordered
       atomic counterpart. However this operation is performed under
       rcu_read_lock(), so this should be fine.
     - posix_acl_release(): decrement in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit dde634057da71a3505d7a6c0b77bb24ded6728c8
Author: Alexander Kappner <agk@godking.net>
Date:   Thu Dec 21 15:06:14 2017 +0200

    xhci: Fix use-after-free in xhci debugfs
    
    Trying to read from debugfs after the system has resumed from
    hibernate causes a use-after-free and thus a protection fault.
    
    Steps to reproduce:
    Hibernate system, resume from hibernate, then run
    $ cat /sys/kernel/debug/usb/xhci/*/command-ring/enqueue
    
    [ 3902.765086] general protection fault: 0000 [#1] PREEMPT SMP
    ...
    [ 3902.765136] RIP: 0010:xhci_trb_virt_to_dma.part.50+0x5/0x30
    ...
    [ 3902.765178] Call Trace:
    [ 3902.765188]  xhci_ring_enqueue_show+0x1e/0x40
    [ 3902.765197]  seq_read+0xdb/0x3a0
    [ 3902.765204]  ? __handle_mm_fault+0x5fb/0x1210
    [ 3902.765211]  full_proxy_read+0x4a/0x70
    [ 3902.765219]  __vfs_read+0x23/0x120
    [ 3902.765228]  vfs_read+0x8e/0x130
    [ 3902.765235]  SyS_read+0x42/0x90
    [ 3902.765242]  do_syscall_64+0x6b/0x290
    [ 3902.765251]  entry_SYSCALL64_slow_path+0x25/0x25
    
    The issue is caused by the xhci ring structures being reallocated
    when the system is resumed, but pointers to the old structures
    being retained in the debugfs files "private" field:
    
    The proposed patch fixes this issue by storing a pointer to the xhci_ring
    field in the xhci device structure in debugfs rather than directly
    storing a pointer to the xhci_ring.
    
    Fixes: 02b6fdc2a153 ("usb: xhci: Add debugfs interface for xHCI driver")
    Signed-off-by: Alexander Kappner <agk@godking.net>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 203f45003a3d03eea8fa28d74cfc74c354416fdb
Author: Jan Engelhardt <jengelh@inai.de>
Date:   Tue Dec 19 19:09:07 2017 +0100

    crypto: n2 - cure use after free
    
    queue_cache_init is first called for the Control Word Queue
    (n2_crypto_probe). At that time, queue_cache[0] is NULL and a new
    kmem_cache will be allocated. If the subsequent n2_register_algs call
    fails, the kmem_cache will be released in queue_cache_destroy, but
    queue_cache_init[0] is not set back to NULL.
    
    So when the Module Arithmetic Unit gets probed next (n2_mau_probe),
    queue_cache_init will not allocate a kmem_cache again, but leave it
    as its bogus value, causing a BUG() to trigger when queue_cache[0] is
    eventually passed to kmem_cache_zalloc:
    
            n2_crypto: Found N2CP at /virtual-devices@100/n2cp@7
            n2_crypto: Registered NCS HVAPI version 2.0
            called queue_cache_init
            n2_crypto: md5 alg registration failed
            n2cp f028687c: /virtual-devices@100/n2cp@7: Unable to register algorithms.
            called queue_cache_destroy
            n2cp: probe of f028687c failed with error -22
            n2_crypto: Found NCP at /virtual-devices@100/ncp@6
            n2_crypto: Registered NCS HVAPI version 2.0
            called queue_cache_init
            kernel BUG at mm/slab.c:2993!
            Call Trace:
             [0000000000604488] kmem_cache_alloc+0x1a8/0x1e0
                      (inlined) kmem_cache_zalloc
                      (inlined) new_queue
                      (inlined) spu_queue_setup
                      (inlined) handle_exec_unit
             [0000000010c61eb4] spu_mdesc_scan+0x1f4/0x460 [n2_crypto]
             [0000000010c62b80] n2_mau_probe+0x100/0x220 [n2_crypto]
             [000000000084b174] platform_drv_probe+0x34/0xc0
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jan Engelhardt <jengelh@inai.de>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commits)
      skbuff: skb_copy_ubufs must release uarg even without user frags
      skbuff: orphan frags before zerocopy clone
      net: reevalulate autoflowlabel setting after sysctl setting
      openvswitch: Fix pop_vlan action for double tagged frames
      ipv6: Honor specified parameters in fibmatch lookup
      bpf: do not allow root to mangle valid pointers
      selftests/bpf: add tests for recent bugfixes
      bpf: fix integer overflows
      bpf: don't prune branches when a scalar is replaced with a pointer
      bpf: force strict alignment checks for stack pointers
      bpf: fix missing error return in check_stack_boundary()
      bpf: fix 32-bit ALU op verification
      bpf: fix incorrect tracking of register size truncation
      bpf: fix incorrect sign extension in check_alu_op()
      bpf/verifier: fix bounds calculation on BPF_RSH
      ipv4: Fix use-after-free when flushing FIB tables
      s390/qeth: fix error handling in checksum cmd callback
      tipc: remove joining group member from congested list
      selftests: net: Adding config fragment CONFIG_NUMA=y
      nfp: bpf: keep track of the offloaded program
      ...

commit e3524b269e451cff68b19f32b15448933a53a4f4
Author: Bryan Tan <bryantan@vmware.com>
Date:   Wed Dec 20 09:51:40 2017 -0800

    RDMA/vmw_pvrdma: Avoid use after free due to QP/CQ/SRQ destroy
    
    The use of wait queues in vmw_pvrdma for handling concurrent
    access to a resource leaves a race condition which can cause a use
    after free bug.
    
    Fix this by using the pattern from other drivers, complete() protected by
    dec_and_test to ensure complete() is called only once.
    
    Fixes: 29c8d9eba550 ("IB: Add vmw_pvrdma driver")
    Signed-off-by: Bryan Tan <bryantan@vmware.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

commit d9226ec9ef01832b1edc1781241920614c6407db
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:46 2017 +0200

    lockd: convert nlm_rqst.a_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nlm_rqst.a_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nlm_rqst.a_count it might make a difference
    in following places:
     - nlmclnt_release_call() and nlmsvc_release_call(): decrement
       in refcount_dec_and_test() only
       provides RELEASE ordering and control dependency on success
       vs. fully ordered atomic counterpart
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit 8bb3ea77933e9796f8f15a5492481a96af8302d6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:45 2017 +0200

    lockd: convert nlm_lockowner.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nlm_lockowner.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nlm_lockowner.count it might make a difference
    in following places:
     - nlm_put_lockowner(): decrement in refcount_dec_and_lock() only
       provides RELEASE ordering, control dependency on success and
       holds a spin lock on success vs. fully ordered atomic counterpart.
       No changes in spin lock guarantees.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit be819f7b66031c4a21fdc8edc47a3ecd4cac635d
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Nov 29 13:15:44 2017 +0200

    lockd: convert nsm_handle.sm_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nsm_handle.sm_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    **Important note for maintainers:
    
    Some functions from refcount_t API defined in lib/refcount.c
    have different memory ordering guarantees than their atomic
    counterparts.
    The full comparison can be seen in
    https://lkml.org/lkml/2017/11/15/57 and it is hopefully soon
    in state to be merged to the documentation tree.
    Normally the differences should not matter since refcount_t provides
    enough guarantees to satisfy the refcounting use cases, but in
    some rare cases it might matter.
    Please double check that you don't have some undocumented
    memory guarantees for this variable usage.
    
    For the nsm_handle.sm_count it might make a difference
    in following places:
     - nsm_release(): decrement in refcount_dec_and_lock() only
       provides RELEASE ordering, control dependency on success
       and holds a spin lock on success vs. fully ordered atomic
       counterpart. No change for the spin lock guarantees.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit 4f74d80971bce93d9e608c40324d662c70eb4664
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Dec 20 13:42:56 2017 +0100

    bpf: fix kallsyms handling for subprogs
    
    Right now kallsyms handling is not working with JITed subprogs.
    The reason is that when in 1c2a088a6626 ("bpf: x64: add JIT support
    for multi-function programs") in jit_subprogs() they are passed
    to bpf_prog_kallsyms_add(), then their prog type is 0, which BPF
    core will think it's a cBPF program as only cBPF programs have a
    0 type. Thus, they need to inherit the type from the main prog.
    
    Once that is fixed, they are indeed added to the BPF kallsyms
    infra, but their tag is 0. Therefore, since intention is to add
    them as bpf_prog_F_<tag>, we need to pass them to bpf_prog_calc_tag()
    first. And once this is resolved, there is a use-after-free on
    prog cleanup: we remove the kallsyms entry from the main prog,
    later walk all subprogs and call bpf_jit_free() on them. However,
    the kallsyms linkage was never released on them. Thus, do that
    for all subprogs right in __bpf_prog_put() when refcount hits 0.
    
    Fixes: 1c2a088a6626 ("bpf: x64: add JIT support for multi-function programs")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

commit ae6959273a29426813974211e41e28f495bc10a6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Dec 20 20:10:56 2017 +0100

    qeth: convert qeth_reply.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable qeth_reply.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    [jwi: removed the WARN_ONs. Use CONFIG_REFCOUNT_FULL if you care.]
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c380cd5a00f32a96b6c63148a939eb9f8836e184
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Dec 20 20:10:55 2017 +0100

    net: convert lcs_reply.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable lcs_reply.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    [jwi: removed the WARN_ONs. Use CONFIG_REFCOUNT_FULL if you care.]
    Signed-off-by: Julian Wiedmann <jwi@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b4681c2829e24943aadd1a7bb3a30d41d0a20050
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Dec 20 19:34:19 2017 +0200

    ipv4: Fix use-after-free when flushing FIB tables
    
    Since commit 0ddcf43d5d4a ("ipv4: FIB Local/MAIN table collapse") the
    local table uses the same trie allocated for the main table when custom
    rules are not in use.
    
    When a net namespace is dismantled, the main table is flushed and freed
    (via an RCU callback) before the local table. In case the callback is
    invoked before the local table is iterated, a use-after-free can occur.
    
    Fix this by iterating over the FIB tables in reverse order, so that the
    main table is always freed after the local table.
    
    v3: Reworded comment according to Alex's suggestion.
    v2: Add a comment to make the fix more explicit per Dave's and Alex's
    feedback.
    
    Fixes: 0ddcf43d5d4a ("ipv4: FIB Local/MAIN table collapse")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a1c484b3a09bda3d2a0c3c1f38691a625e4d016a
Author: Daniel Scheller <d.scheller@gmx.net>
Date:   Sun Dec 17 10:40:42 2017 -0500

    media: ddbridge: unregister I2C tuner client before detaching fe's
    
    Currently, rmmod ddbridge on a KASAN enabled kernel yields this report
    for hardware that utilises the tda18212 tuner driver:
    
      [   50.355229] ==================================================================
      [   50.355271] BUG: KASAN: use-after-free in tda18212_remove+0x5c/0xb0 [tda18212]
      [   50.355290] Write of size 288 at addr ffff8800c235cf18 by task rmmod/285
    
      [   50.355316] CPU: 1 PID: 285 Comm: rmmod Not tainted 4.15.0-rc1-13744-g352a86ad536f #11
      [   50.355318] Hardware name: Gigabyte Technology Co., Ltd. P35-DS3/P35-DS3, BIOS F3 06/11/2007
      [   50.355319] Call Trace:
      [   50.355326]  dump_stack+0x46/0x61
      [   50.355332]  print_address_description+0x79/0x270
      [   50.355336]  ? tda18212_remove+0x5c/0xb0 [tda18212]
      [   50.355339]  kasan_report+0x229/0x340
      [   50.355342]  memset+0x1f/0x40
      [   50.355345]  tda18212_remove+0x5c/0xb0 [tda18212]
      [   50.355350]  i2c_device_remove+0x97/0xe0
      [   50.355355]  device_release_driver_internal+0x267/0x510
      [   50.355358]  bus_remove_device+0x296/0x470
      [   50.355360]  device_del+0x35c/0x890
      [   50.355363]  ? __device_links_no_driver+0x1c0/0x1c0
      [   50.355367]  ? cxd2841er_get_algo+0x10/0x10 [cxd2841er]
      [   50.355371]  ? cxd2841er_get_algo+0x10/0x10 [cxd2841er]
      [   50.355374]  ? __module_text_address+0xe/0x140
      [   50.355377]  device_unregister+0x9/0x20
      [   50.355382]  dvb_input_detach.isra.24+0x286/0x480 [ddbridge]
      [   50.355388]  ddb_ports_detach+0x15f/0x4f0 [ddbridge]
      [   50.355393]  ddb_remove+0x3c/0xb0 [ddbridge]
      [   50.355397]  pci_device_remove+0x93/0x1d0
      [   50.355400]  device_release_driver_internal+0x267/0x510
      [   50.355403]  driver_detach+0xb9/0x1b0
      [   50.355406]  bus_remove_driver+0xd0/0x1f0
      [   50.355410]  pci_unregister_driver+0x25/0x210
      [   50.355415]  module_exit_ddbridge+0xc/0x45 [ddbridge]
      [   50.355418]  SyS_delete_module+0x314/0x440
      [   50.355420]  ? free_module+0x5b0/0x5b0
      [   50.355423]  ? exit_to_usermode_loop+0xa9/0xc0
      [   50.355425]  ? free_module+0x5b0/0x5b0
      [   50.355428]  do_syscall_64+0x179/0x4c0
      [   50.355432]  ? do_page_fault+0x1b/0x60
      [   50.355435]  entry_SYSCALL64_slow_path+0x25/0x25
      [   50.355438] RIP: 0033:0x7fe65d08ade7
      [   50.355439] RSP: 002b:00007fff5a6a09a8 EFLAGS: 00000202 ORIG_RAX: 00000000000000b0
      [   50.355443] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fe65d08ade7
      [   50.355445] RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000000000f4e268
      [   50.355447] RBP: 0000000000f4e200 R08: 0000000000000000 R09: 1999999999999999
      [   50.355449] R10: 0000000000000891 R11: 0000000000000202 R12: 00007fff5a6a14ef
      [   50.355451] R13: 0000000000000000 R14: 0000000000f4e200 R15: 0000000000f4d010
    
      [   50.355462] Allocated by task 164:
      [   50.355477]  cxd2841er_attach+0xc3/0x7f0 [cxd2841er]
      [   50.355482]  demod_attach_cxd28xx+0x14c/0x3f0 [ddbridge]
      [   50.355486]  dvb_input_attach+0x671/0x1e20 [ddbridge]
      [   50.355490]  ddb_ports_attach+0x3d7/0xbf0 [ddbridge]
      [   50.355495]  ddb_init+0x4b3/0xa30 [ddbridge]
      [   50.355499]  ddb_probe+0xa51/0xfe0 [ddbridge]
      [   50.355501]  pci_device_probe+0x279/0x480
      [   50.355504]  driver_probe_device+0x46f/0x7a0
      [   50.355506]  __driver_attach+0x133/0x170
      [   50.355509]  bus_for_each_dev+0x10a/0x190
      [   50.355511]  bus_add_driver+0x2a3/0x5a0
      [   50.355513]  driver_register+0x182/0x3a0
      [   50.355516]  arc4_set_key+0x8f/0x2a0 [arc4]
      [   50.355518]  do_one_initcall+0x77/0x1d0
      [   50.355521]  do_init_module+0x1c2/0x548
      [   50.355523]  load_module+0x5e61/0x8df0
      [   50.355525]  SyS_finit_module+0x142/0x150
      [   50.355527]  do_syscall_64+0x179/0x4c0
      [   50.355529]  return_from_SYSCALL_64+0x0/0x65
    
      [   50.355539] Freed by task 285:
      [   50.355551]  kfree+0x6c/0xa0
      [   50.355558]  __dvb_frontend_free+0x81/0xb0 [dvb_core]
      [   50.355562]  dvb_input_detach.isra.24+0x17c/0x480 [ddbridge]
      [   50.355566]  ddb_ports_detach+0x15f/0x4f0 [ddbridge]
      [   50.355570]  ddb_remove+0x3c/0xb0 [ddbridge]
      [   50.355573]  pci_device_remove+0x93/0x1d0
      [   50.355576]  device_release_driver_internal+0x267/0x510
      [   50.355578]  driver_detach+0xb9/0x1b0
      [   50.355580]  bus_remove_driver+0xd0/0x1f0
      [   50.355583]  pci_unregister_driver+0x25/0x210
      [   50.355587]  module_exit_ddbridge+0xc/0x45 [ddbridge]
      [   50.355590]  SyS_delete_module+0x314/0x440
      [   50.355592]  do_syscall_64+0x179/0x4c0
      [   50.355594]  return_from_SYSCALL_64+0x0/0x65
    
      [   50.355604] The buggy address belongs to the object at ffff8800c235cd80
                      which belongs to the cache kmalloc-2048 of size 2048
      [   50.355630] The buggy address is located 408 bytes inside of
                      2048-byte region [ffff8800c235cd80, ffff8800c235d580)
      [   50.355652] The buggy address belongs to the page:
      [   50.355666] page:ffffea0002a7bc20 count:1 mapcount:0 mapping:ffff8800c235c500 index:0x0 compound_mapcount: 0
      [   50.355688] flags: 0x4000000000008100(slab|head)
      [   50.355703] raw: 4000000000008100 ffff8800c235c500 0000000000000000 0000000100000003
      [   50.355720] raw: ffffea000382b4b0 ffffea0002b91550 ffff88010b000800
      [   50.355734] page dumped because: kasan: bad access detected
    
      [   50.355754] Memory state around the buggy address:
      [   50.355767]  ffff8800c235ce00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [   50.355783]  ffff8800c235ce80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [   50.355800] >ffff8800c235cf00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [   50.355815]                             ^
      [   50.355827]  ffff8800c235cf80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [   50.355843]  ffff8800c235d000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      [   50.355858] ==================================================================
    
    This is due to dvb_frontend_detach() being called before
    i2c_unregister_device() on the TDA18212 tuner client instance, as
    dvb_frontend_detach() causes the demod drivers to release all their
    resources, and the tuner driver's _remove method does further cleanup on
    the now invalid (freed) resources. Fix this by putting the I2C client
    deregistration in dvb_input_detach() to state/case 0x30, right before the
    call to dvb_frontend_detach(). This also makes sure that any further
    (tuner) hardware driven by I2C client drivers unload cleanly.
    
    Fixes: 1502efd2d59 ("media: ddbridge: fix teardown/deregistration order in ddb_input_detach()")
    
    Signed-off-by: Daniel Scheller <d.scheller@gmx.net>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 2b022ab7542df60021ab57854b3faaaf42552eaf
Author: Sahara <keun-o.park@darkmatter.ae>
Date:   Wed Dec 13 09:10:48 2017 +0400

    pty: cancel pty slave port buf's work in tty_release
    
    In case that CONFIG_SLUB_DEBUG is on and pty is used, races between
    release_one_tty and flush_to_ldisc work threads may happen and lead
    to use-after-free condition on tty->link->port. Because SLUB_DEBUG
    is turned on, freed tty->link->port is filled with POISON_FREE value.
    So far without SLUB_DEBUG, port was filled with zero and flush_to_ldisc
    could return without a problem by checking if tty is NULL.
    
    CPU 0                                 CPU 1
    -----                                 -----
    release_tty                           pty_write
       cancel_work_sync(tty)                 to = tty->link
       tty_kref_put(tty->link)               tty_schedule_flip(to->port)
          << workqueue >>                 ...
          release_one_tty                 ...
             pty_cleanup                  ...
                kfree(tty->link->port)       << workqueue >>
                                             flush_to_ldisc
                                                tty = READ_ONCE(port->itty)
                                                tty is 0x6b6b6b6b6b6b6b6b
                                                !!PANIC!! access tty->ldisc
    
     Unable to handle kernel paging request at virtual address 6b6b6b6b6b6b6b93
     pgd = ffffffc0eb1c3000
     [6b6b6b6b6b6b6b93] *pgd=0000000000000000, *pud=0000000000000000
     ------------[ cut here ]------------
     Kernel BUG at ffffff800851154c [verbose debug info unavailable]
     Internal error: Oops - BUG: 96000004 [#1] PREEMPT SMP
     CPU: 3 PID: 265 Comm: kworker/u8:9 Tainted: G        W 3.18.31-g0a58eeb #1
     Hardware name: Qualcomm Technologies, Inc. MSM 8996pro v1.1 + PMI8996 Carbide (DT)
     Workqueue: events_unbound flush_to_ldisc
     task: ffffffc0ed610ec0 ti: ffffffc0ed624000 task.ti: ffffffc0ed624000
     PC is at ldsem_down_read_trylock+0x0/0x4c
     LR is at tty_ldisc_ref+0x24/0x4c
     pc : [<ffffff800851154c>] lr : [<ffffff800850f6c0>] pstate: 80400145
     sp : ffffffc0ed627cd0
     x29: ffffffc0ed627cd0 x28: 0000000000000000
     x27: ffffff8009e05000 x26: ffffffc0d382cfa0
     x25: 0000000000000000 x24: ffffff800a012f08
     x23: 0000000000000000 x22: ffffffc0703fbc88
     x21: 6b6b6b6b6b6b6b6b x20: 6b6b6b6b6b6b6b93
     x19: 0000000000000000 x18: 0000000000000001
     x17: 00e80000f80d6f53 x16: 0000000000000001
     x15: 0000007f7d826fff x14: 00000000000000a0
     x13: 0000000000000000 x12: 0000000000000109
     x11: 0000000000000000 x10: 0000000000000000
     x9 : ffffffc0ed624000 x8 : ffffffc0ed611580
     x7 : 0000000000000000 x6 : ffffff800a42e000
     x5 : 00000000000003fc x4 : 0000000003bd1201
     x3 : 0000000000000001 x2 : 0000000000000001
     x1 : ffffff800851004c x0 : 6b6b6b6b6b6b6b93
    
    Signed-off-by: Sahara <keun-o.park@darkmatter.ae>
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f3dc0088b98533f17128058fac73cd8b2752ef1
Author: Todd Kjos <tkjos@android.com>
Date:   Mon Nov 27 09:32:33 2017 -0800

    binder: fix proc->files use-after-free
    
    proc->files cleanup is initiated by binder_vma_close. Therefore
    a reference on the binder_proc is not enough to prevent the
    files_struct from being released while the binder_proc still has
    a reference. This can lead to an attempt to dereference the
    stale pointer obtained from proc->files prior to proc->files
    cleanup. This has been seen once in task_get_unused_fd_flags()
    when __alloc_fd() is called with a stale "files".
    
    The fix is to protect proc->files with a mutex to prevent cleanup
    while in use.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@vger.kernel.org> # 4.14
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit that corrects the
      compiler warning in the original), a regression in the new timespec
      conversion in aacraid and a regression in the Fibre Channel ELS
      handling patch.
    
      The other three are a theoretical problem with termination in the
      vendor/host matching code and a use after free in lpfc.
    
      The additional patches are a fix for an I/O hang in the mq code under
      certain circumstances and a rare oops in some debugging code"
    
    * tag 'scsi-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi:
      scsi: core: Fix a scsi_show_rq() NULL pointer dereference
      scsi: MAINTAINERS: change FCoE list to linux-scsi
      scsi: libsas: fix length error in sas_smp_handler()
      scsi: bfa: fix type conversion warning
      scsi: core: run queue if SCSI device queue isn't ready and queue is idle
      scsi: scsi_devinfo: cleanly zero-pad devinfo strings
      scsi: scsi_devinfo: handle non-terminated strings
      scsi: bfa: fix access to bfad_im_port_s
      scsi: aacraid: address UBSAN warning regression
      scsi: libfc: fix ELS request handling
      scsi: lpfc: Use after free in lpfc_rq_buf_free()

commit 343723dd51ef1025a860e54df9472b5ba21ee3d9
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Dec 15 12:40:12 2017 +0100

    net: sched: fix clsact init error path
    
    Since in qdisc_create, the destroy op is called when init fails, we
    don't do cleanup in init and leave it up to destroy.
    This fixes use-after-free when trying to put already freed block.
    
    Fixes: 6e40cf2d4dee ("net: sched: use extended variants of block_get/put in ingress and clsact qdiscs")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c1cfd9025cc394fd137a01159d74335c5ac978ce
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Dec 14 16:44:12 2017 +0100

    ALSA: rawmidi: Avoid racy info ioctl via ctl device
    
    The rawmidi also allows to obtaining the information via ioctl of ctl
    API.  It means that user can issue an ioctl to the rawmidi device even
    when it's being removed as long as the control device is present.
    Although the code has some protection via the global register_mutex,
    its range is limited to the search of the corresponding rawmidi
    object, and the mutex is already unlocked at accessing the rawmidi
    object.  This may lead to a use-after-free.
    
    For avoiding it, this patch widens the application of register_mutex
    to the whole snd_rawmidi_info_select() function.  We have another
    mutex per rawmidi object, but this operation isn't very hot path, so
    it shouldn't matter from the performance POV.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 276c796cfef5bdaf9aae055f520b8857eaa3fa19
Author: Mark Kanda <mark.kanda@oracle.com>
Date:   Mon Nov 27 17:22:26 2017 -0600

    KVM: nVMX: Add a WARN for freeing a loaded VMCS02
    
    When attempting to free a loaded VMCS02, add a WARN and avoid
    freeing it (to avoid use-after-free situations).
    
    Suggested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Mark Kanda <mark.kanda@oracle.com>
    Reviewed-by: Ameya More <ameya.more@oracle.com>
    Reviewed-by: Krish Sadhukhan <krish.sadhukhan@oracle.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

commit b1728ff617f88a1f7a5d8c8f21fe17a2f6af5d16
Author: Fengguang Wu <fengguang.wu@intel.com>
Date:   Mon Nov 27 04:25:29 2017 -0500

    media: dvb_frontend: fix ifnullfree.cocci warnings
    
    drivers/media/dvb-core/dvb_frontend.c:154:2-7: WARNING: NULL check before freeing functions like kfree, debugfs_remove, debugfs_remove_recursive or usb_free_urb is not needed. Maybe consider reorganizing relevant code to avoid passing NULL values.
    
     NULL check before some freeing functions is not needed.
    
     Based on checkpatch warning
     "kfree(NULL) is safe this check is probably not required"
     and kfreeaddr.cocci by Julia Lawall.
    
    Generated by: scripts/coccinelle/free/ifnullfree.cocci
    
    Fixes: b1cb7372fa82 ("dvb_frontend: don't use-after-free the frontend struct")
    
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 0c31f1d7be1b5c4858b1d714dcefa25f41428cab
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Dec 7 11:15:19 2017 +0100

    PCI: rcar: Fix use-after-free in probe error path
    
    If CONFIG_DEBUG_SLAB=y, and no PCIe card is inserted, the kernel crashes
    during probe on r8a7791/koelsch:
    
      rcar-pcie fe000000.pcie: PCIe link down
      Unable to handle kernel paging request at virtual address 6b6b6b6b
    
    (seeing this message requires earlycon and keep_bootcon).
    
    Indeed, pci_free_host_bridge() frees the PCI host bridge, including the
    embedded rcar_pcie object, so pci_free_resource_list() must not be called
    afterwards.
    
    To fix this, move the call to pci_free_resource_list() up, and update the
    label name accordingly.
    
    Fixes: ddd535f1ea3eb27e ("PCI: rcar: Fix memory leak when no PCIe card is inserted")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Simon Horman <horms+renesas@verge.net.au>
    Acked-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>

commit 14e3062fb18532175af4d1c4073597999f7a2248
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Tue Dec 5 16:57:51 2017 -0800

    scsi: core: Fix a scsi_show_rq() NULL pointer dereference
    
    Avoid that scsi_show_rq() triggers a NULL pointer dereference if called
    after sd_uninit_command(). Swap the NULL pointer assignment and the
    mempool_free() call in sd_uninit_command() to make it less likely that
    scsi_show_rq() triggers a use-after-free. Note: even with these changes
    scsi_show_rq() can trigger a use-after-free but that's a lesser evil
    than e.g. suppressing debug information for T10 PI Type 2 commands
    completely. This patch fixes the following oops:
    
    BUG: unable to handle kernel NULL pointer dereference at (null)
    IP: scsi_format_opcode_name+0x1a/0x1c0
    CPU: 1 PID: 1881 Comm: cat Not tainted 4.14.0-rc2.blk_mq_io_hang+ #516
    Call Trace:
     __scsi_format_command+0x27/0xc0
     scsi_show_rq+0x5c/0xc0
     __blk_mq_debugfs_rq_show+0x116/0x130
     blk_mq_debugfs_rq_show+0xe/0x10
     seq_read+0xfe/0x3b0
     full_proxy_read+0x54/0x90
     __vfs_read+0x37/0x160
     vfs_read+0x96/0x130
     SyS_read+0x55/0xc0
     entry_SYSCALL_64_fastpath+0x1a/0xa5
    
    [mkp: added Type 2]
    
    Fixes: 0eebd005dd07 ("scsi: Implement blk_mq_ops.show_rq()")
    Reported-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: James E.J. Bottomley <jejb@linux.vnet.ibm.com>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Johannes Thumshirn <jthumshirn@suse.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 910b0797fa9e8af09c44a3fa36cb310ba7a7218d
Author: Matthias Schwarzott <zzam@gentoo.org>
Date:   Mon Oct 30 06:07:29 2017 -0400

    media: em28xx: Fix use-after-free when disconnecting
    
    Fix bug by moving the i2c_unregister_device calls after deregistration
    of dvb frontend.
    
    The new style i2c drivers already destroys the frontend object at
    i2c_unregister_device time.
    When the dvb frontend is unregistered afterwards it leads to this oops:
    
      [ 6058.866459] BUG: unable to handle kernel NULL pointer dereference at 00000000000001f8
      [ 6058.866578] IP: dvb_frontend_stop+0x30/0xd0 [dvb_core]
      [ 6058.866644] PGD 0
      [ 6058.866646] P4D 0
    
      [ 6058.866726] Oops: 0000 [#1] SMP
      [ 6058.866768] Modules linked in: rc_pinnacle_pctv_hd(O) em28xx_rc(O) si2157(O) si2168(O) em28xx_dvb(O) em28xx(O) si2165(O) a8293(O) tda10071(O) tea5767(O) tuner(O) cx23885(O) tda18271(O) videobuf2_dvb(O) videobuf2_dma_sg(O) m88ds3103(O) tveeprom(O) cx2341x(O) v4l2_common(O) dvb_core(O) rc_core(O) videobuf2_memops(O) videobuf2_v4l2(O) videobuf2_core(O) videodev(O) media(O) bluetooth ecdh_generic ums_realtek uas rtl8192cu rtl_usb rtl8192c_common rtlwifi usb_storage snd_hda_codec_realtek snd_hda_codec_hdmi snd_hda_codec_generic i2c_mux snd_hda_intel snd_hda_codec snd_hwdep x86_pkg_temp_thermal snd_hda_core kvm_intel kvm irqbypass [last unloaded: videobuf2_memops]
      [ 6058.867497] CPU: 2 PID: 7349 Comm: kworker/2:0 Tainted: G        W  O    4.13.9-gentoo #1
      [ 6058.867595] Hardware name: MEDION E2050 2391/H81H3-EM2, BIOS H81EM2W08.308 08/25/2014
      [ 6058.867692] Workqueue: usb_hub_wq hub_event
      [ 6058.867746] task: ffff88011a15e040 task.stack: ffffc90003074000
      [ 6058.867825] RIP: 0010:dvb_frontend_stop+0x30/0xd0 [dvb_core]
      [ 6058.867896] RSP: 0018:ffffc90003077b58 EFLAGS: 00010293
      [ 6058.867964] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000010040001f
      [ 6058.868056] RDX: ffff88011a15e040 RSI: ffffea000464e400 RDI: ffff88001cbe3028
      [ 6058.868150] RBP: ffffc90003077b68 R08: ffff880119390380 R09: 000000010040001f
      [ 6058.868241] R10: ffffc90003077b18 R11: 000000000001e200 R12: ffff88001cbe3028
      [ 6058.868330] R13: ffff88001cbe68d0 R14: ffff8800cf734000 R15: ffff8800cf734098
      [ 6058.868419] FS:  0000000000000000(0000) GS:ffff88011fb00000(0000) knlGS:0000000000000000
      [ 6058.868511] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [ 6058.868578] CR2: 00000000000001f8 CR3: 00000001113c5000 CR4: 00000000001406e0
      [ 6058.868662] Call Trace:
      [ 6058.868705]  dvb_unregister_frontend+0x2a/0x80 [dvb_core]
      [ 6058.868774]  em28xx_dvb_fini+0x132/0x220 [em28xx_dvb]
      [ 6058.868840]  em28xx_close_extension+0x34/0x90 [em28xx]
      [ 6058.868902]  em28xx_usb_disconnect+0x4e/0x70 [em28xx]
      [ 6058.868968]  usb_unbind_interface+0x6d/0x260
      [ 6058.869025]  device_release_driver_internal+0x150/0x210
      [ 6058.869094]  device_release_driver+0xd/0x10
      [ 6058.869150]  bus_remove_device+0xe4/0x160
      [ 6058.869204]  device_del+0x1ce/0x2f0
      [ 6058.869253]  usb_disable_device+0x99/0x270
      [ 6058.869306]  usb_disconnect+0x8d/0x260
      [ 6058.869359]  hub_event+0x93d/0x1520
      [ 6058.869408]  ? dequeue_task_fair+0xae5/0xd20
      [ 6058.869467]  process_one_work+0x1d9/0x3e0
      [ 6058.869522]  worker_thread+0x43/0x3e0
      [ 6058.869576]  kthread+0x104/0x140
      [ 6058.869602]  ? trace_event_raw_event_workqueue_work+0x80/0x80
      [ 6058.869640]  ? kthread_create_on_node+0x40/0x40
      [ 6058.869673]  ret_from_fork+0x22/0x30
      [ 6058.869698] Code: 54 49 89 fc 53 48 8b 9f 18 03 00 00 0f 1f 44 00 00 41 83 bc 24 04 05 00 00 02 74 0c 41 c7 84 24 04 05 00 00 01 00 00 00 0f ae f0 <48> 8b bb f8 01 00 00 48 85 ff 74 5c e8 df 40 f0 e0 48 8b 93 f8
      [ 6058.869850] RIP: dvb_frontend_stop+0x30/0xd0 [dvb_core] RSP: ffffc90003077b58
      [ 6058.869894] CR2: 00000000000001f8
      [ 6058.875880] ---[ end trace 717eecf7193b3fc6 ]---
    
    Signed-off-by: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit df45bf84e4f5a48f23d4b1a07d21d566e8b587b2
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Dec 8 19:27:27 2017 +0100

    net: sched: fix use-after-free in tcf_block_put_ext
    
    Since the block is freed with last chain being put, once we reach the
    end of iteration of list_for_each_entry_safe, the block may be
    already freed. I'm hitting this only by creating and deleting clsact:
    
    [  202.171952] ==================================================================
    [  202.180182] BUG: KASAN: use-after-free in tcf_block_put_ext+0x240/0x390
    [  202.187590] Read of size 8 at addr ffff880225539a80 by task tc/796
    [  202.194508]
    [  202.196185] CPU: 0 PID: 796 Comm: tc Not tainted 4.15.0-rc2jiri+ #5
    [  202.203200] Hardware name: Mellanox Technologies Ltd. "MSN2100-CB2F"/"SA001017", BIOS 5.6.5 06/07/2016
    [  202.213613] Call Trace:
    [  202.216369]  dump_stack+0xda/0x169
    [  202.220192]  ? dma_virt_map_sg+0x147/0x147
    [  202.224790]  ? show_regs_print_info+0x54/0x54
    [  202.229691]  ? tcf_chain_destroy+0x1dc/0x250
    [  202.234494]  print_address_description+0x83/0x3d0
    [  202.239781]  ? tcf_block_put_ext+0x240/0x390
    [  202.244575]  kasan_report+0x1ba/0x460
    [  202.248707]  ? tcf_block_put_ext+0x240/0x390
    [  202.253518]  tcf_block_put_ext+0x240/0x390
    [  202.258117]  ? tcf_chain_flush+0x290/0x290
    [  202.262708]  ? qdisc_hash_del+0x82/0x1a0
    [  202.267111]  ? qdisc_hash_add+0x50/0x50
    [  202.271411]  ? __lock_is_held+0x5f/0x1a0
    [  202.275843]  clsact_destroy+0x3d/0x80 [sch_ingress]
    [  202.281323]  qdisc_destroy+0xcb/0x240
    [  202.285445]  qdisc_graft+0x216/0x7b0
    [  202.289497]  tc_get_qdisc+0x260/0x560
    
    Fix this by holding the block also by chain 0 and put chain 0
    explicitly, out of the list_for_each_entry_safe loop at the very
    end of tcf_block_put_ext.
    
    Fixes: efbf78973978 ("net_sched: get rid of rcu_barrier() in tcf_block_put_ext()")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e298d58473520a806d59b7aa51dcb194d1a1b03
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Sep 22 09:48:41 2017 -0400

    media: stk-webcam: Fix use after free on disconnect
    
    We free the stk_camera device too early.  It's allocate first in probe
    and it should be freed last in stk_camera_disconnect().
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit cebb52b7bc325863600aff930407bba773010938
Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
Date:   Mon Nov 13 14:47:52 2017 -0500

    drm/amdgpu: Get rid of dep_sync as a seperate object.
    
    Instead mark fence as explicit in it's amdgpu_sync_entry.
    
    v2:
    Fix use after free bug and add new parameter description.
    Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4ed11aeefda439c76ddae3ceebcfa4fad111f149
Author: Serhii Popovych <spopovyc@redhat.com>
Date:   Mon Dec 4 09:36:42 2017 -0500

    KVM: PPC: Book3S HV: Fix use after free in case of multiple resize requests
    
    When serving multiple resize requests following could happen:
    
        CPU0                                    CPU1
        ----                                    ----
        kvm_vm_ioctl_resize_hpt_prepare(1);
          -> schedule_work()
                                                /* system_rq might be busy: delay */
        kvm_vm_ioctl_resize_hpt_prepare(2);
          mutex_lock();
          if (resize) {
             ...
             release_hpt_resize();
          }
          ...                                   resize_hpt_prepare_work()
          -> schedule_work()                    {
          mutex_unlock()                           /* resize->kvm could be wrong */
                                                   struct kvm *kvm = resize->kvm;
    
                                                   mutex_lock(&kvm->lock);   <<<< UAF
                                                   ...
                                                }
    
    i.e. a second resize request with different order could be started by
    kvm_vm_ioctl_resize_hpt_prepare(), causing the previous request to be
    free()d when there's still an active worker thread which will try to
    access it.  This leads to a use after free in point marked with UAF on
    the diagram above.
    
    To prevent this from happening, instead of unconditionally releasing a
    pre-existing resize structure from the prepare ioctl(), we check if
    the existing structure has an in-progress worker.  We do that by
    checking if the resize->error == -EBUSY, which is safe because the
    resize->error field is protected by the kvm->lock.  If there is an
    active worker, instead of releasing, we mark the structure as stale by
    unlinking it from kvm_struct.
    
    In the worker thread we check for a stale structure (with kvm->lock
    held), and in that case abort, releasing the stale structure ourself.
    We make the check both before and the actual allocation.  Strictly,
    only the check afterwards is needed, the check before is an
    optimization: if the structure happens to become stale before the
    worker thread is dispatched, rather than during the allocation, it
    means we can avoid allocating then immediately freeing a potentially
    substantial amount of memory.
    
    This fixes following or similar host kernel crash message:
    
    [  635.277361] Unable to handle kernel paging request for data at address 0x00000000
    [  635.277438] Faulting instruction address: 0xc00000000052f568
    [  635.277446] Oops: Kernel access of bad area, sig: 11 [#1]
    [  635.277451] SMP NR_CPUS=2048 NUMA PowerNV
    [  635.277470] Modules linked in: xt_CHECKSUM iptable_mangle ipt_MASQUERADE
    nf_nat_masquerade_ipv4 iptable_nat nf_nat_ipv4 nf_nat nf_conntrack_ipv4
    nf_defrag_ipv4 xt_conntrack nf_conntrack ipt_REJECT nf_reject_ipv4 tun bridge stp llc
    ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter nfsv3 nfs_acl nfs
    lockd grace fscache kvm_hv kvm rpcrdma sunrpc ib_isert iscsi_target_mod ib_iser libiscsi
    scsi_transport_iscsi ib_srpt target_core_mod ext4 ib_srp scsi_transport_srp
    ib_ipoib mbcache jbd2 rdma_ucm ib_ucm ib_uverbs ib_umad rdma_cm ib_cm iw_cm ocrdma(T)
    ib_core ses enclosure scsi_transport_sas sg shpchp leds_powernv ibmpowernv i2c_opal
    i2c_core powernv_rng ipmi_powernv ipmi_devintf ipmi_msghandler ip_tables xfs
    libcrc32c sr_mod sd_mod cdrom lpfc nvme_fc(T) nvme_fabrics nvme_core ipr nvmet_fc(T)
    tg3 nvmet libata be2net crc_t10dif crct10dif_generic scsi_transport_fc ptp scsi_tgt
    pps_core crct10dif_common dm_mirror dm_region_hash dm_log dm_mod
    [  635.278687] CPU: 40 PID: 749 Comm: kworker/40:1 Tainted: G
    ------------ T 3.10.0.bz1510771+ #1
    [  635.278782] Workqueue: events resize_hpt_prepare_work [kvm_hv]
    [  635.278851] task: c0000007e6840000 ti: c0000007e9180000 task.ti: c0000007e9180000
    [  635.278919] NIP: c00000000052f568 LR: c0000000009ea310 CTR: c0000000009ea4f0
    [  635.278988] REGS: c0000007e91837f0 TRAP: 0300   Tainted: G
    ------------ T  (3.10.0.bz1510771+)
    [  635.279077] MSR: 9000000100009033 <SF,HV,EE,ME,IR,DR,RI,LE>  CR: 24002022  XER:
    00000000
    [  635.279248] CFAR: c000000000009368 DAR: 0000000000000000 DSISR: 40000000 SOFTE: 1
    GPR00: c0000000009ea310 c0000007e9183a70 c000000001250b00 c0000007e9183b10
    GPR04: 0000000000000000 0000000000000000 c0000007e9183650 0000000000000000
    GPR08: c0000007ffff7b80 00000000ffffffff 0000000080000028 d00000000d2529a0
    GPR12: 0000000000002200 c000000007b56800 c000000000120028 c0000007f135bb40
    GPR16: 0000000000000000 c000000005c1e018 c000000005c1e018 0000000000000000
    GPR20: 0000000000000001 c0000000011bf778 0000000000000001 fffffffffffffef7
    GPR24: 0000000000000000 c000000f1e262e50 0000000000000002 c0000007e9180000
    GPR28: c000000f1e262e4c c000000f1e262e50 0000000000000000 c0000007e9183b10
    [  635.280149] NIP [c00000000052f568] __list_add+0x38/0x110
    [  635.280197] LR [c0000000009ea310] __mutex_lock_slowpath+0xe0/0x2c0
    [  635.280253] Call Trace:
    [  635.280277] [c0000007e9183af0] [c0000000009ea310] __mutex_lock_slowpath+0xe0/0x2c0
    [  635.280356] [c0000007e9183b70] [c0000000009ea554] mutex_lock+0x64/0x70
    [  635.280426] [c0000007e9183ba0] [d00000000d24da04]
    resize_hpt_prepare_work+0xe4/0x1c0 [kvm_hv]
    [  635.280507] [c0000007e9183c40] [c000000000113c0c] process_one_work+0x1dc/0x680
    [  635.280587] [c0000007e9183ce0] [c000000000114250] worker_thread+0x1a0/0x520
    [  635.280655] [c0000007e9183d80] [c00000000012010c] kthread+0xec/0x100
    [  635.280724] [c0000007e9183e30] [c00000000000a4b8] ret_from_kernel_thread+0x5c/0xa4
    [  635.280814] Instruction dump:
    [  635.280880] 7c0802a6 fba1ffe8 fbc1fff0 7cbd2b78 fbe1fff8 7c9e2378 7c7f1b78
    f8010010
    [  635.281099] f821ff81 e8a50008 7fa52040 40de00b8 <e8be0000> 7fbd2840 40de008c
    7fbff040
    [  635.281324] ---[ end trace b628b73449719b9d ]---
    
    Cc: stable@vger.kernel.org # v4.10+
    Fixes: b5baa6877315 ("KVM: PPC: Book3S HV: KVM-HV HPT resizing implementation")
    Signed-off-by: Serhii Popovych <spopovyc@redhat.com>
    [dwg: Replaced BUG_ON()s with WARN_ONs() and reworded commit message
     for clarity]
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>

commit 69c64866ce072dea1d1e59a0d61e0f66c0dffb76
Author: Mohamed Ghannam <simo.ghannam@gmail.com>
Date:   Tue Dec 5 20:58:35 2017 +0000

    dccp: CVE-2017-8824: use-after-free in DCCP code
    
    Whenever the sock object is in DCCP_CLOSED state,
    dccp_disconnect() must free dccps_hc_tx_ccid and
    dccps_hc_rx_ccid and set to NULL.
    
    Signed-off-by: Mohamed Ghannam <simo.ghannam@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c3de777bdaf48bd0cfb43097c0d0fb85056cab7
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Sat Nov 25 21:39:25 2017 +0100

    brcmfmac: change driver unbind order of the sdio function devices
    
    In the function brcmf_sdio_firmware_callback() the driver is
    unbound from the sdio function devices in the error path.
    However, the order in which it is done resulted in a use-after-free
    issue (see brcmf_ops_sdio_remove() in bcmsdh.c). Hence change
    the order and first unbind sdio function #2 device and then
    unbind sdio function #1 device.
    
    Cc: stable@vger.kernel.org # v4.12.x
    Fixes: 7a51461fc2da ("brcmfmac: unbind all devices upon failure in firmware callback")
    Reported-by: Stefan Wahren <stefan.wahren@i2se.com>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 687cb0884a714ff484d038e9190edc874edcf146
Author: Wang Nan <wangnan0@huawei.com>
Date:   Wed Nov 29 16:09:58 2017 -0800

    mm, oom_reaper: gather each vma to prevent leaking TLB entry
    
    tlb_gather_mmu(&tlb, mm, 0, -1) means gathering the whole virtual memory
    space.  In this case, tlb->fullmm is true.  Some archs like arm64
    doesn't flush TLB when tlb->fullmm is true:
    
      commit 5a7862e83000 ("arm64: tlbflush: avoid flushing when fullmm == 1").
    
    Which causes leaking of tlb entries.
    
    Will clarifies his patch:
     "Basically, we tag each address space with an ASID (PCID on x86) which
      is resident in the TLB. This means we can elide TLB invalidation when
      pulling down a full mm because we won't ever assign that ASID to
      another mm without doing TLB invalidation elsewhere (which actually
      just nukes the whole TLB).
    
      I think that means that we could potentially not fault on a kernel
      uaccess, because we could hit in the TLB"
    
    There could be a window between complete_signal() sending IPI to other
    cores and all threads sharing this mm are really kicked off from cores.
    In this window, the oom reaper may calls tlb_flush_mmu_tlbonly() to
    flush TLB then frees pages.  However, due to the above problem, the TLB
    entries are not really flushed on arm64.  Other threads are possible to
    access these pages through TLB entries.  Moreover, a copy_to_user() can
    also write to these pages without generating page fault, causes
    use-after-free bugs.
    
    This patch gathers each vma instead of gathering full vm space.  In this
    case tlb->fullmm is not true.  The behavior of oom reaper become similar
    to munmapping before do_exit, which should be safe for all archs.
    
    Link: http://lkml.kernel.org/r/20171107095453.179940-1-wangnan0@huawei.com
    Fixes: aac453635549 ("mm, oom: introduce oom reaper")
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Bob Liu <liubo95@huawei.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      ethernet: dwmac-stm32: Fix copyright
      net: via: via-rhine: use %p to format void * address instead of %x
      net: ethernet: xilinx: Mark XILINX_LL_TEMAC broken on 64-bit
      myri10ge: Update MAINTAINERS
      net: sched: cbq: create block for q->link.block
      atm: suni: remove extraneous space to fix indentation
      atm: lanai: use %p to format kernel addresses instead of %x
      VSOCK: Don't set sk_state to TCP_CLOSE before testing it
      atm: fore200e: use %pK to format kernel addresses instead of %x
      ambassador: fix incorrect indentation of assignment statement
      vxlan: use __be32 type for the param vni in __vxlan_fdb_delete
      bonding: use nla_get_u64 to extract the value for IFLA_BOND_AD_ACTOR_SYSTEM
      sctp: use right member as the param of list_for_each_entry
      sch_sfq: fix null pointer dereference at timer expiration
      cls_bpf: don't decrement net's refcount when offload fails
      net/packet: fix a race in packet_bind() and packet_notifier()
      packet: fix crash in fanout_demux_rollover()
      sctp: remove extern from stream sched
      sctp: force the params with right types for sctp csum apis
      sctp: force SCTP_ERROR_INV_STRM with __u32 when calling sctp_chunk_fail
      ...

commit 45223b78118cbab12744a7e193b6c7c208c15c27
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Fri Nov 24 08:22:07 2017 +0000

    crypto: arm64/aes - do not call crypto_unregister_skcipher twice on error
    
    When a cipher fails to register in aes_init(), the error path goes thought
    aes_exit() then crypto_unregister_skciphers().
    Since aes_exit calls also crypto_unregister_skcipher, this triggers a
    refcount_t: underflow; use-after-free.
    
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit a45b30a6c5db631e2ba680304bd5edd0cd1f9643
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Nov 25 19:41:55 2017 +0000

    drm/i915/fbdev: Serialise early hotplug events with async fbdev config
    
    As both the hotplug event and fbdev configuration run asynchronously, it
    is possible for them to run concurrently. If configuration fails, we were
    freeing the fbdev causing a use-after-free in the hotplug event.
    
    <7>[ 3069.935211] [drm:intel_fb_initial_config [i915]] Not using firmware configuration
    <7>[ 3069.935225] [drm:drm_setup_crtcs] looking for cmdline mode on connector 77
    <7>[ 3069.935229] [drm:drm_setup_crtcs] looking for preferred mode on connector 77 0
    <7>[ 3069.935233] [drm:drm_setup_crtcs] found mode 3200x1800
    <7>[ 3069.935236] [drm:drm_setup_crtcs] picking CRTCs for 8192x8192 config
    <7>[ 3069.935253] [drm:drm_setup_crtcs] desired mode 3200x1800 set on crtc 43 (0,0)
    <7>[ 3069.935323] [drm:intelfb_create [i915]] no BIOS fb, allocating a new one
    <4>[ 3069.967737] general protection fault: 0000 [#1] PREEMPT SMP
    <0>[ 3069.977453] ---------------------------------
    <4>[ 3069.977457] Modules linked in: i915(+) vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hda_codec snd_hwdep snd_hda_core snd_pcm r8169 mei_me mii prime_numbers mei i2c_hid pinctrl_geminilake pinctrl_intel [last unloaded: i915]
    <4>[ 3069.977492] CPU: 1 PID: 15414 Comm: kworker/1:0 Tainted: G     U          4.14.0-CI-CI_DRM_3388+ #1
    <4>[ 3069.977497] Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
    <4>[ 3069.977508] Workqueue: events output_poll_execute
    <4>[ 3069.977512] task: ffff880177734e40 task.stack: ffffc90001fe4000
    <4>[ 3069.977519] RIP: 0010:__lock_acquire+0x109/0x1b60
    <4>[ 3069.977523] RSP: 0018:ffffc90001fe7bb0 EFLAGS: 00010002
    <4>[ 3069.977526] RAX: 6b6b6b6b6b6b6b6b RBX: 0000000000000282 RCX: 0000000000000000
    <4>[ 3069.977530] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff880170d4efd0
    <4>[ 3069.977534] RBP: ffffc90001fe7c70 R08: 0000000000000001 R09: 0000000000000000
    <4>[ 3069.977538] R10: 0000000000000000 R11: ffffffff81899609 R12: ffff880170d4efd0
    <4>[ 3069.977542] R13: ffff880177734e40 R14: 0000000000000001 R15: 0000000000000000
    <4>[ 3069.977547] FS:  0000000000000000(0000) GS:ffff88017fc80000(0000) knlGS:0000000000000000
    <4>[ 3069.977551] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    <4>[ 3069.977555] CR2: 00007f7e8b7bcf04 CR3: 0000000003e0f000 CR4: 00000000003406e0
    <4>[ 3069.977559] Call Trace:
    <4>[ 3069.977565]  ? mark_held_locks+0x64/0x90
    <4>[ 3069.977571]  ? _raw_spin_unlock_irq+0x24/0x50
    <4>[ 3069.977575]  ? _raw_spin_unlock_irq+0x24/0x50
    <4>[ 3069.977579]  ? trace_hardirqs_on_caller+0xde/0x1c0
    <4>[ 3069.977583]  ? _raw_spin_unlock_irq+0x2f/0x50
    <4>[ 3069.977588]  ? finish_task_switch+0xa5/0x210
    <4>[ 3069.977592]  ? lock_acquire+0xaf/0x200
    <4>[ 3069.977596]  lock_acquire+0xaf/0x200
    <4>[ 3069.977600]  ? __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977604]  _raw_spin_lock+0x2a/0x40
    <4>[ 3069.977608]  ? __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977612]  __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977616]  ? drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977621]  ? drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977625]  drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977630]  output_poll_execute+0x8d/0x180
    <4>[ 3069.977635]  process_one_work+0x22e/0x660
    <4>[ 3069.977640]  worker_thread+0x48/0x3a0
    <4>[ 3069.977644]  ? _raw_spin_unlock_irqrestore+0x4c/0x60
    <4>[ 3069.977649]  kthread+0x102/0x140
    <4>[ 3069.977653]  ? process_one_work+0x660/0x660
    <4>[ 3069.977657]  ? kthread_create_on_node+0x40/0x40
    <4>[ 3069.977662]  ret_from_fork+0x27/0x40
    <4>[ 3069.977666] Code: 8d 62 f8 c3 49 81 3c 24 e0 fa 3c 82 41 be 00 00 00 00 45 0f 45 f0 83 fe 01 77 86 89 f0 49 8b 44 c4 08 48 85 c0 0f 84 76 ff ff ff <f0> ff 80 38 01 00 00 8b 1d 62 f9 e8 01 45 8b 85 b8 08 00 00 85
    <1>[ 3069.977707] RIP: __lock_acquire+0x109/0x1b60 RSP: ffffc90001fe7bb0
    <4>[ 3069.977712] ---[ end trace 4ad012eb3af62df7 ]---
    
    In order to keep the dev_priv->ifbdev alive after failure, we have to
    avoid the free and leave it empty until we unload the module (which is
    less than ideal, but a necessary evil for simplicity). Then we can use
    intel_fbdev_sync() to serialise the hotplug event with the configuration.
    The serialisation between the two was removed in commit 934458c2c95d
    ("Revert "drm/i915: Fix races on fbdev""), but the use after free is much
    older, commit 366e39b4d2c5 ("drm/i915: Tear down fbdev if initialization
    fails")
    
    Fixes: 366e39b4d2c5 ("drm/i915: Tear down fbdev if initialization fails")
    Fixes: 934458c2c95d ("Revert "drm/i915: Fix races on fbdev"")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Reviewed-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171125194155.355-1-chris@chris-wilson.co.uk
    (cherry picked from commit ad88d7fc6c032ddfb32b8d496a070ab71de3a64f)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit 3a2b19d1ee5633f76ae8a88da7bc039a5d1732aa
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Nov 2 13:03:42 2017 +0300

    lockd: lost rollback of set_grace_period() in lockd_down_net()
    
    Commit efda760fe95ea ("lockd: fix lockd shutdown race") is incorrect,
    it removes lockd_manager and disarm grace_period_end for init_net only.
    
    If nfsd was started from another net namespace lockd_up_net() calls
    set_grace_period() that adds lockd_manager into per-netns list
    and queues grace_period_end delayed work.
    
    These action should be reverted in lockd_down_net().
    Otherwise it can lead to double list_add on after restart nfsd in netns,
    and to use-after-free if non-disarmed delayed work will be executed after netns destroy.
    
    Fixes: efda760fe95e ("lockd: fix lockd shutdown race")
    Cc: stable@vger.kernel.org
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit ad88d7fc6c032ddfb32b8d496a070ab71de3a64f
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Nov 25 19:41:55 2017 +0000

    drm/i915/fbdev: Serialise early hotplug events with async fbdev config
    
    As both the hotplug event and fbdev configuration run asynchronously, it
    is possible for them to run concurrently. If configuration fails, we were
    freeing the fbdev causing a use-after-free in the hotplug event.
    
    <7>[ 3069.935211] [drm:intel_fb_initial_config [i915]] Not using firmware configuration
    <7>[ 3069.935225] [drm:drm_setup_crtcs] looking for cmdline mode on connector 77
    <7>[ 3069.935229] [drm:drm_setup_crtcs] looking for preferred mode on connector 77 0
    <7>[ 3069.935233] [drm:drm_setup_crtcs] found mode 3200x1800
    <7>[ 3069.935236] [drm:drm_setup_crtcs] picking CRTCs for 8192x8192 config
    <7>[ 3069.935253] [drm:drm_setup_crtcs] desired mode 3200x1800 set on crtc 43 (0,0)
    <7>[ 3069.935323] [drm:intelfb_create [i915]] no BIOS fb, allocating a new one
    <4>[ 3069.967737] general protection fault: 0000 [#1] PREEMPT SMP
    <0>[ 3069.977453] ---------------------------------
    <4>[ 3069.977457] Modules linked in: i915(+) vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal intel_powerclamp coretemp crct10dif_pclmul crc32_pclmul ghash_clmulni_intel snd_hda_codec snd_hwdep snd_hda_core snd_pcm r8169 mei_me mii prime_numbers mei i2c_hid pinctrl_geminilake pinctrl_intel [last unloaded: i915]
    <4>[ 3069.977492] CPU: 1 PID: 15414 Comm: kworker/1:0 Tainted: G     U          4.14.0-CI-CI_DRM_3388+ #1
    <4>[ 3069.977497] Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
    <4>[ 3069.977508] Workqueue: events output_poll_execute
    <4>[ 3069.977512] task: ffff880177734e40 task.stack: ffffc90001fe4000
    <4>[ 3069.977519] RIP: 0010:__lock_acquire+0x109/0x1b60
    <4>[ 3069.977523] RSP: 0018:ffffc90001fe7bb0 EFLAGS: 00010002
    <4>[ 3069.977526] RAX: 6b6b6b6b6b6b6b6b RBX: 0000000000000282 RCX: 0000000000000000
    <4>[ 3069.977530] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff880170d4efd0
    <4>[ 3069.977534] RBP: ffffc90001fe7c70 R08: 0000000000000001 R09: 0000000000000000
    <4>[ 3069.977538] R10: 0000000000000000 R11: ffffffff81899609 R12: ffff880170d4efd0
    <4>[ 3069.977542] R13: ffff880177734e40 R14: 0000000000000001 R15: 0000000000000000
    <4>[ 3069.977547] FS:  0000000000000000(0000) GS:ffff88017fc80000(0000) knlGS:0000000000000000
    <4>[ 3069.977551] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    <4>[ 3069.977555] CR2: 00007f7e8b7bcf04 CR3: 0000000003e0f000 CR4: 00000000003406e0
    <4>[ 3069.977559] Call Trace:
    <4>[ 3069.977565]  ? mark_held_locks+0x64/0x90
    <4>[ 3069.977571]  ? _raw_spin_unlock_irq+0x24/0x50
    <4>[ 3069.977575]  ? _raw_spin_unlock_irq+0x24/0x50
    <4>[ 3069.977579]  ? trace_hardirqs_on_caller+0xde/0x1c0
    <4>[ 3069.977583]  ? _raw_spin_unlock_irq+0x2f/0x50
    <4>[ 3069.977588]  ? finish_task_switch+0xa5/0x210
    <4>[ 3069.977592]  ? lock_acquire+0xaf/0x200
    <4>[ 3069.977596]  lock_acquire+0xaf/0x200
    <4>[ 3069.977600]  ? __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977604]  _raw_spin_lock+0x2a/0x40
    <4>[ 3069.977608]  ? __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977612]  __mutex_lock+0x5e9/0x9b0
    <4>[ 3069.977616]  ? drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977621]  ? drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977625]  drm_fb_helper_hotplug_event.part.19+0x16/0xa0
    <4>[ 3069.977630]  output_poll_execute+0x8d/0x180
    <4>[ 3069.977635]  process_one_work+0x22e/0x660
    <4>[ 3069.977640]  worker_thread+0x48/0x3a0
    <4>[ 3069.977644]  ? _raw_spin_unlock_irqrestore+0x4c/0x60
    <4>[ 3069.977649]  kthread+0x102/0x140
    <4>[ 3069.977653]  ? process_one_work+0x660/0x660
    <4>[ 3069.977657]  ? kthread_create_on_node+0x40/0x40
    <4>[ 3069.977662]  ret_from_fork+0x27/0x40
    <4>[ 3069.977666] Code: 8d 62 f8 c3 49 81 3c 24 e0 fa 3c 82 41 be 00 00 00 00 45 0f 45 f0 83 fe 01 77 86 89 f0 49 8b 44 c4 08 48 85 c0 0f 84 76 ff ff ff <f0> ff 80 38 01 00 00 8b 1d 62 f9 e8 01 45 8b 85 b8 08 00 00 85
    <1>[ 3069.977707] RIP: __lock_acquire+0x109/0x1b60 RSP: ffffc90001fe7bb0
    <4>[ 3069.977712] ---[ end trace 4ad012eb3af62df7 ]---
    
    In order to keep the dev_priv->ifbdev alive after failure, we have to
    avoid the free and leave it empty until we unload the module (which is
    less than ideal, but a necessary evil for simplicity). Then we can use
    intel_fbdev_sync() to serialise the hotplug event with the configuration.
    The serialisation between the two was removed in commit 934458c2c95d
    ("Revert "drm/i915: Fix races on fbdev""), but the use after free is much
    older, commit 366e39b4d2c5 ("drm/i915: Tear down fbdev if initialization
    fails")
    
    Fixes: 366e39b4d2c5 ("drm/i915: Tear down fbdev if initialization fails")
    Fixes: 934458c2c95d ("Revert "drm/i915: Fix races on fbdev"")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Lukas Wunner <lukas@wunner.de>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Reviewed-by: Lukas Wunner <lukas@wunner.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171125194155.355-1-chris@chris-wilson.co.uk

commit c393e9b2d51540b74e18e555df14706098dbf2cc
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Nov 13 18:08:48 2017 +0200

    drm/amdkfd: fix amdkfd use-after-free GP fault
    
    Fix GP fault caused by dev_info() reference to a struct device*
    after the device has been freed (use after free).
    kfd_chardev_exit() frees the device so 'kfd_device' should not
    be used after calling kfd_chardev_exit().
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Oded Gabbay <oded.gabbay@gmail.com>

commit 9e741045faea17e28663f14a45f7f3304827c968
Author: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
Date:   Fri Nov 24 11:36:06 2017 -0500

    net: dsa: fix 'increment on 0' warning
    
    Setting the refcount to 0 when allocating a tree to match the number of
    switch devices it holds may cause an 'increment on 0; use-after-free',
    if CONFIG_REFCOUNT_FULL is enabled.
    
    To fix this, do not decrement the refcount of a newly allocated tree,
    increment it when an already allocated tree is found, and decrement it
    after the probing of a switch, as done with the previous behavior.
    
    At the same time, make dsa_tree_get and dsa_tree_put accept a NULL
    argument to simplify callers, and return the tree after incrementation,
    as most kref users like of_node_get and of_node_put do.
    
    Fixes: 8e5bf9759a06 ("net: dsa: simplify tree reference counting")
    Signed-off-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d7aa04a5e82b4f254d306926c81eae8df69e5200
Author: Roman Kapl <code@rkapl.cz>
Date:   Mon Nov 20 22:21:13 2017 +0100

    net: sched: fix crash when deleting secondary chains
    
    If you flush (delete) a filter chain other than chain 0 (such as when
    deleting the device), the kernel may run into a use-after-free. The
    chain refcount must not be decremented unless we are sure we are done
    with the chain.
    
    To reproduce the bug, run:
        ip link add dtest type dummy
        tc qdisc add dev dtest ingress
        tc filter add dev dtest chain 1  parent ffff: flower
        ip link del dtest
    
    Introduced in: commit f93e1cdcf42c ("net/sched: fix filter flushing"),
    but unless you have KAsan or luck, you won't notice it until
    commit 0dadc117ac8b ("cls_flower: use tcf_exts_get_net() before call_rcu()")
    
    Fixes: f93e1cdcf42c ("net/sched: fix filter flushing")
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Roman Kapl <code@rkapl.cz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d4f0284a5969fd7809ec8df710eb10598b701638
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Nov 17 15:29:39 2017 -0800

    fs, nilfs: convert nilfs_root.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference counters
    with the following properties:
    
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided refcount_t
    type and API that prevents accidental counter overflows and underflows.
    This is important since overflows and underflows can lead to
    use-after-free situation and be exploitable.
    
    The variable nilfs_root.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Link: http://lkml.kernel.org/r/1509367935-3086-3-git-send-email-konishi.ryusuke@lab.ntt.co.jp
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp>
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 212bf41d88c06afc23e03f9b274eebf1e8dba197
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:38 2017 +0300

    fs, nfs: convert nfs_client.cl_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs_client.cl_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit 2f62b5aa4814be2c511553fd6afb4d35b6c2503b
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:37 2017 +0300

    fs, nfs: convert nfs_lock_context.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs_lock_context.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit 194bc1f48100a3b6fbd50d7a2218b594f0c564b6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:36 2017 +0300

    fs, nfs: convert nfs4_lock_state.ls_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_lock_state.ls_count  is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit 0896cade1224f167296c786043e9bdc0ca63d392
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:35 2017 +0300

    fs, nfs: convert nfs_cache_defer_req.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs_cache_defer_req.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit 81a090b9975b89ca15e71d0bca945358f6fe7696
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:34 2017 +0300

    fs, nfs: convert nfs4_ff_layout_mirror.ref from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_ff_layout_mirror.ref is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit 2b28a7bee4539d27f4ec3b0298f03bfd83d4f794
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:33 2017 +0300

    fs, nfs: convert pnfs_layout_hdr.plh_refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable pnfs_layout_hdr.plh_refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit eba6dd691743a9d7a57735f36bf6946fc58878ec
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:32 2017 +0300

    fs, nfs: convert pnfs_layout_segment.pls_refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit a2a5dea7b6cb77365ed9c987f54d160668c8a95f
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:31 2017 +0300

    fs, nfs: convert nfs4_pnfs_ds.ds_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_pnfs_ds.ds_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commits)
      VME: Return -EBUSY when DMA list in use
      w1: keep balance of mutex locks and refcnts
      MAINTAINERS: Update VME subsystem tree.
      nvmem: sunxi-sid: add support for A64/H5's SID controller
      nvmem: imx-ocotp: Update module description
      nvmem: imx-ocotp: Enable i.MX7D OTP write support
      nvmem: imx-ocotp: Add i.MX7D timing write clock setup support
      nvmem: imx-ocotp: Move i.MX6 write clock setup to dedicated function
      nvmem: imx-ocotp: Add support for banked OTP addressing
      nvmem: imx-ocotp: Pass parameters via a struct
      nvmem: imx-ocotp: Restrict OTP write to IMX6 processors
      nvmem: uniphier: add UniPhier eFuse driver
      dt-bindings: nvmem: add description for UniPhier eFuse
      nvmem: set nvmem->owner to nvmem->dev->driver->owner if unset
      nvmem: qfprom: fix different address space warnings of sparse
      nvmem: mtk-efuse: fix different address space warnings of sparse
      nvmem: mtk-efuse: use stack for nvmem_config instead of malloc'ing it
      nvmem: imx-iim: use stack for nvmem_config instead of malloc'ing it
      thunderbolt: tb: fix use after free in tb_activate_pcie_devices
      MAINTAINERS: Add git tree for Thunderbolt development
      ...

commits)
      dvb_frontend: don't use-after-free the frontend struct
      media: dib0700: fix invalid dvb_detach argument
      media: v4l2-ctrls: Don't validate BITMASK twice
      media: s5p-mfc: fix lockdep warning
      media: dvb-core: always call invoke_release() in fe_free()
      media: usb: dvb-usb-v2: dvb_usb_core: remove redundant code in dvb_usb_fe_sleep
      media: au0828: make const array addr_list static
      media: cx88: make const arrays default_addr_list and pvr2000_addr_list static
      media: drxd: make const array fastIncrDecLUT static
      media: usb: fix spelling mistake: "synchronuously" -> "synchronously"
      media: ddbridge: fix build warnings
      media: av7110: avoid 2038 overflow in debug print
      media: Don't do DMA on stack for firmware upload in the AS102 driver
      media: v4l: async: fix unregister for implicitly registered sub-device notifiers
      media: v4l: async: fix return of unitialized variable ret
      media: imx274: fix missing return assignment from call to imx274_mode_regs
      media: camss-vfe: always initialize reg at vfe_set_xbar_cfg()
      media: atomisp: make function calls cleaner
      media: atomisp: get rid of storage_class.h
      media: atomisp: get rid of wrong stddef.h include
      ...

commit ca3af4dd28cff4e7216e213ba3b671fbf9f84758
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Nov 15 16:55:54 2017 +0800

    sctp: do not free asoc when it is already dead in sctp_sendmsg
    
    Now in sctp_sendmsg sctp_wait_for_sndbuf could schedule out without
    holding sock sk. It means the current asoc can be freed elsewhere,
    like when receiving an abort packet.
    
    If the asoc is just created in sctp_sendmsg and sctp_wait_for_sndbuf
    returns err, the asoc will be freed again due to new_asoc is not nil.
    An use-after-free issue would be triggered by this.
    
    This patch is to fix it by setting new_asoc with nil if the asoc is
    already dead when cpu schedules back, so that it will not be freed
    again in sctp_sendmsg.
    
    v1->v2:
      set new_asoc as nil in sctp_sendmsg instead of sctp_wait_for_sndbuf.
    
    Suggested-by: Neil Horman <nhorman@tuxdriver.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50895b9de1d3e0258e015e8e55128d835d9a9f19
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Nov 14 21:02:19 2017 -0800

    tcp: highest_sack fix
    
    syzbot easily found a regression added in our latest patches [1]
    
    No longer set tp->highest_sack to the head of the send queue since
    this is not logical and error prone.
    
    Only sack processing should maintain the pointer to an skb from rtx queue.
    
    We might in the future only remember the sequence instead of a pointer to skb,
    since rb-tree should allow a fast lookup.
    
    [1]
    BUG: KASAN: use-after-free in tcp_highest_sack_seq include/net/tcp.h:1706 [inline]
    BUG: KASAN: use-after-free in tcp_ack+0x42bb/0x4fd0 net/ipv4/tcp_input.c:3537
    Read of size 4 at addr ffff8801c154faa8 by task syz-executor4/12860
    
    CPU: 0 PID: 12860 Comm: syz-executor4 Not tainted 4.14.0-next-20171113+ #41
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:53
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x25b/0x340 mm/kasan/report.c:409
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:429
     tcp_highest_sack_seq include/net/tcp.h:1706 [inline]
     tcp_ack+0x42bb/0x4fd0 net/ipv4/tcp_input.c:3537
     tcp_rcv_established+0x672/0x18a0 net/ipv4/tcp_input.c:5439
     tcp_v4_do_rcv+0x2ab/0x7d0 net/ipv4/tcp_ipv4.c:1468
     sk_backlog_rcv include/net/sock.h:909 [inline]
     __release_sock+0x124/0x360 net/core/sock.c:2264
     release_sock+0xa4/0x2a0 net/core/sock.c:2778
     tcp_sendmsg+0x3a/0x50 net/ipv4/tcp.c:1462
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:763
     sock_sendmsg_nosec net/socket.c:632 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:642
     ___sys_sendmsg+0x75b/0x8a0 net/socket.c:2048
     __sys_sendmsg+0xe5/0x210 net/socket.c:2082
     SYSC_sendmsg net/socket.c:2093 [inline]
     SyS_sendmsg+0x2d/0x50 net/socket.c:2089
     entry_SYSCALL_64_fastpath+0x1f/0x96
    RIP: 0033:0x452879
    RSP: 002b:00007fc9761bfbe8 EFLAGS: 00000212 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000758020 RCX: 0000000000452879
    RDX: 0000000000000000 RSI: 0000000020917fc8 RDI: 0000000000000015
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000212 R12: 00000000006ee3a0
    R13: 00000000ffffffff R14: 00007fc9761c06d4 R15: 0000000000000000
    
    Allocated by task 12860:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x144/0x760 mm/slab.c:3638
     __alloc_skb+0xf1/0x780 net/core/skbuff.c:193
     alloc_skb_fclone include/linux/skbuff.h:1023 [inline]
     sk_stream_alloc_skb+0x11d/0x900 net/ipv4/tcp.c:870
     tcp_sendmsg_locked+0x1341/0x3b80 net/ipv4/tcp.c:1299
     tcp_sendmsg+0x2f/0x50 net/ipv4/tcp.c:1461
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:763
     sock_sendmsg_nosec net/socket.c:632 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:642
     SYSC_sendto+0x358/0x5a0 net/socket.c:1749
     SyS_sendto+0x40/0x50 net/socket.c:1717
     entry_SYSCALL_64_fastpath+0x1f/0x96
    
    Freed by task 12860:
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3492 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3750
     kfree_skbmem+0xdd/0x1d0 net/core/skbuff.c:603
     __kfree_skb+0x1d/0x20 net/core/skbuff.c:642
     sk_wmem_free_skb include/net/sock.h:1419 [inline]
     tcp_rtx_queue_unlink_and_free include/net/tcp.h:1682 [inline]
     tcp_clean_rtx_queue net/ipv4/tcp_input.c:3111 [inline]
     tcp_ack+0x1b17/0x4fd0 net/ipv4/tcp_input.c:3593
     tcp_rcv_established+0x672/0x18a0 net/ipv4/tcp_input.c:5439
     tcp_v4_do_rcv+0x2ab/0x7d0 net/ipv4/tcp_ipv4.c:1468
     sk_backlog_rcv include/net/sock.h:909 [inline]
     __release_sock+0x124/0x360 net/core/sock.c:2264
     release_sock+0xa4/0x2a0 net/core/sock.c:2778
     tcp_sendmsg+0x3a/0x50 net/ipv4/tcp.c:1462
     inet_sendmsg+0x11f/0x5e0 net/ipv4/af_inet.c:763
     sock_sendmsg_nosec net/socket.c:632 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:642
     ___sys_sendmsg+0x75b/0x8a0 net/socket.c:2048
     __sys_sendmsg+0xe5/0x210 net/socket.c:2082
     SYSC_sendmsg net/socket.c:2093 [inline]
     SyS_sendmsg+0x2d/0x50 net/socket.c:2089
     entry_SYSCALL_64_fastpath+0x1f/0x96
    
    The buggy address belongs to the object at ffff8801c154fa80
     which belongs to the cache skbuff_fclone_cache of size 456
    The buggy address is located 40 bytes inside of
     456-byte region [ffff8801c154fa80, ffff8801c154fc48)
    The buggy address belongs to the page:
    page:ffffea00070553c0 count:1 mapcount:0 mapping:ffff8801c154f080 index:0x0
    flags: 0x2fffc0000000100(slab)
    raw: 02fffc0000000100 ffff8801c154f080 0000000000000000 0000000100000006
    raw: ffffea00070a5a20 ffffea0006a18360 ffff8801d9ca0500 0000000000000000
    page dumped because: kasan: bad access detected
    
    Fixes: 737ff314563c ("tcp: use sequence distance to detect reordering")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Yuchung Cheng <ycheng@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cdf5976fcb7328875a0216a94ae7dafd4ee3abfb
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:57:57 2017 +0300

    sparc64: convert mdesc_handle.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mdesc_handle.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Acked-by: Shannon Nelson <shannon.nelson@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      usb: gadget: f_fs: Fix use-after-free in ffs_free_inst
      USB: usbfs: compute urb->actual_length for isochronous
      usb: core: message: remember to reset 'ret' to 0 when necessary
      USB: typec: Remove remaining redundant license text
      USB: typec: add SPDX identifiers to some files
      USB: renesas_usbhs: rcar?.h: add SPDX tags
      USB: chipidea: ci_hdrc_tegra.c: add SPDX line
      USB: host: xhci-debugfs: add SPDX lines
      USB: add SPDX identifiers to all remaining Makefiles
      usb: host: isp1362-hcd: remove a couple of redundant assignments
      USB: adutux: remove redundant variable minor
      usb: core: add a new usb_get_ptm_status() helper
      usb: core: add a 'type' parameter to usb_get_status()
      usb: core: introduce a new usb_get_std_status() helper
      usb: core: rename usb_get_status() 'type' argument to 'recip'
      usb: core: add Status Type definitions
      USB: gadget: Remove redundant license text
      USB: gadget: function: Remove redundant license text
      USB: gadget: udc: Remove redundant license text
      USB: gadget: legacy: Remove redundant license text
      ...

commits)
      spi: imx: Don't require platform data chipselect array
      spi: imx: Fix failure path leak on GPIO request error
      spi: imx: GPIO based chip selects should not be required
      spi: sh-msiof: remove redundant pointer dev
      spi: s3c64xx: remove redundant pointer sci
      spi: spi-fsl-dspi: enabling Coldfire mcf5441x dspi
      spi: fix IDR collision on systems with both fixed and dynamic SPI bus numbers
      spi: orion: remove redundant assignment of status to zero
      spi: sh-msiof: Fix DMA transfer size check
      spi: imx: Fix failure path leak on GPIO request error
      spi: spi-axi: fix potential use-after-free after deregistration
      spi: document odd controller reference handling
      spi: fix use-after-free at controller deregistration
      spi: sprd: Fix the possible negative value of BIT()
      spi: sprd-adi: fix platform_no_drv_owner.cocci warnings
      spi: a3700: Change SPI mode before asserting chip-select
      spi: tegra114: correct register name in definition
      spi: spreadtrum adi: add hwspinlock dependency
      spi: sh-msiof: Use of_device_get_match_data() helper
      spi: rspi: Use of_device_get_match_data() helper
      ...

commit 052d41c01b3a2e3371d66de569717353af489d63
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Nov 9 16:43:13 2017 -0800

    vlan: fix a use-after-free in vlan_device_event()
    
    After refcnt reaches zero, vlan_vid_del() could free
    dev->vlan_info via RCU:
    
            RCU_INIT_POINTER(dev->vlan_info, NULL);
            call_rcu(&vlan_info->rcu, vlan_info_rcu_free);
    
    However, the pointer 'grp' still points to that memory
    since it is set before vlan_vid_del():
    
            vlan_info = rtnl_dereference(dev->vlan_info);
            if (!vlan_info)
                    goto out;
            grp = &vlan_info->grp;
    
    Depends on when that RCU callback is scheduled, we could
    trigger a use-after-free in vlan_group_for_each_dev()
    right following this vlan_vid_del().
    
    Fix it by moving vlan_vid_del() before setting grp. This
    is also symmetric to the vlan_vid_add() we call in
    vlan_device_event().
    
    Reported-by: Fengguang Wu <fengguang.wu@intel.com>
    Fixes: efc73f4bbc23 ("net: Fix memory leak - vlan_info struct")
    Cc: Alexander Duyck <alexander.duyck@gmail.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Girish Moodalbail <girish.moodalbail@oracle.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Girish Moodalbail <girish.moodalbail@oracle.com>
    Tested-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 12d41a023efb01b846457ccdbbcbe2b65a87d530
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Nov 5 18:30:44 2017 -0800

    crypto: dh - Fix double free of ctx->p
    
    When setting the secret with the software Diffie-Hellman implementation,
    if allocating 'g' failed (e.g. if it was longer than
    MAX_EXTERN_MPI_BITS), then 'p' was freed twice: once immediately, and
    once later when the crypto_kpp tfm was destroyed.
    
    Fix it by using dh_free_ctx() (renamed to dh_clear_ctx()) in the error
    paths, as that correctly sets the pointers to NULL.
    
    KASAN report:
    
        MPI: mpi too large (32760 bits)
        ==================================================================
        BUG: KASAN: use-after-free in mpi_free+0x131/0x170
        Read of size 4 at addr ffff88006c7cdf90 by task reproduce_doubl/367
    
        CPU: 1 PID: 367 Comm: reproduce_doubl Not tainted 4.14.0-rc7-00040-g05298abde6fe #7
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
        Call Trace:
         dump_stack+0xb3/0x10b
         ? mpi_free+0x131/0x170
         print_address_description+0x79/0x2a0
         ? mpi_free+0x131/0x170
         kasan_report+0x236/0x340
         ? akcipher_register_instance+0x90/0x90
         __asan_report_load4_noabort+0x14/0x20
         mpi_free+0x131/0x170
         ? akcipher_register_instance+0x90/0x90
         dh_exit_tfm+0x3d/0x140
         crypto_kpp_exit_tfm+0x52/0x70
         crypto_destroy_tfm+0xb3/0x250
         __keyctl_dh_compute+0x640/0xe90
         ? kasan_slab_free+0x12f/0x180
         ? dh_data_from_key+0x240/0x240
         ? key_create_or_update+0x1ee/0xb20
         ? key_instantiate_and_link+0x440/0x440
         ? lock_contended+0xee0/0xee0
         ? kfree+0xcf/0x210
         ? SyS_add_key+0x268/0x340
         keyctl_dh_compute+0xb3/0xf1
         ? __keyctl_dh_compute+0xe90/0xe90
         ? SyS_add_key+0x26d/0x340
         ? entry_SYSCALL_64_fastpath+0x5/0xbe
         ? trace_hardirqs_on_caller+0x3f4/0x560
         SyS_keyctl+0x72/0x2c0
         entry_SYSCALL_64_fastpath+0x1f/0xbe
        RIP: 0033:0x43ccf9
        RSP: 002b:00007ffeeec96158 EFLAGS: 00000246 ORIG_RAX: 00000000000000fa
        RAX: ffffffffffffffda RBX: 000000000248b9b9 RCX: 000000000043ccf9
        RDX: 00007ffeeec96170 RSI: 00007ffeeec96160 RDI: 0000000000000017
        RBP: 0000000000000046 R08: 0000000000000000 R09: 0248b9b9143dc936
        R10: 0000000000001000 R11: 0000000000000246 R12: 0000000000000000
        R13: 0000000000409670 R14: 0000000000409700 R15: 0000000000000000
    
        Allocated by task 367:
         save_stack_trace+0x16/0x20
         kasan_kmalloc+0xeb/0x180
         kmem_cache_alloc_trace+0x114/0x300
         mpi_alloc+0x4b/0x230
         mpi_read_raw_data+0xbe/0x360
         dh_set_secret+0x1dc/0x460
         __keyctl_dh_compute+0x623/0xe90
         keyctl_dh_compute+0xb3/0xf1
         SyS_keyctl+0x72/0x2c0
         entry_SYSCALL_64_fastpath+0x1f/0xbe
    
        Freed by task 367:
         save_stack_trace+0x16/0x20
         kasan_slab_free+0xab/0x180
         kfree+0xb5/0x210
         mpi_free+0xcb/0x170
         dh_set_secret+0x2d7/0x460
         __keyctl_dh_compute+0x623/0xe90
         keyctl_dh_compute+0xb3/0xf1
         SyS_keyctl+0x72/0x2c0
         entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Fixes: 802c7f1c84e4 ("crypto: dh - Add DH software implementation")
    Cc: <stable@vger.kernel.org> # v4.8+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commits)
      cls_u32: use tcf_exts_get_net() before call_rcu()
      cls_tcindex: use tcf_exts_get_net() before call_rcu()
      cls_rsvp: use tcf_exts_get_net() before call_rcu()
      cls_route: use tcf_exts_get_net() before call_rcu()
      cls_matchall: use tcf_exts_get_net() before call_rcu()
      cls_fw: use tcf_exts_get_net() before call_rcu()
      cls_flower: use tcf_exts_get_net() before call_rcu()
      cls_flow: use tcf_exts_get_net() before call_rcu()
      cls_cgroup: use tcf_exts_get_net() before call_rcu()
      cls_bpf: use tcf_exts_get_net() before call_rcu()
      cls_basic: use tcf_exts_get_net() before call_rcu()
      net_sched: introduce tcf_exts_get_net() and tcf_exts_put_net()
      Revert "net_sched: hold netns refcnt for each action"
      net: usb: asix: fill null-ptr-deref in asix_suspend
      Revert "net: usb: asix: fill null-ptr-deref in asix_suspend"
      qmi_wwan: Add missing skb_reset_mac_header-call
      bonding: fix slave stuck in BOND_LINK_FAIL state
      qrtr: Move to postcore_initcall
      net: qmi_wwan: fix divide by 0 on bad descriptors
      net: cdc_ether: fix divide by 0 on bad descriptors
      ...

commit cdafb6d8b8da7fde266f79b3287ac221aa841879
Author: Andrew Gabbasov <andrew_gabbasov@mentor.com>
Date:   Wed Nov 8 10:13:15 2017 -0700

    usb: gadget: f_fs: Fix use-after-free in ffs_free_inst
    
    KASAN enabled configuration reports an error
    
    BUG: KASAN: use-after-free in ffs_free_inst+... [usb_f_fs] at addr ...
    Write of size 8 by task ...
    
    This is observed after "ffs-test" is run and interrupted. If after that
    functionfs is unmounted and g_ffs module is unloaded, that use-after-free
    occurs during g_ffs module removal.
    
    Although the report indicates ffs_free_inst() function, the actual
    use-after-free condition occurs in _ffs_free_dev() function, which
    is probably inlined into ffs_free_inst().
    
    This happens due to keeping the ffs_data reference in device structure
    during functionfs unmounting, while ffs_data itself is freed as no longer
    needed. The fix is to clear that reference in ffs_closed() function,
    which is a counterpart of ffs_ready(), where the reference is stored.
    
    Fixes: 3262ad824307 ("usb: gadget: f_fs: Stop ffs_closed NULL pointer dereference")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c21a48055a67ceb693e9c2587824a8de60a217c
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Fri Oct 27 22:19:26 2017 -0800

    target: Avoid early CMD_T_PRE_EXECUTE failures during ABORT_TASK
    
    This patch fixes bug where early se_cmd exceptions that occur
    before backend execution can result in use-after-free if/when
    a subsequent ABORT_TASK occurs for the same tag.
    
    Since an early se_cmd exception will have had se_cmd added to
    se_session->sess_cmd_list via target_get_sess_cmd(), it will
    not have CMD_T_COMPLETE set by the usual target_complete_cmd()
    backend completion path.
    
    This causes a subsequent ABORT_TASK + __target_check_io_state()
    to signal ABORT_TASK should proceed.  As core_tmr_abort_task()
    executes, it will bring the outstanding se_cmd->cmd_kref count
    down to zero releasing se_cmd, after se_cmd has already been
    queued with error status into fabric driver response path code.
    
    To address this bug, introduce a CMD_T_PRE_EXECUTE bit that is
    set at target_get_sess_cmd() time, and cleared immediately before
    backend driver dispatch in target_execute_cmd() once CMD_T_ACTIVE
    is set.
    
    Then, check CMD_T_PRE_EXECUTE within __target_check_io_state() to
    determine when an early exception has occured, and avoid aborting
    this se_cmd since it will have already been queued into fabric
    driver response path code.
    
    Reported-by: Donald White <dew@datera.io>
    Cc: Donald White <dew@datera.io>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: stable@vger.kernel.org # 3.14+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 818a34eb266449b1c89242596039a5e44c9be04c
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:30 2017 +0300

    fs, nfsd: convert nfs4_file.fi_ref from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_file.fi_ref is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit cff7cb2ece397760195ff8a5fc6bf3c860810246
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:29 2017 +0300

    fs, nfsd: convert nfs4_cntl_odstate.co_odcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_cntl_odstate.co_odcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit a15dfcd529ab43265e70ec32d3b9d2286872d412
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 12:53:28 2017 +0300

    fs, nfsd: convert nfs4_stid.sc_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable nfs4_stid.sc_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit b1cb7372fa822af6c06c8045963571d13ad6348b
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Tue Nov 7 08:39:39 2017 -0500

    dvb_frontend: don't use-after-free the frontend struct
    
    dvb_frontend_invoke_release() may free the frontend struct.
    So, the free logic can't update it anymore after calling it.
    
    That's OK, as __dvb_frontend_free() is called only when the
    krefs are zeroed, so nobody is using it anymore.
    
    That should fix the following KASAN error:
    
    The KASAN report looks like this (running on kernel 3e0cc09a3a2c40ec1ffb6b4e12da86e98feccb11 (4.14-rc5+)):
    ==================================================================
    BUG: KASAN: use-after-free in __dvb_frontend_free+0x113/0x120
    Write of size 8 at addr ffff880067d45a00 by task kworker/0:1/24
    
    CPU: 0 PID: 24 Comm: kworker/0:1 Not tainted 4.14.0-rc5-43687-g06ab8a23e0e6 #545
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Workqueue: usb_hub_wq hub_event
    Call Trace:
     __dump_stack lib/dump_stack.c:16
     dump_stack+0x292/0x395 lib/dump_stack.c:52
     print_address_description+0x78/0x280 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351
     kasan_report+0x23d/0x350 mm/kasan/report.c:409
     __asan_report_store8_noabort+0x1c/0x20 mm/kasan/report.c:435
     __dvb_frontend_free+0x113/0x120 drivers/media/dvb-core/dvb_frontend.c:156
     dvb_frontend_put+0x59/0x70 drivers/media/dvb-core/dvb_frontend.c:176
     dvb_frontend_detach+0x120/0x150 drivers/media/dvb-core/dvb_frontend.c:2803
     dvb_usb_adapter_frontend_exit+0xd6/0x160 drivers/media/usb/dvb-usb/dvb-usb-dvb.c:340
     dvb_usb_adapter_exit drivers/media/usb/dvb-usb/dvb-usb-init.c:116
     dvb_usb_exit+0x9b/0x200 drivers/media/usb/dvb-usb/dvb-usb-init.c:132
     dvb_usb_device_exit+0xa5/0xf0 drivers/media/usb/dvb-usb/dvb-usb-init.c:295
     usb_unbind_interface+0x21c/0xa90 drivers/usb/core/driver.c:423
     __device_release_driver drivers/base/dd.c:861
     device_release_driver_internal+0x4f1/0x5c0 drivers/base/dd.c:893
     device_release_driver+0x1e/0x30 drivers/base/dd.c:918
     bus_remove_device+0x2f4/0x4b0 drivers/base/bus.c:565
     device_del+0x5c4/0xab0 drivers/base/core.c:1985
     usb_disable_device+0x1e9/0x680 drivers/usb/core/message.c:1170
     usb_disconnect+0x260/0x7a0 drivers/usb/core/hub.c:2124
     hub_port_connect drivers/usb/core/hub.c:4754
     hub_port_connect_change drivers/usb/core/hub.c:5009
     port_event drivers/usb/core/hub.c:5115
     hub_event+0x1318/0x3740 drivers/usb/core/hub.c:5195
     process_one_work+0xc73/0x1d90 kernel/workqueue.c:2119
     worker_thread+0x221/0x1850 kernel/workqueue.c:2253
     kthread+0x363/0x440 kernel/kthread.c:231
     ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    Allocated by task 24:
     save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kmem_cache_alloc_trace+0x11e/0x2d0 mm/slub.c:2772
     kmalloc ./include/linux/slab.h:493
     kzalloc ./include/linux/slab.h:666
     dtt200u_fe_attach+0x4c/0x110 drivers/media/usb/dvb-usb/dtt200u-fe.c:212
     dtt200u_frontend_attach+0x35/0x80 drivers/media/usb/dvb-usb/dtt200u.c:136
     dvb_usb_adapter_frontend_init+0x32b/0x660 drivers/media/usb/dvb-usb/dvb-usb-dvb.c:286
     dvb_usb_adapter_init drivers/media/usb/dvb-usb/dvb-usb-init.c:86
     dvb_usb_init drivers/media/usb/dvb-usb/dvb-usb-init.c:162
     dvb_usb_device_init+0xf73/0x17f0 drivers/media/usb/dvb-usb/dvb-usb-init.c:277
     dtt200u_usb_probe+0xa1/0xe0 drivers/media/usb/dvb-usb/dtt200u.c:155
     usb_probe_interface+0x35d/0x8e0 drivers/usb/core/driver.c:361
     really_probe drivers/base/dd.c:413
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
     bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
     __device_attach+0x26b/0x3c0 drivers/base/dd.c:710
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
     bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
     device_add+0xd0b/0x1660 drivers/base/core.c:1835
     usb_set_configuration+0x104e/0x1870 drivers/usb/core/message.c:1932
     generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
     usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
     really_probe drivers/base/dd.c:413
     driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
     __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
     bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
     __device_attach+0x26b/0x3c0 drivers/base/dd.c:710
     device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
     bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
     device_add+0xd0b/0x1660 drivers/base/core.c:1835
     usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
     hub_port_connect drivers/usb/core/hub.c:4903
     hub_port_connect_change drivers/usb/core/hub.c:5009
     port_event drivers/usb/core/hub.c:5115
     hub_event+0x194d/0x3740 drivers/usb/core/hub.c:5195
     process_one_work+0xc73/0x1d90 kernel/workqueue.c:2119
     worker_thread+0x221/0x1850 kernel/workqueue.c:2253
     kthread+0x363/0x440 kernel/kthread.c:231
     ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    Freed by task 24:
     save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459
     kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:524
     slab_free_hook mm/slub.c:1390
     slab_free_freelist_hook mm/slub.c:1412
     slab_free mm/slub.c:2988
     kfree+0xf6/0x2f0 mm/slub.c:3919
     dtt200u_fe_release+0x3c/0x50 drivers/media/usb/dvb-usb/dtt200u-fe.c:202
     dvb_frontend_invoke_release.part.13+0x1c/0x30 drivers/media/dvb-core/dvb_frontend.c:2790
     dvb_frontend_invoke_release drivers/media/dvb-core/dvb_frontend.c:2789
     __dvb_frontend_free+0xad/0x120 drivers/media/dvb-core/dvb_frontend.c:153
     dvb_frontend_put+0x59/0x70 drivers/media/dvb-core/dvb_frontend.c:176
     dvb_frontend_detach+0x120/0x150 drivers/media/dvb-core/dvb_frontend.c:2803
     dvb_usb_adapter_frontend_exit+0xd6/0x160 drivers/media/usb/dvb-usb/dvb-usb-dvb.c:340
     dvb_usb_adapter_exit drivers/media/usb/dvb-usb/dvb-usb-init.c:116
     dvb_usb_exit+0x9b/0x200 drivers/media/usb/dvb-usb/dvb-usb-init.c:132
     dvb_usb_device_exit+0xa5/0xf0 drivers/media/usb/dvb-usb/dvb-usb-init.c:295
     usb_unbind_interface+0x21c/0xa90 drivers/usb/core/driver.c:423
     __device_release_driver drivers/base/dd.c:861
     device_release_driver_internal+0x4f1/0x5c0 drivers/base/dd.c:893
     device_release_driver+0x1e/0x30 drivers/base/dd.c:918
     bus_remove_device+0x2f4/0x4b0 drivers/base/bus.c:565
     device_del+0x5c4/0xab0 drivers/base/core.c:1985
     usb_disable_device+0x1e9/0x680 drivers/usb/core/message.c:1170
     usb_disconnect+0x260/0x7a0 drivers/usb/core/hub.c:2124
     hub_port_connect drivers/usb/core/hub.c:4754
     hub_port_connect_change drivers/usb/core/hub.c:5009
     port_event drivers/usb/core/hub.c:5115
     hub_event+0x1318/0x3740 drivers/usb/core/hub.c:5195
     process_one_work+0xc73/0x1d90 kernel/workqueue.c:2119
     worker_thread+0x221/0x1850 kernel/workqueue.c:2253
     kthread+0x363/0x440 kernel/kthread.c:231
     ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    The buggy address belongs to the object at ffff880067d45500
     which belongs to the cache kmalloc-2048 of size 2048
    The buggy address is located 1280 bytes inside of
     2048-byte region [ffff880067d45500, ffff880067d45d00)
    The buggy address belongs to the page:
    page:ffffea00019f5000 count:1 mapcount:0 mapping:          (null)
    index:0x0 compound_mapcount: 0
    flags: 0x100000000008100(slab|head)
    raw: 0100000000008100 0000000000000000 0000000000000000 00000001000f000f
    raw: dead000000000100 dead000000000200 ffff88006c002d80 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff880067d45900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880067d45980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880067d45a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff880067d45a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880067d45b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Fixes: ead666000a5f ("media: dvb_frontend: only use kref after initialized")
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Suggested-by: Matthias Schwarzott <zzam@gentoo.org>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit db86be3a12d0b6e5c5b51c2ab2a48f06329cb590
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Aug 22 23:41:28 2017 +0300

    eCryptfs: use after free in ecryptfs_release_messaging()
    
    We're freeing the list iterator so we should be using the _safe()
    version of hlist_for_each_entry().
    
    Fixes: 88b4a07e6610 ("[PATCH] eCryptfs: Public key transport mechanism")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tyler Hicks <tyhicks@canonical.com>

commit a2e373438f72391493a4425efc1b82030b6b4fd5
Author: Gustavo A. R. Silva <garsilva@embeddedor.com>
Date:   Sat Nov 4 23:52:54 2017 -0500

    thunderbolt: tb: fix use after free in tb_activate_pcie_devices
    
    Add a ̣̣continue statement in order to avoid using a previously
    free'd pointer tunnel in list_add.
    
    Addresses-Coverity-ID: 1415336
    Fixes: 9d3cce0b6136 ("thunderbolt: Introduce thunderbolt bus and connection manager")
    Signed-off-by: Gustavo A. R. Silva <garsilva@embeddedor.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1fc12c5d9ad06a2a74e97a91f1b0c5f4c723b50
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Fri Nov 3 16:00:35 2017 +0100

    drm/ttm: Always and only destroy bo->ttm_resv in ttm_bo_release_list
    
    Fixes a use-after-free due to a race condition in
    ttm_bo_cleanup_refs_and_unlock, which allows one task to reserve a BO
    and destroy its ttm_resv while another task is waiting for it to signal
    in reservation_object_wait_timeout_rcu.
    
    v2:
    * Always initialize bo->ttm_resv in ttm_bo_init_reserved
     (Christian König)
    
    Fixes: 0d2bd2ae045d "drm/ttm: fix memory leak while individualizing BOs"
    Reviewed-by: Chunming Zhou <david1.zhou@amd.com> # v1
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Michel Dänzer <michel.daenzer@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit cb79a180f2e7eb51de5a4848652893197637bccb
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Nov 1 20:30:49 2017 +0100

    xfrm: defer daddr pointer assignment after spi parsing
    
    syzbot reports:
    BUG: KASAN: use-after-free in __xfrm_state_lookup+0x695/0x6b0
    Read of size 4 at addr ffff8801d434e538 by task syzkaller647520/2991
    [..]
    __xfrm_state_lookup+0x695/0x6b0 net/xfrm/xfrm_state.c:833
    xfrm_state_lookup+0x8a/0x160 net/xfrm/xfrm_state.c:1592
    xfrm_input+0x8e5/0x22f0 net/xfrm/xfrm_input.c:302
    
    The use-after-free is the ipv4 destination address, which points
    to an skb head area that has been reallocated:
      pskb_expand_head+0x36b/0x1210 net/core/skbuff.c:1494
      __pskb_pull_tail+0x14a/0x17c0 net/core/skbuff.c:1877
      pskb_may_pull include/linux/skbuff.h:2102 [inline]
      xfrm_parse_spi+0x3d3/0x4d0 net/xfrm/xfrm_input.c:170
      xfrm_input+0xce2/0x22f0 net/xfrm/xfrm_input.c:291
    
    so the real bug is that xfrm_parse_spi() uses pskb_may_pull, but
    for now do smaller workaround that makes xfrm_input fetch daddr
    after spi parsing.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>

commit 770b03c2ca4aa44d226cf248f86aa23e546147d0
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 29 13:01:33 2017 +0100

    staging: greybus: spilib: fix use-after-free after deregistration
    
    Remove erroneous spi_master_put() after controller deregistration which
    would access the already freed spi controller.
    
    Note that spi_unregister_master() drops our only controller reference.
    
    Fixes: ba3e67001b42 ("greybus: SPI: convert to a gpbridge driver")
    Cc: stable <stable@vger.kernel.org>     # 4.9
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Rui Miguel Silva <rmfrfs@gmail.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb0631fd3cf9e989cd48293fe631cbc402aec9a9
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Wed Nov 1 08:21:25 2017 +0100

    x86/mm: fix use-after-free of vma during userfaultfd fault
    
    Syzkaller with KASAN has reported a use-after-free of vma->vm_flags in
    __do_page_fault() with the following reproducer:
    
      mmap(&(0x7f0000000000/0xfff000)=nil, 0xfff000, 0x3, 0x32, 0xffffffffffffffff, 0x0)
      mmap(&(0x7f0000011000/0x3000)=nil, 0x3000, 0x1, 0x32, 0xffffffffffffffff, 0x0)
      r0 = userfaultfd(0x0)
      ioctl$UFFDIO_API(r0, 0xc018aa3f, &(0x7f0000002000-0x18)={0xaa, 0x0, 0x0})
      ioctl$UFFDIO_REGISTER(r0, 0xc020aa00, &(0x7f0000019000)={{&(0x7f0000012000/0x2000)=nil, 0x2000}, 0x1, 0x0})
      r1 = gettid()
      syz_open_dev$evdev(&(0x7f0000013000-0x12)="2f6465762f696e7075742f6576656e742300", 0x0, 0x0)
      tkill(r1, 0x7)
    
    The vma should be pinned by mmap_sem, but handle_userfault() might (in a
    return to userspace scenario) release it and then acquire again, so when
    we return to __do_page_fault() (with other result than VM_FAULT_RETRY),
    the vma might be gone.
    
    Specifically, per Andrea the scenario is
     "A return to userland to repeat the page fault later with a
      VM_FAULT_NOPAGE retval (potentially after handling any pending signal
      during the return to userland). The return to userland is identified
      whenever FAULT_FLAG_USER|FAULT_FLAG_KILLABLE are both set in
      vmf->flags"
    
    However, since commit a3c4fb7c9c2e ("x86/mm: Fix fault error path using
    unsafe vma pointer") there is a vma_pkey() read of vma->vm_flags after
    that point, which can thus become use-after-free.  Fix this by moving
    the read before calling handle_mm_fault().
    
    Reported-by: syzbot <bot+6a5269ce759a7bb12754ed9622076dc93f65a1f6@syzkaller.appspotmail.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Suggested-by: Kirill A. Shutemov <kirill@shutemov.name>
    Fixes: 3c4fb7c9c2e ("x86/mm: Fix fault error path using unsafe vma pointer")
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7400bb4b5800831581a82f71700af6a5e815c3c8
Author: Tejaswi Tanikella <tejaswit@codeaurora.org>
Date:   Mon Oct 23 11:46:03 2017 +0530

    netfilter: nf_reject_ipv4: Fix use-after-free in send_reset
    
    niph is not updated after pskb_expand_head changes the skb head. It
    still points to the freed data, which is then used to update tot_len and
    checksum. This could cause use-after-free poison crash.
    
    Update niph, if ip_route_me_harder does not fail.
    
    This only affects the interaction with REJECT targets and br_netfilter.
    
    Signed-off-by: Tejaswi Tanikella <tejaswit@codeaurora.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 153fbd1226fb30b8630802aa5047b8af5ef53c9f
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Oct 31 11:18:53 2017 +0100

    futex: Fix more put_pi_state() vs. exit_pi_state_list() races
    
    Dmitry (through syzbot) reported being able to trigger the WARN in
    get_pi_state() and a use-after-free on:
    
            raw_spin_lock_irq(&pi_state->pi_mutex.wait_lock);
    
    Both are due to this race:
    
      exit_pi_state_list()                          put_pi_state()
    
      lock(&curr->pi_lock)
      while() {
            pi_state = list_first_entry(head);
            hb = hash_futex(&pi_state->key);
            unlock(&curr->pi_lock);
    
                                                    dec_and_test(&pi_state->refcount);
    
            lock(&hb->lock)
            lock(&pi_state->pi_mutex.wait_lock)     // uaf if pi_state free'd
            lock(&curr->pi_lock);
    
            ....
    
            unlock(&curr->pi_lock);
            get_pi_state();                         // WARN; refcount==0
    
    The problem is we take the reference count too late, and don't allow it
    being 0. Fix it by using inc_not_zero() and simply retrying the loop
    when we fail to get a refcount. In that case put_pi_state() should
    remove the entry from the list.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Gratian Crisan <gratian.crisan@ni.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: dvhart@infradead.org
    Cc: syzbot <bot+2af19c9e1ffe4d4ee1d16c56ae7580feaee75765@syzkaller.appspotmail.com>
    Cc: syzkaller-bugs@googlegroups.com
    Cc: <stable@vger.kernel.org>
    Fixes: c74aef2d06a9 ("futex: Fix pi_state->owner serialization")
    Link: http://lkml.kernel.org/r/20171031101853.xpfh72y643kdfhjs@hirez.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit ab97f87325e28b7ef7717e6cb62e8da14a7176e1
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 13:26:02 2017 +0300

    fsnotify: convert fsnotify_mark.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable fsnotify_mark.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit f37650f1c7c71cf5180b43229d13b421d81e7170
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Oct 30 21:14:56 2017 +0100

    fanotify: fix fsnotify_prepare_user_wait() failure
    
    If fsnotify_prepare_user_wait() fails, we leave the event on the
    notification list.  Which will result in a warning in
    fsnotify_destroy_event() and later use-after-free.
    
    Instead of adding a new helper to remove the event from the list in this
    case, I opted to move the prepare/finish up into fanotify_handle_event().
    
    This will allow these to be moved further out into the generic code later,
    and perhaps let us move to non-sleeping RCU.
    
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 05f0e38724e8 ("fanotify: Release SRCU lock when waiting for userspace response")
    Cc: <stable@vger.kernel.org> # v4.12
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 0d6ec079d6aaa098b978d6395973bb027c752a03
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Mon Oct 30 21:14:55 2017 +0100

    fsnotify: pin both inode and vfsmount mark
    
    We may fail to pin one of the marks in fsnotify_prepare_user_wait() when
    dropping the srcu read lock, resulting in use after free at the next
    iteration.
    
    Solution is to store both marks in iter_info instead of just the one we'll
    be sending the event for.
    
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: 9385a84d7e1f ("fsnotify: Pass fsnotify_iter_info into handle_event handler")
    Cc: <stable@vger.kernel.org> # v4.12
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 7761daa6a1599fa5479b8da367470f632a1927e0
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 13:26:01 2017 +0300

    fsnotify: convert fsnotify_group.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable fsnotify_group.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 4d5e0689dc9d5640ad46cdfbe1896b74d8df1661
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 30 11:35:27 2017 +0100

    spi: spi-axi: fix potential use-after-free after deregistration
    
    Take an extra reference to the controller before deregistering it to
    prevent use-after-free in the interrupt handler in case an interrupt
    fires before the line is disabled.
    
    Fixes: b1353d1c1d45 ("spi: Add Analog Devices AXI SPI Engine controller support")
    Acked-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 67f7b2781fafcc0f52464880154b320fea1ae982
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 30 11:35:25 2017 +0100

    spi: fix use-after-free at controller deregistration
    
    The controller is typically freed as part of device_unregister() so
    store the bus id before deregistration to avoid use-after-free when the
    id is later released.
    
    Fixes: 9b61e302210e ("spi: Pick spi bus number from Linux idr or spi alias")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable <stable@vger.kernel.org>

commit 79fb0518fec8c8b4ea7f1729f54f293724b3dbb0
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Oct 29 11:02:04 2017 +0100

    ALSA: timer: Add missing mutex lock for compat ioctls
    
    The races among ioctl and other operations were protected by the
    commit af368027a49a ("ALSA: timer: Fix race among timer ioctls") and
    later fixes, but one code path was forgotten in the scenario: the
    32bit compat ioctl.  As syzkaller recently spotted, a very similar
    use-after-free may happen with the combination of compat ioctls.
    
    The fix is simply to apply the same ioctl_lock to the compat_ioctl
    callback, too.
    
    Fixes: af368027a49a ("ALSA: timer: Fix race among timer ioctls")
    Reference: http://lkml.kernel.org/r/089e082686ac9b482e055c832617@google.com
    Reported-by: syzbot <bot+e5f3c9783e7048a74233054febbe9f1bdf54b6da@syzkaller.appspotmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 822e86d997e4d8f942818ea6ac1711f59a66ebef
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Oct 30 11:10:09 2017 -0700

    net_sched: remove tcf_block_put_deferred()
    
    In commit 7aa0045dadb6 ("net_sched: introduce a workqueue for RCU callbacks of tc filter")
    I defer tcf_chain_flush() to a workqueue, this causes a use-after-free
    because qdisc is already destroyed after we queue this work.
    
    The tcf_block_put_deferred() is no longer necessary after we get RTNL
    for each tc filter destroy work, no others could jump in at this point.
    Same for tcf_chain_hold(), we are fully serialized now.
    
    This also reduces one indirection therefore makes the code more
    readable. Note this brings back a rcu_barrier(), however comparing
    to the code prior to commit 7aa0045dadb6 we still reduced one
    rcu_barrier(). For net-next, we can consider to refcnt tcf block to
    avoid it.
    
    Fixes: 7aa0045dadb6 ("net_sched: introduce a workqueue for RCU callbacks of tc filter")
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3b304d24a718ae779ee9c7f2014dd3b2d0893b70
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Oct 30 14:46:32 2017 -0700

    bcache: convert cached_dev.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable cached_dev.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: Michael Lyle <mlyle@lyle.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit dc35b1129cc3204de597e10fb34dc78e9b898197
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Oct 26 14:00:32 2017 +0100

    drm/i915: Hold rcu_read_lock when iterating over the radixtree (vma idr)
    
    Kasan spotted
    
        [IGT] gem_tiled_pread_pwrite: exiting, ret=0
        ==================================================================
        BUG: KASAN: use-after-free in __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
        Read of size 8 at addr ffff8801359da310 by task kworker/3:2/182
    
        CPU: 3 PID: 182 Comm: kworker/3:2 Tainted: G     U          4.14.0-rc6-CI-Custom_3340+ #1
        Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
        Workqueue: events __i915_gem_free_work [i915]
        Call Trace:
         dump_stack+0x68/0xa0
         print_address_description+0x78/0x290
         ? __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         kasan_report+0x23d/0x350
         __asan_report_load8_noabort+0x19/0x20
         __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         ? i915_gem_object_truncate+0x100/0x100 [i915]
         ? lock_acquire+0x380/0x380
         __i915_gem_object_put_pages+0x30d/0x530 [i915]
         __i915_gem_free_objects+0x551/0xbd0 [i915]
         ? lock_acquire+0x13e/0x380
         __i915_gem_free_work+0x4e/0x70 [i915]
         process_one_work+0x6f6/0x1590
         ? pwq_dec_nr_in_flight+0x2b0/0x2b0
         worker_thread+0xe6/0xe90
         ? pci_mmcfg_check_reserved+0x110/0x110
         kthread+0x309/0x410
         ? process_one_work+0x1590/0x1590
         ? kthread_create_on_node+0xb0/0xb0
         ret_from_fork+0x27/0x40
    
        Allocated by task 1801:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xee/0x190
         kasan_slab_alloc+0x12/0x20
         kmem_cache_alloc+0xdc/0x2e0
         radix_tree_node_alloc.constprop.12+0x48/0x330
         __radix_tree_create+0x274/0x480
         __radix_tree_insert+0xa2/0x610
         i915_gem_object_get_sg+0x224/0x670 [i915]
         i915_gem_object_get_page+0xb5/0x1c0 [i915]
         i915_gem_pread_ioctl+0x822/0xf60 [i915]
         drm_ioctl_kernel+0x13f/0x1c0
         drm_ioctl+0x6cf/0x980
         do_vfs_ioctl+0x184/0xf30
         SyS_ioctl+0x41/0x70
         entry_SYSCALL_64_fastpath+0x1c/0xb1
    
        Freed by task 37:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xaf/0x190
         kmem_cache_free+0xbf/0x340
         radix_tree_node_rcu_free+0x79/0x90
         rcu_process_callbacks+0x46d/0xf40
         __do_softirq+0x21c/0x8d3
    
        The buggy address belongs to the object at ffff8801359da0f0
        which belongs to the cache radix_tree_node of size 576
        The buggy address is located 544 bytes inside of
        576-byte region [ffff8801359da0f0, ffff8801359da330)
        The buggy address belongs to the page:
        page:ffffea0004d67600 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
        flags: 0x8000000000008100(slab|head)
        raw: 8000000000008100 0000000000000000 0000000000000000 0000000100110011
        raw: ffffea0004b52920 ffffea0004b38020 ffff88015b416a80 0000000000000000
        page dumped because: kasan: bad access detected
    
        Memory state around the buggy address:
         ffff8801359da200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
         ffff8801359da280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
        >ffff8801359da300: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
                                 ^
         ffff8801359da380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
         ffff8801359da400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
        ==================================================================
        Disabling lock debugging due to kernel taint
    
    which looks like the slab containing the radixtree iter was freed as we
    traversed the tree, taking the rcu read lock across the loop should
    prevent that (deferring all the frees until the end).
    
    Reported-by: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Fixes: d1b48c1e7184 ("drm/i915: Replace execbuf vma ht with an idr")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171026130032.10677-2-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.william.auld@gmail.com>
    (cherry picked from commit 547da76b5777859f98bb78e6b57f19463f803c04)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 23e873389d841e4f8115e8dab76126daa405414b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Oct 26 14:00:31 2017 +0100

    drm/i915: Hold rcu_read_lock when iterating over the radixtree (objects)
    
    Kasan spotted
    
        [IGT] gem_tiled_pread_pwrite: exiting, ret=0
        ==================================================================
        BUG: KASAN: use-after-free in __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
        Read of size 8 at addr ffff8801359da310 by task kworker/3:2/182
    
        CPU: 3 PID: 182 Comm: kworker/3:2 Tainted: G     U          4.14.0-rc6-CI-Custom_3340+ #1
        Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
        Workqueue: events __i915_gem_free_work [i915]
        Call Trace:
         dump_stack+0x68/0xa0
         print_address_description+0x78/0x290
         ? __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         kasan_report+0x23d/0x350
         __asan_report_load8_noabort+0x19/0x20
         __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         ? i915_gem_object_truncate+0x100/0x100 [i915]
         ? lock_acquire+0x380/0x380
         __i915_gem_object_put_pages+0x30d/0x530 [i915]
         __i915_gem_free_objects+0x551/0xbd0 [i915]
         ? lock_acquire+0x13e/0x380
         __i915_gem_free_work+0x4e/0x70 [i915]
         process_one_work+0x6f6/0x1590
         ? pwq_dec_nr_in_flight+0x2b0/0x2b0
         worker_thread+0xe6/0xe90
         ? pci_mmcfg_check_reserved+0x110/0x110
         kthread+0x309/0x410
         ? process_one_work+0x1590/0x1590
         ? kthread_create_on_node+0xb0/0xb0
         ret_from_fork+0x27/0x40
    
        Allocated by task 1801:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xee/0x190
         kasan_slab_alloc+0x12/0x20
         kmem_cache_alloc+0xdc/0x2e0
         radix_tree_node_alloc.constprop.12+0x48/0x330
         __radix_tree_create+0x274/0x480
         __radix_tree_insert+0xa2/0x610
         i915_gem_object_get_sg+0x224/0x670 [i915]
         i915_gem_object_get_page+0xb5/0x1c0 [i915]
         i915_gem_pread_ioctl+0x822/0xf60 [i915]
         drm_ioctl_kernel+0x13f/0x1c0
         drm_ioctl+0x6cf/0x980
         do_vfs_ioctl+0x184/0xf30
         SyS_ioctl+0x41/0x70
         entry_SYSCALL_64_fastpath+0x1c/0xb1
    
        Freed by task 37:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xaf/0x190
         kmem_cache_free+0xbf/0x340
         radix_tree_node_rcu_free+0x79/0x90
         rcu_process_callbacks+0x46d/0xf40
         __do_softirq+0x21c/0x8d3
    
        The buggy address belongs to the object at ffff8801359da0f0
        which belongs to the cache radix_tree_node of size 576
        The buggy address is located 544 bytes inside of
        576-byte region [ffff8801359da0f0, ffff8801359da330)
        The buggy address belongs to the page:
        page:ffffea0004d67600 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
        flags: 0x8000000000008100(slab|head)
        raw: 8000000000008100 0000000000000000 0000000000000000 0000000100110011
        raw: ffffea0004b52920 ffffea0004b38020 ffff88015b416a80 0000000000000000
        page dumped because: kasan: bad access detected
    
        Memory state around the buggy address:
         ffff8801359da200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
         ffff8801359da280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
        >ffff8801359da300: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
                                 ^
         ffff8801359da380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
         ffff8801359da400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
        ==================================================================
        Disabling lock debugging due to kernel taint
    
    which looks like the slab containing the radixtree iter was freed as we
    traversed the tree, taking the rcu read lock across the loop should
    prevent that (deferring all the frees until the end).
    
    Reported-by: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Fixes: 96d776345277 ("drm/i915: Use a radixtree for random access to the object's backing storage")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171026130032.10677-1-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.william.auld@gmail.com>
    (cherry picked from commit bea6e987c1ff358224e7bef7084be7650f5d1c38)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit c78e1746d3ad7d548bdf3fe491898cc453911a49
    Author: Daniel Borkmann <daniel@iogearbox.net>
    Date:   Wed May 20 17:13:33 2015 +0200
    
        net: sched: fix call_rcu() race on classifier module unloads
    
    2. A very nasty one fixed by me:
    
    commit 1697c4bb5245649a23f06a144cc38c06715e1b65
    Author: Cong Wang <xiyou.wangcong@gmail.com>
    Date:   Mon Sep 11 16:33:32 2017 -0700
    
        net_sched: carefully handle tcf_block_put()
    
    3. Two more bugs found by Chris:
    https://patchwork.ozlabs.org/patch/826696/
    https://patchwork.ozlabs.org/patch/826695/
    
    Usually RCU callbacks are simple, however for TC filters and actions,
    they are complex because at least TC actions could be destroyed
    together with the TC filter in one callback. And RCU callbacks are
    invoked in BH context, without locking they are parallel too. All of
    these contribute to the cause of these nasty bugs.
    
    Alternatively, we could also:
    
    a) Introduce a spinlock to serialize these RCU callbacks. But as I
    said in commit 1697c4bb5245 ("net_sched: carefully handle
    tcf_block_put()"), it is very hard to do because of tcf_chain_dump().
    Potentially we need to do a lot of work to make it possible (if not
    impossible).
    
    b) Just get rid of these RCU callbacks, because they are not
    necessary at all, callers of these call_rcu() are all on slow paths
    and holding RTNL lock, so blocking is allowed in their contexts.
    However, David and Eric dislike adding synchronize_rcu() here.
    
    As suggested by Paul, we could defer the work to a workqueue and
    gain the permission of holding RTNL again without any performance
    impact, however, in tcf_block_put() we could have a deadlock when
    flushing workqueue while hodling RTNL lock, the trick here is to
    defer the work itself in workqueue and make it queued after all
    other works so that we keep the same ordering to avoid any
    use-after-free. Please see the first patch for details.
    
    Patch 1 introduces the infrastructure, patch 2~12 move each
    tc filter to the new tc filter workqueue, patch 13 adds
    an assertion to catch potential bugs like this, patch 14
    closes another rcu callback race, patch 15 and patch 16 add
    new test cases.
    ====================
    
    Reported-by: Chris Mi <chrism@mellanox.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7aa0045dadb6ef37485ea9f2a7d28278ca588b51
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Oct 26 18:24:28 2017 -0700

    net_sched: introduce a workqueue for RCU callbacks of tc filter
    
    This patch introduces a dedicated workqueue for tc filters
    so that each tc filter's RCU callback could defer their
    action destroy work to this workqueue. The helper
    tcf_queue_work() is introduced for them to use.
    
    Because we hold RTNL lock when calling tcf_block_put(), we
    can not simply flush works inside it, therefore we have to
    defer it again to this workqueue and make sure all flying RCU
    callbacks have already queued their work before this one, in
    other words, to ensure this is the last one to execute to
    prevent any use-after-free.
    
    On the other hand, this makes tcf_block_put() ugly and
    harder to understand. Since David and Eric strongly dislike
    adding synchronize_rcu(), this is probably the only
    solution that could make everyone happy.
    
    Please also see the code comments below.
    
    Reported-by: Chris Mi <chrism@mellanox.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 547da76b5777859f98bb78e6b57f19463f803c04
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Oct 26 14:00:32 2017 +0100

    drm/i915: Hold rcu_read_lock when iterating over the radixtree (vma idr)
    
    Kasan spotted
    
        [IGT] gem_tiled_pread_pwrite: exiting, ret=0
        ==================================================================
        BUG: KASAN: use-after-free in __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
        Read of size 8 at addr ffff8801359da310 by task kworker/3:2/182
    
        CPU: 3 PID: 182 Comm: kworker/3:2 Tainted: G     U          4.14.0-rc6-CI-Custom_3340+ #1
        Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
        Workqueue: events __i915_gem_free_work [i915]
        Call Trace:
         dump_stack+0x68/0xa0
         print_address_description+0x78/0x290
         ? __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         kasan_report+0x23d/0x350
         __asan_report_load8_noabort+0x19/0x20
         __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         ? i915_gem_object_truncate+0x100/0x100 [i915]
         ? lock_acquire+0x380/0x380
         __i915_gem_object_put_pages+0x30d/0x530 [i915]
         __i915_gem_free_objects+0x551/0xbd0 [i915]
         ? lock_acquire+0x13e/0x380
         __i915_gem_free_work+0x4e/0x70 [i915]
         process_one_work+0x6f6/0x1590
         ? pwq_dec_nr_in_flight+0x2b0/0x2b0
         worker_thread+0xe6/0xe90
         ? pci_mmcfg_check_reserved+0x110/0x110
         kthread+0x309/0x410
         ? process_one_work+0x1590/0x1590
         ? kthread_create_on_node+0xb0/0xb0
         ret_from_fork+0x27/0x40
    
        Allocated by task 1801:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xee/0x190
         kasan_slab_alloc+0x12/0x20
         kmem_cache_alloc+0xdc/0x2e0
         radix_tree_node_alloc.constprop.12+0x48/0x330
         __radix_tree_create+0x274/0x480
         __radix_tree_insert+0xa2/0x610
         i915_gem_object_get_sg+0x224/0x670 [i915]
         i915_gem_object_get_page+0xb5/0x1c0 [i915]
         i915_gem_pread_ioctl+0x822/0xf60 [i915]
         drm_ioctl_kernel+0x13f/0x1c0
         drm_ioctl+0x6cf/0x980
         do_vfs_ioctl+0x184/0xf30
         SyS_ioctl+0x41/0x70
         entry_SYSCALL_64_fastpath+0x1c/0xb1
    
        Freed by task 37:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xaf/0x190
         kmem_cache_free+0xbf/0x340
         radix_tree_node_rcu_free+0x79/0x90
         rcu_process_callbacks+0x46d/0xf40
         __do_softirq+0x21c/0x8d3
    
        The buggy address belongs to the object at ffff8801359da0f0
        which belongs to the cache radix_tree_node of size 576
        The buggy address is located 544 bytes inside of
        576-byte region [ffff8801359da0f0, ffff8801359da330)
        The buggy address belongs to the page:
        page:ffffea0004d67600 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
        flags: 0x8000000000008100(slab|head)
        raw: 8000000000008100 0000000000000000 0000000000000000 0000000100110011
        raw: ffffea0004b52920 ffffea0004b38020 ffff88015b416a80 0000000000000000
        page dumped because: kasan: bad access detected
    
        Memory state around the buggy address:
         ffff8801359da200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
         ffff8801359da280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
        >ffff8801359da300: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
                                 ^
         ffff8801359da380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
         ffff8801359da400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
        ==================================================================
        Disabling lock debugging due to kernel taint
    
    which looks like the slab containing the radixtree iter was freed as we
    traversed the tree, taking the rcu read lock across the loop should
    prevent that (deferring all the frees until the end).
    
    Reported-by: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Fixes: d1b48c1e7184 ("drm/i915: Replace execbuf vma ht with an idr")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171026130032.10677-2-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.william.auld@gmail.com>

commit bea6e987c1ff358224e7bef7084be7650f5d1c38
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Oct 26 14:00:31 2017 +0100

    drm/i915: Hold rcu_read_lock when iterating over the radixtree (objects)
    
    Kasan spotted
    
        [IGT] gem_tiled_pread_pwrite: exiting, ret=0
        ==================================================================
        BUG: KASAN: use-after-free in __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
        Read of size 8 at addr ffff8801359da310 by task kworker/3:2/182
    
        CPU: 3 PID: 182 Comm: kworker/3:2 Tainted: G     U          4.14.0-rc6-CI-Custom_3340+ #1
        Hardware name: Intel Corp. Geminilake/GLK RVP1 DDR4 (05), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
        Workqueue: events __i915_gem_free_work [i915]
        Call Trace:
         dump_stack+0x68/0xa0
         print_address_description+0x78/0x290
         ? __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         kasan_report+0x23d/0x350
         __asan_report_load8_noabort+0x19/0x20
         __i915_gem_object_reset_page_iter+0x15c/0x170 [i915]
         ? i915_gem_object_truncate+0x100/0x100 [i915]
         ? lock_acquire+0x380/0x380
         __i915_gem_object_put_pages+0x30d/0x530 [i915]
         __i915_gem_free_objects+0x551/0xbd0 [i915]
         ? lock_acquire+0x13e/0x380
         __i915_gem_free_work+0x4e/0x70 [i915]
         process_one_work+0x6f6/0x1590
         ? pwq_dec_nr_in_flight+0x2b0/0x2b0
         worker_thread+0xe6/0xe90
         ? pci_mmcfg_check_reserved+0x110/0x110
         kthread+0x309/0x410
         ? process_one_work+0x1590/0x1590
         ? kthread_create_on_node+0xb0/0xb0
         ret_from_fork+0x27/0x40
    
        Allocated by task 1801:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xee/0x190
         kasan_slab_alloc+0x12/0x20
         kmem_cache_alloc+0xdc/0x2e0
         radix_tree_node_alloc.constprop.12+0x48/0x330
         __radix_tree_create+0x274/0x480
         __radix_tree_insert+0xa2/0x610
         i915_gem_object_get_sg+0x224/0x670 [i915]
         i915_gem_object_get_page+0xb5/0x1c0 [i915]
         i915_gem_pread_ioctl+0x822/0xf60 [i915]
         drm_ioctl_kernel+0x13f/0x1c0
         drm_ioctl+0x6cf/0x980
         do_vfs_ioctl+0x184/0xf30
         SyS_ioctl+0x41/0x70
         entry_SYSCALL_64_fastpath+0x1c/0xb1
    
        Freed by task 37:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xaf/0x190
         kmem_cache_free+0xbf/0x340
         radix_tree_node_rcu_free+0x79/0x90
         rcu_process_callbacks+0x46d/0xf40
         __do_softirq+0x21c/0x8d3
    
        The buggy address belongs to the object at ffff8801359da0f0
        which belongs to the cache radix_tree_node of size 576
        The buggy address is located 544 bytes inside of
        576-byte region [ffff8801359da0f0, ffff8801359da330)
        The buggy address belongs to the page:
        page:ffffea0004d67600 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
        flags: 0x8000000000008100(slab|head)
        raw: 8000000000008100 0000000000000000 0000000000000000 0000000100110011
        raw: ffffea0004b52920 ffffea0004b38020 ffff88015b416a80 0000000000000000
        page dumped because: kasan: bad access detected
    
        Memory state around the buggy address:
         ffff8801359da200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
         ffff8801359da280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
        >ffff8801359da300: fb fb fb fb fb fb fc fc fc fc fc fc fc fc fc fc
                                 ^
         ffff8801359da380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
         ffff8801359da400: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
        ==================================================================
        Disabling lock debugging due to kernel taint
    
    which looks like the slab containing the radixtree iter was freed as we
    traversed the tree, taking the rcu read lock across the loop should
    prevent that (deferring all the frees until the end).
    
    Reported-by: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Fixes: 96d776345277 ("drm/i915: Use a radixtree for random access to the object's backing storage")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171026130032.10677-1-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.william.auld@gmail.com>

commit 0462d9921e3dfcb022600e4db2d67e6ceab57769
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:47:48 2017 +0300

    vmur: convert urdev.ref_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable urdev.ref_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 20e5f8bfb153bdd43b5be194658f8ad814470a5d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Oct 25 10:00:43 2017 +0200

    ALSA: sb: Minor optimization / fix of timer usage in sb8_midi.c
    
    Currently the SB8 MIDI code sets up the timer object at each time
    before scheduling it at trigger callback, but basically this is
    superfluous once after set up.  Also, the code misses the
    del_timer_sync() call that may leave a race condition for
    use-after-free.
    
    This patch addresses these issues, moving timer_setup() to
    snd_sb8dsp_midi(), and adding the del_timer_sync() call at
    snd_sb8dsp_midi_output_trigger() to make sure.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 6bdd079610d3a5de0f4eb78d8015bd530c291cd7
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:37:37 2017 +0300

    dm cache: convert dm_cache_metadata.ref_count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable dm_cache_metadata.ref_count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit b0b4d7c6752a45c545bcdce647ccfa8fb27f0a06
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:37:39 2017 +0300

    dm: convert table_device.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable table_device.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit 2a0b4682e09d76466f7b8f5e347ae2ff02f033af
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:37:38 2017 +0300

    dm: convert dm_dev_internal.count from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable dm_dev_internal.count is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit tracking fixes (Maarten)
    - vgaarb improvements for fancy new platforms (aka ppc64 and arm64) by
      Bjorn Helgaas
    
    Driver Changes:
    - pile of new panel drivers: Toshiba LT089AC19000, Innolux AT043TN24
    - more sun4i work to support A10/A20 Tcon and hdmi outputs
    - vc4: fix sleep in irq handler by making it threaded (Eric)
    - udl probe/edid read fixes (Robert Tarasov)
    
    And a bunch of misc small cleanups/refactors and doc fixes all over.
    
    * tag 'drm-misc-next-2017-10-20' of git://anongit.freedesktop.org/drm/drm-misc: (32 commits)
      drm/vc4: Fix sleeps during the IRQ handler for DSI transactions.
      drm/vc4: Add the DRM_IOCTL_VC4_GEM_MADVISE ioctl
      drm/panel: simple: add Toshiba LT089AC19000
      dma-fence: remove duplicate word in comment
      drm/panel: simple: add delays for Innolux AT043TN24
      drm/panel: simple: add bus flags for Innolux AT043TN24
      drm/panel: simple: fix vertical timings for Innolux AT043TN24
      drm/atomic-helper: check that drivers call drm_crtc_vblank_off
      drm: some KMS todo ideas
      vgaarb: Factor out EFI and fallback default device selection
      vgaarb: Select a default VGA device even if there's no legacy VGA
      drm/bridge: adv7511: Fix a use after free
      drm/sun4i: Add support for A20 display pipeline components
      drm/sun4i: Add support for A10 display pipeline components
      drm/sun4i: hdmi: Support HDMI controller on A10
      drm/sun4i: tcon: Add support for A10 TCON
      drm/sun4i: backend: Support output muxing
      drm/sun4i: tcon: Move out the tcon0 common setup
      drm/sun4i: tcon: Don't rely on encoders to set the TCON mode
      drm/sun4i: tcon: Don't rely on encoders to enable the TCON
      ...

commit 08fcee289f341786eb3b44e5f2d1dc850943238e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Oct 10 18:09:49 2017 +0200

    serdev: fix registration of second slave
    
    Serdev currently only supports a single slave device, but the required
    sanity checks to prevent further registration attempts were missing.
    
    If a serial-port node has two child nodes with compatible properties,
    the OF code would try to register two slave devices using the same id
    and name. Driver core will not allow this (and there will be loud
    complaints), but the controller's slave pointer would already have been
    set to address of the soon to be deallocated second struct
    serdev_device. As the first slave device remains registered, this can
    lead to later use-after-free issues when the slave callbacks are
    accessed.
    
    Note that while the serdev registration helpers are exported, they are
    typically only called by serdev core. Any other (out-of-tree) callers
    must serialise registration and deregistration themselves.
    
    Fixes: cd6484e1830b ("serdev: Introduce new bus for serial attached devices")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Cc: Rob Herring <robh@kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e65f7ee39b4d7604a78b03ed35d723e1001fc241
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:49 2017 +0300

    drivers, connector: convert cn_callback_entry.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable cn_callback_entry.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 709c89b45b874b2f81a074b8802a736009873f48
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:48 2017 +0300

    drivers, net, ppp: convert syncppp.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable syncppp.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d780cd44e3cea119a3346e6d7c04d35b9c50d54b
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:47 2017 +0300

    drivers, net, ppp: convert ppp_file.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable ppp_file.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 313a912155c78ed87ad6fca175dc56b75fd00a58
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:46 2017 +0300

    drivers, net, ppp: convert asyncppp.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable asyncppp.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28206cdb3bc079a97d24c33b4427395f9e406fad
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:45 2017 +0300

    drivers, net: convert masces_tx_sa.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable masces_tx_sa.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8676d76f087f9b2499f056aa0c5d857cffde6806
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:44 2017 +0300

    drivers, net: convert masces_rx_sc.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable masces_rx_sc.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e187246f0f7522e306d1d156a2d5edcaf82ba840
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:43 2017 +0300

    drivers, net: convert masces_rx_sa.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable masces_rx_sa.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 956cc1e70c55ba4d5f87b9605ee727bbd225d56d
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:42 2017 +0300

    drivers, net, hamradio: convert sixpack.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable sixpack.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dd8e19456d60a519de1852ae4b1be7d62690d2e0
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:41 2017 +0300

    drivers, net, mlx5: convert fs_node.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable fs_node.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a4b51a9f83c6d359ff8fc0c66009283b6fdeeaf8
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:40 2017 +0300

    drivers, net, mlx5: convert mlx5_cq.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mlx5_cq.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 17ac99b2b8d08ed40f4525491d6eff330329a6d2
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:39 2017 +0300

    drivers, net, mlx4: convert mlx4_srq.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mlx4_srq.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0068895ff845c38e9e2b65c002c53c623379e436
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:38 2017 +0300

    drivers, net, mlx4: convert mlx4_qp.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mlx4_qp.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff61b5e3f041c2f1aa8d7c700af3007889973889
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:37 2017 +0300

    drivers, net, mlx4: convert mlx4_cq.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mlx4_cq.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c6d4e63e065e796d2f2734c1e4e13f85f1c1c5e4
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:36 2017 +0300

    drivers, net, ethernet: convert mtk_eth.dma_refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable mtk_eth.dma_refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eaf6ab76430881c30695a9195ce37d6b11b04997
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:35 2017 +0300

    drivers, net, ethernet: convert clip_entry.refcnt from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable clip_entry.refcnt is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c92e8c02fe664155ac4234516e32544bec0f113d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 20 09:04:13 2017 -0700

    tcp/dccp: fix ireq->opt races
    
    syzkaller found another bug in DCCP/TCP stacks [1]
    
    For the reasons explained in commit ce1050089c96 ("tcp/dccp: fix
    ireq->pktopts race"), we need to make sure we do not access
    ireq->opt unless we own the request sock.
    
    Note the opt field is renamed to ireq_opt to ease grep games.
    
    [1]
    BUG: KASAN: use-after-free in ip_queue_xmit+0x1687/0x18e0 net/ipv4/ip_output.c:474
    Read of size 1 at addr ffff8801c951039c by task syz-executor5/3295
    
    CPU: 1 PID: 3295 Comm: syz-executor5 Not tainted 4.14.0-rc4+ #80
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x25b/0x340 mm/kasan/report.c:409
     __asan_report_load1_noabort+0x14/0x20 mm/kasan/report.c:427
     ip_queue_xmit+0x1687/0x18e0 net/ipv4/ip_output.c:474
     tcp_transmit_skb+0x1ab7/0x3840 net/ipv4/tcp_output.c:1135
     tcp_send_ack.part.37+0x3bb/0x650 net/ipv4/tcp_output.c:3587
     tcp_send_ack+0x49/0x60 net/ipv4/tcp_output.c:3557
     __tcp_ack_snd_check+0x2c6/0x4b0 net/ipv4/tcp_input.c:5072
     tcp_ack_snd_check net/ipv4/tcp_input.c:5085 [inline]
     tcp_rcv_state_process+0x2eff/0x4850 net/ipv4/tcp_input.c:6071
     tcp_child_process+0x342/0x990 net/ipv4/tcp_minisocks.c:816
     tcp_v4_rcv+0x1827/0x2f80 net/ipv4/tcp_ipv4.c:1682
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x40c341
    RSP: 002b:00007f469523ec10 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 000000000040c341
    RDX: 0000000000000037 RSI: 0000000020004000 RDI: 0000000000000015
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 00000000000f4240 R11: 0000000000000293 R12: 00000000004b7fd1
    R13: 00000000ffffffff R14: 0000000020000000 R15: 0000000000025000
    
    Allocated by task 3295:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     __do_kmalloc mm/slab.c:3725 [inline]
     __kmalloc+0x162/0x760 mm/slab.c:3734
     kmalloc include/linux/slab.h:498 [inline]
     tcp_v4_save_options include/net/tcp.h:1962 [inline]
     tcp_v4_init_req+0x2d3/0x3e0 net/ipv4/tcp_ipv4.c:1271
     tcp_conn_request+0xf6d/0x3410 net/ipv4/tcp_input.c:6283
     tcp_v4_conn_request+0x157/0x210 net/ipv4/tcp_ipv4.c:1313
     tcp_rcv_state_process+0x8ea/0x4850 net/ipv4/tcp_input.c:5857
     tcp_v4_do_rcv+0x55c/0x7d0 net/ipv4/tcp_ipv4.c:1482
     tcp_v4_rcv+0x2d10/0x2f80 net/ipv4/tcp_ipv4.c:1711
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 3306:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kfree+0xca/0x250 mm/slab.c:3820
     inet_sock_destruct+0x59d/0x950 net/ipv4/af_inet.c:157
     __sk_destruct+0xfd/0x910 net/core/sock.c:1560
     sk_destruct+0x47/0x80 net/core/sock.c:1595
     __sk_free+0x57/0x230 net/core/sock.c:1603
     sk_free+0x2a/0x40 net/core/sock.c:1614
     sock_put include/net/sock.h:1652 [inline]
     inet_csk_complete_hashdance+0xd5/0xf0 net/ipv4/inet_connection_sock.c:959
     tcp_check_req+0xf4d/0x1620 net/ipv4/tcp_minisocks.c:765
     tcp_v4_rcv+0x17f6/0x2f80 net/ipv4/tcp_ipv4.c:1675
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_local_deliver+0x1ce/0x6e0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:464 [inline]
     ip_rcv_finish+0x887/0x19a0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:249 [inline]
     ip_rcv+0xc3f/0x1820 net/ipv4/ip_input.c:493
     __netif_receive_skb_core+0x1a3e/0x34b0 net/core/dev.c:4476
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4514
     netif_receive_skb_internal+0x10b/0x670 net/core/dev.c:4587
     netif_receive_skb+0xae/0x390 net/core/dev.c:4611
     tun_rx_batched.isra.50+0x5ed/0x860 drivers/net/tun.c:1372
     tun_get_user+0x249c/0x36d0 drivers/net/tun.c:1766
     tun_chr_write_iter+0xbf/0x160 drivers/net/tun.c:1792
     call_write_iter include/linux/fs.h:1770 [inline]
     new_sync_write fs/read_write.c:468 [inline]
     __vfs_write+0x68a/0x970 fs/read_write.c:481
     vfs_write+0x18f/0x510 fs/read_write.c:543
     SYSC_write fs/read_write.c:588 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:580
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Fixes: 079096f103fa ("tcp/dccp: install syn_recv requests into ehash table")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1cc276cec9ec574d41cf47dfc0f51406b6f26ab4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Oct 18 21:37:49 2017 +0800

    sctp: add the missing sock_owned_by_user check in sctp_icmp_redirect
    
    Now sctp processes icmp redirect packet in sctp_icmp_redirect where
    it calls sctp_transport_dst_check in which tp->dst can be released.
    
    The problem is before calling sctp_transport_dst_check, it doesn't
    check sock_owned_by_user, which means tp->dst could be freed while
    a process is accessing it with owning the socket.
    
    An use-after-free issue could be triggered by this.
    
    This patch is to fix it by checking sock_owned_by_user before calling
    sctp_transport_dst_check in sctp_icmp_redirect, so that it would not
    release tp->dst if users still hold sock lock.
    
    Besides, the same issue fixed in commit 45caeaa5ac0b ("dccp/tcp: fix
    routing redirect race") on sctp also needs this check.
    
    Fixes: 55be7a9c6074 ("ipv4: Add redirect support to all protocol icmp error handlers")
    Reported-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f04b9cc87b5fc466b1b7231ba7b078e885956c5b
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Thu Oct 19 18:10:53 2017 +0300

    nvme-rdma: Fix error status return in tagset allocation failure
    
    We should make sure to escelate allocation failures to prevent a
    use-after-free in nvmf_create_ctrl.
    
    Fixes: b28a308ee777 ("nvme-rdma: move tagset allocation to a dedicated routine")
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit df80cd9b28b9ebaa284a41df611dbf3a2d05ca74
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 17 23:26:10 2017 +0800

    sctp: do not peel off an assoc from one netns to another one
    
    Now when peeling off an association to the sock in another netns, all
    transports in this assoc are not to be rehashed and keep use the old
    key in hashtable.
    
    As a transport uses sk->net as the hash key to insert into hashtable,
    it would miss removing these transports from hashtable due to the new
    netns when closing the sock and all transports are being freeed, then
    later an use-after-free issue could be caused when looking up an asoc
    and dereferencing those transports.
    
    This is a very old issue since very beginning, ChunYu found it with
    syzkaller fuzz testing with this series:
    
      socket$inet6_sctp()
      bind$inet6()
      sendto$inet6()
      unshare(0x40000000)
      getsockopt$inet_sctp6_SCTP_GET_ASSOC_ID_LIST()
      getsockopt$inet_sctp6_SCTP_SOCKOPT_PEELOFF()
    
    This patch is to block this call when peeling one assoc off from one
    netns to another one, so that the netns of all transport would not
    go out-sync with the key in hashtable.
    
    Note that this patch didn't fix it by rehashing transports, as it's
    difficult to handle the situation when the tuple is already in use
    in the new netns. Besides, no one would like to peel off one assoc
    to another netns, considering ipaddrs, ifaces, etc. are usually
    different.
    
    Reported-by: ChunYu Wang <chunwang@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b32948690946e89c198e44f8a1252295473f348
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Oct 17 23:43:43 2017 +0300

    drm/bridge: adv7511: Fix a use after free
    
    We free "edid", then use it again on the next line.
    
    Fixes: 3b1b975003e4 ("drm: adv7511/33: add HDMI CEC support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171017204343.zctliubjkq7imudi@mwanda

commit d1aad52cf8b3f95dfe9b5b64da66343306ddf73b
Author: Jeffy Chen <jeffy.chen@rock-chips.com>
Date:   Fri Oct 6 17:45:28 2017 +0300

    xhci: Cleanup current_cmd in xhci_cleanup_command_queue()
    
    KASAN reported use-after-free bug when xhci host controller died:
    [  176.952537] BUG: KASAN: use-after-free in xhci_handle_command_timeout+0x68/0x224
    [  176.960846] Write of size 4 at addr ffffffc0cbb01608 by task kworker/3:3/1680
    ...
    [  177.180644] Freed by task 0:
    [  177.183882]  kasan_slab_free+0x90/0x15c
    [  177.188194]  kfree+0x114/0x28c
    [  177.191630]  xhci_cleanup_command_queue+0xc8/0xf8
    [  177.196916]  xhci_hc_died+0x84/0x358
    
    Problem here is that when the cmd_timer fired, it would try to access
    current_cmd while the command queue is already freed by xhci_hc_died().
    
    Cleanup current_cmd in xhci_cleanup_command_queue() to avoid that.
    
    Fixes: d9f11ba9f107 ("xhci: Rework how we handle unresponsive or hoptlug removed hosts")
    Cc: <stable@vger.kernel.org> # v4.12+
    Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87701b4b559377dd6ebc95003bd8e422a1011303
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Oct 13 21:26:20 2017 +0100

    drm/i915: Only free the oldest stale object before a fresh allocation
    
    Inspired by Tvrtko's critique of the reaping of the stale contexts
    before allocating a new one, also limit the freed object reaping to the
    oldest stale object before allocating a fresh object. Unlike contexts,
    objects may have radically different sizes of backing storage, but
    similar to contexts, while we want to prevent starvation due to
    excessive freed lists, we also do not want to delay fresh allocations
    for too long. Only freeing the oldest on the freed object list before
    each allocation is a reasonable compromise.
    
    v2: Only a single consumer of llist_del_first() is allowed (although
    multiple llist_add are still allowed in parallel). Unlike
    i915_gem_context, i915_gem_flush_free_objects() is itself not serialized
    and so we need to add our own spinlock. Otherwise KASAN eventually spots
    a use-after-free for the race on *first->next.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com> #v1
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171013202621.7276-8-chris@chris-wilson.co.uk

commit 238604ca0b708319e089e22545bcda39afb5faa8
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Mon Oct 9 10:44:01 2017 +0200

    drm/exynos: Clear drvdata after component unbind
    
    When components are unbound, DRM driver is unregistered and freed,
    so clear drvdata to avoid potential use-after-free issue in
    suspend/resume paths.
    
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit c0368e4db4a3e8a3dce40f3f621c06e14c560d79
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Oct 11 14:59:22 2017 -0700

    spi: bcm-qspi: Fix use after free in bcm_qspi_probe() in error path
    
    There was an inversion in how the error path in bcm_qspi_probe() is done
    which would make us trip over a KASAN use-after-free report. Turns out
    that qspi->dev_ids does not get allocated until later in the probe
    process. Fix this by introducing a new lable: qspi_resource_err which
    takes care of cleaning up the SPI master instance.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

commit 99fee508245825765ff60155fed43f970ff83a8f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Oct 11 16:39:02 2017 +0200

    ALSA: caiaq: Fix stray URB at probe error path
    
    caiaq driver doesn't kill the URB properly at its error path during
    the probe, which may lead to a use-after-free error later.  This patch
    addresses it.
    
    Reported-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit aec17e1e249567e82b26dafbb86de7d07fde8729
Author: Andrew Gabbasov <andrew_gabbasov@mentor.com>
Date:   Sat Sep 30 08:55:55 2017 -0700

    usb: gadget: composite: Fix use-after-free in usb_composite_overwrite_options
    
    KASAN enabled configuration reports an error
    
        BUG: KASAN: use-after-free in usb_composite_overwrite_options+...
                    [libcomposite] at addr ...
        Read of size 1 by task ...
    
    when some driver is un-bound and then bound again.
    For example, this happens with FunctionFS driver when "ffs-test"
    test application is run several times in a row.
    
    If the driver has empty manufacturer ID string in initial static data,
    it is then replaced with generated string. After driver unbinding
    the generated string is freed, but the driver data still keep that
    pointer. And if the driver is then bound again, that pointer
    is re-used for string emptiness check.
    
    The fix is to clean up the driver string data upon its unbinding
    to drop the pointer to freed memory.
    
    Fixes: cc2683c318a5 ("usb: gadget: Provide a default implementation of default manufacturer string")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 71105998845fb012937332fe2e806d443c09e026
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Oct 9 11:09:20 2017 +0200

    ALSA: seq: Fix use-after-free at creating a port
    
    There is a potential race window opened at creating and deleting a
    port via ioctl, as spotted by fuzzing.  snd_seq_create_port() creates
    a port object and returns its pointer, but it doesn't take the
    refcount, thus it can be deleted immediately by another thread.
    Meanwhile, snd_seq_ioctl_create_port() still calls the function
    snd_seq_system_client_ev_port_start() with the created port object
    that is being deleted, and this triggers use-after-free like:
    
     BUG: KASAN: use-after-free in snd_seq_ioctl_create_port+0x504/0x630 [snd_seq] at addr ffff8801f2241cb1
     =============================================================================
     BUG kmalloc-512 (Tainted: G    B          ): kasan: bad access detected
     -----------------------------------------------------------------------------
     INFO: Allocated in snd_seq_create_port+0x94/0x9b0 [snd_seq] age=1 cpu=3 pid=4511
            ___slab_alloc+0x425/0x460
            __slab_alloc+0x20/0x40
            kmem_cache_alloc_trace+0x150/0x190
            snd_seq_create_port+0x94/0x9b0 [snd_seq]
            snd_seq_ioctl_create_port+0xd1/0x630 [snd_seq]
            snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
            snd_seq_ioctl+0x40/0x80 [snd_seq]
            do_vfs_ioctl+0x54b/0xda0
            SyS_ioctl+0x79/0x90
            entry_SYSCALL_64_fastpath+0x16/0x75
     INFO: Freed in port_delete+0x136/0x1a0 [snd_seq] age=1 cpu=2 pid=4717
            __slab_free+0x204/0x310
            kfree+0x15f/0x180
            port_delete+0x136/0x1a0 [snd_seq]
            snd_seq_delete_port+0x235/0x350 [snd_seq]
            snd_seq_ioctl_delete_port+0xc8/0x180 [snd_seq]
            snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
            snd_seq_ioctl+0x40/0x80 [snd_seq]
            do_vfs_ioctl+0x54b/0xda0
            SyS_ioctl+0x79/0x90
            entry_SYSCALL_64_fastpath+0x16/0x75
     Call Trace:
      [<ffffffff81b03781>] dump_stack+0x63/0x82
      [<ffffffff81531b3b>] print_trailer+0xfb/0x160
      [<ffffffff81536db4>] object_err+0x34/0x40
      [<ffffffff815392d3>] kasan_report.part.2+0x223/0x520
      [<ffffffffa07aadf4>] ? snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]
      [<ffffffff815395fe>] __asan_report_load1_noabort+0x2e/0x30
      [<ffffffffa07aadf4>] snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]
      [<ffffffffa07aa8f0>] ? snd_seq_ioctl_delete_port+0x180/0x180 [snd_seq]
      [<ffffffff8136be50>] ? taskstats_exit+0xbc0/0xbc0
      [<ffffffffa07abc5c>] snd_seq_do_ioctl+0x11c/0x190 [snd_seq]
      [<ffffffffa07abd10>] snd_seq_ioctl+0x40/0x80 [snd_seq]
      [<ffffffff8136d433>] ? acct_account_cputime+0x63/0x80
      [<ffffffff815b515b>] do_vfs_ioctl+0x54b/0xda0
      .....
    
    We may fix this in a few different ways, and in this patch, it's fixed
    simply by taking the refcount properly at snd_seq_create_port() and
    letting the caller unref the object after use.  Also, there is another
    potential use-after-free by sprintf() call in snd_seq_create_port(),
    and this is moved inside the lock.
    
    This fix covers CVE-2017-15265.
    
    Reported-and-tested-by: Michael23 Yu <ycqzsy@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 124751d5e63c823092060074bd0abaae61aaa9c4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Oct 10 14:10:32 2017 +0200

    ALSA: usb-audio: Kill stray URB at exiting
    
    USB-audio driver may leave a stray URB for the mixer interrupt when it
    exits by some error during probe.  This leads to a use-after-free
    error as spotted by syzkaller like:
      ==================================================================
      BUG: KASAN: use-after-free in snd_usb_mixer_interrupt+0x604/0x6f0
      Call Trace:
       <IRQ>
       __dump_stack lib/dump_stack.c:16
       dump_stack+0x292/0x395 lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351
       kasan_report+0x23d/0x350 mm/kasan/report.c:409
       __asan_report_load8_noabort+0x19/0x20 mm/kasan/report.c:430
       snd_usb_mixer_interrupt+0x604/0x6f0 sound/usb/mixer.c:2490
       __usb_hcd_giveback_urb+0x2e0/0x650 drivers/usb/core/hcd.c:1779
       ....
    
      Allocated by task 1484:
       save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
       save_stack+0x43/0xd0 mm/kasan/kasan.c:447
       set_track mm/kasan/kasan.c:459
       kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
       kmem_cache_alloc_trace+0x11e/0x2d0 mm/slub.c:2772
       kmalloc ./include/linux/slab.h:493
       kzalloc ./include/linux/slab.h:666
       snd_usb_create_mixer+0x145/0x1010 sound/usb/mixer.c:2540
       create_standard_mixer_quirk+0x58/0x80 sound/usb/quirks.c:516
       snd_usb_create_quirk+0x92/0x100 sound/usb/quirks.c:560
       create_composite_quirk+0x1c4/0x3e0 sound/usb/quirks.c:59
       snd_usb_create_quirk+0x92/0x100 sound/usb/quirks.c:560
       usb_audio_probe+0x1040/0x2c10 sound/usb/card.c:618
       ....
    
      Freed by task 1484:
       save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
       save_stack+0x43/0xd0 mm/kasan/kasan.c:447
       set_track mm/kasan/kasan.c:459
       kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:524
       slab_free_hook mm/slub.c:1390
       slab_free_freelist_hook mm/slub.c:1412
       slab_free mm/slub.c:2988
       kfree+0xf6/0x2f0 mm/slub.c:3919
       snd_usb_mixer_free+0x11a/0x160 sound/usb/mixer.c:2244
       snd_usb_mixer_dev_free+0x36/0x50 sound/usb/mixer.c:2250
       __snd_device_free+0x1ff/0x380 sound/core/device.c:91
       snd_device_free_all+0x8f/0xe0 sound/core/device.c:244
       snd_card_do_free sound/core/init.c:461
       release_card_device+0x47/0x170 sound/core/init.c:181
       device_release+0x13f/0x210 drivers/base/core.c:814
       ....
    
    Actually such a URB is killed properly at disconnection when the
    device gets probed successfully, and what we need is to apply it for
    the error-path, too.
    
    In this patch, we apply snd_usb_mixer_disconnect() at releasing.
    Also introduce a new flag, disconnected, to struct usb_mixer_interface
    for not performing the disconnection procedure twice.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit fbb1fb4ad415cb31ce944f65a5ca700aaf73a227
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Oct 8 21:44:52 2017 -0700

    net: defer call to cgroup_sk_alloc()
    
    sk_clone_lock() might run while TCP/DCCP listener already vanished.
    
    In order to prevent use after free, it is better to defer cgroup_sk_alloc()
    to the point we know both parent and child exist, and from process context.
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9f1c2674b328a69ab5a9b5a1c52405795ee4163f
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Oct 8 21:44:51 2017 -0700

    net: memcontrol: defer call to mem_cgroup_sk_alloc()
    
    Instead of calling mem_cgroup_sk_alloc() from BH context,
    it is better to call it from inet_csk_accept() in process context.
    
    Not only this removes code in mem_cgroup_sk_alloc(), but it also
    fixes a bug since listener might have been dismantled and css_get()
    might cause a use-after-free.
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits have been in linux-next with no reported
    issues.

commit 299d7572e46f98534033a9e65973f13ad1ce9047
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 4 11:01:13 2017 +0200

    USB: serial: console: fix use-after-free after failed setup
    
    Make sure to reset the USB-console port pointer when console setup fails
    in order to avoid having the struct usb_serial be prematurely freed by
    the console code when the device is later disconnected.
    
    Fixes: 73e487fdb75f ("[PATCH] USB console: fix disconnection issues")
    Cc: stable <stable@vger.kernel.org>     # 2.6.18
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit bd998c2e0df0469707503023d50d46cf0b10c787
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 4 11:01:12 2017 +0200

    USB: serial: console: fix use-after-free on disconnect
    
    A clean-up patch removing two redundant NULL-checks from the console
    disconnect handler inadvertently also removed a third check. This could
    lead to the struct usb_serial being prematurely freed by the console
    code when a driver accepts but does not register any ports for an
    interface which also lacks endpoint descriptors.
    
    Fixes: 0e517c93dc02 ("USB: serial: console: clean up sanity checks")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commits build.  We've enabled DC for vega10
    and Raven.  Pre-vega10 parts can be enabled via module parameter (amdgpu.dc=1),
    but are not enabled by default at this point until we get further testing
    upstream.
    
    This code provides atomic modesetting support for DCE8 (CIK), DCE10 (Tonga,
    Fiji), DCE11 (CZ, ST, Polaris), DCE12 (vega10), and DCN1 (RV) including
    HDMI and DP audio, DP MST, and many other advanced display features.
    
    +
    
    Latest cleanups for DC from you and Harry.  Note that there is some
    flickering on some older asics with this branch due to a regression in powerplay
    that has already been fixed and will be included in my next non-DC pull request
    next week.
    
    * 'drm-next-4.15-dc' of git://people.freedesktop.org/~agd5f/linux: (897 commits)
      amdgpu/dc: use kref for dc_state.
      amdgpu/dc: convert dc_sink to kref.
      amdgpu/dc: convert dc_stream_state to kref.
      amdgpu/dc: use kref for dc_plane_state.
      amdgpu/dc: convert dc_gamma to kref reference counting.
      amdgpu/dc: convert dc_transfer to use a kref.
      amdgpu/dc: kill a bunch of dead code.
      amdgpu/dc: set a bunch of functions to static.
      amdgpu/dc: kill some deadcode in dc core.
      amdgpu/dc: fix indentation on a couple of returns.
      amdgpu/dm: don't use after free.
      amdgpu/dc: kfree already checks for NULL.
      amdgpu/dc: fix a bunch of misc whitespace.
      amdgpu/dc: drop hw_sequencer_types.h
      amdgpu/dc: drop dce110_types.h
      amdgpu/dc: use kernel ilog2 for log_2.
      amdgpu/dc: don't memset after kzalloc.
      amdgpu/dc: inline dal grph object id functions.
      amdgpu/dc: inline dml_round_to_multiple
      amdgpu/dc: rename bios get_image symbol to something more searchable.
      ...

commit ae3a27d19b59e431aea9f9d5917c1aec710ae4c3
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Oct 3 14:27:15 2017 +1000

    amdgpu/dm: don't use after free.
    
    This dereference acrtc after freeing it.
    
    Found by the kfree cocci script.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commits)
      net: 8021q: skip packets if the vlan is down
      bpf: fix bpf_tail_call() x64 JIT
      net: stmmac: dwmac-rk: Add RK3128 GMAC support
      rndis_host: support Novatel Verizon USB730L
      net: rtnetlink: fix info leak in RTM_GETSTATS call
      socket, bpf: fix possible use after free
      mlxsw: spectrum_router: Track RIF of IPIP next hops
      mlxsw: spectrum_router: Move VRF refcounting
      net: hns3: Fix an error handling path in 'hclge_rss_init_hw()'
      net: mvpp2: Fix clock resource by adding an optional bus clock
      r8152: add Linksys USB3GIGV1 id
      l2tp: fix l2tp_eth module loading
      ip_gre: erspan device should keep dst
      ip_gre: set tunnel hlen properly in erspan_tunnel_init
      ip_gre: check packet length and mtu correctly in erspan_xmit
      ip_gre: get key from session_id correctly in erspan_rcv
      tipc: use only positive error codes in messages
      ppp: fix __percpu annotation
      udp: perform source validation for mcast early demux
      IPv4: early demux can return an error code
      ...

commit eab40cf336065e8d765e006b81ff48c5c114b365
Author: Benjamin Block <bblock@linux.vnet.ibm.com>
Date:   Tue Oct 3 12:48:37 2017 +0200

    bsg-lib: fix use-after-free under memory-pressure
    
    When under memory-pressure it is possible that the mempool which backs
    the 'struct request_queue' will make use of up to BLKDEV_MIN_RQ count
    emergency buffers - in case it can't get a regular allocation. These
    buffers are preallocated and once they are also used, they are
    re-supplied with old finished requests from the same request_queue (see
    mempool_free()).
    
    The bug is, when re-supplying the emergency pool, the old requests are
    not again ran through the callback mempool_t->alloc(), and thus also not
    through the callback bsg_init_rq(). Thus we skip initialization, and
    while the sense-buffer still should be good, scsi_request->cmd might
    have become to be an invalid pointer in the meantime. When the request
    is initialized in bsg.c, and the user's CDB is larger than BLK_MAX_CDB,
    bsg will replace it with a custom allocated buffer, which is freed when
    the user's command is finished, thus it dangles afterwards. When next a
    command is sent by the user that has a smaller/similar CDB as
    BLK_MAX_CDB, bsg will assume that scsi_request->cmd is backed by
    scsi_request->__cmd, will not make a custom allocation, and write into
    undefined memory.
    
    Fix this by splitting bsg_init_rq() into two functions:
     - bsg_init_rq() is changed to only do the allocation of the
       sense-buffer, which is used to back the bsg job's reply buffer. This
       pointer should never change during the lifetime of a scsi_request, so
       it doesn't need re-initialization.
     - bsg_initialize_rq() is a new function that makes use of
       'struct request_queue's initialize_rq_fn callback (which was
       introduced in v4.12). This is always called before the request is
       given out via blk_get_request(). This function does the remaining
       initialization that was previously done in bsg_init_rq(), and will
       also do it when the request is taken from the emergency-pool of the
       backing mempool.
    
    Fixes: 50b4d485528d ("bsg-lib: fix kernel panic resulting from missing allocation of reply-buffer")
    Cc: <stable@vger.kernel.org> # 4.11+
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 512cf465ee01eb23936a9e6ed0b6414eccb00853
Author: Todd Kjos <tkjos@android.com>
Date:   Fri Sep 29 15:39:49 2017 -0700

    binder: fix use-after-free in binder_transaction()
    
    User-space normally keeps the node alive when creating a transaction
    since it has a reference to the target. The local strong ref keeps it
    alive if the sending process dies before the target process processes
    the transaction. If the source process is malicious or has a reference
    counting bug, this can fail.
    
    In this case, when we attempt to decrement the node in the failure
    path, the node has already been freed.
    
    This is fixed by taking a tmpref on the node while constructing
    the transaction. To avoid re-acquiring the node lock and inner
    proc lock to increment the proc's tmpref, a helper is used that
    does the ref increments on both the node and proc.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2315c187fa0d3ab363fdebe22718170b40473e3
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Tue Oct 3 16:15:42 2017 -0700

    exec: load_script: kill the onstack interp[BINPRM_BUF_SIZE] array
    
    Patch series "exec: binfmt_misc: fix use-after-free, kill
    iname[BINPRM_BUF_SIZE]".
    
    It looks like this code was always wrong, then commit 948b701a607f
    ("binfmt_misc: add persistent opened binary handler for containers")
    added more problems.
    
    This patch (of 6):
    
    load_script() can simply use i_name instead, it points into bprm->buf[]
    and nobody can change this memory until we call prepare_binprm().
    
    The only complication is that we need to also change the signature of
    bprm_change_interp() but this change looks good too.
    
    While at it, do whitespace/style cleanups.
    
    NOTE: the real motivation for this change is that people want to
    increase BINPRM_BUF_SIZE, we need to change load_misc_binary() too but
    this looks more complicated because afaics it is very buggy.
    
    Link: http://lkml.kernel.org/r/20170918163446.GA26793@redhat.com
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: Travis Gummels <tgummels@redhat.com>
    Cc: Ben Woodard <woodard@redhat.com>
    Cc: Jim Foraker <foraker1@llnl.gov>
    Cc: <tdhooge@llnl.gov>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 384632e67e0829deb8015ee6ad916b180049d252
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Tue Oct 3 16:15:38 2017 -0700

    userfaultfd: non-cooperative: fix fork use after free
    
    When reading the event from the uffd, we put it on a temporary
    fork_event list to detect if we can still access it after releasing and
    retaking the event_wqh.lock.
    
    If fork aborts and removes the event from the fork_event all is fine as
    long as we're still in the userfault read context and fork_event head is
    still alive.
    
    We've to put the event allocated in the fork kernel stack, back from
    fork_event list-head to the event_wqh head, before returning from
    userfaultfd_ctx_read, because the fork_event head lifetime is limited to
    the userfaultfd_ctx_read stack lifetime.
    
    Forgetting to move the event back to its event_wqh place then results in
    __remove_wait_queue(&ctx->event_wqh, &ewq->wq); in
    userfaultfd_event_wait_completion to remove it from a head that has been
    already freed from the reader stack.
    
    This could only happen if resolve_userfault_fork failed (for example if
    there are no file descriptors available to allocate the fork uffd).  If
    it succeeded it was put back correctly.
    
    Furthermore, after find_userfault_evt receives a fork event, the forked
    userfault context in fork_nctx and uwq->msg.arg.reserved.reserved1 can
    be released by the fork thread as soon as the event_wqh.lock is
    released.  Taking a reference on the fork_nctx before dropping the lock
    prevents an use after free in resolve_userfault_fork().
    
    If the fork side aborted and it already released everything, we still
    try to succeed resolve_userfault_fork(), if possible.
    
    Fixes: 893e26e61d04eac9 ("userfaultfd: non-cooperative: Add fork() event")
    Link: http://lkml.kernel.org/r/20170920180413.26713-1-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9e10b5121ad991ea6e84ca40b15a04cdc551bfe9
Author: Khazhismel Kumykov <khazhy@google.com>
Date:   Thu Jul 13 09:11:21 2017 -0700

    scsi: libiscsi: Fix use-after-free race during iscsi_session_teardown
    
    Session attributes exposed through sysfs were freed before the device
    was destroyed, resulting in a potential use-after-free. Free these
    attributes after removing the device.
    
    Signed-off-by: Khazhismel Kumykov <khazhy@google.com>
    Acked-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit eefca20eb20c66b06cf5ed09b49b1a7caaa27b7b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 2 12:20:51 2017 -0700

    socket, bpf: fix possible use after free
    
    Starting from linux-4.4, 3WHS no longer takes the listener lock.
    
    Since this time, we might hit a use-after-free in sk_filter_charge(),
    if the filter we got in the memcpy() of the listener content
    just happened to be replaced by a thread changing listener BPF filter.
    
    To fix this, we need to make sure the filter refcount is not already
    zero before incrementing it again.
    
    Fixes: e994b2f0fb92 ("tcp: do not lock listener to process SYN packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a5e597c6bb1b873e473e5f57147e9e5d2755430
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Mon Sep 18 09:27:42 2017 -0700

    HID: wacom: Always increment hdev refcount within wacom_get_hdev_data
    
    The wacom_get_hdev_data function is used to find and return a reference to
    the "other half" of a Wacom device (i.e., the touch device associated with
    a pen, or vice-versa). To ensure these references are properly accounted
    for, the function is supposed to automatically increment the refcount before
    returning. This was not done, however, for devices which have pen & touch
    on different interfaces of the same USB device. This can lead to a WARNING
    ("refcount_t: underflow; use-after-free") when removing the module or device
    as we call kref_put() more times than kref_get(). Triggering an "actual" use-
    after-free would be difficult since both devices will disappear nearly-
    simultaneously. To silence this warning and prevent the potential error, we
    need to increment the refcount for all cases within wacom_get_hdev_data.
    
    Fixes: 41372d5d40 ("HID: wacom: Augment 'oVid' and 'oPid' with heuristics for HID_GENERIC")
    Cc: <stable@vger.kernel.org> # v4.9+
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    Reviewed-by: Ping Cheng <ping.cheng@wacom.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit fa1edf3f63c05ca8eacafcd7048ed91e5360f1a8
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Sep 11 11:24:22 2017 +0200

    s390/guarded storage: fix possible memory corruption
    
    For PREEMPT enabled kernels the guarded storage (GS) code contains a
    possible use-after-free bug. If a task that makes use of GS exits, it
    will execute do_exit() while still enabled for preemption.
    
    That function will call exit_thread_runtime_instr() via exit_thread().
    If exit_thread_gs() gets preempted after the GS control block of the
    task has been freed but before the pointer to it is set to NULL, then
    save_gs_cb(), called from switch_to(), will write to already freed
    memory.
    
    Avoid this and simply disable preemption while freeing the control
    block and setting the pointer to NULL.
    
    Fixes: 916cda1aa1b4 ("s390: add a system call for guarded storage")
    Cc: <stable@vger.kernel.org> # v4.12+
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit d6e646ad7cfa7034d280459b2b2546288f247144
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Mon Sep 11 11:24:22 2017 +0200

    s390/runtime instrumention: fix possible memory corruption
    
    For PREEMPT enabled kernels the runtime instrumentation (RI) code
    contains a possible use-after-free bug. If a task that makes use of RI
    exits, it will execute do_exit() while still enabled for preemption.
    
    That function will call exit_thread_runtime_instr() via
    exit_thread(). If exit_thread_runtime_instr() gets preempted after the
    RI control block of the task has been freed but before the pointer to
    it is set to NULL, then save_ri_cb(), called from switch_to(), will
    write to already freed memory.
    
    Avoid this and simply disable preemption while freeing the control
    block and setting the pointer to NULL.
    
    Fixes: e4b8b3f33fca ("s390: add support for runtime instrumentation")
    Cc: <stable@vger.kernel.org> # v3.7+
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 38e8a5c040d3ec99a8351c688dcdf0f549611565
Author: Roi Dayan <roid@mellanox.com>
Date:   Mon Aug 21 12:04:50 2017 +0300

    net/mlx5e: IPoIB, Fix access to invalid memory address
    
    When cleaning rdma netdevice we need to save the mdev pointer
    because priv is released when we release netdev.
    
    This bug was found using the kernel address sanitizer (KASAN).
    use-after-free in mlx5_rdma_netdev_free+0xe3/0x100 [mlx5_core]
    
    Fixes: 48935bbb7ae8 ("net/mlx5e: IPoIB, Add netdevice profile skeleton")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

commit b8f42738acaddf67731c34935c0994e09a588ca7
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Tue Sep 26 06:06:28 2017 -0700

    IB/hfi1: On error, fix use after free during user context setup
    
    During base context setup, if setup_base_ctxt() fails, the context is
    deallocated. This is incorrect because the context is referenced on
    return, to notify any waiting subcontext.  If there are no subcontexts
    the pointer will be invalid.
    
    Reorganize the error path so that deallocate_ctxt() is called after all
    the possible subcontexts have been notified.
    
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit c2cc187e53011c1c4931055984657da9085c763b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Sep 25 13:19:26 2017 +0300

    sctp: Fix a big endian bug in sctp_diag_dump()
    
    The sctp_for_each_transport() function takes an pointer to int.  The
    cb->args[] array holds longs so it's only using the high 32 bits.  It
    works on little endian system but will break on big endian 64 bit
    machines.
    
    Fixes: d25adbeb0cdb ("sctp: fix an use-after-free issue in sctp_sock_dump")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36f6ee22d2d66046e369757ec6bbe1c482957ba6
Author: Alexey Kodanev <alexey.kodanev@oracle.com>
Date:   Tue Sep 26 15:14:29 2017 +0300

    vti: fix use after free in vti_tunnel_xmit/vti6_tnl_xmit
    
    When running LTP IPsec tests, KASan might report:
    
    BUG: KASAN: use-after-free in vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
    Read of size 4 at addr ffff880dc6ad1980 by task swapper/0/0
    ...
    Call Trace:
      <IRQ>
      dump_stack+0x63/0x89
      print_address_description+0x7c/0x290
      kasan_report+0x28d/0x370
      ? vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
      __asan_report_load4_noabort+0x19/0x20
      vti_tunnel_xmit+0xeee/0xff0 [ip_vti]
      ? vti_init_net+0x190/0x190 [ip_vti]
      ? save_stack_trace+0x1b/0x20
      ? save_stack+0x46/0xd0
      dev_hard_start_xmit+0x147/0x510
      ? icmp_echo.part.24+0x1f0/0x210
      __dev_queue_xmit+0x1394/0x1c60
    ...
    Freed by task 0:
      save_stack_trace+0x1b/0x20
      save_stack+0x46/0xd0
      kasan_slab_free+0x70/0xc0
      kmem_cache_free+0x81/0x1e0
      kfree_skbmem+0xb1/0xe0
      kfree_skb+0x75/0x170
      kfree_skb_list+0x3e/0x60
      __dev_queue_xmit+0x1298/0x1c60
      dev_queue_xmit+0x10/0x20
      neigh_resolve_output+0x3a8/0x740
      ip_finish_output2+0x5c0/0xe70
      ip_finish_output+0x4ba/0x680
      ip_output+0x1c1/0x3a0
      xfrm_output_resume+0xc65/0x13d0
      xfrm_output+0x1e4/0x380
      xfrm4_output_finish+0x5c/0x70
    
    Can be fixed if we get skb->len before dst_output().
    
    Fixes: b9959fd3b0fa ("vti: switch to new ip tunnel code")
    Fixes: 22e1b23dafa8 ("vti6: Support inter address family tunneling.")
    Signed-off-by: Alexey Kodanev <alexey.kodanev@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b228a94066406b6c456321d69643b0d7ce11cfa6
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Sep 22 15:39:24 2017 +0200

    l2tp: fix race between l2tp_session_delete() and l2tp_tunnel_closeall()
    
    There are several ways to remove L2TP sessions:
    
      * deleting a session explicitly using the netlink interface (with
        L2TP_CMD_SESSION_DELETE),
      * deleting the session's parent tunnel (either by closing the
        tunnel's file descriptor or using the netlink interface),
      * closing the PPPOL2TP file descriptor of a PPP pseudo-wire.
    
    In some cases, when these methods are used concurrently on the same
    session, the session can be removed twice, leading to use-after-free
    bugs.
    
    This patch adds a 'dead' flag, used by l2tp_session_delete() and
    l2tp_tunnel_closeall() to prevent them from stepping on each other's
    toes.
    
    The session deletion path used when closing a PPPOL2TP file descriptor
    doesn't need to be adapted. It already has to ensure that a session
    remains valid for the lifetime of its PPPOL2TP file descriptor.
    So it takes an extra reference on the session in the ->session_close()
    callback (pppol2tp_session_close()), which is eventually dropped
    in the ->sk_destruct() callback of the PPPOL2TP socket
    (pppol2tp_session_destruct()).
    Still, __l2tp_session_unhash() and l2tp_session_queue_purge() can be
    called twice and even concurrently for a given session, but thanks to
    proper locking and re-initialisation of list fields, this is not an
    issue.
    
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73827a605bbd7cebef4cfd1261e497246a82a0e7
Author: Parav Pandit <parav@mellanox.com>
Date:   Sun Sep 24 21:46:30 2017 +0300

    IB/core: Fix qp_sec use after free access
    
    When security_ib_alloc_security fails, qp->qp_sec memory is freed.
    However ib_destroy_qp still tries to access this memory which result
    in kernel crash. So its initialized to NULL to avoid such access.
    
    Fixes: d291f1a65232 ("IB/core: Enforce PKey security on QPs")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Daniel Jurgens <danielj@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit e5313c141b49c1b1af43d1ca81398185d66ad1a6
Author: Omar Sandoval <osandov@fb.com>
Date:   Wed Sep 20 14:24:34 2017 -0700

    loop: remove union of use_aio and ref in struct loop_cmd
    
    When the request is completed, lo_complete_rq() checks cmd->use_aio.
    However, if this is in fact an aio request, cmd->use_aio will have
    already been reused as cmd->ref by lo_rw_aio*. Fix it by not using a
    union. On x86_64, there's a hole after the union anyways, so this
    doesn't make struct loop_cmd any bigger.
    
    Fixes: 92d773324b7e ("block/loop: fix use after free")
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commits)
      inet: fix improper empty comparison
      net: use inet6_rcv_saddr to compare sockets
      net: set tb->fast_sk_family
      net: orphan frags on stand-alone ptype in dev_queue_xmit_nit
      MAINTAINERS: update git tree locations for ieee802154 subsystem
      net: prevent dst uses after free
      net: phy: Fix truncation of large IRQ numbers in phy_attached_print()
      net/smc: no close wait in case of process shut down
      net/smc: introduce a delay
      net/smc: terminate link group if out-of-sync is received
      net/smc: longer delay for client link group removal
      net/smc: adapt send request completion notification
      net/smc: adjust net_device refcount
      net/smc: take RCU read lock for routing cache lookup
      net/smc: add receive timeout check
      net/smc: add missing dev_put
      net: stmmac: Cocci spatch "of_table"
      lan78xx: Use default values loaded from EEPROM/OTP after reset
      lan78xx: Allow EEPROM write for less than MAX_EEPROM_SIZE
      lan78xx: Fix for eeprom read/write when device auto suspend
      ...

commit fd085bb1766d6a598f53af2308374a546a49775a
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Tue Sep 19 18:47:40 2017 +0300

    stm class: Fix a use-after-free
    
    For reasons unknown, the stm_source removal path uses device_destroy()
    to kill the underlying device object. Because device_destroy() uses
    devt to look for the device to destroy and the fact that stm_source
    devices don't have one (or all have the same one), it just picks the
    first device in the class, which may well be the wrong one.
    
    That is, loading stm_console and stm_heartbeat and then removing both
    will die in dereferencing a freed object.
    
    Since this should have been device_unregister() in the first place,
    use it instead of device_destroy().
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Fixes: 7bd1d4093c2 ("stm class: Introduce an abstraction for System Trace Module devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 008ba2a13f2d04c947adc536d19debb8fe66f110
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Sep 14 17:14:41 2017 -0400

    packet: hold bind lock when rebinding to fanout hook
    
    Packet socket bind operations must hold the po->bind_lock. This keeps
    po->running consistent with whether the socket is actually on a ptype
    list to receive packets.
    
    fanout_add unbinds a socket and its packet_rcv/tpacket_rcv call, then
    binds the fanout object to receive through packet_rcv_fanout.
    
    Make it hold the po->bind_lock when testing po->running and rebinding.
    Else, it can race with other rebind operations, such as that in
    packet_set_ring from packet_rcv to tpacket_rcv. Concurrent updates
    can result in a socket being added to a fanout group twice, causing
    use-after-free KASAN bug reports, among others.
    
    Reported independently by both trinity and syzkaller.
    Verified that the syzkaller reproducer passes after this patch.
    
    Fixes: dc99f600698d ("packet: Add fanout support.")
    Reported-by: nixioaming <nixiaoming@huawei.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      mlxsw: spectrum_router: Only handle IPv4 and IPv6 events
      Documentation: link in networking docs
      tcp: fix data delivery rate
      bpf/verifier: reject BPF_ALU64|BPF_END
      sctp: do not mark sk dumped when inet_sctp_diag_fill returns err
      sctp: fix an use-after-free issue in sctp_sock_dump
      netvsc: increase default receive buffer size
      tcp: update skb->skb_mstamp more carefully
      net: ipv4: fix l3slave check for index returned in IP_PKTINFO
      net: smsc911x: Quieten netif during suspend
      net: systemport: Fix 64-bit stats deadlock
      net: vrf: avoid gcc-4.6 warning
      qed: remove unnecessary call to memset
      tg3: clean up redundant initialization of tnapi
      tls: make tls_sw_free_resources static
      sctp: potential read out of bounds in sctp_ulpevent_type_enabled()
      MAINTAINERS: review Renesas DT bindings as well
      net_sched: gen_estimator: fix scaling error in bytes/packets samples
      nfp: wait for the NSP resource to appear on boot
      nfp: wait for board state before talking to the NSP
      ...

commit d25adbeb0cdb860fb39e09cdd025e9cfc954c5ab
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Sep 15 11:02:21 2017 +0800

    sctp: fix an use-after-free issue in sctp_sock_dump
    
    Commit 86fdb3448cc1 ("sctp: ensure ep is not destroyed before doing the
    dump") tried to fix an use-after-free issue by checking !sctp_sk(sk)->ep
    with holding sock and sock lock.
    
    But Paolo noticed that endpoint could be destroyed in sctp_rcv without
    sock lock protection. It means the use-after-free issue still could be
    triggered when sctp_rcv put and destroy ep after sctp_sock_dump checks
    !ep, although it's pretty hard to reproduce.
    
    I could reproduce it by mdelay in sctp_rcv while msleep in sctp_close
    and sctp_sock_dump long time.
    
    This patch is to add another param cb_done to sctp_for_each_transport
    and dump ep->assocs with holding tsp after jumping out of transport's
    traversal in it to avoid this issue.
    
    It can also improve sctp diag dump to make it run faster, as no need
    to save sk into cb->args[5] and keep calling sctp_for_each_transport
    any more.
    
    This patch is also to use int * instead of int for the pos argument
    in sctp_for_each_transport, which could make postion increment only
    in sctp_for_each_transport and no need to keep changing cb->args[2]
    in sctp_sock_filter and sctp_sock_dump any more.
    
    Fixes: 86fdb3448cc1 ("sctp: ensure ep is not destroyed before doing the dump")
    Reported-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      video/console: Update BIOS dates list for GPD win console rotation DMI quirk
      video/console: Add rotated LCD-panel DMI quirk for the VIOS LTH17
      video: fbdev: sis: fix duplicated code for different branches
      video: fbdev: make fb_var_screeninfo const
      video: fbdev: aty: do not leak uninitialized padding in clk to userspace
      vgacon: Prevent faulty bootparams.screeninfo from causing harm
      video: fbdev: make fb_videomode const
      video/console: Add new BIOS date for GPD pocket to dmi quirk table
      fbcon: remove restriction on margin color
      video: ARM CLCD: constify amba_id
      video: fm2fb: constify zorro_device_id
      video: fbdev: annotate fb_fix_screeninfo with const and __initconst
      omapfb: constify omap_video_timings structures
      video: fbdev: udlfb: Fix use after free on dlfb_usb_probe error path
      fbdev: i810: make fb_ops const
      fbdev: matrox: make fb_ops const
      video: fbdev: pxa3xx_gcu: fix error return code in pxa3xx_gcu_probe()
      video: fbdev: Enable Xilinx FB for ZynqMP
      video: fbdev: Fix multiple style issues in xilinxfb
      video: fbdev: udlfb: constify usb_device_id.
      ...

commit 255cd50f207ae8ec7b22663246c833407744e634
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Wed Sep 13 17:32:37 2017 +0200

    net: sched: fix use-after-free in tcf_action_destroy and tcf_del_walker
    
    Recent commit d7fb60b9cafb ("net_sched: get rid of tcfa_rcu") removed
    freeing in call_rcu, which changed already existing hard-to-hit
    race condition into 100% hit:
    
    [  598.599825] BUG: unable to handle kernel NULL pointer dereference at 0000000000000030
    [  598.607782] IP: tcf_action_destroy+0xc0/0x140
    
    Or:
    
    [   40.858924] BUG: unable to handle kernel NULL pointer dereference at 0000000000000030
    [   40.862840] IP: tcf_generic_walker+0x534/0x820
    
    Fix this by storing the ops and use them directly for module_put call.
    
    Fixes: a85a970af265 ("net_sched: move tc_action into tcf_common")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e2ef75445340ca7ec2c4558f84ae6c8c5d650fc8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Sep 11 16:33:31 2017 -0700

    net_sched: fix reference counting of tc filter chain
    
    This patch fixes the following ugliness of tc filter chain refcnt:
    
    a) tp proto should hold a refcnt to the chain too. This significantly
       simplifies the logic.
    
    b) Chain 0 is no longer special, it is created with refcnt=1 like any
       other chains. All the ugliness in tcf_chain_put() can be gone!
    
    c) No need to handle the flushing oddly, because block still holds
       chain 0, it can not be released, this guarantees block is the last
       user.
    
    d) The race condition with RCU callbacks is easier to handle with just
       a rcu_barrier(). Much easier to understand, nothing to hide. Thanks
       to the previous patch. Please see also the comments in code.
    
    e) Make the code understandable by humans, much less error-prone.
    
    Fixes: 744a4cf63e52 ("net: sched: fix use after free when tcf_chain_destroy is called multiple times")
    Fixes: 5bc1701881e3 ("net: sched: introduce multichain support for filters")
    Cc: Jiri Pirko <jiri@mellanox.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc27fe7e8deef2f37cba3f2be2d52b6ca5eb9d57
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Sep 12 12:41:20 2017 +0200

    ALSA: seq: Cancel pending autoload work at unbinding device
    
    ALSA sequencer core has a mechanism to load the enumerated devices
    automatically, and it's performed in an off-load work.  This seems
    causing some race when a sequencer is removed while the pending
    autoload work is running.  As syzkaller spotted, it may lead to some
    use-after-free:
      BUG: KASAN: use-after-free in snd_rawmidi_dev_seq_free+0x69/0x70
      sound/core/rawmidi.c:1617
      Write of size 8 at addr ffff88006c611d90 by task kworker/2:1/567
    
      CPU: 2 PID: 567 Comm: kworker/2:1 Not tainted 4.13.0+ #29
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Workqueue: events autoload_drivers
      Call Trace:
       __dump_stack lib/dump_stack.c:16 [inline]
       dump_stack+0x192/0x22c lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351 [inline]
       kasan_report+0x230/0x340 mm/kasan/report.c:409
       __asan_report_store8_noabort+0x1c/0x20 mm/kasan/report.c:435
       snd_rawmidi_dev_seq_free+0x69/0x70 sound/core/rawmidi.c:1617
       snd_seq_dev_release+0x4f/0x70 sound/core/seq_device.c:192
       device_release+0x13f/0x210 drivers/base/core.c:814
       kobject_cleanup lib/kobject.c:648 [inline]
       kobject_release lib/kobject.c:677 [inline]
       kref_put include/linux/kref.h:70 [inline]
       kobject_put+0x145/0x240 lib/kobject.c:694
       put_device+0x25/0x30 drivers/base/core.c:1799
       klist_devices_put+0x36/0x40 drivers/base/bus.c:827
       klist_next+0x264/0x4a0 lib/klist.c:403
       next_device drivers/base/bus.c:270 [inline]
       bus_for_each_dev+0x17e/0x210 drivers/base/bus.c:312
       autoload_drivers+0x3b/0x50 sound/core/seq_device.c:117
       process_one_work+0x9fb/0x1570 kernel/workqueue.c:2097
       worker_thread+0x1e4/0x1350 kernel/workqueue.c:2231
       kthread+0x324/0x3f0 kernel/kthread.c:231
       ret_from_fork+0x25/0x30 arch/x86/entry/entry_64.S:425
    
    The fix is simply to assure canceling the autoload work at removing
    the device.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commits)
      NFS: Count the bytes of skipped subrequests in nfs_lock_and_join_requests()
      NFS: Don't hold the group lock when calling nfs_release_request()
      NFS: Remove pnfs_generic_transfer_commit_list()
      NFS: nfs_lock_and_join_requests and nfs_scan_commit_list can deadlock
      NFS: Fix 2 use after free issues in the I/O code
      NFS: Sync the correct byte range during synchronous writes
      lockd: Delete an error message for a failed memory allocation in reclaimer()
      NFS: remove jiffies field from access cache
      NFS: flush data when locking a file to ensure cache coherence for mmap.
      SUNRPC: remove some dead code.
      NFS: don't expect errors from mempool_alloc().
      xprtrdma: Use xprt_pin_rqst in rpcrdma_reply_handler
      xprtrdma: Re-arrange struct rx_stats
      NFS: Fix NFSv2 security settings
      NFSv4.1: don't use machine credentials for CLOSE when using 'sec=sys'
      SUNRPC: ECONNREFUSED should cause a rebind.
      NFS: Remove unused parameter gfp_flags from nfs_pageio_init()
      NFSv4: Fix up mirror allocation
      SUNRPC: Add a separate spinlock to protect the RPC request receive list
      SUNRPC: Cleanup xs_tcp_read_common()
      ...

commits)
      bcache: initialize dirty stripes in flash_dev_run()
      loop: set physical block size to logical block size
      bcache: fix bch_hprint crash and improve output
      bcache: Update continue_at() documentation
      bcache: silence static checker warning
      bcache: fix for gc and write-back race
      bcache: increase the number of open buckets
      bcache: Correct return value for sysfs attach errors
      bcache: correct cache_dirty_target in __update_writeback_rate()
      bcache: gc does not work when triggering by manual command
      bcache: Don't reinvent the wheel but use existing llist API
      bcache: do not subtract sectors_to_gc for bypassed IO
      bcache: fix sequential large write IO bypass
      bcache: Fix leak of bdev reference
      block/loop: remove unused field
      block/loop: fix use after free
      bfq: Use icq_to_bic() consistently
      bfq: Suppress compiler warnings about comparisons
      bfq: Check kstrtoul() return value
      bfq: Declare local functions static
      ...

commit 109980b894e9dae66c37c3d804a415aa68b19c7e
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Sep 8 00:14:51 2017 +0200

    bpf: don't select potentially stale ri->map from buggy xdp progs
    
    We can potentially run into a couple of issues with the XDP
    bpf_redirect_map() helper. The ri->map in the per CPU storage
    can become stale in several ways, mostly due to misuse, where
    we can then trigger a use after free on the map:
    
    i) prog A is calling bpf_redirect_map(), returning XDP_REDIRECT
    and running on a driver not supporting XDP_REDIRECT yet. The
    ri->map on that CPU becomes stale when the XDP program is unloaded
    on the driver, and a prog B loaded on a different driver which
    supports XDP_REDIRECT return code. prog B would have to omit
    calling to bpf_redirect_map() and just return XDP_REDIRECT, which
    would then access the freed map in xdp_do_redirect() since not
    cleared for that CPU.
    
    ii) prog A is calling bpf_redirect_map(), returning a code other
    than XDP_REDIRECT. prog A is then detached, which triggers release
    of the map. prog B is attached which, similarly as in i), would
    just return XDP_REDIRECT without having called bpf_redirect_map()
    and thus be accessing the freed map in xdp_do_redirect() since
    not cleared for that CPU.
    
    iii) prog A is attached to generic XDP, calling the bpf_redirect_map()
    helper and returning XDP_REDIRECT. xdp_do_generic_redirect() is
    currently not handling ri->map (will be fixed by Jesper), so it's
    not being reset. Later loading a e.g. native prog B which would,
    say, call bpf_xdp_redirect() and then returns XDP_REDIRECT would
    find in xdp_do_redirect() that a map was set and uses that causing
    use after free on map access.
    
    Fix thus needs to avoid accessing stale ri->map pointers, naive
    way would be to call a BPF function from drivers that just resets
    it to NULL for all XDP return codes but XDP_REDIRECT and including
    XDP_REDIRECT for drivers not supporting it yet (and let ri->map
    being handled in xdp_do_generic_redirect()). There is a less
    intrusive way w/o letting drivers call a reset for each BPF run.
    
    The verifier knows we're calling into bpf_xdp_redirect_map()
    helper, so it can do a small insn rewrite transparent to the prog
    itself in the sense that it fills R4 with a pointer to the own
    bpf_prog. We have that pointer at verification time anyway and
    R4 is allowed to be used as per calling convention we scratch
    R0 to R5 anyway, so they become inaccessible and program cannot
    read them prior to a write. Then, the helper would store the prog
    pointer in the current CPUs struct redirect_info. Later in
    xdp_do_*_redirect() we check whether the redirect_info's prog
    pointer is the same as passed xdp_prog pointer, and if that's
    the case then all good, since the prog holds a ref on the map
    anyway, so it is always valid at that point in time and must
    have a reference count of at least 1. If in the unlikely case
    they are not equal, it means we got a stale pointer, so we clear
    and bail out right there. Also do reset map and the owning prog
    in bpf_xdp_redirect(), so that bpf_xdp_redirect_map() and
    bpf_xdp_redirect() won't get mixed up, only the last call should
    take precedence. A tc bpf_redirect() doesn't use map anywhere
    yet, so no need to clear it there since never accessed in that
    layer.
    
    Note that in case the prog is released, and thus the map as
    well we're still under RCU read critical section at that time
    and have preemption disabled as well. Once we commit with the
    __dev_map_insert_ctx() from xdp_do_redirect_map() and set the
    map to ri->map_to_flush, we still wait for a xdp_do_flush_map()
    to finish in devmap dismantle time once flush_needed bit is set,
    so that is fine.
    
    Fixes: 97f91a7cf04f ("bpf: add bpf_redirect_map helper routine")
    Reported-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 196639ebbe63a037fe9a80669140bd292d8bcd80
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Fri Sep 8 21:28:11 2017 -0400

    NFS: Fix 2 use after free issues in the I/O code
    
    The writeback code wants to send a commit after processing the pages,
    which is why we want to delay releasing the struct path until after
    that's done.
    
    Also, the layout code expects that we do not free the inode before
    we've put the layout segments in pnfs_writehdr_free() and
    pnfs_readhdr_free()
    
    Fixes: 919e3bd9a875 ("NFS: Ensure we commit after writeback is complete")
    Fixes: 4714fb51fd03 ("nfs: remove pgio_header refcount, related cleanup")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit 9405c03ee778cd3e353e55fff6e16dfdd9609c02
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Sep 8 16:17:45 2017 -0700

    ipc: convert kern_ipc_perm.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.  This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Link: http://lkml.kernel.org/r/1499417992-3238-4-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: <arozansk@redhat.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f74370b86ec1e0ee8a56ba838efe78e21d8dba23
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Sep 8 16:17:42 2017 -0700

    ipc: convert sem_undo_list.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.  This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Link: http://lkml.kernel.org/r/1499417992-3238-3-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: <arozansk@redhat.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a2e0602c36ed9fe042714694dd5a889ecd8cb556
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Sep 8 16:17:38 2017 -0700

    ipc: convert ipc_namespace.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.  This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Link: http://lkml.kernel.org/r/1499417992-3238-2-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: <arozansk@redhat.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b917c6d18c031cfce11ec35139033845f205b1d0
Author: Jan Glauber <jglauber@cavium.com>
Date:   Thu Sep 7 13:24:17 2017 +0200

    mmc: cavium: Fix use-after-free in of_platform_device_destroy
    
    KASAN reported the following:
    
    [   19.338655] ==================================================================
    [   19.345946] BUG: KASAN: use-after-free in of_platform_device_destroy+0x88/0x100
    [   19.345966] Read of size 8 at addr fffffe01aa6f1468 by task systemd-udevd/264
    
    [   19.345983] CPU: 1 PID: 264 Comm: systemd-udevd Not tainted 4.13.0-jang+ #737
    [   19.345989] Hardware name: Cavium ThunderX CN81XX board (DT)
    [   19.345995] Call trace:
    [   19.346013] [<fffffc800808b1b0>] dump_backtrace+0x0/0x368
    [   19.346026] [<fffffc800808b6bc>] show_stack+0x24/0x30
    [   19.346040] [<fffffc8008cbb944>] dump_stack+0xa4/0xc8
    [   19.346057] [<fffffc80082c2870>] print_address_description+0x68/0x258
    [   19.346070] [<fffffc80082c2d70>] kasan_report+0x238/0x2f8
    [   19.346082] [<fffffc80082c14a8>] __asan_load8+0x88/0xb8
    [   19.346098] [<fffffc8008aacee0>] of_platform_device_destroy+0x88/0x100
    [   19.346131] [<fffffc8000e02fa4>] thunder_mmc_probe+0x314/0x550 [thunderx_mmc]
    [   19.346147] [<fffffc800879d560>] pci_device_probe+0x158/0x1f8
    [   19.346162] [<fffffc800886e53c>] driver_probe_device+0x394/0x5f8
    [   19.346174] [<fffffc800886e8f4>] __driver_attach+0x154/0x158
    [   19.346185] [<fffffc800886b12c>] bus_for_each_dev+0xdc/0x140
    [   19.346196] [<fffffc800886d9f8>] driver_attach+0x38/0x48
    [   19.346207] [<fffffc800886d148>] bus_add_driver+0x290/0x3c8
    [   19.346219] [<fffffc800886fc5c>] driver_register+0xbc/0x1a0
    [   19.346232] [<fffffc800879b78c>] __pci_register_driver+0xc4/0xd8
    [   19.346260] [<fffffc8000e80024>] thunder_mmc_driver_init+0x24/0x10000 [thunderx_mmc]
    [   19.346273] [<fffffc8008083a80>] do_one_initcall+0x98/0x1c0
    [   19.346289] [<fffffc8008177b54>] do_init_module+0xe0/0x2cc
    [   19.346303] [<fffffc8008175cf0>] load_module+0x3238/0x35c0
    [   19.346318] [<fffffc8008176438>] SyS_finit_module+0x190/0x1a0
    [   19.346329] [<fffffc80080834a0>] __sys_trace_return+0x0/0x4
    
    This is caused by:
    
      platform_device_register()
       -> platform_device_unregister(to_platform_device(dev))
            freeing struct device
       -> of_node_clear_flag(dev->of_node, ...)
            writing to the freed device
    
    The issue is solved by increasing the reference count before calling
    of_platform_device_destroy() so freeing the device is postponed after
    the call.
    
    Fixes: 8fb83b142823 ("mmc: cavium: Fix probing race with regulator")
    Signed-off-by: Jan Glauber <jglauber@cavium.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit 21a01abbe32a3cbeb903378a24e504bfd9fe0648
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Mon Sep 4 12:48:37 2017 +0200

    drm/atomic: Fix freeing connector/plane state too early by tracking commits, v3.
    
    Currently we neatly track the crtc state, but forget to look at
    plane/connector state.
    
    When doing a nonblocking modeset, immediately followed by a setprop
    before the modeset completes, the setprop will see the modesets new
    state as the old state and free it.
    
    This has to be solved by waiting for hw_done on the connector, even
    if it's not assigned to a crtc. When a connector is unbound we take
    the last crtc commit, and when it stays unbound we create a new
    fake crtc commit for that gets signaled on hw_done for all the
    planes/connectors.
    
    We wait for it the same way as we do for crtc's, which will make
    sure we never run into a use-after-free situation.
    
    Changes since v1:
    - Only create a single disable commit. (danvet)
    - Fix leak in intel_legacy_cursor_update.
    Changes since v2:
    - Make reference counting in drm_atomic_helper_setup_commit
      more obvious. (pinchartl)
    - Call cleanup_done for fake commit. (danvet)
    - Add comments to drm_atomic_helper_setup_commit. (danvet, pinchartl)
    - Add comment to drm_atomic_helper_swap_state. (pinchartl)
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Testcase: kms_atomic_transition.plane-use-after-nonblocking-unbind*
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170904104838.23822-6-maarten.lankhorst@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 163bcc2c74a22c891c1906e6e343e28a70a54978
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Mon Sep 4 17:04:56 2017 +0200

    drm/atomic: Move drm_crtc_commit to drm_crtc_state, v4.
    
    Most code only cares about the current commit or previous commit.
    Fortuantely we already have a place to track those. Move it to
    drm_crtc_state where it belongs. :)
    
    The per-crtc commit_list is kept for places where we have to look
    deeper than the current or previous commit for checking whether to stall
    on unpin. This is used in drm_atomic_helper_setup_commit and
    intel_has_pending_fb_unpin.
    
    Changes since v1:
    - Update kerneldoc for drm_crtc.commit_list. (danvet)
    Changes since v2:
    - Remove drm_atomic_helper_async_check hunk. (pinchartl)
    Changes since v3:
    - Fix use-after-free in drm_atomic_helper_commit_cleanup_done().
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170904150456.31049-1-maarten.lankhorst@linux.intel.com
    [mlankhorst: preceeding -> preceding (checkpatch)]

commit 1f5ca8ec58eaa9d42a2474ecae335ead3f845ba1
Author: Markus Elfring <elfring@users.sourceforge.net>
Date:   Wed Sep 6 20:45:11 2017 +0200

    ALSA: ymfpci: Use common error handling code in snd_card_ymfpci_probe()
    
    * Add a jump target so that a bit of exception handling can be better
      reused at the end of this function.
    
      This issue was detected by using the Coccinelle software.
    
    * The script "checkpatch.pl" pointed information out like the following.
    
      ERROR: do not use assignment in if condition
    
      Thus fix a few source code places.
    
    [ This also fixed a potential use-after-free at error path of
      snd_opl3_hwdep_new(), too -- tiwai ]
    
    Signed-off-by: Markus Elfring <elfring@users.sourceforge.net>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit be82485fbcbb1cf11b13e7356231c72fdf21241c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Sep 6 11:47:12 2017 +0800

    netlink: fix an use-after-free issue for nlk groups
    
    ChunYu found a netlink use-after-free issue by syzkaller:
    
    [28448.842981] BUG: KASAN: use-after-free in __nla_put+0x37/0x40 at addr ffff8807185e2378
    [28448.969918] Call Trace:
    [...]
    [28449.117207]  __nla_put+0x37/0x40
    [28449.132027]  nla_put+0xf5/0x130
    [28449.146261]  sk_diag_fill.isra.4.constprop.5+0x5a0/0x750 [netlink_diag]
    [28449.176608]  __netlink_diag_dump+0x25a/0x700 [netlink_diag]
    [28449.202215]  netlink_diag_dump+0x176/0x240 [netlink_diag]
    [28449.226834]  netlink_dump+0x488/0xbb0
    [28449.298014]  __netlink_dump_start+0x4e8/0x760
    [28449.317924]  netlink_diag_handler_dump+0x261/0x340 [netlink_diag]
    [28449.413414]  sock_diag_rcv_msg+0x207/0x390
    [28449.432409]  netlink_rcv_skb+0x149/0x380
    [28449.467647]  sock_diag_rcv+0x2d/0x40
    [28449.484362]  netlink_unicast+0x562/0x7b0
    [28449.564790]  netlink_sendmsg+0xaa8/0xe60
    [28449.661510]  sock_sendmsg+0xcf/0x110
    [28449.865631]  __sys_sendmsg+0xf3/0x240
    [28450.000964]  SyS_sendmsg+0x32/0x50
    [28450.016969]  do_syscall_64+0x25c/0x6c0
    [28450.154439]  entry_SYSCALL64_slow_path+0x25/0x25
    
    It was caused by no protection between nlk groups' free in netlink_release
    and nlk groups' accessing in sk_diag_dump_groups. The similar issue also
    exists in netlink_seq_show().
    
    This patch is to defer nlk groups' free in deferred_put_nlk_sk.
    
    Reported-by: ChunYu Wang <chunwang@redhat.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 212925802454672e6cd2949a727f5e2c1377bf06
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Wed Sep 6 16:25:00 2017 -0700

    mm: oom: let oom_reap_task and exit_mmap run concurrently
    
    This is purely required because exit_aio() may block and exit_mmap() may
    never start, if the oom_reap_task cannot start running on a mm with
    mm_users == 0.
    
    At the same time if the OOM reaper doesn't wait at all for the memory of
    the current OOM candidate to be freed by exit_mmap->unmap_vmas, it would
    generate a spurious OOM kill.
    
    If it wasn't because of the exit_aio or similar blocking functions in
    the last mmput, it would be enough to change the oom_reap_task() in the
    case it finds mm_users == 0, to wait for a timeout or to wait for
    __mmput to set MMF_OOM_SKIP itself, but it's not just exit_mmap the
    problem here so the concurrency of exit_mmap and oom_reap_task is
    apparently warranted.
    
    It's a non standard runtime, exit_mmap() runs without mmap_sem, and
    oom_reap_task runs with the mmap_sem for reading as usual (kind of
    MADV_DONTNEED).
    
    The race between the two is solved with a combination of
    tsk_is_oom_victim() (serialized by task_lock) and MMF_OOM_SKIP
    (serialized by a dummy down_write/up_write cycle on the same lines of
    the ksm_exit method).
    
    If the oom_reap_task() may be running concurrently during exit_mmap,
    exit_mmap will wait it to finish in down_write (before taking down mm
    structures that would make the oom_reap_task fail with use after free).
    
    If exit_mmap comes first, oom_reap_task() will skip the mm if
    MMF_OOM_SKIP is already set and in turn all memory is already freed and
    furthermore the mm data structures may already have been taken down by
    free_pgtables.
    
    [aarcange@redhat.com: incremental one liner]
      Link: http://lkml.kernel.org/r/20170726164319.GC29716@redhat.com
    [rientjes@google.com: remove unused mmput_async]
      Link: http://lkml.kernel.org/r/alpine.DEB.2.10.1708141733130.50317@chino.kir.corp.google.com
    [aarcange@redhat.com: microoptimization]
      Link: http://lkml.kernel.org/r/20170817171240.GB5066@redhat.com
    Link: http://lkml.kernel.org/r/20170726162912.GA29716@redhat.com
    Fixes: 26db62f179d1 ("oom: keep mm of the killed task available")
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Signed-off-by: David Rientjes <rientjes@google.com>
    Reported-by: David Rientjes <rientjes@google.com>
    Tested-by: David Rientjes <rientjes@google.com>
    Reviewed-by: Michal Hocko <mhocko@suse.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: "Kirill A. Shutemov" <kirill@shutemov.name>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit race to send the disk a
         flush command, resulting in a small window where power fail data
         loss could occur
    
       - Simplify some rmap operations in the fcollapse code
    
       - Fix some use-after-free problems in async writeback"
    
    * tag 'xfs-4.14-merge-7' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux: (44 commits)
      xfs: use kmem_free to free return value of kmem_zalloc
      xfs: open code end_buffer_async_write in xfs_finish_page_writeback
      xfs: don't set v3 xflags for v2 inodes
      xfs: fix compiler warnings
      fsmap: fix documentation of FMR_OF_LAST
      xfs: simplify the rmap code in xfs_bmse_merge
      xfs: remove unused flags arg from xfs_file_iomap_begin_delay
      xfs: fix incorrect log_flushed on fsync
      xfs: disable per-inode DAX flag
      xfs: replace xfs_qm_get_rtblks with a direct call to xfs_bmap_count_leaves
      xfs: rewrite xfs_bmap_count_leaves using xfs_iext_get_extent
      xfs: use xfs_iext_*_extent helpers in xfs_bmap_split_extent_at
      xfs: use xfs_iext_*_extent helpers in xfs_bmap_shift_extents
      xfs: move some code around inside xfs_bmap_shift_extents
      xfs: use xfs_iext_get_extent in xfs_bmap_first_unused
      xfs: switch xfs_bmap_local_to_extents to use xfs_iext_insert
      xfs: add a xfs_iext_update_extent helper
      xfs: consolidate the various page fault handlers
      iomap: return VM_FAULT_* codes from iomap_page_mkwrite
      xfs: relog dirty buffers during swapext bmbt owner change
      ...

commit a607f51e5a4c421e2097077db88105402099c528
Author: Sean Young <sean@mess.org>
Date:   Fri Aug 4 10:12:03 2017 -0400

    media: Revert "[media] lirc_dev: remove superfluous get/put_device() calls"
    
    This reverts commit 5be2b76a9ca4ea5fd3e221114d62eeb0d78267ca.
    
    Only when the lirc device is freed, should we drop our reference to
    rc_dev, else we the rc_dev is freed to early. If userspace has
    a file descriptor open during unplug, it goes bang.
    
    ==================================================================
    BUG: KASAN: use-after-free in __lock_acquire+0x7bb/0x1e10
    Read of size 8 at addr ffff8801d7d61ed0 by task ir-rec/2609
    
    -snip-
     mutex_lock_nested+0x1b/0x20
     ? mutex_lock_nested+0x1b/0x20
     rc_close.part.6+0x20/0x60 [rc_core]
     rc_close+0x13/0x20 [rc_core]
     lirc_dev_fop_close+0x62/0xd0 [lirc_dev]
     __fput+0x236/0x410
     ? fput+0xb0/0xb0
     ? do_raw_spin_trylock+0x110/0x110
     ? set_rq_offline.part.70+0xa0/0xa0
     ____fput+0xe/0x10
     task_work_run+0x116/0x180
     ? task_work_cancel+0x170/0x170
     ? _raw_spin_unlock+0x27/0x40
     ? switch_task_namespaces+0x5f/0x90
     do_exit+0x68b/0xe80
    
    Cc: stable@vger.kernel.org # For Kernel 4.13
    Fixes: 5be2b76a9ca4 ("[media] lirc_dev: remove superfluous get/put_device() calls")
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit c1d1b437816f0afa99202be3cb650c9d174667bc
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 31 16:48:22 2017 -0700

    net: convert (struct ubuf_info)->refcnt to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    v2: added the change in drivers/vhost/net.c as spotted
    by Willem.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 138e4ad67afd5c6c318b056b4d17c17f2c0ca5c0
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Fri Sep 1 18:55:33 2017 +0200

    epoll: fix race between ep_poll_callback(POLLFREE) and ep_free()/ep_remove()
    
    The race was introduced by me in commit 971316f0503a ("epoll:
    ep_unregister_pollwait() can use the freed pwq->whead").  I did not
    realize that nothing can protect eventpoll after ep_poll_callback() sets
    ->whead = NULL, only whead->lock can save us from the race with
    ep_free() or ep_remove().
    
    Move ->whead = NULL to the end of ep_poll_callback() and add the
    necessary barriers.
    
    TODO: cleanup the ewake/EPOLLEXCLUSIVE logic, it was confusing even
    before this patch.
    
    Hopefully this explains use-after-free reported by syzcaller:
    
            BUG: KASAN: use-after-free in debug_spin_lock_before
            ...
             _raw_spin_lock_irqsave+0x4a/0x60 kernel/locking/spinlock.c:159
             ep_poll_callback+0x29f/0xff0 fs/eventpoll.c:1148
    
    this is spin_lock(eventpoll->lock),
    
            ...
            Freed by task 17774:
            ...
             kfree+0xe8/0x2c0 mm/slub.c:3883
             ep_free+0x22c/0x2a0 fs/eventpoll.c:865
    
    Fixes: 971316f0503a ("epoll: ep_unregister_pollwait() can use the freed pwq->whead")
    Reported-by: 范龙飞 <long7573@126.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 92d773324b7edbd36bf0c28c1e0157763aeccc92
Author: Shaohua Li <shli@fb.com>
Date:   Fri Sep 1 11:15:17 2017 -0700

    block/loop: fix use after free
    
    lo_rw_aio->call_read_iter->
    1       aops->direct_IO
    2       iov_iter_revert
    lo_rw_aio_complete could happen between 1 and 2, the bio and bvec could
    be freed before 2, which accesses bvec.
    
    Signed-off-by: Shaohua Li <shli@fb.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 355627f518978b5167256d27492fe0b343aaf2f2
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Aug 31 16:15:26 2017 -0700

    mm, uprobes: fix multiple free of ->uprobes_state.xol_area
    
    Commit 7c051267931a ("mm, fork: make dup_mmap wait for mmap_sem for
    write killable") made it possible to kill a forking task while it is
    waiting to acquire its ->mmap_sem for write, in dup_mmap().
    
    However, it was overlooked that this introduced an new error path before
    the new mm_struct's ->uprobes_state.xol_area has been set to NULL after
    being copied from the old mm_struct by the memcpy in dup_mm().  For a
    task that has previously hit a uprobe tracepoint, this resulted in the
    'struct xol_area' being freed multiple times if the task was killed at
    just the right time while forking.
    
    Fix it by setting ->uprobes_state.xol_area to NULL in mm_init() rather
    than in uprobe_dup_mmap().
    
    With CONFIG_UPROBE_EVENTS=y, the bug can be reproduced by the same C
    program given by commit 2b7e8665b4ff ("fork: fix incorrect fput of
    ->exe_file causing use-after-free"), provided that a uprobe tracepoint
    has been set on the fork_thread() function.  For example:
    
        $ gcc reproducer.c -o reproducer -lpthread
        $ nm reproducer | grep fork_thread
        0000000000400719 t fork_thread
        $ echo "p $PWD/reproducer:0x719" > /sys/kernel/debug/tracing/uprobe_events
        $ echo 1 > /sys/kernel/debug/tracing/events/uprobes/enable
        $ ./reproducer
    
    Here is the use-after-free reported by KASAN:
    
        BUG: KASAN: use-after-free in uprobe_clear_state+0x1c4/0x200
        Read of size 8 at addr ffff8800320a8b88 by task reproducer/198
    
        CPU: 1 PID: 198 Comm: reproducer Not tainted 4.13.0-rc7-00015-g36fde05f3fb5 #255
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-20170228_101828-anatol 04/01/2014
        Call Trace:
         dump_stack+0xdb/0x185
         print_address_description+0x7e/0x290
         kasan_report+0x23b/0x350
         __asan_report_load8_noabort+0x19/0x20
         uprobe_clear_state+0x1c4/0x200
         mmput+0xd6/0x360
         do_exit+0x740/0x1670
         do_group_exit+0x13f/0x380
         get_signal+0x597/0x17d0
         do_signal+0x99/0x1df0
         exit_to_usermode_loop+0x166/0x1e0
         syscall_return_slowpath+0x258/0x2c0
         entry_SYSCALL_64_fastpath+0xbc/0xbe
    
        ...
    
        Allocated by task 199:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xfc/0x180
         kmem_cache_alloc_trace+0xf3/0x330
         __create_xol_area+0x10f/0x780
         uprobe_notify_resume+0x1674/0x2210
         exit_to_usermode_loop+0x150/0x1e0
         prepare_exit_to_usermode+0x14b/0x180
         retint_user+0x8/0x20
    
        Freed by task 199:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xa8/0x1a0
         kfree+0xba/0x210
         uprobe_clear_state+0x151/0x200
         mmput+0xd6/0x360
         copy_process.part.8+0x605f/0x65d0
         _do_fork+0x1a5/0xbd0
         SyS_clone+0x19/0x20
         do_syscall_64+0x22f/0x660
         return_from_SYSCALL_64+0x0/0x7a
    
    Note: without KASAN, you may instead see a "Bad page state" message, or
    simply a general protection fault.
    
    Link: http://lkml.kernel.org/r/20170830033303.17927-1-ebiggers3@gmail.com
    Fixes: 7c051267931a ("mm, fork: make dup_mmap wait for mmap_sem for write killable")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reported-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>    [4.7+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1502efd2d5960c11593c5f002278cdc1e14c4520
Author: Daniel Scheller <d.scheller@gmx.net>
Date:   Wed Aug 23 12:09:59 2017 -0400

    media: ddbridge: fix teardown/deregistration order in ddb_input_detach()
    
    Brought to attention by Matthias Schwarzott <zzam@gentoo.org> by fixing
    possible use-after-free faults in some demod drivers:
    
    In ddb_input_detach(), the i2c_client is unregistered and removed before
    dvb frontends are unregistered and detached. While no use-after-free issue
    was observed so far, there is another issue with this:
    
    dvb->attached keeps track of the state of the input/output registration,
    and the i2c_client unregistration takes place only if everything was
    successful (dvb->attached == 0x31). If for some reason an error occurred
    during the frontend setup, that value stays at 0x20. In the following
    error handling and cleanup, ddb_input_detach() will skip down to that
    state, leaving the i2c_client registered, causing refcount issues.
    
    Fix this by moving the i2c_client deregistration down to case 0x20.
    
    Cc: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Daniel Scheller <d.scheller@gmx.net>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit e59eb4adf0d79fe7692c08c07445ec9efc8ddc1c
Author: Matthias Schwarzott <zzam@gentoo.org>
Date:   Wed Aug 2 12:46:00 2017 -0400

    media: cx231xx: fix use-after-free when unregistering the i2c_client for the dvb demod
    
    Calling i2c_unregister_device for a demod driver destroys the frontend object.
    Later it is accessed by calling dvb_unregister_frontend and
    dvb_frontend_detach.
    
    In some cases this leads to a general protection fault with this
    callstack:
    
      dvb_unregister_frontend+0x25/0x50 [dvb_core]
      dvb_fini+0xdb/0x160 [cx231xx_dvb]
      cx231xx_unregister_extension+0x3d/0xb0 [cx231xx]
      cx231xx_dvb_unregister+0x10/0x809 [cx231xx_dvb]
      SyS_delete_module+0x18a/0x240
      ? exit_to_usermode_loop+0x7b/0x80
      entry_SYSCALL_64_fastpath+0x17/0x98
    
    Signed-off-by: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 412b16d623cf4fd794713f314db5aad10c46ad87
Author: Matthias Schwarzott <zzam@gentoo.org>
Date:   Wed Aug 2 12:45:59 2017 -0400

    media: cx23885: Fix use-after-free when unregistering the i2c_client for the dvb demod
    
    Unregistering the i2c_client of the demod driver destroys the frontend
    object.
    Calling vb2_dvb_unregister_bus later accesses the frontend (and with the
    refcount_t) conversion the refcount_t code complains:
    
    kernel: ------------[ cut here ]------------
    kernel: WARNING: CPU: 0 PID: 7883 at lib/refcount.c:128 refcount_sub_and_test+0x70/0x80
    kernel: refcount_t: underflow; use-after-free.
    kernel: Modules linked in: bluetooth si2165(O) a8293(O) tda10071(O) tea5767(O) tuner(O) cx23885(O-) tda18271(O) videobuf2_dvb(O) videobuf2_dma_sg(O) m88ds3103(O) tveeprom(O) cx2341x(O) v4l2_common(O) dvb_core(O) rc_core(O) videobuf2_memops(O) videobuf2_v4l2(O) ums_realtek videobuf2_core(O) uas videodev(O) media(O) rtl8192cu i2c_mux usb_storage rtl_usb rtl8192c_common rtlwifi snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core x86_pkg_temp_thermal kvm_intel kvm irqbypass
    kernel: CPU: 0 PID: 7883 Comm: rmmod Tainted: G        W  O    4.11.3-gentoo #3
    kernel: Hardware name: MEDION E2050 2391/H81H3-EM2, BIOS H81EM2W08.308 08/25/2014
    kernel: Call Trace:
    kernel:  dump_stack+0x4d/0x66
    kernel:  __warn+0xc6/0xe0
    kernel:  warn_slowpath_fmt+0x46/0x50
    kernel:  ? kobject_put+0x2f/0x60
    kernel:  refcount_sub_and_test+0x70/0x80
    kernel:  refcount_dec_and_test+0x11/0x20
    kernel:  dvb_unregister_frontend+0x42/0x60 [dvb_core]
    kernel:  vb2_dvb_dealloc_frontends+0x9e/0x100 [videobuf2_dvb]
    kernel:  vb2_dvb_unregister_bus+0xd/0x20 [videobuf2_dvb]
    kernel:  cx23885_dvb_unregister+0xc3/0x110 [cx23885]
    kernel:  cx23885_dev_unregister+0xea/0x150 [cx23885]
    kernel:  cx23885_finidev+0x4f/0x70 [cx23885]
    kernel:  pci_device_remove+0x34/0xb0
    kernel:  device_release_driver_internal+0x150/0x200
    kernel:  driver_detach+0x33/0x70
    kernel:  bus_remove_driver+0x47/0xa0
    kernel:  driver_unregister+0x27/0x50
    kernel:  pci_unregister_driver+0x34/0x90
    kernel:  cx23885_fini+0x10/0x12 [cx23885]
    kernel:  SyS_delete_module+0x166/0x220
    kernel:  ? exit_to_usermode_loop+0x7b/0x80
    kernel:  entry_SYSCALL_64_fastpath+0x17/0x98
    kernel: RIP: 0033:0x7f5901680b07
    kernel: RSP: 002b:00007ffdf6cdb028 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    kernel: RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007f5901680b07
    kernel: RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000000001500258
    kernel: RBP: 00000000015001f0 R08: 0000000000000000 R09: 1999999999999999
    kernel: R10: 0000000000000884 R11: 0000000000000206 R12: 00007ffdf6cda010
    kernel: R13: 0000000000000000 R14: 00000000015001f0 R15: 00000000014ff010
    kernel: ---[ end trace c3a4659b89086061 ]---
    
    Signed-off-by: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 14546ba1e5653e5dd00d113e98bd21b5b235192b
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Thu Aug 24 16:51:28 2017 -0700

    net_sched: introduce tclass_del_notify()
    
    Like for TC actions, ->delete() is a special case,
    we have to prepare and fill the notification before delete
    otherwise would get use-after-free after we remove the
    reference count.
    
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ebfa00c5745660fe7f0a91eea88d4dff658486c4
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Aug 25 13:10:12 2017 +0200

    tcp: fix refcnt leak with ebpf congestion control
    
    There are a few bugs around refcnt handling in the new BPF congestion
    control setsockopt:
    
     - The new ca is assigned to icsk->icsk_ca_ops even in the case where we
       cannot get a reference on it. This would lead to a use after free,
       since that ca is going away soon.
    
     - Changing the congestion control case doesn't release the refcnt on
       the previous ca.
    
     - In the reinit case, we first leak a reference on the old ca, then we
       call tcp_reinit_congestion_control on the ca that we have just
       assigned, leading to deinitializing the wrong ca (->release of the
       new ca on the old ca's data) and releasing the refcount on the ca
       that we actually want to use.
    
    This is visible by building (for example) BIC as a module and setting
    net.ipv4.tcp_congestion_control=bic, and using tcp_cong_kern.c from
    samples/bpf.
    
    This patch fixes the refcount issues, and moves reinit back into tcp
    core to avoid passing a ca pointer back to BPF.
    
    Fixes: 91b5b21c7c16 ("bpf: Add support for changing congestion control")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Acked-by: Lawrence Brakmo <brakmo@fb.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2b7e8665b4ff51c034c55df3cff76518d1a9ee3a
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Aug 25 15:55:43 2017 -0700

    fork: fix incorrect fput of ->exe_file causing use-after-free
    
    Commit 7c051267931a ("mm, fork: make dup_mmap wait for mmap_sem for
    write killable") made it possible to kill a forking task while it is
    waiting to acquire its ->mmap_sem for write, in dup_mmap().
    
    However, it was overlooked that this introduced an new error path before
    a reference is taken on the mm_struct's ->exe_file.  Since the
    ->exe_file of the new mm_struct was already set to the old ->exe_file by
    the memcpy() in dup_mm(), it was possible for the mmput() in the error
    path of dup_mm() to drop a reference to ->exe_file which was never
    taken.
    
    This caused the struct file to later be freed prematurely.
    
    Fix it by updating mm_init() to NULL out the ->exe_file, in the same
    place it clears other things like the list of mmaps.
    
    This bug was found by syzkaller.  It can be reproduced using the
    following C program:
    
        #define _GNU_SOURCE
        #include <pthread.h>
        #include <stdlib.h>
        #include <sys/mman.h>
        #include <sys/syscall.h>
        #include <sys/wait.h>
        #include <unistd.h>
    
        static void *mmap_thread(void *_arg)
        {
            for (;;) {
                mmap(NULL, 0x1000000, PROT_READ,
                     MAP_POPULATE|MAP_ANONYMOUS|MAP_PRIVATE, -1, 0);
            }
        }
    
        static void *fork_thread(void *_arg)
        {
            usleep(rand() % 10000);
            fork();
        }
    
        int main(void)
        {
            fork();
            fork();
            fork();
            for (;;) {
                if (fork() == 0) {
                    pthread_t t;
    
                    pthread_create(&t, NULL, mmap_thread, NULL);
                    pthread_create(&t, NULL, fork_thread, NULL);
                    usleep(rand() % 10000);
                    syscall(__NR_exit_group, 0);
                }
                wait(NULL);
            }
        }
    
    No special kernel config options are needed.  It usually causes a NULL
    pointer dereference in __remove_shared_vm_struct() during exit, or in
    dup_mmap() (which is usually inlined into copy_process()) during fork.
    Both are due to a vm_area_struct's ->vm_file being used after it's
    already been freed.
    
    Google Bug Id: 64772007
    
    Link: http://lkml.kernel.org/r/20170823211408.31198-1-ebiggers3@gmail.com
    Fixes: 7c051267931a ("mm, fork: make dup_mmap wait for mmap_sem for write killable")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: <stable@vger.kernel.org>    [v4.7+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ccd5b3235180eef3cfec337df1c8554ab151b5cc
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Aug 24 10:50:29 2017 -0700

    x86/mm: Fix use-after-free of ldt_struct
    
    The following commit:
    
      39a0526fb3f7 ("x86/mm: Factor out LDT init from context init")
    
    renamed init_new_context() to init_new_context_ldt() and added a new
    init_new_context() which calls init_new_context_ldt().  However, the
    error code of init_new_context_ldt() was ignored.  Consequently, if a
    memory allocation in alloc_ldt_struct() failed during a fork(), the
    ->context.ldt of the new task remained the same as that of the old task
    (due to the memcpy() in dup_mm()).  ldt_struct's are not intended to be
    shared, so a use-after-free occurred after one task exited.
    
    Fix the bug by making init_new_context() pass through the error code of
    init_new_context_ldt().
    
    This bug was found by syzkaller, which encountered the following splat:
    
        BUG: KASAN: use-after-free in free_ldt_struct.part.2+0x10a/0x150 arch/x86/kernel/ldt.c:116
        Read of size 4 at addr ffff88006d2cb7c8 by task kworker/u9:0/3710
    
        CPU: 1 PID: 3710 Comm: kworker/u9:0 Not tainted 4.13.0-rc4-next-20170811 #2
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
        Call Trace:
         __dump_stack lib/dump_stack.c:16 [inline]
         dump_stack+0x194/0x257 lib/dump_stack.c:52
         print_address_description+0x73/0x250 mm/kasan/report.c:252
         kasan_report_error mm/kasan/report.c:351 [inline]
         kasan_report+0x24e/0x340 mm/kasan/report.c:409
         __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:429
         free_ldt_struct.part.2+0x10a/0x150 arch/x86/kernel/ldt.c:116
         free_ldt_struct arch/x86/kernel/ldt.c:173 [inline]
         destroy_context_ldt+0x60/0x80 arch/x86/kernel/ldt.c:171
         destroy_context arch/x86/include/asm/mmu_context.h:157 [inline]
         __mmdrop+0xe9/0x530 kernel/fork.c:889
         mmdrop include/linux/sched/mm.h:42 [inline]
         exec_mmap fs/exec.c:1061 [inline]
         flush_old_exec+0x173c/0x1ff0 fs/exec.c:1291
         load_elf_binary+0x81f/0x4ba0 fs/binfmt_elf.c:855
         search_binary_handler+0x142/0x6b0 fs/exec.c:1652
         exec_binprm fs/exec.c:1694 [inline]
         do_execveat_common.isra.33+0x1746/0x22e0 fs/exec.c:1816
         do_execve+0x31/0x40 fs/exec.c:1860
         call_usermodehelper_exec_async+0x457/0x8f0 kernel/umh.c:100
         ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
        Allocated by task 3700:
         save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
         save_stack+0x43/0xd0 mm/kasan/kasan.c:447
         set_track mm/kasan/kasan.c:459 [inline]
         kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
         kmem_cache_alloc_trace+0x136/0x750 mm/slab.c:3627
         kmalloc include/linux/slab.h:493 [inline]
         alloc_ldt_struct+0x52/0x140 arch/x86/kernel/ldt.c:67
         write_ldt+0x7b7/0xab0 arch/x86/kernel/ldt.c:277
         sys_modify_ldt+0x1ef/0x240 arch/x86/kernel/ldt.c:307
         entry_SYSCALL_64_fastpath+0x1f/0xbe
    
        Freed by task 3700:
         save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
         save_stack+0x43/0xd0 mm/kasan/kasan.c:447
         set_track mm/kasan/kasan.c:459 [inline]
         kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
         __cache_free mm/slab.c:3503 [inline]
         kfree+0xca/0x250 mm/slab.c:3820
         free_ldt_struct.part.2+0xdd/0x150 arch/x86/kernel/ldt.c:121
         free_ldt_struct arch/x86/kernel/ldt.c:173 [inline]
         destroy_context_ldt+0x60/0x80 arch/x86/kernel/ldt.c:171
         destroy_context arch/x86/include/asm/mmu_context.h:157 [inline]
         __mmdrop+0xe9/0x530 kernel/fork.c:889
         mmdrop include/linux/sched/mm.h:42 [inline]
         __mmput kernel/fork.c:916 [inline]
         mmput+0x541/0x6e0 kernel/fork.c:927
         copy_process.part.36+0x22e1/0x4af0 kernel/fork.c:1931
         copy_process kernel/fork.c:1546 [inline]
         _do_fork+0x1ef/0xfb0 kernel/fork.c:2025
         SYSC_clone kernel/fork.c:2135 [inline]
         SyS_clone+0x37/0x50 kernel/fork.c:2129
         do_syscall_64+0x26c/0x8c0 arch/x86/entry/common.c:287
         return_from_SYSCALL_64+0x0/0x7a
    
    Here is a C reproducer:
    
        #include <asm/ldt.h>
        #include <pthread.h>
        #include <signal.h>
        #include <stdlib.h>
        #include <sys/syscall.h>
        #include <sys/wait.h>
        #include <unistd.h>
    
        static void *fork_thread(void *_arg)
        {
            fork();
        }
    
        int main(void)
        {
            struct user_desc desc = { .entry_number = 8191 };
    
            syscall(__NR_modify_ldt, 1, &desc, sizeof(desc));
    
            for (;;) {
                if (fork() == 0) {
                    pthread_t t;
    
                    srand(getpid());
                    pthread_create(&t, NULL, fork_thread, NULL);
                    usleep(rand() % 10000);
                    syscall(__NR_exit_group, 0);
                }
                wait(NULL);
            }
        }
    
    Note: the reproducer takes advantage of the fact that alloc_ldt_struct()
    may use vmalloc() to allocate a large ->entries array, and after
    commit:
    
      5d17a73a2ebe ("vmalloc: back off when the current task is killed")
    
    it is possible for userspace to fail a task's vmalloc() by
    sending a fatal signal, e.g. via exit_group().  It would be more
    difficult to reproduce this bug on kernels without that commit.
    
    This bug only affected kernels with CONFIG_MODIFY_LDT_SYSCALL=y.
    
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: <stable@vger.kernel.org> [v4.6+]
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Fixes: 39a0526fb3f7 ("x86/mm: Factor out LDT init from context init")
    Link: http://lkml.kernel.org/r/20170824175029.76040-1-ebiggers3@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 551143d8d954fe398324a5caa276f518466c428b
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 24 21:12:28 2017 -0700

    net_sched: fix a refcount_t issue with noop_qdisc
    
    syzkaller reported a refcount_t warning [1]
    
    Issue here is that noop_qdisc refcnt was never really considered as
    a true refcount, since qdisc_destroy() found TCQ_F_BUILTIN set :
    
    if (qdisc->flags & TCQ_F_BUILTIN ||
        !refcount_dec_and_test(&qdisc->refcnt)))
            return;
    
    Meaning that all atomic_inc() we did on noop_qdisc.refcnt were not
    really needed, but harmless until refcount_t came.
    
    To fix this problem, we simply need to not increment noop_qdisc.refcnt,
    since we never decrement it.
    
    [1]
    refcount_t: increment on 0; use-after-free.
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 21754 at lib/refcount.c:152 refcount_inc+0x47/0x50 lib/refcount.c:152
    Kernel panic - not syncing: panic_on_warn set ...
    
    CPU: 0 PID: 21754 Comm: syz-executor7 Not tainted 4.13.0-rc6+ #20
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     panic+0x1e4/0x417 kernel/panic.c:180
     __warn+0x1c4/0x1d9 kernel/panic.c:541
     report_bug+0x211/0x2d0 lib/bug.c:183
     fixup_bug+0x40/0x90 arch/x86/kernel/traps.c:190
     do_trap_no_signal arch/x86/kernel/traps.c:224 [inline]
     do_trap+0x260/0x390 arch/x86/kernel/traps.c:273
     do_error_trap+0x120/0x390 arch/x86/kernel/traps.c:310
     do_invalid_op+0x1b/0x20 arch/x86/kernel/traps.c:323
     invalid_op+0x1e/0x30 arch/x86/entry/entry_64.S:846
    RIP: 0010:refcount_inc+0x47/0x50 lib/refcount.c:152
    RSP: 0018:ffff8801c43477a0 EFLAGS: 00010282
    RAX: 000000000000002b RBX: ffffffff86093c14 RCX: 0000000000000000
    RDX: 000000000000002b RSI: ffffffff8159314e RDI: ffffed0038868ee8
    RBP: ffff8801c43477a8 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: ffffffff86093ac0
    R13: 0000000000000001 R14: ffff8801d0f3bac0 R15: dffffc0000000000
     attach_default_qdiscs net/sched/sch_generic.c:792 [inline]
     dev_activate+0x7d3/0xaa0 net/sched/sch_generic.c:833
     __dev_open+0x227/0x330 net/core/dev.c:1380
     __dev_change_flags+0x695/0x990 net/core/dev.c:6726
     dev_change_flags+0x88/0x140 net/core/dev.c:6792
     dev_ifsioc+0x5a6/0x930 net/core/dev_ioctl.c:256
     dev_ioctl+0x2bc/0xf90 net/core/dev_ioctl.c:554
     sock_do_ioctl+0x94/0xb0 net/socket.c:968
     sock_ioctl+0x2c2/0x440 net/socket.c:1058
     vfs_ioctl fs/ioctl.c:45 [inline]
     do_vfs_ioctl+0x1b1/0x1520 fs/ioctl.c:685
     SYSC_ioctl fs/ioctl.c:700 [inline]
     SyS_ioctl+0x8f/0xc0 fs/ioctl.c:691
    
    Fixes: 7b9364050246 ("net, sched: convert Qdisc.refcnt from atomic_t to refcount_t")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Reshetova, Elena <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 744a4cf63e528c29840f45811d6fb93fd129b87d
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Aug 22 22:46:49 2017 +0200

    net: sched: fix use after free when tcf_chain_destroy is called multiple times
    
    The goto_chain termination action takes a reference of a chain. In that
    case, there is an issue when block_put is called tcf_chain_destroy
    directly. The follo-up call of tcf_chain_put by goto_chain action free
    works with memory that is already freed. This was caught by kasan:
    
    [  220.337908] BUG: KASAN: use-after-free in tcf_chain_put+0x1b/0x50
    [  220.344103] Read of size 4 at addr ffff88036d1f2cec by task systemd-journal/261
    [  220.353047] CPU: 0 PID: 261 Comm: systemd-journal Not tainted 4.13.0-rc5jiri+ #54
    [  220.360661] Hardware name: Mellanox Technologies Ltd. Mellanox switch/Mellanox x86 mezzanine board, BIOS 4.6.5 08/02/2016
    [  220.371784] Call Trace:
    [  220.374290]  <IRQ>
    [  220.376355]  dump_stack+0xd5/0x150
    [  220.391485]  print_address_description+0x86/0x410
    [  220.396308]  kasan_report+0x181/0x4c0
    [  220.415211]  tcf_chain_put+0x1b/0x50
    [  220.418949]  free_tcf+0x95/0xc0
    
    So allow tcf_chain_destroy to be called multiple times, free only in
    case the reference count drops to 0.
    
    Fixes: 5bc1701881e3 ("net: sched: introduce multichain support for filters")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      ipv6: repair fib6 tree in failure case
      net_sched: fix order of queue length updates in qdisc_replace()
      tools lib bpf: improve warning
      switchdev: documentation: minor typo fixes
      bpf, doc: also add s390x as arch to sysctl description
      net: sched: fix NULL pointer dereference when action calls some targets
      rxrpc: Fix oops when discarding a preallocated service call
      irda: do not leak initialized list.dev to userspace
      net/mlx4_core: Enable 4K UAR if SRIOV module parameter is not enabled
      PCI: Allow PCI express root ports to find themselves
      tcp: when rearming RTO, if RTO time is in past then fire RTO ASAP
      net: check and errout if res->fi is NULL when RTM_F_FIB_MATCH is set
      ipv6: reset fn->rr_ptr when replacing route
      sctp: fully initialize the IPv6 address in sctp_v6_to_addr()
      tipc: fix use-after-free
      tun: handle register_netdevice() failures properly
      datagram: When peeking datagrams with offset < 0 don't skip empty skbs
      bpf, doc: improve sysctl knob description
      netxen: fix incorrect loop counter decrement
      nfp: fix infinite loop on umapping cleanup
      ...

commit 7af9a52e33ea07937fc216104e2cf3d4e690b43f
Author: Anton Vasilyev <vasilyev@ispras.ru>
Date:   Mon Aug 21 16:49:58 2017 +0200

    video: fbdev: udlfb: Fix use after free on dlfb_usb_probe error path
    
    If dlfb_usb_probe drops to error path then there is only one
    kref_init() call and no kref_get(), so second kref_put() leads to
    use after free.
    
    The patch removes superfluous kref_put on dlfb_usb_probe error path.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Anton Vasilyev <vasilyev@ispras.ru>
    Cc: Bernie Thompson <bernie@plugable.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>

commit 0de79ffc09a2d28640b4b3d9129080da5646ef25
Author: Cihangir Akturk <cakturk@gmail.com>
Date:   Mon Aug 7 13:43:00 2017 +0300

    staging: lustre: mgc: fix potential use after free in error path
    
    The config_log_add() function first calls config_log_put() with the
    variable 'cld' and then jumps to label 'out_cld', which will call
    the same function with the same 'cld' variable. However, at this
    point, 'cld' might have been already freed by the first invocation
    of config_log_put(). Even if we remove the invocation at that point,
    we will still get into trouble. This is because, in the error path,
    just below the label 'out_cld', we try to put 'params_cls' and
    'sptlrpc_cld', which might also have been freed by config_log_put().
    
    The point is that, config_llog_data::cld_sptlrpc and
    config_llog_data::cld_params members are assigned at the beginning
    of this function.
    
    To avoid this, do not call config_log_put() inside the else block,
    immediately jump to 'out_cld' instead. Moreover, remove assignments
    to config_llog_data::cld_sptlrpc and config_llog_data::cld_params at
    the beginning, since we already assign them below in the function
    with 'cld_lock' held.
    
    As an additional benefit, code size gets smaller.
    
    before:
    text    data     bss     dec     hex filename
    26188   2256    4208   32652    7f8c drivers/staging/lustre/lustre/mgc/mgc_request.o
    
    after:
    text    data     bss     dec     hex filename
    26092   2256    4208   32556    7f2c drivers/staging/lustre/lustre/mgc/mgc_request.o
    
    Signed-off-by: Cihangir Akturk <cakturk@gmail.com>
    Reviewed-by: James Simmons <jsimmons@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 383143f31d7d3525a1dbff733d52fff917f82f15
Author: Wei Wang <weiwan@google.com>
Date:   Wed Aug 16 11:18:09 2017 -0700

    ipv6: reset fn->rr_ptr when replacing route
    
    syzcaller reported the following use-after-free issue in rt6_select():
    BUG: KASAN: use-after-free in rt6_select net/ipv6/route.c:755 [inline] at addr ffff8800bc6994e8
    BUG: KASAN: use-after-free in ip6_pol_route.isra.46+0x1429/0x1470 net/ipv6/route.c:1084 at addr ffff8800bc6994e8
    Read of size 4 by task syz-executor1/439628
    CPU: 0 PID: 439628 Comm: syz-executor1 Not tainted 4.3.5+ #8
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
     0000000000000000 ffff88018fe435b0 ffffffff81ca384d ffff8801d3588c00
     ffff8800bc699380 ffff8800bc699500 dffffc0000000000 ffff8801d40a47c0
     ffff88018fe435d8 ffffffff81735751 ffff88018fe43660 ffff8800bc699380
    Call Trace:
     [<ffffffff81ca384d>] __dump_stack lib/dump_stack.c:15 [inline]
     [<ffffffff81ca384d>] dump_stack+0xc1/0x124 lib/dump_stack.c:51
    sctp: [Deprecated]: syz-executor0 (pid 439615) Use of struct sctp_assoc_value in delayed_ack socket option.
    Use struct sctp_sack_info instead
     [<ffffffff81735751>] kasan_object_err+0x21/0x70 mm/kasan/report.c:158
     [<ffffffff817359c4>] print_address_description mm/kasan/report.c:196 [inline]
     [<ffffffff817359c4>] kasan_report_error+0x1b4/0x4a0 mm/kasan/report.c:285
     [<ffffffff81735d93>] kasan_report mm/kasan/report.c:305 [inline]
     [<ffffffff81735d93>] __asan_report_load4_noabort+0x43/0x50 mm/kasan/report.c:325
     [<ffffffff82a28e39>] rt6_select net/ipv6/route.c:755 [inline]
     [<ffffffff82a28e39>] ip6_pol_route.isra.46+0x1429/0x1470 net/ipv6/route.c:1084
     [<ffffffff82a28fb1>] ip6_pol_route_output+0x81/0xb0 net/ipv6/route.c:1203
     [<ffffffff82ab0a50>] fib6_rule_action+0x1f0/0x680 net/ipv6/fib6_rules.c:95
     [<ffffffff8265cbb6>] fib_rules_lookup+0x2a6/0x7a0 net/core/fib_rules.c:223
     [<ffffffff82ab1430>] fib6_rule_lookup+0xd0/0x250 net/ipv6/fib6_rules.c:41
     [<ffffffff82a22006>] ip6_route_output+0x1d6/0x2c0 net/ipv6/route.c:1224
     [<ffffffff829e83d2>] ip6_dst_lookup_tail+0x4d2/0x890 net/ipv6/ip6_output.c:943
     [<ffffffff829e889a>] ip6_dst_lookup_flow+0x9a/0x250 net/ipv6/ip6_output.c:1079
     [<ffffffff82a9f7d8>] ip6_datagram_dst_update+0x538/0xd40 net/ipv6/datagram.c:91
     [<ffffffff82aa0978>] __ip6_datagram_connect net/ipv6/datagram.c:251 [inline]
     [<ffffffff82aa0978>] ip6_datagram_connect+0x518/0xe50 net/ipv6/datagram.c:272
     [<ffffffff82aa1313>] ip6_datagram_connect_v6_only+0x63/0x90 net/ipv6/datagram.c:284
     [<ffffffff8292f790>] inet_dgram_connect+0x170/0x1f0 net/ipv4/af_inet.c:564
     [<ffffffff82565547>] SYSC_connect+0x1a7/0x2f0 net/socket.c:1582
     [<ffffffff8256a649>] SyS_connect+0x29/0x30 net/socket.c:1563
     [<ffffffff82c72032>] entry_SYSCALL_64_fastpath+0x12/0x17
    Object at ffff8800bc699380, in cache ip6_dst_cache size: 384
    
    The root cause of it is that in fib6_add_rt2node(), when it replaces an
    existing route with the new one, it does not update fn->rr_ptr.
    This commit resets fn->rr_ptr to NULL when it points to a route which is
    replaced in fib6_add_rt2node().
    
    Fixes: 27596472473a ("ipv6: fix ECMP route replacement")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>    [2.6+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3010f876500f9ba921afaeccec30c45ca6584dc8
Author: Pavel Tatashin <pasha.tatashin@oracle.com>
Date:   Fri Aug 18 15:16:05 2017 -0700

    mm: discard memblock data later
    
    There is existing use after free bug when deferred struct pages are
    enabled:
    
    The memblock_add() allocates memory for the memory array if more than
    128 entries are needed.  See comment in e820__memblock_setup():
    
      * The bootstrap memblock region count maximum is 128 entries
      * (INIT_MEMBLOCK_REGIONS), but EFI might pass us more E820 entries
      * than that - so allow memblock resizing.
    
    This memblock memory is freed here:
            free_low_memory_core_early()
    
    We access the freed memblock.memory later in boot when deferred pages
    are initialized in this path:
    
            deferred_init_memmap()
                    for_each_mem_pfn_range()
                      __next_mem_pfn_range()
                        type = &memblock.memory;
    
    One possible explanation for why this use-after-free hasn't been hit
    before is that the limit of INIT_MEMBLOCK_REGIONS has never been
    exceeded at least on systems where deferred struct pages were enabled.
    
    Tested by reducing INIT_MEMBLOCK_REGIONS down to 4 from the current 128,
    and verifying in qemu that this code is getting excuted and that the
    freed pages are sane.
    
    Link: http://lkml.kernel.org/r/1502485554-318703-2-git-send-email-pasha.tatashin@oracle.com
    Fixes: 7e18adb4f80b ("mm: meminit: initialise remaining struct pages in parallel with kswapd")
    Signed-off-by: Pavel Tatashin <pasha.tatashin@oracle.com>
    Reviewed-by: Steven Sistare <steven.sistare@oracle.com>
    Reviewed-by: Daniel Jordan <daniel.m.jordan@oracle.com>
    Reviewed-by: Bob Picco <bob.picco@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9620fef27ed2cdb37bf6fd028f32bea2ef5119a8
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 18 12:08:07 2017 -0700

    ipv4: convert dst_metrics.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f18c17c889e2d3a9fa079ca883534b41d9dd3155
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Thu Aug 17 13:13:26 2017 -0700

    skd: Enable request tags for the block layer queue
    
    Use the request tag when allocating a skd_fitmsg_context or
    skd_request_context such that the lists used to track free elements
    can be eliminated. Swap the skd_end_request() and skd_release_req()
    calls to avoid triggering a use-after-free. Remove
    skd_fitmsg_context.state and .outstanding because FIT messages are
    shared among requests and because updating a FIT message after a
    request has finished whould trigger a use-after-free.
    
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 7277cc67b3916eed47558c64f9c9c0de00a35cda
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Thu Aug 17 13:12:45 2017 -0700

    skd: Avoid that module unloading triggers a use-after-free
    
    Since put_disk() triggers a disk_release() call and since that
    last function calls blk_put_queue() if disk->queue != NULL, clear
    the disk->queue pointer before calling put_disk(). This avoids
    that unloading the skd kernel module triggers the following
    use-after-free:
    
    WARNING: CPU: 8 PID: 297 at lib/refcount.c:128 refcount_sub_and_test+0x70/0x80
    refcount_t: underflow; use-after-free.
    CPU: 8 PID: 297 Comm: kworker/8:1 Not tainted 4.11.10-300.fc26.x86_64 #1
    Workqueue: events work_for_cpu_fn
    Call Trace:
     dump_stack+0x63/0x84
     __warn+0xcb/0xf0
     warn_slowpath_fmt+0x5a/0x80
     refcount_sub_and_test+0x70/0x80
     refcount_dec_and_test+0x11/0x20
     kobject_put+0x1f/0x50
     blk_put_queue+0x15/0x20
     disk_release+0xae/0xf0
     device_release+0x32/0x90
     kobject_release+0x67/0x170
     kobject_put+0x2b/0x50
     put_disk+0x17/0x20
     skd_destruct+0x5c/0x890 [skd]
     skd_pci_probe+0x124d/0x13a0 [skd]
     local_pci_probe+0x42/0xa0
     work_for_cpu_fn+0x14/0x20
     process_one_work+0x19e/0x470
     worker_thread+0x1dc/0x4a0
     kthread+0x125/0x140
     ret_from_fork+0x25/0x30
    
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Johannes Thumshirn <jthumshirn@suse.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 7a46ec0e2f4850407de5e1d19a44edee6efa58ec
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Aug 15 09:19:24 2017 -0700

    locking/refcounts, x86/asm: Implement fast refcount overflow protection
    
    This implements refcount_t overflow protection on x86 without a noticeable
    performance impact, though without the fuller checking of REFCOUNT_FULL.
    
    This is done by duplicating the existing atomic_t refcount implementation
    but with normally a single instruction added to detect if the refcount
    has gone negative (e.g. wrapped past INT_MAX or below zero). When detected,
    the handler saturates the refcount_t to INT_MIN / 2. With this overflow
    protection, the erroneous reference release that would follow a wrap back
    to zero is blocked from happening, avoiding the class of refcount-overflow
    use-after-free vulnerabilities entirely.
    
    Only the overflow case of refcounting can be perfectly protected, since
    it can be detected and stopped before the reference is freed and left to
    be abused by an attacker. There isn't a way to block early decrements,
    and while REFCOUNT_FULL stops increment-from-zero cases (which would
    be the state _after_ an early decrement and stops potential double-free
    conditions), this fast implementation does not, since it would require
    the more expensive cmpxchg loops. Since the overflow case is much more
    common (e.g. missing a "put" during an error path), this protection
    provides real-world protection. For example, the two public refcount
    overflow use-after-free exploits published in 2016 would have been
    rendered unexploitable:
    
      http://perception-point.io/2016/01/14/analysis-and-exploitation-of-a-linux-kernel-vulnerability-cve-2016-0728/
    
      http://cyseclabs.com/page?n=02012016
    
    This implementation does, however, notice an unchecked decrement to zero
    (i.e. caller used refcount_dec() instead of refcount_dec_and_test() and it
    resulted in a zero). Decrements under zero are noticed (since they will
    have resulted in a negative value), though this only indicates that a
    use-after-free may have already happened. Such notifications are likely
    avoidable by an attacker that has already exploited a use-after-free
    vulnerability, but it's better to have them reported than allow such
    conditions to remain universally silent.
    
    On first overflow detection, the refcount value is reset to INT_MIN / 2
    (which serves as a saturation value) and a report and stack trace are
    produced. When operations detect only negative value results (such as
    changing an already saturated value), saturation still happens but no
    notification is performed (since the value was already saturated).
    
    On the matter of races, since the entire range beyond INT_MAX but before
    0 is negative, every operation at INT_MIN / 2 will trap, leaving no
    overflow-only race condition.
    
    As for performance, this implementation adds a single "js" instruction
    to the regular execution flow of a copy of the standard atomic_t refcount
    operations. (The non-"and_test" refcount_dec() function, which is uncommon
    in regular refcount design patterns, has an additional "jz" instruction
    to detect reaching exactly zero.) Since this is a forward jump, it is by
    default the non-predicted path, which will be reinforced by dynamic branch
    prediction. The result is this protection having virtually no measurable
    change in performance over standard atomic_t operations. The error path,
    located in .text.unlikely, saves the refcount location and then uses UD0
    to fire a refcount exception handler, which resets the refcount, handles
    reporting, and returns to regular execution. This keeps the changes to
    .text size minimal, avoiding return jumps and open-coded calls to the
    error reporting routine.
    
    Example assembly comparison:
    
    refcount_inc() before:
    
      .text:
      ffffffff81546149:       f0 ff 45 f4             lock incl -0xc(%rbp)
    
    refcount_inc() after:
    
      .text:
      ffffffff81546149:       f0 ff 45 f4             lock incl -0xc(%rbp)
      ffffffff8154614d:       0f 88 80 d5 17 00       js     ffffffff816c36d3
      ...
      .text.unlikely:
      ffffffff816c36d3:       48 8d 4d f4             lea    -0xc(%rbp),%rcx
      ffffffff816c36d7:       0f ff                   (bad)
    
    These are the cycle counts comparing a loop of refcount_inc() from 1
    to INT_MAX and back down to 0 (via refcount_dec_and_test()), between
    unprotected refcount_t (atomic_t), fully protected REFCOUNT_FULL
    (refcount_t-full), and this overflow-protected refcount (refcount_t-fast):
    
      2147483646 refcount_inc()s and 2147483647 refcount_dec_and_test()s:
                        cycles              protections
      atomic_t           82249267387        none
      refcount_t-fast    82211446892        overflow, untested dec-to-zero
      refcount_t-full   144814735193        overflow, untested dec-to-zero, inc-from-zero
    
    This code is a modified version of the x86 PAX_REFCOUNT atomic_t
    overflow defense from the last public patch of PaX/grsecurity, based
    on my understanding of the code. Changes or omissions from the original
    code are mine and don't reflect the original grsecurity/PaX code. Thanks
    to PaX Team for various suggestions for improvement for repurposing this
    code to be a refcount-only protection.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Elena Reshetova <elena.reshetova@intel.com>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Greg KH <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: James Bottomley <James.Bottomley@hansenpartnership.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Serge E. Hallyn <serge@hallyn.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: arozansk@redhat.com
    Cc: axboe@kernel.dk
    Cc: kernel-hardening@lists.openwall.com
    Cc: linux-arch <linux-arch@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20170815161924.GA133115@beast
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 120e9dabaf551c6dc03d3a10a1f026376cb1811c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 07:03:15 2017 -0700

    dccp: defer ccid_hc_tx_delete() at dismantle time
    
    syszkaller team reported another problem in DCCP [1]
    
    Problem here is that the structure holding RTO timer
    (ccid2_hc_tx_rto_expire() handler) is freed too soon.
    
    We can not use del_timer_sync() to cancel the timer
    since this timer wants to grab socket lock (that would risk a dead lock)
    
    Solution is to defer the freeing of memory when all references to
    the socket were released. Socket timers do own a reference, so this
    should fix the issue.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in ccid2_hc_tx_rto_expire+0x51c/0x5c0 net/dccp/ccids/ccid2.c:144
    Read of size 4 at addr ffff8801d2660540 by task kworker/u4:7/3365
    
    CPU: 1 PID: 3365 Comm: kworker/u4:7 Not tainted 4.13.0-rc4+ #3
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events_unbound call_usermodehelper_exec_work
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/report.c:429
     ccid2_hc_tx_rto_expire+0x51c/0x5c0 net/dccp/ccids/ccid2.c:144
     call_timer_fn+0x233/0x830 kernel/time/timer.c:1268
     expire_timers kernel/time/timer.c:1307 [inline]
     __run_timers+0x7fd/0xb90 kernel/time/timer.c:1601
     run_timer_softirq+0x21/0x80 kernel/time/timer.c:1614
     __do_softirq+0x2f5/0xba3 kernel/softirq.c:284
     invoke_softirq kernel/softirq.c:364 [inline]
     irq_exit+0x1cc/0x200 kernel/softirq.c:405
     exiting_irq arch/x86/include/asm/apic.h:638 [inline]
     smp_apic_timer_interrupt+0x76/0xa0 arch/x86/kernel/apic/apic.c:1044
     apic_timer_interrupt+0x93/0xa0 arch/x86/entry/entry_64.S:702
    RIP: 0010:arch_local_irq_enable arch/x86/include/asm/paravirt.h:824 [inline]
    RIP: 0010:__raw_write_unlock_irq include/linux/rwlock_api_smp.h:267 [inline]
    RIP: 0010:_raw_write_unlock_irq+0x56/0x70 kernel/locking/spinlock.c:343
    RSP: 0018:ffff8801cd50eaa8 EFLAGS: 00000286 ORIG_RAX: ffffffffffffff10
    RAX: dffffc0000000000 RBX: ffffffff85a090c0 RCX: 0000000000000006
    RDX: 1ffffffff0b595f3 RSI: 1ffff1003962f989 RDI: ffffffff85acaf98
    RBP: ffff8801cd50eab0 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff8801cc96ea60
    R13: dffffc0000000000 R14: ffff8801cc96e4c0 R15: ffff8801cc96e4c0
     </IRQ>
     release_task+0xe9e/0x1a40 kernel/exit.c:220
     wait_task_zombie kernel/exit.c:1162 [inline]
     wait_consider_task+0x29b8/0x33c0 kernel/exit.c:1389
     do_wait_thread kernel/exit.c:1452 [inline]
     do_wait+0x441/0xa90 kernel/exit.c:1523
     kernel_wait4+0x1f5/0x370 kernel/exit.c:1665
     SYSC_wait4+0x134/0x140 kernel/exit.c:1677
     SyS_wait4+0x2c/0x40 kernel/exit.c:1673
     call_usermodehelper_exec_sync kernel/kmod.c:286 [inline]
     call_usermodehelper_exec_work+0x1a0/0x2c0 kernel/kmod.c:323
     process_one_work+0xbf3/0x1bc0 kernel/workqueue.c:2097
     worker_thread+0x223/0x1860 kernel/workqueue.c:2231
     kthread+0x35e/0x430 kernel/kthread.c:231
     ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:425
    
    Allocated by task 21267:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc+0x127/0x750 mm/slab.c:3561
     ccid_new+0x20e/0x390 net/dccp/ccid.c:151
     dccp_hdlr_ccid+0x27/0x140 net/dccp/feat.c:44
     __dccp_feat_activate+0x142/0x2a0 net/dccp/feat.c:344
     dccp_feat_activate_values+0x34e/0xa90 net/dccp/feat.c:1538
     dccp_rcv_request_sent_state_process net/dccp/input.c:472 [inline]
     dccp_rcv_state_process+0xed1/0x1620 net/dccp/input.c:677
     dccp_v4_do_rcv+0xeb/0x160 net/dccp/ipv4.c:679
     sk_backlog_rcv include/net/sock.h:911 [inline]
     __release_sock+0x124/0x360 net/core/sock.c:2269
     release_sock+0xa4/0x2a0 net/core/sock.c:2784
     inet_wait_for_connect net/ipv4/af_inet.c:557 [inline]
     __inet_stream_connect+0x671/0xf00 net/ipv4/af_inet.c:643
     inet_stream_connect+0x58/0xa0 net/ipv4/af_inet.c:682
     SYSC_connect+0x204/0x470 net/socket.c:1642
     SyS_connect+0x24/0x30 net/socket.c:1623
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 3049:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     ccid_hc_tx_delete+0xc5/0x100 net/dccp/ccid.c:190
     dccp_destroy_sock+0x1d1/0x2b0 net/dccp/proto.c:225
     inet_csk_destroy_sock+0x166/0x3f0 net/ipv4/inet_connection_sock.c:833
     dccp_done+0xb7/0xd0 net/dccp/proto.c:145
     dccp_time_wait+0x13d/0x300 net/dccp/minisocks.c:72
     dccp_rcv_reset+0x1d1/0x5b0 net/dccp/input.c:160
     dccp_rcv_state_process+0x8fc/0x1620 net/dccp/input.c:663
     dccp_v4_do_rcv+0xeb/0x160 net/dccp/ipv4.c:679
     sk_backlog_rcv include/net/sock.h:911 [inline]
     __sk_receive_skb+0x33e/0xc00 net/core/sock.c:521
     dccp_v4_rcv+0xef1/0x1c00 net/dccp/ipv4.c:871
     ip_local_deliver_finish+0x2e2/0xba0 net/ipv4/ip_input.c:216
     NF_HOOK include/linux/netfilter.h:248 [inline]
     ip_local_deliver+0x1ce/0x6d0 net/ipv4/ip_input.c:257
     dst_input include/net/dst.h:477 [inline]
     ip_rcv_finish+0x8db/0x19c0 net/ipv4/ip_input.c:397
     NF_HOOK include/linux/netfilter.h:248 [inline]
     ip_rcv+0xc3f/0x17d0 net/ipv4/ip_input.c:488
     __netif_receive_skb_core+0x19af/0x33d0 net/core/dev.c:4417
     __netif_receive_skb+0x2c/0x1b0 net/core/dev.c:4455
     process_backlog+0x203/0x740 net/core/dev.c:5130
     napi_poll net/core/dev.c:5527 [inline]
     net_rx_action+0x792/0x1910 net/core/dev.c:5593
     __do_softirq+0x2f5/0xba3 kernel/softirq.c:284
    
    The buggy address belongs to the object at ffff8801d2660100
     which belongs to the cache ccid2_hc_tx_sock of size 1240
    The buggy address is located 1088 bytes inside of
     1240-byte region [ffff8801d2660100, ffff8801d26605d8)
    The buggy address belongs to the page:
    page:ffffea0007499800 count:1 mapcount:0 mapping:ffff8801d2660100 index:0x0 compound_mapcount: 0
    flags: 0x200000000008100(slab|head)
    raw: 0200000000008100 ffff8801d2660100 0000000000000000 0000000100000005
    raw: ffffea00075271a0 ffffea0007538820 ffff8801d3aef9c0 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801d2660400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8801d2660480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801d2660500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                               ^
     ffff8801d2660580: fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc
     ffff8801d2660600: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Gerrit Renker <gerrit@erg.abdn.ac.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16a5a480f067f945fd27bf91ffdce3f959b0d4b6
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Aug 14 11:20:32 2017 -0700

    nvmet-fc: correct use after free on list teardown
    
    Use list_for_each_entry_safe to prevent list handling from referencing
    next pointers directly after list_del's
    
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit d76036ab47eafa6ce52b69482e91ca3ba337d6d6
Author: Jan Kara <jack@suse.cz>
Date:   Tue Aug 15 13:00:36 2017 +0200

    audit: Fix use after free in audit_remove_watch_rule()
    
    audit_remove_watch_rule() drops watch's reference to parent but then
    continues to work with it. That is not safe as parent can get freed once
    we drop our reference. The following is a trivial reproducer:
    
    mount -o loop image /mnt
    touch /mnt/file
    auditctl -w /mnt/file -p wax
    umount /mnt
    auditctl -D
    <crash in fsnotify_destroy_mark()>
    
    Grab our own reference in audit_remove_watch_rule() earlier to make sure
    mark does not get freed under us.
    
    CC: stable@vger.kernel.org
    Reported-by: Tony Jones <tonyj@suse.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Tested-by: Tony Jones <tonyj@suse.de>
    Signed-off-by: Paul Moore <paul@paul-moore.com>

commit 7e1d90f60a0d501c8503e636942ca704a454d910
Author: Daniel Mentz <danielmentz@google.com>
Date:   Mon Aug 14 14:46:01 2017 -0700

    ALSA: seq: 2nd attempt at fixing race creating a queue
    
    commit 4842e98f26dd80be3623c4714a244ba52ea096a8 ("ALSA: seq: Fix race at
    creating a queue") attempted to fix a race reported by syzkaller. That
    fix has been described as follows:
    
    "
    When a sequencer queue is created in snd_seq_queue_alloc(),it adds the
    new queue element to the public list before referencing it.  Thus the
    queue might be deleted before the call of snd_seq_queue_use(), and it
    results in the use-after-free error, as spotted by syzkaller.
    
    The fix is to reference the queue object at the right time.
    "
    
    Even with that fix in place, syzkaller reported a use-after-free error.
    It specifically pointed to the last instruction "return q->queue" in
    snd_seq_queue_alloc(). The pointer q is being used after kfree() has
    been called on it.
    
    It turned out that there is still a small window where a race can
    happen. The window opens at
    snd_seq_ioctl_create_queue()->snd_seq_queue_alloc()->queue_list_add()
    and closes at
    snd_seq_ioctl_create_queue()->queueptr()->snd_use_lock_use(). Between
    these two calls, a different thread could delete the queue and possibly
    re-create a different queue in the same location in queue_list.
    
    This change prevents this situation by calling snd_use_lock_use() from
    snd_seq_queue_alloc() prior to calling queue_list_add(). It is then the
    caller's responsibility to call snd_use_lock_free(&q->use_lock).
    
    Fixes: 4842e98f26dd ("ALSA: seq: Fix race at creating a queue")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Daniel Mentz <danielmentz@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 2c87d63ac853550e734edfd45e1be5e5aa44fbcc
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Aug 14 00:52:58 2017 +0200

    ipv4: route: fix inet_rtm_getroute induced crash
    
    "ip route get $daddr iif eth0 from $saddr" causes:
     BUG: KASAN: use-after-free in ip_route_input_rcu+0x1535/0x1b50
     Call Trace:
      ip_route_input_rcu+0x1535/0x1b50
      ip_route_input_noref+0xf9/0x190
      tcp_v4_early_demux+0x1a4/0x2b0
      ip_rcv+0xbcb/0xc05
      __netif_receive_skb+0x9c/0xd0
      netif_receive_skb_internal+0x5a8/0x890
    
    Problem is that inet_rtm_getroute calls either ip_route_input_rcu (if an
    iif was provided) or ip_route_output_key_hash_rcu.
    
    But ip_route_input_rcu, unlike ip_route_output_key_hash_rcu, already
    associates the dst_entry with the skb.  This clears the SKB_DST_NOREF
    bit (i.e. skb_dst_drop will release/free the entry while it should not).
    
    Thus only set the dst if we called ip_route_output_key_hash_rcu().
    
    I tested this patch by running:
     while true;do ip r get 10.0.1.2;done > /dev/null &
     while true;do ip r get 10.0.1.2 iif eth0  from 10.0.1.1;done > /dev/null &
    ... and saw no crash or memory leak.
    
    Cc: Roopa Prabhu <roopa@cumulusnetworks.com>
    Cc: David Ahern <dsahern@gmail.com>
    Fixes: ba52d61e0ff ("ipv4: route: restore skb_dst_set in inet_rtm_getroute")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d38a65125f93b2fbd17cd37ccc5ec0f0b799cc55
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 10 16:53:00 2017 +0200

    rtnetlink: init handler refcounts to 1
    
    If using CONFIG_REFCOUNT_FULL=y we get following splat:
     refcount_t: increment on 0; use-after-free.
    WARNING: CPU: 0 PID: 304 at lib/refcount.c:152 refcount_inc+0x47/0x50
    Call Trace:
     rtnetlink_rcv_msg+0x191/0x260
     ...
    
    This warning is harmless (0 is "no callback running", not "memory
    was freed").
    
    Use '1' as the new 'no handler is running' base instead of 0 to avoid
    this.
    
    Fixes: 019a316992ee ("rtnetlink: add reference counting to prevent module unload while dump is in progress")
    Reported-by: Sabrina Dubroca <sdubroca@redhat.com>
    Reported-by: kernel test robot <fengguang.wu@intel.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      samples/bpf: fix bpf tunnel cleanup
      udp6: fix jumbogram reception
      ppp: Fix a scheduling-while-atomic bug in del_chan
      Revert "net: bcmgenet: Remove init parameter from bcmgenet_mii_config"
      virtio_net: fix truesize for mergeable buffers
      mv643xx_eth: fix of_irq_to_resource() error check
      MAINTAINERS: Add more files to the PHY LIBRARY section
      ipv4: fib: Fix NULL pointer deref during fib_sync_down_dev()
      net: phy: Correctly process PHY_HALTED in phy_stop_machine()
      sunhme: fix up GREG_STAT and GREG_IMASK register offsets
      bpf: fix bpf_prog_get_info_by_fd to dump correct xlated_prog_len
      tcp: avoid bogus gcc-7 array-bounds warning
      net: tc35815: fix spelling mistake: "Intterrupt" -> "Interrupt"
      bpf: don't indicate success when copy_from_user fails
      udp6: fix socket leak on early demux
      net: thunderx: Fix BGX transmit stall due to underflow
      Revert "vhost: cache used event for better performance"
      team: use a larger struct for mac address
      net: check dev->addr_len for dev_set_mac_address()
      phy: bcm-ns-usb3: fix MDIO_BUS dependency
      ...

commit 9beceb54fa2c0b47532dd2b07f37e410641cf9b2
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Thu Jul 27 11:22:04 2017 +0900

    netfilter: x_tables: Fix use-after-free in ipt_do_table.
    
    If verdict is NF_STOLEN in the SYNPROXY target,
    the skb is consumed.
    However, ipt_do_table() always tries to get ip header from the skb.
    So that, KASAN triggers the use-after-free message.
    
    We can reproduce this message using below command.
      # iptables -I INPUT -p tcp -j SYNPROXY --mss 1460
    
    [ 193.542265] BUG: KASAN: use-after-free in ipt_do_table+0x1405/0x1c10
    [ ... ]
    [ 193.578603] Call Trace:
    [ 193.581590] <IRQ>
    [ 193.584107] dump_stack+0x68/0xa0
    [ 193.588168] print_address_description+0x78/0x290
    [ 193.593828] ? ipt_do_table+0x1405/0x1c10
    [ 193.598690] kasan_report+0x230/0x340
    [ 193.603194] __asan_report_load2_noabort+0x19/0x20
    [ 193.608950] ipt_do_table+0x1405/0x1c10
    [ 193.613591] ? rcu_read_lock_held+0xae/0xd0
    [ 193.618631] ? ip_route_input_rcu+0x27d7/0x4270
    [ 193.624348] ? ipt_do_table+0xb68/0x1c10
    [ 193.629124] ? do_add_counters+0x620/0x620
    [ 193.634234] ? iptable_filter_net_init+0x60/0x60
    [ ... ]
    
    After this patch, only when verdict is XT_CONTINUE,
    ipt_do_table() tries to get ip header.
    Also arpt_do_table() is modified because it has same bug.
    
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 5ae29649e03f58be0f412c21b62b203aa7cf1680
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 31 18:45:41 2017 +0200

    video: fbdev: imxfb: use after free in imxfb_remove()
    
    We free "info" then dereference it on the next line.  Really this whole
    function would be better if we wrote it to unwind in the mirror of how
    things are allocated in the probe.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Alexander Shiyan <shc_work@mail.ru>
    Cc: Sascha Hauer <kernel@pengutronix.de>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>

commit 3c70d958cf1ee81141d00ecbf54b4999060eeeaa
Author: Bogdan Purcareata <bogdan.purcareata@nxp.com>
Date:   Thu Jul 20 10:58:37 2017 +0000

    staging: fsl-dpaa2/eth: Fix skb use after free
    
    Once a Tx frame descriptor is enqueued, an interrupt might be triggered
    to process the Tx confirmation and free the skb, hitting a memory use
    after free when updating the tx_bytes statistic based on skb->len.
    
    Use the frame descriptor length instead.
    
    Signed-off-by: Bogdan Purcareata <bogdan.purcareata@nxp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce32d1d83702064e7746453622fc2d6bdcd8baa4
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Jul 24 18:13:21 2017 -0700

    mwifiex: unregister wiphy before freeing resources
    
    It's possible for some control interfaces (e.g., scans, set freq) to be
    active after we've stopped our main work queue and the netif TX queues.
    These don't get completely shut out until we've unregistered the wdevs
    and wiphy.
    
    So let's only free command buffers and poison our lists after
    wiphy_unregister().
    
    This resolves various use-after-free issues seen when resetting the
    device.
    
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 643acea6297f9aa7241cfb17d5b5606186f54137
Author: Brian Norris <briannorris@chromium.org>
Date:   Mon Jul 24 18:13:20 2017 -0700

    mwifiex: re-register wiphy across reset
    
    In general, it's helpful to use the same code for device removal as for
    device reset, as this tends to have fewer bugs. Let's move the wiphy
    unregistration code into the common reset and removal code.
    
    In particular, it's very hard to properly handle the reset sequence when
    something fails. Currently, if mwifiex_reinit_sw() fails, we've failed
    to unregister the associated wiphy, and so running something as simple
    as "iw phy" can trigger an OOPS, as the wiphy still has hooks back into
    freed mwifiex data structures. For example, KASAN complained:
    
    [... see reset fail for other reasons ...]
    [ 1184.821158] mwifiex_pcie 0000:01:00.0: info: dnld wifi firmware from 174948 bytes
    [ 1186.870914] mwifiex_pcie 0000:01:00.0: info: FW download over, size 608396 bytes
    [ 1187.685990] mwifiex_pcie 0000:01:00.0: WLAN FW is active
    [ 1187.692673] mwifiex_pcie 0000:01:00.0: cmd_wait_q terminated: -512
    [ 1187.699075] mwifiex_pcie 0000:01:00.0: info: _mwifiex_fw_dpc: unregister device
    [ 1187.713476] mwifiex: Failed to bring up adapter: -5
    [ 1187.718644] mwifiex_pcie 0000:01:00.0: reinit failed: -5
    
    [... run `iw phy` ...]
    [ 1212.902419] ==================================================================
    [ 1212.909806] BUG: KASAN: use-after-free in mwifiex_cfg80211_get_antenna+0x54/0xfc [mwifiex] at addr ffffffc0ad1a8028
    [ 1212.920246] Read of size 1 by task iw/3127
    [...]
    [ 1212.934946] page dumped because: kasan: bad access detected
    [...]
    [ 1212.950665] Call trace:
    [ 1212.953148] [<ffffffc00020a69c>] dump_backtrace+0x0/0x190
    [ 1212.958572] [<ffffffc00020a96c>] show_stack+0x20/0x28
    [ 1212.963648] [<ffffffc0005ce18c>] dump_stack+0xa4/0xcc
    [ 1212.968723] [<ffffffc0003c4430>] kasan_report+0x378/0x500
    [ 1212.974140] [<ffffffc0003c3358>] __asan_load1+0x44/0x4c
    [ 1212.979462] [<ffffffbffc2e8360>] mwifiex_cfg80211_get_antenna+0x54/0xfc [mwifiex]
    [ 1212.987131] [<ffffffbffc084fc4>] nl80211_send_wiphy+0x75c/0x2de0 [cfg80211]
    [ 1212.994246] [<ffffffbffc094f60>] nl80211_dump_wiphy+0x32c/0x438 [cfg80211]
    [ 1213.001149] [<ffffffc000ab6404>] genl_lock_dumpit+0x48/0x64
    [ 1213.006746] [<ffffffc000ab3474>] netlink_dump+0x178/0x398
    [ 1213.012171] [<ffffffc000ab3d18>] __netlink_dump_start+0x1bc/0x260
    [...]
    
    This all goes away if we just tear down the wiphy on the way down, and
    set it back up if/when we bring the device back up.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit c800aaf8d869f2b9b47b10c5c312fe19f0a94042
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Jul 24 10:07:32 2017 -0700

    packet: fix use-after-free in prb_retire_rx_blk_timer_expired()
    
    There are multiple reports showing we have a use-after-free in
    the timer prb_retire_rx_blk_timer_expired(), where we use struct
    tpacket_kbdq_core::pkbdq, a pg_vec, after it gets freed by
    free_pg_vec().
    
    The interesting part is it is not freed via packet_release() but
    via packet_setsockopt(), which means we are not closing the socket.
    Looking into the big and fat function packet_set_ring(), this could
    happen if we satisfy the following conditions:
    
    1. closing == 0, not on packet_release() path
    2. req->tp_block_nr == 0, we don't allocate a new pg_vec
    3. rx_ring->pg_vec is already set as V3, which means we already called
       packet_set_ring() wtih req->tp_block_nr > 0 previously
    4. req->tp_frame_nr == 0, pass sanity check
    5. po->mapped == 0, never called mmap()
    
    In this scenario we are clearing the old rx_ring->pg_vec, so we need
    to free this pg_vec, but we don't stop the timer on this path because
    of closing==0.
    
    The timer has to be stopped as long as we need to free pg_vec, therefore
    the check on closing!=0 is wrong, we should check pg_vec!=NULL instead.
    
    Thanks to liujian for testing different fixes.
    
    Reported-by: alexander.levin@verizon.com
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Reported-by: liujian (CE) <liujian56@huawei.com>
    Tested-by: liujian (CE) <liujian56@huawei.com>
    Cc: Ding Tianhong <dingtianhong@huawei.com>
    Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3840538ad384fb7891adeeaf36624f870c51fc0e
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Jul 18 14:56:17 2017 +0200

    netfilter: ipt_CLUSTERIP: fix use-after-free of proc entry
    
    When we delete a netns with a CLUSTERIP rule, clusterip_net_exit() is
    called first, removing /proc/net/ipt_CLUSTERIP.
    Then clusterip_config_entry_put() is called from clusterip_tg_destroy(),
    and tries to remove its entry under /proc/net/ipt_CLUSTERIP/.
    
    Fix this by checking that the parent directory of the entry to remove
    hasn't already been deleted.
    
    The following triggers a KASAN splat (stealing the reproducer from
    202f59afd441, thanks to Jianlin Shi and Xin Long):
    
        ip netns add test
        ip link add veth0_in type veth peer name veth0_out
        ip link set veth0_in netns test
        ip netns exec test ip link set lo up
        ip netns exec test ip link set veth0_in up
        ip netns exec test iptables -I INPUT -d 1.2.3.4 -i veth0_in -j     \
            CLUSTERIP --new --clustermac 89:d4:47:eb:9a:fa --total-nodes 3 \
            --local-node 1 --hashmode sourceip-sourceport
        ip netns del test
    
    Fixes: ce4ff76c15a8 ("netfilter: ipt_CLUSTERIP: make proc directory per net namespace")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commits)
      net: stmmac: revert "support future possible different internal phy mode"
      sfc: don't read beyond unicast address list
      datagram: fix kernel-doc comments
      socket: add documentation for missing elements
      smsc911x: Add check for ioremap_nocache() return code
      brcmfmac: fix possible buffer overflow in brcmf_cfg80211_mgmt_tx()
      net: hns: Bugfix for Tx timeout handling in hns driver
      net: ipmr: ipmr_get_table() returns NULL
      nfp: freeing the wrong variable
      mlxsw: spectrum_switchdev: Check status of memory allocation
      mlxsw: spectrum_switchdev: Remove unused variable
      mlxsw: spectrum_router: Fix use-after-free in route replace
      mlxsw: spectrum_router: Add missing rollback
      samples/bpf: fix a build issue
      bridge: mdb: fix leak on complete_info ptr on fail path
      tap: convert a mutex to a spinlock
      cxgb4: fix BUG() on interrupt deallocating path of ULD
      qed: Fix printk option passed when printing ipv6 addresses
      net: Fix minor code bug in timestamping.txt
      net: stmmac: Make 'alloc_dma_[rt]x_desc_resources()' look even closer
      ...

commit 7387dbbcdb2404e189591435527dcc65463819d7
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 12 09:12:53 2017 +0200

    mlxsw: spectrum_router: Fix use-after-free in route replace
    
    While working on IPv6 route replace I realized we can have a
    use-after-free in IPv4 in case the replaced route is offloaded and the
    only one using its FIB info.
    
    The problem is that fib_table_insert() drops the reference on the FIB
    info of the replaced routes which is eventually freed via call_rcu().
    Since the driver doesn't hold a reference on this FIB info it can cause
    a use-after-free when it tries to clear the RTNH_F_OFFLOAD flag stored
    in fi->fib_flags.
    
    After running the following commands in a loop for enough time with a
    KASAN enabled kernel I finally got the below trace.
    
    $ ip route add 192.168.50.0/24 via 192.168.200.1 dev enp3s0np3
    $ ip route replace 192.168.50.0/24 dev enp3s0np5
    $ ip route del 192.168.50.0/24 dev enp3s0np5
    
    BUG: KASAN: use-after-free in mlxsw_sp_fib_entry_offload_unset+0xa7/0x120 [mlxsw_spectrum]
    Read of size 4 at addr ffff8803717d9820 by task kworker/u4:2/55
    [...]
    ? mlxsw_sp_fib_entry_offload_unset+0xa7/0x120 [mlxsw_spectrum]
    ? mlxsw_sp_fib_entry_offload_unset+0xa7/0x120 [mlxsw_spectrum]
    ? mlxsw_sp_router_neighs_update_work+0x1cd0/0x1ce0 [mlxsw_spectrum]
    ? mlxsw_sp_fib_entry_offload_unset+0xa7/0x120 [mlxsw_spectrum]
    __asan_load4+0x61/0x80
    mlxsw_sp_fib_entry_offload_unset+0xa7/0x120 [mlxsw_spectrum]
    mlxsw_sp_fib_entry_offload_refresh+0xb6/0x370 [mlxsw_spectrum]
    mlxsw_sp_router_fib_event_work+0xd1c/0x2780 [mlxsw_spectrum]
    [...]
    Freed by task 5131:
     save_stack_trace+0x16/0x20
     save_stack+0x46/0xd0
     kasan_slab_free+0x70/0xc0
     kfree+0x144/0x570
     free_fib_info_rcu+0x2e7/0x410
     rcu_process_callbacks+0x4f8/0xe30
     __do_softirq+0x1d3/0x9e2
    
    Fix this by taking a reference on the FIB info when creating the nexthop
    group it represents and drop it when the group is destroyed.
    
    Fixes: 599cf8f95f22 ("mlxsw: spectrum_router: Add support for route replace")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      drm: Remove unused drm_file parameter to drm_syncobj_replace_fence()
      drm/amd/powerplay: fix bug fail to remove sysfs when rmmod amdgpu.
      amdgpu: Set cik/si_support to 1 by default if radeon isn't built
      drm/amdgpu/gfx9: fix driver reload with KIQ
      drm/amdgpu/gfx8: fix driver reload with KIQ
      drm/amdgpu: Don't call amd_powerplay_destroy() if we don't have powerplay
      drm/ttm: Fix use-after-free in ttm_bo_clean_mm
      drm/amd/amdgpu: move get memory type function from early init to sw init
      drm/amdgpu/cgs: always set reference clock in mode_info
      drm/amdgpu: fix vblank_time when displays are off
      drm/amd/powerplay: power value format change for Vega10
      drm/amdgpu/gfx9: support the amdgpu.disable_cu option
      drm/amd/powerplay: change PPSMC_MSG_GetCurrPkgPwr for Vega10
      drm/amdgpu: Make amdgpu_cs_parser_init static (v2)
      drm/amdgpu/cs: fix a typo in a comment
      drm/amdgpu: Fix the exported always on CU bitmap
      drm/amdgpu/gfx9: gfx_v9_0_enable_gfx_static_mg_power_gating() can be static
      drm/amdgpu/psp: upper_32_bits/lower_32_bits for address setup
      drm/amd/powerplay/cz: print message if smc message fails
      drm/amdgpu: fix typo in amdgpu_debugfs_test_ib_init
      ...

commit f991af3daabaecff34684fd51fac80319d1baad1
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Jul 9 13:19:55 2017 -0700

    mqueue: fix a use-after-free in sys_mq_notify()
    
    The retry logic for netlink_attachskb() inside sys_mq_notify()
    is nasty and vulnerable:
    
    1) The sock refcnt is already released when retry is needed
    2) The fd is controllable by user-space because we already
       release the file refcnt
    
    so we when retry but the fd has been just closed by user-space
    during this small window, we end up calling netlink_detachskb()
    on the error path which releases the sock again, later when
    the user-space closes this socket a use-after-free could be
    triggered.
    
    Setting 'sock' to NULL here should be sufficient to fix it.
    
    Reported-by: GeneBlue <geneblue.mail@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      net: ethernet: mediatek: remove useless code in mtk_probe()
      mpls: fix uninitialized in_label var warning in mpls_getroute
      doc: SKB_GSO_[IPIP|SIT] have been replaced
      bonding: avoid NETDEV_CHANGEMTU event when unregistering slave
      net/sock: add WARN_ON(parent->sk) in sock_graft()
      rds: tcp: use sock_create_lite() to create the accept socket
      net: hns: Fix a skb used after free bug
      net: hns: Fix a wrong op phy C45 code
      net: macb: Adding Support for Jumbo Frames up to 10240 Bytes in SAMA5D3
      net: Update networking MAINTAINERS entry.
      virtio-net: fix leaking of ctx array
      cfg80211: Validate frequencies nested in NL80211_ATTR_SCAN_FREQUENCIES
      cfg80211: Define nla_policy for NL80211_ATTR_LOCAL_MESH_POWER_MODE
      cfg80211: Check if NAN service ID is of expected size
      cfg80211: Check if PMKID attribute is of expected size
      arcnet: com20020-pci: Fix an error handling path in 'com20020pci_probe()'
      nfp: flower: add missing clean up call to avoid memory leaks
      vrf: fix bug_on triggered by rx when destroying a vrf
      ptp: dte: Use LL suffix for 64-bit constants
      sctp: set the value of flowi6_oif to sk_bound_dev_if to make sctp_v6_get_dst to find the correct route entry.
      ...

commit 27463ad99f738ed93c7c8b3e2e5bc8c4853a2ff2
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Thu Jul 6 10:22:00 2017 +0800

    net: hns: Fix a skb used after free bug
    
    skb maybe freed in hns_nic_net_xmit_hw() and return NETDEV_TX_OK,
    which cause hns_nic_net_xmit to use a freed skb.
    
    BUG: KASAN: use-after-free in hns_nic_net_xmit_hw+0x62c/0x940...
            [17659.112635]      alloc_debug_processing+0x18c/0x1a0
            [17659.117208]      __slab_alloc+0x52c/0x560
            [17659.120909]      kmem_cache_alloc_node+0xac/0x2c0
            [17659.125309]      __alloc_skb+0x6c/0x260
            [17659.128837]      tcp_send_ack+0x8c/0x280
            [17659.132449]      __tcp_ack_snd_check+0x9c/0xf0
            [17659.136587]      tcp_rcv_established+0x5a4/0xa70
            [17659.140899]      tcp_v4_do_rcv+0x27c/0x620
            [17659.144687]      tcp_prequeue_process+0x108/0x170
            [17659.149085]      tcp_recvmsg+0x940/0x1020
            [17659.152787]      inet_recvmsg+0x124/0x180
            [17659.156488]      sock_recvmsg+0x64/0x80
            [17659.160012]      SyS_recvfrom+0xd8/0x180
            [17659.163626]      __sys_trace_return+0x0/0x4
            [17659.167506] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=23 cpu=1 pid=13
            [17659.174000]      free_debug_processing+0x1d4/0x2c0
            [17659.178486]      __slab_free+0x240/0x390
            [17659.182100]      kmem_cache_free+0x24c/0x270
            [17659.186062]      kfree_skbmem+0xa0/0xb0
            [17659.189587]      __kfree_skb+0x28/0x40
            [17659.193025]      napi_gro_receive+0x168/0x1c0
            [17659.197074]      hns_nic_rx_up_pro+0x58/0x90
            [17659.201038]      hns_nic_rx_poll_one+0x518/0xbc0
            [17659.205352]      hns_nic_common_poll+0x94/0x140
            [17659.209576]      net_rx_action+0x458/0x5e0
            [17659.213363]      __do_softirq+0x1b8/0x480
            [17659.217062]      run_ksoftirqd+0x64/0x80
            [17659.220679]      smpboot_thread_fn+0x224/0x310
            [17659.224821]      kthread+0x150/0x170
            [17659.228084]      ret_from_fork+0x10/0x40
    
            BUG: KASAN: use-after-free in hns_nic_net_xmit+0x8c/0xc0...
            [17751.080490]      __slab_alloc+0x52c/0x560
            [17751.084188]      kmem_cache_alloc+0x244/0x280
            [17751.088238]      __build_skb+0x40/0x150
            [17751.091764]      build_skb+0x28/0x100
            [17751.095115]      __alloc_rx_skb+0x94/0x150
            [17751.098900]      __napi_alloc_skb+0x34/0x90
            [17751.102776]      hns_nic_rx_poll_one+0x180/0xbc0
            [17751.107097]      hns_nic_common_poll+0x94/0x140
            [17751.111333]      net_rx_action+0x458/0x5e0
            [17751.115123]      __do_softirq+0x1b8/0x480
            [17751.118823]      run_ksoftirqd+0x64/0x80
            [17751.122437]      smpboot_thread_fn+0x224/0x310
            [17751.126575]      kthread+0x150/0x170
            [17751.129838]      ret_from_fork+0x10/0x40
            [17751.133454] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=19 cpu=7 pid=43
            [17751.139951]      free_debug_processing+0x1d4/0x2c0
            [17751.144436]      __slab_free+0x240/0x390
            [17751.148051]      kmem_cache_free+0x24c/0x270
            [17751.152014]      kfree_skbmem+0xa0/0xb0
            [17751.155543]      __kfree_skb+0x28/0x40
            [17751.159022]      napi_gro_receive+0x168/0x1c0
            [17751.163074]      hns_nic_rx_up_pro+0x58/0x90
            [17751.167041]      hns_nic_rx_poll_one+0x518/0xbc0
            [17751.171358]      hns_nic_common_poll+0x94/0x140
            [17751.175585]      net_rx_action+0x458/0x5e0
            [17751.179373]      __do_softirq+0x1b8/0x480
            [17751.183076]      run_ksoftirqd+0x64/0x80
            [17751.186691]      smpboot_thread_fn+0x224/0x310
            [17751.190826]      kthread+0x150/0x170
            [17751.194093]      ret_from_fork+0x10/0x40
    
    Fixes: 13ac695e7ea1 ("net:hns: Add support of Hip06 SoC to the Hislicon Network Subsystem")
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: lipeng <lipeng321@huawei.com>
    Reported-by: Jun He <hjat2005@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9f4ab18ac51dc87345a9cbd2527e6acf7a0a9335
Author: Bart Van Assche <bart.vanassche@sandisk.com>
Date:   Tue May 23 16:48:36 2017 -0700

    xen/scsiback: Fix a TMR related use-after-free
    
    scsiback_release_cmd() must not dereference se_cmd->se_tmr_req
    because that memory is freed by target_free_cmd_mem() before
    scsiback_release_cmd() is called. Fix this use-after-free by
    inlining struct scsiback_tmr into struct vscsibk_pend.
    
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: David Disseldorp <ddiss@suse.de>
    Cc: xen-devel@lists.xenproject.org
    Cc: <stable@vger.kernel.org> # 3.18+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 902b62810a57ba75422f509afaf30e876e2aadfd
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jul 6 15:39:56 2017 -0700

    mm, page_alloc: fix more premature OOM due to race with cpuset update
    
    I would like to stress that this patchset aims to fix issues and cleanup
    the code *within the existing documented semantics*, i.e.  patch 1
    ignores mempolicy restrictions if the set of allowed nodes has no
    intersection with set of nodes allowed by cpuset.  I believe discussing
    potential changes of the semantics can be better done once we have a
    baseline with no known bugs of the current semantics.
    
    I've recently summarized the cpuset/mempolicy issues in a LSF/MM
    proposal [1] and the discussion itself [2].  I've been trying to rewrite
    the handling as proposed, with the idea that changing semantics to make
    all mempolicies static wrt cpuset updates (and discarding the relative
    and default modes) can be tried on top, as there's a high risk of being
    rejected/reverted because somebody might still care about the removed
    modes.
    
    However I haven't yet figured out how to properly:
    
    1) make mempolicies swappable instead of rebinding in place. I thought
       mbind() already works that way and uses refcounting to avoid
       use-after-free of the old policy by a parallel allocation, but turns
       out true refcounting is only done for shared (shmem) mempolicies, and
       the actual protection for mbind() comes from mmap_sem. Extending the
       refcounting means more overhead in allocator hot path. Also swapping
       whole mempolicies means that we have to allocate the new ones, which
       can fail, and reverting of the partially done work also means
       allocating (note that mbind() doesn't care and will just leave part
       of the range updated and part not updated when returning -ENOMEM...).
    
    2) make cpuset's task->mems_allowed also swappable (after converting it
       from nodemask to zonelist, which is the easy part) for mostly the
       same reasons.
    
    The good news is that while trying to do the above, I've at least
    figured out how to hopefully close the remaining premature OOM's, and do
    a buch of cleanups on top, removing quite some of the code that was also
    supposed to prevent the cpuset update races, but doesn't work anymore
    nowadays.  This should fix the most pressing concerns with this topic
    and give us a better baseline before either proceeding with the original
    proposal, or pushing a change of semantics that removes the problem 1)
    above.  I'd be then fine with trying to change the semantic first and
    rewrite later.
    
    Patchset has been tested with the LTP cpuset01 stress test.
    
    [1] https://lkml.kernel.org/r/4c44a589-5fd8-08d0-892c-e893bb525b71@suse.cz
    [2] https://lwn.net/Articles/717797/
    [3] https://marc.info/?l=linux-mm&m=149191957922828&w=2
    
    This patch (of 6):
    
    Commit e47483bca2cc ("mm, page_alloc: fix premature OOM when racing with
    cpuset mems update") has fixed known recent regressions found by LTP's
    cpuset01 testcase.  I have however found that by modifying the testcase
    to use per-vma mempolicies via bind(2) instead of per-task mempolicies
    via set_mempolicy(2), the premature OOM still happens and the issue is
    much older.
    
    The root of the problem is that the cpuset's mems_allowed and
    mempolicy's nodemask can temporarily have no intersection, thus
    get_page_from_freelist() cannot find any usable zone.  The current
    semantic for empty intersection is to ignore mempolicy's nodemask and
    honour cpuset restrictions.  This is checked in node_zonelist(), but the
    racy update can happen after we already passed the check.  Such races
    should be protected by the seqlock task->mems_allowed_seq, but it
    doesn't work here, because 1) mpol_rebind_mm() does not happen under
    seqlock for write, and doing so would lead to deadlock, as it takes
    mmap_sem for write, while the allocation can have mmap_sem for read when
    it's taking the seqlock for read.  And 2) the seqlock cookie of callers
    of node_zonelist() (alloc_pages_vma() and alloc_pages_current()) is
    different than the one of __alloc_pages_slowpath(), so there's still a
    potential race window.
    
    This patch fixes the issue by having __alloc_pages_slowpath() check for
    empty intersection of cpuset and ac->nodemask before OOM or allocation
    failure.  If it's indeed empty, the nodemask is ignored and allocation
    retried, which mimics node_zonelist().  This works fine, because almost
    all callers of __alloc_pages_nodemask are obtaining the nodemask via
    node_zonelist().  The only exception is new_node_page() from hotplug,
    where the potential violation of nodemask isn't an issue, as there's
    already a fallback allocation attempt without any nodemask.  If there's
    a future caller that needs to have its specific nodemask honoured over
    task's cpuset restrictions, we'll have to e.g.  add a gfp flag for that.
    
    Link: http://lkml.kernel.org/r/20170517081140.30654-2-vbabka@suse.cz
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Li Zefan <lizefan@huawei.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Anshuman Khandual <khandual@linux.vnet.ibm.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Dimitri Sivanich <sivanich@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b4fecc67cc569b14301f5a1111363d5818b8da5e
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Jul 6 15:36:59 2017 -0700

    ksm: fix use after free with merge_across_nodes = 0
    
    If merge_across_nodes was manually set to 0 (not the default value) by
    the admin or a tuned profile on NUMA systems triggering cross-NODE page
    migrations, a stable_node use after free could materialize.
    
    If the chain is collapsed stable_node would point to the old chain that
    was already freed.  stable_node_dup would be the stable_node dup now
    converted to a regular stable_node and indexed in the rbtree in
    replacement of the freed stable_node chain (not anymore a dup).
    
    This special case where the chain is collapsed in the NUMA replacement
    path, is now detected by setting stable_node to NULL by the chain_prune
    callee if it decides to collapse the chain.  This tells the NUMA
    replacement code that even if stable_node and stable_node_dup are
    different, this is not a chain if stable_node is NULL, as the
    stable_node_dup was converted to a regular stable_node and the chain was
    collapsed.
    
    It is generally safer for the callee to force the caller stable_node to
    NULL the moment it become stale so any other mistake like this would
    result in an instant Oops easier to debug than an use after free.
    
    Otherwise the replace logic would act like if stable_node was a valid
    chain, when in fact it was freed.  Notably
    stable_node_chain_add_dup(page_node, stable_node) would run on a stable
    stable_node.
    
    Andrey Ryabinin found the source of the use after free in chain_prune().
    
    Link: http://lkml.kernel.org/r/20170512193805.8807-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reported-by: Evgheni Dereveanchin <ederevea@redhat.com>
    Tested-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Petr Holasek <pholasek@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Cc: Gavin Guo <gavin.guo@canonical.com>
    Cc: Jay Vosburgh <jay.vosburgh@canonical.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      drm/amd/powerplay: fix bug fail to remove sysfs when rmmod amdgpu.
      amdgpu: Set cik/si_support to 1 by default if radeon isn't built
      drm/amdgpu/gfx9: fix driver reload with KIQ
      drm/amdgpu/gfx8: fix driver reload with KIQ
      drm/amdgpu: Don't call amd_powerplay_destroy() if we don't have powerplay
      drm/ttm: Fix use-after-free in ttm_bo_clean_mm
      drm/amd/amdgpu: move get memory type function from early init to sw init
      drm/amdgpu/cgs: always set reference clock in mode_info
      drm/amdgpu: fix vblank_time when displays are off
      drm/amd/powerplay: power value format change for Vega10
      drm/amdgpu/gfx9: support the amdgpu.disable_cu option
      drm/amd/powerplay: change PPSMC_MSG_GetCurrPkgPwr for Vega10
      drm/amdgpu: Make amdgpu_cs_parser_init static (v2)
      drm/amdgpu/cs: fix a typo in a comment
      drm/amdgpu: Fix the exported always on CU bitmap
      drm/amdgpu/gfx9: gfx_v9_0_enable_gfx_static_mg_power_gating() can be static
      drm/amdgpu/psp: upper_32_bits/lower_32_bits for address setup
      drm/amd/powerplay/cz: print message if smc message fails
      drm/amdgpu: fix typo in amdgpu_debugfs_test_ib_init
      drm/amdgpu: enable mmhub pg on raven
      ...

commit b6d52ede224836f74dff50666b6a3076a5b8c92d
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:31 2017 +0300

    net, ax25: convert ax25_cb.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 39f25d42c04959f0ddb5b14b01b27ea221736509
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:30 2017 +0300

    net, ax25: convert ax25_route.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 07f2282fc6a169980b08cedf3beaf8334b7b9dde
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:29 2017 +0300

    net, ax25: convert ax25_uid_assoc.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c638457a7c6b8931cd4586d6a13a33887185342d
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:28 2017 +0300

    net, sctp: convert sctp_ep_common.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a4b2b58efd44db68358e1a6b71cf205c795d7ada
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:27 2017 +0300

    net, sctp: convert sctp_transport.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e7f027961759f334bcc939980ec35480faa7ef17
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:26 2017 +0300

    net, sctp: convert sctp_chunk.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c0acdfb409c82047853df1e5f3dbdbe4005c78ae
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:25 2017 +0300

    net, sctp: convert sctp_datamsg.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6871584a5e493a9fa3ad330a73966908b082deac
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:24 2017 +0300

    net, sctp: convert sctp_auth_bytes.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 55eabed60a68e918abc44f6beb64f38cc008b29d
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:23 2017 +0300

    net, xfrm: convert sec_path.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 850a6212c6fa151076dca045821c75025723bc46
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:22 2017 +0300

    net, xfrm: convert xfrm_policy.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88755e9c7c0027fb432ac808326103bc9438d5ea
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:21 2017 +0300

    net, xfrm: convert xfrm_state.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5534a51ab79f8925ee33d9830646f5e6df27eb54
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:20 2017 +0300

    net, x25: convert x25_neigh.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f9ccf6f38a1cfbaf6920b843c09d4e847a89e98
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:19 2017 +0300

    net, x25: convert x25_route.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c5a1c4a2afdcc21434b86996b49460f07ee69a3
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:18 2017 +0300

    net, rds: convert rds_message.m_refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 803ea85053b75d35f9ebb3aa7a28db35d82c6d82
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:17 2017 +0300

    net, rds: convert rds_mr.r_refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7f0292094cbe31f82f2cd9623c8356cc7cf9566
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:16 2017 +0300

    net, rds: convert rds_incoming.i_refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50d61ff789d728a9b6624582ce28441dc0bf5b42
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:15 2017 +0300

    net, rds: convert rds_ib_device.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ff139696d74d0d4917bd259347d00e3a4fcc410
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:14 2017 +0300

    net, sunrpc: convert gss_upcall_msg.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0fa104726b6cc7b1ebb4c60d55cb6abda745f4b6
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:13 2017 +0300

    net, sunrpc: convert gss_cl_ctx.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 156be7edc85b4aeb0f31029f4d60c3de0c997f27
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:12 2017 +0300

    net, netrom: convert nr_node.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit af4207494d9c8e089df80e9c1ceac44f2b3e7b53
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:11 2017 +0300

    net, netrom: convert nr_neigh.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16f73c964956e0f78669f1681191093dd030c9ee
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:10 2017 +0300

    net, ipx: convert ipx_route.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d25189ca8665e3ed493c7bc0607e62c2fcb314ad
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:09 2017 +0300

    net, ipx: convert ipx_interface.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0408c58be5a475c99b271f08d85859f7b59ec767
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:08 2017 +0300

    net, lapb: convert lapb_cb.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7b9364050246bd4c24b36b71c8990b2922dcc027
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:07 2017 +0300

    net, sched: convert Qdisc.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit edcd9270be1ba9c80cd0789ffbae7a7d204b7b05
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:06 2017 +0300

    net, calipso: convert calipso_doi.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2512775985969a3dadb09670701f0c16499ee784
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:05 2017 +0300

    net, bridge: convert net_bridge_vlan.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e00bdbefab731638c0764cf1b9b7398bfbf2bd99
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:04 2017 +0300

    net, atm: convert eg_cache_entry.use from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 937149125448290c5d60da2816556409287750ea
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:03 2017 +0300

    net, atm: convert in_cache_entry.use from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 788936641ac8bc92c531f09b79bf44775fac1350
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:02 2017 +0300

    net, atm: convert lec_arp_table.usage from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 458bc30cec26c2716746ae215ed23773257e417d
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:01 2017 +0300

    net, atm: convert atm_dev.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e0542dd5185e68247b08c3418bdba14644b4c414
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:53:00 2017 +0300

    net, decnet: convert dn_fib_info.fib_clntref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66af846fe54b780f8f5bd9a62aee081bd2ace582
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:52:59 2017 +0300

    net, vxlan: convert vxlan_sock.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f00c854c965fd7197c9ac0f59d823ca0a909e33b
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:52:58 2017 +0300

    net, l2tp: convert l2tp_session.ref_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fbea9e0760bf17e681b9bfc25b97b408708b9ff2
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:52:57 2017 +0300

    net, l2tp: convert l2tp_tunnel.ref_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58951dde05fdac96a9d30805d8fa5d124dd4f92c
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 15:52:56 2017 +0300

    net, llc: convert llc_sap.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fad2083483bb7f743486199f90dc042939323453
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jul 1 00:05:17 2017 +0100

    drm/i915: Fix use-after-free of context during free_contexts
    
    When iterating the list of contexts to free, we need to use a safe
    iterator as we are freeing the link as we go. Pass an extra thick brown
    paper bag.
    
    Fixes: 5f09a9c8ab6b ("drm/i915: Allow contexts to be unreferenced locklessly")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Matthew Auld <matthew.auld@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170630230517.1938-1-chris@chris-wilson.co.uk
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>

commit 0029c0deb590bc18732327d53b8fdab12eec6d7c
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:35:02 2017 +0300

    net, ipv4: convert fib_info.fib_clntref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f6a6fede28e3cc3f9e4669a12839b47011330d95
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:35:01 2017 +0300

    net, ipv4: convert cipso_v4_doi.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 87078f26b6644c2ad8226cf29a7e3a6ef6c74ae2
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:35:00 2017 +0300

    net, ipv6: convert ip6addrlbl_entry.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d12f3827e04b58f617c43f4d44ad3ad788d852b7
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:59 2017 +0300

    net, ipv6: convert xfrm6_tunnel_spi.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit affa78bc6a204fac1b5ced4f34376f53c70ec0ac
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:58 2017 +0300

    net, ipv6: convert ifacaddr6.aca_refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d3981bc615f652b9ead0762dd180125ac2b21a3a
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:57 2017 +0300

    net, ipv6: convert ifmcaddr6.mca_refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 271201c09c86cd75e0fd6206bde689176e85aa21
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:56 2017 +0300

    net, ipv6: convert inet6_ifaddr.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1be9246077f6bb1583f9347c599480621d63c66a
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:55 2017 +0300

    net, ipv6: convert inet6_dev.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0aeea21ada517b99a6e95298ffc105381bcd3a52
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Jul 4 09:34:54 2017 +0300

    net, ipv6: convert ipv6_txoptions.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8046e1955465e3f24e9154d0f2a2e0a8e3f8dccf
Author: John Brooks <john@fastquake.com>
Date:   Mon Jul 3 14:05:34 2017 -0400

    drm/ttm: Fix use-after-free in ttm_bo_clean_mm
    
    We unref the man->move fence in ttm_bo_clean_mm() and then call
    ttm_bo_force_list_clean() which waits on it, except the refcount is now
    zero so a warning is generated (or worse):
    
    [149492.279301] refcount_t: increment on 0; use-after-free.
    [149492.279309] ------------[ cut here ]------------
    [149492.279315] WARNING: CPU: 3 PID: 18726 at lib/refcount.c:150 refcount_inc+0x2b/0x30
    [149492.279315] Modules linked in: vhost_net vhost tun x86_pkg_temp_thermal crc32_pclmul ghash_clmulni_intel efivarfs amdgpu(
    -) i2c_algo_bit drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm drm
    [149492.279326] CPU: 3 PID: 18726 Comm: rmmod Not tainted 4.12.0-rc5-drm-next-4.13-ttmpatch+ #1
    [149492.279326] Hardware name: Gigabyte Technology Co., Ltd. Z97X-UD3H-BK/Z97X-UD3H-BK-CF, BIOS F6 06/17/2014
    [149492.279327] task: ffff8804ddfedcc0 task.stack: ffffc90008d20000
    [149492.279329] RIP: 0010:refcount_inc+0x2b/0x30
    [149492.279330] RSP: 0018:ffffc90008d23c30 EFLAGS: 00010286
    [149492.279331] RAX: 000000000000002b RBX: 0000000000000170 RCX: 0000000000000000
    [149492.279331] RDX: 0000000000000000 RSI: ffff88051ecccbe8 RDI: ffff88051ecccbe8
    [149492.279332] RBP: ffffc90008d23c30 R08: 0000000000000001 R09: 00000000000003ee
    [149492.279333] R10: ffffc90008d23bb0 R11: 00000000000003ee R12: ffff88043aaac960
    [149492.279333] R13: ffff8805005e28a8 R14: 0000000000000002 R15: ffff88050115e178
    [149492.279334] FS:  00007fc540168700(0000) GS:ffff88051ecc0000(0000) knlGS:0000000000000000
    [149492.279335] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [149492.279336] CR2: 00007fc3e8654140 CR3: 000000027ba77000 CR4: 00000000001426e0
    [149492.279337] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [149492.279337] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [149492.279338] Call Trace:
    [149492.279345]  ttm_bo_force_list_clean+0xb9/0x110 [ttm]
    [149492.279348]  ttm_bo_clean_mm+0x7a/0xe0 [ttm]
    [149492.279375]  amdgpu_ttm_fini+0xc9/0x1f0 [amdgpu]
    [149492.279392]  amdgpu_bo_fini+0x12/0x40 [amdgpu]
    [149492.279415]  gmc_v7_0_sw_fini+0x32/0x40 [amdgpu]
    [149492.279430]  amdgpu_fini+0x2c9/0x490 [amdgpu]
    [149492.279445]  amdgpu_device_fini+0x58/0x1b0 [amdgpu]
    [149492.279461]  amdgpu_driver_unload_kms+0x4f/0xa0 [amdgpu]
    [149492.279470]  drm_dev_unregister+0x3c/0xe0 [drm]
    [149492.279485]  amdgpu_pci_remove+0x19/0x30 [amdgpu]
    [149492.279487]  pci_device_remove+0x39/0xc0
    [149492.279490]  device_release_driver_internal+0x155/0x210
    [149492.279491]  driver_detach+0x38/0x70
    [149492.279493]  bus_remove_driver+0x4c/0xa0
    [149492.279494]  driver_unregister+0x2c/0x40
    [149492.279496]  pci_unregister_driver+0x21/0x90
    [149492.279520]  amdgpu_exit+0x15/0x406 [amdgpu]
    [149492.279523]  SyS_delete_module+0x1a8/0x270
    [149492.279525]  ? exit_to_usermode_loop+0x92/0xa0
    [149492.279528]  entry_SYSCALL_64_fastpath+0x13/0x94
    [149492.279529] RIP: 0033:0x7fc53fcb68e7
    [149492.279529] RSP: 002b:00007ffcfbfaabb8 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [149492.279531] RAX: ffffffffffffffda RBX: 0000563117adb200 RCX: 00007fc53fcb68e7
    [149492.279531] RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000563117adb268
    [149492.279532] RBP: 0000000000000003 R08: 0000000000000000 R09: 1999999999999999
    [149492.279533] R10: 0000000000000883 R11: 0000000000000206 R12: 00007ffcfbfa9ba0
    [149492.279533] R13: 0000000000000000 R14: 0000000000000000 R15: 0000563117adb200
    [149492.279534] Code: 55 48 89 e5 e8 77 fe ff ff 84 c0 74 02 5d c3 80 3d 40 f2 a4 00 00 75 f5 48 c7 c7 20 3c ca 81 c6 05 30 f2 a4 00 01 e8 91 f0 d7 ff <0f> ff 5d c3 90 55 48 89 fe bf 01 00 00 00 48 89 e5 e8 9f fe ff
    [149492.279557] ---[ end trace 2d4e0ffcb66a1016 ]---
    
    Unref the fence *after* waiting for it.
    
    v2: Set man->move to NULL after dropping the last ref (Christian König)
    
    Fixes: aff98ba1fdb8 (drm/ttm: wait for eviction in ttm_bo_force_list_clean)
    Signed-off-by: John Brooks <john@fastquake.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit 5ecce4c9b17bed4dc9cb58bfb10447307569b77b
Author: Boris Pismenny <borisp@mellanox.com>
Date:   Tue Jun 27 15:09:13 2017 +0300

    RDMA/uverbs: Check port number supplied by user verbs cmds
    
    The ib_uverbs_create_ah() ind ib_uverbs_modify_qp() calls receive
    the port number from user input as part of its attributes and assumes
    it is valid. Down on the stack, that parameter is used to access kernel
    data structures.  If the value is invalid, the kernel accesses memory
    it should not.  To prevent this, verify the port number before using it.
    
    BUG: KASAN: use-after-free in ib_uverbs_create_ah+0x6d5/0x7b0
    Read of size 4 at addr ffff880018d67ab8 by task syz-executor/313
    
    BUG: KASAN: slab-out-of-bounds in modify_qp.isra.4+0x19d0/0x1ef0
    Read of size 4 at addr ffff88006c40ec58 by task syz-executor/819
    
    Fixes: 67cdb40ca444 ("[IB] uverbs: Implement more commands")
    Fixes: 189aba99e70 ("IB/uverbs: Extend modify_qp and support packet pacing")
    Cc: <stable@vger.kernel.org> # v2.6.14+
    Cc: <security@kernel.org>
    Cc: Yevgeny Kliteynik <kliteyn@mellanox.com>
    Cc: Tziporet Koren <tziporet@mellanox.com>
    Cc: Alex Polak <alexpo@mellanox.com>
    Signed-off-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit fb5c2c17a556d9b00798d6a6b9e624281ee2eb28
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:10 2017 +0300

    net: convert packet_fanout.sk_ref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b4217b82893c23f9f45f77914b5aa3b662b75332
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:09 2017 +0300

    net: convert netlbl_lsm_cache.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c122e14df2d64311d1f0c0bbf4d8f42a7a8baf41
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:08 2017 +0300

    net: convert net.passive from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit edcb691871b27c3cc463b7291afe75f1c3423406
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:07 2017 +0300

    net: convert inet_frag_queue.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 717d1e993ad8d24a711775d8f2afbcdc76a520a1
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:06 2017 +0300

    net: convert fib_rule.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8c9814b97002f61846ebf3048e8df5aae52f7828
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:05 2017 +0300

    net: convert unix_address.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 433cea4d9bbb83cc848b80c51bb849a2ceb49379
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:04 2017 +0300

    net: convert netpoll_info.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7658b36f1b3122c298213eed344f622e836b281b
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:03 2017 +0300

    net: convert in_device.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8851ab526791530d00bbbd0952512d68684a44b8
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:02 2017 +0300

    net: convert ip_mc_list.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 41c6d650f6537e55a1b53438c646fbc3f49176bf
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:01 2017 +0300

    net: convert sock.sk_refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    This patch uses refcount_inc_not_zero() instead of
    atomic_inc_not_zero_hint() due to absense of a _hint()
    version of refcount API. If the hint() version must
    be used, we might need to revisit API.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 14afee4b6092fde451ee17604e5f5c89da33e71e
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:08:00 2017 +0300

    net: convert sock.sk_wmem_alloc from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2638595afccf6554bfe55268ff9b2d3ac3dff2e6
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:59 2017 +0300

    net: convert sk_buff_fclones.fclone_ref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 633547973ffc32fd2c815639d4675e1531f0896f
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:58 2017 +0300

    net: convert sk_buff.users from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53869cebce4bc53f71a080e7830600d4ae1ab712
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:57 2017 +0300

    net: convert nf_bridge_info.use from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6343944bc1050dcec7c959f484ee0fb6928db3be
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:56 2017 +0300

    net: convert neigh_params.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9f23743017d11c103b38d2fa1f64674baeca41cd
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:55 2017 +0300

    net: convert neighbour.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1cc9a98b59ba92fece1277f76aa43e05f34936a6
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Fri Jun 30 13:07:54 2017 +0300

    net: convert inet_peer.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    This conversion requires overall +1 on the whole
    refcounting scheme.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 713a98d90c5ea072c1bb00ef40617aee2cef2232
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Jun 28 09:51:03 2017 +0800

    virtio-net: serialize tx routine during reset
    
    We don't hold any tx lock when trying to disable TX during reset, this
    would lead a use after free since ndo_start_xmit() tries to access
    the virtqueue which has already been freed. Fix this by using
    netif_tx_disable() before freeing the vqs, this could make sure no tx
    after vq freeing.
    
    Reported-by: Jean-Philippe Menil <jpmenil@gmail.com>
    Tested-by: Jean-Philippe Menil <jpmenil@gmail.com>
    Fixes commit f600b6905015 ("virtio_net: Add XDP support")
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Robert McCabe <robert.mccabe@rockwellcollins.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf8ce1ea61b75712a154c93e40f2a5af2e4dd997
Author: Miaoqing Pan <miaoqing@codeaurora.org>
Date:   Tue Jun 27 17:31:49 2017 +0300

    ath9k: fix tx99 use after free
    
    One scenario that could lead to UAF is two threads writing
    simultaneously to the "tx99" debug file. One of them would
    set the "start" value to true and follow to ath9k_tx99_init().
    Inside the function it would set the sc->tx99_state to true
    after allocating sc->tx99skb. Then, the other thread would
    execute write_file_tx99() and call ath9k_tx99_deinit().
    sc->tx99_state would be freed. After that, the first thread
    would continue inside ath9k_tx99_init() and call
    r = ath9k_tx99_send(sc, sc->tx99_skb, &txctl);
    that would make use of the freed sc->tx99_skb memory.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miaoqing Pan <miaoqing@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 725708349172f00b86e2bac5c03de360b79aaf65
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Sat Jun 10 14:10:00 2017 +0200

    s390/pci: improve unreg_ioat error handling
    
    DMA tables are freed in zpci_dma_exit_device regardless of the return
    code of zpci_unregister_ioat. This could lead to a use after free. On
    the other hand during function hot-unplug, zpci_unregister_ioat will
    always fail since the function is already gone.
    
    So let zpci_unregister_ioat report success when the function is gone
    but don't cleanup the dma table when a function could still have it
    in access.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit b88eb199544bd23b709bd56bb9cae8bd114869b0
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jun 20 13:43:20 2017 +0100

    drm/i915: Pass the right flags to i915_vma_move_to_active()
    
    i915_vma_move_to_active() takes the execobject flags and not a boolean!
    Instead of passing EXEC_OBJECT_WRITE we passed true [i.e.
    EXEC_OBJECT_NEEDS_FENCE] causing us to start tracking the
    vma->last_fence access and since we forgot to clear that on unbinding,
    we caused a use-after-free.
    
    [  321.263854] BUG: KASAN: use-after-free in i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264001] Read of size 8 at addr ffff880100fc67d8 by task gem_exec_reloc/2868
    
    [  321.264181] CPU: 0 PID: 2868 Comm: gem_exec_reloc Not tainted 4.12.0-rc6-CI-Custom_2759+ #1
    [  321.264195] Hardware name: GIGABYTE GB-BXBT-1900/MZBAYAB-00, BIOS F6 02/17/2015
    [  321.264208] Call Trace:
    [  321.264234]  dump_stack+0x67/0x99
    [  321.264260]  print_address_description+0x77/0x290
    [  321.264437]  ? i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264459]  kasan_report+0x269/0x350
    [  321.264487]  __asan_report_load8_noabort+0x14/0x20
    [  321.264660]  i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264841]  ? intel_ring_context_pin+0x131/0x690 [i915]
    [  321.265021]  i915_gem_request_alloc+0x2c6/0x1220 [i915]
    [  321.265044]  ? _raw_spin_unlock_irqrestore+0x3d/0x60
    [  321.265226]  i915_gem_do_execbuffer+0xac0/0x2a20 [i915]
    [  321.265250]  ? __lock_acquire+0xceb/0x5450
    [  321.265269]  ? entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  321.265291]  ? kvmalloc_node+0x6b/0x80
    [  321.265310]  ? kvmalloc_node+0x6b/0x80
    [  321.265489]  ? eb_relocate_slow+0xbe0/0xbe0 [i915]
    [  321.265520]  ? ___slab_alloc.constprop.28+0x2ab/0x3d0
    [  321.265549]  ? debug_check_no_locks_freed+0x280/0x280
    [  321.265591]  ? __might_fault+0xc6/0x1b0
    [  321.265782]  i915_gem_execbuffer2+0x14a/0x3f0 [i915]
    [  321.265815]  drm_ioctl+0x4ba/0xaa0
    [  321.265986]  ? i915_gem_execbuffer+0xde0/0xde0 [i915]
    [  321.266017]  ? drm_getunique+0x270/0x270
    [  321.266068]  do_vfs_ioctl+0x17f/0xfa0
    [  321.266091]  ? __fget+0x1ba/0x330
    [  321.266112]  ? lock_acquire+0x390/0x390
    [  321.266133]  ? ioctl_preallocate+0x1d0/0x1d0
    [  321.266164]  ? __fget+0x1db/0x330
    [  321.266194]  ? __fget_light+0x79/0x1f0
    [  321.266219]  SyS_ioctl+0x3c/0x70
    [  321.266247]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  321.266265] RIP: 0033:0x7fcede207357
    [  321.266279] RSP: 002b:00007ffef0effe58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [  321.266307] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007fcede207357
    [  321.266321] RDX: 00007ffef0effef0 RSI: 0000000040406469 RDI: 0000000000000004
    [  321.266335] RBP: ffffffff812097c6 R08: 0000000000000008 R09: 0000000000000000
    [  321.266349] R10: 0000000000000008 R11: 0000000000000246 R12: ffff880116bcff98
    [  321.266363] R13: ffffffff81cb7cb3 R14: ffff880116bcff70 R15: 0000000000000000
    [  321.266385]  ? __this_cpu_preempt_check+0x13/0x20
    [  321.266406]  ? trace_hardirqs_off_caller+0x1d6/0x2c0
    
    [  321.266487] Allocated by task 2868:
    [  321.266568]  save_stack_trace+0x16/0x20
    [  321.266586]  kasan_kmalloc+0xee/0x180
    [  321.266602]  kasan_slab_alloc+0x12/0x20
    [  321.266620]  kmem_cache_alloc+0xc7/0x2e0
    [  321.266795]  i915_vma_instance+0x28c/0x1540 [i915]
    [  321.266964]  eb_lookup_vmas+0x5a7/0x2250 [i915]
    [  321.267130]  i915_gem_do_execbuffer+0x69a/0x2a20 [i915]
    [  321.267296]  i915_gem_execbuffer2+0x14a/0x3f0 [i915]
    [  321.267315]  drm_ioctl+0x4ba/0xaa0
    [  321.267333]  do_vfs_ioctl+0x17f/0xfa0
    [  321.267350]  SyS_ioctl+0x3c/0x70
    [  321.267369]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    
    [  321.267428] Freed by task 177:
    [  321.267502]  save_stack_trace+0x16/0x20
    [  321.267521]  kasan_slab_free+0xad/0x180
    [  321.267539]  kmem_cache_free+0xc5/0x340
    [  321.267710]  i915_vma_unbind+0x666/0x10a0 [i915]
    [  321.267880]  i915_vma_close+0x23a/0x2f0 [i915]
    [  321.268048]  __i915_gem_free_objects+0x17d/0xc70 [i915]
    [  321.268215]  __i915_gem_free_work+0x49/0x70 [i915]
    [  321.268234]  process_one_work+0x66f/0x1410
    [  321.268252]  worker_thread+0xe1/0xe90
    [  321.268269]  kthread+0x304/0x410
    [  321.268285]  ret_from_fork+0x27/0x40
    
    [  321.268346] The buggy address belongs to the object at ffff880100fc6640
                    which belongs to the cache i915_vma of size 656
    [  321.268550] The buggy address is located 408 bytes inside of
                    656-byte region [ffff880100fc6640, ffff880100fc68d0)
    [  321.268741] The buggy address belongs to the page:
    [  321.268837] page:ffffea000403f000 count:1 mapcount:0 mapping:          (null) index:0xffff880100fc5980 compound_mapcount: 0
    [  321.269045] flags: 0x8000000000008100(slab|head)
    [  321.269147] raw: 8000000000008100 0000000000000000 ffff880100fc5980 00000001001e001d
    [  321.269312] raw: ffffea0004038e20 ffff880116b46240 ffff88011646c640 0000000000000000
    [  321.269484] page dumped because: kasan: bad access detected
    
    [  321.269665] Memory state around the buggy address:
    [  321.269778]  ffff880100fc6680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.269949]  ffff880100fc6700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270115] >ffff880100fc6780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270279]                                                     ^
    [  321.270410]  ffff880100fc6800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270576]  ffff880100fc6880: fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc fc
    [  321.270740] ==================================================================
    [  321.270903] Disabling lock debugging due to kernel taint
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=101511
    Fixes: 7dd4f6729f92 ("drm/i915: Async GPU relocation processing")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170620124321.1108-2-chris@chris-wilson.co.uk
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    (cherry picked from commit 25ffaa67459e988e73210543f7e05dfbf3f16163)
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7a3bc034ed5c4b57c145a025070739ec41434e94
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jun 20 13:43:21 2017 +0100

    drm/i915: Assert the vma's active tracking is clear before free
    
    In looking at a use-after-free on Baytrail, it looks like the VMA's
    activity tracking is suspect. Add some asserts to catch freeing the VMA
    before we have decoupled all of its i915_gem_active trackers.
    
    References: https://bugs.freedesktop.org/show_bug.cgi?id=101511
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170620124321.1108-3-chris@chris-wilson.co.uk
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>

commit 25ffaa67459e988e73210543f7e05dfbf3f16163
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jun 20 13:43:20 2017 +0100

    drm/i915: Pass the right flags to i915_vma_move_to_active()
    
    i915_vma_move_to_active() takes the execobject flags and not a boolean!
    Instead of passing EXEC_OBJECT_WRITE we passed true [i.e.
    EXEC_OBJECT_NEEDS_FENCE] causing us to start tracking the
    vma->last_fence access and since we forgot to clear that on unbinding,
    we caused a use-after-free.
    
    [  321.263854] BUG: KASAN: use-after-free in i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264001] Read of size 8 at addr ffff880100fc67d8 by task gem_exec_reloc/2868
    
    [  321.264181] CPU: 0 PID: 2868 Comm: gem_exec_reloc Not tainted 4.12.0-rc6-CI-Custom_2759+ #1
    [  321.264195] Hardware name: GIGABYTE GB-BXBT-1900/MZBAYAB-00, BIOS F6 02/17/2015
    [  321.264208] Call Trace:
    [  321.264234]  dump_stack+0x67/0x99
    [  321.264260]  print_address_description+0x77/0x290
    [  321.264437]  ? i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264459]  kasan_report+0x269/0x350
    [  321.264487]  __asan_report_load8_noabort+0x14/0x20
    [  321.264660]  i915_gem_request_retire+0x1728/0x1740 [i915]
    [  321.264841]  ? intel_ring_context_pin+0x131/0x690 [i915]
    [  321.265021]  i915_gem_request_alloc+0x2c6/0x1220 [i915]
    [  321.265044]  ? _raw_spin_unlock_irqrestore+0x3d/0x60
    [  321.265226]  i915_gem_do_execbuffer+0xac0/0x2a20 [i915]
    [  321.265250]  ? __lock_acquire+0xceb/0x5450
    [  321.265269]  ? entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  321.265291]  ? kvmalloc_node+0x6b/0x80
    [  321.265310]  ? kvmalloc_node+0x6b/0x80
    [  321.265489]  ? eb_relocate_slow+0xbe0/0xbe0 [i915]
    [  321.265520]  ? ___slab_alloc.constprop.28+0x2ab/0x3d0
    [  321.265549]  ? debug_check_no_locks_freed+0x280/0x280
    [  321.265591]  ? __might_fault+0xc6/0x1b0
    [  321.265782]  i915_gem_execbuffer2+0x14a/0x3f0 [i915]
    [  321.265815]  drm_ioctl+0x4ba/0xaa0
    [  321.265986]  ? i915_gem_execbuffer+0xde0/0xde0 [i915]
    [  321.266017]  ? drm_getunique+0x270/0x270
    [  321.266068]  do_vfs_ioctl+0x17f/0xfa0
    [  321.266091]  ? __fget+0x1ba/0x330
    [  321.266112]  ? lock_acquire+0x390/0x390
    [  321.266133]  ? ioctl_preallocate+0x1d0/0x1d0
    [  321.266164]  ? __fget+0x1db/0x330
    [  321.266194]  ? __fget_light+0x79/0x1f0
    [  321.266219]  SyS_ioctl+0x3c/0x70
    [  321.266247]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  321.266265] RIP: 0033:0x7fcede207357
    [  321.266279] RSP: 002b:00007ffef0effe58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [  321.266307] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007fcede207357
    [  321.266321] RDX: 00007ffef0effef0 RSI: 0000000040406469 RDI: 0000000000000004
    [  321.266335] RBP: ffffffff812097c6 R08: 0000000000000008 R09: 0000000000000000
    [  321.266349] R10: 0000000000000008 R11: 0000000000000246 R12: ffff880116bcff98
    [  321.266363] R13: ffffffff81cb7cb3 R14: ffff880116bcff70 R15: 0000000000000000
    [  321.266385]  ? __this_cpu_preempt_check+0x13/0x20
    [  321.266406]  ? trace_hardirqs_off_caller+0x1d6/0x2c0
    
    [  321.266487] Allocated by task 2868:
    [  321.266568]  save_stack_trace+0x16/0x20
    [  321.266586]  kasan_kmalloc+0xee/0x180
    [  321.266602]  kasan_slab_alloc+0x12/0x20
    [  321.266620]  kmem_cache_alloc+0xc7/0x2e0
    [  321.266795]  i915_vma_instance+0x28c/0x1540 [i915]
    [  321.266964]  eb_lookup_vmas+0x5a7/0x2250 [i915]
    [  321.267130]  i915_gem_do_execbuffer+0x69a/0x2a20 [i915]
    [  321.267296]  i915_gem_execbuffer2+0x14a/0x3f0 [i915]
    [  321.267315]  drm_ioctl+0x4ba/0xaa0
    [  321.267333]  do_vfs_ioctl+0x17f/0xfa0
    [  321.267350]  SyS_ioctl+0x3c/0x70
    [  321.267369]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    
    [  321.267428] Freed by task 177:
    [  321.267502]  save_stack_trace+0x16/0x20
    [  321.267521]  kasan_slab_free+0xad/0x180
    [  321.267539]  kmem_cache_free+0xc5/0x340
    [  321.267710]  i915_vma_unbind+0x666/0x10a0 [i915]
    [  321.267880]  i915_vma_close+0x23a/0x2f0 [i915]
    [  321.268048]  __i915_gem_free_objects+0x17d/0xc70 [i915]
    [  321.268215]  __i915_gem_free_work+0x49/0x70 [i915]
    [  321.268234]  process_one_work+0x66f/0x1410
    [  321.268252]  worker_thread+0xe1/0xe90
    [  321.268269]  kthread+0x304/0x410
    [  321.268285]  ret_from_fork+0x27/0x40
    
    [  321.268346] The buggy address belongs to the object at ffff880100fc6640
                    which belongs to the cache i915_vma of size 656
    [  321.268550] The buggy address is located 408 bytes inside of
                    656-byte region [ffff880100fc6640, ffff880100fc68d0)
    [  321.268741] The buggy address belongs to the page:
    [  321.268837] page:ffffea000403f000 count:1 mapcount:0 mapping:          (null) index:0xffff880100fc5980 compound_mapcount: 0
    [  321.269045] flags: 0x8000000000008100(slab|head)
    [  321.269147] raw: 8000000000008100 0000000000000000 ffff880100fc5980 00000001001e001d
    [  321.269312] raw: ffffea0004038e20 ffff880116b46240 ffff88011646c640 0000000000000000
    [  321.269484] page dumped because: kasan: bad access detected
    
    [  321.269665] Memory state around the buggy address:
    [  321.269778]  ffff880100fc6680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.269949]  ffff880100fc6700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270115] >ffff880100fc6780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270279]                                                     ^
    [  321.270410]  ffff880100fc6800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  321.270576]  ffff880100fc6880: fb fb fb fb fb fb fb fb fb fb fc fc fc fc fc fc
    [  321.270740] ==================================================================
    [  321.270903] Disabling lock debugging due to kernel taint
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=101511
    Fixes: 7dd4f6729f92 ("drm/i915: Async GPU relocation processing")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170620124321.1108-2-chris@chris-wilson.co.uk
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>

commit eb8d0eaaf84b0398533a7c091a0b65663f2fd7ea
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Jun 19 17:49:48 2017 +0200

    ALSA: hda: Fix potential race at unregistration and unsol events
    
    When the codec device is unregistered / freed, it may release the
    resource while being used in an unsolicited event like the jack
    detection work.  This leads to use-after-free.
    
    The fix here is to unregister the device at first, i.e. removing the
    codec from the list, then flushing the pending works to assure that
    all unsol events are gone.  After this point, we're free from
    accessing the codec via unsol events, thus can release the resources
    gracefully.
    
    The issue was spotted originally by Intel CI, but it couldn't be
    reproduced reliably by its nature.  So let's hope this fix really
    addresses the whole issues.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=196045
    Reported-by: Martin Peres <martin.peres@free.fr>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 86fdb3448cc1ffe0e9f55380f1410f1d12c35f95
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Jun 17 16:10:27 2017 +0800

    sctp: ensure ep is not destroyed before doing the dump
    
    Now before dumping a sock in sctp_diag, it only holds the sock while
    the ep may be already destroyed. It can cause a use-after-free panic
    when accessing ep->asocs.
    
    This patch is to set sctp_sk(sk)->ep NULL in sctp_endpoint_destroy,
    and check if this ep is already destroyed before dumping this ep.
    
    Suggested-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdrver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f16443a034c7aa359ddf6f0f9bc40d01ca31faea
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Jun 13 15:23:42 2017 -0400

    USB: gadgetfs, dummy-hcd, net2280: fix locking for callbacks
    
    Using the syzkaller kernel fuzzer, Andrey Konovalov generated the
    following error in gadgetfs:
    
    > BUG: KASAN: use-after-free in __lock_acquire+0x3069/0x3690
    > kernel/locking/lockdep.c:3246
    > Read of size 8 at addr ffff88003a2bdaf8 by task kworker/3:1/903
    >
    > CPU: 3 PID: 903 Comm: kworker/3:1 Not tainted 4.12.0-rc4+ #35
    > Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    > Workqueue: usb_hub_wq hub_event
    > Call Trace:
    >  __dump_stack lib/dump_stack.c:16 [inline]
    >  dump_stack+0x292/0x395 lib/dump_stack.c:52
    >  print_address_description+0x78/0x280 mm/kasan/report.c:252
    >  kasan_report_error mm/kasan/report.c:351 [inline]
    >  kasan_report+0x230/0x340 mm/kasan/report.c:408
    >  __asan_report_load8_noabort+0x19/0x20 mm/kasan/report.c:429
    >  __lock_acquire+0x3069/0x3690 kernel/locking/lockdep.c:3246
    >  lock_acquire+0x22d/0x560 kernel/locking/lockdep.c:3855
    >  __raw_spin_lock include/linux/spinlock_api_smp.h:142 [inline]
    >  _raw_spin_lock+0x2f/0x40 kernel/locking/spinlock.c:151
    >  spin_lock include/linux/spinlock.h:299 [inline]
    >  gadgetfs_suspend+0x89/0x130 drivers/usb/gadget/legacy/inode.c:1682
    >  set_link_state+0x88e/0xae0 drivers/usb/gadget/udc/dummy_hcd.c:455
    >  dummy_hub_control+0xd7e/0x1fb0 drivers/usb/gadget/udc/dummy_hcd.c:2074
    >  rh_call_control drivers/usb/core/hcd.c:689 [inline]
    >  rh_urb_enqueue drivers/usb/core/hcd.c:846 [inline]
    >  usb_hcd_submit_urb+0x92f/0x20b0 drivers/usb/core/hcd.c:1650
    >  usb_submit_urb+0x8b2/0x12c0 drivers/usb/core/urb.c:542
    >  usb_start_wait_urb+0x148/0x5b0 drivers/usb/core/message.c:56
    >  usb_internal_control_msg drivers/usb/core/message.c:100 [inline]
    >  usb_control_msg+0x341/0x4d0 drivers/usb/core/message.c:151
    >  usb_clear_port_feature+0x74/0xa0 drivers/usb/core/hub.c:412
    >  hub_port_disable+0x123/0x510 drivers/usb/core/hub.c:4177
    >  hub_port_init+0x1ed/0x2940 drivers/usb/core/hub.c:4648
    >  hub_port_connect drivers/usb/core/hub.c:4826 [inline]
    >  hub_port_connect_change drivers/usb/core/hub.c:4999 [inline]
    >  port_event drivers/usb/core/hub.c:5105 [inline]
    >  hub_event+0x1ae1/0x3d40 drivers/usb/core/hub.c:5185
    >  process_one_work+0xc08/0x1bd0 kernel/workqueue.c:2097
    >  process_scheduled_works kernel/workqueue.c:2157 [inline]
    >  worker_thread+0xb2b/0x1860 kernel/workqueue.c:2233
    >  kthread+0x363/0x440 kernel/kthread.c:231
    >  ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:424
    >
    > Allocated by task 9958:
    >  save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
    >  save_stack+0x43/0xd0 mm/kasan/kasan.c:513
    >  set_track mm/kasan/kasan.c:525 [inline]
    >  kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:617
    >  kmem_cache_alloc_trace+0x87/0x280 mm/slub.c:2745
    >  kmalloc include/linux/slab.h:492 [inline]
    >  kzalloc include/linux/slab.h:665 [inline]
    >  dev_new drivers/usb/gadget/legacy/inode.c:170 [inline]
    >  gadgetfs_fill_super+0x24f/0x540 drivers/usb/gadget/legacy/inode.c:1993
    >  mount_single+0xf6/0x160 fs/super.c:1192
    >  gadgetfs_mount+0x31/0x40 drivers/usb/gadget/legacy/inode.c:2019
    >  mount_fs+0x9c/0x2d0 fs/super.c:1223
    >  vfs_kern_mount.part.25+0xcb/0x490 fs/namespace.c:976
    >  vfs_kern_mount fs/namespace.c:2509 [inline]
    >  do_new_mount fs/namespace.c:2512 [inline]
    >  do_mount+0x41b/0x2d90 fs/namespace.c:2834
    >  SYSC_mount fs/namespace.c:3050 [inline]
    >  SyS_mount+0xb0/0x120 fs/namespace.c:3027
    >  entry_SYSCALL_64_fastpath+0x1f/0xbe
    >
    > Freed by task 9960:
    >  save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
    >  save_stack+0x43/0xd0 mm/kasan/kasan.c:513
    >  set_track mm/kasan/kasan.c:525 [inline]
    >  kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:590
    >  slab_free_hook mm/slub.c:1357 [inline]
    >  slab_free_freelist_hook mm/slub.c:1379 [inline]
    >  slab_free mm/slub.c:2961 [inline]
    >  kfree+0xed/0x2b0 mm/slub.c:3882
    >  put_dev+0x124/0x160 drivers/usb/gadget/legacy/inode.c:163
    >  gadgetfs_kill_sb+0x33/0x60 drivers/usb/gadget/legacy/inode.c:2027
    >  deactivate_locked_super+0x8d/0xd0 fs/super.c:309
    >  deactivate_super+0x21e/0x310 fs/super.c:340
    >  cleanup_mnt+0xb7/0x150 fs/namespace.c:1112
    >  __cleanup_mnt+0x1b/0x20 fs/namespace.c:1119
    >  task_work_run+0x1a0/0x280 kernel/task_work.c:116
    >  exit_task_work include/linux/task_work.h:21 [inline]
    >  do_exit+0x18a8/0x2820 kernel/exit.c:878
    >  do_group_exit+0x14e/0x420 kernel/exit.c:982
    >  get_signal+0x784/0x1780 kernel/signal.c:2318
    >  do_signal+0xd7/0x2130 arch/x86/kernel/signal.c:808
    >  exit_to_usermode_loop+0x1ac/0x240 arch/x86/entry/common.c:157
    >  prepare_exit_to_usermode arch/x86/entry/common.c:194 [inline]
    >  syscall_return_slowpath+0x3ba/0x410 arch/x86/entry/common.c:263
    >  entry_SYSCALL_64_fastpath+0xbc/0xbe
    >
    > The buggy address belongs to the object at ffff88003a2bdae0
    >  which belongs to the cache kmalloc-1024 of size 1024
    > The buggy address is located 24 bytes inside of
    >  1024-byte region [ffff88003a2bdae0, ffff88003a2bdee0)
    > The buggy address belongs to the page:
    > page:ffffea0000e8ae00 count:1 mapcount:0 mapping:          (null)
    > index:0x0 compound_mapcount: 0
    > flags: 0x100000000008100(slab|head)
    > raw: 0100000000008100 0000000000000000 0000000000000000 0000000100170017
    > raw: ffffea0000ed3020 ffffea0000f5f820 ffff88003e80efc0 0000000000000000
    > page dumped because: kasan: bad access detected
    >
    > Memory state around the buggy address:
    >  ffff88003a2bd980: fb fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >  ffff88003a2bda00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    > >ffff88003a2bda80: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fb
    >                                                                 ^
    >  ffff88003a2bdb00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >  ffff88003a2bdb80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    > ==================================================================
    
    What this means is that the gadgetfs_suspend() routine was trying to
    access dev->lock after it had been deallocated.  The root cause is a
    race in the dummy_hcd driver; the dummy_udc_stop() routine can race
    with the rest of the driver because it contains no locking.  And even
    when proper locking is added, it can still race with the
    set_link_state() function because that function incorrectly drops the
    private spinlock before invoking any gadget driver callbacks.
    
    The result of this race, as seen above, is that set_link_state() can
    invoke a callback in gadgetfs even after gadgetfs has been unbound
    from dummy_hcd's UDC and its private data structures have been
    deallocated.
    
    include/linux/usb/gadget.h documents that the ->reset, ->disconnect,
    ->suspend, and ->resume callbacks may be invoked in interrupt context.
    In general this is necessary, to prevent races with gadget driver
    removal.  This patch fixes dummy_hcd to retain the spinlock across
    these calls, and it adds a spinlock acquisition to dummy_udc_stop() to
    prevent the race.
    
    The net2280 driver makes the same mistake of dropping the private
    spinlock for its ->disconnect and ->reset callback invocations.  The
    patch fixes it too.
    
    Lastly, since gadgetfs_suspend() may be invoked in interrupt context,
    it cannot assume that interrupts are enabled when it runs.  It must
    use spin_lock_irqsave() instead of spin_lock_irq().  The patch fixes
    that bug as well.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-and-tested-by: Andrey Konovalov <andreyknvl@google.com>
    CC: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8a894b218138888542a5058d0e902378fd0d4ec
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 15 16:33:58 2017 +0800

    ipv6: fix calling in6_ifa_hold incorrectly for dad work
    
    Now when starting the dad work in addrconf_mod_dad_work, if the dad work
    is idle and queued, it needs to hold ifa.
    
    The problem is there's one gap in [1], during which if the pending dad work
    is removed elsewhere. It will miss to hold ifa, but the dad word is still
    idea and queue.
    
            if (!delayed_work_pending(&ifp->dad_work))
                    in6_ifa_hold(ifp);
                        <--------------[1]
            mod_delayed_work(addrconf_wq, &ifp->dad_work, delay);
    
    An use-after-free issue can be caused by this.
    
    Chen Wei found this issue when WARN_ON(!hlist_unhashed(&ifp->addr_lst)) in
    net6_ifa_finish_destroy was hit because of it.
    
    As Hannes' suggestion, this patch is to fix it by holding ifa first in
    addrconf_mod_dad_work, then calling mod_delayed_work and putting ifa if
    the dad_work is already in queue.
    
    Note that this patch did not choose to fix it with:
    
      if (!mod_delayed_work(delay))
              in6_ifa_hold(ifp);
    
    As with it, when delay == 0, dad_work would be scheduled immediately, all
    addrconf_mod_dad_work(0) callings had to be moved under ifp->lock.
    
    Reported-by: Wei Chen <weichen@redhat.com>
    Suggested-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      i40e: Fix a sleep-in-atomic bug
      net: don't global ICMP rate limit packets originating from loopback
      net/act_pedit: fix an error code
      net: update undefined ->ndo_change_mtu() comment
      net_sched: move tcf_lock down after gen_replace_estimator()
      caif: Add sockaddr length check before accessing sa_family in connect handler
      qed: fix dump of context data
      qmi_wwan: new Telewell and Sierra device IDs
      net: phy: Fix MDIO_THUNDER dependencies
      netconsole: Remove duplicate "netconsole: " logging prefix
      igmp: acquire pmc lock for ip_mc_clear_src()
      r8152: give the device version
      net: rps: fix uninitialized symbol warning
      mac80211: don't send SMPS action frame in AP mode when not needed
      mac80211/wpa: use constant time memory comparison for MACs
      mac80211: set bss_info data before configuring the channel
      mac80211: remove 5/10 MHz rate code from station MLME
      mac80211: Fix incorrect condition when checking rx timestamp
      mac80211: don't look at the PM bit of BAR frames
      i40e: fix handling of HW ATR eviction
      ...

commit dc9edc44de6cd7cc8cc7f5b36c1adb221eda3207
Author: Bart Van Assche <bart.vanassche@sandisk.com>
Date:   Wed Jun 14 13:27:50 2017 -0600

    block: Fix a blk_exit_rl() regression
    
    Avoid that the following complaint is reported:
    
     BUG: sleeping function called from invalid context at kernel/workqueue.c:2790
     in_atomic(): 1, irqs_disabled(): 0, pid: 41, name: rcuop/3
     1 lock held by rcuop/3/41:
      #0:  (rcu_callback){......}, at: [<ffffffff8111f9a2>] rcu_nocb_kthread+0x282/0x500
     Call Trace:
      dump_stack+0x86/0xcf
      ___might_sleep+0x174/0x260
      __might_sleep+0x4a/0x80
      flush_work+0x7e/0x2e0
      __cancel_work_timer+0x143/0x1c0
      cancel_work_sync+0x10/0x20
      blk_throtl_exit+0x25/0x60
      blkcg_exit_queue+0x35/0x40
      blk_release_queue+0x42/0x130
      kobject_put+0xa9/0x190
    
    This happens since we invoke callbacks that need to block from the
    queue release handler. Fix this by pushing the final release to
    a workqueue.
    
    Reported-by: Ross Zwisler <zwisler@gmail.com>
    Fixes: commit b425e5049258 ("block: Avoid that blk_exit_rl() triggers a use-after-free")
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Ross Zwisler <ross.zwisler@linux.intel.com>
    
    Updated changelog
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 71df1d7ccad1c36f7321d6b3b48f2ea42681c363
Author: Juergen Gross <jgross@suse.com>
Date:   Thu May 18 17:28:48 2017 +0200

    xen/blkback: don't free be structure too early
    
    The be structure must not be freed when freeing the blkif structure
    isn't done. Otherwise a use-after-free of be when unmapping the ring
    used for communicating with the frontend will occur in case of a
    late call of xenblk_disconnect() (e.g. due to an I/O still active
    when trying to disconnect).
    
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Steven Haigh <netwiz@crc.id.au>
    Acked-by: Roger Pau Monné <roger.pau@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>

commit c38b7d327aafd1e3ad7ff53eefac990673b65667
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Jun 12 09:52:26 2017 -0700

    igmp: acquire pmc lock for ip_mc_clear_src()
    
    Andrey reported a use-after-free in add_grec():
    
            for (psf = *psf_list; psf; psf = psf_next) {
                    ...
                    psf_next = psf->sf_next;
    
    where the struct ip_sf_list's were already freed by:
    
     kfree+0xe8/0x2b0 mm/slub.c:3882
     ip_mc_clear_src+0x69/0x1c0 net/ipv4/igmp.c:2078
     ip_mc_dec_group+0x19a/0x470 net/ipv4/igmp.c:1618
     ip_mc_drop_socket+0x145/0x230 net/ipv4/igmp.c:2609
     inet_release+0x4e/0x1c0 net/ipv4/af_inet.c:411
     sock_release+0x8d/0x1e0 net/socket.c:597
     sock_close+0x16/0x20 net/socket.c:1072
    
    This happens because we don't hold pmc->lock in ip_mc_clear_src()
    and a parallel mr_ifc_timer timer could jump in and access them.
    
    The RCU lock is there but it is merely for pmc itself, this
    spinlock could actually ensure we don't access them in parallel.
    
    Thanks to Eric and Long for discussion on this bug.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c592fafbdbb6b1279b76a54722d1465ca77e5bde
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jun 6 17:59:03 2017 +0200

    thermal: max77620: fix device-node reference imbalance
    
    The thermal child device reuses the parent MFD-device device-tree node
    when registering a thermal zone, but did not take a reference to the
    node.
    
    This leads to a reference imbalance, and potential use-after-free, when
    the node reference is dropped by the platform-bus device destructor
    (once for the child and later again for the parent).
    
    Fix this by dropping any reference already held to a device-tree node
    and getting a reference to the parent's node which will be balanced on
    reprobe or on platform-device release, whichever comes first.
    
    Note that simply clearing the of_node pointer on probe errors and on
    driver unbind would not allow the use of device-managed resources as
    specifically thermal_zone_of_sensor_unregister() claims that a valid
    device-tree node pointer is needed during deregistration (even if it
    currently does not seem to use it).
    
    Fixes: ec4664b3fd6d ("thermal: max77620: Add thermal driver for reporting junction temp")
    Cc: stable <stable@vger.kernel.org>     # 4.9
    Cc: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6882545d8c06f99e9e117741cc87f3338b0bef
Author: Bart Van Assche <bart.vanassche@sandisk.com>
Date:   Fri Jun 2 14:21:52 2017 -0700

    scsi: Avoid that scsi_exit_rq() triggers a use-after-free
    
    Dereferencing shost from scsi_exit_rq() is not safe because the SCSI
    host may already have been freed when scsi_exit_rq() is called.
    Increasing the shost reference count in scsi_init_rq() and dropping that
    reference in scsi_exit_rq() is nontrivial since scsi_host_dev_release()
    may sleep and since scsi_exit_rq() may be called from interrupt
    context. Since scsi_exit_rq() only needs a single bit from shost, copy
    that bit into struct scsi_cmnd.
    
    Reported-by: Scott Bauer <scott.bauer@intel.com>
    Fixes: e9c787e65c0c ("scsi: allocate scsi_cmnd structures as part of struct request")
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Scott Bauer <scott.bauer@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 2757fe1d8ebd0e6ab1dbf1105978b8c8369dcc49
Author: Stefan Haberland <sth@linux.vnet.ibm.com>
Date:   Tue May 16 10:30:13 2017 +0200

    s390/dasd: fix unusable device after safe offline processing
    
    The safe offline processing needs, as well as the normal offline
    processing, to be locked against multiple parallel executions. But it
    should be able to be overtaken by a normal offline processing to make sure
    that the device does not wait forever for outstanding I/O if the user
    wants to.
    
    Unfortunately the parallel processing of safe offline and normal offline
    might lead to a race situation where both threads report successful
    execution to the CIO layer which in turn tries to deregister the kobject
    of the device twice. This leads to a
    
    refcount_t: underflow; use-after-free.
    
    error and the device is not able to be set online again afterwards without
    a reboot.
    
    Correct the locking of the safe offline processing by doing the following:
            - Use the cdev lock to secure all set and test operations to the
              device flags.
            - Two safe offline processes are locked against each other using
              the DASD_FLAG_SAFE_OFFLINE and DASD_FLAG_SAFE_OFFLINE_RUNNING
              device flags.
              The differentiation between offline triggered and offline running
              is needed since the normal offline attribute is owned by CIO and
              we have to pass over control in between.
            - The dasd_generic_set_offline process handles the offline
              processing. It is locked against parallel execution using the
              DASD_FLAG_OFFLINE.
            - Only a running safe offline should be able to be overtaken by a
              single normal offline. This is ensured by clearing the
              DASD_FLAG_SAFE_OFFLINE_RUNNING flag when a normal offline
              overtakes. So this can only happen ones.
            - The safe offline just aborts in this case doing nothing and
              the normal offline processing finishes as usual.
    
    Signed-off-by: Stefan Haberland <sth@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 73d4e580ccc5c3e05cea002f18111f66c9c07034
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Fri Jun 2 20:00:17 2017 -0700

    target: Fix kref->refcount underflow in transport_cmd_finish_abort
    
    This patch fixes a se_cmd->cmd_kref underflow during CMD_T_ABORTED
    when a fabric driver drops it's second reference from below the
    target_core_tmr.c based callers of transport_cmd_finish_abort().
    
    Recently with the conversion of kref to refcount_t, this bug was
    manifesting itself as:
    
    [705519.601034] refcount_t: underflow; use-after-free.
    [705519.604034] INFO: NMI handler (kgdb_nmi_handler) took too long to run: 20116.512 msecs
    [705539.719111] ------------[ cut here ]------------
    [705539.719117] WARNING: CPU: 3 PID: 26510 at lib/refcount.c:184 refcount_sub_and_test+0x33/0x51
    
    Since the original kref atomic_t based kref_put() didn't check for
    underflow and only invoked the final callback when zero was reached,
    this bug did not manifest in practice since all se_cmd memory is
    using preallocated tags.
    
    To address this, go ahead and propigate the existing return from
    transport_put_cmd() up via transport_cmd_finish_abort(), and
    change transport_cmd_finish_abort() + core_tmr_handle_tas_abort()
    callers to only do their local target_put_sess_cmd() if necessary.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Tested-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Himanshu Madhani <himanshu.madhani@qlogic.com>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Cc: stable@vger.kernel.org # 3.14+
    Tested-by: Gary Guo <ghg@datera.io>
    Tested-by: Chu Yuan Lin <cyl@datera.io>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commits)
      net: stmmac: fix a broken u32 less than zero check
      net: stmmac: fix completely hung TX when using TSO
      net: ethoc: enable NAPI before poll may be scheduled
      net: bridge: fix a null pointer dereference in br_afspec
      ravb: Fix use-after-free on `ifconfig eth0 down`
      net/ipv6: Fix CALIPSO causing GPF with datagram support
      net: stmmac: ensure jumbo_frm error return is correctly checked for -ve value
      Revert "sit: reload iphdr in ipip6_rcv"
      i40e/i40evf: proper update of the page_offset field
      i40e: Fix state flags for bit set and clean operations of PF
      iwlwifi: fix host command memory leaks
      iwlwifi: fix min API version for 7265D, 3168, 8000 and 8265
      iwlwifi: mvm: clear new beacon command template struct
      iwlwifi: mvm: don't fail when removing a key from an inexisting sta
      iwlwifi: pcie: only use d0i3 in suspend/resume if system_pm is set to d0i3
      iwlwifi: mvm: fix firmware debug restart recording
      iwlwifi: tt: move ucode_loaded check under mutex
      iwlwifi: mvm: support ibss in dqa mode
      iwlwifi: mvm: Fix command queue number on d0i3 flow
      iwlwifi: mvm: rs: start using LQ command color
      ...

commit 79514ef670e9e575a1fe36922268c439d0f0ca8a
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Tue Jun 6 00:08:10 2017 +0200

    ravb: Fix use-after-free on `ifconfig eth0 down`
    
    Commit a47b70ea86bd ("ravb: unmap descriptors when freeing rings") has
    introduced the issue seen in [1] reproduced on H3ULCB board.
    
    Fix this by relocating the RX skb ringbuffer free operation, so that
    swiotlb page unmapping can be done first. Freeing of aligned TX buffers
    is not relevant to the issue seen in [1]. Still, reposition TX free
    calls as well, to have all kfree() operations performed consistently
    _after_ dma_unmap_*()/dma_free_*().
    
    [1] Console screenshot with the problem reproduced:
    
    salvator-x login: root
    root@salvator-x:~# ifconfig eth0 up
    Micrel KSZ9031 Gigabit PHY e6800000.ethernet-ffffffff:00: \
           attached PHY driver [Micrel KSZ9031 Gigabit PHY]   \
           (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=235)
    IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready
    root@salvator-x:~#
    root@salvator-x:~# ifconfig eth0 down
    
    ==================================================================
    BUG: KASAN: use-after-free in swiotlb_tbl_unmap_single+0xc4/0x35c
    Write of size 1538 at addr ffff8006d884f780 by task ifconfig/1649
    
    CPU: 0 PID: 1649 Comm: ifconfig Not tainted 4.12.0-rc4-00004-g112eb07287d1 #32
    Hardware name: Renesas H3ULCB board based on r8a7795 (DT)
    Call trace:
    [<ffff20000808f11c>] dump_backtrace+0x0/0x3a4
    [<ffff20000808f4d4>] show_stack+0x14/0x1c
    [<ffff20000865970c>] dump_stack+0xf8/0x150
    [<ffff20000831f8b0>] print_address_description+0x7c/0x330
    [<ffff200008320010>] kasan_report+0x2e0/0x2f4
    [<ffff20000831eac0>] check_memory_region+0x20/0x14c
    [<ffff20000831f054>] memcpy+0x48/0x68
    [<ffff20000869ed50>] swiotlb_tbl_unmap_single+0xc4/0x35c
    [<ffff20000869fcf4>] unmap_single+0x90/0xa4
    [<ffff20000869fd14>] swiotlb_unmap_page+0xc/0x14
    [<ffff2000080a2974>] __swiotlb_unmap_page+0xcc/0xe4
    [<ffff2000088acdb8>] ravb_ring_free+0x514/0x870
    [<ffff2000088b25dc>] ravb_close+0x288/0x36c
    [<ffff200008aaf8c4>] __dev_close_many+0x14c/0x174
    [<ffff200008aaf9b4>] __dev_close+0xc8/0x144
    [<ffff200008ac2100>] __dev_change_flags+0xd8/0x194
    [<ffff200008ac221c>] dev_change_flags+0x60/0xb0
    [<ffff200008ba2dec>] devinet_ioctl+0x484/0x9d4
    [<ffff200008ba7b78>] inet_ioctl+0x190/0x194
    [<ffff200008a78c44>] sock_do_ioctl+0x78/0xa8
    [<ffff200008a7a128>] sock_ioctl+0x110/0x3c4
    [<ffff200008365a70>] vfs_ioctl+0x90/0xa0
    [<ffff200008365dbc>] do_vfs_ioctl+0x148/0xc38
    [<ffff2000083668f0>] SyS_ioctl+0x44/0x74
    [<ffff200008083770>] el0_svc_naked+0x24/0x28
    
    The buggy address belongs to the page:
    page:ffff7e001b6213c0 count:0 mapcount:0 mapping:          (null) index:0x0
    flags: 0x4000000000000000()
    raw: 4000000000000000 0000000000000000 0000000000000000 00000000ffffffff
    raw: 0000000000000000 ffff7e001b6213e0 0000000000000000 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8006d884f680: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8006d884f700: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    >ffff8006d884f780: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                       ^
     ffff8006d884f800: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff8006d884f880: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    ==================================================================
    Disabling lock debugging due to kernel taint
    root@salvator-x:~#
    
    Fixes: a47b70ea86bd ("ravb: unmap descriptors when freeing rings")
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Acked-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d964f04a8fde84d978eff0d96561faa6e8de24de
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Jun 6 23:22:00 2017 +0800

    blk-mq: fix direct issue
    
    If queue is stopped, we shouldn't dispatch request into driver and
    hardware, unfortunately the check is removed in bd166ef183c2(blk-mq-sched:
    add framework for MQ capable IO schedulers).
    
    This patch fixes the issue by moving the check back into
    __blk_mq_try_issue_directly().
    
    This patch fixes request use-after-free[1][2] during canceling requets
    of NVMe in nvme_dev_disable(), which can be triggered easily during
    NVMe reset & remove test.
    
    [1] oops kernel log when CONFIG_BLK_DEV_INTEGRITY is on
    [  103.412969] BUG: unable to handle kernel NULL pointer dereference at 000000000000000a
    [  103.412980] IP: bio_integrity_advance+0x48/0xf0
    [  103.412981] PGD 275a88067
    [  103.412981] P4D 275a88067
    [  103.412982] PUD 276c43067
    [  103.412983] PMD 0
    [  103.412984]
    [  103.412986] Oops: 0000 [#1] SMP
    [  103.412989] Modules linked in: vfat fat intel_rapl sb_edac x86_pkg_temp_thermal intel_powerclamp coretemp kvm_intel kvm irqbypass crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel crypto_simd cryptd ipmi_ssif iTCO_wdt iTCO_vendor_support mxm_wmi glue_helper dcdbas ipmi_si mei_me pcspkr mei sg ipmi_devintf lpc_ich ipmi_msghandler shpchp acpi_power_meter wmi nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs libcrc32c sd_mod mgag200 i2c_algo_bit drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm drm crc32c_intel nvme ahci nvme_core libahci libata tg3 i2c_core megaraid_sas ptp pps_core dm_mirror dm_region_hash dm_log dm_mod
    [  103.413035] CPU: 0 PID: 102 Comm: kworker/0:2 Not tainted 4.11.0+ #1
    [  103.413036] Hardware name: Dell Inc. PowerEdge R730xd/072T6D, BIOS 2.2.5 09/06/2016
    [  103.413041] Workqueue: events nvme_remove_dead_ctrl_work [nvme]
    [  103.413043] task: ffff9cc8775c8000 task.stack: ffffc033c252c000
    [  103.413045] RIP: 0010:bio_integrity_advance+0x48/0xf0
    [  103.413046] RSP: 0018:ffffc033c252fc10 EFLAGS: 00010202
    [  103.413048] RAX: 0000000000000000 RBX: ffff9cc8720a8cc0 RCX: ffff9cca72958240
    [  103.413049] RDX: ffff9cca72958000 RSI: 0000000000000008 RDI: ffff9cc872537f00
    [  103.413049] RBP: ffffc033c252fc28 R08: 0000000000000000 R09: ffffffffb963a0d5
    [  103.413050] R10: 000000000000063e R11: 0000000000000000 R12: ffff9cc8720a8d18
    [  103.413051] R13: 0000000000001000 R14: ffff9cc872682e00 R15: 00000000fffffffb
    [  103.413053] FS:  0000000000000000(0000) GS:ffff9cc877c00000(0000) knlGS:0000000000000000
    [  103.413054] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  103.413055] CR2: 000000000000000a CR3: 0000000276c41000 CR4: 00000000001406f0
    [  103.413056] Call Trace:
    [  103.413063]  bio_advance+0x2a/0xe0
    [  103.413067]  blk_update_request+0x76/0x330
    [  103.413072]  blk_mq_end_request+0x1a/0x70
    [  103.413074]  blk_mq_dispatch_rq_list+0x370/0x410
    [  103.413076]  ? blk_mq_flush_busy_ctxs+0x94/0xe0
    [  103.413080]  blk_mq_sched_dispatch_requests+0x173/0x1a0
    [  103.413083]  __blk_mq_run_hw_queue+0x8e/0xa0
    [  103.413085]  __blk_mq_delay_run_hw_queue+0x9d/0xa0
    [  103.413088]  blk_mq_start_hw_queue+0x17/0x20
    [  103.413090]  blk_mq_start_hw_queues+0x32/0x50
    [  103.413095]  nvme_kill_queues+0x54/0x80 [nvme_core]
    [  103.413097]  nvme_remove_dead_ctrl_work+0x1f/0x40 [nvme]
    [  103.413103]  process_one_work+0x149/0x360
    [  103.413105]  worker_thread+0x4d/0x3c0
    [  103.413109]  kthread+0x109/0x140
    [  103.413111]  ? rescuer_thread+0x380/0x380
    [  103.413113]  ? kthread_park+0x60/0x60
    [  103.413120]  ret_from_fork+0x2c/0x40
    [  103.413121] Code: 08 4c 8b 63 50 48 8b 80 80 00 00 00 48 8b 90 d0 03 00 00 31 c0 48 83 ba 40 02 00 00 00 48 8d 8a 40 02 00 00 48 0f 45 c1 c1 ee 09 <0f> b6 48 0a 0f b6 40 09 41 89 f5 83 e9 09 41 d3 ed 44 0f af e8
    [  103.413145] RIP: bio_integrity_advance+0x48/0xf0 RSP: ffffc033c252fc10
    [  103.413146] CR2: 000000000000000a
    [  103.413157] ---[ end trace cd6875d16eb5a11e ]---
    [  103.455368] Kernel panic - not syncing: Fatal exception
    [  103.459826] Kernel Offset: 0x37600000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [  103.850916] ---[ end Kernel panic - not syncing: Fatal exception
    [  103.857637] sched: Unexpected reschedule of offline CPU#1!
    [  103.863762] ------------[ cut here ]------------
    
    [2] kernel hang in blk_mq_freeze_queue_wait() when CONFIG_BLK_DEV_INTEGRITY is off
    [  247.129825] INFO: task nvme-test:1772 blocked for more than 120 seconds.
    [  247.137311]       Not tainted 4.12.0-rc2.upstream+ #4
    [  247.142954] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
    [  247.151704] Call Trace:
    [  247.154445]  __schedule+0x28a/0x880
    [  247.158341]  schedule+0x36/0x80
    [  247.161850]  blk_mq_freeze_queue_wait+0x4b/0xb0
    [  247.166913]  ? remove_wait_queue+0x60/0x60
    [  247.171485]  blk_freeze_queue+0x1a/0x20
    [  247.175770]  blk_cleanup_queue+0x7f/0x140
    [  247.180252]  nvme_ns_remove+0xa3/0xb0 [nvme_core]
    [  247.185503]  nvme_remove_namespaces+0x32/0x50 [nvme_core]
    [  247.191532]  nvme_uninit_ctrl+0x2d/0xa0 [nvme_core]
    [  247.196977]  nvme_remove+0x70/0x110 [nvme]
    [  247.201545]  pci_device_remove+0x39/0xc0
    [  247.205927]  device_release_driver_internal+0x141/0x200
    [  247.211761]  device_release_driver+0x12/0x20
    [  247.216531]  pci_stop_bus_device+0x8c/0xa0
    [  247.221104]  pci_stop_and_remove_bus_device_locked+0x1a/0x30
    [  247.227420]  remove_store+0x7c/0x90
    [  247.231320]  dev_attr_store+0x18/0x30
    [  247.235409]  sysfs_kf_write+0x3a/0x50
    [  247.239497]  kernfs_fop_write+0xff/0x180
    [  247.243867]  __vfs_write+0x37/0x160
    [  247.247757]  ? selinux_file_permission+0xe5/0x120
    [  247.253011]  ? security_file_permission+0x3b/0xc0
    [  247.258260]  vfs_write+0xb2/0x1b0
    [  247.261964]  ? syscall_trace_enter+0x1d0/0x2b0
    [  247.266924]  SyS_write+0x55/0xc0
    [  247.270540]  do_syscall_64+0x67/0x150
    [  247.274636]  entry_SYSCALL64_slow_path+0x25/0x25
    [  247.279794] RIP: 0033:0x7f5c96740840
    [  247.283785] RSP: 002b:00007ffd00e87ee8 EFLAGS: 00000246 ORIG_RAX: 0000000000000001
    [  247.292238] RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00007f5c96740840
    [  247.300194] RDX: 0000000000000002 RSI: 00007f5c97060000 RDI: 0000000000000001
    [  247.308159] RBP: 00007f5c97060000 R08: 000000000000000a R09: 00007f5c97059740
    [  247.316123] R10: 0000000000000001 R11: 0000000000000246 R12: 00007f5c96a14400
    [  247.324087] R13: 0000000000000002 R14: 0000000000000001 R15: 0000000000000000
    [  370.016340] INFO: task nvme-test:1772 blocked for more than 120 seconds.
    
    Fixes: 12d70958a2e8(blk-mq: don't fail allocating driver tag for stopped hw queue)
    Cc: stable@vger.kernel.org
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bart Van Assche <Bart.VanAssche@sandisk.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit b07ac9894644202614ca87c69f3f45e424a82fef
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jun 2 22:05:23 2017 -0700

    net: dsa: Fix stale cpu_switch reference after unbind then bind
    
    Commit 9520ed8fb841 ("net: dsa: use cpu_switch instead of ds[0]")
    replaced the use of dst->ds[0] with dst->cpu_switch since that is
    functionally equivalent, however, we can now run into an use after free
    scenario after unbinding then rebinding the switch driver.
    
    The use after free happens because we do correctly initialize
    dst->cpu_switch the first time we probe in dsa_cpu_parse(), then we
    unbind the driver: dsa_dst_unapply() is called, and we rebind again.
    dst->cpu_switch now points to a freed "ds" structure, and so when we
    finally dereference it in dsa_cpu_port_ethtool_setup(), we oops.
    
    To fix this, simply set dst->cpu_switch to NULL in dsa_dst_unapply()
    which guarantees that we always correctly re-assign dst->cpu_switch in
    dsa_cpu_parse().
    
    Fixes: 9520ed8fb841 ("net: dsa: use cpu_switch instead of ds[0]")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vivien Didelot <vivien.didelot@savoirfairelinux.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a53cb29b0af346af44e4abf13d7e59f807fba690
Author: Mark Bloch <markb@mellanox.com>
Date:   Fri Jun 2 03:24:08 2017 +0300

    vxlan: fix use-after-free on deletion
    
    Adding a vxlan interface to a socket isn't symmetrical, while adding
    is done in vxlan_open() the deletion is done in vxlan_dellink().
    This can cause a use-after-free error when we close the vxlan
    interface before deleting it.
    
    We add vxlan_vs_del_dev() to match vxlan_vs_add_dev() and call
    it from vxlan_stop() to match the call from vxlan_open().
    
    Fixes: 56ef9c909b40 ("vxlan: Move socket initialization to within rtnl scope")
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Tested-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Mark Bloch <markb@mellanox.com>
    Acked-by: Roopa Prabhu <roopa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b425e50492583b10cceb388af36ef0bd3bdf842a
Author: Bart Van Assche <bart.vanassche@sandisk.com>
Date:   Wed May 31 14:43:45 2017 -0700

    block: Avoid that blk_exit_rl() triggers a use-after-free
    
    Since the introduction of .init_rq_fn() and .exit_rq_fn() it is
    essential that the memory allocated for struct request_queue
    stays around until all blk_exit_rl() calls have finished. Hence
    make blk_init_rl() take a reference on struct request_queue.
    
    This patch fixes the following crash:
    
    general protection fault: 0000 [#2] SMP
    CPU: 3 PID: 28 Comm: ksoftirqd/3 Tainted: G      D         4.12.0-rc2-dbg+ #2
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.0.0-prebuilt.qemu-project.org 04/01/2014
    task: ffff88013a108040 task.stack: ffffc9000071c000
    RIP: 0010:free_request_size+0x1a/0x30
    RSP: 0018:ffffc9000071fd38 EFLAGS: 00010202
    RAX: 6b6b6b6b6b6b6b6b RBX: ffff880067362a88 RCX: 0000000000000003
    RDX: ffff880067464178 RSI: ffff880067362a88 RDI: ffff880135ea4418
    RBP: ffffc9000071fd40 R08: 0000000000000000 R09: 0000000100180009
    R10: ffffc9000071fd38 R11: ffffffff81110800 R12: ffff88006752d3d8
    R13: ffff88006752d3d8 R14: ffff88013a108040 R15: 000000000000000a
    FS:  0000000000000000(0000) GS:ffff88013fd80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fa8ec1edb00 CR3: 0000000138ee8000 CR4: 00000000001406e0
    Call Trace:
     mempool_destroy.part.10+0x21/0x40
     mempool_destroy+0xe/0x10
     blk_exit_rl+0x12/0x20
     blkg_free+0x4d/0xa0
     __blkg_release_rcu+0x59/0x170
     rcu_process_callbacks+0x260/0x4e0
     __do_softirq+0x116/0x250
     smpboot_thread_fn+0x123/0x1e0
     kthread+0x109/0x140
     ret_from_fork+0x31/0x40
    
    Fixes: commit e9c787e65c0c ("scsi: allocate scsi_cmnd structures as part of struct request")
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Jan Kara <jack@suse.cz>
    Cc: <stable@vger.kernel.org> # v4.11+
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 42d1abb50ffc51c65e9cec735c8a9711296a05f7
Author: Xinming Hu <huxm@marvell.com>
Date:   Tue May 23 07:12:31 2017 +0000

    mwifiex: usb: kill urb before free its memory
    
    we have observed host system hang when device firmware crash,
    stack trace show it was an use-after-free case: previous submitted
    urb will be holding in usbcore, and given back to device driver
    when device disconnected, while the urb have been freed in usb
    device disconnect handler. This patch kill the holding urb before
    free its memory.
    
    Signed-off-by: Xinming Hu <huxm@marvell.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit b0f5a8f32e8bbdaae1abb8abe2d3cbafaba57e08
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Mon May 29 09:22:07 2017 +0200

    kthread: fix boot hang (regression) on MIPS/OpenRISC
    
    This fixes a regression in commit 4d6501dce079 where I didn't notice
    that MIPS and OpenRISC were reinitialising p->{set,clear}_child_tid to
    NULL after our initialisation in copy_process().
    
    We can simply get rid of the arch-specific initialisation here since it
    is now always done in copy_process() before hitting copy_thread{,_tls}().
    
    Review notes:
    
     - As far as I can tell, copy_process() is the only user of
       copy_thread_tls(), which is the only caller of copy_thread() for
       architectures that don't implement copy_thread_tls().
    
     - After this patch, there is no arch-specific code touching
       p->set_child_tid or p->clear_child_tid whatsoever.
    
     - It may look like MIPS/OpenRISC wanted to always have these fields be
       NULL, but that's not true, as copy_process() would unconditionally
       set them again _after_ calling copy_thread_tls() before commit
       4d6501dce079.
    
    Fixes: 4d6501dce079c1eb6bf0b1d8f528a5e81770109e ("kthread: Fix use-after-free if kthread fork fails")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net> # MIPS only
    Acked-by: Stafford Horne <shorne@gmail.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: linux-mips@linux-mips.org
    Cc: Jonas Bonn <jonas@southpole.se>
    Cc: Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>
    Cc: openrisc@lists.librecores.org
    Cc: Jamie Iles <jamie.iles@oracle.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit
        to the new settings, from Nithin Sujir.
    
     5) Properly reference count ipv4 FIB metrics to avoid use after free
        situations, from Eric Dumazet and several others including Cong Wang
        and Julian Anastasov.
    
     6) Fix races in llc_ui_bind(), from Lin Zhang.
    
     7) Fix regression of ESP UDP encapsulation for TCP packets, from
        Steffen Klassert.
    
     8) Fix mdio-octeon driver Kconfig deps, from Randy Dunlap.
    
     9) Fix regression in setting DSCP on ipv6/GRE encapsulation, from Peter
        Dawson.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (43 commits)
      ipv4: add reference counting to metrics
      net: ethernet: ax88796: don't call free_irq without request_irq first
      ip6_tunnel, ip6_gre: fix setting of DSCP on encapsulated packets
      sctp: fix ICMP processing if skb is non-linear
      net: llc: add lock_sock in llc_ui_bind to avoid a race condition
      bonding: Don't update slave->link until ready to commit
      test_bpf: Add a couple of tests for BPF_JSGE.
      bpf: add various verifier test cases
      bpf: fix wrong exposure of map_flags into fdinfo for lpm
      bpf: add bpf_clone_redirect to bpf_helper_changes_pkt_data
      bpf: properly reset caller saved regs after helper call and ld_abs/ind
      bpf: fix incorrect pruning decision when alignment must be tracked
      arp: fixed -Wuninitialized compiler warning
      tcp: avoid fastopen API to be used on AF_UNSPEC
      net: move somaxconn init from sysctl code
      net: fix potential null pointer dereference
      geneve: fix fill_info when using collect_metadata
      virtio-net: enable TSO/checksum offloads for Q-in-Q vlans
      be2net: Fix offload features for Q-in-Q packets
      vlan: Fix tcp checksum offloads in Q-in-Q vlans
      ...

commit ce57cba37f3721c21e46adf21c61292dfd7a9c04
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Tue May 23 17:07:43 2017 -0700

    firmware: vpd: avoid potential use-after-free when destroying section
    
    We should not free info->key before we remove sysfs attribute that uses
    this data as its name.
    
    Fixes: 049a59db34eb ("firmware: Google VPD sysfs driver")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      scsi: zero per-cmd private driver data for each MQ I/O
      scsi: csiostor: fix use after free in csio_hw_use_fwconfig()
      scsi: ufs: Clean up some rpm/spm level SysFS nodes upon remove
      scsi: lpfc: fix build issue if NVME_FC_TARGET is not defined
      scsi: lpfc: Fix NULL pointer dereference during PCI error recovery
      scsi: lpfc: update version to 11.2.0.14
      scsi: lpfc: Add MDS Diagnostic support.
      scsi: lpfc: Fix NVMEI's handling of NVMET's PRLI response attributes
      scsi: lpfc: Cleanup entry_repost settings on SLI4 queues
      scsi: lpfc: Fix debugfs root inode "lpfc" not getting deleted on driver unload.
      scsi: lpfc: Fix NVME I+T not registering NVME as a supported FC4 type
      scsi: lpfc: Added recovery logic for running out of NVMET IO context resources
      scsi: lpfc: Separate NVMET RQ buffer posting from IO resources SGL/iocbq/context
      scsi: lpfc: Separate NVMET data buffer pool fir ELS/CT.
      scsi: lpfc: Fix NMI watchdog assertions when running nvmet IOPS tests
      scsi: lpfc: Fix NVMEI driver not decrementing counter causing bad rport state.
      scsi: lpfc: Fix nvmet RQ resource needs for large block writes.
      scsi: lpfc: Adding additional stats counters for nvme.
      scsi: lpfc: Fix system crash when port is reset.
      scsi: lpfc: Fix used-RPI accounting problem.
      ...

commit 4efda5f2130da033aeedc5b3205569893b910de2
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed May 24 10:19:45 2017 +0200

    ASoC: Fix use-after-free at card unregistration
    
    soc_cleanup_card_resources() call snd_card_free() at the last of its
    procedure.  This turned out to lead to a use-after-free.
    PCM runtimes have been already removed via soc_remove_pcm_runtimes(),
    while it's dereferenced later in soc_pcm_free() called via
    snd_card_free().
    
    The fix is simple: just move the snd_card_free() call to the beginning
    of the whole procedure.  This also gives another benefit: it
    guarantees that all operations have been shut down before actually
    releasing the resources, which was racy until now.
    
    Reported-and-tested-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org>

commit 75b61250bf687c686ba6850c34eccc1303b0b827
Author: Varun Prakash <varun@chelsio.com>
Date:   Tue May 16 19:23:44 2017 +0530

    scsi: libcxgbi: fix skb use after free
    
    skb->data is assigned to task->hdr in cxgbi_conn_alloc_pdu(),
    skb gets freed after tx but task->hdr is still dereferenced in
    iscsi_tcp_task_xmit() to avoid this call skb_get() after allocating skb
    and free the skb in cxgbi_cleanup_task() or before allocating new skb in
    cxgbi_conn_alloc_pdu().
    
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit a6187ffdfcc854ce4d97f307e12508a4bde8bcf3
Author: Loic Poulain <loic.poulain@intel.com>
Date:   Tue May 23 11:51:00 2017 +0200

    Bluetooth: btwilink: Fix unexpected skb free
    
    The caller (hci_core) still owns the skb in case of error, releasing
    it inside the send function can lead to use-after-free errors.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Loic Poulain <loic.poulain@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit e68368aed56324e2e38d4f6b044bb8cf82077fc2
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Thu May 18 16:29:23 2017 +0300

    crypto: asymmetric_keys - handle EBUSY due to backlog correctly
    
    public_key_verify_signature() was passing the CRYPTO_TFM_REQ_MAY_BACKLOG
    flag to akcipher_request_set_callback() but was not handling correctly
    the case where a -EBUSY error could be returned from the call to
    crypto_akcipher_verify() if backlog was used, possibly casuing
    data corruption due to use-after-free of buffers.
    
    Resolve this by handling -EBUSY correctly.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 4d6501dce079c1eb6bf0b1d8f528a5e81770109e
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Tue May 9 09:39:59 2017 +0200

    kthread: Fix use-after-free if kthread fork fails
    
    If a kthread forks (e.g. usermodehelper since commit 1da5c46fa965) but
    fails in copy_process() between calling dup_task_struct() and setting
    p->set_child_tid, then the value of p->set_child_tid will be inherited
    from the parent and get prematurely freed by free_kthread_struct().
    
        kthread()
         - worker_thread()
            - process_one_work()
            |  - call_usermodehelper_exec_work()
            |     - kernel_thread()
            |        - _do_fork()
            |           - copy_process()
            |              - dup_task_struct()
            |                 - arch_dup_task_struct()
            |                    - tsk->set_child_tid = current->set_child_tid // implied
            |              - ...
            |              - goto bad_fork_*
            |              - ...
            |              - free_task(tsk)
            |                 - free_kthread_struct(tsk)
            |                    - kfree(tsk->set_child_tid)
            - ...
            - schedule()
               - __schedule()
                  - wq_worker_sleeping()
                     - kthread_data(task)->flags // UAF
    
    The problem started showing up with commit 1da5c46fa965 since it reused
    ->set_child_tid for the kthread worker data.
    
    A better long-term solution might be to get rid of the ->set_child_tid
    abuse. The comment in set_kthread_struct() also looks slightly wrong.
    
    Debugged-by: Jamie Iles <jamie.iles@oracle.com>
    Fixes: 1da5c46fa965 ("kthread: Make struct kthread kmalloc'ed")
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jamie Iles <jamie.iles@oracle.com>
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170509073959.17858-1-vegard.nossum@oracle.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0aeffa7041d84976432e903cb04e8d7b0edf31ed
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Mar 28 11:56:43 2017 +0300

    orinoco_usb: convert request_context.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 552aa585faff19ceead7aa840d4ce11830ce34a9
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Mar 28 11:56:42 2017 +0300

    hostap: convert hostap_cmd_queue.usecnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 473e90b2e8356f084dcf9c815a5170d4d4925897
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri May 19 11:39:13 2017 +0200

    x86/mce: Convert threshold_bank.cpus from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead
    of atomic_t when the variable is used as a reference counter. This
    allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Yazen Ghannam <Yazen.Ghannam@amd.com>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Link: http://lkml.kernel.org/r/1492695536-5947-1-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commits)
      KVM: x86: prevent uninitialized variable warning in check_svme()
      KVM: x86/vPMU: fix undefined shift in intel_pmu_refresh()
      KVM: x86: zero base3 of unusable segments
      KVM: X86: Fix read out-of-bounds vulnerability in kvm pio emulation
      KVM: x86: Fix potential preemption when get the current kvmclock timestamp
      KVM: Silence underflow warning in avic_get_physical_id_entry()
      KVM: arm/arm64: Hold slots_lock when unregistering kvm io bus devices
      KVM: arm/arm64: Fix bug when registering redist iodevs
      KVM: x86: lower default for halt_poll_ns
      kvm: arm/arm64: Fix use after free of stage2 page table
      kvm: arm/arm64: Force reading uncached stage2 PGD
      KVM: nVMX: fix EPT permissions as reported in exit qualification
      KVM: VMX: Don't enable EPT A/D feature if EPT feature is disabled
      KVM: x86: Fix load damaged SSEx MXCSR register
      kvm: nVMX: off by one in vmx_write_pml_buffer()
      KVM: arm: rename pm_fake handler to trap_raz_wi
      KVM: arm: plug potential guest hardware debug leakage
      kvm: arm/arm64: Fix race in resetting stage2 PGD
      KVM: arm/arm64: vgic-v3: Use PREbits to infer the number of ICH_APxRn_EL2 registers
      KVM: arm/arm64: vgic-v3: Do not use Active+Pending state for a HW interrupt
      ...

commit a351e40b6de550049423a26f7ded7b639e363d89
Author: Varun Prakash <varun@chelsio.com>
Date:   Wed May 17 20:30:43 2017 +0530

    scsi: csiostor: fix use after free in csio_hw_use_fwconfig()
    
    mbp pointer is passed to csio_hw_validate_caps() so call mempool_free()
    after calling csio_hw_validate_caps().
    
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Fixes: 541c571fa2fd ("csiostor:Use firmware version from cxgb4/t4fw_version.h")
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commits)
      mlxsw: spectrum: Avoid possible NULL pointer dereference
      sh_eth: Do not print an error message for probe deferral
      sh_eth: Use platform device for printing before register_netdev()
      mlxsw: spectrum_router: Fix rif counter freeing routine
      mlxsw: spectrum_dpipe: Fix incorrect entry index
      cxgb4: update latest firmware version supported
      qmi_wwan: add another Lenovo EM74xx device ID
      sctp: do not inherit ipv6_{mc|ac|fl}_list from parent
      udp: make *udp*_queue_rcv_skb() functions static
      bridge: netlink: check vlan_default_pvid range
      net: ethernet: faraday: To support device tree usage.
      net: x25: fix one potential use-after-free issue
      bpf: adjust verifier heuristics
      ipv6: Check ip6_find_1stfragopt() return value properly.
      selftests/bpf: fix broken build due to types.h
      bnxt_en: Check status of firmware DCBX agent before setting DCB_CAP_DCBX_HOST.
      bnxt_en: Call bnxt_dcb_init() after getting firmware DCBX configuration.
      net: fix compile error in skb_orphan_partial()
      ipv6: Prevent overrun when parsing v6 header options
      neighbour: update neigh timestamps iff update is effective
      ...

commit 1e948479b3d63e3ac0ecca13cbf4921c7d17c168
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 26 12:24:21 2017 +0200

    serial: ifx6x60: fix use-after-free on module unload
    
    Make sure to deregister the SPI driver before releasing the tty driver
    to avoid use-after-free in the SPI remove callback where the tty
    devices are deregistered.
    
    Fixes: 72d4724ea54c ("serial: ifx6x60: Add modem power off function in the platform reboot process")
    Cc: stable <stable@vger.kernel.org>     # 3.8
    Cc: Jun Chen <jun.d.chen@intel.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aee5da7838787f8ed47f825dbe09e2812acdf97b
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Apr 11 19:07:29 2017 +0200

    serdev: fix tty-port client deregistration
    
    The port client data must be set when registering the serdev controller
    or client deregistration will fail (and the serdev devices are left
    registered and allocated) if the port was never opened in between.
    
    Make sure to clear the port client data on any probe errors to avoid a
    use-after-free when the client is later deregistered unconditionally
    (e.g. in a tty-port deregistration helper).
    
    Also move port client operation initialisation to registration. Note
    that the client ops must be restored on failed probe.
    
    Fixes: bed35c6dfa6a ("serdev: add a tty port controller driver")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64df6d525fcff1630098db9238bfd2b3e092d5c1
Author: linzhang <xiaolou4617@gmail.com>
Date:   Wed May 17 12:05:07 2017 +0800

    net: x25: fix one potential use-after-free issue
    
    The function x25_init is not properly unregister related resources
    on error handler.It is will result in kernel oops if x25_init init
    failed, so add properly unregister call on error handler.
    
    Also, i adjust the coding style and make x25_register_sysctl properly
    return failure.
    
    Signed-off-by: linzhang <xiaolou4617@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c067579e69b42bff476959fd7bb561ffa3f11e0
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed May 17 13:10:03 2017 +0100

    drm/i915: Split execlist priority queue into rbtree + linked list
    
    All the requests at the same priority are executed in FIFO order. They
    do not need to be stored in the rbtree themselves, as they are a simple
    list within a level. If we move the requests at one priority into a list,
    we can then reduce the rbtree to the set of priorities. This should keep
    the height of the rbtree small, as the number of active priorities can not
    exceed the number of active requests and should be typically only a few.
    
    Currently, we have ~2k possible different priority levels, that may
    increase to allow even more fine grained selection. Allocating those in
    advance seems a waste (and may be impossible), so we opt for allocating
    upon first use, and freeing after its requests are depleted. To avoid
    the possibility of an allocation failure causing us to lose a request,
    we preallocate the default priority (0) and bump any request to that
    priority if we fail to allocate it the appropriate plist. Having a
    request (that is ready to run, so not leading to corruption) execute
    out-of-order is better than leaking the request (and its dependency
    tree) entirely.
    
    There should be a benefit to reducing execlists_dequeue() to principally
    using a simple list (and reducing the frequency of both rbtree iteration
    and balancing on erase) but for typical workloads, request coalescing
    should be small enough that we don't notice any change. The main gain is
    from improving PI calls to schedule, and the explicit list within a
    level should make request unwinding simpler (we just need to insert at
    the head of the list rather than the tail and not have to make the
    rbtree search more complicated).
    
    v2: Avoid use-after-free when deleting a depleted priolist
    
    v3: Michał found the solution to handling the allocation failure
    gracefully. If we disable all priority scheduling following the
    allocation failure, those requests will be executed in fifo and we will
    ensure that this request and its dependencies are in strict fifo (even
    when it doesn't realise it is only a single list). Normal scheduling is
    restored once we know the device is idle, until the next failure!
    Suggested-by: Michał Wajdeczko <michal.wajdeczko@intel.com>
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170517121007.27224-8-chris@chris-wilson.co.uk

commit 0c428a6a9256fcd66817e12db32a50b405ed2e5c
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue May 16 10:34:55 2017 +0100

    kvm: arm/arm64: Fix use after free of stage2 page table
    
    We yield the kvm->mmu_lock occassionaly while performing an operation
    (e.g, unmap or permission changes) on a large area of stage2 mappings.
    However this could possibly cause another thread to clear and free up
    the stage2 page tables while we were waiting for regaining the lock and
    thus the original thread could end up in accessing memory that was
    freed. This patch fixes the problem by making sure that the stage2
    pagetable is still valid after we regain the lock. The fact that
    mmu_notifer->release() could be called twice (via __mmu_notifier_release
    and mmu_notifier_unregsister) enhances the possibility of hitting
    this race where there are two threads trying to unmap the entire guest
    shadow pages.
    
    While at it, cleanup the redudant checks around cond_resched_lock in
    stage2_wp_range(), as cond_resched_lock already does the same checks.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: andreyknvl@google.com
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: stable@vger.kernel.org
    Acked-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Reviewed-by: Christoffer Dall <cdall@linaro.org>
    Signed-off-by: Christoffer Dall <cdall@linaro.org>

commits)
      ldmvsw: stop the clean timer at beginning of remove
      ldmvsw: unregistering netdev before disable hardware
      net: netcp: fix check of requested timestamping filter
      ipv6: avoid dad-failures for addresses with NODAD
      qed: Fix uninitialized data in aRFS infrastructure
      mdio: mux: fix device_node_continue.cocci warnings
      net/packet: fix missing net_device reference release
      net/mlx4_core: Use min3 to select number of MSI-X vectors
      macvlan: Fix performance issues with vlan tagged packets
      net: stmmac: use correct pointer when printing normal descriptor ring
      net/mlx5: Use underlay QPN from the root name space
      net/mlx5e: IPoIB, Only support regular RQ for now
      net/mlx5e: Fix setup TC ndo
      net/mlx5e: Fix ethtool pause support and advertise reporting
      net/mlx5e: Use the correct pause values for ethtool advertising
      vmxnet3: ensure that adapter is in proper state during force_close
      sfc: revert changes to NIC revision numbers
      net: ch9200: add missing USB-descriptor endianness conversions
      net: irda: irda-usb: fix firmware name on big-endian hosts
      net: dsa: mv88e6xxx: add default case to switch
      ...

commit 9338d7b4418e9996a7642867d8f6b482a6040ed6
Author: Liping Zhang <zlpnobody@gmail.com>
Date:   Sun May 7 22:01:56 2017 +0800

    netfilter: nfnl_cthelper: reject del request if helper obj is in use
    
    We can still delete the ct helper even if it is in use, this will cause
    a use-after-free error. In more detail, I mean:
      # nfct helper add ssdp inet udp
      # iptables -t raw -A OUTPUT -p udp -j CT --helper ssdp
      # nfct helper delete ssdp //--> oops, succeed!
      BUG: unable to handle kernel paging request at 000026ca
      IP: 0x26ca
      [...]
      Call Trace:
       ? ipv4_helper+0x62/0x80 [nf_conntrack_ipv4]
       nf_hook_slow+0x21/0xb0
       ip_output+0xe9/0x100
       ? ip_fragment.constprop.54+0xc0/0xc0
       ip_local_out+0x33/0x40
       ip_send_skb+0x16/0x80
       udp_send_skb+0x84/0x240
       udp_sendmsg+0x35d/0xa50
    
    So add reference count to fix this issue, if ct helper is used by
    others, reject the delete request.
    
    Apply this patch:
      # nfct helper delete ssdp
      nfct v1.4.3: netlink error: Device or resource busy
    
    Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 1a4a5bf52a4adb477adb075e5afce925824ad132
Author: Gao Feng <gfree.wind@vip.163.com>
Date:   Tue May 9 18:27:33 2017 +0800

    driver: vrf: Fix one possible use-after-free issue
    
    The current codes only deal with the case that the skb is dropped, it
    may meet one use-after-free issue when NF_HOOK returns 0 that means
    the skb is stolen by one netfilter rule or hook.
    
    When one netfilter rule or hook stoles the skb and return NF_STOLEN,
    it means the skb is taken by the rule, and other modules should not
    touch this skb ever. Maybe the skb is queued or freed directly by the
    rule.
    
    Now uses the nf_hook instead of NF_HOOK to get the result of netfilter,
    and check the return value of nf_hook. Only when its value equals 1, it
    means the skb could go ahead. Or reset the skb as NULL.
    
    BTW, because vrf_rcv_finish is empty function, so needn't invoke it
    even though nf_hook returns 1. But we need to modify vrf_rcv_finish
    to deal with the NF_STOLEN case.
    
    There are two cases when skb is stolen.
    1. The skb is stolen and freed directly.
       There is nothing we need to do, and vrf_rcv_finish isn't invoked.
    2. The skb is queued and reinjected again.
       The vrf_rcv_finish would be invoked as okfn, so need to free the
       skb in it.
    
    Signed-off-by: Gao Feng <gfree.wind@vip.163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit efc0c21c9ea786d6f019d7df7b4e3932f3578d90
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Thu Mar 2 12:23:45 2017 +0100

    s390: convert debug_info.ref_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commits)
      pNFS/flexfiles: Always attempt to call layoutstats when flexfiles is enabled
      NFSv4.1: Work around a Linux server bug...
      NFS append COMMIT after synchronous COPY
      NFSv4: Fix exclusive create attributes encoding
      NFSv4: Fix an rcu lock leak
      nfs: use kmap/kunmap directly
      NFS: always treat the invocation of nfs_getattr as cache hit when noac is on
      Fix nfs_client refcounting if kmalloc fails in nfs4_proc_exchange_id and nfs4_proc_async_renew
      NFSv4.1: RECLAIM_COMPLETE must handle NFS4ERR_CONN_NOT_BOUND_TO_SESSION
      pNFS: Fix NULL dereference in pnfs_generic_alloc_ds_commits
      pNFS: Fix a typo in pnfs_generic_alloc_ds_commits
      pNFS: Fix a deadlock when coalescing writes and returning the layout
      pNFS: Don't clear the layout return info if there are segments to return
      pNFS: Ensure we commit the layout if it has been invalidated
      pNFS: Don't send COMMITs to the DSes if the server invalidated our layout
      pNFS/flexfiles: Fix up the ff_layout_write_pagelist failure path
      pNFS: Ensure we check layout validity before marking it for return
      NFS4.1 handle interrupted slot reuse from ERR_DELAY
      NFSv4: check return value of xdr_inline_decode
      nfs/filelayout: fix NULL pointer dereference in fl_pnfs_update_layout()
      ...

commit 82486aa6f1b9bc8145e6d0fa2bc0b44307f3b875
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Thu May 4 14:54:17 2017 -0700

    ipv4: restore rt->fi for reference counting
    
    IPv4 dst could use fi->fib_metrics to store metrics but fib_info
    itself is refcnt'ed, so without taking a refcnt fi and
    fi->fib_metrics could be freed while dst metrics still points to
    it. This triggers use-after-free as reported by Andrey twice.
    
    This patch reverts commit 2860583fe840 ("ipv4: Kill rt->fi") to
    restore this reference counting. It is a quick fix for -net and
    -stable, for -net-next, as Eric suggested, we can consider doing
    reference counting for metrics itself instead of relying on fib_info.
    
    IPv6 is very different, it copies or steals the metrics from mx6_config
    in fib6_commit_metrics() so probably doesn't need a refcnt.
    
    Decnet has already done the refcnt'ing, see dn_fib_semantic_match().
    
    Fixes: 2860583fe840 ("ipv4: Kill rt->fi")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      xfs: fix use-after-free in xfs_finish_page_writeback
      xfs: reserve enough blocks to handle btree splits when remapping
      xfs: wait on new inodes during quotaoff dquot release
      xfs: update ag iterator to support wait on new inodes
      xfs: support ability to wait on new inodes
      xfs: publish UUID in struct super_block
      xfs: Allow user to kill fstrim process
      xfs: better log intent item refcount checking
      xfs: fix up quotacheck buffer list error handling
      xfs: remove xfs_trans_ail_delete_bulk
      xfs: don't use bool values in trace buffers
      xfs: fix getfsmap userspace memory corruption while setting OF_LAST
      xfs: fix __user annotations for xfs_ioc_getfsmap
      xfs: corruption needs to respect endianess too!
      xfs: use NULL instead of 0 to initialize a pointer in xfs_ioc_getfsmap
      xfs: use NULL instead of 0 to initialize a pointer in xfs_getfsmap
      xfs: simplify validation of the unwritten extent bit
      xfs: remove unused values from xfs_exntst_t
      xfs: remove the unused XFS_MAXLINK_1 define
      xfs: more do_div cleanups
      ...

commit 161f55efba5ddccc690139fae9373cafc3447a97
Author: Eryu Guan <eguan@redhat.com>
Date:   Tue May 2 13:54:47 2017 -0700

    xfs: fix use-after-free in xfs_finish_page_writeback
    
    Commit 28b783e47ad7 ("xfs: bufferhead chains are invalid after
    end_page_writeback") fixed one use-after-free issue by
    pre-calculating the loop conditionals before calling bh->b_end_io()
    in the end_io processing loop, but it assigned 'next' pointer before
    checking end offset boundary & breaking the loop, at which point the
    bh might be freed already, and caused use-after-free.
    
    This is caught by KASAN when running fstests generic/127 on sub-page
    block size XFS.
    
    [ 2517.244502] run fstests generic/127 at 2017-04-27 07:30:50
    [ 2747.868840] ==================================================================
    [ 2747.876949] BUG: KASAN: use-after-free in xfs_destroy_ioend+0x3d3/0x4e0 [xfs] at addr ffff8801395ae698
    ...
    [ 2747.918245] Call Trace:
    [ 2747.920975]  dump_stack+0x63/0x84
    [ 2747.924673]  kasan_object_err+0x21/0x70
    [ 2747.928950]  kasan_report+0x271/0x530
    [ 2747.933064]  ? xfs_destroy_ioend+0x3d3/0x4e0 [xfs]
    [ 2747.938409]  ? end_page_writeback+0xce/0x110
    [ 2747.943171]  __asan_report_load8_noabort+0x19/0x20
    [ 2747.948545]  xfs_destroy_ioend+0x3d3/0x4e0 [xfs]
    [ 2747.953724]  xfs_end_io+0x1af/0x2b0 [xfs]
    [ 2747.958197]  process_one_work+0x5ff/0x1000
    [ 2747.962766]  worker_thread+0xe4/0x10e0
    [ 2747.966946]  kthread+0x2d3/0x3d0
    [ 2747.970546]  ? process_one_work+0x1000/0x1000
    [ 2747.975405]  ? kthread_create_on_node+0xc0/0xc0
    [ 2747.980457]  ? syscall_return_slowpath+0xe6/0x140
    [ 2747.985706]  ? do_page_fault+0x30/0x80
    [ 2747.989887]  ret_from_fork+0x2c/0x40
    [ 2747.993874] Object at ffff8801395ae690, in cache buffer_head size: 104
    [ 2748.001155] Allocated:
    [ 2748.003782] PID = 8327
    [ 2748.006411]  save_stack_trace+0x1b/0x20
    [ 2748.010688]  save_stack+0x46/0xd0
    [ 2748.014383]  kasan_kmalloc+0xad/0xe0
    [ 2748.018370]  kasan_slab_alloc+0x12/0x20
    [ 2748.022648]  kmem_cache_alloc+0xb8/0x1b0
    [ 2748.027024]  alloc_buffer_head+0x22/0xc0
    [ 2748.031399]  alloc_page_buffers+0xd1/0x250
    [ 2748.035968]  create_empty_buffers+0x30/0x410
    [ 2748.040730]  create_page_buffers+0x120/0x1b0
    [ 2748.045493]  __block_write_begin_int+0x17a/0x1800
    [ 2748.050740]  iomap_write_begin+0x100/0x2f0
    [ 2748.055308]  iomap_zero_range_actor+0x253/0x5c0
    [ 2748.060362]  iomap_apply+0x157/0x270
    [ 2748.064347]  iomap_zero_range+0x5a/0x80
    [ 2748.068624]  iomap_truncate_page+0x6b/0xa0
    [ 2748.073227]  xfs_setattr_size+0x1f7/0xa10 [xfs]
    [ 2748.078312]  xfs_vn_setattr_size+0x68/0x140 [xfs]
    [ 2748.083589]  xfs_file_fallocate+0x4ac/0x820 [xfs]
    [ 2748.088838]  vfs_fallocate+0x2cf/0x780
    [ 2748.093021]  SyS_fallocate+0x48/0x80
    [ 2748.097006]  do_syscall_64+0x18a/0x430
    [ 2748.101186]  return_from_SYSCALL_64+0x0/0x6a
    [ 2748.105948] Freed:
    [ 2748.108189] PID = 8327
    [ 2748.110816]  save_stack_trace+0x1b/0x20
    [ 2748.115093]  save_stack+0x46/0xd0
    [ 2748.118788]  kasan_slab_free+0x73/0xc0
    [ 2748.122969]  kmem_cache_free+0x7a/0x200
    [ 2748.127247]  free_buffer_head+0x41/0x80
    [ 2748.131524]  try_to_free_buffers+0x178/0x250
    [ 2748.136316]  xfs_vm_releasepage+0x2e9/0x3d0 [xfs]
    [ 2748.141563]  try_to_release_page+0x100/0x180
    [ 2748.146325]  invalidate_inode_pages2_range+0x7da/0xcf0
    [ 2748.152087]  xfs_shift_file_space+0x37d/0x6e0 [xfs]
    [ 2748.157557]  xfs_collapse_file_space+0x49/0x120 [xfs]
    [ 2748.163223]  xfs_file_fallocate+0x2a7/0x820 [xfs]
    [ 2748.168462]  vfs_fallocate+0x2cf/0x780
    [ 2748.172642]  SyS_fallocate+0x48/0x80
    [ 2748.176629]  do_syscall_64+0x18a/0x430
    [ 2748.180810]  return_from_SYSCALL_64+0x0/0x6a
    
    Fixed it by checking on offset against end & breaking out first,
    dereference bh only if there're still bufferheads to process.
    
    Signed-off-by: Eryu Guan <eguan@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commits)
      powerpc/64s: Power9 has no LPCR[VRMASD] field so don't set it
      powerpc/powernv: Fix TCE kill on NVLink2
      powerpc/mm/radix: Drop support for CPUs without lockless tlbie
      powerpc/book3s/mce: Move add_taint() later in virtual mode
      powerpc/sysfs: Move #ifdef CONFIG_HOTPLUG_CPU out of the function body
      powerpc/smp: Document irq enable/disable after migrating IRQs
      powerpc/mpc52xx: Don't select user-visible RTAS_PROC
      powerpc/powernv: Document cxl dependency on special case in pnv_eeh_reset()
      powerpc/eeh: Clean up and document event handling functions
      powerpc/eeh: Avoid use after free in eeh_handle_special_event()
      cxl: Mask slice error interrupts after first occurrence
      cxl: Route eeh events to all drivers in cxl_pci_error_detected()
      cxl: Force context lock during EEH flow
      powerpc/64: Allow CONFIG_RELOCATABLE if COMPILE_TEST
      powerpc/xmon: Teach xmon oops about radix vectors
      powerpc/mm/hash: Fix off-by-one in comment about kernel contexts ids
      powerpc/pseries: Enable VFIO
      powerpc/powernv: Fix iommu table size calculation hook for small tables
      powerpc/powernv: Check kzalloc() return value in pnv_pci_table_alloc
      powerpc: Add arch/powerpc/tools directory
      ...

commit 0a07fc8cd01b6838d999a5eacaa99fe90b8f768b
Author: Yan, Zheng <zyan@redhat.com>
Date:   Wed Mar 29 15:30:24 2017 +0800

    ceph: fix potential use-after-free
    
    __unregister_session() free the session if it drops the last
    reference. We should grab an extra reference if we want to use
    session after __unregister_session().
    
    Signed-off-by: "Yan, Zheng" <zyan@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 0e1a5ee6577e43e5be55369d398107080b360941
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 17 14:10:29 2017 +0200

    libceph: convert ceph_pagelist.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 02113a0f14e20bd8e675d7cec16db6eaaf2b2380
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 17 14:10:28 2017 +0200

    libceph: convert ceph_osd.o_ref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 06dfa96399a9a3280dd81e47f8696aa89f1783e7
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 17 14:10:27 2017 +0200

    libceph: convert ceph_snap_context.nref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 805692d0e0f7dec42b5e05fb8b2a5c172f66a3c2
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 11:15:07 2017 +0200

    ceph: convert ceph_cap_snap.nref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 3997c01d260ed00d712b051fdab022a08719441e
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 11:15:06 2017 +0200

    ceph: convert ceph_mds_session.s_ref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commit 7f0a84c23b1dede3e76a7b2ebbde45a506252005
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Wed May 3 14:56:38 2017 -0700

    kasan: change report header
    
    Change report header format from:
    
      BUG: KASAN: use-after-free in unwind_get_return_address+0x28a/0x2c0 at addr ffff880069437950
      Read of size 8 by task insmod/3925
    
    to:
    
      BUG: KASAN: use-after-free in unwind_get_return_address+0x28a/0x2c0
      Read of size 8 at addr ffff880069437950 by task insmod/3925
    
    The exact access address is not usually important, so move it to the
    second line.  This also makes the header look visually balanced.
    
    Link: http://lkml.kernel.org/r/20170302134851.101218-6-andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5e82cd120382ad7bbcc82298e34a034538b4384c
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Wed May 3 14:56:25 2017 -0700

    kasan: introduce helper functions for determining bug type
    
    Patch series "kasan: improve error reports", v2.
    
    This patchset improves KASAN reports by making them easier to read and a
    little more detailed.  Also improves mm/kasan/report.c readability.
    
    Effectively changes a use-after-free report to:
    
      ==================================================================
      BUG: KASAN: use-after-free in kmalloc_uaf+0xaa/0xb6 [test_kasan]
      Write of size 1 at addr ffff88006aa59da8 by task insmod/3951
    
      CPU: 1 PID: 3951 Comm: insmod Tainted: G    B           4.10.0+ #84
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Call Trace:
       dump_stack+0x292/0x398
       print_address_description+0x73/0x280
       kasan_report.part.2+0x207/0x2f0
       __asan_report_store1_noabort+0x2c/0x30
       kmalloc_uaf+0xaa/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc2
      RIP: 0033:0x7f22cfd0b9da
      RSP: 002b:00007ffe69118a78 EFLAGS: 00000206 ORIG_RAX: 00000000000000af
      RAX: ffffffffffffffda RBX: 0000555671242090 RCX: 00007f22cfd0b9da
      RDX: 00007f22cffcaf88 RSI: 000000000004df7e RDI: 00007f22d0399000
      RBP: 00007f22cffcaf88 R08: 0000000000000003 R09: 0000000000000000
      R10: 00007f22cfd07d0a R11: 0000000000000206 R12: 0000555671243190
      R13: 000000000001fe81 R14: 0000000000000000 R15: 0000000000000004
    
      Allocated by task 3951:
       save_stack_trace+0x16/0x20
       save_stack+0x43/0xd0
       kasan_kmalloc+0xad/0xe0
       kmem_cache_alloc_trace+0x82/0x270
       kmalloc_uaf+0x56/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc2
    
      Freed by task 3951:
       save_stack_trace+0x16/0x20
       save_stack+0x43/0xd0
       kasan_slab_free+0x72/0xc0
       kfree+0xe8/0x2b0
       kmalloc_uaf+0x85/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc
    
      The buggy address belongs to the object at ffff88006aa59da0
       which belongs to the cache kmalloc-16 of size 16
      The buggy address is located 8 bytes inside of
       16-byte region [ffff88006aa59da0, ffff88006aa59db0)
      The buggy address belongs to the page:
      page:ffffea0001aa9640 count:1 mapcount:0 mapping:          (null) index:0x0
      flags: 0x100000000000100(slab)
      raw: 0100000000000100 0000000000000000 0000000000000000 0000000180800080
      raw: ffffea0001abe380 0000000700000007 ffff88006c401b40 0000000000000000
      page dumped because: kasan: bad access detected
    
      Memory state around the buggy address:
       ffff88006aa59c80: 00 00 fc fc 00 00 fc fc 00 00 fc fc 00 00 fc fc
       ffff88006aa59d00: 00 00 fc fc 00 00 fc fc 00 00 fc fc 00 00 fc fc
      >ffff88006aa59d80: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
                                        ^
       ffff88006aa59e00: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
       ffff88006aa59e80: fb fb fc fc 00 00 fc fc 00 00 fc fc 00 00 fc fc
      ==================================================================
    
    from:
    
      ==================================================================
      BUG: KASAN: use-after-free in kmalloc_uaf+0xaa/0xb6 [test_kasan] at addr ffff88006c4dcb28
      Write of size 1 by task insmod/3984
      CPU: 1 PID: 3984 Comm: insmod Tainted: G    B           4.10.0+ #83
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Call Trace:
       dump_stack+0x292/0x398
       kasan_object_err+0x1c/0x70
       kasan_report.part.1+0x20e/0x4e0
       __asan_report_store1_noabort+0x2c/0x30
       kmalloc_uaf+0xaa/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc2
      RIP: 0033:0x7feca0f779da
      RSP: 002b:00007ffdfeae5218 EFLAGS: 00000206 ORIG_RAX: 00000000000000af
      RAX: ffffffffffffffda RBX: 000055a064c13090 RCX: 00007feca0f779da
      RDX: 00007feca1236f88 RSI: 000000000004df7e RDI: 00007feca1605000
      RBP: 00007feca1236f88 R08: 0000000000000003 R09: 0000000000000000
      R10: 00007feca0f73d0a R11: 0000000000000206 R12: 000055a064c14190
      R13: 000000000001fe81 R14: 0000000000000000 R15: 0000000000000004
      Object at ffff88006c4dcb20, in cache kmalloc-16 size: 16
      Allocated:
      PID = 3984
       save_stack_trace+0x16/0x20
       save_stack+0x43/0xd0
       kasan_kmalloc+0xad/0xe0
       kmem_cache_alloc_trace+0x82/0x270
       kmalloc_uaf+0x56/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc2
      Freed:
      PID = 3984
       save_stack_trace+0x16/0x20
       save_stack+0x43/0xd0
       kasan_slab_free+0x73/0xc0
       kfree+0xe8/0x2b0
       kmalloc_uaf+0x85/0xb6 [test_kasan]
       kmalloc_tests_init+0x4f/0xa48 [test_kasan]
       do_one_initcall+0xf3/0x390
       do_init_module+0x215/0x5d0
       load_module+0x54de/0x82b0
       SYSC_init_module+0x3be/0x430
       SyS_init_module+0x9/0x10
       entry_SYSCALL_64_fastpath+0x1f/0xc2
      Memory state around the buggy address:
       ffff88006c4dca00: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
       ffff88006c4dca80: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
      >ffff88006c4dcb00: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
                                        ^
       ffff88006c4dcb80: fb fb fc fc 00 00 fc fc fb fb fc fc fb fb fc fc
       ffff88006c4dcc00: fb fb fc fc fb fb fc fc fb fb fc fc fb fb fc fc
      ==================================================================
    
    This patch (of 9):
    
    Introduce get_shadow_bug_type() function, which determines bug type
    based on the shadow value for a particular kernel address.  Introduce
    get_wild_bug_type() function, which determines bug type for addresses
    which don't have a corresponding shadow value.
    
    Link: http://lkml.kernel.org/r/20170302134851.101218-2-andreyknvl@google.com
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      drm/nouveau/fb/gf100-: Fix 32 bit wraparound in new ram detection
      drm/nouveau/secboot/gm20b: fix the error return code in gm20b_secboot_tegra_read_wpr()
      drm/nouveau/kms: Increase max retries in scanout position queries.
      drm/nouveau/bios/bitP: check that table is long enough for optional pointers
      drm/nouveau/fifo/nv40: no ctxsw for pre-nv44 mpeg engine
      drm: mali-dp: use div_u64 for expensive 64-bit divisions
      drm/i915: Confirm the request is still active before adding it to the await
      drm/i915: Avoid busy-spinning on VLV_GLTC_PW_STATUS mmio
      drm/i915/selftests: Allocate inode/file dynamically
      drm/i915: Fix system hang with EI UP masked on Haswell
      drm/i915: checking for NULL instead of IS_ERR() in mock selftests
      drm/i915: Perform link quality check unconditionally during long pulse
      drm/i915: Fix use after free in lpe_audio_platdev_destroy()
      drm/i915: Use the right mapping_gfp_mask for final shmem allocation
      drm/i915: Make legacy cursor updates more unsynced
      drm/i915: Apply a cond_resched() to the saturated signaler
      drm/i915: Park the signaler before sleeping
      drm: mali-dp: Check the mclk rate and allow up/down scaling
      drm: mali-dp: Enable image enhancement when scaling
      drm: mali-dp: Add plane upscaling support
      ...

commit bd120ded6a6af61ad342a8a95b36b64bd1e2f9e6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue May 2 10:16:05 2017 -0400

    audit: convert audit_watch.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    [PM: fix subject line, add #include]
    Signed-off-by: Paul Moore <paul@paul-moore.com>

commit 9d2378f8c8f1a3fcfab681fd90c139d90dca7b69
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue May 2 10:16:04 2017 -0400

    audit: convert audit_tree.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    [PM: fix subject line, add #include]
    Signed-off-by: Paul Moore <paul@paul-moore.com>

commit daeba2956f32f91f3493788ff6ee02fb1b2f02fa
Author: Russell Currey <ruscur@russell.cc>
Date:   Wed Apr 19 17:39:26 2017 +1000

    powerpc/eeh: Avoid use after free in eeh_handle_special_event()
    
    eeh_handle_special_event() is called when an EEH event is detected but
    can't be narrowed down to a specific PE.  This function looks through
    every PE to find one in an erroneous state, then calls the regular event
    handler eeh_handle_normal_event() once it knows which PE has an error.
    
    However, if eeh_handle_normal_event() found that the PE cannot possibly
    be recovered, it will free it, rendering the passed PE stale.
    This leads to a use after free in eeh_handle_special_event() as it attempts to
    clear the "recovering" state on the PE after eeh_handle_normal_event() returns.
    
    Thus, make sure the PE is valid when attempting to clear state in
    eeh_handle_special_event().
    
    Fixes: 8a6b1bc70dbb ("powerpc/eeh: EEH core to handle special event")
    Cc: stable@vger.kernel.org # v3.11+
    Reported-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Reviewed-by: Gavin Shan <gwshan@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit 5981c245a890db6a6e16fb6d3838cc9fc9fdf0ff
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:11 2017 +0200

    target/iblock: convert iblock_req.pending from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commits)
      block: hide badblocks attribute by default
      blk-mq: unify hctx delay_work and run_work
      block: add kblock_mod_delayed_work_on()
      blk-mq: unify hctx delayed_run_work and run_work
      nbd: fix use after free on module unload
      MAINTAINERS: bfq: Add Paolo as maintainer for the BFQ I/O scheduler
      blk-mq-sched: alloate reserved tags out of normal pool
      mtip32xx: use runtime tag to initialize command header
      scsi: Implement blk_mq_ops.show_rq()
      blk-mq: Add blk_mq_ops.show_rq()
      blk-mq: Show operation, cmd_flags and rq_flags names
      blk-mq: Make blk_flags_show() callers append a newline character
      blk-mq: Move the "state" debugfs attribute one level down
      blk-mq: Unregister debugfs attributes earlier
      blk-mq: Only unregister hctxs for which registration succeeded
      blk-mq-debugfs: Rename functions for registering and unregistering the mq directory
      blk-mq: Let blk_mq_debugfs_register() look up the queue name
      blk-mq: Register <dev>/queue/mq after having registered <dev>/queue
      ide-pm: always pass 0 error to ide_complete_rq in ide_do_devset
      ide-pm: always pass 0 error to __blk_end_request_all
      ..

commit 60ae36ad0340b1ba88530d6a5e141455dd3afd81
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Fri Apr 28 09:49:19 2017 -0400

    nbd: fix use after free on module unload
    
    list_for_each_entry() isn't super safe if we're freeing the objects
    while we traverse the list.  Also don't bother taking the extra
    reference, the module refcounting stuff will save us from having anybody
    messing with the device while we're trying to unload.
    
    Reported-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit b58f45c8fc301fe83ee28cad3e64686c19e78f1c
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Apr 26 12:23:04 2017 +0200

    staging: gdm724x: gdm_mux: fix use-after-free on module unload
    
    Make sure to deregister the USB driver before releasing the tty driver
    to avoid use-after-free in the USB disconnect callback where the tty
    devices are deregistered.
    
    Fixes: 61e121047645 ("staging: gdm7240: adding LTE USB driver")
    Cc: stable <stable@vger.kernel.org>     # 3.12
    Cc: Won Kang <wkang77@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e869b5462f83bcc771a3301fa7c8de47ed8c74f5
Author: Bart Van Assche <bart.vanassche@sandisk.com>
Date:   Wed Apr 26 13:47:52 2017 -0700

    blk-mq: Unregister debugfs attributes earlier
    
    We currently call blk_mq_free_queue() from blk_cleanup_queue()
    before we unregister the debugfs attributes for that queue in
    blk_release_queue(). This leaves a window open during which
    accessing most of the mq debugfs attributes would cause a
    use-after-free. Additionally, the "state" attribute allows
    running the queue, which we should not do after the queue has
    entered the "dead" state. Fix both cases by unregistering the
    debugfs attributes before freeing queue resources starts.
    
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 88326ef05b262f681d837ecf65db10a7edb609f1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Apr 22 09:15:37 2017 +0100

    drm/i915: Confirm the request is still active before adding it to the await
    
    Although we do check the completion-status of the request before
    actually adding a wait on it (either to its submit fence or its
    completion dma-fence), we currently do not check before adding it to the
    dependency lists.
    
    In fact, without checking for a completed request we may try to use the
    signaler after it has been retired and its dependency tree freed:
    
    [   60.044057] BUG: KASAN: use-after-free in __list_add_valid+0x1d/0xd0 at addr ffff880348c9e6a0
    [   60.044118] Read of size 8 by task gem_exec_fence/530
    [   60.044164] CPU: 1 PID: 530 Comm: gem_exec_fence Tainted: G            E   4.11.0-rc7+ #46
    [   60.044226] Hardware name: ��������������������������������� ���������������������������������/���������������������������������, BIOS RYBDWi35.86A.0246.2
    [   60.044290] Call Trace:
    [   60.044337]  dump_stack+0x4d/0x6a
    [   60.044383]  kasan_object_err+0x21/0x70
    [   60.044435]  kasan_report+0x225/0x4e0
    [   60.044488]  ? __list_add_valid+0x1d/0xd0
    [   60.044534]  ? kasan_kmalloc+0xad/0xe0
    [   60.044587]  __asan_load8+0x5e/0x70
    [   60.044639]  __list_add_valid+0x1d/0xd0
    [   60.044788]  __i915_priotree_add_dependency+0x67/0x130 [i915]
    [   60.044895]  i915_gem_request_await_request+0xa8/0x370 [i915]
    [   60.044974]  i915_gem_request_await_dma_fence+0x129/0x140 [i915]
    [   60.045049]  i915_gem_do_execbuffer.isra.37+0xb0a/0x26b0 [i915]
    [   60.045077]  ? save_stack+0xb1/0xd0
    [   60.045105]  ? save_stack_trace+0x1b/0x20
    [   60.045132]  ? save_stack+0x46/0xd0
    [   60.045158]  ? kasan_kmalloc+0xad/0xe0
    [   60.045184]  ? __kmalloc+0xd8/0x670
    [   60.045229]  ? drm_ioctl+0x359/0x640 [drm]
    [   60.045256]  ? SyS_ioctl+0x41/0x70
    [   60.045330]  ? i915_vma_move_to_active+0x540/0x540 [i915]
    [   60.045360]  ? tty_insert_flip_string_flags+0xa1/0xf0
    [   60.045387]  ? tty_flip_buffer_push+0x63/0x70
    [   60.045414]  ? remove_wait_queue+0xa9/0xc0
    [   60.045441]  ? kasan_unpoison_shadow+0x35/0x50
    [   60.045467]  ? kasan_kmalloc+0xad/0xe0
    [   60.045494]  ? kasan_check_write+0x14/0x20
    [   60.045568]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.045616]  drm_ioctl+0x359/0x640 [drm]
    [   60.045705]  ? i915_gem_execbuffer+0x5a0/0x5a0 [i915]
    [   60.045751]  ? drm_version+0x150/0x150 [drm]
    [   60.045778]  ? compat_start_thread+0x60/0x60
    [   60.045805]  ? plist_del+0xda/0x1a0
    [   60.045833]  do_vfs_ioctl+0x12e/0x910
    [   60.045860]  ? ioctl_preallocate+0x130/0x130
    [   60.045886]  ? pci_mmcfg_check_reserved+0xc0/0xc0
    [   60.045913]  ? vfs_write+0x196/0x240
    [   60.045939]  ? __fget_light+0xa7/0xc0
    [   60.045965]  SyS_ioctl+0x41/0x70
    [   60.045991]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.046017] RIP: 0033:0x7feb2baefc47
    [   60.046042] RSP: 002b:00007fff56d28e58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [   60.046075] RAX: ffffffffffffffda RBX: 00007fff56d290a8 RCX: 00007feb2baefc47
    [   60.046102] RDX: 00007fff56d29050 RSI: 00000000c0406469 RDI: 0000000000000003
    [   60.046129] RBP: 00007fff56d29050 R08: 000055ecc4cd27d0 R09: 00007feb2bda8600
    [   60.046154] R10: 0000000000000073 R11: 0000000000000246 R12: 00000000c0406469
    [   60.046177] R13: 0000000000000003 R14: 000000000000000f R15: 0000000000000099
    [   60.046203] Object at ffff880348c9e680, in cache i915_dependency size: 64
    [   60.046225] Allocated:
    [   60.046246] PID = 530
    [   60.046269]  save_stack_trace+0x1b/0x20
    [   60.046292]  save_stack+0x46/0xd0
    [   60.046318]  kasan_kmalloc+0xad/0xe0
    [   60.046343]  kasan_slab_alloc+0x12/0x20
    [   60.046368]  kmem_cache_alloc+0xab/0x650
    [   60.046445]  i915_gem_request_await_request+0x88/0x370 [i915]
    [   60.046559]  i915_gem_request_await_dma_fence+0x129/0x140 [i915]
    [   60.046705]  i915_gem_do_execbuffer.isra.37+0xb0a/0x26b0 [i915]
    [   60.046849]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.046936]  drm_ioctl+0x359/0x640 [drm]
    [   60.046987]  do_vfs_ioctl+0x12e/0x910
    [   60.047038]  SyS_ioctl+0x41/0x70
    [   60.047090]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.047139] Freed:
    [   60.047179] PID = 530
    [   60.047223]  save_stack_trace+0x1b/0x20
    [   60.047269]  save_stack+0x46/0xd0
    [   60.047317]  kasan_slab_free+0x72/0xc0
    [   60.047366]  kmem_cache_free+0x39/0x160
    [   60.047512]  i915_gem_request_retire+0x83f/0x930 [i915]
    [   60.047657]  i915_gem_request_alloc+0x166/0x600 [i915]
    [   60.047799]  i915_gem_do_execbuffer.isra.37+0xad8/0x26b0 [i915]
    [   60.047897]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.047942]  drm_ioctl+0x359/0x640 [drm]
    [   60.047968]  do_vfs_ioctl+0x12e/0x910
    [   60.047993]  SyS_ioctl+0x41/0x70
    [   60.048019]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.048044] Memory state around the buggy address:
    [   60.048066]  ffff880348c9e580: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048105]  ffff880348c9e600: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048138] >ffff880348c9e680: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [   60.048170]                                ^
    [   60.048191]  ffff880348c9e700: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048225]  ffff880348c9e780: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    
    Note to hit the use-after-free requires us to be passed back a request
    via a fence-array, that is from explicit fencing accumulated into a
    sync-file fence-array.
    
    Fixes: 52e542090701 ("drm/i915/scheduler: Record all dependencies upon request construction")
    Testcase: igt/gem_exec_fence/expired-history
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170422081537.6468-1-chris@chris-wilson.co.uk
    (cherry picked from commit ade0b0c965f59176daddbef9c4717354034f9bce)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit dde7b00e4c85db74a4ae02ec31752cc8be3c75f1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 12 09:02:51 2017 +0100

    drm/i915: Fix use after free in lpe_audio_platdev_destroy()
    
    [31908.547136] BUG: KASAN: use-after-free in intel_lpe_audio_teardown+0x78/0xb0 [i915] at addr ffff8801f7788358
    [31908.547297] Read of size 8 by task drv_selftest/3781
    [31908.547405] CPU: 0 PID: 3781 Comm: drv_selftest Tainted: G    BU  W       4.10.0+ #451
    [31908.547553] Hardware name:                  /        , BIOS PYBSWCEL.86A.0027.2015.0507.1758 05/07/2015
    [31908.547682] Call Trace:
    [31908.547772]  dump_stack+0x68/0x9f
    [31908.547857]  kasan_object_err+0x1c/0x70
    [31908.547947]  kasan_report_error+0x1f1/0x4f0
    [31908.548038]  ? kfree+0xaa/0x170
    [31908.548121]  kasan_report+0x34/0x40
    [31908.548211]  ? klist_children_get+0x20/0x30
    [31908.548472]  ? intel_lpe_audio_teardown+0x78/0xb0 [i915]
    [31908.548567]  __asan_load8+0x5e/0x70
    [31908.548824]  intel_lpe_audio_teardown+0x78/0xb0 [i915]
    [31908.549080]  intel_audio_deinit+0x28/0x80 [i915]
    [31908.549315]  i915_driver_unload+0xe4/0x360 [i915]
    [31908.549551]  ? i915_driver_load+0x1d70/0x1d70 [i915]
    [31908.549651]  ? trace_hardirqs_on+0xd/0x10
    [31908.549885]  i915_pci_remove+0x23/0x30 [i915]
    [31908.549978]  pci_device_remove+0x5c/0x100
    [31908.550069]  device_release_driver_internal+0x1db/0x2e0
    [31908.550165]  driver_detach+0x68/0xc0
    [31908.550256]  bus_remove_driver+0x8b/0x150
    [31908.550346]  driver_unregister+0x3e/0x60
    [31908.550439]  pci_unregister_driver+0x1d/0x110
    [31908.550531]  ? find_module_all+0x7a/0xa0
    [31908.550791]  i915_exit+0x1a/0x87 [i915]
    [31908.550881]  SyS_delete_module+0x264/0x2c0
    [31908.550971]  ? free_module+0x430/0x430
    [31908.551064]  ? trace_hardirqs_off_caller+0x16/0x110
    [31908.551159]  ? trace_hardirqs_on_caller+0x16/0x280
    [31908.551256]  ? trace_hardirqs_on_thunk+0x1a/0x1c
    [31908.551350]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.551440] RIP: 0033:0x7f1d67312ec7
    [31908.551520] RSP: 002b:00007ffebe34e888 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [31908.551650] RAX: ffffffffffffffda RBX: ffffffff811123f6 RCX: 00007f1d67312ec7
    [31908.551743] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 0000560d0af476b8
    [31908.551837] RBP: ffff880233d87f98 R08: 0000000000000000 R09: 00007ffebe34e8b8
    [31908.551930] R10: 00007f1d68adf8c0 R11: 0000000000000206 R12: 0000000000000000
    [31908.552023] R13: 0000560d0af46440 R14: 0000000000000034 R15: 00007ffebe34d860
    [31908.552121]  ? trace_hardirqs_off_caller+0x16/0x110
    [31908.552217] Object at ffff8801f7788000, in cache kmalloc-2048 size: 2048
    [31908.552306] Allocated:
    [31908.552377] PID = 3781
    [31908.552456]  save_stack_trace+0x16/0x20
    [31908.552539]  kasan_kmalloc+0xee/0x190
    [31908.552627]  __kmalloc+0xdb/0x1b0
    [31908.552713]  platform_device_alloc+0x27/0x90
    [31908.552804]  platform_device_register_full+0x36/0x220
    [31908.553066]  intel_lpe_audio_init+0x41e/0x570 [i915]
    [31908.553320]  intel_audio_init+0xd/0x40 [i915]
    [31908.553552]  i915_driver_load+0x13f5/0x1d70 [i915]
    [31908.553788]  i915_pci_probe+0x65/0xe0 [i915]
    [31908.553881]  pci_device_probe+0xda/0x140
    [31908.553969]  driver_probe_device+0x400/0x660
    [31908.554058]  __driver_attach+0x11c/0x120
    [31908.554147]  bus_for_each_dev+0xe6/0x150
    [31908.554237]  driver_attach+0x26/0x30
    [31908.554325]  bus_add_driver+0x26b/0x3b0
    [31908.554412]  driver_register+0xce/0x190
    [31908.554502]  __pci_register_driver+0xaf/0xc0
    [31908.554589]  0xffffffffa0550063
    [31908.554675]  do_one_initcall+0x8b/0x1e0
    [31908.554764]  do_init_module+0x102/0x325
    [31908.554852]  load_module+0x3aad/0x45e0
    [31908.554944]  SyS_finit_module+0x169/0x1a0
    [31908.555033]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.555119] Freed:
    [31908.555188] PID = 3781
    [31908.555266]  save_stack_trace+0x16/0x20
    [31908.555349]  kasan_slab_free+0xb0/0x180
    [31908.555436]  kfree+0xaa/0x170
    [31908.555520]  platform_device_release+0x76/0x80
    [31908.555610]  device_release+0x45/0xe0
    [31908.555698]  kobject_put+0x11f/0x260
    [31908.555785]  put_device+0x12/0x20
    [31908.555871]  platform_device_unregister+0x1b/0x20
    [31908.556135]  intel_lpe_audio_teardown+0x5c/0xb0 [i915]
    [31908.556390]  intel_audio_deinit+0x28/0x80 [i915]
    [31908.556622]  i915_driver_unload+0xe4/0x360 [i915]
    [31908.556858]  i915_pci_remove+0x23/0x30 [i915]
    [31908.556948]  pci_device_remove+0x5c/0x100
    [31908.557037]  device_release_driver_internal+0x1db/0x2e0
    [31908.557129]  driver_detach+0x68/0xc0
    [31908.557217]  bus_remove_driver+0x8b/0x150
    [31908.557304]  driver_unregister+0x3e/0x60
    [31908.557394]  pci_unregister_driver+0x1d/0x110
    [31908.557653]  i915_exit+0x1a/0x87 [i915]
    [31908.557741]  SyS_delete_module+0x264/0x2c0
    [31908.557834]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.557919] Memory state around the buggy address:
    [31908.558005]  ffff8801f7788200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558127]  ffff8801f7788280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558255] >ffff8801f7788300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558374]                                                     ^
    [31908.558467]  ffff8801f7788380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558595]  ffff8801f7788400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    v2: Just leak the memory (8 bytes) as freeing it ourselves is not safe,
    and we need to coordinate a proper fix in platform_device itself.
    
    Fixes: eef57324d926 ("drm/i915: setup bridge for HDMI LPE audio driver")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=99952
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: Jerome Anand <jerome.anand@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170412080251.30648-1-chris@chris-wilson.co.uk
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    (cherry picked from commit 48ae80741da4b8a26b6df0f765713912bc7cc480)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 6aeafd05eca9bc8ab6b03d7e56d09ffd18190f44
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Tue Apr 25 11:26:53 2017 -0400

    pNFS: Fix use after free issues in pnfs_do_read()
    
    The assumption should be that if the caller returns PNFS_ATTEMPTED, then hdr
    has been consumed, and so we should not be testing hdr->task.tk_status.
    If the caller returns PNFS_TRY_AGAIN, then we need to recoalesce and
    free hdr.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit b1b9d366028ff580e6dd80b48a69c473361456f1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 25 22:58:37 2017 +0800

    bridge: move bridge multicast cleanup to ndo_uninit
    
    During removing a bridge device, if the bridge is still up, a new mdb entry
    still can be added in br_multicast_add_group() after all mdb entries are
    removed in br_multicast_dev_del(). Like the path:
    
      mld_ifc_timer_expire ->
        mld_sendpack -> ...
          br_multicast_rcv ->
            br_multicast_add_group
    
    The new mp's timer will be set up. If the timer expires after the bridge
    is freed, it may cause use-after-free panic in br_multicast_group_expired.
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000048
    IP: [<ffffffffa07ed2c8>] br_multicast_group_expired+0x28/0xb0 [bridge]
    Call Trace:
     <IRQ>
     [<ffffffff81094536>] call_timer_fn+0x36/0x110
     [<ffffffffa07ed2a0>] ? br_mdb_free+0x30/0x30 [bridge]
     [<ffffffff81096967>] run_timer_softirq+0x237/0x340
     [<ffffffff8108dcbf>] __do_softirq+0xef/0x280
     [<ffffffff8169889c>] call_softirq+0x1c/0x30
     [<ffffffff8102c275>] do_softirq+0x65/0xa0
     [<ffffffff8108e055>] irq_exit+0x115/0x120
     [<ffffffff81699515>] smp_apic_timer_interrupt+0x45/0x60
     [<ffffffff81697a5d>] apic_timer_interrupt+0x6d/0x80
    
    Nikolay also found it would cause a memory leak - the mdb hash is
    reallocated and not freed due to the mdb rehash.
    
    unreferenced object 0xffff8800540ba800 (size 2048):
      backtrace:
        [<ffffffff816e2287>] kmemleak_alloc+0x67/0xc0
        [<ffffffff81260bea>] __kmalloc+0x1ba/0x3e0
        [<ffffffffa05c60ee>] br_mdb_rehash+0x5e/0x340 [bridge]
        [<ffffffffa05c74af>] br_multicast_new_group+0x43f/0x6e0 [bridge]
        [<ffffffffa05c7aa3>] br_multicast_add_group+0x203/0x260 [bridge]
        [<ffffffffa05ca4b5>] br_multicast_rcv+0x945/0x11d0 [bridge]
        [<ffffffffa05b6b10>] br_dev_xmit+0x180/0x470 [bridge]
        [<ffffffff815c781b>] dev_hard_start_xmit+0xbb/0x3d0
        [<ffffffff815c8743>] __dev_queue_xmit+0xb13/0xc10
        [<ffffffff815c8850>] dev_queue_xmit+0x10/0x20
        [<ffffffffa02f8d7a>] ip6_finish_output2+0x5ca/0xac0 [ipv6]
        [<ffffffffa02fbfc6>] ip6_finish_output+0x126/0x2c0 [ipv6]
        [<ffffffffa02fc245>] ip6_output+0xe5/0x390 [ipv6]
        [<ffffffffa032b92c>] NF_HOOK.constprop.44+0x6c/0x240 [ipv6]
        [<ffffffffa032bd16>] mld_sendpack+0x216/0x3e0 [ipv6]
        [<ffffffffa032d5eb>] mld_ifc_timer_expire+0x18b/0x2b0 [ipv6]
    
    This could happen when ip link remove a bridge or destroy a netns with a
    bridge device inside.
    
    With Nikolay's suggestion, this patch is to clean up bridge multicast in
    ndo_uninit after bridge dev is shutdown, instead of br_dev_delete, so
    that netif_running check in br_multicast_add_group can avoid this issue.
    
    v1->v2:
      - fix this issue by moving br_multicast_dev_del to ndo_uninit, instead
        of calling dev_close in br_dev_delete.
    
    (NOTE: Depends upon b6fe0440c637 ("bridge: implement missing ndo_uninit()"))
    
    Fixes: e10177abf842 ("bridge: multicast: fix handling of temp and perm entries")
    Reported-by: Jianwen Ji <jiji@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a39e7aa8a98f777f0732ca7125b6c9668791760
Author: Pan Bian <bianpan2016@163.com>
Date:   Sun Apr 23 17:38:35 2017 +0800

    wan: pc300too: abort path on failure
    
    In function pc300_pci_init_one(), on the ioremap error path, function
    pc300_pci_remove_one() is called to free the allocated memory. However,
    the path is not terminated, and the freed memory will be used later,
    resulting in use-after-free bugs. This path fixes the bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 68baf692c435339e6295cb470ea5545cbc28160e
Author: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
Date:   Mon Apr 17 20:21:40 2017 -0400

    powerpc/pseries: Fix of_node_put() underflow during DLPAR remove
    
    Historically struct device_node references were tracked using a kref embedded as
    a struct field. Commit 75b57ecf9d1d ("of: Make device nodes kobjects so they
    show up in sysfs") (Mar 2014) refactored device_nodes to be kobjects such that
    the device tree could by more simply exposed to userspace using sysfs.
    
    Commit 0829f6d1f69e ("of: device_node kobject lifecycle fixes") (Mar 2014)
    followed up these changes to better control the kobject lifecycle and in
    particular the referecne counting via of_node_get(), of_node_put(), and
    of_node_init().
    
    A result of this second commit was that it introduced an of_node_put() call when
    a dynamic node is detached, in of_node_remove(), that removes the initial kobj
    reference created by of_node_init().
    
    Traditionally as the original dynamic device node user the pseries code had
    assumed responsibilty for releasing this final reference in its platform
    specific DLPAR detach code.
    
    This patch fixes a refcount underflow introduced by commit 0829f6d1f6, and
    recently exposed by the upstreaming of the recount API.
    
    Messages like the following are no longer seen in the kernel log with this
    patch following DLPAR remove operations of cpus and pci devices.
    
      rpadlpar_io: slot PHB 72 removed
      refcount_t: underflow; use-after-free.
      ------------[ cut here ]------------
      WARNING: CPU: 5 PID: 3335 at lib/refcount.c:128 refcount_sub_and_test+0xf4/0x110
    
    Fixes: 0829f6d1f69e ("of: device_node kobject lifecycle fixes")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Tyrel Datwyler <tyreld@linux.vnet.ibm.com>
    [mpe: Make change log commit references more verbose]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit ade0b0c965f59176daddbef9c4717354034f9bce
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Apr 22 09:15:37 2017 +0100

    drm/i915: Confirm the request is still active before adding it to the await
    
    Although we do check the completion-status of the request before
    actually adding a wait on it (either to its submit fence or its
    completion dma-fence), we currently do not check before adding it to the
    dependency lists.
    
    In fact, without checking for a completed request we may try to use the
    signaler after it has been retired and its dependency tree freed:
    
    [   60.044057] BUG: KASAN: use-after-free in __list_add_valid+0x1d/0xd0 at addr ffff880348c9e6a0
    [   60.044118] Read of size 8 by task gem_exec_fence/530
    [   60.044164] CPU: 1 PID: 530 Comm: gem_exec_fence Tainted: G            E   4.11.0-rc7+ #46
    [   60.044226] Hardware name: ��������������������������������� ���������������������������������/���������������������������������, BIOS RYBDWi35.86A.0246.2
    [   60.044290] Call Trace:
    [   60.044337]  dump_stack+0x4d/0x6a
    [   60.044383]  kasan_object_err+0x21/0x70
    [   60.044435]  kasan_report+0x225/0x4e0
    [   60.044488]  ? __list_add_valid+0x1d/0xd0
    [   60.044534]  ? kasan_kmalloc+0xad/0xe0
    [   60.044587]  __asan_load8+0x5e/0x70
    [   60.044639]  __list_add_valid+0x1d/0xd0
    [   60.044788]  __i915_priotree_add_dependency+0x67/0x130 [i915]
    [   60.044895]  i915_gem_request_await_request+0xa8/0x370 [i915]
    [   60.044974]  i915_gem_request_await_dma_fence+0x129/0x140 [i915]
    [   60.045049]  i915_gem_do_execbuffer.isra.37+0xb0a/0x26b0 [i915]
    [   60.045077]  ? save_stack+0xb1/0xd0
    [   60.045105]  ? save_stack_trace+0x1b/0x20
    [   60.045132]  ? save_stack+0x46/0xd0
    [   60.045158]  ? kasan_kmalloc+0xad/0xe0
    [   60.045184]  ? __kmalloc+0xd8/0x670
    [   60.045229]  ? drm_ioctl+0x359/0x640 [drm]
    [   60.045256]  ? SyS_ioctl+0x41/0x70
    [   60.045330]  ? i915_vma_move_to_active+0x540/0x540 [i915]
    [   60.045360]  ? tty_insert_flip_string_flags+0xa1/0xf0
    [   60.045387]  ? tty_flip_buffer_push+0x63/0x70
    [   60.045414]  ? remove_wait_queue+0xa9/0xc0
    [   60.045441]  ? kasan_unpoison_shadow+0x35/0x50
    [   60.045467]  ? kasan_kmalloc+0xad/0xe0
    [   60.045494]  ? kasan_check_write+0x14/0x20
    [   60.045568]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.045616]  drm_ioctl+0x359/0x640 [drm]
    [   60.045705]  ? i915_gem_execbuffer+0x5a0/0x5a0 [i915]
    [   60.045751]  ? drm_version+0x150/0x150 [drm]
    [   60.045778]  ? compat_start_thread+0x60/0x60
    [   60.045805]  ? plist_del+0xda/0x1a0
    [   60.045833]  do_vfs_ioctl+0x12e/0x910
    [   60.045860]  ? ioctl_preallocate+0x130/0x130
    [   60.045886]  ? pci_mmcfg_check_reserved+0xc0/0xc0
    [   60.045913]  ? vfs_write+0x196/0x240
    [   60.045939]  ? __fget_light+0xa7/0xc0
    [   60.045965]  SyS_ioctl+0x41/0x70
    [   60.045991]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.046017] RIP: 0033:0x7feb2baefc47
    [   60.046042] RSP: 002b:00007fff56d28e58 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    [   60.046075] RAX: ffffffffffffffda RBX: 00007fff56d290a8 RCX: 00007feb2baefc47
    [   60.046102] RDX: 00007fff56d29050 RSI: 00000000c0406469 RDI: 0000000000000003
    [   60.046129] RBP: 00007fff56d29050 R08: 000055ecc4cd27d0 R09: 00007feb2bda8600
    [   60.046154] R10: 0000000000000073 R11: 0000000000000246 R12: 00000000c0406469
    [   60.046177] R13: 0000000000000003 R14: 000000000000000f R15: 0000000000000099
    [   60.046203] Object at ffff880348c9e680, in cache i915_dependency size: 64
    [   60.046225] Allocated:
    [   60.046246] PID = 530
    [   60.046269]  save_stack_trace+0x1b/0x20
    [   60.046292]  save_stack+0x46/0xd0
    [   60.046318]  kasan_kmalloc+0xad/0xe0
    [   60.046343]  kasan_slab_alloc+0x12/0x20
    [   60.046368]  kmem_cache_alloc+0xab/0x650
    [   60.046445]  i915_gem_request_await_request+0x88/0x370 [i915]
    [   60.046559]  i915_gem_request_await_dma_fence+0x129/0x140 [i915]
    [   60.046705]  i915_gem_do_execbuffer.isra.37+0xb0a/0x26b0 [i915]
    [   60.046849]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.046936]  drm_ioctl+0x359/0x640 [drm]
    [   60.046987]  do_vfs_ioctl+0x12e/0x910
    [   60.047038]  SyS_ioctl+0x41/0x70
    [   60.047090]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.047139] Freed:
    [   60.047179] PID = 530
    [   60.047223]  save_stack_trace+0x1b/0x20
    [   60.047269]  save_stack+0x46/0xd0
    [   60.047317]  kasan_slab_free+0x72/0xc0
    [   60.047366]  kmem_cache_free+0x39/0x160
    [   60.047512]  i915_gem_request_retire+0x83f/0x930 [i915]
    [   60.047657]  i915_gem_request_alloc+0x166/0x600 [i915]
    [   60.047799]  i915_gem_do_execbuffer.isra.37+0xad8/0x26b0 [i915]
    [   60.047897]  i915_gem_execbuffer2+0xdb/0x2a0 [i915]
    [   60.047942]  drm_ioctl+0x359/0x640 [drm]
    [   60.047968]  do_vfs_ioctl+0x12e/0x910
    [   60.047993]  SyS_ioctl+0x41/0x70
    [   60.048019]  entry_SYSCALL_64_fastpath+0x17/0x98
    [   60.048044] Memory state around the buggy address:
    [   60.048066]  ffff880348c9e580: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048105]  ffff880348c9e600: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048138] >ffff880348c9e680: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
    [   60.048170]                                ^
    [   60.048191]  ffff880348c9e700: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    [   60.048225]  ffff880348c9e780: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
    
    Note to hit the use-after-free requires us to be passed back a request
    via a fence-array, that is from explicit fencing accumulated into a
    sync-file fence-array.
    
    Fixes: 52e542090701 ("drm/i915/scheduler: Record all dependencies upon request construction")
    Testcase: igt/gem_exec_fence/expired-history
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170422081537.6468-1-chris@chris-wilson.co.uk

commits)
      netpoll: Check for skb->queue_mapping
      ip6mr: fix notification device destruction
      bpf, doc: update bpf maintainers entry
      net: qrtr: potential use after free in qrtr_sendmsg()
      bpf: Fix values type used in test_maps
      net: ipv6: RTF_PCPU should not be settable from userspace
      gso: Validate assumption of frag_list segementation
      kaweth: use skb_cow_head() to deal with cloned skbs
      ch9200: use skb_cow_head() to deal with cloned skbs
      lan78xx: use skb_cow_head() to deal with cloned skbs
      sr9700: use skb_cow_head() to deal with cloned skbs
      cx82310_eth: use skb_cow_head() to deal with cloned skbs
      smsc75xx: use skb_cow_head() to deal with cloned skbs
      ipv6: sr: fix double free of skb after handling invalid SRH
      MAINTAINERS: Add "B:" field for networking.
      net sched actions: allocate act cookie early
      qed: Fix issue in populating the PFC config paramters.
      qed: Fix possible system hang in the dcbnl-getdcbx() path.
      qed: Fix sending an invalid PFC error mask to MFW.
      qed: Fix possible error in populating max_tc field.
      ...

commit 6f60f438108c66988c944894e5f673ab5d04fbc1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 20 13:21:30 2017 +0300

    net: qrtr: potential use after free in qrtr_sendmsg()
    
    If skb_pad() fails then it frees the skb so we should check for errors.
    
    Fixes: bdabad3e363d ("net: Add Qualcomm IPC router")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 76bb5db5c749dfe19d779aac076133e821b859dd
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Wed Apr 19 15:22:02 2017 -0700

    netvsc: fix use after free on module removal
    
    The NAPI data structure is embedded in the netvsc_device structure
    and is freed when device is closed. There is still a reference
    (in NAPI list) to this which causes a crash in netif_napi_del
    when device is removed. Fix by managing NAPI instances correctly.
    
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b312be3d87e4c80872cbea869e569175c5eb0f9a
Author: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date:   Sun Mar 19 10:55:57 2017 +0200

    IB/core: Fix sysfs registration error flow
    
    The kernel commit cited below restructured ib device management
    so that the device kobject is initialized in ib_alloc_device.
    
    As part of the restructuring, the kobject is now initialized in
    procedure ib_alloc_device, and is later added to the device hierarchy
    in the ib_register_device call stack, in procedure
    ib_device_register_sysfs (which calls device_add).
    
    However, in the ib_device_register_sysfs error flow, if an error
    occurs following the call to device_add, the cleanup procedure
    device_unregister is called. This call results in the device object
    being deleted -- which results in various use-after-free crashes.
    
    The correct cleanup call is device_del -- which undoes device_add
    without deleting the device object.
    
    The device object will then (correctly) be deleted in the
    ib_register_device caller's error cleanup flow, when the caller invokes
    ib_dealloc_device.
    
    Fixes: 55aeed06544f6 ("IB/core: Make ib_alloc_device init the kobject")
    Cc: <stable@vger.kernel.org> # v4.2+
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 9d386cd9a755c8293e8916264d4d053878a7c9c7
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Apr 18 22:14:26 2017 +0300

    dp83640: don't recieve time stamps twice
    
    This patch is prompted by a static checker warning about a potential
    use after free.  The concern is that netif_rx_ni() can free "skb" and we
    call it twice.
    
    When I look at the commit that added this, it looks like some stray
    lines were added accidentally.  It doesn't make sense to me that we
    would recieve the same data two times.  I asked the author but never
    recieved a response.
    
    I can't test this code, but I'm pretty sure my patch is correct.
    
    Fixes: 4b063258ab93 ("dp83640: Delay scheduled work.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Stefan Sørensen <stefan.sorensen@spectralink.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1f84ccdf37d0db3a70714d02d51b0b6d45887fb8
Author: Fred Isaman <fred.isaman@gmail.com>
Date:   Fri Apr 14 14:24:28 2017 -0400

    NFS: Fix use after free in write error path
    
    Signed-off-by: Fred Isaman <fred.isaman@gmail.com>
    Fixes: 0bcbf039f6b2b ("nfs: handle request add failure properly")
    Cc: stable@vger.kernel.org # v4.5+
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit 75ba4ada8286d415bcaab993ce1f11125b8aa13e
Author: Rakesh Pandit <rakesh@tuxera.com>
Date:   Thu Apr 20 08:17:47 2017 -0600

    ligtnvm: fix double blk_put_queue on same queue
    
    On an error path in NVM_DEV_CREATE ioctl blk_put_queue is being called
    twice: one via blk_cleanup_queue and another via put_disk.  Straight fix
    seems to remove queue pointer so that disk_release never ends up caling
    blk_put_queue again.
    
      [  391.808827] WARNING: CPU: 1 PID: 1250 at lib/refcount.c:128 refcount_sub_and_test+0x70/0x80
      [  391.808830] refcount_t: underflow; use-after-free.
      [ 391.808832] Modules linked in: nf_conntrack_netbios_ns............
      [  391.809052] CPU: 1 PID: 1250 Comm: nvme Not tainted.........
      [  391.809057] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
                 BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
      [  391.809060] Call Trace:
      [  391.809079]  dump_stack+0x63/0x86
      [  391.809094]  __warn+0xcb/0xf0
      [  391.809103]  warn_slowpath_fmt+0x5f/0x80
      [  391.809118]  refcount_sub_and_test+0x70/0x80
      [  391.809125]  refcount_dec_and_test+0x11/0x20
      [  391.809136]  kobject_put+0x1f/0x60
      [  391.809149]  blk_put_queue+0x15/0x20
      [  391.809159]  disk_release+0xae/0xf0
      [  391.809172]  device_release+0x32/0x90
      [  391.809184]  kobject_release+0x6a/0x170
      [  391.809196]  kobject_put+0x2f/0x60
      [  391.809206]  put_disk+0x17/0x20
      [  391.809219]  nvm_ioctl_dev_create.isra.16+0x897/0xa30
      [  391.809236]  nvm_ctl_ioctl+0x23c/0x4c0
      [  391.809248]  do_vfs_ioctl+0xa3/0x5f0
      [  391.809258]  SyS_ioctl+0x79/0x90
      [  391.809271]  entry_SYSCALL_64_fastpath+0x1a/0xa9
      [  391.809280] RIP: 0033:0x7f5d3ef363c7
      [  391.809286] RSP: 002b:00007ffc72ed8d78 EFLAGS: 00000206 ORIG_RAX: 0000000000000010
      [  391.809296] RAX: ffffffffffffffda RBX: 00007ffc72edb552 RCX: 00007f5d3ef363c7
      [  391.809301] RDX: 00007ffc72ed8d90 RSI: 0000000040804c22 RDI: 0000000000000003
      [  391.809306] RBP: 0000000000000001 R08: 0000000000000020 R09: 0000000000000001
      [  391.809311] R10: 000000000000053f R11: 0000000000000206 R12: 0000000000000000
      [  391.809316] R13: 0000000000000000 R14: 00007ffc72edb58d R15: 00007ffc72edb581
    
    Signed-off-by: Rakesh Pandit <rakesh@tuxera.com>
    Reviewed-by: Matias Bjørling <matias@cnexlabs.com>
    Fixes: 7d1ef2f408ab "lightnvm: fix cleanup order of disk on init error"
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 3c8cb9ad032d737b874e402c59eb51e3c991a144
Author: Brian Norris <briannorris@chromium.org>
Date:   Fri Apr 14 14:51:17 2017 -0700

    mwifiex: pcie: fix cmd_buf use-after-free in remove/reset
    
    Command buffers (skb's) are allocated by the main driver, and freed upon
    the last use. That last use is often in mwifiex_free_cmd_buffer(). In
    the meantime, if the command buffer gets used by the PCI driver, we map
    it as DMA-able, and store the mapping information in the 'cb' memory.
    
    However, if a command was in-flight when resetting the device (and
    therefore was still mapped), we don't get a chance to unmap this memory
    until after the core has cleaned up its command handling.
    
    Let's keep a refcount within the PCI driver, so we ensure the memory
    only gets freed after we've finished unmapping it.
    
    Noticed by KASAN when forcing a reset via:
    
      echo 1 > /sys/bus/pci/.../reset
    
    The same code path can presumably be exercised in remove() and
    shutdown().
    
    [  205.390377] mwifiex_pcie 0000:01:00.0: info: shutdown mwifiex...
    [  205.400393] ==================================================================
    [  205.407719] BUG: KASAN: use-after-free in mwifiex_unmap_pci_memory.isra.14+0x4c/0x100 [mwifiex_pcie] at addr ffffffc0ad471b28
    [  205.419040] Read of size 16 by task bash/1913
    [  205.423421] =============================================================================
    [  205.431625] BUG skbuff_head_cache (Tainted: G    B          ): kasan: bad access detected
    [  205.439815] -----------------------------------------------------------------------------
    [  205.439815]
    [  205.449534] INFO: Allocated in __build_skb+0x48/0x114 age=1311 cpu=4 pid=1913
    [  205.456709]  alloc_debug_processing+0x124/0x178
    [  205.461282]  ___slab_alloc.constprop.58+0x528/0x608
    [  205.466196]  __slab_alloc.isra.54.constprop.57+0x44/0x54
    [  205.471542]  kmem_cache_alloc+0xcc/0x278
    [  205.475497]  __build_skb+0x48/0x114
    [  205.479019]  __netdev_alloc_skb+0xe0/0x170
    [  205.483244]  mwifiex_alloc_cmd_buffer+0x68/0xdc [mwifiex]
    [  205.488759]  mwifiex_init_fw+0x40/0x6cc [mwifiex]
    [  205.493584]  _mwifiex_fw_dpc+0x158/0x520 [mwifiex]
    [  205.498491]  mwifiex_reinit_sw+0x2c4/0x398 [mwifiex]
    [  205.503510]  mwifiex_pcie_reset_notify+0x114/0x15c [mwifiex_pcie]
    [  205.509643]  pci_reset_notify+0x5c/0x6c
    [  205.513519]  pci_reset_function+0x6c/0x7c
    [  205.517567]  reset_store+0x68/0x98
    [  205.521003]  dev_attr_store+0x54/0x60
    [  205.524705]  sysfs_kf_write+0x9c/0xb0
    [  205.528413] INFO: Freed in __kfree_skb+0xb0/0xbc age=131 cpu=4 pid=1913
    [  205.535064]  free_debug_processing+0x264/0x370
    [  205.539550]  __slab_free+0x84/0x40c
    [  205.543075]  kmem_cache_free+0x1c8/0x2a0
    [  205.547030]  __kfree_skb+0xb0/0xbc
    [  205.550465]  consume_skb+0x164/0x178
    [  205.554079]  __dev_kfree_skb_any+0x58/0x64
    [  205.558304]  mwifiex_free_cmd_buffer+0xa0/0x158 [mwifiex]
    [  205.563817]  mwifiex_shutdown_drv+0x578/0x5c4 [mwifiex]
    [  205.569164]  mwifiex_shutdown_sw+0x178/0x310 [mwifiex]
    [  205.574353]  mwifiex_pcie_reset_notify+0xd4/0x15c [mwifiex_pcie]
    [  205.580398]  pci_reset_notify+0x5c/0x6c
    [  205.584274]  pci_dev_save_and_disable+0x24/0x6c
    [  205.588837]  pci_reset_function+0x30/0x7c
    [  205.592885]  reset_store+0x68/0x98
    [  205.596324]  dev_attr_store+0x54/0x60
    [  205.600017]  sysfs_kf_write+0x9c/0xb0
    ...
    [  205.800488] Call trace:
    [  205.802980] [<ffffffc00020a69c>] dump_backtrace+0x0/0x190
    [  205.808415] [<ffffffc00020a96c>] show_stack+0x20/0x28
    [  205.813506] [<ffffffc0005d020c>] dump_stack+0xa4/0xcc
    [  205.818598] [<ffffffc0003be44c>] print_trailer+0x158/0x168
    [  205.824120] [<ffffffc0003be5f0>] object_err+0x4c/0x5c
    [  205.829210] [<ffffffc0003c45bc>] kasan_report+0x334/0x500
    [  205.834641] [<ffffffc0003c3994>] check_memory_region+0x20/0x14c
    [  205.840593] [<ffffffc0003c3b14>] __asan_loadN+0x14/0x1c
    [  205.845879] [<ffffffbffc46171c>] mwifiex_unmap_pci_memory.isra.14+0x4c/0x100 [mwifiex_pcie]
    [  205.854282] [<ffffffbffc461864>] mwifiex_pcie_delete_cmdrsp_buf+0x94/0xa8 [mwifiex_pcie]
    [  205.862421] [<ffffffbffc462028>] mwifiex_pcie_free_buffers+0x11c/0x158 [mwifiex_pcie]
    [  205.870302] [<ffffffbffc4620d4>] mwifiex_pcie_down_dev+0x70/0x80 [mwifiex_pcie]
    [  205.877736] [<ffffffbffc1397a8>] mwifiex_shutdown_sw+0x190/0x310 [mwifiex]
    [  205.884658] [<ffffffbffc4606b4>] mwifiex_pcie_reset_notify+0xd4/0x15c [mwifiex_pcie]
    [  205.892446] [<ffffffc000635f54>] pci_reset_notify+0x5c/0x6c
    [  205.898048] [<ffffffc00063a044>] pci_dev_save_and_disable+0x24/0x6c
    [  205.904350] [<ffffffc00063cf0c>] pci_reset_function+0x30/0x7c
    [  205.910134] [<ffffffc000641118>] reset_store+0x68/0x98
    [  205.915312] [<ffffffc000771588>] dev_attr_store+0x54/0x60
    [  205.920750] [<ffffffc00046f53c>] sysfs_kf_write+0x9c/0xb0
    [  205.926182] [<ffffffc00046dfb0>] kernfs_fop_write+0x184/0x1f8
    [  205.931963] [<ffffffc0003d64f4>] __vfs_write+0x6c/0x17c
    [  205.937221] [<ffffffc0003d7164>] vfs_write+0xf0/0x1c4
    [  205.942310] [<ffffffc0003d7da0>] SyS_write+0x78/0xd8
    [  205.947312] [<ffffffc000204634>] el0_svc_naked+0x24/0x28
    ...
    [  205.998268] ==================================================================
    
    This bug has been around in different forms for a while. It was sort of
    noticed in commit 955ab095c51a ("mwifiex: Do not kfree cmd buf while
    unregistering PCIe"), but it just fixed the double-free, without
    acknowledging the potential for use-after-free.
    
    Fixes: fc3314609047 ("mwifiex: use pci_alloc/free_consistent APIs for PCIe")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 073c516ff73557a8f7315066856c04b50383ac34
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Apr 19 15:11:00 2017 -0700

    nsfs: mark dentry with DCACHE_RCUACCESS
    
    Andrey reported a use-after-free in __ns_get_path():
    
      spin_lock include/linux/spinlock.h:299 [inline]
      lockref_get_not_dead+0x19/0x80 lib/lockref.c:179
      __ns_get_path+0x197/0x860 fs/nsfs.c:66
      open_related_ns+0xda/0x200 fs/nsfs.c:143
      sock_ioctl+0x39d/0x440 net/socket.c:1001
      vfs_ioctl fs/ioctl.c:45 [inline]
      do_vfs_ioctl+0x1bf/0x1780 fs/ioctl.c:685
      SYSC_ioctl fs/ioctl.c:700 [inline]
      SyS_ioctl+0x8f/0xc0 fs/ioctl.c:691
    
    We are under rcu read lock protection at that point:
    
            rcu_read_lock();
            d = atomic_long_read(&ns->stashed);
            if (!d)
                    goto slow;
            dentry = (struct dentry *)d;
            if (!lockref_get_not_dead(&dentry->d_lockref))
                    goto slow;
            rcu_read_unlock();
    
    but don't use a proper RCU API on the free path, therefore a parallel
    __d_free() could free it at the same time.  We need to mark the stashed
    dentry with DCACHE_RCUACCESS so that __d_free() will be called after all
    readers leave RCU.
    
    Fixes: e149ed2b805f ("take the targets of /proc/*/ns/* symlinks to separate fs")
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 095fc40ace5ffccd306f39fdd1a40b4faa41b8a0
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 11:04:05 2017 +0200

    fuse: convert fuse_conn.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit ec99f6d31f2590a4c0ff2dae8fb1fa27f0647a42
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 11:04:04 2017 +0200

    fuse: convert fuse_req.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit 4e8c2eb54327a6f8b0ef6d6afb28ab24b721dbe0
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 11:04:03 2017 +0200

    fuse: convert fuse_file.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit 24196f0c7d4bba093dfa8074507f31509970319f
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Apr 18 09:02:48 2017 -0500

    PCI: hv: Convert hv_pci_dev.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.  This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Stephen Hemminger <sthemmin@microsoft.com>

commit e501bfe323356ea3f7ef79d4b0d95389b70a7193
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Wed Mar 29 09:33:22 2017 +0800

    btrfs: Prevent scrub recheck from racing with dev replace
    
    scrub_setup_recheck_block() calls btrfs_map_sblock() and then accesses
    bbio without protection of bio_counter.
    
    This can lead to use-after-free if racing with dev replace cancel.
    
    Fix it by increasing bio_counter before calling btrfs_map_sblock() and
    decreasing the bio_counter when corresponding recover is finished.
    
    Cc: Liu Bo <bo.li.liu@oracle.com>
    Reported-by: Liu Bo <bo.li.liu@oracle.com>
    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit ae6529c35bcc1c65c12131cef2aea63d8e2ea950
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Wed Mar 29 09:33:21 2017 +0800

    btrfs: Wait for in-flight bios before freeing target device for raid56
    
    When raid56 dev-replace is cancelled by running scrub, we will free
    target device without waiting for in-flight bios, causing the following
    NULL pointer deference or general protection failure.
    
     BUG: unable to handle kernel NULL pointer dereference at 00000000000005e0
     IP: generic_make_request_checks+0x4d/0x610
     CPU: 1 PID: 11676 Comm: kworker/u4:14 Tainted: G  O    4.11.0-rc2 #72
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.10.2-20170228_101828-anatol 04/01/2014
     Workqueue: btrfs-endio-raid56 btrfs_endio_raid56_helper [btrfs]
     task: ffff88002875b4c0 task.stack: ffffc90001334000
     RIP: 0010:generic_make_request_checks+0x4d/0x610
     Call Trace:
      ? generic_make_request+0xc7/0x360
      generic_make_request+0x24/0x360
      ? generic_make_request+0xc7/0x360
      submit_bio+0x64/0x120
      ? page_in_rbio+0x4d/0x80 [btrfs]
      ? rbio_orig_end_io+0x80/0x80 [btrfs]
      finish_rmw+0x3f4/0x540 [btrfs]
      validate_rbio_for_rmw+0x36/0x40 [btrfs]
      raid_rmw_end_io+0x7a/0x90 [btrfs]
      bio_endio+0x56/0x60
      end_workqueue_fn+0x3c/0x40 [btrfs]
      btrfs_scrubparity_helper+0xef/0x620 [btrfs]
      btrfs_endio_raid56_helper+0xe/0x10 [btrfs]
      process_one_work+0x2af/0x720
      ? process_one_work+0x22b/0x720
      worker_thread+0x4b/0x4f0
      kthread+0x10f/0x150
      ? process_one_work+0x720/0x720
      ? kthread_create_on_node+0x40/0x40
      ret_from_fork+0x2e/0x40
     RIP: generic_make_request_checks+0x4d/0x610 RSP: ffffc90001337bb8
    
    In btrfs_dev_replace_finishing(), we will call
    btrfs_rm_dev_replace_blocked() to wait bios before destroying the target
    device when scrub is finished normally.
    
    However when dev-replace is aborted, either due to error or cancelled by
    scrub, we didn't wait for bios, this can lead to use-after-free if there
    are bios holding the target device.
    
    Furthermore, for raid56 scrub, at least 2 places are calling
    btrfs_map_sblock() without protection of bio_counter, leading to the
    problem.
    
    This patch fixes the problem:
    1) Wait for bio_counter before freeing target device when canceling
       replace
    2) When calling btrfs_map_sblock() for raid56, use bio_counter to
       protect the call.
    
    Cc: Liu Bo <bo.li.liu@oracle.com>
    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Reviewed-by: Liu Bo <bo.li.liu@oracle.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit dec95574f4e6545c701420b950278dc6f55d0368
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:26 2017 +0200

    btrfs: convert btrfs_raid_bio.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 99f4cdb16f80e1b30392b479d852036f87394b20
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:25 2017 +0200

    btrfs: convert scrub_ctx.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 78a764504d1e11411bec0e068c5d9e0a417aff08
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:24 2017 +0200

    btrfs: convert scrub_parity.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 186debd6ede29da9d51cffdb93cadee66e4e1e23
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:23 2017 +0200

    btrfs: convert scrub_block.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 6f615018b35fb5ea1ce49673079fc637a0b6be70
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:21 2017 +0200

    btrfs: convert scrub_recover.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit a50299ae7cc4ba7268749e144e7c16321c25e3b3
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:20 2017 +0200

    btrfs: convert compressed_bio.pending_bios from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit b7ac31b7b2ebd735b7b67c85711ef6d16648051a
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:19 2017 +0200

    btrfs: convert extent_state.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 0700cea7c8b387c8c6bc4de79b197baa0b3fc4a3
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:18 2017 +0200

    btrfs: convert btrfs_root.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 089e77e10d7e44a007101cf7323dc7bda66172f4
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:17 2017 +0200

    btrfs: convert btrfs_delayed_item.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 6de5f18e7b0da0cdd265eda047a0bc4f48260bcb
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:16 2017 +0200

    btrfs: convert btrfs_delayed_node.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 6df8cdf5bda221f268ac23940bce589ad176993d
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:15 2017 +0200

    btrfs: convert btrfs_delayed_ref_node.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 1e4f4714d59e3fdcde29ee12d40d2e96875a026f
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:14 2017 +0200

    btrfs: convert btrfs_caching_control.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit e76edab7f059bc1047c1865141e2709d70e74852
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:13 2017 +0200

    btrfs: convert btrfs_ordered_extent.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 490b54d6fb75f6ffd0471ec58bb38a992e2b40cd
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:12 2017 +0200

    btrfs: convert extent_map.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 9b64f57ddf8673d29fafb3405d4aa1e93f5a4cd7
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:11 2017 +0200

    btrfs: convert btrfs_transaction.use_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 140475ae4ad10d140bb69572499b1ff87367e807
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 3 10:55:10 2017 +0200

    btrfs: convert btrfs_bio.refs from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit d879d0b8c183aabeb9a65eba91f3f9e3c7e7b905
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Mon Apr 17 11:44:27 2017 +0900

    ftrace: Fix function pid filter on instances
    
    When function tracer has a pid filter, it adds a probe to sched_switch
    to track if current task can be ignored.  The probe checks the
    ftrace_ignore_pid from current tr to filter tasks.  But it misses to
    delete the probe when removing an instance so that it can cause a crash
    due to the invalid tr pointer (use-after-free).
    
    This is easily reproducible with the following:
    
      # cd /sys/kernel/debug/tracing
      # mkdir instances/buggy
      # echo $$ > instances/buggy/set_ftrace_pid
      # rmdir instances/buggy
    
      ============================================================================
      BUG: KASAN: use-after-free in ftrace_filter_pid_sched_switch_probe+0x3d/0x90
      Read of size 8 by task kworker/0:1/17
      CPU: 0 PID: 17 Comm: kworker/0:1 Tainted: G    B           4.11.0-rc3  #198
      Call Trace:
       dump_stack+0x68/0x9f
       kasan_object_err+0x21/0x70
       kasan_report.part.1+0x22b/0x500
       ? ftrace_filter_pid_sched_switch_probe+0x3d/0x90
       kasan_report+0x25/0x30
       __asan_load8+0x5e/0x70
       ftrace_filter_pid_sched_switch_probe+0x3d/0x90
       ? fpid_start+0x130/0x130
       __schedule+0x571/0xce0
       ...
    
    To fix it, use ftrace_clear_pids() to unregister the probe.  As
    instance_rmdir() already updated ftrace codes, it can just free the
    filter safely.
    
    Link: http://lkml.kernel.org/r/20170417024430.21194-2-namhyung@kernel.org
    
    Fixes: 0c8916c34203 ("tracing: Add rmdir to remove multibuffer instances")
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Reviewed-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

commit 1862d6208db0aeca9c8ace44915b08d5ab2cd667
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Apr 12 19:24:35 2017 -0400

    net-timestamp: avoid use-after-free in ip_recv_error
    
    Syzkaller reported a use-after-free in ip_recv_error at line
    
        info->ipi_ifindex = skb->dev->ifindex;
    
    This function is called on dequeue from the error queue, at which
    point the device pointer may no longer be valid.
    
    Save ifindex on enqueue in __skb_complete_tx_timestamp, when the
    pointer is valid or NULL. Store it in temporary storage skb->cb.
    
    It is safe to reference skb->dev here, as called from device drivers
    or dev_queue_xmit. The exception is when called from tcp_ack_tstamp;
    in that case it is NULL and ifindex is set to 0 (invalid).
    
    Do not return a pktinfo cmsg if ifindex is 0. This maintains the
    current behavior of not returning a cmsg if skb->dev was NULL.
    
    On dequeue, the ipv4 path will cast from sock_exterr_skb to
    in_pktinfo. Both have ifindex as their first element, so no explicit
    conversion is needed. This is by design, introduced in commit
    0b922b7a829c ("net: original ingress device index in PKTINFO"). For
    ipv6 ip6_datagram_support_cmsg converts to in6_pktinfo.
    
    Fixes: 829ae9d61165 ("net-timestamp: allow reading recv cmsg on errqueue with origin tstamp")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c0eb027e5aef70b71e5a38ee3e264dc0b497f343
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 2 17:10:08 2017 -0700

    vfs: don't do RCU lookup of empty pathnames
    
    Normal pathname lookup doesn't allow empty pathnames, but using
    AT_EMPTY_PATH (with name_to_handle_at() or fstatat(), for example) you
    can trigger an empty pathname lookup.
    
    And not only is the RCU lookup in that case entirely unnecessary
    (because we'll obviously immediately finalize the end result), it is
    actively wrong.
    
    Why? An empth path is a special case that will return the original
    'dirfd' dentry - and that dentry may not actually be RCU-free'd,
    resulting in a potential use-after-free if we were to initialize the
    path lazily under the RCU read lock and depend on complete_walk()
    finalizing the dentry.
    
    Found by syzkaller and KASAN.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: Vegard Nossum <vegard.nossum@gmail.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      netfilter: ipt_CLUSTERIP: Fix wrong conntrack netns refcnt usage
      netfilter: nft_hash: do not dump the auto generated seed
      drivers: net: usb: qmi_wwan: add QMI_QUIRK_SET_DTR for Telit PID 0x1201
      ipv6: Fix idev->addr_list corruption
      net: xdp: don't export dev_change_xdp_fd()
      bridge: netlink: register netdevice before executing changelink
      bridge: implement missing ndo_uninit()
      bpf: reference may_access_skb() from __bpf_prog_run()
      tcp: clear saved_syn in tcp_disconnect()
      netfilter: nf_ct_expect: use proper RCU list traversal/update APIs
      netfilter: ctnetlink: skip dumping expect when nfct_help(ct) is NULL
      netfilter: make it safer during the inet6_dev->addr_list traversal
      netfilter: ctnetlink: make it safer when checking the ct helper name
      netfilter: helper: Add the rcu lock when call __nf_conntrack_helper_find
      netfilter: ctnetlink: using bit to represent the ct event
      netfilter: xt_TCPMSS: add more sanity tests on tcph->doff
      net: tcp: Increase TCP_MIB_OUTRSTS even though fail to alloc skb
      l2tp: don't mask errors in pppol2tp_getsockopt()
      l2tp: don't mask errors in pppol2tp_setsockopt()
      tcp: restrict F-RTO to work-around broken middle-boxes
      ...

commit 4e7655fd4f47c23e5249ea260dc802f909a64611
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Apr 9 10:41:27 2017 +0200

    ALSA: seq: Don't break snd_use_lock_sync() loop by timeout
    
    The snd_use_lock_sync() (thus its implementation
    snd_use_lock_sync_helper()) has the 5 seconds timeout to break out of
    the sync loop.  It was introduced from the beginning, just to be
    "safer", in terms of avoiding the stupid bugs.
    
    However, as Ben Hutchings suggested, this timeout rather introduces a
    potential leak or use-after-free that was apparently fixed by the
    commit 2d7d54002e39 ("ALSA: seq: Fix race during FIFO resize"):
    for example, snd_seq_fifo_event_in() -> snd_seq_event_dup() ->
    copy_from_user() could block for a long time, and snd_use_lock_sync()
    goes timeout and still leaves the cell at releasing the pool.
    
    For fixing such a problem, we remove the break by the timeout while
    still keeping the warning.
    
    Suggested-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 48ae80741da4b8a26b6df0f765713912bc7cc480
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 12 09:02:51 2017 +0100

    drm/i915: Fix use after free in lpe_audio_platdev_destroy()
    
    [31908.547136] BUG: KASAN: use-after-free in intel_lpe_audio_teardown+0x78/0xb0 [i915] at addr ffff8801f7788358
    [31908.547297] Read of size 8 by task drv_selftest/3781
    [31908.547405] CPU: 0 PID: 3781 Comm: drv_selftest Tainted: G    BU  W       4.10.0+ #451
    [31908.547553] Hardware name:                  /        , BIOS PYBSWCEL.86A.0027.2015.0507.1758 05/07/2015
    [31908.547682] Call Trace:
    [31908.547772]  dump_stack+0x68/0x9f
    [31908.547857]  kasan_object_err+0x1c/0x70
    [31908.547947]  kasan_report_error+0x1f1/0x4f0
    [31908.548038]  ? kfree+0xaa/0x170
    [31908.548121]  kasan_report+0x34/0x40
    [31908.548211]  ? klist_children_get+0x20/0x30
    [31908.548472]  ? intel_lpe_audio_teardown+0x78/0xb0 [i915]
    [31908.548567]  __asan_load8+0x5e/0x70
    [31908.548824]  intel_lpe_audio_teardown+0x78/0xb0 [i915]
    [31908.549080]  intel_audio_deinit+0x28/0x80 [i915]
    [31908.549315]  i915_driver_unload+0xe4/0x360 [i915]
    [31908.549551]  ? i915_driver_load+0x1d70/0x1d70 [i915]
    [31908.549651]  ? trace_hardirqs_on+0xd/0x10
    [31908.549885]  i915_pci_remove+0x23/0x30 [i915]
    [31908.549978]  pci_device_remove+0x5c/0x100
    [31908.550069]  device_release_driver_internal+0x1db/0x2e0
    [31908.550165]  driver_detach+0x68/0xc0
    [31908.550256]  bus_remove_driver+0x8b/0x150
    [31908.550346]  driver_unregister+0x3e/0x60
    [31908.550439]  pci_unregister_driver+0x1d/0x110
    [31908.550531]  ? find_module_all+0x7a/0xa0
    [31908.550791]  i915_exit+0x1a/0x87 [i915]
    [31908.550881]  SyS_delete_module+0x264/0x2c0
    [31908.550971]  ? free_module+0x430/0x430
    [31908.551064]  ? trace_hardirqs_off_caller+0x16/0x110
    [31908.551159]  ? trace_hardirqs_on_caller+0x16/0x280
    [31908.551256]  ? trace_hardirqs_on_thunk+0x1a/0x1c
    [31908.551350]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.551440] RIP: 0033:0x7f1d67312ec7
    [31908.551520] RSP: 002b:00007ffebe34e888 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
    [31908.551650] RAX: ffffffffffffffda RBX: ffffffff811123f6 RCX: 00007f1d67312ec7
    [31908.551743] RDX: 0000000000000000 RSI: 0000000000000800 RDI: 0000560d0af476b8
    [31908.551837] RBP: ffff880233d87f98 R08: 0000000000000000 R09: 00007ffebe34e8b8
    [31908.551930] R10: 00007f1d68adf8c0 R11: 0000000000000206 R12: 0000000000000000
    [31908.552023] R13: 0000560d0af46440 R14: 0000000000000034 R15: 00007ffebe34d860
    [31908.552121]  ? trace_hardirqs_off_caller+0x16/0x110
    [31908.552217] Object at ffff8801f7788000, in cache kmalloc-2048 size: 2048
    [31908.552306] Allocated:
    [31908.552377] PID = 3781
    [31908.552456]  save_stack_trace+0x16/0x20
    [31908.552539]  kasan_kmalloc+0xee/0x190
    [31908.552627]  __kmalloc+0xdb/0x1b0
    [31908.552713]  platform_device_alloc+0x27/0x90
    [31908.552804]  platform_device_register_full+0x36/0x220
    [31908.553066]  intel_lpe_audio_init+0x41e/0x570 [i915]
    [31908.553320]  intel_audio_init+0xd/0x40 [i915]
    [31908.553552]  i915_driver_load+0x13f5/0x1d70 [i915]
    [31908.553788]  i915_pci_probe+0x65/0xe0 [i915]
    [31908.553881]  pci_device_probe+0xda/0x140
    [31908.553969]  driver_probe_device+0x400/0x660
    [31908.554058]  __driver_attach+0x11c/0x120
    [31908.554147]  bus_for_each_dev+0xe6/0x150
    [31908.554237]  driver_attach+0x26/0x30
    [31908.554325]  bus_add_driver+0x26b/0x3b0
    [31908.554412]  driver_register+0xce/0x190
    [31908.554502]  __pci_register_driver+0xaf/0xc0
    [31908.554589]  0xffffffffa0550063
    [31908.554675]  do_one_initcall+0x8b/0x1e0
    [31908.554764]  do_init_module+0x102/0x325
    [31908.554852]  load_module+0x3aad/0x45e0
    [31908.554944]  SyS_finit_module+0x169/0x1a0
    [31908.555033]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.555119] Freed:
    [31908.555188] PID = 3781
    [31908.555266]  save_stack_trace+0x16/0x20
    [31908.555349]  kasan_slab_free+0xb0/0x180
    [31908.555436]  kfree+0xaa/0x170
    [31908.555520]  platform_device_release+0x76/0x80
    [31908.555610]  device_release+0x45/0xe0
    [31908.555698]  kobject_put+0x11f/0x260
    [31908.555785]  put_device+0x12/0x20
    [31908.555871]  platform_device_unregister+0x1b/0x20
    [31908.556135]  intel_lpe_audio_teardown+0x5c/0xb0 [i915]
    [31908.556390]  intel_audio_deinit+0x28/0x80 [i915]
    [31908.556622]  i915_driver_unload+0xe4/0x360 [i915]
    [31908.556858]  i915_pci_remove+0x23/0x30 [i915]
    [31908.556948]  pci_device_remove+0x5c/0x100
    [31908.557037]  device_release_driver_internal+0x1db/0x2e0
    [31908.557129]  driver_detach+0x68/0xc0
    [31908.557217]  bus_remove_driver+0x8b/0x150
    [31908.557304]  driver_unregister+0x3e/0x60
    [31908.557394]  pci_unregister_driver+0x1d/0x110
    [31908.557653]  i915_exit+0x1a/0x87 [i915]
    [31908.557741]  SyS_delete_module+0x264/0x2c0
    [31908.557834]  entry_SYSCALL_64_fastpath+0x1c/0xb1
    [31908.557919] Memory state around the buggy address:
    [31908.558005]  ffff8801f7788200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558127]  ffff8801f7788280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558255] >ffff8801f7788300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558374]                                                     ^
    [31908.558467]  ffff8801f7788380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [31908.558595]  ffff8801f7788400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    v2: Just leak the memory (8 bytes) as freeing it ourselves is not safe,
    and we need to coordinate a proper fix in platform_device itself.
    
    Fixes: eef57324d926 ("drm/i915: setup bridge for HDMI LPE audio driver")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=99952
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Cc: Jerome Anand <jerome.anand@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170412080251.30648-1-chris@chris-wilson.co.uk
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit 6dea44f5acc3d63fbaa992146e92252329d9a2be
Author: Michael Scott <michael.scott@linaro.org>
Date:   Tue Mar 28 23:10:18 2017 -0700

    Bluetooth: 6lowpan: fix use after free in chan_suspend/resume
    
    A status field in the skb_cb struct was storing a channel status
    based on channel suspend/resume events.  This stored status was
    then used to return EAGAIN if there were packet sending issues
    in snd_pkt().
    
    The issue is that the skb has been freed by the time the callback
    to 6lowpan's suspend/resume was called.  So, this generates a
    "use after free" issue that was noticed while running kernel tests
    with KASAN debug enabled.
    
    Let's eliminate the status field entirely as we can use the channel
    tx_credits to indicate whether we should return EAGAIN when handling
    packets.
    
    Signed-off-by: Michael Scott <michael.scott@linaro.org>
    Acked-by: Jukka Rissanen <jukka.rissanen@linux.intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit dab6b5daeeb3e70bfb2ed2d6d6f02dd387e3b338
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 17 13:12:46 2017 +0200

    Bluetooth: convert rfcomm_dlc.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit a967efb30b3afa3d858edd6a17f544f9e9e46eea
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Mon Apr 10 12:36:26 2017 -0700

    Btrfs: fix potential use-after-free for cloned bio
    
    KASAN reports that there is a use-after-free case of bio in btrfs_map_bio.
    
    If we need to submit IOs to several disks at a time, the original bio
    would get cloned and mapped to the destination disk, but we really should
    use the original bio instead of a cloned bio to do the sanity check
    because cloned bios are likely to be freed by its endio.
    
    Reported-by: Diego <diegocg@gmail.com>
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 4702bbeefb490e315189636a5588628c1151223d
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Apr 10 17:15:48 2017 +0800

    crypto: lrw - Fix use-after-free on EINPROGRESS
    
    When we get an EINPROGRESS completion in lrw, we will end up marking
    the request as done and freeing it.  This then blows up when the
    request is really completed as we've already freed the memory.
    
    Fixes: 700cb3f5fe75 ("crypto: lrw - Convert to skcipher")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit aa4a829bdaced81e70c215a84ef6595ce8bd4308
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sat Apr 8 10:02:46 2017 +0800

    crypto: xts - Fix use-after-free on EINPROGRESS
    
    When we get an EINPROGRESS completion in xts, we will end up marking
    the request as done and freeing it.  This then blows up when the
    request is really completed as we've already freed the memory.
    
    Fixes: f1c131b45410 ("crypto: xts - Convert to skcipher")
    Cc: <stable@vger.kernel.org>
    Reported-by: Nathan Royce <nroycea+kernel@gmail.com>
    Reported-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Krzysztof Kozlowski <krzk@kernel.org>

commit 17c3060b1701fc69daedb4c90be6325d3d9fca8e
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Apr 8 08:07:33 2017 -0700

    tcp: clear saved_syn in tcp_disconnect()
    
    In the (very unlikely) case a passive socket becomes a listener,
    we do not want to duplicate its saved SYN headers.
    
    This would lead to double frees, use after free, and please hackers and
    various fuzzers
    
    Tested:
        0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
       +0 setsockopt(3, IPPROTO_TCP, TCP_SAVE_SYN, [1], 4) = 0
       +0 fcntl(3, F_SETFL, O_RDWR|O_NONBLOCK) = 0
    
       +0 bind(3, ..., ...) = 0
       +0 listen(3, 5) = 0
    
       +0 < S 0:0(0) win 32972 <mss 1460,nop,wscale 7>
       +0 > S. 0:0(0) ack 1 <...>
      +.1 < . 1:1(0) ack 1 win 257
       +0 accept(3, ..., ...) = 4
    
       +0 connect(4, AF_UNSPEC, ...) = 0
       +0 close(3) = 0
       +0 bind(4, ..., ...) = 0
       +0 listen(4, 5) = 0
    
       +0 < S 0:0(0) win 32972 <mss 1460,nop,wscale 7>
       +0 > S. 0:0(0) ack 1 <...>
      +.1 < . 1:1(0) ack 1 win 257
    
    Fixes: cd8ae85299d5 ("tcp: provide SYN headers for passive connections")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit df60d1f23b09c5ce2a8e404012323d4deedcc589
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Apr 5 18:16:14 2017 +1000

    drm/nouveau/kms/nv50: fix double dma_fence_put() when destroying plane state
    
    When the atomic support was added to nouveau, the DRM core did not do this.
    
    However, later in the same merge window, a commit (drm/fence: add in-fences
    support) was merged that added it, leading to use-after-frees of the fence
    object.
    
    Cc: stable@vger.kernel.org      [4.10+]
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 2907e8670b6ef253bffb33bf47fd2182969cf2a0
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Apr 5 18:16:14 2017 +1000

    drm/nouveau/kms/nv50: fix double dma_fence_put() when destroying plane state
    
    When the atomic support was added to nouveau, the DRM core did not do this.
    
    However, later in the same merge window, a commit (drm/fence: add in-fences
    support) was merged that added it, leading to use-after-frees of the fence
    object.
    
    Cc: stable@vger.kernel.org      [4.10+]
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit in openvswitch, from Jarno
        Rajahalme.
    
    11) Fix various overflow checks in AF_PACKET, from Andrey Konovalov.
    
    12) Fix endianness bug in be2net driver, from Suresh Reddy.
    
    13) Don't forget to wake TX queues when processing a timeout, from
        Grygorii Strashko.
    
    14) ARP header on-stack storage is wrong in flow dissector, from Simon
        Horman.
    
    15) Lost retransmit and reordering SNMP stats in TCP can be
        underreported. From Yuchung Cheng.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (82 commits)
      nfp: fix potential use after free on xdp prog
      tcp: fix reordering SNMP under-counting
      tcp: fix lost retransmit SNMP under-counting
      sctp: get sock from transport in sctp_transport_update_pmtu
      net: ethernet: ti: cpsw: fix race condition during open()
      l2tp: fix PPP pseudo-wire auto-loading
      bnx2x: fix spelling mistake in macros HW_INTERRUT_ASSERT_SET_*
      l2tp: take reference on sessions being dumped
      tcp: minimize false-positives on TCP/GRO check
      sctp: check for dst and pathmtu update in sctp_packet_config
      flow dissector: correct size of storage for ARP
      net: ethernet: ti: cpsw: wake tx queues on ndo_tx_timeout
      l2tp: take a reference on sessions used in genetlink handlers
      l2tp: hold session while sending creation notifications
      l2tp: fix duplicate session creation
      l2tp: ensure session can't get removed during pppol2tp_session_ioctl()
      l2tp: fix race in l2tp_recv_common()
      sctp: use right in and out stream cnt
      bpf: add various verifier test cases for self-tests
      bpf, verifier: fix rejection of unaligned access checks for map_value_adj
      ...

commit c383bdd14f91562babd269aa7c36b46fee7b6c75
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Apr 4 15:56:55 2017 -0700

    nfp: fix potential use after free on xdp prog
    
    We should unregister the net_device first, before we give back
    our reference on xdp_prog.  Otherwise xdp_prog may be freed
    before .ndo_stop() disabled the datapath.  Found by code inspection.
    
    Fixes: ecd63a0217d5 ("nfp: add XDP support in the driver")
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 755b37c93a069ff0882411630a06e90b3193d092
Author: Brian Norris <briannorris@chromium.org>
Date:   Tue Mar 28 16:59:33 2017 -0700

    mwifiex: catch mwifiex_fw_dpc() errors properly in reset
    
    When resetting the device, we take a synchronous firmware-loading code
    path, which borrows a lot from the asynchronous path used at probe time.
    We don't catch errors correctly though, which means that in the PCIe
    driver, we may try to dereference the 'adapter' struct after
    mwifiex_fw_dpc() has freed it. See this (erronous) print in
    mwifiex_pcie_reset_notify():
    
            mwifiex_dbg(adapter, INFO, "%s, successful\n", __func__);
    
    Let's instead refactor the synchronous (or "!req_fw_nowait") path so
    that we propagate errors and handle them properly.
    
    This fixes a use-after-free issue in the PCIe driver, as well as a
    misleading debug message ("successful"). It looks like the SDIO driver
    doesn't have these problems, since it doesn't do anything after
    mwifiex_reinit_sw().
    
    Fixes: 4c5dae59d2e9 ("mwifiex: add PCIe function level reset support")
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit ce8fad9a1f09009ec3918a99685d9e3176f50ce3
Author: Brian Norris <briannorris@chromium.org>
Date:   Tue Mar 28 16:59:32 2017 -0700

    mwifiex: fix use-after-free for FW reinit errors
    
    If we fail to reinit the FW when resetting the device (in the
    synchronous version of mwifiex_init_hw_fw() -> mwifiex_fw_dpc()),
    mwifiex_fw_dpc() will tear down the interface and free up the adapter.
    But we don't actually check for all failure cases of mwifiex_fw_dpc(),
    so some of them fall through and dereference adapter->fw_done with a
    freed adapter, causing a use-after-free bug.
    
    In any case, mwifiex_fw_dpc() will always signal FW completion -- in the
    error OR success case -- so at best, this was repeat work. Let's not do
    it.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit d476983ea078b7a101481967a3bb5ab6760cf759
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Feb 27 18:44:45 2017 +0200

    nvme-loop: fix a possible use-after-free when destroying the admin queue
    
    we need to destroy the nvmet sq and let it finish gracefully
    before continue to cleanup the queue.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit ddb99e118e37f324a4be65a411bb60ae62795cf9
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 31 15:20:49 2017 +0300

    security, keys: convert key_user.usage from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>

commit fff292914d3a2f1efd05ca71c2ba72a3c663201e
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Mar 31 15:20:48 2017 +0300

    security, keys: convert key.usage from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>

commit ecf8e89917d600fe846ebda911a9e690c6babfd0
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 30 12:16:14 2017 +0100

    drm/i915: Use a dummy timeline name for a signaled fence
    
    Michał Winiarski pointed out that the debugging infrastructure (such as
    trace_dma_fence_release) likes to pretty print the timeline name, long
    after we have freed the timeline. Our timelines currently live as part of
    the GTT (due to the strict ordering we currently use through each) which
    belong to the context. We aim to free the context and release its
    hardware resources as soon as we able to (i.e. when the last
    fence/request using it has been signaled and retired). As the
    .get_timeline_name is purely a debug feature, rather than extending the
    lifetime of the context, or splitting it into many different release
    phases just to keep the name around, replace the timeline name with a
    constant after the fence has been signaled. This avoids the potential
    use-after-free.
    
    Reported-by: Krzysztof Olinski <krzysztof.e.olinski@intel.com>
    Fixes: 80b204bce8f2 ("drm/i915: Enable multiple timelines")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v4.10+
    Link: http://patchwork.freedesktop.org/patch/msgid/20170330111614.29757-1-chris@chris-wilson.co.uk
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>
    (cherry picked from commit 05506b5be081b728353f1612b05c8ff689772832)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit d77facb88448cdeaaa3adba5b9704a48ac2ac8d6
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Tue Mar 28 09:11:30 2017 +0100

    brcmfmac: use local iftype avoiding use-after-free of virtual interface
    
    A use-after-free was found using KASAN. In brcmf_p2p_del_if() the virtual
    interface is removed using call to brcmf_remove_interface(). After that
    the virtual interface instance has been freed and should not be referenced.
    Solve this by storing the nl80211 iftype in local variable, which is used
    in a couple of places anyway.
    
    Cc: stable@vger.kernel.org # 4.10.x, 4.9.x
    Reported-by: Daniel J Blueman <daniel@quora.org>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 05506b5be081b728353f1612b05c8ff689772832
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 30 12:16:14 2017 +0100

    drm/i915: Use a dummy timeline name for a signaled fence
    
    Michał Winiarski pointed out that the debugging infrastructure (such as
    trace_dma_fence_release) likes to pretty print the timeline name, long
    after we have freed the timeline. Our timelines currently live as part of
    the GTT (due to the strict ordering we currently use through each) which
    belong to the context. We aim to free the context and release its
    hardware resources as soon as we able to (i.e. when the last
    fence/request using it has been signaled and retired). As the
    .get_timeline_name is purely a debug feature, rather than extending the
    lifetime of the context, or splitting it into many different release
    phases just to keep the name around, replace the timeline name with a
    constant after the fence has been signaled. This avoids the potential
    use-after-free.
    
    Reported-by: Krzysztof Olinski <krzysztof.e.olinski@intel.com>
    Fixes: 80b204bce8f2 ("drm/i915: Enable multiple timelines")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: <stable@vger.kernel.org> # v4.10+
    Link: http://patchwork.freedesktop.org/patch/msgid/20170330111614.29757-1-chris@chris-wilson.co.uk
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Michał Winiarski <michal.winiarski@intel.com>

commit b9d022c630fa77c7044ea21e2597245a91e69856
Author: Nicolai Hähnle <nicolai.haehnle@amd.com>
Date:   Tue Feb 14 09:47:36 2017 +0100

    Revert "drm/amdgpu: fix a potential deadlock in amdgpu_bo_create_restricted()"
    
    This reverts commit 38fc4856ad98f230bc91da0421dec69e4aee40f8, which
    introduces a use-after-free.
    
    The underlying bug should be properly fixed with "drm/ttm: never add BO
    that failed to validate to the LRU list".
    
    Cc: zhoucm1 <david1.zhou@amd.com>
    Signed-off-by: Nicolai Hähnle <nicolai.haehnle@amd.com>
    Tested-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c2c139cf435b18939204800fa72c53a7207bdd68
Author: Nicolai Hähnle <nicolai.haehnle@amd.com>
Date:   Tue Feb 14 09:37:12 2017 +0100

    drm/ttm: never add BO that failed to validate to the LRU list
    
    Fixes a potential race condition in amdgpu that looks as follows:
    
    Task 1: attempt ttm_bo_init, but ttm_bo_validate fails
    Task 1: add BO to global list anyway
    Task 2: grabs hold of the BO, waits on its reservation lock
    Task 1: releases its reference of the BO; never gives up the
            reservation lock
    
    The patch "drm/amdgpu: fix a potential deadlock in
    amdgpu_bo_create_restricted()" attempts to fix that by releasing
    the reservation lock in amdgpu code; unfortunately, it introduces
    a use-after-free when this race _doesn't_ happen.
    
    This patch should fix the race properly by never adding the BO
    to the global list in the first place.
    
    Cc: zhoucm1 <david1.zhou@amd.com>
    Signed-off-by: Nicolai Hähnle <nicolai.haehnle@amd.com>
    Tested-by: Samuel Pitoiset <samuel.pitoiset@gmail.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b3ef5520c1eabb56064474043c7c55a1a65b8708
Author: Arend Van Spriel <arend.vanspriel@broadcom.com>
Date:   Tue Mar 28 09:11:31 2017 +0100

    cfg80211: check rdev resume callback only for registered wiphy
    
    We got the following use-after-free KASAN report:
    
     BUG: KASAN: use-after-free in wiphy_resume+0x591/0x5a0 [cfg80211]
             at addr ffff8803fc244090
     Read of size 8 by task kworker/u16:24/2587
     CPU: 6 PID: 2587 Comm: kworker/u16:24 Tainted: G    B 4.9.13-debug+
     Hardware name: Dell Inc. XPS 15 9550/0N7TVV, BIOS 1.2.19 12/22/2016
     Workqueue: events_unbound async_run_entry_fn
      ffff880425d4f9d8 ffffffffaeedb541 ffff88042b80ef00 ffff8803fc244088
      ffff880425d4fa00 ffffffffae84d7a1 ffff880425d4fa98 ffff8803fc244080
      ffff88042b80ef00 ffff880425d4fa88 ffffffffae84da3a ffffffffc141f7d9
     Call Trace:
      [<ffffffffaeedb541>] dump_stack+0x85/0xc4
      [<ffffffffae84d7a1>] kasan_object_err+0x21/0x70
      [<ffffffffae84da3a>] kasan_report_error+0x1fa/0x500
      [<ffffffffc141f7d9>] ? cfg80211_bss_age+0x39/0xc0 [cfg80211]
      [<ffffffffc141f83a>] ? cfg80211_bss_age+0x9a/0xc0 [cfg80211]
      [<ffffffffae48d46d>] ? trace_hardirqs_on+0xd/0x10
      [<ffffffffc13fb1c0>] ? wiphy_suspend+0xc70/0xc70 [cfg80211]
      [<ffffffffae84def1>] __asan_report_load8_noabort+0x61/0x70
      [<ffffffffc13fb100>] ? wiphy_suspend+0xbb0/0xc70 [cfg80211]
      [<ffffffffc13fb751>] ? wiphy_resume+0x591/0x5a0 [cfg80211]
      [<ffffffffc13fb751>] wiphy_resume+0x591/0x5a0 [cfg80211]
      [<ffffffffc13fb1c0>] ? wiphy_suspend+0xc70/0xc70 [cfg80211]
      [<ffffffffaf3b206e>] dpm_run_callback+0x6e/0x4f0
      [<ffffffffaf3b31b2>] device_resume+0x1c2/0x670
      [<ffffffffaf3b367d>] async_resume+0x1d/0x50
      [<ffffffffae3ee84e>] async_run_entry_fn+0xfe/0x610
      [<ffffffffae3d0666>] process_one_work+0x716/0x1a50
      [<ffffffffae3d05c9>] ? process_one_work+0x679/0x1a50
      [<ffffffffafdd7b6d>] ? _raw_spin_unlock_irq+0x3d/0x60
      [<ffffffffae3cff50>] ? pwq_dec_nr_in_flight+0x2b0/0x2b0
      [<ffffffffae3d1a80>] worker_thread+0xe0/0x1460
      [<ffffffffae3d19a0>] ? process_one_work+0x1a50/0x1a50
      [<ffffffffae3e54c2>] kthread+0x222/0x2e0
      [<ffffffffae3e52a0>] ? kthread_park+0x80/0x80
      [<ffffffffae3e52a0>] ? kthread_park+0x80/0x80
      [<ffffffffae3e52a0>] ? kthread_park+0x80/0x80
      [<ffffffffafdd86aa>] ret_from_fork+0x2a/0x40
     Object at ffff8803fc244088, in cache kmalloc-1024 size: 1024
     Allocated:
     PID = 71
      save_stack_trace+0x1b/0x20
      save_stack+0x46/0xd0
      kasan_kmalloc+0xad/0xe0
      kasan_slab_alloc+0x12/0x20
      __kmalloc_track_caller+0x134/0x360
      kmemdup+0x20/0x50
      brcmf_cfg80211_attach+0x10b/0x3a90 [brcmfmac]
      brcmf_bus_start+0x19a/0x9a0 [brcmfmac]
      brcmf_pcie_setup+0x1f1a/0x3680 [brcmfmac]
      brcmf_fw_request_nvram_done+0x44c/0x11b0 [brcmfmac]
      request_firmware_work_func+0x135/0x280
      process_one_work+0x716/0x1a50
      worker_thread+0xe0/0x1460
      kthread+0x222/0x2e0
      ret_from_fork+0x2a/0x40
     Freed:
     PID = 2568
      save_stack_trace+0x1b/0x20
      save_stack+0x46/0xd0
      kasan_slab_free+0x71/0xb0
      kfree+0xe8/0x2e0
      brcmf_cfg80211_detach+0x62/0xf0 [brcmfmac]
      brcmf_detach+0x14a/0x2b0 [brcmfmac]
      brcmf_pcie_remove+0x140/0x5d0 [brcmfmac]
      brcmf_pcie_pm_leave_D3+0x198/0x2e0 [brcmfmac]
      pci_pm_resume+0x186/0x220
      dpm_run_callback+0x6e/0x4f0
      device_resume+0x1c2/0x670
      async_resume+0x1d/0x50
      async_run_entry_fn+0xfe/0x610
      process_one_work+0x716/0x1a50
      worker_thread+0xe0/0x1460
      kthread+0x222/0x2e0
      ret_from_fork+0x2a/0x40
     Memory state around the buggy address:
      ffff8803fc243f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8803fc244000: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     >ffff8803fc244080: fc fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                              ^
      ffff8803fc244100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
      ffff8803fc244180: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    What is happening is that brcmf_pcie_resume() detects a device that
    is no longer responsive and it decides to unbind resulting in a
    wiphy_unregister() and wiphy_free() call. Now the wiphy instance
    remains allocated, because PM needs to call wiphy_resume() for it.
    However, brcmfmac already does a kfree() for the struct
    cfg80211_registered_device::ops field. Change the checks in
    wiphy_resume() to only access the struct cfg80211_registered_device::ops
    if the wiphy instance is still registered at this time.
    
    Cc: stable@vger.kernel.org # 4.10.x, 4.9.x
    Reported-by: Daniel J Blueman <daniel@quora.org>
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 2beb6dad2e8f95d710159d5befb390e4f62ab5cf
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Mon Mar 27 17:53:50 2017 +0200

    KVM: x86: cleanup the page tracking SRCU instance
    
    SRCU uses a delayed work item.  Skip cleaning it up, and
    the result is use-after-free in the work item callbacks.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Suggested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: stable@vger.kernel.org
    Fixes: 0eb05bf290cfe8610d9680b49abef37febd1c38a
    Reviewed-by: Xiao Guangrong <xiaoguangrong.eric@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit ffefb6f4d6ad699a2b5484241bc46745a53235d0
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Mon Mar 27 18:00:14 2017 +0100

    net: ipconfig: fix ic_close_devs() use-after-free
    
    Our chosen ic_dev may be anywhere in our list of ic_devs, and we may
    free it before attempting to close others. When we compare d->dev and
    ic_dev->dev, we're potentially dereferencing memory returned to the
    allocator. This causes KASAN to scream for each subsequent ic_dev we
    check.
    
    As there's a 1-1 mapping between ic_devs and netdevs, we can instead
    compare d and ic_dev directly, which implicitly handles the !ic_dev
    case, and avoids the use-after-free. The ic_dev pointer may be stale,
    but we will not dereference it.
    
    Original splat:
    
    [    6.487446] ==================================================================
    [    6.494693] BUG: KASAN: use-after-free in ic_close_devs+0xc4/0x154 at addr ffff800367efa708
    [    6.503013] Read of size 8 by task swapper/0/1
    [    6.507452] CPU: 5 PID: 1 Comm: swapper/0 Not tainted 4.11.0-rc3-00002-gda42158 #8
    [    6.514993] Hardware name: AppliedMicro Mustang/Mustang, BIOS 3.05.05-beta_rc Jan 27 2016
    [    6.523138] Call trace:
    [    6.525590] [<ffff200008094778>] dump_backtrace+0x0/0x570
    [    6.530976] [<ffff200008094d08>] show_stack+0x20/0x30
    [    6.536017] [<ffff200008bee928>] dump_stack+0x120/0x188
    [    6.541231] [<ffff20000856d5e4>] kasan_object_err+0x24/0xa0
    [    6.546790] [<ffff20000856d924>] kasan_report_error+0x244/0x738
    [    6.552695] [<ffff20000856dfec>] __asan_report_load8_noabort+0x54/0x80
    [    6.559204] [<ffff20000aae86ac>] ic_close_devs+0xc4/0x154
    [    6.564590] [<ffff20000aaedbac>] ip_auto_config+0x2ed4/0x2f1c
    [    6.570321] [<ffff200008084b04>] do_one_initcall+0xcc/0x370
    [    6.575882] [<ffff20000aa31de8>] kernel_init_freeable+0x5f8/0x6c4
    [    6.581959] [<ffff20000a16df00>] kernel_init+0x18/0x190
    [    6.587171] [<ffff200008084710>] ret_from_fork+0x10/0x40
    [    6.592468] Object at ffff800367efa700, in cache kmalloc-128 size: 128
    [    6.598969] Allocated:
    [    6.601324] PID = 1
    [    6.603427]  save_stack_trace_tsk+0x0/0x418
    [    6.607603]  save_stack_trace+0x20/0x30
    [    6.611430]  kasan_kmalloc+0xd8/0x188
    [    6.615087]  ip_auto_config+0x8c4/0x2f1c
    [    6.619002]  do_one_initcall+0xcc/0x370
    [    6.622832]  kernel_init_freeable+0x5f8/0x6c4
    [    6.627178]  kernel_init+0x18/0x190
    [    6.630660]  ret_from_fork+0x10/0x40
    [    6.634223] Freed:
    [    6.636233] PID = 1
    [    6.638334]  save_stack_trace_tsk+0x0/0x418
    [    6.642510]  save_stack_trace+0x20/0x30
    [    6.646337]  kasan_slab_free+0x88/0x178
    [    6.650167]  kfree+0xb8/0x478
    [    6.653131]  ic_close_devs+0x130/0x154
    [    6.656875]  ip_auto_config+0x2ed4/0x2f1c
    [    6.660875]  do_one_initcall+0xcc/0x370
    [    6.664705]  kernel_init_freeable+0x5f8/0x6c4
    [    6.669051]  kernel_init+0x18/0x190
    [    6.672534]  ret_from_fork+0x10/0x40
    [    6.676098] Memory state around the buggy address:
    [    6.680880]  ffff800367efa600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    6.688078]  ffff800367efa680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [    6.695276] >ffff800367efa700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [    6.702469]                       ^
    [    6.705952]  ffff800367efa780: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [    6.713149]  ffff800367efa800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [    6.720343] ==================================================================
    [    6.727536] Disabling lock debugging due to kernel taint
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Hideaki YOSHIFUJI <yoshfuji@linux-ipv6.org>
    Cc: James Morris <jmorris@namei.org>
    Cc: Patrick McHardy <kaber@trash.net>
    Cc: netdev@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 741b8b832a57402380be79d7d11a59eaf57fff3b
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Tue Feb 21 15:55:41 2017 -0800

    i40e/i40evf: Fix use after free in Rx cleanup path
    
    We need to reset skb back to NULL when we have freed it in the Rx cleanup
    path.  I found one spot where this wasn't occurring so this patch fixes it.
    
    Change-ID: Iaca68934200732cd4a63eb0bd83b539c95f8c4dd
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit 83d90219a5df8d950855ce73229a97b63605c317
Author: Liping Zhang <zlpnobody@gmail.com>
Date:   Sat Mar 25 12:09:15 2017 +0800

    netfilter: nfnl_cthelper: fix a race when walk the nf_ct_helper_hash table
    
    The nf_ct_helper_hash table is protected by nf_ct_helper_mutex, while
    nfct_helper operation is protected by nfnl_lock(NFNL_SUBSYS_CTHELPER).
    So it's possible that one CPU is walking the nf_ct_helper_hash for
    cthelper add/get/del, another cpu is doing nf_conntrack_helpers_unregister
    at the same time. This is dangrous, and may cause use after free error.
    
    Note, delete operation will flush all cthelpers added via nfnetlink, so
    using rcu to do protect is not easy.
    
    Now introduce a dummy list to record all the cthelpers added via
    nfnetlink, then we can walk the dummy list instead of walking the
    nf_ct_helper_hash. Also, keep nfnl_cthelper_dump_table unchanged, it
    may be invoked without nfnl_lock(NFNL_SUBSYS_CTHELPER) held.
    
    Signed-off-by: Liping Zhang <zlpnobody@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 2d7d54002e396c180db0c800c1046f0a3c471597
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Mar 24 17:07:57 2017 +0100

    ALSA: seq: Fix race during FIFO resize
    
    When a new event is queued while processing to resize the FIFO in
    snd_seq_fifo_clear(), it may lead to a use-after-free, as the old pool
    that is being queued gets removed.  For avoiding this race, we need to
    close the pool to be deleted and sync its usage before actually
    deleting it.
    
    The issue was spotted by syzkaller.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commits)
      net:ethernet:aquantia: Fix for RX checksum offload.
      amd-xgbe: Fix the ECC-related bit position definitions
      sfc: cleanup a condition in efx_udp_tunnel_del()
      Bluetooth: btqcomsmd: fix compile-test dependency
      inet: frag: release spinlock before calling icmp_send()
      tcp: initialize icsk_ack.lrcvtime at session start time
      genetlink: fix counting regression on ctrl_dumpfamily()
      socket, bpf: fix sk_filter use after free in sk_clone_lock
      ipv4: provide stronger user input validation in nl_fib_input()
      bpf: fix hashmap extra_elems logic
      enic: update enic maintainers
      net: bcmgenet: remove bcmgenet_internal_phy_setup()
      ipv6: make sure to initialize sockc.tsflags before first use
      fjes: Do not load fjes driver if extended socket device is not power on.
      fjes: Do not load fjes driver if system does not have extended socket device.
      net/mlx5e: Count LRO packets correctly
      net/mlx5e: Count GSO packets correctly
      net/mlx5: Increase number of max QPs in default profile
      net/mlx5e: Avoid supporting udp tunnel port ndo for VF reps
      net/mlx5e: Use the proper UAPI values when offloading TC vlan actions
      ...

commit 90db10434b163e46da413d34db8d0e77404cc645
Author: David Hildenbrand <david@redhat.com>
Date:   Thu Mar 23 18:24:19 2017 +0100

    KVM: kvm_io_bus_unregister_dev() should never fail
    
    No caller currently checks the return value of
    kvm_io_bus_unregister_dev(). This is evil, as all callers silently go on
    freeing their device. A stale reference will remain in the io_bus,
    getting at least used again, when the iobus gets teared down on
    kvm_destroy_vm() - leading to use after free errors.
    
    There is nothing the callers could do, except retrying over and over
    again.
    
    So let's simply remove the bus altogether, print an error and make
    sure no one can access this broken bus again (returning -ENOMEM on any
    attempt to access it).
    
    Fixes: e93f8a0f821e ("KVM: convert io_bus to SRCU")
    Cc: stable@vger.kernel.org # 3.4+
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit eccc1bff1b0d168a136ecd51c6091cf0ba02151b
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu Mar 9 21:52:05 2017 +0100

    arm64/mmu: ignore debug_pagealloc for kernel segments
    
    The debug_pagealloc facility manipulates kernel mappings in the linear
    region at page granularity to detect out of bounds or use-after-free
    accesses. Since the kernel segments are not allocated dynamically,
    there is no point in taking the debug_pagealloc_enabled flag into
    account for them, and we can use block mappings unconditionally.
    
    Note that this applies equally to the linear alias of text/rodata:
    we will never have dynamic allocations there given that the same
    memory is statically in use by the kernel image.
    
    Reviewed-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

commit 392910cf3f8a0161d3da45d02ea17f2910d9193b
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:20:49 2017 +0200

    drivers, firewire: convert fw_node.ref_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7d88d24c5a2b66b02770e2776fce72b5fd70193
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:20:50 2017 +0200

    drivers, char: convert vma_data.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 545a8e79bd1cc8774877a26275171a2ec8881c9e
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Wed Mar 22 14:51:00 2017 -0700

    netvsc: use RCU to protect inner device structure
    
    The netvsc driver has an internal structure (netvsc_device) which
    is created when device is opened and released when device is closed.
    And also opened/released when MTU or number of channels change.
    
    Since this is referenced in the receive and transmit path, it is
    safer to use RCU to protect/prevent use after free problems.
    
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      drm/i915: Update DRIVER_DATE to 20170320
      drm/i915: Initialise i915_gem_object_create_from_data() directly
      drm/i915: Correct error handling for i915_gem_object_create_from_data()
      drm/i915: i915_gem_object_create_from_data() doesn't require struct_mutex
      drm/i915: Retire an active batch pool object rather than allocate new
      drm/i915: Add i810/i815 pci-ids for completeness
      drm/i915: Skip execlists_dequeue() early if the list is empty
      drm/i915: Stop using obj->obj_exec_link outside of execbuf
      drm/i915: Squelch WARN for VLV_COUNTER_CONTROL
      drm/i915/glk: Enable pooled EUs for Geminilake
      drm/i915: Remove superfluous i915_add_request_no_flush() helper
      drm/i915/vgpu: Neuter forcewakes for VGPU more thoroughly
      drm/i915: Fix vGPU balloon for ggtt guard page
      drm/i915: Avoid use-after-free of ctx in request tracepoints
      drm/i915: Assert that the context pin_counts do not overflow
      drm/i915: Wait for reset to complete before returning from debugfs/i915_wedged
      drm/i915: Restore engine->submit_request before unwedging
      drm/i915: Move engine->submit_request selection to a vfunc
      drm/i915: Split I915_RESET_IN_PROGRESS into two flags
      drm/i915: make context status notifier head be per engine
      ...

commit a97e50cc4cb67e1e7bff56f6b41cda62ca832336
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Mar 22 13:08:08 2017 +0100

    socket, bpf: fix sk_filter use after free in sk_clone_lock
    
    In sk_clone_lock(), we create a new socket and inherit most of the
    parent's members via sock_copy() which memcpy()'s various sections.
    Now, in case the parent socket had a BPF socket filter attached,
    then newsk->sk_filter points to the same instance as the original
    sk->sk_filter.
    
    sk_filter_charge() is then called on the newsk->sk_filter to take a
    reference and should that fail due to hitting max optmem, we bail
    out and release the newsk instance.
    
    The issue is that commit 278571baca2a ("net: filter: simplify socket
    charging") wrongly combined the dismantle path with the failure path
    of xfrm_sk_clone_policy(). This means, even when charging failed, we
    call sk_free_unlock_clone() on the newsk, which then still points to
    the same sk_filter as the original sk.
    
    Thus, sk_free_unlock_clone() calls into __sk_destruct() eventually
    where it tests for present sk_filter and calls sk_filter_uncharge()
    on it, which potentially lets sk_omem_alloc wrap around and releases
    the eBPF prog and sk_filter structure from the (still intact) parent.
    
    Fix it by making sure that when sk_filter_charge() failed, we reset
    newsk->sk_filter back to NULL before passing to sk_free_unlock_clone(),
    so that we don't mess with the parents sk_filter.
    
    Only if xfrm_sk_clone_policy() fails, we did reach the point where
    either the parent's filter was NULL and as a result newsk's as well
    or where we previously had a successful sk_filter_charge(), thus for
    that case, we do need sk_filter_uncharge() to release the prior taken
    reference on sk_filter.
    
    Fixes: 278571baca2a ("net: filter: simplify socket charging")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4c355cdfbba537971b5c3849680b1b6453a7a383
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Tue Mar 21 13:59:19 2017 +0200

    net: convert sk_filter.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ac1ddc584e9817d9d0a4572f3245305d907c6e61
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Fri Mar 17 12:48:22 2017 -0600

    scsi: utilize new cdev_device_add helper function
    
    This driver did not set kobj.parent so it likely suffered from
    a potential use after free race if the user unregistered the
    device while it was in use.
    
    This was not so straightforward a conversion but I think this patch
    cleans up its probe's error path significantly.
    
    This patch adds device_initialize, which is required for
    cdev_device_add. Then it switches to put_device instead of kfree as
    recommended by device_initialize's documentation. This removes a lot
    from the error path which was already in __remove.
    A couple things needed to be re-ordered to be entirely correct, though.
    ida_remove is also moved out of __remove and into unregister to
    simplify things and follow the pattern other devices are using.
    
    This also drop an extra unnecessary get_device/put_device in the code.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbef390d2eb0a7b0a6be21381a326d4e13953aba
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Fri Mar 17 12:48:20 2017 -0600

    rapidio: utilize new cdev_device_add helper function
    
    This driver did not originally set kobj.parent so it likely had
    potential a use after free bug which this patch fixes.
    
    We convert from device_register to device_initialize/cdev_device_add.
    While we are at it we use put_device instead of kfree (as recommended
    by the device_initialize documentation). We also remove an unnecessary
    extra get_device from the code.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 493cfaeaa0c9bc0c79ce5751193d49fdac9aaaec
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Fri Mar 17 12:48:19 2017 -0600

    mtd: utilize new cdev_device_add helper function
    
    This is not as straightforward a conversion as the others
    in this series. These drivers did not originally make use of
    kobj.parent so they likely suffered from a use after free bug if
    someone unregistered the devices while they are being used.
    
    In order to make the conversions, switch from device_register
    to device_initialize / cdev_device_add.
    
    In build.c, this patch unwinds a complicated mess of extra
    get_device/put_devices and reference tracking by moving device_initialize
    early in the attach process. Then it always uses put_device and instead of
    using device_unregister and extra get_devices everywhere we just use
    cdev_device_del and one put_device once everything is completely done.
    This simplifies things dramatically and makes it easier to reason about.
    
    In vmt.c, the patch pushes device initialization up to the beginning of the
    device creation and then that function only needs to use put_device
    in the error path which simplifies things a good deal.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0d78193dcf2bfa7c3d169c55a7a30a5a89fca7a
Author: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
Date:   Fri Mar 17 12:48:15 2017 -0600

    IB/ucm: utilize new cdev_device_add helper function
    
    The use after free is not triggerable here because the cdev holds
    the module lock and the only device_unregister is only triggered by
    module unload, however make the change for consistency.
    
    To make this work the cdev_del needs to move out of the struct device
    release function.
    
    This cleans up the error path significantly and thus also fixes a minor
    bug where the devnum would not be released if cdev_add failed.
    
    Signed-off-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 233ed09d7fdacf592ee91e6c97ce5f4364fbe7c0
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Fri Mar 17 12:48:08 2017 -0600

    chardev: add helper function to register char devs with a struct device
    
    Credit for this patch goes is shared with Dan Williams [1]. I've
    taken things one step further to make the helper function more
    useful and clean up calling code.
    
    There's a common pattern in the kernel whereby a struct cdev is placed
    in a structure along side a struct device which manages the life-cycle
    of both. In the naive approach, the reference counting is broken and
    the struct device can free everything before the chardev code
    is entirely released.
    
    Many developers have solved this problem by linking the internal kobjs
    in this fashion:
    
    cdev.kobj.parent = &parent_dev.kobj;
    
    The cdev code explicitly gets and puts a reference to it's kobj parent.
    So this seems like it was intended to be used this way. Dmitrty Torokhov
    first put this in place in 2012 with this commit:
    
    2f0157f char_dev: pin parent kobject
    
    and the first instance of the fix was then done in the input subsystem
    in the following commit:
    
    4a215aa Input: fix use-after-free introduced with dynamic minor changes
    
    Subsequently over the years, however, this issue seems to have tripped
    up multiple developers independently. For example, see these commits:
    
    0d5b7da iio: Prevent race between IIO chardev opening and IIO device
    (by Lars-Peter Clausen in 2013)
    
    ba0ef85 tpm: Fix initialization of the cdev
    (by Jason Gunthorpe in 2015)
    
    5b28dde [media] media: fix use-after-free in cdev_put() when app exits
    after driver unbind
    (by Shauh Khan in 2016)
    
    This technique is similarly done in at least 15 places within the kernel
    and probably should have been done so in another, at least, 5 places.
    The kobj line also looks very suspect in that one would not expect
    drivers to have to mess with kobject internals in this way.
    Even highly experienced kernel developers can be surprised by this
    code, as seen in [2].
    
    To help alleviate this situation, and hopefully prevent future
    wasted effort on this problem, this patch introduces a helper function
    to register a char device along with its parent struct device.
    This creates a more regular API for tying a char device to its parent
    without the developer having to set members in the underlying kobject.
    
    This patch introduce cdev_device_add and cdev_device_del which
    replaces a common pattern including setting the kobj parent, calling
    cdev_add and then calling device_add. It also introduces cdev_set_parent
    for the few cases that set the kobject parent without using device_add.
    
    [1] https://lkml.org/lkml/2017/2/13/700
    [2] https://lkml.org/lkml/2017/2/10/370
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Hans Verkuil <hans.verkuil@cisco.com>
    Reviewed-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5caa7f384629eb2b02f2289ffea1277a401adfcb
Author: Brian Norris <briannorris@chromium.org>
Date:   Thu Mar 16 14:36:07 2017 -0700

    mwifiex: fix kernel crash after shutdown command timeout
    
    We observed a SHUTDOWN command timeout during reboot stress test due to
    a corner case firmware bug. It can lead to either a use-after-free +
    OOPS (on either the adapter structure, or the 'card' structure) or an
    abort (where, e.g., the PCI device is "disabled" before we're done
    dumping the FW).
    
    We can avoid this by canceling/flushing the FW dump work:
    
    (a) after we've terminated all other work queues (e.g., for processing
        commands which could time out)
    (b) after we've disabled all interrupts (which could also queue more
        work for us)
    (c) after we've unregistered the netdev and wiphy structures (and
        implicitly, and debugfs entries which could manually trigger FW dumps)
    (d) before we've actually disabled the device (e.g.,
        pci_device_disable())
    
    Altogether, this means no card->work will be scheduled if we sync at
    a point that satisfies the above. This can be done at the beginning of
    the .cleanup_if() callback.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit b54ab92b84b6161f91b1ad9160199422b3699009
Author: Reshetova, Elena <elena.reshetova@intel.com>
Date:   Thu Mar 16 10:03:34 2017 +0200

    netfilter: refcounter conversions
    
    refcount_t type and corresponding API (see include/linux/refcount.h)
    should be used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 60367132a21449c2119f0bb27eef907bc95828af
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 16 20:42:35 2017 +0000

    drm/i915: Avoid use-after-free of ctx in request tracepoints
    
    trace_i915_gem_request_out may be used after the request is completed,
    and so the request may have been retired on another thread, invalidating
    the rq->ctx. Avoid dereferencing rq->ctx in the tracepoint by switching
    to the fence context id instead, updating all tracepoints to match.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170316204235.27786-1-chris@chris-wilson.co.uk
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 8d66db50b2ac9dbf5cca9ede64f1c859d7b86eb6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:14 2017 +0200

    drivers, usb: convert ep_data.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7ddc981d7b9e2fbfb33cb7cc47603d6e5d93bc9
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:13 2017 +0200

    drivers, usb: convert dev_data.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43938613c6fd2e58a0be212c832e1878bedefe5a
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:12 2017 +0200

    drivers, usb: convert ffs_data.ref from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e47c53503eb9faff42b3cfa144a833344dd1f89
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Mar 14 17:55:46 2017 +0100

    USB: usbtmc: fix probe error path
    
    Make sure to initialise the return value to avoid having allocation
    failures going unnoticed when allocating interrupt-endpoint resources.
    
    This prevents use-after-free or worse when the device is later unbound.
    
    Fixes: dbf3e7f654c0 ("Implement an ioctl to support the USMTMC-USB488 READ_STATUS_BYTE operation.")
    Cc: stable <stable@vger.kernel.org>     # 4.6
    Cc: Dave Penkler <dpenkler@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4c5d3762e2d6d274bd1cc948c47063becfa2103
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Feb 27 18:44:45 2017 +0200

    nvme-loop: fix a possible use-after-free when destroying the admin queue
    
    we need to destroy the nvmet sq and let it finish gracefully
    before continue to cleanup the queue.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit e7cc4865f0f31698ef2f7aac01a50e78968985b7
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Mar 16 13:47:49 2017 +0100

    perf/core: Fix event inheritance on fork()
    
    While hunting for clues to a use-after-free, Oleg spotted that
    perf_event_init_context() can loose an error value with the result
    that fork() can succeed even though we did not fully inherit the perf
    event context.
    
    Spotted-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: oleg@redhat.com
    Cc: stable@vger.kernel.org
    Fixes: 889ff0150661 ("perf/core: Split context's event group list into pinned and non-pinned lists")
    Link: http://lkml.kernel.org/r/20170316125823.190342547@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e552a8389aa409e257b7dcba74f67f128f979ccc
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Mar 16 13:47:48 2017 +0100

    perf/core: Fix use-after-free in perf_release()
    
    Dmitry reported syzcaller tripped a use-after-free in perf_release().
    
    After much puzzlement Oleg spotted the below scenario:
    
      Task1                           Task2
    
      fork()
        perf_event_init_task()
        /* ... */
        goto bad_fork_$foo;
        /* ... */
        perf_event_free_task()
          mutex_lock(ctx->lock)
          perf_free_event(B)
    
                                      perf_event_release_kernel(A)
                                        mutex_lock(A->child_mutex)
                                        list_for_each_entry(child, ...) {
                                          /* child == B */
                                          ctx = B->ctx;
                                          get_ctx(ctx);
                                          mutex_unlock(A->child_mutex);
    
            mutex_lock(A->child_mutex)
            list_del_init(B->child_list)
            mutex_unlock(A->child_mutex)
    
            /* ... */
    
          mutex_unlock(ctx->lock);
          put_ctx() /* >0 */
        free_task();
                                          mutex_lock(ctx->lock);
                                          mutex_lock(A->child_mutex);
                                          /* ... */
                                          mutex_unlock(A->child_mutex);
                                          mutex_unlock(ctx->lock)
                                          put_ctx() /* 0 */
                                            ctx->task && !TOMBSTONE
                                              put_task_struct() /* UAF */
    
    This patch closes the hole by making perf_event_free_task() destroy the
    task <-> ctx relation such that perf_event_release_kernel() will no longer
    observe the now dead task.
    
    Spotted-by: Oleg Nesterov <oleg@redhat.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: fweisbec@gmail.com
    Cc: oleg@redhat.com
    Cc: stable@vger.kernel.org
    Fixes: c6e5b73242d2 ("perf: Synchronously clean up child events")
    Link: http://lkml.kernel.org/r/20170314155949.GE32474@worktop
    Link: http://lkml.kernel.org/r/20170316125823.140295131@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8200f2085abe7f29a016381f3122000cc7b2a760
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Sat Mar 4 18:13:57 2017 -0700

    vmbus: use rcu for per-cpu channel list
    
    The per-cpu channel list is now referred to in the interrupt
    routine. This is mostly safe since the host will not normally generate
    an interrupt when channel is being deleted but if it did then there
    would be a use after free problem.
    
    To solve, this use RCU protection on ther per-cpu list.
    
    Fixes: 631e63a9f346 ("vmbus: change to per channel tasklet")
    
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: K. Y. Srinivasan <kys@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dc618cdd6b896791313926becb1f86ede0e046a
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Thu Mar 9 13:46:58 2017 +0200

    scsi: libiscsi: qedi: convert iscsi_task.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter. This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Acked-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 22c70d1a9c639b432ffdf083bea44752ad9fc8f3
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Thu Mar 9 09:44:02 2017 +0200

    scsi: libfc: convert fc_fcp_pkt.ref_cnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter. This allows to avoid
    accidental refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Acked-by: Johannes Thumshirn <jth@kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 1b53cf9815bb4744958d41f3795d5d5a1d365e2d
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 21 15:07:11 2017 -0800

    fscrypt: remove broken support for detecting keyring key revocation
    
    Filesystem encryption ostensibly supported revoking a keyring key that
    had been used to "unlock" encrypted files, causing those files to become
    "locked" again.  This was, however, buggy for several reasons, the most
    severe of which was that when key revocation happened to be detected for
    an inode, its fscrypt_info was immediately freed, even while other
    threads could be using it for encryption or decryption concurrently.
    This could be exploited to crash the kernel or worse.
    
    This patch fixes the use-after-free by removing the code which detects
    the keyring key having been revoked, invalidated, or expired.  Instead,
    an encrypted inode that is "unlocked" now simply remains unlocked until
    it is evicted from memory.  Note that this is no worse than the case for
    block device-level encryption, e.g. dm-crypt, and it still remains
    possible for a privileged user to evict unused pages, inodes, and
    dentries by running 'sync; echo 3 > /proc/sys/vm/drop_caches', or by
    simply unmounting the filesystem.  In fact, one of those actions was
    already needed anyway for key revocation to work even somewhat sanely.
    This change is not expected to break any applications.
    
    In the future I'd like to implement a real API for fscrypt key
    revocation that interacts sanely with ongoing filesystem operations ---
    waiting for existing operations to complete and blocking new operations,
    and invalidating and sanitizing key material and plaintext from the VFS
    caches.  But this is a hard problem, and for now this bug must be fixed.
    
    This bug affected almost all versions of ext4, f2fs, and ubifs
    encryption, and it was potentially reachable in any kernel configured
    with encryption support (CONFIG_EXT4_ENCRYPTION=y,
    CONFIG_EXT4_FS_ENCRYPTION=y, CONFIG_F2FS_FS_ENCRYPTION=y, or
    CONFIG_UBIFS_FS_ENCRYPTION=y).  Note that older kernels did not use the
    shared fs/crypto/ code, but due to the potential security implications
    of this bug, it may still be worthwhile to backport this fix to them.
    
    Fixes: b7236e21d55f ("ext4 crypto: reorganize how we store keys in the inode")
    Cc: stable@vger.kernel.org # v4.2+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Acked-by: Michael Halcrow <mhalcrow@google.com>

commits)
      qed: Enable iSCSI Out-of-Order
      qed: Correct out-of-bound access in OOO history
      qed: Fix interrupt flags on Rx LL2
      qed: Free previous connections when releasing iSCSI
      qed: Fix mapping leak on LL2 rx flow
      qed: Prevent creation of too-big u32-chains
      qed: Align CIDs according to DORQ requirement
      mlxsw: reg: Fix SPVMLR max record count
      mlxsw: reg: Fix SPVM max record count
      net: Resend IGMP memberships upon peer notification.
      dccp: fix memory leak during tear-down of unsuccessful connection request
      tun: fix premature POLLOUT notification on tun devices
      dccp/tcp: fix routing redirect race
      ucc/hdlc: fix two little issue
      vxlan: fix ovs support
      net: use net->count to check whether a netns is alive or not
      bridge: drop netfilter fake rtable unconditionally
      ipv6: avoid write to a possibly cloned skb
      net: wimax/i2400m: fix NULL-deref at probe
      isdn/gigaset: fix NULL-deref at probe
      ...

commit c236c8e95a3d395b0494e7108f0d41cf36ec107c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Sat Mar 4 10:27:18 2017 +0100

    futex: Fix potential use-after-free in FUTEX_REQUEUE_PI
    
    While working on the futex code, I stumbled over this potential
    use-after-free scenario. Dmitry triggered it later with syzkaller.
    
    pi_mutex is a pointer into pi_state, which we drop the reference on in
    unqueue_me_pi(). So any access to that pointer after that is bad.
    
    Since other sites already do rt_mutex_unlock() with hb->lock held, see
    for example futex_lock_pi(), simply move the unlock before
    unqueue_me_pi().
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Darren Hart <dvhart@linux.intel.com>
    Cc: juri.lelli@arm.com
    Cc: bigeasy@linutronix.de
    Cc: xlpang@redhat.com
    Cc: rostedt@goodmis.org
    Cc: mathieu.desnoyers@efficios.com
    Cc: jdesfossez@efficios.com
    Cc: dvhart@infradead.org
    Cc: bristot@redhat.com
    Cc: stable@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170304093558.801744246@infradead.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 22a33651a56fa2a66339db059dcc247aa7131ced
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:15 2017 +0200

    drivers: convert sbd_duart.map_guard from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3cfd5b9c8dc2bd6dff08acb074973a09ba30751
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:10 2017 +0200

    drivers: convert vme_user_vma_priv.refcnt from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5f7c5a9a0f84c511a8a336491f9b8a3060b6517
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Mar 6 16:21:16 2017 +0200

    drivers, xen: convert grant_map.users from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>

commit 7ce101246655935b014b11d81f815342921f5654
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Thu Mar 9 14:58:29 2017 -0800

    netvsc: handle select_queue when device is being removed
    
    Move the send indirection table from the inner device (netvsc)
    to the network device context.
    
    It is possible that netvsc_device is not present (remove in progress).
    This solves potential use after free issues when packet is being
    created during MTU change, shutdown, or queue count changes.
    
    Fixes: d8e18ee0fa96 ("netvsc: enhance transmit select_queue")
    Signed-off-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c8782dd313ed7ca72719ebea1cfce82059e7da2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Mar 8 21:59:03 2017 +0000

    drm/i915/userptr: Disallow wrapping GTT into a userptr
    
    If we allow the user to convert a GTT mmap address into a userptr, we
    may end up in recursion hell, where currently we hit a mutex deadlock
    but other possibilities include use-after-free during the
    unbind/cancel_userptr.
    
    [  143.203989] gem_userptr_bli D    0   902    898 0x00000000
    [  143.204054] Call Trace:
    [  143.204137]  __schedule+0x511/0x1180
    [  143.204195]  ? pci_mmcfg_check_reserved+0xc0/0xc0
    [  143.204274]  schedule+0x57/0xe0
    [  143.204327]  schedule_timeout+0x383/0x670
    [  143.204374]  ? trace_hardirqs_on_caller+0x187/0x280
    [  143.204457]  ? trace_hardirqs_on_thunk+0x1a/0x1c
    [  143.204507]  ? usleep_range+0x110/0x110
    [  143.204657]  ? irq_exit+0x89/0x100
    [  143.204710]  ? retint_kernel+0x2d/0x2d
    [  143.204794]  ? trace_hardirqs_on_caller+0x187/0x280
    [  143.204857]  ? _raw_spin_unlock_irq+0x33/0x60
    [  143.204944]  wait_for_common+0x1f0/0x2f0
    [  143.205006]  ? out_of_line_wait_on_atomic_t+0x170/0x170
    [  143.205103]  ? wake_up_q+0xa0/0xa0
    [  143.205159]  ? flush_workqueue_prep_pwqs+0x15a/0x2c0
    [  143.205237]  wait_for_completion+0x1d/0x20
    [  143.205292]  flush_workqueue+0x2e9/0xbb0
    [  143.205339]  ? flush_workqueue+0x163/0xbb0
    [  143.205418]  ? __schedule+0x533/0x1180
    [  143.205498]  ? check_flush_dependency+0x1a0/0x1a0
    [  143.205681]  i915_gem_userptr_mn_invalidate_range_start+0x1c7/0x270 [i915]
    [  143.205865]  ? i915_gem_userptr_dmabuf_export+0x40/0x40 [i915]
    [  143.205955]  __mmu_notifier_invalidate_range_start+0xc6/0x120
    [  143.206044]  ? __mmu_notifier_invalidate_range_start+0x51/0x120
    [  143.206123]  zap_page_range_single+0x1c7/0x1f0
    [  143.206171]  ? unmap_single_vma+0x160/0x160
    [  143.206260]  ? unmap_mapping_range+0xa9/0x1b0
    [  143.206308]  ? vma_interval_tree_subtree_search+0x75/0xd0
    [  143.206397]  unmap_mapping_range+0x18f/0x1b0
    [  143.206444]  ? zap_vma_ptes+0x70/0x70
    [  143.206524]  ? __pm_runtime_resume+0x67/0xa0
    [  143.206723]  i915_gem_release_mmap+0x1ba/0x1c0 [i915]
    [  143.206846]  i915_vma_unbind+0x5c2/0x690 [i915]
    [  143.206925]  ? __lock_is_held+0x52/0x100
    [  143.207076]  i915_gem_object_set_tiling+0x1db/0x650 [i915]
    [  143.207236]  i915_gem_set_tiling_ioctl+0x1d3/0x3b0 [i915]
    [  143.207377]  ? i915_gem_set_tiling_ioctl+0x5/0x3b0 [i915]
    [  143.207457]  drm_ioctl+0x36c/0x670
    [  143.207535]  ? debug_lockdep_rcu_enabled.part.0+0x1a/0x30
    [  143.207730]  ? i915_gem_object_set_tiling+0x650/0x650 [i915]
    [  143.207793]  ? drm_getunique+0x120/0x120
    [  143.207875]  ? __handle_mm_fault+0x996/0x14a0
    [  143.207939]  ? vm_insert_page+0x340/0x340
    [  143.208028]  ? up_write+0x28/0x50
    [  143.208086]  ? vm_mmap_pgoff+0x160/0x190
    [  143.208163]  do_vfs_ioctl+0x12c/0xa60
    [  143.208218]  ? debug_lockdep_rcu_enabled+0x35/0x40
    [  143.208267]  ? ioctl_preallocate+0x150/0x150
    [  143.208353]  ? __do_page_fault+0x36a/0x6e0
    [  143.208400]  ? mark_held_locks+0x23/0xc0
    [  143.208479]  ? up_read+0x1f/0x40
    [  143.208526]  ? entry_SYSCALL_64_fastpath+0x5/0xc6
    [  143.208669]  ? __fget_light+0xa7/0xc0
    [  143.208747]  SyS_ioctl+0x41/0x70
    
    To prevent the possibility of a deadlock, we defer scheduling the worker
    until after we have proven that given the current mm, the userptr range
    does not overlap a GGTT mmaping. If another thread tries to remap the
    GGTT over the userptr before the worker is scheduled, it will be stopped
    by its invalidate-range flushing the current work, before the deadlock
    can occur.
    
    v2: Improve discussion of how we end up in the deadlock.
    v3: Don't forget to mark the userptr as active after a successful
    gup_fast. Rename overlaps_ggtt to noncontiguous_or_overlaps_ggtt.
    v4: Fix test ordering between invalid GTT mmaping and range completion
    (Tvrtko)
    
    Reported-by: Michał Winiarski <michal.winiarski@intel.com>
    Testcase: igt/gem_userptr_blits/map-fixed-invalidate-gup
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michał Winiarski <michal.winiarski@intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170308215903.24171-1-chris@chris-wilson.co.uk
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit f7887d40e541f74402df0684a1463c0a0bb68c68
Author: David Ahern <dsa@cumulusnetworks.com>
Date:   Mon Mar 6 08:53:04 2017 -0800

    vrf: Fix use-after-free in vrf_xmit
    
    KASAN detected a use-after-free:
    
    [  269.467067] BUG: KASAN: use-after-free in vrf_xmit+0x7f1/0x827 [vrf] at addr ffff8800350a21c0
    [  269.467067] Read of size 4 by task ssh/1879
    [  269.467067] CPU: 1 PID: 1879 Comm: ssh Not tainted 4.10.0+ #249
    [  269.467067] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.7.5-20140531_083030-gandalf 04/01/2014
    [  269.467067] Call Trace:
    [  269.467067]  dump_stack+0x81/0xb6
    [  269.467067]  kasan_object_err+0x21/0x78
    [  269.467067]  kasan_report+0x2f7/0x450
    [  269.467067]  ? vrf_xmit+0x7f1/0x827 [vrf]
    [  269.467067]  ? ip_output+0xa4/0xdb
    [  269.467067]  __asan_load4+0x6b/0x6d
    [  269.467067]  vrf_xmit+0x7f1/0x827 [vrf]
    ...
    
    Which corresponds to the skb access after xmit handling. Fix by saving
    skb->len and using the saved value to update stats.
    
    Fixes: 193125dbd8eb2 ("net: Introduce VRF device driver")
    Signed-off-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b9502e63b5e2b1b5ef491919d3219b9440fe0b3
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Wed Mar 8 10:00:40 2017 +0200

    kernel: convert css_set.refcount from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit df23de55615fa7a190a85f49a950ccecdd9102f3
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 8 17:48:32 2017 +0100

    bdi: Fix use-after-free in wb_congested_put()
    
    bdi_writeback_congested structures get created for each blkcg and bdi
    regardless whether bdi is registered or not. When they are created in
    unregistered bdi and the request queue (and thus bdi) is then destroyed
    while blkg still holds reference to bdi_writeback_congested structure,
    this structure will be referencing freed bdi and last wb_congested_put()
    will try to remove the structure from already freed bdi.
    
    With commit 165a5e22fafb "block: Move bdi_unregister() to
    del_gendisk()", SCSI started to destroy bdis without calling
    bdi_unregister() first (previously it was calling bdi_unregister() even
    for unregistered bdis) and thus the code detaching
    bdi_writeback_congested in cgwb_bdi_destroy() was not triggered and we
    started hitting this use-after-free bug. It is enough to boot a KVM
    instance with virtio-scsi device to trigger this behavior.
    
    Fix the problem by detaching bdi_writeback_congested structures in
    bdi_exit() instead of bdi_unregister(). This is also more logical as
    they can get attached to bdi regardless whether it ever got registered
    or not.
    
    Fixes: 165a5e22fafb127ecb5914e12e8c32a1f0d3f820
    Signed-off-by: Jan Kara <jack@suse.cz>
    Tested-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 62f8f4d9066c1c6f2474845d1ca7e2891f2ae3fd
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Mar 5 10:52:16 2017 -0800

    dccp: fix use-after-free in dccp_feat_activate_values
    
    Dmitry reported crashes in DCCP stack [1]
    
    Problem here is that when I got rid of listener spinlock, I missed the
    fact that DCCP stores a complex state in struct dccp_request_sock,
    while TCP does not.
    
    Since multiple cpus could access it at the same time, we need to add
    protection.
    
    [1]
    BUG: KASAN: use-after-free in dccp_feat_activate_values+0x967/0xab0
    net/dccp/feat.c:1541 at addr ffff88003713be68
    Read of size 8 by task syz-executor2/8457
    CPU: 2 PID: 8457 Comm: syz-executor2 Not tainted 4.10.0-rc7+ #127
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:15 [inline]
     dump_stack+0x292/0x398 lib/dump_stack.c:51
     kasan_object_err+0x1c/0x70 mm/kasan/report.c:162
     print_address_description mm/kasan/report.c:200 [inline]
     kasan_report_error mm/kasan/report.c:289 [inline]
     kasan_report.part.1+0x20e/0x4e0 mm/kasan/report.c:311
     kasan_report mm/kasan/report.c:332 [inline]
     __asan_report_load8_noabort+0x29/0x30 mm/kasan/report.c:332
     dccp_feat_activate_values+0x967/0xab0 net/dccp/feat.c:1541
     dccp_create_openreq_child+0x464/0x610 net/dccp/minisocks.c:121
     dccp_v6_request_recv_sock+0x1f6/0x1960 net/dccp/ipv6.c:457
     dccp_check_req+0x335/0x5a0 net/dccp/minisocks.c:186
     dccp_v6_rcv+0x69e/0x1d00 net/dccp/ipv6.c:711
     ip6_input_finish+0x46d/0x17a0 net/ipv6/ip6_input.c:279
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ip6_input+0xdb/0x590 net/ipv6/ip6_input.c:322
     dst_input include/net/dst.h:507 [inline]
     ip6_rcv_finish+0x289/0x890 net/ipv6/ip6_input.c:69
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ipv6_rcv+0x12ec/0x23d0 net/ipv6/ip6_input.c:203
     __netif_receive_skb_core+0x1ae5/0x3400 net/core/dev.c:4190
     __netif_receive_skb+0x2a/0x170 net/core/dev.c:4228
     process_backlog+0xe5/0x6c0 net/core/dev.c:4839
     napi_poll net/core/dev.c:5202 [inline]
     net_rx_action+0xe70/0x1900 net/core/dev.c:5267
     __do_softirq+0x2fb/0xb7d kernel/softirq.c:284
     do_softirq_own_stack+0x1c/0x30 arch/x86/entry/entry_64.S:902
     </IRQ>
     do_softirq.part.17+0x1e8/0x230 kernel/softirq.c:328
     do_softirq kernel/softirq.c:176 [inline]
     __local_bh_enable_ip+0x1f2/0x200 kernel/softirq.c:181
     local_bh_enable include/linux/bottom_half.h:31 [inline]
     rcu_read_unlock_bh include/linux/rcupdate.h:971 [inline]
     ip6_finish_output2+0xbb0/0x23d0 net/ipv6/ip6_output.c:123
     ip6_finish_output+0x302/0x960 net/ipv6/ip6_output.c:148
     NF_HOOK_COND include/linux/netfilter.h:246 [inline]
     ip6_output+0x1cb/0x8d0 net/ipv6/ip6_output.c:162
     ip6_xmit+0xcdf/0x20d0 include/net/dst.h:501
     inet6_csk_xmit+0x320/0x5f0 net/ipv6/inet6_connection_sock.c:179
     dccp_transmit_skb+0xb09/0x1120 net/dccp/output.c:141
     dccp_xmit_packet+0x215/0x760 net/dccp/output.c:280
     dccp_write_xmit+0x168/0x1d0 net/dccp/output.c:362
     dccp_sendmsg+0x79c/0xb10 net/dccp/proto.c:796
     inet_sendmsg+0x164/0x5b0 net/ipv4/af_inet.c:744
     sock_sendmsg_nosec net/socket.c:635 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:645
     SYSC_sendto+0x660/0x810 net/socket.c:1687
     SyS_sendto+0x40/0x50 net/socket.c:1655
     entry_SYSCALL_64_fastpath+0x1f/0xc2
    RIP: 0033:0x4458b9
    RSP: 002b:00007f8ceb77bb58 EFLAGS: 00000282 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 0000000000000017 RCX: 00000000004458b9
    RDX: 0000000000000023 RSI: 0000000020e60000 RDI: 0000000000000017
    RBP: 00000000006e1b90 R08: 00000000200f9fe1 R09: 0000000000000020
    R10: 0000000000008010 R11: 0000000000000282 R12: 00000000007080a8
    R13: 0000000000000000 R14: 00007f8ceb77c9c0 R15: 00007f8ceb77c700
    Object at ffff88003713be50, in cache kmalloc-64 size: 64
    Allocated:
    PID = 8446
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:57
     save_stack+0x43/0xd0 mm/kasan/kasan.c:502
     set_track mm/kasan/kasan.c:514 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:605
     kmem_cache_alloc_trace+0x82/0x270 mm/slub.c:2738
     kmalloc include/linux/slab.h:490 [inline]
     dccp_feat_entry_new+0x214/0x410 net/dccp/feat.c:467
     dccp_feat_push_change+0x38/0x220 net/dccp/feat.c:487
     __feat_register_sp+0x223/0x2f0 net/dccp/feat.c:741
     dccp_feat_propagate_ccid+0x22b/0x2b0 net/dccp/feat.c:949
     dccp_feat_server_ccid_dependencies+0x1b3/0x250 net/dccp/feat.c:1012
     dccp_make_response+0x1f1/0xc90 net/dccp/output.c:423
     dccp_v6_send_response+0x4ec/0xc20 net/dccp/ipv6.c:217
     dccp_v6_conn_request+0xaba/0x11b0 net/dccp/ipv6.c:377
     dccp_rcv_state_process+0x51e/0x1650 net/dccp/input.c:606
     dccp_v6_do_rcv+0x213/0x350 net/dccp/ipv6.c:632
     sk_backlog_rcv include/net/sock.h:893 [inline]
     __sk_receive_skb+0x36f/0xcc0 net/core/sock.c:479
     dccp_v6_rcv+0xba5/0x1d00 net/dccp/ipv6.c:742
     ip6_input_finish+0x46d/0x17a0 net/ipv6/ip6_input.c:279
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ip6_input+0xdb/0x590 net/ipv6/ip6_input.c:322
     dst_input include/net/dst.h:507 [inline]
     ip6_rcv_finish+0x289/0x890 net/ipv6/ip6_input.c:69
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ipv6_rcv+0x12ec/0x23d0 net/ipv6/ip6_input.c:203
     __netif_receive_skb_core+0x1ae5/0x3400 net/core/dev.c:4190
     __netif_receive_skb+0x2a/0x170 net/core/dev.c:4228
     process_backlog+0xe5/0x6c0 net/core/dev.c:4839
     napi_poll net/core/dev.c:5202 [inline]
     net_rx_action+0xe70/0x1900 net/core/dev.c:5267
     __do_softirq+0x2fb/0xb7d kernel/softirq.c:284
    Freed:
    PID = 15
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:57
     save_stack+0x43/0xd0 mm/kasan/kasan.c:502
     set_track mm/kasan/kasan.c:514 [inline]
     kasan_slab_free+0x73/0xc0 mm/kasan/kasan.c:578
     slab_free_hook mm/slub.c:1355 [inline]
     slab_free_freelist_hook mm/slub.c:1377 [inline]
     slab_free mm/slub.c:2954 [inline]
     kfree+0xe8/0x2b0 mm/slub.c:3874
     dccp_feat_entry_destructor.part.4+0x48/0x60 net/dccp/feat.c:418
     dccp_feat_entry_destructor net/dccp/feat.c:416 [inline]
     dccp_feat_list_pop net/dccp/feat.c:541 [inline]
     dccp_feat_activate_values+0x57f/0xab0 net/dccp/feat.c:1543
     dccp_create_openreq_child+0x464/0x610 net/dccp/minisocks.c:121
     dccp_v6_request_recv_sock+0x1f6/0x1960 net/dccp/ipv6.c:457
     dccp_check_req+0x335/0x5a0 net/dccp/minisocks.c:186
     dccp_v6_rcv+0x69e/0x1d00 net/dccp/ipv6.c:711
     ip6_input_finish+0x46d/0x17a0 net/ipv6/ip6_input.c:279
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ip6_input+0xdb/0x590 net/ipv6/ip6_input.c:322
     dst_input include/net/dst.h:507 [inline]
     ip6_rcv_finish+0x289/0x890 net/ipv6/ip6_input.c:69
     NF_HOOK include/linux/netfilter.h:257 [inline]
     ipv6_rcv+0x12ec/0x23d0 net/ipv6/ip6_input.c:203
     __netif_receive_skb_core+0x1ae5/0x3400 net/core/dev.c:4190
     __netif_receive_skb+0x2a/0x170 net/core/dev.c:4228
     process_backlog+0xe5/0x6c0 net/core/dev.c:4839
     napi_poll net/core/dev.c:5202 [inline]
     net_rx_action+0xe70/0x1900 net/core/dev.c:5267
     __do_softirq+0x2fb/0xb7d kernel/softirq.c:284
    Memory state around the buggy address:
     ffff88003713bd00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88003713bd80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88003713be00: fc fc fc fc fc fc fc fc fc fc fb fb fb fb fb fb
                                                              ^
    
    Fixes: 079096f103fa ("tcp/dccp: install syn_recv requests into ehash table")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9ac25fc063751379cb77434fef9f3b088cd3e2f7
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Mar 3 21:01:03 2017 -0800

    net: fix socket refcounting in skb_complete_tx_timestamp()
    
    TX skbs do not necessarily hold a reference on skb->sk->sk_refcnt
    By the time TX completion happens, sk_refcnt might be already 0.
    
    sock_hold()/sock_put() would then corrupt critical state, like
    sk_wmem_alloc and lead to leaks or use after free.
    
    Fixes: 62bccb8cdb69 ("net-timestamp: Make the clone operation stand-alone from phy timestamping")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Alexander Duyck <alexander.h.duyck@intel.com>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: Soheil Hassas Yeganeh <soheil@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ecd9542dbc3e07f3bd3870aac12839f72b47db4
Author: Matthew Wilcox <mawilcox@microsoft.com>
Date:   Fri Mar 3 12:16:10 2017 -0500

    ida: Free correct IDA bitmap
    
    There's a relatively rare race where we look at the per-cpu preallocated
    IDA bitmap, see it's NULL, allocate a new one, and atomically update it.
    If the kmalloc() happened to sleep and we were rescheduled to a different
    CPU, or an interrupt came in at the exact right time, another task
    might have successfully allocated a bitmap and already deposited it.
    I forgot what the semantics of cmpxchg() were and ended up freeing the
    wrong bitmap leading to KASAN reporting a use-after-free.
    
    Dmitry found the bug with syzkaller & wrote the patch.  I wrote the test
    case that will reproduce the bug without his patch being applied.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Matthew Wilcox <mawilcox@microsoft.com>

commit 040757f738e13caaa9c5078bca79aa97e11dde88
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sun Mar 5 15:03:22 2017 -0600

    ucount: Remove the atomicity from ucount->count
    
    Always increment/decrement ucount->count under the ucounts_lock.  The
    increments are there already and moving the decrements there means the
    locking logic of the code is simpler.  This simplification in the
    locking logic fixes a race between put_ucounts and get_ucounts that
    could result in a use-after-free because the count could go zero then
    be found by get_ucounts and then be freed by put_ucounts.
    
    A bug presumably this one was found by a combination of syzkaller and
    KASAN.  JongWhan Kim reported the syzkaller failure and Dmitry Vyukov
    spotted the race in the code.
    
    Cc: stable@vger.kernel.org
    Fixes: f6b2db1a3e8d ("userns: Make the count of user namespaces per user")
    Reported-by: JongHwan Kim <zzoru007@gmail.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Andrei Vagin <avagin@gmail.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

commit 387ad9674b0013c8756ad20d854ff005b0c313ad
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Feb 20 12:19:00 2017 +0200

    kernel: convert cgroup_namespace.count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commits)
      strparser: destroy workqueue on module exit
      sfc: fix IPID endianness in TSOv2
      sfc: avoid max() in array size
      rds: remove unnecessary returned value check
      rxrpc: Fix potential NULL-pointer exception
      nfp: correct DMA direction in XDP DMA sync
      nfp: don't tell FW about the reserved buffer space
      net: ethernet: bgmac: mac address change bug
      net: ethernet: bgmac: init sequence bug
      xen-netback: don't vfree() queues under spinlock
      xen-netback: keep a local pointer for vif in backend_disconnect()
      netfilter: nf_tables: don't call nfnetlink_set_err() if nfnetlink_send() fails
      netfilter: nft_set_rbtree: incorrect assumption on lower interval lookups
      netfilter: nf_conntrack_sip: fix wrong memory initialisation
      can: flexcan: fix typo in comment
      can: usb_8dev: Fix memory leak of priv->cmd_msg_buffer
      can: gs_usb: fix coding style
      can: gs_usb: Don't use stack memory for USB transfers
      ixgbe: Limit use of 2K buffers on architectures with 256B or larger cache lines
      ixgbe: update the rss key on h/w, when ethtool ask for it
      ...

commit 364fed351369e0193244fa2c78df855724cdddb9
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:35:03 2017 +0200

    perf thread_map: Convert thread_map.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-10-git-send-email-elena.reshetova@intel.com
    [ Did missing tests/thread-map.c conversion ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit e34f5b11cd51fbe723e481c1db03a77260be6f4c
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:35:02 2017 +0200

    perf thread: convert thread.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-9-git-send-email-elena.reshetova@intel.com
    [ Did missing conversion in __machine__remove_thread() ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 25a3720cf45779900246ec17e238fbb674ce4e67
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:35:01 2017 +0200

    perf evlist: Convert perf_map.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-8-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit ead05e8f3fffe2860f0f8d1c23d74c526e9f2a3c
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:35:00 2017 +0200

    perf map: Convert map_groups.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-7-git-send-email-elena.reshetova@intel.com
    [ Did the missing conversion of tests/thread-mg-share.c too ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit e3a42cdd3e35d6c2181d5acfa191eb448aea6ace
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:34:59 2017 +0200

    perf map: Convert map.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-6-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 7100810a75b9854f1b05550b54500497c5914d4b
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:34:58 2017 +0200

    perf dso: Convert dso.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-5-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 6df74bc08bc2201f65fb0e81cd5feb787575f7ce
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:34:57 2017 +0200

    perf comm: Convert comm_str.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-4-git-send-email-elena.reshetova@intel.com
    [ Reinstated comm_str__get() function, needed when reusing entries in the rbtree ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit ec09a42a6dbd2afde9b8fd4bb8f98bbd94ca904c
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:34:56 2017 +0200

    perf cpumap: Convert cpu_map.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of atomic_t
    when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: alsa-devel@alsa-project.org
    Link: http://lkml.kernel.org/r/1487691303-31858-3-git-send-email-elena.reshetova@intel.com
    [ fixed mixed conversion to refcount in tests/cpumap.c ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 79c5fe6db8c70558d3a64959f55596d137ccc6e6
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Tue Feb 21 17:34:55 2017 +0200

    perf cgroup: Convert cgroup_sel.refcnt from atomic_t to refcount_t
    
    The refcount_t type and corresponding API should be used instead of
    atomic_t when the variable is used as a reference counter.
    
    This allows to avoid accidental refcounter overflows that might lead to
    use-after-free situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Kook <keescook@chromium.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: alsa-devel@alsa-project.org
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Windsor <dwindsor@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Hans Liljestrand <ishkamiel@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kees Kook <keescook@chromium.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Matija Glavinic Pecotic <matija.glavinic-pecotic.ext@nokia.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1487691303-31858-2-git-send-email-elena.reshetova@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 152669bd3cd2407d6f556009b95ee249c0c1a462
Author: Dexuan Cui <decui@microsoft.com>
Date:   Thu Mar 2 13:00:53 2017 +0000

    netvsc: fix use-after-free in netvsc_change_mtu()
    
    'nvdev' is freed in rndis_filter_device_remove -> netvsc_device_remove ->
    free_netvsc_device, so we mustn't access it, before it's re-created in
    rndis_filter_device_add -> netvsc_device_add.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Cc: "K. Y. Srinivasan" <kys@microsoft.com>
    Cc: Haiyang Zhang <haiyangz@microsoft.com>
    Cc: Stephen Hemminger <sthemmin@microsoft.com>
    Reviewed-by: Stephen Hemminger <sthemmin@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 48cac18ecf1de82f76259a54402c3adb7839ad01
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 1 14:45:06 2017 -0800

    ipv6: orphan skbs in reassembly unit
    
    Andrey reported a use-after-free in IPv6 stack.
    
    Issue here is that we free the socket while it still has skb
    in TX path and in some queues.
    
    It happens here because IPv6 reassembly unit messes skb->truesize,
    breaking skb_set_owner_w() badly.
    
    We fixed a similar issue for IPV4 in commit 8282f27449bf ("inet: frag:
    Always orphan skbs inside ip_defrag()")
    Acked-by: Joe Stringer <joe@ovn.org>
    
    ==================================================================
    BUG: KASAN: use-after-free in sock_wfree+0x118/0x120
    Read of size 8 at addr ffff880062da0060 by task a.out/4140
    
    page:ffffea00018b6800 count:1 mapcount:0 mapping:          (null)
    index:0x0 compound_mapcount: 0
    flags: 0x100000000008100(slab|head)
    raw: 0100000000008100 0000000000000000 0000000000000000 0000000180130013
    raw: dead000000000100 dead000000000200 ffff88006741f140 0000000000000000
    page dumped because: kasan: bad access detected
    
    CPU: 0 PID: 4140 Comm: a.out Not tainted 4.10.0-rc3+ #59
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:15
     dump_stack+0x292/0x398 lib/dump_stack.c:51
     describe_address mm/kasan/report.c:262
     kasan_report_error+0x121/0x560 mm/kasan/report.c:370
     kasan_report mm/kasan/report.c:392
     __asan_report_load8_noabort+0x3e/0x40 mm/kasan/report.c:413
     sock_flag ./arch/x86/include/asm/bitops.h:324
     sock_wfree+0x118/0x120 net/core/sock.c:1631
     skb_release_head_state+0xfc/0x250 net/core/skbuff.c:655
     skb_release_all+0x15/0x60 net/core/skbuff.c:668
     __kfree_skb+0x15/0x20 net/core/skbuff.c:684
     kfree_skb+0x16e/0x4e0 net/core/skbuff.c:705
     inet_frag_destroy+0x121/0x290 net/ipv4/inet_fragment.c:304
     inet_frag_put ./include/net/inet_frag.h:133
     nf_ct_frag6_gather+0x1125/0x38b0 net/ipv6/netfilter/nf_conntrack_reasm.c:617
     ipv6_defrag+0x21b/0x350 net/ipv6/netfilter/nf_defrag_ipv6_hooks.c:68
     nf_hook_entry_hookfn ./include/linux/netfilter.h:102
     nf_hook_slow+0xc3/0x290 net/netfilter/core.c:310
     nf_hook ./include/linux/netfilter.h:212
     __ip6_local_out+0x52c/0xaf0 net/ipv6/output_core.c:160
     ip6_local_out+0x2d/0x170 net/ipv6/output_core.c:170
     ip6_send_skb+0xa1/0x340 net/ipv6/ip6_output.c:1722
     ip6_push_pending_frames+0xb3/0xe0 net/ipv6/ip6_output.c:1742
     rawv6_push_pending_frames net/ipv6/raw.c:613
     rawv6_sendmsg+0x2cff/0x4130 net/ipv6/raw.c:927
     inet_sendmsg+0x164/0x5b0 net/ipv4/af_inet.c:744
     sock_sendmsg_nosec net/socket.c:635
     sock_sendmsg+0xca/0x110 net/socket.c:645
     sock_write_iter+0x326/0x620 net/socket.c:848
     new_sync_write fs/read_write.c:499
     __vfs_write+0x483/0x760 fs/read_write.c:512
     vfs_write+0x187/0x530 fs/read_write.c:560
     SYSC_write fs/read_write.c:607
     SyS_write+0xfb/0x230 fs/read_write.c:599
     entry_SYSCALL_64_fastpath+0x1f/0xc2 arch/x86/entry/entry_64.S:203
    RIP: 0033:0x7ff26e6f5b79
    RSP: 002b:00007ff268e0ed98 EFLAGS: 00000206 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 00007ff268e0f9c0 RCX: 00007ff26e6f5b79
    RDX: 0000000000000010 RSI: 0000000020f50fe1 RDI: 0000000000000003
    RBP: 00007ff26ebc1220 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000206 R12: 0000000000000000
    R13: 00007ff268e0f9c0 R14: 00007ff26efec040 R15: 0000000000000003
    
    The buggy address belongs to the object at ffff880062da0000
     which belongs to the cache RAWv6 of size 1504
    The buggy address ffff880062da0060 is located 96 bytes inside
     of 1504-byte region [ffff880062da0000, ffff880062da05e0)
    
    Freed by task 4113:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:57
     save_stack+0x43/0xd0 mm/kasan/kasan.c:502
     set_track mm/kasan/kasan.c:514
     kasan_slab_free+0x73/0xc0 mm/kasan/kasan.c:578
     slab_free_hook mm/slub.c:1352
     slab_free_freelist_hook mm/slub.c:1374
     slab_free mm/slub.c:2951
     kmem_cache_free+0xb2/0x2c0 mm/slub.c:2973
     sk_prot_free net/core/sock.c:1377
     __sk_destruct+0x49c/0x6e0 net/core/sock.c:1452
     sk_destruct+0x47/0x80 net/core/sock.c:1460
     __sk_free+0x57/0x230 net/core/sock.c:1468
     sk_free+0x23/0x30 net/core/sock.c:1479
     sock_put ./include/net/sock.h:1638
     sk_common_release+0x31e/0x4e0 net/core/sock.c:2782
     rawv6_close+0x54/0x80 net/ipv6/raw.c:1214
     inet_release+0xed/0x1c0 net/ipv4/af_inet.c:425
     inet6_release+0x50/0x70 net/ipv6/af_inet6.c:431
     sock_release+0x8d/0x1e0 net/socket.c:599
     sock_close+0x16/0x20 net/socket.c:1063
     __fput+0x332/0x7f0 fs/file_table.c:208
     ____fput+0x15/0x20 fs/file_table.c:244
     task_work_run+0x19b/0x270 kernel/task_work.c:116
     exit_task_work ./include/linux/task_work.h:21
     do_exit+0x186b/0x2800 kernel/exit.c:839
     do_group_exit+0x149/0x420 kernel/exit.c:943
     SYSC_exit_group kernel/exit.c:954
     SyS_exit_group+0x1d/0x20 kernel/exit.c:952
     entry_SYSCALL_64_fastpath+0x1f/0xc2 arch/x86/entry/entry_64.S:203
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:57
     save_stack+0x43/0xd0 mm/kasan/kasan.c:502
     set_track mm/kasan/kasan.c:514
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:605
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:544
     slab_post_alloc_hook mm/slab.h:432
     slab_alloc_node mm/slub.c:2708
     slab_alloc mm/slub.c:2716
     kmem_cache_alloc+0x1af/0x250 mm/slub.c:2721
     sk_prot_alloc+0x65/0x2a0 net/core/sock.c:1334
     sk_alloc+0x105/0x1010 net/core/sock.c:1396
     inet6_create+0x44d/0x1150 net/ipv6/af_inet6.c:183
     __sock_create+0x4f6/0x880 net/socket.c:1199
     sock_create net/socket.c:1239
     SYSC_socket net/socket.c:1269
     SyS_socket+0xf9/0x230 net/socket.c:1249
     entry_SYSCALL_64_fastpath+0x1f/0xc2 arch/x86/entry/entry_64.S:203
    
    Memory state around the buggy address:
     ffff880062d9ff00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff880062d9ff80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff880062da0000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                           ^
     ffff880062da0080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880062da0100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 61cfac6f267dabcf2740a7ec8a0295833b28b5f5
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Feb 28 16:05:19 2017 -0800

    CIFS: Fix possible use after free in demultiplex thread
    
    The recent changes that added SMB3 encryption support introduced
    a possible use after free in the demultiplex thread. When we
    process an encrypted packed we obtain a pointer to SMB session
    but do not obtain a reference. This can possibly lead to a situation
    when this session was freed before we copy a decryption key from
    there. Fix this by obtaining a copy of the key rather than a pointer
    to the session under a spinlock.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <smfrench@gmail.com>

commit 5179b26694c92373275e4933f5d0ff32d585c675
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Feb 28 12:41:29 2017 +0800

    sctp: call rcu_read_lock before checking for duplicate transport nodes
    
    Commit cd2b70875058 ("sctp: check duplicate node before inserting a
    new transport") called rhltable_lookup() to check for the duplicate
    transport node in transport rhashtable.
    
    But rhltable_lookup() doesn't call rcu_read_lock inside, it could cause
    a use-after-free issue if it tries to dereference the node that another
    cpu has freed it. Note that sock lock can not avoid this as it is per
    sock.
    
    This patch is to fix it by calling rcu_read_lock before checking for
    duplicate transport nodes.
    
    Fixes: cd2b70875058 ("sctp: check duplicate node before inserting a new transport")
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e3736c3eb3a6f7c0966923b629c9f92b558aa9c7
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Mon Feb 20 13:06:21 2017 +0200

    kvm: convert kvm.users_count from atomic_t to refcount_t
    
    refcount_t type and corresponding API should be
    used instead of atomic_t when the variable is used as
    a reference counter. This allows to avoid accidental
    refcounter overflows that might lead to use-after-free
    situations.
    
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David Windsor <dwindsor@gmail.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

commits)
      qed: Don't use attention PTT for configuring BW
      qed: Fix race with multiple VFs
      l2tp: avoid use-after-free caused by l2tp_ip_backlog_recv
      xfrm: provide correct dst in xfrm_neigh_lookup
      rhashtable: Fix RCU dereference annotation in rht_bucket_nested
      rhashtable: Fix use before NULL check in bucket_table_free
      net sched actions: do not overwrite status of action creation.
      rxrpc: Kernel calls get stuck in recvmsg
      net sched actions: decrement module reference count after table flush.
      lib: Allow compile-testing of parman
      ipv6: check sk sk_type and protocol early in ip_mroute_set/getsockopt
      sctp: set sin_port for addr param when checking duplicate address
      net/mlx4_en: fix overflow in mlx4_en_init_timestamp()
      netfilter: nft_set_bitmap: incorrect bitmap size
      net: s2io: fix typo argumnet argument
      net: vxge: fix typo argumnet argument
      netfilter: nf_ct_expect: Change __nf_ct_expect_check() return value.
      ipv4: mask tos for input route
      ipv4: add missing initialization for flowi4_uid
      lib: fix spelling mistake: "actualy" -> "actually"
      ...

commit 51fb60eb162ab84c5edf2ae9c63cf0b878e5547e
Author: Paul Hüber <phueber@kernsp.in>
Date:   Sun Feb 26 17:58:19 2017 +0100

    l2tp: avoid use-after-free caused by l2tp_ip_backlog_recv
    
    l2tp_ip_backlog_recv may not return -1 if the packet gets dropped.
    The return value is passed up to ip_local_deliver_finish, which treats
    negative values as an IP protocol number for resubmission.
    
    Signed-off-by: Paul Hüber <phueber@kernsp.in>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9fa1d919c696e90c887d8742198023e7639d139
Author: Greg Thelen <gthelen@google.com>
Date:   Fri Feb 24 15:00:05 2017 -0800

    kasan: drain quarantine of memcg slab objects
    
    Per memcg slab accounting and kasan have a problem with kmem_cache
    destruction.
     - kmem_cache_create() allocates a kmem_cache, which is used for
       allocations from processes running in root (top) memcg.
     - Processes running in non root memcg and allocating with either
       __GFP_ACCOUNT or from a SLAB_ACCOUNT cache use a per memcg
       kmem_cache.
     - Kasan catches use-after-free by having kfree() and kmem_cache_free()
       defer freeing of objects. Objects are placed in a quarantine.
     - kmem_cache_destroy() destroys root and non root kmem_caches. It takes
       care to drain the quarantine of objects from the root memcg's
       kmem_cache, but ignores objects associated with non root memcg. This
       causes leaks because quarantined per memcg objects refer to per memcg
       kmem cache being destroyed.
    
    To see the problem:
    
     1) create a slab cache with kmem_cache_create(,,,SLAB_ACCOUNT,)
     2) from non root memcg, allocate and free a few objects from cache
     3) dispose of the cache with kmem_cache_destroy() kmem_cache_destroy()
        will trigger a "Slab cache still has objects" warning indicating
        that the per memcg kmem_cache structure was leaked.
    
    Fix the leak by draining kasan quarantined objects allocated from non
    root memcg.
    
    Racing memcg deletion is tricky, but handled.  kmem_cache_destroy() =>
    shutdown_memcg_caches() => __shutdown_memcg_cache() => shutdown_cache()
    flushes per memcg quarantined objects, even if that memcg has been
    rmdir'd and gone through memcg_deactivate_kmem_caches().
    
    This leak only affects destroyed SLAB_ACCOUNT kmem caches when kasan is
    enabled.  So I don't think it's worth patching stable kernels.
    
    Link: http://lkml.kernel.org/r/1482257462-36948-1-git-send-email-gthelen@google.com
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Reviewed-by: Vladimir Davydov <vdavydov.dev@gmail.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      md/raid1: fix write behind issues introduced by bio_clone_bioset_partial
      md/raid1: handle flush request correctly
      md/linear: shutup lockdep warnning
      md/raid1: fix a use-after-free bug
      RAID1: avoid unnecessary spin locks in I/O barrier code
      RAID1: a new I/O barrier implementation to remove resync window
      md/raid5: Don't reinvent the wheel but use existing llist API
      md: fast clone bio in bio_clone_mddev()
      md: remove unnecessary check on mddev
      md/raid1: use bio_clone_bioset_partial() in case of write behind
      md: fail if mddev->bio_set can't be created
      block: introduce bio_clone_bioset_partial()
      md: disable WRITE SAME if it fails in underlayer disks
      md/raid5-cache: exclude reclaiming stripes in reclaim check
      md/raid5-cache: stripe reclaim only counts valid stripes
      MD: add doc for raid5-cache
      Documentation: move MD related doc into a separate dir
      md: ensure md devices are freed before module is unloaded.
      md/r5cache: improve journal device efficiency
      md/r5cache: enable chunk_aligned_read with write back cache
      ...

commits)
      dm-rq: don't dereference request payload after ending request
      blk-mq-sched: separate mark hctx and queue restart operations
      blk-mq: use sbq wait queues instead of restart for driver tags
      block/sed-opal: Propagate original error message to userland.
      nvme/pci: re-check security protocol support after reset
      block/sed-opal: Introduce free_opal_dev to free the structure and clean up state
      nvme: detect NVMe controller in recent MacBooks
      nvme-rdma: add support for host_traddr
      nvmet-rdma: Fix error handling
      nvmet-rdma: use nvme cm status helper
      nvme-rdma: move nvme cm status helper to .h file
      nvme-fc: don't bother to validate ioccsz and iorcsz
      nvme/pci: No special case for queue busy on IO
      nvme/core: Fix race kicking freed request_queue
      nvme/pci: Disable on removal when disconnected
      nvme: Enable autonomous power state transitions
      nvme: Add a quirk mechanism that uses identify_ctrl
      nvme: make nvmf_register_transport require a create_ctrl callback
      nvme: Use CNS as 8-bit field and avoid endianness conversion
      nvme: add semicolon in nvme_command setting
      ...

commit 61febef40bfe8ab68259d8545257686e8a0d91d1
Author: Jens Axboe <axboe@fb.com>
Date:   Fri Feb 24 13:19:32 2017 -0700

    dm-rq: don't dereference request payload after ending request
    
    Bart reported a case where dm would crash with use-after-free
    poison. This is due to dm_softirq_done() accessing memory
    associated with a request after calling end_request on it.
    This is most visible on !blk-mq, since we free the memory
    immediately for that case.
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Fixes: eb8db831be80 ("dm: always defer request allocation to the owner of the request_queue")
    Signed-off-by: Jens Axboe <axboe@fb.com>

commits)
      lib/Kconfig: make PRIME_NUMBERS not user selectable
      drm/tinydrm: helpers: Properly fix backlight dependency
      drm/tinydrm: mipi-dbi: Fix field width specifier warning
      drm/tinydrm: mipi-dbi: Silence: ‘cmd’ may be used uninitialized
      drm/sti: fix build warnings in sti_drv.c and sti_vtg.c files
      drm/amd/powerplay: fix PSI feature on Polars12
      drm/amdgpu: refuse to reserve io mem for split VRAM buffers
      drm/ttm: fix use-after-free races in vm fault handling
      drm/tinydrm: Add support for Multi-Inno MI0283QT display
      dt-bindings: Add Multi-Inno MI0283QT binding
      dt-bindings: display/panel: Add common rotation property
      of: Add vendor prefix for Multi-Inno
      drm/tinydrm: Add MIPI DBI support
      drm/tinydrm: Add helper functions
      drm: Add DRM support for tiny LCD displays
      drm/amd/amdgpu: post card if there is real hw resetting performed
      drm/nouveau/tmr: provide backtrace when a timeout is hit
      drm/nouveau/pci/g92: Fix rearm
      drm/nouveau/drm/therm/fan: add a fallback if no fan control is specified in the vbios
      drm/nouveau/hwmon: expose power_max and power_crit
      ..

commit a9b9477db2937934e469db800317ec3ef7e81b51
Author: Filipe Manana <fdmanana@suse.com>
Date:   Sat Feb 4 17:12:00 2017 +0000

    Btrfs: fix use-after-free due to wrong order of destroying work queues
    
    Before we destroy all work queues (and wait for their tasks to complete)
    we were destroying the work queues used for metadata I/O operations, which
    can result in a use-after-free problem because most tasks from all work
    queues do metadata I/O operations. For example, the tasks from the caching
    workers work queue (fs_info->caching_workers), which is destroyed only
    after the work queue used for metadata reads (fs_info->endio_meta_workers)
    is destroyed, do metadata reads, which result in attempts to queue tasks
    into the later work queue, triggering a use-after-free with a trace like
    the following:
    
    [23114.613543] general protection fault: 0000 [#1] PREEMPT SMP
    [23114.614442] Modules linked in: dm_thin_pool dm_persistent_data dm_bio_prison dm_bufio libcrc32c btrfs xor raid6_pq dm_flakey dm_mod crc32c_generic
    acpi_cpufreq tpm_tis tpm_tis_core tpm ppdev parport_pc parport i2c_piix4 processor sg evdev i2c_core psmouse pcspkr serio_raw button loop autofs4 ext4 crc16
    jbd2 mbcache sr_mod cdrom sd_mod ata_generic virtio_scsi ata_piix virtio_pci libata virtio_ring virtio e1000 scsi_mod floppy [last unloaded: scsi_debug]
    [23114.616932] CPU: 9 PID: 4537 Comm: kworker/u32:8 Not tainted 4.9.0-rc7-btrfs-next-36+ #1
    [23114.616932] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.1-0-gb3ef39f-prebuilt.qemu-project.org 04/01/2014
    [23114.616932] Workqueue: btrfs-cache btrfs_cache_helper [btrfs]
    [23114.616932] task: ffff880221d45780 task.stack: ffffc9000bc50000
    [23114.616932] RIP: 0010:[<ffffffffa037c1bf>]  [<ffffffffa037c1bf>] btrfs_queue_work+0x2c/0x190 [btrfs]
    [23114.616932] RSP: 0018:ffff88023f443d60  EFLAGS: 00010246
    [23114.616932] RAX: 0000000000000000 RBX: 6b6b6b6b6b6b6b6b RCX: 0000000000000102
    [23114.616932] RDX: ffffffffa0419000 RSI: ffff88011df534f0 RDI: ffff880101f01c00
    [23114.616932] RBP: ffff88023f443d80 R08: 00000000000f7000 R09: 000000000000ffff
    [23114.616932] R10: ffff88023f443d48 R11: 0000000000001000 R12: ffff88011df534f0
    [23114.616932] R13: ffff880135963868 R14: 0000000000001000 R15: 0000000000001000
    [23114.616932] FS:  0000000000000000(0000) GS:ffff88023f440000(0000) knlGS:0000000000000000
    [23114.616932] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [23114.616932] CR2: 00007f0fb9f8e520 CR3: 0000000001a0b000 CR4: 00000000000006e0
    [23114.616932] Stack:
    [23114.616932]  ffff880101f01c00 ffff88011df534f0 ffff880135963868 0000000000001000
    [23114.616932]  ffff88023f443da0 ffffffffa03470af ffff880149b37200 ffff880135963868
    [23114.616932]  ffff88023f443db8 ffffffff8125293c ffff880149b37200 ffff88023f443de0
    [23114.616932] Call Trace:
    [23114.616932]  <IRQ> [23114.616932]  [<ffffffffa03470af>] end_workqueue_bio+0xd5/0xda [btrfs]
    [23114.616932]  [<ffffffff8125293c>] bio_endio+0x54/0x57
    [23114.616932]  [<ffffffffa0377929>] btrfs_end_bio+0xf7/0x106 [btrfs]
    [23114.616932]  [<ffffffff8125293c>] bio_endio+0x54/0x57
    [23114.616932]  [<ffffffff8125955f>] blk_update_request+0x21a/0x30f
    [23114.616932]  [<ffffffffa0022316>] scsi_end_request+0x31/0x182 [scsi_mod]
    [23114.616932]  [<ffffffffa00235fc>] scsi_io_completion+0x1ce/0x4c8 [scsi_mod]
    [23114.616932]  [<ffffffffa001ba9d>] scsi_finish_command+0x104/0x10d [scsi_mod]
    [23114.616932]  [<ffffffffa002311f>] scsi_softirq_done+0x101/0x10a [scsi_mod]
    [23114.616932]  [<ffffffff8125fbd9>] blk_done_softirq+0x82/0x8d
    [23114.616932]  [<ffffffff814c8a4b>] __do_softirq+0x1ab/0x412
    [23114.616932]  [<ffffffff8105b01d>] irq_exit+0x49/0x99
    [23114.616932]  [<ffffffff81035135>] smp_call_function_single_interrupt+0x24/0x26
    [23114.616932]  [<ffffffff814c7ec9>] call_function_single_interrupt+0x89/0x90
    [23114.616932]  <EOI> [23114.616932]  [<ffffffffa0023262>] ? scsi_request_fn+0x13a/0x2a1 [scsi_mod]
    [23114.616932]  [<ffffffff814c5966>] ? _raw_spin_unlock_irq+0x2c/0x4a
    [23114.616932]  [<ffffffff814c596c>] ? _raw_spin_unlock_irq+0x32/0x4a
    [23114.616932]  [<ffffffff814c5966>] ? _raw_spin_unlock_irq+0x2c/0x4a
    [23114.616932]  [<ffffffffa0023262>] scsi_request_fn+0x13a/0x2a1 [scsi_mod]
    [23114.616932]  [<ffffffff8125590e>] __blk_run_queue_uncond+0x22/0x2b
    [23114.616932]  [<ffffffff81255930>] __blk_run_queue+0x19/0x1b
    [23114.616932]  [<ffffffff8125ab01>] blk_queue_bio+0x268/0x282
    [23114.616932]  [<ffffffff81258f44>] generic_make_request+0xbd/0x160
    [23114.616932]  [<ffffffff812590e7>] submit_bio+0x100/0x11d
    [23114.616932]  [<ffffffff81298603>] ? __this_cpu_preempt_check+0x13/0x15
    [23114.616932]  [<ffffffff812a1805>] ? __percpu_counter_add+0x8e/0xa7
    [23114.616932]  [<ffffffffa03bfd47>] btrfsic_submit_bio+0x1a/0x1d [btrfs]
    [23114.616932]  [<ffffffffa0377db2>] btrfs_map_bio+0x1f4/0x26d [btrfs]
    [23114.616932]  [<ffffffffa0348a33>] btree_submit_bio_hook+0x74/0xbf [btrfs]
    [23114.616932]  [<ffffffffa03489bf>] ? btrfs_wq_submit_bio+0x160/0x160 [btrfs]
    [23114.616932]  [<ffffffffa03697a9>] submit_one_bio+0x6b/0x89 [btrfs]
    [23114.616932]  [<ffffffffa036f5be>] read_extent_buffer_pages+0x170/0x1ec [btrfs]
    [23114.616932]  [<ffffffffa03471fa>] ? free_root_pointers+0x64/0x64 [btrfs]
    [23114.616932]  [<ffffffffa0348adf>] readahead_tree_block+0x3f/0x4c [btrfs]
    [23114.616932]  [<ffffffffa032e115>] read_block_for_search.isra.20+0x1ce/0x23d [btrfs]
    [23114.616932]  [<ffffffffa032fab8>] btrfs_search_slot+0x65f/0x774 [btrfs]
    [23114.616932]  [<ffffffffa036eff1>] ? free_extent_buffer+0x73/0x7e [btrfs]
    [23114.616932]  [<ffffffffa0331ba4>] btrfs_next_old_leaf+0xa1/0x33c [btrfs]
    [23114.616932]  [<ffffffffa0331e4f>] btrfs_next_leaf+0x10/0x12 [btrfs]
    [23114.616932]  [<ffffffffa0336aa6>] caching_thread+0x22d/0x416 [btrfs]
    [23114.616932]  [<ffffffffa037bce9>] btrfs_scrubparity_helper+0x187/0x3b6 [btrfs]
    [23114.616932]  [<ffffffffa037c036>] btrfs_cache_helper+0xe/0x10 [btrfs]
    [23114.616932]  [<ffffffff8106cf96>] process_one_work+0x273/0x4e4
    [23114.616932]  [<ffffffff8106d6db>] worker_thread+0x1eb/0x2ca
    [23114.616932]  [<ffffffff8106d4f0>] ? rescuer_thread+0x2b6/0x2b6
    [23114.616932]  [<ffffffff81072a81>] kthread+0xd5/0xdd
    [23114.616932]  [<ffffffff810729ac>] ? __kthread_unpark+0x5a/0x5a
    [23114.616932]  [<ffffffff814c6257>] ret_from_fork+0x27/0x40
    [23114.616932] Code: 1f 44 00 00 55 48 89 e5 41 56 41 55 41 54 53 49 89 f4 48 8b 46 70 a8 04 74 09 48 8b 5f 08 48 85 db 75 03 48 8b 1f 49 89 5c 24 68 <83> 7b
    64 ff 74 04 f0 ff 43 58 49 83 7c 24 08 00 74 2c 4c 8d 6b
    [23114.616932] RIP  [<ffffffffa037c1bf>] btrfs_queue_work+0x2c/0x190 [btrfs]
    [23114.616932]  RSP <ffff88023f443d60>
    [23114.689493] ---[ end trace 6e48b6bc707ca34b ]---
    [23114.690166] Kernel panic - not syncing: Fatal exception in interrupt
    [23114.691283] Kernel Offset: disabled
    [23114.691918] ---[ end Kernel panic - not syncing: Fatal exception in interrupt
    
    The following diagram shows the sequence of operations that lead to the
    use-after-free problem from the above trace:
    
            CPU 1                               CPU 2                                     CPU 3
    
                                           caching_thread()
     close_ctree()
       btrfs_stop_all_workers()
         btrfs_destroy_workqueue(
          fs_info->endio_meta_workers)
    
                                             btrfs_search_slot()
                                              read_block_for_search()
                                               readahead_tree_block()
                                                read_extent_buffer_pages()
                                                 submit_one_bio()
                                                  btree_submit_bio_hook()
                                                   btrfs_bio_wq_end_io()
                                                    --> sets the bio's
                                                        bi_end_io callback
                                                        to end_workqueue_bio()
                                                   --> bio is submitted
                                                                                      bio completes
                                                                                      and its bi_end_io callback
                                                                                      is invoked
                                                                                       --> end_workqueue_bio()
                                                                                           --> attempts to queue
                                                                                               a task on fs_info->endio_meta_workers
    
         btrfs_destroy_workqueue(
          fs_info->caching_workers)
    
    So fix this by destroying the queues used for metadata I/O tasks only
    after destroying all the other queues.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Liu Bo <bo.li.liu@oracle.com>

commits)
      bpf: Fix bpf_xdp_event_output
      net/mlx4_en: Use __skb_fill_page_desc()
      net/mlx4_core: Use cq quota in SRIOV when creating completion EQs
      net/mlx4_core: Fix VF overwrite of module param which disables DMFS on new probed PFs
      net/mlx4: Spoofcheck and zero MAC can't coexist
      net/mlx4: Change ENOTSUPP to EOPNOTSUPP
      uapi: fix linux/rds.h userspace compilation errors
      uapi: fix linux/seg6.h and linux/seg6_iptunnel.h userspace compilation errors
      lib: Remove string from parman config selection
      forcedeth: Remove return from a void function
      bpf: fix spelling mistake: "proccessed" -> "processed"
      uapi: fix linux/llc.h userspace compilation error
      uapi: fix linux/ip6_tunnel.h userspace compilation errors
      net/mlx5e: Fix wrong CQE decompression
      net/mlx5e: Update MPWQE stride size when modifying CQE compress state
      net/mlx5e: Fix broken CQE compression initialization
      net/mlx5e: Do not reduce LRO WQE size when not using build_skb
      net/mlx5e: Register/unregister vport representors on interface attach/detach
      net/mlx5e: s390 system compilation fix
      tcp: account for ts offset only if tsecr not zero
      ...

commit ec7cb62d18d854ea09df8b7194e7e710985f8b9a
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Wed Feb 22 12:35:27 2017 +0300

    net/dccp: fix use after free in tw_timer_handler()
    
    DCCP doesn't purge timewait sockets on network namespace shutdown.
    So, after net namespace destroyed we could still have an active timer
    which will trigger use after free in tw_timer_handler():
    
        BUG: KASAN: use-after-free in tw_timer_handler+0x4a/0xa0 at addr ffff88010e0d1e10
        Read of size 8 by task swapper/1/0
        Call Trace:
         __asan_load8+0x54/0x90
         tw_timer_handler+0x4a/0xa0
         call_timer_fn+0x127/0x480
         expire_timers+0x1db/0x2e0
         run_timer_softirq+0x12f/0x2a0
         __do_softirq+0x105/0x5b4
         irq_exit+0xdd/0xf0
         smp_apic_timer_interrupt+0x57/0x70
         apic_timer_interrupt+0x90/0xa0
    
        Object at ffff88010e0d1bc0, in cache net_namespace size: 6848
        Allocated:
         save_stack_trace+0x1b/0x20
         kasan_kmalloc+0xee/0x180
         kasan_slab_alloc+0x12/0x20
         kmem_cache_alloc+0x134/0x310
         copy_net_ns+0x8d/0x280
         create_new_namespaces+0x23f/0x340
         unshare_nsproxy_namespaces+0x75/0xf0
         SyS_unshare+0x299/0x4f0
         entry_SYSCALL_64_fastpath+0x18/0xad
        Freed:
         save_stack_trace+0x1b/0x20
         kasan_slab_free+0xae/0x180
         kmem_cache_free+0xb4/0x350
         net_drop_ns+0x3f/0x50
         cleanup_net+0x3df/0x450
         process_one_work+0x419/0xbb0
         worker_thread+0x92/0x850
         kthread+0x192/0x1e0
         ret_from_fork+0x2e/0x40
    
    Add .exit_batch hook to dccp_v4_ops()/dccp_v6_ops() which will purge
    timewait sockets on net namespace destruction and prevent above issue.
    
    Fixes: f2bf415cfed7 ("mib: add net to NET_ADD_STATS_BH")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Acked-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      [media] mtk-vcodec: fix build warnings without DEBUG
      [media] zd1301: fix building interface driver without demodulator
      [media] usbtv: add sharpness control
      [media] cxusb: Use a dma capable buffer also for reading
      [media] ttpci: address stringop overflow warning
      [media] dvb-usb-v2: avoid use-after-free
      [media] add Hama Hybrid DVB-T Stick support
      [media] et8ek8: Fix compiler / Coccinelle warnings
      [media] media: fix semicolon.cocci warnings
      [media] media: exynos4-is: add flags to dummy Exynos IS i2c adapter
      [media] v4l: of: check for unique lanes in data-lanes and clock-lanes
      [media] coda/imx-vdoa: constify structs
      [media] st-delta: debug: trace stream/frame information & summary
      [media] st-delta: add mjpeg support
      [media] st-delta: EOS (End Of Stream) support
      [media] st-delta: rpmsg ipc support
      [media] st-delta: add memory allocator helper functions
      [media] st-delta: STiH4xx multi-format video decoder v4l2 driver
      [media] MAINTAINERS: add st-delta driver
      [media] ARM: multi_v7_defconfig: enable STMicroelectronics DELTA Support
      ...

commit 3089c1df10e2931b1d72d2ffa7d86431084c86b3
Author: Nicolai Hähnle <nicolai.haehnle@amd.com>
Date:   Sat Feb 18 22:59:56 2017 +0100

    drm/ttm: fix use-after-free races in vm fault handling
    
    The vm fault handler relies on the fact that the VMA owns a reference
    to the BO. However, once mmap_sem is released, other tasks are free to
    destroy the VMA, which can lead to the BO being freed. Fix two code
    paths where that can happen, both related to vm fault retries.
    
    Found via a lock debugging warning which flagged &bo->wu_mutex as
    locked while being destroyed.
    
    Fixes: cbe12e74ee4e ("drm/ttm: Allow vm fault retries")
    Signed-off-by: Nicolai Hähnle <nicolai.haehnle@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e623a9e9dec29ae811d11f83d0074ba254aba374
Author: Maxime Jayat <maxime.jayat@mobile-devices.fr>
Date:   Tue Feb 21 18:35:51 2017 +0100

    net: socket: fix recvmmsg not returning error from sock_error
    
    Commit 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path"),
    changed the exit path of recvmmsg to always return the datagrams
    variable and modified the error paths to set the variable to the error
    code returned by recvmsg if necessary.
    
    However in the case sock_error returned an error, the error code was
    then ignored, and recvmmsg returned 0.
    
    Change the error path of recvmmsg to correctly return the error code
    of sock_error.
    
    The bug was triggered by using recvmmsg on a CAN interface which was
    not up. Linux 4.6 and later return 0 in this case while earlier
    releases returned -ENETDOWN.
    
    Fixes: 34b88a68f26a ("net: Fix use after free in the recvmmsg exit path")
    Signed-off-by: Maxime Jayat <maxime.jayat@mobile-devices.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      ext4: rename EXT4_IOC_GOINGDOWN to EXT4_IOC_SHUTDOWN
      ext4: fix fencepost in s_first_meta_bg validation
      ext4: don't BUG when truncating encrypted inodes on the orphan list
      ext4: do not use stripe_width if it is not set
      ext4: fix stripe-unaligned allocations
      dax: assert that i_rwsem is held exclusive for writes
      ext4: fix DAX write locking
      ext4: add EXT4_IOC_GOINGDOWN ioctl
      ext4: add shutdown bit and check for it
      ext4: rename s_resize_flags to s_ext4_flags
      ext4: return EROFS if device is r/o and journal replay is needed
      ext4: preserve the needs_recovery flag when the journal is aborted
      jbd2: don't leak modified metadata buffers on an aborted journal
      ext4: fix inline data error paths
      ext4: move halfmd4 into hash.c directly
      ext4: fix use-after-iput when fscrypt contexts are inconsistent
      jbd2: fix use after free in kjournald2()
      ext4: fix data corruption in data=journal mode
      ext4: trim allocation requests to group size
      ext4: replace BUG_ON with WARN_ON in mb_find_extent()
      ...

commit af5f42a7e426a87bfa69adc9b9d8930385a1ddf6
Author: Shaohua Li <shli@fb.com>
Date:   Sun Feb 19 22:41:27 2017 -0800

    md/raid1: fix a use-after-free bug
    
    Commit fd76863 (RAID1: a new I/O barrier implementation to remove resync
    window) introduces a user-after-free bug.
    
    Signed-off-by: Shaohua Li <shli@fb.com>

commit ca33fafdc9020720a9773fd416c94fe68aef7220
Author: Martin Peres <martin.peres@free.fr>
Date:   Wed Jan 18 23:49:21 2017 +0200

    drm/nouveau/drm/nouveau/led: prevent a possible use-after-free
    
    If the led class registration fails, we free drm->led but do not reset
    it to NULL, which means that the suspend/resume/fini function will act
    as if everything went well in init() and will likely crash the kernel.
    
    This patch adds the missing drm->led = NULL.
    
    Reported-by: Emmanuel Pescosta <emmanuelpescosta099@gmail.com>
    Signed-off-by: Martin Peres <martin.peres@free.fr>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 6ba4d2722d06960102c981322035239cd66f7316
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Feb 8 20:30:56 2017 +0530

    fuse: fix use after free issue in fuse_dev_do_read()
    
    There is a potential race between fuse_dev_do_write()
    and request_wait_answer() contexts as shown below:
    
    TASK 1:
    __fuse_request_send():
      |--spin_lock(&fiq->waitq.lock);
      |--queue_request();
      |--spin_unlock(&fiq->waitq.lock);
      |--request_wait_answer():
           |--if (test_bit(FR_SENT, &req->flags))
           <gets pre-empted after it is validated true>
                                       TASK 2:
                                       fuse_dev_do_write():
                                         |--clears bit FR_SENT,
                                         |--request_end():
                                            |--sets bit FR_FINISHED
                                            |--spin_lock(&fiq->waitq.lock);
                                            |--list_del_init(&req->intr_entry);
                                            |--spin_unlock(&fiq->waitq.lock);
                                            |--fuse_put_request();
           |--queue_interrupt();
           <request gets queued to interrupts list>
                |--wake_up_locked(&fiq->waitq);
           |--wait_event_freezable();
           <as FR_FINISHED is set, it returns and then
           the caller frees this request>
    
    Now, the next fuse_dev_do_read(), see interrupts list is not empty
    and then calls fuse_read_interrupt() which tries to access the request
    which is already free'd and gets the below crash:
    
    [11432.401266] Unable to handle kernel paging request at virtual address
    6b6b6b6b6b6b6b6b
    ...
    [11432.418518] Kernel BUG at ffffff80083720e0
    [11432.456168] PC is at __list_del_entry+0x6c/0xc4
    [11432.463573] LR is at fuse_dev_do_read+0x1ac/0x474
    ...
    [11432.679999] [<ffffff80083720e0>] __list_del_entry+0x6c/0xc4
    [11432.687794] [<ffffff80082c65e0>] fuse_dev_do_read+0x1ac/0x474
    [11432.693180] [<ffffff80082c6b14>] fuse_dev_read+0x6c/0x78
    [11432.699082] [<ffffff80081d5638>] __vfs_read+0xc0/0xe8
    [11432.704459] [<ffffff80081d5efc>] vfs_read+0x90/0x108
    [11432.709406] [<ffffff80081d67f0>] SyS_read+0x58/0x94
    
    As FR_FINISHED bit is set before deleting the intr_entry with input
    queue lock in request completion path, do the testing of this flag and
    queueing atomically with the same lock in queue_interrupt().
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: fd22d62ed0c3 ("fuse: no fc->lock for iqueue parts")
    Cc: <stable@vger.kernel.org> # 4.2+

commit 671889e6740ac7ab84d1420525b50d1d47001102
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Fri Dec 2 12:33:00 2016 -0800

    i40e: avoid race condition when sending filters to firmware for addition
    
    Refactor how we add new filters to firmware to avoid a race condition
    that can occur due to removing filters from the hash temporarily.
    
    To understand the race condition, suppose that you have a number of MAC
    filters, but have not yet added any VLANs. Now, add two VLANs in rapid
    succession. A possible resulting flow would look something like the
    following:
    
    (1) lock hash for add VLAN
    (2) add the new MAC/VLAN combos for each current MAC filter
    (3) unlock hash
    (4) lock hash for filter sync
    (5) notice that we have a VLAN, so prepare to update all MAC filters
        with VLAN=-1 to be VLAN=0.
    (6) move NEW and REMOVE filters to temporary list
    (7) unlock hash
    (8) lock hash for add VLAN
    (9) add new MAC/VLAN combos. Notice that no MAC filters are currently in
        the hash list, so we don't add any VLANs <--- BUG!
    (10) unlock hash
    (11) sync the temporary lists to firmware
    (12) lock hash for post-sync
    (13) move the temporary elements back to the main list
    ....
    
    Because we take filters out of the main hash into temporary lists, we
    introduce a narrow window where it is possible that other callers to the
    list will not see some of the filters which were previously added but
    have not yet been finalized. This results in sometimes dropping VLAN
    additions, and could also result in failing to add a MAC address on the
    newly added VLAN.
    
    One obvious way to avoid this race condition would be to lock the entire
    firmware process. Unfortunately this does not work because adminq
    firmware commands take a mutex which results in a sleep while atomic
    BUG(). So, we can't use the simplest approach.
    
    An alternative approach is to simply not remove the filters from the
    hash list while adding. Instead, add an i40e_new_mac_filter structure
    which we will use to track added filters. This avoids the need to remove
    the filter from the hash list. We'll store a pointer to the original
    i40e_mac_filter, along with our own copy of the state.
    
    We won't update the state directly, so as to avoid race with other code
    that may modify the state while under the lock. We are safe to read
    f->macaddr and f->vlan since these only change in two locations. The
    first is on filter creation, which must have already occurred. The
    second is inside i40e_correct_vlan_filters which was previously run
    after creation of this object and can't be run again until after. Thus,
    we should be safe to read the MAC address and VLAN while outside the
    lock.
    
    We also aren't going to run into a use-after-free issue because the only
    place where we free filters is when they are marked FAILED or when we
    remove them inside the sync subtask. Since the subtask has its own
    critical flag to prevent duplicate runs, we know this won't happen. We
    also know that the only location to transition a filter from NEW to
    FAILED is inside the subtask also, so we aren't worried about that
    either.
    
    Use the wrapper i40e_new_mac_filter for additions, and once we've
    finalized the addition to firmware, we will update the filter state
    inside a lock, and then free the wrapper structure.
    
    In order to avoid a possible race condition with filter deletion, we
    won't update the original filter state unless it is still
    I40E_FILTER_NEW when we finish the firmware sync.
    
    This approach is more complex, but avoids race conditions related to
    filters being temporarily removed from the list. We do not need the same
    behavior for deletion because we always unconditionally removed the
    filters from the list regardless of the firmware status.
    
    Change-Id: I14b74bc2301f8e69433fbe77ebca532db20c5317
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit 87b60cfacf9f17cf71933c6e33b66e68160af71d
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Feb 10 10:31:49 2017 -0800

    net_sched: fix error recovery at qdisc creation
    
    Dmitry reported uses after free in qdisc code [1]
    
    The problem here is that ops->init() can return an error.
    
    qdisc_create_dflt() then call ops->destroy(),
    while qdisc_create() does _not_ call it.
    
    Four qdisc chose to call their own ops->destroy(), assuming their caller
    would not.
    
    This patch makes sure qdisc_create() calls ops->destroy()
    and fixes the four qdisc to avoid double free.
    
    [1]
    BUG: KASAN: use-after-free in mq_destroy+0x242/0x290 net/sched/sch_mq.c:33 at addr ffff8801d415d440
    Read of size 8 by task syz-executor2/5030
    CPU: 0 PID: 5030 Comm: syz-executor2 Not tainted 4.3.5-smp-DEV #119
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
     0000000000000046 ffff8801b435b870 ffffffff81bbbed4 ffff8801db000400
     ffff8801d415d440 ffff8801d415dc40 ffff8801c4988510 ffff8801b435b898
     ffffffff816682b1 ffff8801b435b928 ffff8801d415d440 ffff8801c49880c0
    Call Trace:
     [<ffffffff81bbbed4>] __dump_stack lib/dump_stack.c:15 [inline]
     [<ffffffff81bbbed4>] dump_stack+0x6c/0x98 lib/dump_stack.c:51
     [<ffffffff816682b1>] kasan_object_err+0x21/0x70 mm/kasan/report.c:158
     [<ffffffff81668524>] print_address_description mm/kasan/report.c:196 [inline]
     [<ffffffff81668524>] kasan_report_error+0x1b4/0x4b0 mm/kasan/report.c:285
     [<ffffffff81668953>] kasan_report mm/kasan/report.c:305 [inline]
     [<ffffffff81668953>] __asan_report_load8_noabort+0x43/0x50 mm/kasan/report.c:326
     [<ffffffff82527b02>] mq_destroy+0x242/0x290 net/sched/sch_mq.c:33
     [<ffffffff82524bdd>] qdisc_destroy+0x12d/0x290 net/sched/sch_generic.c:953
     [<ffffffff82524e30>] qdisc_create_dflt+0xf0/0x120 net/sched/sch_generic.c:848
     [<ffffffff8252550d>] attach_default_qdiscs net/sched/sch_generic.c:1029 [inline]
     [<ffffffff8252550d>] dev_activate+0x6ad/0x880 net/sched/sch_generic.c:1064
     [<ffffffff824b1db1>] __dev_open+0x221/0x320 net/core/dev.c:1403
     [<ffffffff824b24ce>] __dev_change_flags+0x15e/0x3e0 net/core/dev.c:6858
     [<ffffffff824b27de>] dev_change_flags+0x8e/0x140 net/core/dev.c:6926
     [<ffffffff824f5bf6>] dev_ifsioc+0x446/0x890 net/core/dev_ioctl.c:260
     [<ffffffff824f61fa>] dev_ioctl+0x1ba/0xb80 net/core/dev_ioctl.c:546
     [<ffffffff82430509>] sock_do_ioctl+0x99/0xb0 net/socket.c:879
     [<ffffffff82430d30>] sock_ioctl+0x2a0/0x390 net/socket.c:958
     [<ffffffff816f3b68>] vfs_ioctl fs/ioctl.c:44 [inline]
     [<ffffffff816f3b68>] do_vfs_ioctl+0x8a8/0xe50 fs/ioctl.c:611
     [<ffffffff816f41a4>] SYSC_ioctl fs/ioctl.c:626 [inline]
     [<ffffffff816f41a4>] SyS_ioctl+0x94/0xc0 fs/ioctl.c:617
     [<ffffffff8123e357>] entry_SYSCALL_64_fastpath+0x12/0x17
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1e38da300e1e395a15048b0af1e5305bd91402f6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 31 15:24:03 2017 +0100

    timerfd: Protect the might cancel mechanism proper
    
    The handling of the might_cancel queueing is not properly protected, so
    parallel operations on the file descriptor can race with each other and
    lead to list corruptions or use after free.
    
    Protect the context for these operations with a seperate lock.
    
    The wait queue lock cannot be reused for this because that would create a
    lock inversion scenario vs. the cancel lock. Replacing might_cancel with an
    atomic (atomic_t or atomic bit) does not help either because it still can
    race vs. the actual list operation.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: "linux-fsdevel@vger.kernel.org"
    Cc: syzkaller <syzkaller@googlegroups.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: linux-fsdevel@vger.kernel.org
    Link: http://lkml.kernel.org/r/alpine.DEB.2.20.1701311521430.3457@nanos
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit f405df5de3170c00e5c54f8b7cf4766044a032ba
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Nov 14 18:06:19 2016 +0100

    refcount_t: Introduce a special purpose refcount type
    
    Provide refcount_t, an atomic_t like primitive built just for
    refcounting.
    
    It provides saturation semantics such that overflow becomes impossible
    and thereby 'spurious' use-after-free is avoided.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 2dfa6688aafdc3f74efeb1cf05fb871465d67f79
Author: Steffen Maier <maier@linux.vnet.ibm.com>
Date:   Wed Feb 8 15:34:22 2017 +0100

    scsi: zfcp: fix use-after-free by not tracing WKA port open/close on failed send
    
    Dan Carpenter kindly reported:
    <quote>
    The patch d27a7cb91960: "zfcp: trace on request for open and close of
    WKA port" from Aug 10, 2016, leads to the following static checker
    warning:
    
            drivers/s390/scsi/zfcp_fsf.c:1615 zfcp_fsf_open_wka_port()
            warn: 'req' was already freed.
    
    drivers/s390/scsi/zfcp_fsf.c
      1609          zfcp_fsf_start_timer(req, ZFCP_FSF_REQUEST_TIMEOUT);
      1610          retval = zfcp_fsf_req_send(req);
      1611          if (retval)
      1612                  zfcp_fsf_req_free(req);
                                              ^^^
    Freed.
    
      1613  out:
      1614          spin_unlock_irq(&qdio->req_q_lock);
      1615          if (req && !IS_ERR(req))
      1616                  zfcp_dbf_rec_run_wka("fsowp_1", wka_port, req->req_id);
                                                                      ^^^^^^^^^^^
    Use after free.
    
      1617          return retval;
      1618  }
    
    Same thing for zfcp_fsf_close_wka_port() as well.
    </quote>
    
    Rather than relying on req being NULL (or ERR_PTR) for all cases where
    we don't want to trace or should not trace,
    simply check retval which is unconditionally initialized with -EIO != 0
    and it can only become 0 on successful retval = zfcp_fsf_req_send(req).
    With that we can also remove the then again unnecessary unconditional
    initialization of req which was introduced with that earlier commit.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Suggested-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Fixes: d27a7cb91960 ("zfcp: trace on request for open and close of WKA port")
    Cc: <stable@vger.kernel.org> #2.6.38+
    Reviewed-by: Benjamin Block <bblock@linux.vnet.ibm.com>
    Reviewed-by: Jens Remus <jremus@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 005145378c9ad7575a01b6ce1ba118fb427f583a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Feb 2 12:36:01 2017 -0200

    [media] dvb-usb-v2: avoid use-after-free
    
    I ran into a stack frame size warning because of the on-stack copy of
    the USB device structure:
    
    drivers/media/usb/dvb-usb-v2/dvb_usb_core.c: In function 'dvb_usbv2_disconnect':
    drivers/media/usb/dvb-usb-v2/dvb_usb_core.c:1029:1: error: the frame size of 1104 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]
    
    Copying a device structure like this is wrong for a number of other reasons
    too aside from the possible stack overflow. One of them is that the
    dev_info() call will print the name of the device later, but AFAICT
    we have only copied a pointer to the name earlier and the actual name
    has been freed by the time it gets printed.
    
    This removes the on-stack copy of the device and instead copies the
    device name using kstrdup(). I'm ignoring the possible failure here
    as both printk() and kfree() are able to deal with NULL pointers.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 4842e98f26dd80be3623c4714a244ba52ea096a8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Feb 8 12:35:39 2017 +0100

    ALSA: seq: Fix race at creating a queue
    
    When a sequencer queue is created in snd_seq_queue_alloc(),it adds the
    new queue element to the public list before referencing it.  Thus the
    queue might be deleted before the call of snd_seq_queue_use(), and it
    results in the use-after-free error, as spotted by syzkaller.
    
    The fix is to reference the queue object at the right time.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 5351fbb1bf1413f6024892093528280769ca852f
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Thu Jan 26 17:32:11 2017 +0300

    drm/i915: fix use-after-free in page_flip_completed()
    
    page_flip_completed() dereferences 'work' variable after executing
    queue_work(). This is not safe as the 'work' item might be already freed
    by queued work:
    
        BUG: KASAN: use-after-free in page_flip_completed+0x3ff/0x490 at addr ffff8803dc010f90
        Call Trace:
         __asan_report_load8_noabort+0x59/0x80
         page_flip_completed+0x3ff/0x490
         intel_finish_page_flip_mmio+0xe3/0x130
         intel_pipe_handle_vblank+0x2d/0x40
         gen8_irq_handler+0x4a7/0xed0
         __handle_irq_event_percpu+0xf6/0x860
         handle_irq_event_percpu+0x6b/0x160
         handle_irq_event+0xc7/0x1b0
         handle_edge_irq+0x1f4/0xa50
         handle_irq+0x41/0x70
         do_IRQ+0x9a/0x200
         common_interrupt+0x89/0x89
    
        Freed:
         kfree+0x113/0x4d0
         intel_unpin_work_fn+0x29a/0x3b0
         process_one_work+0x79e/0x1b70
         worker_thread+0x611/0x1460
         kthread+0x241/0x3a0
         ret_from_fork+0x27/0x40
    
    Move queue_work() after trace_i915_flip_complete() to fix this.
    
    Fixes: e5510fac98a7 ("drm/i915: add tracepoints for flip requests & completions")
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: <stable@vger.kernel.org> # v2.6.36+
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170126143211.24013-1-aryabinin@virtuozzo.com
    (cherry picked from commit 05c41f926fcc7ef838c80a6a99d84f67b4e0b824)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commits)
      sctp: check af before verify address in sctp_addr_id2transport
      sctp: avoid BUG_ON on sctp_wait_for_sndbuf
      mlx4: Invoke softirqs after napi_reschedule
      udp: properly cope with csum errors
      catc: Use heap buffer for memory size test
      catc: Combine failure cleanup code in catc_probe()
      rtl8150: Use heap buffers for all register access
      pegasus: Use heap buffers for all register access
      macvtap: read vnet_hdr_size once
      tun: read vnet_hdr_sz once
      tcp: avoid infinite loop in tcp_splice_read()
      hns: avoid stack overflow with CONFIG_KASAN
      ipv6: Fix IPv6 packet loss in scenarios involving roaming + snooping switches
      ipv6: tcp: add a missing tcp_v6_restore_cb()
      nl80211: Fix mesh HT operation check
      mac80211: Fix adding of mesh vendor IEs
      mac80211: Allocate a sync skcipher explicitly for FILS AEAD
      mac80211: Fix FILS AEAD protection in Association Request frame
      ip6_gre: fix ip6gre_err() invalid reads
      netlabel: out of bound access in cipso_v4_validate()
      ...

commit ebf6c9cb23d7e56eec8575a88071dec97ad5c6e2
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Feb 5 20:23:22 2017 -0800

    ipv6: tcp: add a missing tcp_v6_restore_cb()
    
    Dmitry reported use-after-free in ip6_datagram_recv_specific_ctl()
    
    A similar bug was fixed in commit 8ce48623f0cf ("ipv6: tcp: restore
    IP6CB for pktoptions skbs"), but I missed another spot.
    
    tcp_v6_syn_recv_sock() can indeed set np->pktoptions from ireq->pktopts
    
    Fixes: 971f10eca186 ("tcp: better TCP_SKB_CB layout to reduce cache line misses")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dbfcef6b0f4012c57bc0b6e0e660d5ed12a5eaed
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Wed Feb 1 20:49:35 2017 -0500

    jbd2: fix use after free in kjournald2()
    
    Below is the synchronization issue between unmount and kjournald2
    contexts, which results into use after free issue in kjournald2().
    Fix this issue by using journal->j_state_lock to synchronize the
    wait_event() done in journal_kill_thread() and the wake_up() done
    in kjournald2().
    
    TASK 1:
    umount cmd:
       |--jbd2_journal_destroy() {
           |--journal_kill_thread() {
                write_lock(&journal->j_state_lock);
                journal->j_flags |= JBD2_UNMOUNT;
                ...
                write_unlock(&journal->j_state_lock);
                wake_up(&journal->j_wait_commit);      TASK 2 wakes up here:
                                                       kjournald2() {
                                                         ...
                                                         checks JBD2_UNMOUNT flag and calls goto end-loop;
                                                         ...
                                                         end_loop:
                                                           write_unlock(&journal->j_state_lock);
                                                           journal->j_task = NULL; --> If this thread gets
                                                           pre-empted here, then TASK 1 wait_event will
                                                           exit even before this thread is completely
                                                           done.
                wait_event(journal->j_wait_done_commit, journal->j_task == NULL);
                ...
                write_lock(&journal->j_state_lock);
                write_unlock(&journal->j_state_lock);
              }
           |--kfree(journal);
         }
    }
                                                           wake_up(&journal->j_wait_done_commit); --> this step
                                                           now results into use after free issue.
                                                       }
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>

commit cdaf25dfc058ee6f7a7b2e2353de00fa288c0cd4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 30 10:55:04 2017 +0100

    smc: some potential use after free bugs
    
    Say we got really unlucky and these failed on the last iteration, then
    it could lead to a use after free bug.
    
    Fixes: cd6851f30386 ("smc: remote memory buffers (RMBs)")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ursula Braun <ubraun@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a76a82a3e38c8d3fb6499e3dfaeb0949241ab588
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Jan 26 16:39:55 2017 +0100

    perf/core: Fix use-after-free bug
    
    Dmitry reported a KASAN use-after-free on event->group_leader.
    
    It turns out there's a hole in perf_remove_from_context() due to
    event_function_call() not calling its function when the task
    associated with the event is already dead.
    
    In this case the event will have been detached from the task, but the
    grouping will have been retained, such that group operations might
    still work properly while there are live child events etc.
    
    This does however mean that we can miss a perf_group_detach() call
    when the group decomposes, this in turn can then lead to
    use-after-free.
    
    Fix it by explicitly doing the group detach if its still required.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org # v4.5+
    Cc: syzkaller <syzkaller@googlegroups.com>
    Fixes: 63b6da39bb38 ("perf: Fix perf_event_exit_task() race")
    Link: http://lkml.kernel.org/r/20170126153955.GD6515@twins.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 24c2503255d35c269b67162c397a1a1c1e02f6ce
Author: Borislav Petkov <bp@suse.de>
Date:   Wed Jan 25 21:00:48 2017 +0100

    x86/microcode: Do not access the initrd after it has been freed
    
    When we look for microcode blobs, we first try builtin and if that
    doesn't succeed, we fallback to the initrd supplied to the kernel.
    
    However, at some point doing boot, that initrd gets jettisoned and we
    shouldn't access it anymore. But we do, as the below KASAN report shows.
    That's because find_microcode_in_initrd() doesn't check whether the
    initrd is still valid or not.
    
    So do that.
    
      ==================================================================
      BUG: KASAN: use-after-free in find_cpio_data
      Read of size 1 by task swapper/1/0
      page:ffffea0000db9d40 count:0 mapcount:0 mapping:          (null) index:0x1
      flags: 0x100000000000000()
      raw: 0100000000000000 0000000000000000 0000000000000001 00000000ffffffff
      raw: dead000000000100 dead000000000200 0000000000000000 0000000000000000
      page dumped because: kasan: bad access detected
      CPU: 1 PID: 0 Comm: swapper/1 Tainted: G        W       4.10.0-rc5-debug-00075-g2dbde22 #3
      Hardware name: Dell Inc. XPS 13 9360/0839Y6, BIOS 1.2.3 12/01/2016
      Call Trace:
       dump_stack
       ? _atomic_dec_and_lock
       ? __dump_page
       kasan_report_error
       ? pointer
       ? find_cpio_data
       __asan_report_load1_noabort
       ? find_cpio_data
       find_cpio_data
       ? vsprintf
       ? dump_stack
       ? get_ucode_user
       ? print_usage_bug
       find_microcode_in_initrd
       __load_ucode_intel
       ? collect_cpu_info_early
       ? debug_check_no_locks_freed
       load_ucode_intel_ap
       ? collect_cpu_info
       ? trace_hardirqs_on
       ? flat_send_IPI_mask_allbutself
       load_ucode_ap
       ? get_builtin_firmware
       ? flush_tlb_func
       ? do_raw_spin_trylock
       ? cpumask_weight
       cpu_init
       ? trace_hardirqs_off
       ? play_dead_common
       ? native_play_dead
       ? hlt_play_dead
       ? syscall_init
       ? arch_cpu_idle_dead
       ? do_idle
       start_secondary
       start_cpu
      Memory state around the buggy address:
       ffff880036e74f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
       ffff880036e74f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
      >ffff880036e75000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                         ^
       ffff880036e75080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
       ffff880036e75100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
      ==================================================================
    
    Reported-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Tested-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20170126165833.evjemhbqzaepirxo@pd.tnic
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 77ae9957897df86e627089688265e0db029dd0df
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Jan 27 09:40:07 2017 +0000

    drm/i915: Enable userspace to opt-out of implicit fencing
    
    Userspace is faced with a dilemma. The kernel requires implicit fencing
    to manage resource usage (we always must wait for the GPU to finish
    before releasing its PTE) and for third parties. However, userspace may
    wish to avoid this serialisation if it is either using explicit fencing
    between parties and wants more fine-grained access to buffers (e.g. it
    may partition the buffer between uses and track fences on ranges rather
    than the implicit fences tracking the whole object). It follows that
    userspace needs a mechanism to avoid the kernel's serialisation on its
    implicit fences before execbuf execution.
    
    The next question is whether this is an object, execbuf or context flag.
    Hybrid users (such as using explicit EGL_ANDROID_native_sync fencing on
    shared winsys buffers, but implicit fencing on internal surfaces)
    require a per-object level flag. Given that this flag need to be only
    set once for the lifetime of the object, this reduces the convenience of
    having an execbuf or context level flag (and avoids having multiple
    pieces of uABI controlling the same feature).
    
    Incorrect use of this flag will result in rendering corruption and GPU
    hangs - but will not result in use-after-free or similar resource
    tracking issues.
    
    Serious caveat: write ordering is not strictly correct after setting
    this flag on a render target on multiple engines. This affects all
    subsequent GEM operations (execbuf, set-domain, pread) and shared
    dma-buf operations. A fix is possible - but costly (both in terms of
    further ABI changes and runtime overhead).
    
    Testcase: igt/gem_exec_async
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Acked-by: Chad Versace <chadversary@chromium.org>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170127094008.27489-1-chris@chris-wilson.co.uk

commit 05c41f926fcc7ef838c80a6a99d84f67b4e0b824
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Thu Jan 26 17:32:11 2017 +0300

    drm/i915: fix use-after-free in page_flip_completed()
    
    page_flip_completed() dereferences 'work' variable after executing
    queue_work(). This is not safe as the 'work' item might be already freed
    by queued work:
    
        BUG: KASAN: use-after-free in page_flip_completed+0x3ff/0x490 at addr ffff8803dc010f90
        Call Trace:
         __asan_report_load8_noabort+0x59/0x80
         page_flip_completed+0x3ff/0x490
         intel_finish_page_flip_mmio+0xe3/0x130
         intel_pipe_handle_vblank+0x2d/0x40
         gen8_irq_handler+0x4a7/0xed0
         __handle_irq_event_percpu+0xf6/0x860
         handle_irq_event_percpu+0x6b/0x160
         handle_irq_event+0xc7/0x1b0
         handle_edge_irq+0x1f4/0xa50
         handle_irq+0x41/0x70
         do_IRQ+0x9a/0x200
         common_interrupt+0x89/0x89
    
        Freed:
         kfree+0x113/0x4d0
         intel_unpin_work_fn+0x29a/0x3b0
         process_one_work+0x79e/0x1b70
         worker_thread+0x611/0x1460
         kthread+0x241/0x3a0
         ret_from_fork+0x27/0x40
    
    Move queue_work() after trace_i915_flip_complete() to fix this.
    
    Fixes: e5510fac98a7 ("drm/i915: add tracepoints for flip requests & completions")
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: <stable@vger.kernel.org> # v2.6.36+
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170126143211.24013-1-aryabinin@virtuozzo.com

commit dd040b6f6d5630202e185399a2ff7ab356ed469c
Author: Matthew Wilcox <mawilcox@microsoft.com>
Date:   Tue Jan 24 15:18:16 2017 -0800

    radix-tree: fix private list warnings
    
    The newly introduced warning in radix_tree_free_nodes() was testing the
    wrong variable; it should have been 'old' instead of 'node'.
    
    Fixes: ea07b862ac8e ("mm: workingset: fix use-after-free in shadow node shrinker")
    Link: http://lkml.kernel.org/r/20170118163746.GA32495@cmpxchg.org
    Signed-off-by: Matthew Wilcox <mawilcox@microsoft.com>
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 21b995a9cb093fff33ec91d7cb3822b882a90a1e
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jan 23 16:43:05 2017 -0800

    ip6_tunnel: must reload ipv6h in ip6ip6_tnl_xmit()
    
    Since ip6_tnl_parse_tlv_enc_lim() can call pskb_may_pull(),
    we must reload any pointer that was related to skb->head
    (or skb->data), or risk use after free.
    
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Dmitry Kozlov <xeb@mail.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 690e5325b8c7d5db05fc569c0f7b888bb4248272
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Jan 24 14:50:19 2017 +0100

    block: fix use after free in __blkdev_direct_IO
    
    We can't dereference the dio structure after submitting the last bio for
    this request, as I/O completion might have happened before the code is
    run. Introduce a local is_sync variable instead.
    
    Fixes: 542ff7bf ("block: new direct I/O implementation")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reported-by: Matias Bjørling <m@bjorling.me>
    Tested-by: Matias Bjørling <m@bjorling.me>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commits)
      drm/i915: Ignore bogus plane coordinates on SKL when the plane is not visible
      drm/i915: Remove WaDisableLSQCROPERFforOCL KBL workaround.
      drm/i915/gvt: rewrite gt reset handler using new function intel_gvt_reset_vgpu_locked
      drm/i915/gvt: fix vGPU instance reuse issues by vGPU reset function
      drm/i915/gvt: introduce intel_vgpu_reset_mmio() to reset mmio space
      drm/i915/gvt: move mmio init/clean function to mmio.c
      drm/i915/gvt: introduce intel_vgpu_reset_cfg_space to reset configuration space
      drm/i915/gvt: move cfg space inititation function to cfg_space.c
      drm/i915/gvt: introuduce intel_vgpu_reset_gtt() to reset gtt
      drm/i915/gvt: introudce intel_vgpu_reset_resource() to reset vgpu resource state
      drm/i915: Fix phys pwrite for struct_mutex-less operation
      drm/i915: Clear ret before unbinding in i915_gem_evict_something()
      drm/i915/gvt: cleanup GFP flags
      drm/i915/gvt/kvmgt: return meaningful error for vgpu creating failure
      drm/i915/gvt: cleanup opregion memory allocation code
      drm/i915/gvt: destroy the allocated idr on vgpu creating failures
      drm/i915/gvt: init/destroy vgpu_idr properly
      drm/i915/gvt: dec vgpu->running_workload_num after the workload is really done
      drm/i915/gvt: fix use after free for workload
      drm/i915/gvt: remove duplicated definition
      ...

commit d61b7f972dab2a7d187c38254845546dfc8eed85
Author: Josef Bacik <jbacik@fb.com>
Date:   Thu Jan 19 16:08:49 2017 -0500

    nbd: only set MSG_MORE when we have more to send
    
    A user noticed that write performance was horrible over loopback and we
    traced it to an inversion of when we need to set MSG_MORE.  It should be
    set when we have more bvec's to send, not when we are on the last bvec.
    This patch made the test go from 20 iops to 78k iops.
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    Fixes: 429a787be679 ("nbd: fix use-after-free of rq/bio in the xmit path")
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 0a744d927406389e00687560d9ce3c5ab0e58db9
Author: Michal Kazior <michal.kazior@tieto.com>
Date:   Thu Jan 12 16:14:30 2017 +0100

    ath10k: prevent sta pointer rcu violation
    
    Station pointers are RCU protected so driver must
    be extra careful if it tries to store them
    internally for later use outside of the RCU
    section it obtained it in.
    
    It was possible for station teardown to race with
    some htt events. The possible outcome could be a
    use-after-free and a crash.
    
    Only peer-flow-control capable firmware was
    affected (so hardware-wise qca99x0 and qca4019).
    
    This could be done in sta_state() itself via
    explicit synchronize_net() call but there's
    already a convenient sta_pre_rcu_remove() op that
    can be hooked up to avoid extra rcu stall.
    
    The peer->sta pointer itself can't be set to
    NULL/ERR_PTR because it is later used in
    sta_state() for extra sanity checks.
    
    Signed-off-by: Michal Kazior <michal.kazior@tieto.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 4c7d0c9cb713a28b133b265d595de2a93ee09712
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Wed Jan 18 15:19:54 2017 +0100

    ovl: fix possible use after free on redirect dir lookup
    
    ovl_lookup_layer() iterates on path elements of d->name.name
    but also frees and allocates a new pointer for d->name.name.
    
    For the case of lookup in upper layer, the initial d->name.name
    pointer is stable (dentry->d_name), but for lower layers, the
    initial d->name.name can be d->redirect, which can be freed during
    iteration.
    
    [SzM]
    Keep the count of remaining characters in the redirect path and calculate
    the current position from that.  This works becuase only the prefix is
    modified, the ending always stays the same.
    
    Fixes: 02b69b284cd7 ("ovl: lookup redirects")
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit c130b666a9a711f985a0a44b58699ebe14bb7245
Author: Gabriel Krisman Bertazi <krisman@linux.vnet.ibm.com>
Date:   Wed Dec 28 16:42:00 2016 -0200

    8250_pci: Fix potential use-after-free in error path
    
    Commit f209fa03fc9d ("serial: 8250_pci: Detach low-level driver during
    PCI error recovery") introduces a potential use-after-free in case the
    pciserial_init_ports call in serial8250_io_resume fails, which may
    happen if a memory allocation fails or if the .init quirk failed for
    whatever reason).  If this happen, further pci_get_drvdata will return a
    pointer to freed memory.
    
    This patch reworks the PCI recovery resume hook to restore the old priv
    structure in this case, which should be ok, since the ports were already
    detached. Such error during recovery causes us to give up on the
    recovery.
    
    Fixes: f209fa03fc9d ("serial: 8250_pci: Detach low-level driver during
      PCI error recovery")
    Reported-by: Michal Suchanek <msuchanek@suse.com>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@linux.vnet.ibm.com>
    Signed-off-by: Guilherme G. Piccoli <gpiccoli@linux.vnet.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e51ef32b0d66fcd5fe45c437cf7c6aef8350746
Author: Changbin Du <changbin.du@intel.com>
Date:   Thu Jan 5 13:28:05 2017 +0800

    drm/i915/gvt: fix use after free for workload
    
    In the function workload_thread(), we invoke complete_current_workload()
    to cleanup the just processed workload (workload will be freed there).
    So we cannot access workload->req after that. This patch move
    complete_current_workload() afterward.
    
    Signed-off-by: Changbin Du <changbin.du@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit ea07b862ac8ef9b8c8358517d2e39f847dda6659
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Fri Jan 6 19:21:43 2017 -0500

    mm: workingset: fix use-after-free in shadow node shrinker
    
    Several people report seeing warnings about inconsistent radix tree
    nodes followed by crashes in the workingset code, which all looked like
    use-after-free access from the shadow node shrinker.
    
    Dave Jones managed to reproduce the issue with a debug patch applied,
    which confirmed that the radix tree shrinking indeed frees shadow nodes
    while they are still linked to the shadow LRU:
    
      WARNING: CPU: 2 PID: 53 at lib/radix-tree.c:643 delete_node+0x1e4/0x200
      CPU: 2 PID: 53 Comm: kswapd0 Not tainted 4.10.0-rc2-think+ #3
      Call Trace:
         delete_node+0x1e4/0x200
         __radix_tree_delete_node+0xd/0x10
         shadow_lru_isolate+0xe6/0x220
         __list_lru_walk_one.isra.4+0x9b/0x190
         list_lru_walk_one+0x23/0x30
         scan_shadow_nodes+0x2e/0x40
         shrink_slab.part.44+0x23d/0x5d0
         shrink_node+0x22c/0x330
         kswapd+0x392/0x8f0
    
    This is the WARN_ON_ONCE(!list_empty(&node->private_list)) placed in the
    inlined radix_tree_shrink().
    
    The problem is with 14b468791fa9 ("mm: workingset: move shadow entry
    tracking to radix tree exceptional tracking"), which passes an update
    callback into the radix tree to link and unlink shadow leaf nodes when
    tree entries change, but forgot to pass the callback when reclaiming a
    shadow node.
    
    While the reclaimed shadow node itself is unlinked by the shrinker, its
    deletion from the tree can cause the left-most leaf node in the tree to
    be shrunk.  If that happens to be a shadow node as well, we don't unlink
    it from the LRU as we should.
    
    Consider this tree, where the s are shadow entries:
    
           root->rnode
                |
           [0       n]
            |       |
         [s    ] [sssss]
    
    Now the shadow node shrinker reclaims the rightmost leaf node through
    the shadow node LRU:
    
           root->rnode
                |
           [0        ]
            |
        [s     ]
    
    Because the parent of the deleted node is the first level below the
    root and has only one child in the left-most slot, the intermediate
    level is shrunk and the node containing the single shadow is put in
    its place:
    
           root->rnode
                |
           [s        ]
    
    The shrinker again sees a single left-most slot in a first level node
    and thus decides to store the shadow in root->rnode directly and free
    the node - which is a leaf node on the shadow node LRU.
    
      root->rnode
           |
           s
    
    Without the update callback, the freed node remains on the shadow LRU,
    where it causes later shrinker runs to crash.
    
    Pass the node updater callback into __radix_tree_delete_node() in case
    the deletion causes the left-most branch in the tree to collapse too.
    
    Also add warnings when linked nodes are freed right away, rather than
    wait for the use-after-free when the list is scanned much later.
    
    Fixes: 14b468791fa9 ("mm: workingset: move shadow entry tracking to radix tree exceptional tracking")
    Reported-by: Dave Chinner <david@fromorbit.com>
    Reported-by: Hugh Dickins <hughd@google.com>
    Reported-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-and-tested-by: Dave Jones <davej@codemonkey.org.uk>
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Chris Leech <cleech@redhat.com>
    Cc: Lee Duncan <lduncan@suse.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Matthew Wilcox <mawilcox@linuxonhyperv.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 20b1e22d01a4b0b11d3a1066e9feb04be38607ec
Author: Nicolai Stange <nicstange@gmail.com>
Date:   Thu Jan 5 13:51:29 2017 +0100

    x86/efi: Don't allocate memmap through memblock after mm_init()
    
    With the following commit:
    
      4bc9f92e64c8 ("x86/efi-bgrt: Use efi_mem_reserve() to avoid copying image data")
    
    ...  efi_bgrt_init() calls into the memblock allocator through
    efi_mem_reserve() => efi_arch_mem_reserve() *after* mm_init() has been called.
    
    Indeed, KASAN reports a bad read access later on in efi_free_boot_services():
    
      BUG: KASAN: use-after-free in efi_free_boot_services+0xae/0x24c
                at addr ffff88022de12740
      Read of size 4 by task swapper/0/0
      page:ffffea0008b78480 count:0 mapcount:-127
      mapping:          (null) index:0x1 flags: 0x5fff8000000000()
      [...]
      Call Trace:
       dump_stack+0x68/0x9f
       kasan_report_error+0x4c8/0x500
       kasan_report+0x58/0x60
       __asan_load4+0x61/0x80
       efi_free_boot_services+0xae/0x24c
       start_kernel+0x527/0x562
       x86_64_start_reservations+0x24/0x26
       x86_64_start_kernel+0x157/0x17a
       start_cpu+0x5/0x14
    
    The instruction at the given address is the first read from the memmap's
    memory, i.e. the read of md->type in efi_free_boot_services().
    
    Note that the writes earlier in efi_arch_mem_reserve() don't splat because
    they're done through early_memremap()ed addresses.
    
    So, after memblock is gone, allocations should be done through the "normal"
    page allocator. Introduce a helper, efi_memmap_alloc() for this. Use
    it from efi_arch_mem_reserve(), efi_free_boot_services() and, for the sake
    of consistency, from efi_fake_memmap() as well.
    
    Note that for the latter, the memmap allocations cease to be page aligned.
    This isn't needed though.
    
    Tested-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Nicolai Stange <nicstange@gmail.com>
    Reviewed-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.9
    Cc: Dave Young <dyoung@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Mika Penttilä <mika.penttila@nextfour.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 4bc9f92e64c8 ("x86/efi-bgrt: Use efi_mem_reserve() to avoid copying image data")
    Link: http://lkml.kernel.org/r/20170105125130.2815-1-nicstange@gmail.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 75dd211e773afcbc264677b0749d1cf7d937ab2d
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jan 3 16:39:52 2017 +0100

    USB: serial: mos7720: fix parport use-after-free on probe errors
    
    Do not submit the interrupt URB until after the parport has been
    successfully registered to avoid another use-after-free in the
    completion handler when accessing the freed parport private data in case
    of a racing completion.
    
    Fixes: b69578df7e98 ("USB: usbserial: mos7720: add support for parallel
    port on moschip 7715")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 91a1ff4d53c5184d383d0baeeaeab6f9736f2ff3
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jan 3 16:39:51 2017 +0100

    USB: serial: mos7720: fix use-after-free on probe errors
    
    The interrupt URB was submitted on probe but never stopped on probe
    errors. This can lead to use-after-free issues in the completion
    handler when accessing the freed usb-serial struct:
    
    Unable to handle kernel paging request at virtual address 6b6b6be7
    ...
    [<bf052e70>] (mos7715_interrupt_callback [mos7720]) from [<c052a894>] (__usb_hcd_giveback_urb+0x80/0x140)
    [<c052a894>] (__usb_hcd_giveback_urb) from [<c052a9a4>] (usb_hcd_giveback_urb+0x50/0x138)
    [<c052a9a4>] (usb_hcd_giveback_urb) from [<c0550684>] (musb_giveback+0xc8/0x1cc)
    
    Fixes: b69578df7e98 ("USB: usbserial: mos7720: add support for parallel
    port on moschip 7715")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commit 35f432a03e41d3bf08c51ede917f94e2288fbe8c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Jan 2 11:19:29 2017 +0100

    mac80211: initialize fast-xmit 'info' later
    
    In ieee80211_xmit_fast(), 'info' is initialized to point to the skb
    that's passed in, but that skb may later be replaced by a clone (if
    it was shared), leading to an invalid pointer.
    
    This can lead to use-after-free and also later crashes since the
    real SKB's info->hw_queue doesn't get initialized properly.
    
    Fix this by assigning info only later, when it's needed, after the
    skb replacement (may have) happened.
    
    Cc: stable@vger.kernel.org
    Reported-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit add333a81a16abbd4f106266a2553677a165725f
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Dec 9 15:18:43 2016 -0500

    USB: gadgetfs: fix use-after-free bug
    
    Andrey Konovalov reports that fuzz testing with syzkaller causes a
    KASAN use-after-free bug report in gadgetfs:
    
    BUG: KASAN: use-after-free in gadgetfs_setup+0x208a/0x20e0 at addr ffff88003dfe5bf2
    Read of size 2 by task syz-executor0/22994
    CPU: 3 PID: 22994 Comm: syz-executor0 Not tainted 4.9.0-rc7+ #16
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
     ffff88006df06a18 ffffffff81f96aba ffffffffe0528500 1ffff1000dbe0cd6
     ffffed000dbe0cce ffff88006df068f0 0000000041b58ab3 ffffffff8598b4c8
     ffffffff81f96828 1ffff1000dbe0ccd ffff88006df06708 ffff88006df06748
    Call Trace:
     <IRQ> [  201.343209]  [<     inline     >] __dump_stack lib/dump_stack.c:15
     <IRQ> [  201.343209]  [<ffffffff81f96aba>] dump_stack+0x292/0x398 lib/dump_stack.c:51
     [<ffffffff817e4dec>] kasan_object_err+0x1c/0x70 mm/kasan/report.c:159
     [<     inline     >] print_address_description mm/kasan/report.c:197
     [<ffffffff817e5080>] kasan_report_error+0x1f0/0x4e0 mm/kasan/report.c:286
     [<     inline     >] kasan_report mm/kasan/report.c:306
     [<ffffffff817e562a>] __asan_report_load_n_noabort+0x3a/0x40 mm/kasan/report.c:337
     [<     inline     >] config_buf drivers/usb/gadget/legacy/inode.c:1298
     [<ffffffff8322c8fa>] gadgetfs_setup+0x208a/0x20e0 drivers/usb/gadget/legacy/inode.c:1368
     [<ffffffff830fdcd0>] dummy_timer+0x11f0/0x36d0 drivers/usb/gadget/udc/dummy_hcd.c:1858
     [<ffffffff814807c1>] call_timer_fn+0x241/0x800 kernel/time/timer.c:1308
     [<     inline     >] expire_timers kernel/time/timer.c:1348
     [<ffffffff81482de6>] __run_timers+0xa06/0xec0 kernel/time/timer.c:1641
     [<ffffffff814832c1>] run_timer_softirq+0x21/0x80 kernel/time/timer.c:1654
     [<ffffffff84f4af8b>] __do_softirq+0x2fb/0xb63 kernel/softirq.c:284
    
    The cause of the bug is subtle.  The dev_config() routine gets called
    twice by the fuzzer.  The first time, the user data contains both a
    full-speed configuration descriptor and a high-speed config
    descriptor, causing dev->hs_config to be set.  But it also contains an
    invalid device descriptor, so the buffer containing the descriptors is
    deallocated and dev_config() returns an error.
    
    The second time dev_config() is called, the user data contains only a
    full-speed config descriptor.  But dev->hs_config still has the stale
    pointer remaining from the first call, causing the routine to think
    that there is a valid high-speed config.  Later on, when the driver
    dereferences the stale pointer to copy that descriptor, we get a
    use-after-free access.
    
    The fix is simple: Clear dev->hs_config if the passed-in data does not
    contain a high-speed config descriptor.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 74c8719b8ee0922593a5cbec0bd6127d86d8a2f4
Author: Amitkumar Karwar <akarwar@marvell.com>
Date:   Thu Dec 1 19:23:31 2016 +0530

    mwifiex: sdio: fix use after free issue for save_adapter
    
    If we have sdio work requests received when sdio card reset is
    happening, we may end up accessing older save_adapter pointer
    later which is already freed during card reset.
    This patch solves the problem by cancelling those pending requests.
    
    Signed-off-by: Amitkumar Karwar <akarwar@marvell.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commits)
      drm/amdgpu: update tile table for oland/hainan
      drm/amdgpu: update tile table for verde
      drm/amdgpu: update rev id for verde
      drm/amdgpu: update golden setting for verde
      drm/amdgpu: update rev id for oland
      drm/amdgpu: update golden setting for oland
      drm/amdgpu: update rev id for hainan
      drm/amdgpu: update golden setting for hainan
      drm/amdgpu: update rev id for pitcairn
      drm/amdgpu: update golden setting for pitcairn
      drm/amdgpu: update golden setting/tiling table of tahiti
      drm/i915: skip the first 4k of stolen memory on everything >= gen8
      drm/i915: Fallback to single PAGE_SIZE segments for DMA remapping
      drm/i915: Fix use after free in logical_render_ring_init
      drm/i915: disable PSR by default on HSW/BDW
      drm/i915: Fix setting of boost freq tunable
      drm/i915: tune down the fast link training vs boot fail
      drm/i915: Reorder phys backing storage release
      drm/i915/gen9: Fix PCODE polling during SAGV disabling
      drm/i915/gen9: Fix PCODE polling during CDCLK change notification
      ...

commit 6c5d5cfbe3c59429e6d6f66477a7609aacf69751
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Dec 20 19:14:34 2016 +0800

    netfilter: ipt_CLUSTERIP: check duplicate config when initializing
    
    Now when adding an ipt_CLUSTERIP rule, it only checks duplicate config in
    clusterip_config_find_get(). But after that, there may be still another
    thread to insert a config with the same ip, then it leaves proc_create_data
    to do duplicate check.
    
    It's more reasonable to check duplicate config by ipt_CLUSTERIP itself,
    instead of checking it by proc fs duplicate file check. Before, when proc
    fs allowed duplicate name files in a directory, It could even crash kernel
    because of use-after-free.
    
    This patch is to check duplicate config under the protection of clusterip
    net lock when initializing a new config and correct the return err.
    
    Note that it also moves proc file node creation after adding new config, as
    proc_create_data may sleep, it couldn't be called under the clusterip_net
    lock. clusterip_config_find_get returns NULL if c->pde is null to make sure
    it can't be used until the proc file node creation is done.
    
    Suggested-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit d8953c8326d87a337763ca547ad7db034a94ddb1
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Fri Dec 16 13:18:42 2016 +0000

    drm/i915: Fix use after free in logical_render_ring_init
    
    Commit 3b3f1650b1ca ("drm/i915: Allocate intel_engine_cs
    structure only for the enabled engines") introduced the
    dynanically allocated engine instances and created an
    potential use after free scenario in logical_render_ring_init
    where lrc_destroy_wa_ctx_obj could be called after the engine
    instance has been freed.
    
    This can only happen during engine setup/init error handling
    which luckily does not happen ever in practice.
    
    Fix is to not call lrc_destroy_wa_ctx_obj since it would have
    already been executed from the preceding engine cleanup.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 3b3f1650b1ca ("drm/i915: Allocate intel_engine_cs structure only for the enabled engines")
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/1481894322-2145-1-git-send-email-tvrtko.ursulin@linux.intel.com
    (cherry picked from commit d038fc7e4fff14d6b026130007faef35cbf5e956)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 057f803ff10742addd19a7c2fb6fb83940059a6c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Dec 7 13:34:11 2016 +0000

    drm/i915: Reorder phys backing storage release
    
    In commit a4f5ea64f0a8 ("drm/i915: Refactor object page API"), I
    reordered the object->pages teardown to be more friendly wrt to a
    separate obj->mm.lock. However, I overlooked the phys object and left it
    with a dangling use-after-free of its phys_handle. Move the allocation
    of the phys handle to get_pages and it release to put_pages to prevent
    the invalid access and to improve symmetry.
    
    v2: Add commentary about always aligning to page size.
    
    Testcase: igt/drv_selftest/objects
    Reported-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Fixes: a4f5ea64f0a8 ("drm/i915: Refactor object page API")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161207133411.8028-1-chris@chris-wilson.co.uk
    (cherry picked from commit dbb4351bab0a8440f6b02895c142bce6c30b7097)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit d038fc7e4fff14d6b026130007faef35cbf5e956
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Fri Dec 16 13:18:42 2016 +0000

    drm/i915: Fix use after free in logical_render_ring_init
    
    Commit 3b3f1650b1ca ("drm/i915: Allocate intel_engine_cs
    structure only for the enabled engines") introduced the
    dynanically allocated engine instances and created an
    potential use after free scenario in logical_render_ring_init
    where lrc_destroy_wa_ctx_obj could be called after the engine
    instance has been freed.
    
    This can only happen during engine setup/init error handling
    which luckily does not happen ever in practice.
    
    Fix is to not call lrc_destroy_wa_ctx_obj since it would have
    already been executed from the preceding engine cleanup.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 3b3f1650b1ca ("drm/i915: Allocate intel_engine_cs structure only for the enabled engines")
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/1481894322-2145-1-git-send-email-tvrtko.ursulin@linux.intel.com

commit d0905ca757bc40bd1ebc261a448a521b064777d7
Author: Andy Grover <agrover@redhat.com>
Date:   Mon Nov 21 16:35:30 2016 -0800

    target/user: Fix use-after-free of tcmu_cmds if they are expired
    
    Don't free the cmd in tcmu_check_expired_cmd, it's still referenced by
    an entry in our cmd_id->cmd idr. If userspace ever resumes processing,
    tcmu_handle_completions() will use the now-invalid cmd pointer.
    
    Instead, don't free cmd. It will be freed by tcmu_handle_completion() if
    userspace ever recovers, or tcmu_free_device if not.
    
    Cc: stable@vger.kernel.org
    Reported-by: Bryant G Ly <bgly@us.ibm.com>
    Tested-by: Bryant G Ly <bgly@us.ibm.com>
    Signed-off-by: Andy Grover <agrover@redhat.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>

commit 5716863e0f8251d3360d4cbfc0e44e08007075df
Author: Jan Kara <jack@suse.cz>
Date:   Mon Dec 12 16:08:41 2016 +0100

    fsnotify: Fix possible use-after-free in inode iteration on umount
    
    fsnotify_unmount_inodes() plays complex tricks to pin next inode in the
    sb->s_inodes list when iterating over all inodes. Furthermore the code has a
    bug that if the current inode is the last on i_sb_list that does not have e.g.
    I_FREEING set, then we leave next_i pointing to inode which may get removed
    from the i_sb_list once we drop s_inode_list_lock thus resulting in
    use-after-free issues (usually manifesting as infinite looping in
    fsnotify_unmount_inodes()).
    
    Fix the problem by keeping current inode pinned somewhat longer. Then we can
    make the code much simpler and standard.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 91a45f71078a6569ec3ca5bef74e1ab58121d80e
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Mon Dec 12 16:43:32 2016 -0800

    mm: khugepaged: close use-after-free race during shmem collapsing
    
    Patch series "mm: workingset: radix tree subtleties & single-page file
    refaults", v3.
    
    This is another revision of the radix tree / workingset patches based on
    feedback from Jan and Kirill.
    
    This is a follow-up to d3798ae8c6f3 ("mm: filemap: don't plant shadow
    entries without radix tree node").  That patch fixed an issue that was
    caused mainly by the page cache sneaking special shadow page entries
    into the radix tree and relying on subtleties in the radix tree code to
    make that work.  The fix also had to stop tracking refaults for
    single-page files because shadow pages stored as direct pointers in
    radix_tree_root->rnode weren't properly handled during tree extension.
    
    These patches make the radix tree code explicitely support and track
    such special entries, to eliminate the subtleties and to restore the
    thrash detection for single-page files.
    
    This patch (of 9):
    
    When a radix tree iteration drops the tree lock, another thread might
    swoop in and free the node holding the current slot.  The iteration
    needs to do another tree lookup from the current index to continue.
    
    [kirill.shutemov@linux.intel.com: re-lookup for replacement]
    Fixes: f3f0e1d2150b ("khugepaged: add support of collapse for tmpfs/shmem pages")
    Link: http://lkml.kernel.org/r/20161117191138.22769-2-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Matthew Wilcox <mawilcox@linuxonhyperv.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 28076483afac9dd77df269f5d460e51a09dfb19f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Sat Dec 10 00:52:28 2016 +0100

    ACPI / CPPC: Fix per-CPU pointer management in acpi_cppc_processor_probe()
    
    Fix a possible use-after-free scenario in acpi_cppc_processor_probe()
    that can happen if the function returns without cleaning up the
    per-CPU pointer set by it previously.
    
    Reported-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit dbb4351bab0a8440f6b02895c142bce6c30b7097
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Dec 7 13:34:11 2016 +0000

    drm/i915: Reorder phys backing storage release
    
    In commit a4f5ea64f0a8 ("drm/i915: Refactor object page API"), I
    reordered the object->pages teardown to be more friendly wrt to a
    separate obj->mm.lock. However, I overlooked the phys object and left it
    with a dangling use-after-free of its phys_handle. Move the allocation
    of the phys handle to get_pages and it release to put_pages to prevent
    the invalid access and to improve symmetry.
    
    v2: Add commentary about always aligning to page size.
    
    Testcase: igt/drv_selftest/objects
    Reported-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Fixes: a4f5ea64f0a8 ("drm/i915: Refactor object page API")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161207133411.8028-1-chris@chris-wilson.co.uk

commit d46ddc593f4da8d6c1b068503c04e063fa3a0e70
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Tue Dec 6 15:48:35 2016 -0500

    HID: i2c-hid: Disable IRQ before freeing buffers
    
    The HID report buffers that are initially allocated on i2c_hid_probe()
    might not be big enough to hold the HID reports from a specific device,
    in which case they will be freed and new ones will be allocated in
    i2c_hid_start(), at point which the device's report size is known. But
    at this point ihid->irq is already running, and may call
    i2c_hid_get_input() which passes ihid->inbuf to i2c_master_recv(). Since
    this handler runs in a separate thread, ihid->inbuf may be freed at this
    very moment, and i2c_master_recv() will write on memory which may be
    already owned by a different part of the kernel, corrupting its data.
    
    This problem has been observed on an Asus UX360UA laptop which has an
    I2C touchpad, and results in a complete system freeze or an unusable
    slowness with a lof of "BUG: unable to handle kernel paging request at
    <address>" warnings. Enabling SLUB debugging shows a use-after-free
    warning on memory allocated in i2c_hid_alloc_buffers() and freed in
    i2c_hid_free_buffers():
    
    =============================================================================
    BUG kmalloc-64 (Not tainted): Poison overwritten
    -----------------------------------------------------------------------------
    Disabling lock debugging due to kernel taint
    INFO: 0xffff880264083273-0xffff88026408329e. first byte 0x0 instead of 0x6b
    INFO: Allocated in i2c_hid_alloc_buffers+0x25/0xa0 [i2c_hid] age=35793 cpu=2 pid=430
            ___slab_alloc+0x41e/0x460
            __slab_alloc+0x20/0x40
            __kmalloc+0x210/0x280
            i2c_hid_alloc_buffers+0x25/0xa0 [i2c_hid]
            i2c_hid_probe+0x12f/0x5e0 [i2c_hid]
            i2c_device_probe+0x10a/0x1b0
            driver_probe_device+0x220/0x4a0
            __device_attach_driver+0x71/0xa0
            bus_for_each_drv+0x67/0xb0
            __device_attach+0xdc/0x170
            device_initial_probe+0x13/0x20
            bus_probe_device+0x92/0xa0
            device_add+0x4aa/0x670
            device_register+0x1a/0x20
            i2c_new_device+0x18e/0x230
            acpi_i2c_add_device+0x1a0/0x210
    INFO: Freed in i2c_hid_free_buffers+0x16/0x60 [i2c_hid] age=7552 cpu=1 pid=1473
            __slab_free+0x221/0x330
            kfree+0x139/0x160
            i2c_hid_free_buffers+0x16/0x60 [i2c_hid]
            i2c_hid_start+0x2a9/0x2df [i2c_hid]
            mt_probe+0x160/0x22e [hid_multitouch]
            hid_device_probe+0xd7/0x150 [hid]
            driver_probe_device+0x220/0x4a0
            __driver_attach+0x84/0x90
            bus_for_each_dev+0x6c/0xc0
            driver_attach+0x1e/0x20
            bus_add_driver+0x1c3/0x280
            driver_register+0x60/0xe0
            __hid_register_driver+0x53/0x90 [hid]
            0xffffffffc004f01e
            do_one_initcall+0xb3/0x1f0
            do_init_module+0x5f/0x1d0
    INFO: Slab 0xffffea0009902080 objects=20 used=20 fp=0x          (null) flags=0x17fff8000004080
    INFO: Object 0xffff880264083260 @offset=4704 fp=0x          (null)
    Bytes b4 ffff880264083250: 8d e6 fe ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
    Object ffff880264083260: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
    Object ffff880264083270: 6b 6b 6b 00 00 00 00 00 00 00 00 00 00 00 00 00  kkk.............
    Object ffff880264083280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    Object ffff880264083290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    Redzone ffff8802640832a0: bb bb bb bb bb bb bb bb                          ........
    Padding ffff8802640833e0: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
    CPU: 1 PID: 1503 Comm: python3 Tainted: G    B           4.4.21+ #10
    Hardware name: ASUSTeK COMPUTER INC. UX360UA/UX360UA, BIOS UX360UA.200 05/05/2016
     0000000000000086 00000000622d48a2 ffff88026061ba38 ffffffff813f6044
     ffff880264082010 ffff880264083260 ffff88026061ba78 ffffffff811e8eab
     0000000000000008 ffff880200000001 ffff88026408329f ffff88026a007700
    Call Trace:
     [<ffffffff813f6044>] dump_stack+0x63/0x8f
     [<ffffffff811e8eab>] print_trailer+0x14b/0x1f0
     [<ffffffff811e94c1>] check_bytes_and_report+0xc1/0x100
     [<ffffffff811e96c4>] check_object+0x1c4/0x240
     [<ffffffff81293fde>] ? ext4_htree_store_dirent+0x3e/0x120
     [<ffffffff811e9b44>] alloc_debug_processing+0x104/0x180
     [<ffffffff811eb7be>] ___slab_alloc+0x41e/0x460
     [<ffffffff81293fde>] ? ext4_htree_store_dirent+0x3e/0x120
     [<ffffffff8124590b>] ? __getblk_gfp+0x2b/0x60
     [<ffffffff8129b969>] ? ext4_getblk+0xa9/0x190
     [<ffffffff811eb820>] __slab_alloc+0x20/0x40
     [<ffffffff811ed320>] __kmalloc+0x210/0x280
     [<ffffffff81293fde>] ? ext4_htree_store_dirent+0x3e/0x120
     [<ffffffff812c1602>] ? ext4fs_dirhash+0xc2/0x2a0
     [<ffffffff81293fde>] ext4_htree_store_dirent+0x3e/0x120
     [<ffffffff812a4f47>] htree_dirblock_to_tree+0x187/0x1b0
     [<ffffffff812a5fd2>] ext4_htree_fill_tree+0xb2/0x2e0
     [<ffffffff811ebb7a>] ? kmem_cache_alloc_trace+0x1fa/0x220
     [<ffffffff81293e45>] ? ext4_readdir+0x775/0x8b0
     [<ffffffff81293cb1>] ext4_readdir+0x5e1/0x8b0
     [<ffffffff81221c82>] iterate_dir+0x92/0x120
     [<ffffffff81222118>] SyS_getdents+0x98/0x110
     [<ffffffff81221d10>] ? iterate_dir+0x120/0x120
     [<ffffffff818157f2>] entry_SYSCALL_64_fastpath+0x16/0x71
    FIX kmalloc-64: Restoring 0xffff880264083273-0xffff88026408329e=0x6b
    FIX kmalloc-64: Marking all objects used
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Reviewed-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commits)
      net: avoid signed overflows for SO_{SND|RCV}BUFFORCE
      geneve: avoid use-after-free of skb->data
      tipc: check minimum bearer MTU
      net: renesas: ravb: unintialized return value
      sh_eth: remove unchecked interrupts for RZ/A1
      net: bcmgenet: Utilize correct struct device for all DMA operations
      NET: usb: qmi_wwan: add support for Telit LE922A PID 0x1040
      cdc_ether: Fix handling connection notification
      ip6_offload: check segs for NULL in ipv6_gso_segment.
      RDS: TCP: unregister_netdevice_notifier() in error path of rds_tcp_init_net
      Revert: "ip6_tunnel: Update skb->protocol to ETH_P_IPV6 in ip6_tnl_xmit()"
      ipv6: Set skb->protocol properly for local output
      ipv4: Set skb->protocol properly for local output
      packet: fix race condition in packet_set_ring
      net: ethernet: altera: TSE: do not use tx queue lock in tx completion handler
      net: ethernet: altera: TSE: Remove unneeded dma sync for tx buffers
      net: ethernet: stmmac: fix of-node and fixed-link-phydev leaks
      net: ethernet: stmmac: platform: fix outdated function header
      net: ethernet: stmmac: dwmac-meson8b: fix probe error path
      net: ethernet: stmmac: dwmac-generic: fix probe error path
      ...

commit 5b01014759991887b1e450c9def01e58c02ab81b
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Dec 2 16:49:29 2016 +0100

    geneve: avoid use-after-free of skb->data
    
    geneve{,6}_build_skb can end up doing a pskb_expand_head(), which
    makes the ip_hdr(skb) reference we stashed earlier stale. Since it's
    only needed as an argument to ip_tunnel_ecn_encap(), move this
    directly in the function call.
    
    Fixes: 08399efc6319 ("geneve: ensure ECN info is handled properly in all tx/rx paths")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Reviewed-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f7bf1606fa8fa0e3aecdeac0ba8005f2a0fbdef
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 1 05:02:06 2016 -0800

    mlx4: fix use-after-free in mlx4_en_fold_software_stats()
    
    My recent commit to get more precise rx/tx counters in ndo_get_stats64()
    can lead to crashes at device dismantle, as Jesper found out.
    
    We must prevent mlx4_en_fold_software_stats() trying to access
    tx/rx rings if they are deleted.
    
    Fix this by adding a test against priv->port_up in
    mlx4_en_fold_software_stats()
    
    Calling mlx4_en_fold_software_stats() from mlx4_en_stop_port()
    allows us to eventually broadcast the latest/current counters to
    rtnetlink monitors.
    
    Fixes: 40931b85113d ("mlx4: give precise rx/tx bytes/packets counters")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-and-bisected-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Tested-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Cc: Tariq Toukan <tariqt@mellanox.com>
    Cc: Saeed Mahameed <saeedm@dev.mellanox.co.il>
    Acked-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 84ac7260236a49c79eede91617700174c2c19b0c
Author: Philip Pettersson <philip.pettersson@gmail.com>
Date:   Wed Nov 30 14:55:36 2016 -0800

    packet: fix race condition in packet_set_ring
    
    When packet_set_ring creates a ring buffer it will initialize a
    struct timer_list if the packet version is TPACKET_V3. This value
    can then be raced by a different thread calling setsockopt to
    set the version to TPACKET_V1 before packet_set_ring has finished.
    
    This leads to a use-after-free on a function pointer in the
    struct timer_list when the socket is closed as the previously
    initialized timer will not be deleted.
    
    The bug is fixed by taking lock_sock(sk) in packet_setsockopt when
    changing the packet version while also taking the lock at the start
    of packet_set_ring.
    
    Fixes: f6fb8f100b80 ("af-packet: TPACKET_V3 flexible buffer implementation.")
    Signed-off-by: Philip Pettersson <philip.pettersson@gmail.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50ac64cfc39dad2ba0d8ad553d2d87dfc738cbba
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Nov 30 15:29:49 2016 +0100

    net: ethernet: stmmac: dwmac-socfpga: fix use-after-free on probe errors
    
    Make sure to call stmmac_dvr_remove() before returning on late probe
    errors so that memory is freed, clocks are disabled, and the netdev is
    deregistered before its resources go away.
    
    Fixes: 3c201b5a84ed ("net: stmmac: socfpga: Remove re-registration of
    reset controller")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a0f1d21c1ccb1da66629627a74059dd7f5ac9c61
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Nov 30 22:21:05 2016 +0300

    KVM: use after free in kvm_ioctl_create_device()
    
    We should move the ops->destroy(dev) after the list_del(&dev->vm_node)
    so that we don't use "dev" after freeing it.
    
    Fixes: a28ebea2adc4 ("KVM: Protect device ops->create and list_add with kvm->lock")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

commit ab47bd964af698a014590a17cf9f902128a57a48
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Nov 22 17:57:10 2016 +0000

    thermal/x86_pkg_temp: Sanitize locking
    
    The work cancellation code, the thermal zone unregistering, the work code
    and the interrupt notification function are racy against each other and
    against cpu hotplug and module exit. The random locking sprinkeled all
    over the place does not help anything and probably exists to make people
    feel good. The resulting issues (mainly use after free) are probably
    hard to trigger, but they clearly exist
    
    Protect the package list with a spinlock so it can be accessed from the
    interrupt notifier and also from the work function. The add/removal code in
    the hotplug callbacks take the lock for list manipulation. That makes sure
    that on removal neither the interrupt notifier nor the work function can
    access the about to be freed package structure anymore.
    
    The thermal zone unregistering is another trainwreck. It's not serialized
    against the work function. So unregistering the zone device can race with
    the work function and cause havoc.
    
    Protect the thermal zone with a mutex, which is held in the work
    function to make sure that the zone device is not being unregistered
    concurrently.
    
    To solve the module exit issues, we simply invoke the cpu offline callback
    and let it work its magic. For that it's required to keep track of the
    participating cpus in a package, because topology_core_mask is not affected
    by calling the offline callback for teardown of the driver, so it would
    never free the package as there is always a valid target in
    topology_core_mask.
    
    Use proper names for the locks so it's clear what they are for and add a
    pile of comments to explain the protection rules.
    
    It's amazing that fixing the locking and adding 30 lines of comments
    explaining it still removes more lines than it adds.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>

commit 81d4d7289a6b8120d118f46c5182dbb86dca8436
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Nov 28 18:01:25 2016 +0100

    mlxsw: core: Add missing rollback in error path
    
    Without this rollback, the thermal zone is still registered during the
    error path, whereas its private data is freed upon the destruction of
    the underlying bus device due to the use of devm_kzalloc(). This results
    in use after free.
    
    Fix this by calling mlxsw_thermal_fini() from the appropriate place in
    the error path.
    
    Fixes: a50c1e35650b ("mlxsw: core: Implement thermal zone")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a510887824171ad260cc4a2603396c6247fdd091
Author: Arnaldo Carvalho de Melo <acme@kernel.org>
Date:   Mon Nov 28 12:36:58 2016 -0300

    GSO: Reload iph after pskb_may_pull
    
    As it may get stale and lead to use after free.
    
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Alexander Duyck <aduyck@mirantis.com>
    Cc: Andrey Konovalov <andreyknvl@google.com>
    Fixes: cbc53e08a793 ("GSO: Add GSO type for fixed IPv4 ID")
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 648f0c28df282636c0c8a7a19ca3ce5fc80a39c3
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Nov 28 06:26:49 2016 -0800

    net/dccp: fix use-after-free in dccp_invalid_packet
    
    pskb_may_pull() can reallocate skb->head, we need to reload dh pointer
    in dccp_invalid_packet() or risk use after free.
    
    Bug found by Andrey Konovalov using syzkaller.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0075bd692dca037108fd8b5d90a68d34bad4c2f8
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Nov 28 15:18:31 2016 +0100

    net: phy: Fix use after free in phy_detach()
    
    If device_release_driver(&phydev->mdio.dev) is called, it releases all
    resources belonging to the PHY device. Hence the subsequent call to
    phy_led_triggers_unregister() will access already freed memory when
    unregistering the LEDs.
    
    Move the call to phy_led_triggers_unregister() before the possible call
    to device_release_driver() to fix this.
    
    Fixes: 2e0bc452f4721520 ("net: phy: leds: add support for led triggers on phy link state change")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Zach Brown <zach.brown@ni.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9060dd2c5036b12132f9b97e3486ca6422d5bdfc
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Sat Nov 26 14:24:51 2016 -0500

    ext4: fix mmp use after free during unmount
    
    In ext4_put_super, we call brelse on the buffer head containing
    the ext4 superblock, but then try to use it when we stop the
    mmp thread, because when the thread shuts down it does:
    
    write_mmp_block
      ext4_mmp_csum_set
        ext4_has_metadata_csum
          WARN_ON_ONCE(ext4_has_feature_metadata_csum(sb)...)
    
    which reaches into sb->s_fs_info->s_es->s_feature_ro_compat,
    which lives in the superblock buffer s_sbh which we just released.
    
    Fix this by moving the brelse down to a point where we are no
    longer using it.
    
    Reported-by: Wang Shu <shuwang@redhat.com>
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>

commit 22a1e7783e173ab3d86018eb590107d68df46c11
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 17 10:49:31 2016 +0100

    xc2028: Fix use-after-free bug properly
    
    The commit 8dfbcc4351a0 ("[media] xc2028: avoid use after free") tried
    to address the reported use-after-free by clearing the reference.
    
    However, it's clearing the wrong pointer; it sets NULL to
    priv->ctrl.fname, but it's anyway overwritten by the next line
    memcpy(&priv->ctrl, p, sizeof(priv->ctrl)).
    
    OTOH, the actual code accessing the freed string is the strcmp() call
    with priv->fname:
            if (!firmware_name[0] && p->fname &&
                priv->fname && strcmp(p->fname, priv->fname))
                    free_firmware(priv);
    
    where priv->fname points to the previous file name, and this was
    already freed by kfree().
    
    For fixing the bug properly, this patch does the following:
    
    - Keep the copy of firmware file name in only priv->fname,
      priv->ctrl.fname isn't changed;
    - The allocation is done only when the firmware gets loaded;
    - The kfree() is called in free_firmware() commonly
    
    Fixes: commit 8dfbcc4351a0 ('[media] xc2028: avoid use after free')
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit afbb110172b93e44a3fd1b5afb3a71f7f9da4406
Author: Sean Young <sean@mess.org>
Date:   Mon Oct 31 15:52:26 2016 -0200

    [media] lirc: prevent use-after free
    
    If you unplug an lirc device while reading from it, you will get an
    use after free as the cdev is freed while still in use.
    
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 32c231164b762dddefa13af5a0101032c70b50ef
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Fri Nov 18 22:13:00 2016 +0100

    l2tp: fix racy SOCK_ZAPPED flag check in l2tp_ip{,6}_bind()
    
    Lock socket before checking the SOCK_ZAPPED flag in l2tp_ip6_bind().
    Without lock, a concurrent call could modify the socket flags between
    the sock_flag(sk, SOCK_ZAPPED) test and the lock_sock() call. This way,
    a socket could be inserted twice in l2tp_ip6_bind_table. Releasing it
    would then leave a stale pointer there, generating use-after-free
    errors when walking through the list or modifying adjacent entries.
    
    BUG: KASAN: use-after-free in l2tp_ip6_close+0x22e/0x290 at addr ffff8800081b0ed8
    Write of size 8 by task syz-executor/10987
    CPU: 0 PID: 10987 Comm: syz-executor Not tainted 4.8.0+ #39
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.8.2-0-g33fbe13 by qemu-project.org 04/01/2014
     ffff880031d97838 ffffffff829f835b ffff88001b5a1640 ffff8800081b0ec0
     ffff8800081b15a0 ffff8800081b6d20 ffff880031d97860 ffffffff8174d3cc
     ffff880031d978f0 ffff8800081b0e80 ffff88001b5a1640 ffff880031d978e0
    Call Trace:
     [<ffffffff829f835b>] dump_stack+0xb3/0x118 lib/dump_stack.c:15
     [<ffffffff8174d3cc>] kasan_object_err+0x1c/0x70 mm/kasan/report.c:156
     [<     inline     >] print_address_description mm/kasan/report.c:194
     [<ffffffff8174d666>] kasan_report_error+0x1f6/0x4d0 mm/kasan/report.c:283
     [<     inline     >] kasan_report mm/kasan/report.c:303
     [<ffffffff8174db7e>] __asan_report_store8_noabort+0x3e/0x40 mm/kasan/report.c:329
     [<     inline     >] __write_once_size ./include/linux/compiler.h:249
     [<     inline     >] __hlist_del ./include/linux/list.h:622
     [<     inline     >] hlist_del_init ./include/linux/list.h:637
     [<ffffffff8579047e>] l2tp_ip6_close+0x22e/0x290 net/l2tp/l2tp_ip6.c:239
     [<ffffffff850b2dfd>] inet_release+0xed/0x1c0 net/ipv4/af_inet.c:415
     [<ffffffff851dc5a0>] inet6_release+0x50/0x70 net/ipv6/af_inet6.c:422
     [<ffffffff84c4581d>] sock_release+0x8d/0x1d0 net/socket.c:570
     [<ffffffff84c45976>] sock_close+0x16/0x20 net/socket.c:1017
     [<ffffffff817a108c>] __fput+0x28c/0x780 fs/file_table.c:208
     [<ffffffff817a1605>] ____fput+0x15/0x20 fs/file_table.c:244
     [<ffffffff813774f9>] task_work_run+0xf9/0x170
     [<ffffffff81324aae>] do_exit+0x85e/0x2a00
     [<ffffffff81326dc8>] do_group_exit+0x108/0x330
     [<ffffffff81348cf7>] get_signal+0x617/0x17a0 kernel/signal.c:2307
     [<ffffffff811b49af>] do_signal+0x7f/0x18f0
     [<ffffffff810039bf>] exit_to_usermode_loop+0xbf/0x150 arch/x86/entry/common.c:156
     [<     inline     >] prepare_exit_to_usermode arch/x86/entry/common.c:190
     [<ffffffff81006060>] syscall_return_slowpath+0x1a0/0x1e0 arch/x86/entry/common.c:259
     [<ffffffff85e4d726>] entry_SYSCALL_64_fastpath+0xc4/0xc6
    Object at ffff8800081b0ec0, in cache L2TP/IPv6 size: 1448
    Allocated:
    PID = 10987
     [ 1116.897025] [<ffffffff811ddcb6>] save_stack_trace+0x16/0x20
     [ 1116.897025] [<ffffffff8174c736>] save_stack+0x46/0xd0
     [ 1116.897025] [<ffffffff8174c9ad>] kasan_kmalloc+0xad/0xe0
     [ 1116.897025] [<ffffffff8174cee2>] kasan_slab_alloc+0x12/0x20
     [ 1116.897025] [<     inline     >] slab_post_alloc_hook mm/slab.h:417
     [ 1116.897025] [<     inline     >] slab_alloc_node mm/slub.c:2708
     [ 1116.897025] [<     inline     >] slab_alloc mm/slub.c:2716
     [ 1116.897025] [<ffffffff817476a8>] kmem_cache_alloc+0xc8/0x2b0 mm/slub.c:2721
     [ 1116.897025] [<ffffffff84c4f6a9>] sk_prot_alloc+0x69/0x2b0 net/core/sock.c:1326
     [ 1116.897025] [<ffffffff84c58ac8>] sk_alloc+0x38/0xae0 net/core/sock.c:1388
     [ 1116.897025] [<ffffffff851ddf67>] inet6_create+0x2d7/0x1000 net/ipv6/af_inet6.c:182
     [ 1116.897025] [<ffffffff84c4af7b>] __sock_create+0x37b/0x640 net/socket.c:1153
     [ 1116.897025] [<     inline     >] sock_create net/socket.c:1193
     [ 1116.897025] [<     inline     >] SYSC_socket net/socket.c:1223
     [ 1116.897025] [<ffffffff84c4b46f>] SyS_socket+0xef/0x1b0 net/socket.c:1203
     [ 1116.897025] [<ffffffff85e4d685>] entry_SYSCALL_64_fastpath+0x23/0xc6
    Freed:
    PID = 10987
     [ 1116.897025] [<ffffffff811ddcb6>] save_stack_trace+0x16/0x20
     [ 1116.897025] [<ffffffff8174c736>] save_stack+0x46/0xd0
     [ 1116.897025] [<ffffffff8174cf61>] kasan_slab_free+0x71/0xb0
     [ 1116.897025] [<     inline     >] slab_free_hook mm/slub.c:1352
     [ 1116.897025] [<     inline     >] slab_free_freelist_hook mm/slub.c:1374
     [ 1116.897025] [<     inline     >] slab_free mm/slub.c:2951
     [ 1116.897025] [<ffffffff81748b28>] kmem_cache_free+0xc8/0x330 mm/slub.c:2973
     [ 1116.897025] [<     inline     >] sk_prot_free net/core/sock.c:1369
     [ 1116.897025] [<ffffffff84c541eb>] __sk_destruct+0x32b/0x4f0 net/core/sock.c:1444
     [ 1116.897025] [<ffffffff84c5aca4>] sk_destruct+0x44/0x80 net/core/sock.c:1452
     [ 1116.897025] [<ffffffff84c5ad33>] __sk_free+0x53/0x220 net/core/sock.c:1460
     [ 1116.897025] [<ffffffff84c5af23>] sk_free+0x23/0x30 net/core/sock.c:1471
     [ 1116.897025] [<ffffffff84c5cb6c>] sk_common_release+0x28c/0x3e0 ./include/net/sock.h:1589
     [ 1116.897025] [<ffffffff8579044e>] l2tp_ip6_close+0x1fe/0x290 net/l2tp/l2tp_ip6.c:243
     [ 1116.897025] [<ffffffff850b2dfd>] inet_release+0xed/0x1c0 net/ipv4/af_inet.c:415
     [ 1116.897025] [<ffffffff851dc5a0>] inet6_release+0x50/0x70 net/ipv6/af_inet6.c:422
     [ 1116.897025] [<ffffffff84c4581d>] sock_release+0x8d/0x1d0 net/socket.c:570
     [ 1116.897025] [<ffffffff84c45976>] sock_close+0x16/0x20 net/socket.c:1017
     [ 1116.897025] [<ffffffff817a108c>] __fput+0x28c/0x780 fs/file_table.c:208
     [ 1116.897025] [<ffffffff817a1605>] ____fput+0x15/0x20 fs/file_table.c:244
     [ 1116.897025] [<ffffffff813774f9>] task_work_run+0xf9/0x170
     [ 1116.897025] [<ffffffff81324aae>] do_exit+0x85e/0x2a00
     [ 1116.897025] [<ffffffff81326dc8>] do_group_exit+0x108/0x330
     [ 1116.897025] [<ffffffff81348cf7>] get_signal+0x617/0x17a0 kernel/signal.c:2307
     [ 1116.897025] [<ffffffff811b49af>] do_signal+0x7f/0x18f0
     [ 1116.897025] [<ffffffff810039bf>] exit_to_usermode_loop+0xbf/0x150 arch/x86/entry/common.c:156
     [ 1116.897025] [<     inline     >] prepare_exit_to_usermode arch/x86/entry/common.c:190
     [ 1116.897025] [<ffffffff81006060>] syscall_return_slowpath+0x1a0/0x1e0 arch/x86/entry/common.c:259
     [ 1116.897025] [<ffffffff85e4d726>] entry_SYSCALL_64_fastpath+0xc4/0xc6
    Memory state around the buggy address:
     ffff8800081b0d80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8800081b0e00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff8800081b0e80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                                        ^
     ffff8800081b0f00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8800081b0f80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    ==================================================================
    
    The same issue exists with l2tp_ip_bind() and l2tp_ip_bind_table.
    
    Fixes: c51ce49735c1 ("l2tp: fix oops in L2TP IP sockets for connect() AF_UNSPEC case")
    Reported-by: Baozeng Ding <sploving1@gmail.com>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4a79aa17d53ea8d5fa4acdaed487a786a185936a
Author: Brian Norris <briannorris@chromium.org>
Date:   Fri Nov 18 19:30:26 2016 +0530

    mwifiex: resolve races between async FW init (failure) and device removal
    
    It's possible for the FW init sequence to fail, which will trigger a
    device cleanup sequence in mwifiex_fw_dpc(). This sequence can race with
    device suspend() or remove() (e.g., reboot or unbind), and can trigger
    use-after-free issues. Currently, this driver attempts (poorly) to
    synchronize remove() using a semaphore, but it doesn't protect some of
    the critical sections properly. Particularly, we grab a pointer to the
    adapter struct (card->adapter) without checking if it's being freed or
    not. We later do a NULL check on the adapter, but that doesn't work if
    the adapter was freed.
    
    Also note that the PCIe interface driver doesn't ever set card->adapter
    to NULL, so even if we get the synchronization right, we still might try
    to redo the cleanup in ->remove(), even if the FW init failure sequence
    already did it.
    
    This patch replaces the static semaphore with a per-device completion
    struct, and uses that completion to synchronize the remove() thread with
    the mwifiex_fw_dpc(). A future patch will utilize this completion to
    synchronize the suspend() thread as well.
    
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 1f862a68df2449bc7b1cf78dce616891697b4bdf
Author: Max Kellermann <max.kellermann@gmail.com>
Date:   Tue Aug 9 18:32:51 2016 -0300

    [media] dvb_frontend: move kref to struct dvb_frontend
    
    This commit amends my old commit fe35637b0a9f ("[media] dvb_frontend:
    eliminate blocking wait in dvb_unregister_frontend()"), which added
    kref to struct dvb_frontend_private.  It turned out that there are
    several use-after-free bugs left, which affect the struct
    dvb_frontend.  Protecting it with kref also protects struct
    dvb_frontend_private, so we can simply move it.
    
    This is how the use-after-free looks like in KASAN:
    
        BUG: KASAN: use-after-free in string+0x60/0xb1 at addr ffff880033bd9fc0
        Read of size 1 by task kworker/0:2/617
        CPU: 0 PID: 617 Comm: kworker/0:2 Not tainted 4.8.0-rc1-hosting+ #60
        Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
        Workqueue: usb_hub_wq hub_event
         0000000000000000 ffff880033757218 ffffffff81394e50 ffff880033bd9fd0
         ffff880035c03b00 ffff880033757240 ffffffff811f271d ffff880033bd9fc0
         1ffff1000677b3f8 ffffed000677b3f8 ffff8800337572b8 ffffffff811f2afe
        Call Trace:
         [...]
         [<ffffffff813a2d2f>] vsnprintf+0x39d/0x7e9
         [<ffffffff813993f9>] add_uevent_var+0x10f/0x1dc
         [<ffffffff814fe5ca>] rc_dev_uevent+0x55/0x6f
         [<ffffffff814438f8>] dev_uevent+0x2e1/0x316
         [<ffffffff81399744>] kobject_uevent_env+0x27e/0x701
         [<ffffffff81399bd2>] kobject_uevent+0xb/0xd
         [<ffffffff81443445>] device_del+0x322/0x383
         [<ffffffff81500c0c>] rc_unregister_device+0x98/0xc3
         [<ffffffff81508fb4>] dvb_usb_remote_exit+0x7a/0x90
         [<ffffffff81506157>] dvb_usb_exit+0x1d/0xe5
         [<ffffffff81506e90>] dvb_usb_device_exit+0x69/0x7d
         [<ffffffff8150a181>] pctv452e_usb_disconnect+0x7b/0x80
         [...]
        Object at ffff880033bd9fc0, in cache kmalloc-16 size: 16
        Allocated:
         [...]
        Freed:
        PID = 617
         [...]
         [<ffffffff811f034c>] kfree+0xd9/0x166
         [<ffffffff814fe513>] ir_free_table+0x2f/0x51
         [<ffffffff81500bc1>] rc_unregister_device+0x4d/0xc3
         [<ffffffff81508fb4>] dvb_usb_remote_exit+0x7a/0x90
         [<ffffffff81506157>] dvb_usb_exit+0x1d/0xe5
         [<ffffffff81506e90>] dvb_usb_device_exit+0x69/0x7d
         [<ffffffff8150a181>] pctv452e_usb_disconnect+0x7b/0x80
    
    Another one:
    
        BUG: KASAN: use-after-free in do_sys_poll+0x336/0x6b8 at addr ffff88003563fcc0
        Read of size 8 by task tuner on fronte/1042
        CPU: 1 PID: 1042 Comm: tuner on fronte Tainted: G    B           4.8.0-rc1-hosting+ #60
        Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
         0000000000000000 ffff88003353f910 ffffffff81394e50 ffff88003563fd80
         ffff880035c03200 ffff88003353f938 ffffffff811f271d ffff88003563fc80
         1ffff10006ac7f98 ffffed0006ac7f98 ffff88003353f9b0 ffffffff811f2afe
        Call Trace:
         [...]
         [<ffffffff812289b3>] do_sys_poll+0x336/0x6b8
         [...]
         [<ffffffff81228ed9>] SyS_poll+0xa9/0x194
         [...]
        Object at ffff88003563fc80, in cache kmalloc-256 size: 256
        Allocated:
         [...]
        Freed:
        PID = 617
         [...]
         [<ffffffff811f034c>] kfree+0xd9/0x166
         [<ffffffff814eb60d>] dvb_unregister_device+0xd6/0xe5
         [<ffffffff814fa4ed>] dvb_unregister_frontend+0x4b/0x66
         [<ffffffff8150810b>] dvb_usb_adapter_frontend_exit+0x69/0xac
         [<ffffffff8150617d>] dvb_usb_exit+0x43/0xe5
         [<ffffffff81506e90>] dvb_usb_device_exit+0x69/0x7d
         [<ffffffff8150a181>] pctv452e_usb_disconnect+0x7b/0x80
    
    Signed-off-by: Max Kellermann <max.kellermann@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit c183d3584b1777be55b4c576385143210dc0dbd5
Author: Max Kellermann <max.kellermann@gmail.com>
Date:   Tue Aug 9 18:32:06 2016 -0300

    [media] rc-main: clear rc_map.name in ir_free_table()
    
    rc_unregister_device() will first call ir_free_table(), and later
    device_del(); however, the latter causes a call to rc_dev_uevent(),
    which prints rc_map.name, which at this point has already bee freed.
    
    This fixes a use-after-free bug found with KASAN.
    
    As reported by Shuah:
    
     "I am seeing the following when I do rmmod on au0828
    
      BUG: KASAN: use-after-free in string+0x170/0x1f0 at addr ffff8801bd513000
      Read of size 1 by task rmmod/1831
      CPU: 1 PID: 1831 Comm: rmmod Tainted: G        W       4.9.0-rc5 #5
      Hardware name: Hewlett-Packard HP ProBook 6475b/180F, BIOS 68TTU Ver. F.04 08/03/2012
      ffff8801aea2f680 ffffffff81b37ad3 ffff8801fa403b80 ffff8801bd513000
      ffff8801aea2f6a8 ffffffff8156c301 ffff8801aea2f738 ffff8801bd513000
      ffff8801fa403b80 ffff8801aea2f728 ffffffff8156c59a ffff8801aea2f770
      Call Trace:
      dump_stack+0x67/0x94
      [<ffffffff8156c301>] kasan_object_err+0x21/0x70
      [<ffffffff8156c59a>] kasan_report_error+0x1fa/0x4d0
      [<ffffffffa116f05f>] ? au0828_exit+0x10/0x21 [au0828]
      [<ffffffff8156c8b3>] __asan_report_load1_noabort+0x43/0x50
      [<ffffffff81b58b20>] ? string+0x170/0x1f0
      [<ffffffff81b58b20>] string+0x170/0x1f0
      [<ffffffff81b621c4>] vsnprintf+0x374/0x1c50
      [<ffffffff81b61e50>] ? pointer+0xa80/0xa80
      [<ffffffff8156b676>] ? save_stack+0x46/0xd0
      [<ffffffff81566faa>] ? __kmalloc+0x14a/0x2a0
      [<ffffffff81b3d70a>] ? kobject_get_path+0x9a/0x200
      [<ffffffff81b408c2>] ? kobject_uevent_env+0x282/0xca0
      [<ffffffff81b412eb>] ? kobject_uevent+0xb/0x10
      [<ffffffff81f10104>] ? device_del+0x434/0x6d0
      [<ffffffffa0fea717>] ? rc_unregister_device+0x177/0x240 [rc_core]
      [<ffffffffa116eeb0>] ? au0828_rc_unregister+0x60/0xb0 [au0828]
    
     The problem is fixed with this patch on Linux 4.9-rc4"
    
    Signed-off-by: Max Kellermann <max.kellermann@gmail.com>
    Tested-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 429a787be6793554ee02aacc7e1f11ebcecc4453
Author: Jens Axboe <axboe@fb.com>
Date:   Thu Nov 17 12:30:37 2016 -0700

    nbd: fix use-after-free of rq/bio in the xmit path
    
    For writes, we can get a completion in while we're still iterating
    the request and bio chain. If that happens, we're reading freed
    memory and we can crash.
    
    Break out after the last segment and avoid having the iterator
    read freed memory.
    
    Reviewed-by: Josef Bacik <jbacik@fb.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit e5f6f564fd191d365fcd775c06a732a488205588
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Nov 16 06:31:52 2016 -0800

    bnxt: add a missing rcu synchronization
    
    Add a missing synchronize_net() call to avoid potential use after free,
    since we explicitly call napi_hash_del() to factorize the RCU grace
    period.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Michael Chan <michael.chan@broadcom.com>
    Acked-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d48756228ee9161ac8836b346589a43fabdc9f3c
Author: Keith Busch <keith.busch@intel.com>
Date:   Tue Nov 15 15:56:26 2016 -0500

    nvme/pci: Don't free queues on error
    
    The nvme_remove function tears down all allocated resources in the correct
    order, so no need to free queues on error during initialization. This
    fixes possible use-after-free errors when queues are still associated
    with a blk-mq hctx.
    
    Reported-by: Scott Bauer <scott.bauer@intel.com>
    Tested-by: Scott Bauer <scott.bauer@intel.com>
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Sagi Grimberg <sagi@grimbeg.me>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 6ff1a25318ebf688ef9593fe09cd449f6fb4ad31
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Nov 14 21:46:47 2016 +0100

    ALSA: usb-audio: Fix use-after-free of usb_device at disconnect
    
    The usb-audio driver implements the deferred device disconnection for
    the device in use.  In this mode, the disconnection callback returns
    immediately while the actual ALSA card object removal happens later
    when all files get closed.  As Shuah reported, this code flow,
    however, leads to a use-after-free, detected by KASAN:
    
     BUG: KASAN: use-after-free in snd_usb_audio_free+0x134/0x160 [snd_usb_audio] at addr ffff8801c863ce10
     Write of size 8 by task pulseaudio/2244
     Call Trace:
      [<ffffffff81b31473>] dump_stack+0x67/0x94
      [<ffffffff81564ef1>] kasan_object_err+0x21/0x70
      [<ffffffff8156518a>] kasan_report_error+0x1fa/0x4e0
      [<ffffffff81564ad7>] ? kasan_slab_free+0x87/0xb0
      [<ffffffff81565733>] __asan_report_store8_noabort+0x43/0x50
      [<ffffffffa0fc0f54>] ? snd_usb_audio_free+0x134/0x160 [snd_usb_audio]
      [<ffffffffa0fc0f54>] snd_usb_audio_free+0x134/0x160 [snd_usb_audio]
      [<ffffffffa0fc0fb1>] snd_usb_audio_dev_free+0x31/0x40 [snd_usb_audio]
      [<ffffffff8243c78a>] __snd_device_free+0x12a/0x210
      [<ffffffff8243d1f5>] snd_device_free_all+0x85/0xd0
      [<ffffffff8242cae4>] release_card_device+0x34/0x130
      [<ffffffff81ef1846>] device_release+0x76/0x1e0
      [<ffffffff81b37ad7>] kobject_release+0x107/0x370
      .....
     Object at ffff8801c863cc80, in cache kmalloc-2048 size: 2048
     Allocated:
      [<ffffffff810804eb>] save_stack_trace+0x2b/0x50
      [<ffffffff81564296>] save_stack+0x46/0xd0
      [<ffffffff8156450d>] kasan_kmalloc+0xad/0xe0
      [<ffffffff81560d1a>] kmem_cache_alloc_trace+0xfa/0x240
      [<ffffffff8214ea47>] usb_alloc_dev+0x57/0xc90
      [<ffffffff8216349d>] hub_event+0xf1d/0x35f0
      ....
     Freed:
      [<ffffffff810804eb>] save_stack_trace+0x2b/0x50
      [<ffffffff81564296>] save_stack+0x46/0xd0
      [<ffffffff81564ac1>] kasan_slab_free+0x71/0xb0
      [<ffffffff81560929>] kfree+0xd9/0x280
      [<ffffffff8214de6e>] usb_release_dev+0xde/0x110
      [<ffffffff81ef1846>] device_release+0x76/0x1e0
      ....
    
    It's the code trying to clear drvdata of the assigned usb_device where
    the usb_device itself was already released in usb_release_dev() after
    the disconnect callback.
    
    This patch fixes it by checking whether the code path is via the
    disconnect callback, i.e. chip->shutdown flag is set.
    
    Fixes: 79289e24194a ('ALSA: usb-audio: Refer to chip->usb_id for quirks...')
    Reported-and-tested-by: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: <stable@vger.kernel.org> # v4.6+
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 7233bc84a3aeda835d334499dc00448373caf5c0
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Thu Nov 3 17:03:41 2016 -0200

    sctp: assign assoc_id earlier in __sctp_connect
    
    sctp_wait_for_connect() currently already holds the asoc to keep it
    alive during the sleep, in case another thread release it. But Andrey
    Konovalov and Dmitry Vyukov reported an use-after-free in such
    situation.
    
    Problem is that __sctp_connect() doesn't get a ref on the asoc and will
    do a read on the asoc after calling sctp_wait_for_connect(), but by then
    another thread may have closed it and the _put on sctp_wait_for_connect
    will actually release it, causing the use-after-free.
    
    Fix is, instead of doing the read after waiting for the connect, do it
    before so, and avoid this issue as the socket is still locked by then.
    There should be no issue on returning the asoc id in case of failure as
    the application shouldn't trust on that number in such situations
    anyway.
    
    This issue doesn't exist in sctp_sendmsg() path.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb399eabc41ae0e67fe87fbebee4cb03ab1b5de9
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Nov 1 10:03:16 2016 +0000

    drm/i915: Avoid accessing request->timeline outside of its lifetime
    
    Whilst waiting on a request, we may do so without holding any locks or
    any guards beyond a reference to the request. In order to avoid taking
    locks within request deallocation, we drop references to its timeline
    (via the context and ppgtt) upon retirement. We should avoid chasing
    such pointers outside of their control, in particular we inspect the
    request->timeline to see if we may restore the RPS waitboost for a
    client. If we instead look at the engine->timeline, we will have similar
    behaviour on both full-ppgtt and !full-ppgtt systems and reduce the
    amount of reward we give towards stalling clients (i.e. only if the
    client stalls and the GPU is uncontended does it reclaim its boost).
    This restores behaviour back to pre-timelines, whilst fixing:
    
    [  645.078485] BUG: KASAN: use-after-free in i915_gem_object_wait_fence+0x1ee/0x2e0 at addr ffff8802335643a0
    [  645.078577] Read of size 4 by task gem_exec_schedu/28408
    [  645.078638] CPU: 1 PID: 28408 Comm: gem_exec_schedu Not tainted 4.9.0-rc2+ #64
    [  645.078724] Hardware name:                  /        , BIOS PYBSWCEL.86A.0027.2015.0507.1758 05/07/2015
    [  645.078816]  ffff88022daef9a0 ffffffff8143d059 ffff880235402a80 ffff880233564200
    [  645.078998]  ffff88022daef9c8 ffffffff81229c5c ffff88022daefa48 ffff880233564200
    [  645.079172]  ffff880235402a80 ffff88022daefa38 ffffffff81229ef0 000000008110a796
    [  645.079345] Call Trace:
    [  645.079404]  [<ffffffff8143d059>] dump_stack+0x68/0x9f
    [  645.079467]  [<ffffffff81229c5c>] kasan_object_err+0x1c/0x70
    [  645.079534]  [<ffffffff81229ef0>] kasan_report_error+0x1f0/0x4b0
    [  645.079601]  [<ffffffff8122a244>] kasan_report+0x34/0x40
    [  645.079676]  [<ffffffff81634f5e>] ? i915_gem_object_wait_fence+0x1ee/0x2e0
    [  645.079741]  [<ffffffff81229951>] __asan_load4+0x61/0x80
    [  645.079807]  [<ffffffff81634f5e>] i915_gem_object_wait_fence+0x1ee/0x2e0
    [  645.079876]  [<ffffffff816364bf>] i915_gem_object_wait+0x19f/0x590
    [  645.079944]  [<ffffffff81636320>] ? i915_gem_object_wait_priority+0x500/0x500
    [  645.080016]  [<ffffffff8110fb30>] ? debug_show_all_locks+0x1e0/0x1e0
    [  645.080084]  [<ffffffff8110abdc>] ? check_chain_key+0x14c/0x210
    [  645.080157]  [<ffffffff8110a796>] ? __lock_is_held+0x46/0xc0
    [  645.080226]  [<ffffffff8163bc61>] ? i915_gem_set_domain_ioctl+0x141/0x690
    [  645.080296]  [<ffffffff8163bcc2>] i915_gem_set_domain_ioctl+0x1a2/0x690
    [  645.080366]  [<ffffffff811f8f85>] ? __might_fault+0x75/0xe0
    [  645.080433]  [<ffffffff815a55f7>] drm_ioctl+0x327/0x640
    [  645.080508]  [<ffffffff8163bb20>] ? i915_gem_obj_prepare_shmem_write+0x3a0/0x3a0
    [  645.080603]  [<ffffffff815a52d0>] ? drm_ioctl_permit+0x120/0x120
    [  645.080670]  [<ffffffff8110abdc>] ? check_chain_key+0x14c/0x210
    [  645.080738]  [<ffffffff81275717>] do_vfs_ioctl+0x127/0xa20
    [  645.080804]  [<ffffffff8120268c>] ? do_mmap+0x47c/0x580
    [  645.080871]  [<ffffffff811da567>] ? vm_mmap_pgoff+0x117/0x140
    [  645.080938]  [<ffffffff812755f0>] ? ioctl_preallocate+0x150/0x150
    [  645.081011]  [<ffffffff81108c53>] ? up_write+0x23/0x50
    [  645.081078]  [<ffffffff811da567>] ? vm_mmap_pgoff+0x117/0x140
    [  645.081145]  [<ffffffff811da450>] ? vma_is_stack_for_current+0x90/0x90
    [  645.081214]  [<ffffffff8110d853>] ? mark_held_locks+0x23/0xc0
    [  645.082030]  [<ffffffff81288408>] ? __fget+0x168/0x250
    [  645.082106]  [<ffffffff819ad517>] ? entry_SYSCALL_64_fastpath+0x5/0xb1
    [  645.082176]  [<ffffffff81288592>] ? __fget_light+0xa2/0xc0
    [  645.082242]  [<ffffffff8127604c>] SyS_ioctl+0x3c/0x70
    [  645.082309]  [<ffffffff819ad52e>] entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  645.082374] Object at ffff880233564200, in cache kmalloc-8192 size: 8192
    [  645.082431] Allocated:
    [  645.082480] PID = 28408
    [  645.082535]  [  645.082566] [<ffffffff8103ae66>] save_stack_trace+0x16/0x20
    [  645.082623]  [  645.082656] [<ffffffff81228b06>] save_stack+0x46/0xd0
    [  645.082716]  [  645.082756] [<ffffffff812292fd>] kasan_kmalloc+0xad/0xe0
    [  645.082817]  [  645.082848] [<ffffffff81631752>] i915_ppgtt_create+0x52/0x220
    [  645.082908]  [  645.082941] [<ffffffff8161db96>] i915_gem_create_context+0x396/0x560
    [  645.083027]  [  645.083059] [<ffffffff8161f857>] i915_gem_context_create_ioctl+0x97/0xf0
    [  645.083152]  [  645.083183] [<ffffffff815a55f7>] drm_ioctl+0x327/0x640
    [  645.083243]  [  645.083274] [<ffffffff81275717>] do_vfs_ioctl+0x127/0xa20
    [  645.083334]  [  645.083372] [<ffffffff8127604c>] SyS_ioctl+0x3c/0x70
    [  645.083432]  [  645.083464] [<ffffffff819ad52e>] entry_SYSCALL_64_fastpath+0x1c/0xb1
    [  645.083551] Freed:
    [  645.083599] PID = 27629
    [  645.083648]  [  645.083676] [<ffffffff8103ae66>] save_stack_trace+0x16/0x20
    [  645.083738]  [  645.083770] [<ffffffff81228b06>] save_stack+0x46/0xd0
    [  645.083830]  [  645.083862] [<ffffffff81229203>] kasan_slab_free+0x73/0xc0
    [  645.083922]  [  645.083961] [<ffffffff812279c9>] kfree+0xa9/0x170
    [  645.084021]  [  645.084053] [<ffffffff81629f60>] i915_ppgtt_release+0x100/0x180
    [  645.084139]  [  645.084171] [<ffffffff8161d414>] i915_gem_context_free+0x1b4/0x230
    [  645.084257]  [  645.084288] [<ffffffff816537b2>] intel_lr_context_unpin+0x192/0x230
    [  645.084380]  [  645.084413] [<ffffffff81645250>] i915_gem_request_retire+0x620/0x630
    [  645.084500]  [  645.085226] [<ffffffff816473d1>] i915_gem_retire_requests+0x181/0x280
    [  645.085313]  [  645.085352] [<ffffffff816352ba>] i915_gem_retire_work_handler+0xca/0xe0
    [  645.085440]  [  645.085471] [<ffffffff810c725b>] process_one_work+0x4fb/0x920
    [  645.085532]  [  645.085562] [<ffffffff810c770d>] worker_thread+0x8d/0x840
    [  645.085622]  [  645.085653] [<ffffffff810d21e5>] kthread+0x185/0x1b0
    [  645.085718]  [  645.085750] [<ffffffff819ad7a7>] ret_from_fork+0x27/0x40
    [  645.085811] Memory state around the buggy address:
    [  645.085869]  ffff880233564280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  645.085956]  ffff880233564300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  645.086053] >ffff880233564380: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  645.086138]                                ^
    [  645.086193]  ffff880233564400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [  645.086283]  ffff880233564480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    v2: Add a comment to document the hint like nature of
     intel_engine_last_submit()
    
    Fixes: 73cb97010d4f ("drm/i915: Combine seqno + tracking into a global timeline struct")
    Fixes: 80b204bce8f2 ("drm/i915: Enable multiple timelines")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161101100317.11129-1-chris@chris-wilson.co.uk

commit 953b956a2e6d35298e684f251bad98ea6c96f982
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Oct 24 13:59:15 2016 +0200

    gpio: GPIO_GET_LINE{HANDLE,EVENT}_IOCTL: Fix file descriptor leak
    
    When allocating a new line handle or event a file is allocated that it is
    associated to. The file is attached to a file descriptor of the current
    process and the file descriptor is returned to userspace using
    copy_to_user(). If this copy operation fails the line handle or event
    allocation is aborted, all acquired resources are freed and an error is
    returned.
    
    But the file struct is not freed and left attached to the userspace
    application and even though the file descriptor number was not copied it is
    trivial to guess. If a userspace application performs a IOCTL on such a
    left over file descriptor it will trigger a use-after-free and if the file
    descriptor is closed (latest when the application exits) a double-free is
    triggered.
    
    anon_inode_getfd() performs 3 tasks, allocate a file struct, allocate a
    file descriptor for the current process and install the file struct in the
    file descriptor. As soon as the file struct is installed in the file
    descriptor it is accessible by userspace (even if the IOCTL itself hasn't
    completed yet), this means uninstalling the fd on the error path is not an
    option, since userspace might already got a reference to the file.
    
    Instead anon_inode_getfd() needs to be broken into its individual steps.
    The allocation of the file struct and file descriptor is done first, then
    the copy_to_user() is executed and only if it succeeds the file is
    installed.
    
    Since the file struct is reference counted it can not be just freed, but
    its reference needs to be dropped, which will also call the release()
    callback, which will free the state attached to the file. So in this case
    the normal error cleanup path should not be taken.
    
    Cc: stable@vger.kernel.org
    Fixes: d932cd49182f ("gpio: free handles in fringe cases")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit dae399d7fdee84d8f5227a9711d95bb4e9a05d4e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Oct 31 20:32:33 2016 +0800

    sctp: hold transport instead of assoc when lookup assoc in rx path
    
    Prior to this patch, in rx path, before calling lock_sock, it needed to
    hold assoc when got it by __sctp_lookup_association, in case other place
    would free/put assoc.
    
    But in __sctp_lookup_association, it lookup and hold transport, then got
    assoc by transport->assoc, then hold assoc and put transport. It means
    it didn't hold transport, yet it was returned and later on directly
    assigned to chunk->transport.
    
    Without the protection of sock lock, the transport may be freed/put by
    other places, which would cause a use-after-free issue.
    
    This patch is to fix this issue by holding transport instead of assoc.
    As holding transport can make sure to access assoc is also safe, and
    actually it looks up assoc by searching transport rhashtable, to hold
    transport here makes more sense.
    
    Note that the function will be renamed later on on another patch.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cd26da4ff4eb7189921d4e7ad87e8adebb7b416b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Oct 31 20:32:31 2016 +0800

    sctp: hold transport instead of assoc in sctp_diag
    
    In sctp_transport_lookup_process(), Commit 1cceda784980 ("sctp: fix
    the issue sctp_diag uses lock_sock in rcu_read_lock") moved cb() out
    of rcu lock, but it put transport and hold assoc instead, and ignore
    that cb() still uses transport. It may cause a use-after-free issue.
    
    This patch is to hold transport instead of assoc there.
    
    Fixes: 1cceda784980 ("sctp: fix the issue sctp_diag uses lock_sock in rcu_read_lock")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd768e146624cbec7122ed15dead8daa137d909d
Author: Ido Yariv <ido@wizery.com>
Date:   Fri Oct 21 12:39:57 2016 -0400

    KVM: x86: fix wbinvd_dirty_mask use-after-free
    
    vcpu->arch.wbinvd_dirty_mask may still be used after freeing it,
    corrupting memory. For example, the following call trace may set a bit
    in an already freed cpu mask:
        kvm_arch_vcpu_load
        vcpu_load
        vmx_free_vcpu_nested
        vmx_free_vcpu
        kvm_arch_vcpu_free
    
    Fix this by deferring freeing of wbinvd_dirty_mask.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ido Yariv <ido@wizery.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

commit adb1fe9ae2ee6ef6bc10f3d5a588020e7664dfa7
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Tue Oct 25 09:51:14 2016 -0500

    mm/page_alloc: Remove kernel address exposure in free_reserved_area()
    
    Linus suggested we try to remove some of the low-hanging fruit related
    to kernel address exposure in dmesg.  The only leaks I see on my local
    system are:
    
      Freeing SMP alternatives memory: 32K (ffffffff9e309000 - ffffffff9e311000)
      Freeing initrd memory: 10588K (ffffa0b736b42000 - ffffa0b737599000)
      Freeing unused kernel memory: 3592K (ffffffff9df87000 - ffffffff9e309000)
      Freeing unused kernel memory: 1352K (ffffa0b7288ae000 - ffffa0b728a00000)
      Freeing unused kernel memory: 632K (ffffa0b728d62000 - ffffa0b728e00000)
    
    Linus says:
    
      "I suspect we should just remove [the addresses in the 'Freeing'
       messages]. I'm sure they are useful in theory, but I suspect they
       were more useful back when the whole "free init memory" was
       originally done.
    
       These days, if we have a use-after-free, I suspect the init-mem
       situation is the easiest situation by far. Compared to all the dynamic
       allocations which are much more likely to show it anyway. So having
       debug output for that case is likely not all that productive."
    
    With this patch the freeing messages now look like this:
    
      Freeing SMP alternatives memory: 32K
      Freeing initrd memory: 10588K
      Freeing unused kernel memory: 3592K
      Freeing unused kernel memory: 1352K
      Freeing unused kernel memory: 632K
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-mm@kvack.org
    Link: http://lkml.kernel.org/r/6836ff90c45b71d38e5d4405aec56fa9e5d1d4b2.1477405374.git.jpoimboe@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit eeacd86efa53e6328c63b79d1999a7d214972278
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Oct 19 11:11:41 2016 +0100

    drm/i915/gvt: Remove dangerous unpin of backing storage of bound GPU object
    
    Unpinning the pages prior to the object being release from the GPU may
    allow the GPU to read and write into system pages (i.e. use after free
    by the hw).
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit feddf6e866c9cdbdec45b09f0a9566ea538a0da3
Author: Zhenyu Wang <zhenyuw@linux.intel.com>
Date:   Thu Oct 20 17:15:03 2016 +0800

    drm/i915/gvt: clean up intel_gvt.h as interface for i915 core
    
    i915 core should only call functions and structures exposed through
    intel_gvt.h. Remove internal gvt.h and i915_pvinfo.h.
    
    Change for internal intel_gvt structure as private handler which
    not requires to expose gvt internal structure for i915 core.
    
    v2: Fix per Chris's comment
    - carefully handle dev_priv->gvt assignment
    - add necessary bracket for macro helper
    - forward declartion struct intel_gvt
    - keep free operation within same file handling alloc
    
    v3: fix use after free and remove intel_gvt.initialized
    
    v4: change to_gvt() to an inline
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 8ce48623f0cf3d632e32448411feddccb693d351
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 12 19:01:45 2016 +0200

    ipv6: tcp: restore IP6CB for pktoptions skbs
    
    Baozeng Ding reported following KASAN splat :
    
    BUG: KASAN: use-after-free in ip6_datagram_recv_specific_ctl+0x13f1/0x15c0 at addr ffff880029c84ec8
    Read of size 1 by task poc/25548
    Call Trace:
     [<ffffffff82cf43c9>] dump_stack+0x12e/0x185 /lib/dump_stack.c:15
     [<     inline     >] print_address_description /mm/kasan/report.c:204
     [<ffffffff817ced3b>] kasan_report_error+0x48b/0x4b0 /mm/kasan/report.c:283
     [<     inline     >] kasan_report /mm/kasan/report.c:303
     [<ffffffff817ced9e>] __asan_report_load1_noabort+0x3e/0x40 /mm/kasan/report.c:321
     [<ffffffff85c71da1>] ip6_datagram_recv_specific_ctl+0x13f1/0x15c0 /net/ipv6/datagram.c:687
     [<ffffffff85c734c3>] ip6_datagram_recv_ctl+0x33/0x40
     [<ffffffff85c0b07c>] do_ipv6_getsockopt.isra.4+0xaec/0x2150
     [<ffffffff85c0c7f6>] ipv6_getsockopt+0x116/0x230
     [<ffffffff859b5a12>] tcp_getsockopt+0x82/0xd0 /net/ipv4/tcp.c:3035
     [<ffffffff855fb385>] sock_common_getsockopt+0x95/0xd0 /net/core/sock.c:2647
     [<     inline     >] SYSC_getsockopt /net/socket.c:1776
     [<ffffffff855f8ba2>] SyS_getsockopt+0x142/0x230 /net/socket.c:1758
     [<ffffffff8685cdc5>] entry_SYSCALL_64_fastpath+0x23/0xc6
    Memory state around the buggy address:
     ffff880029c84d80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff880029c84e00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    > ffff880029c84e80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
                                                  ^
     ffff880029c84f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
     ffff880029c84f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    
    He also provided a syzkaller reproducer.
    
    Issue is that ip6_datagram_recv_specific_ctl() expects to find IP6CB
    data that was moved at a different place in tcp_v6_rcv()
    
    This patch moves tcp_v6_restore_cb() up and calls it from
    tcp_v6_do_rcv() when np->pktoptions is set.
    
    Fixes: 971f10eca186 ("tcp: better TCP_SKB_CB layout to reduce cache line misses")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bcd8f2e94808fcddf6ef3af5f060a36820dcc432
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Sun Oct 9 13:23:27 2016 +0800

    scsi: Fix use-after-free
    
    This patch fixes one use-after-free report[1] by KASAN.
    
    In __scsi_scan_target(), when a type 31 device is probed,
    SCSI_SCAN_TARGET_PRESENT is returned and the target will be scanned
    again.
    
    Inside the following scsi_report_lun_scan(), one new scsi_device
    instance is allocated, and scsi_probe_and_add_lun() is called again to
    probe the target and still see type 31 device, finally
    __scsi_remove_device() is called to remove & free the device at the end
    of scsi_probe_and_add_lun(), so cause use-after-free in
    scsi_report_lun_scan().
    
    And the following SCSI log can be observed:
    
            scsi 0:0:2:0: scsi scan: INQUIRY pass 1 length 36
            scsi 0:0:2:0: scsi scan: INQUIRY successful with code 0x0
            scsi 0:0:2:0: scsi scan: peripheral device type of 31, no device added
            scsi 0:0:2:0: scsi scan: Sending REPORT LUNS to (try 0)
            scsi 0:0:2:0: scsi scan: REPORT LUNS successful (try 0) result 0x0
            scsi 0:0:2:0: scsi scan: REPORT LUN scan
            scsi 0:0:2:0: scsi scan: INQUIRY pass 1 length 36
            scsi 0:0:2:0: scsi scan: INQUIRY successful with code 0x0
            scsi 0:0:2:0: scsi scan: peripheral device type of 31, no device added
            BUG: KASAN: use-after-free in __scsi_scan_target+0xbf8/0xe40 at addr ffff88007b44a104
    
    This patch fixes the issue by moving the putting reference at
    the end of scsi_report_lun_scan().
    
    [1] KASAN report
    ==================================================================
    [    3.274597] PM: Adding info for serio:serio1
    [    3.275127] BUG: KASAN: use-after-free in __scsi_scan_target+0xd87/0xdf0 at addr ffff880254d8c304
    [    3.275653] Read of size 4 by task kworker/u10:0/27
    [    3.275903] CPU: 3 PID: 27 Comm: kworker/u10:0 Not tainted 4.8.0 #2121
    [    3.276258] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
    [    3.276797] Workqueue: events_unbound async_run_entry_fn
    [    3.277083]  ffff880254d8c380 ffff880259a37870 ffffffff94bbc6c1 ffff880078402d80
    [    3.277532]  ffff880254d8bb80 ffff880259a37898 ffffffff9459fec1 ffff880259a37930
    [    3.277989]  ffff880254d8bb80 ffff880078402d80 ffff880259a37920 ffffffff945a0165
    [    3.278436] Call Trace:
    [    3.278528]  [<ffffffff94bbc6c1>] dump_stack+0x65/0x84
    [    3.278797]  [<ffffffff9459fec1>] kasan_object_err+0x21/0x70
    [    3.279063] device: 'psaux': device_add
    [    3.279616]  [<ffffffff945a0165>] kasan_report_error+0x205/0x500
    [    3.279651] PM: Adding info for No Bus:psaux
    [    3.280202]  [<ffffffff944ecd22>] ? kfree_const+0x22/0x30
    [    3.280486]  [<ffffffff94bc2dc9>] ? kobject_release+0x119/0x370
    [    3.280805]  [<ffffffff945a0543>] __asan_report_load4_noabort+0x43/0x50
    [    3.281170]  [<ffffffff9507e1f7>] ? __scsi_scan_target+0xd87/0xdf0
    [    3.281506]  [<ffffffff9507e1f7>] __scsi_scan_target+0xd87/0xdf0
    [    3.281848]  [<ffffffff9507d470>] ? scsi_add_device+0x30/0x30
    [    3.282156]  [<ffffffff94f7f660>] ? pm_runtime_autosuspend_expiration+0x60/0x60
    [    3.282570]  [<ffffffff956ddb07>] ? _raw_spin_lock+0x17/0x40
    [    3.282880]  [<ffffffff9507e505>] scsi_scan_channel+0x105/0x160
    [    3.283200]  [<ffffffff9507e8a2>] scsi_scan_host_selected+0x212/0x2f0
    [    3.283563]  [<ffffffff9507eb3c>] do_scsi_scan_host+0x1bc/0x250
    [    3.283882]  [<ffffffff9507efc1>] do_scan_async+0x41/0x450
    [    3.284173]  [<ffffffff941c1fee>] async_run_entry_fn+0xfe/0x610
    [    3.284492]  [<ffffffff941a8954>] ? pwq_dec_nr_in_flight+0x124/0x2a0
    [    3.284876]  [<ffffffff941d1770>] ? preempt_count_add+0x130/0x160
    [    3.285207]  [<ffffffff941a9a84>] process_one_work+0x544/0x12d0
    [    3.285526]  [<ffffffff941aa8e9>] worker_thread+0xd9/0x12f0
    [    3.285844]  [<ffffffff941aa810>] ? process_one_work+0x12d0/0x12d0
    [    3.286182]  [<ffffffff941bb365>] kthread+0x1c5/0x260
    [    3.286443]  [<ffffffff940855cd>] ? __switch_to+0x88d/0x1430
    [    3.286745]  [<ffffffff941bb1a0>] ? kthread_worker_fn+0x5a0/0x5a0
    [    3.287085]  [<ffffffff956dde9f>] ret_from_fork+0x1f/0x40
    [    3.287368]  [<ffffffff941bb1a0>] ? kthread_worker_fn+0x5a0/0x5a0
    [    3.287697] Object at ffff880254d8bb80, in cache kmalloc-2048 size: 2048
    [    3.288064] Allocated:
    [    3.288147] PID = 27
    [    3.288218]  [<ffffffff940b27ab>] save_stack_trace+0x2b/0x50
    [    3.288531]  [<ffffffff9459f246>] save_stack+0x46/0xd0
    [    3.288806]  [<ffffffff9459f4bd>] kasan_kmalloc+0xad/0xe0
    [    3.289098]  [<ffffffff9459c07e>] __kmalloc+0x13e/0x250
    [    3.289378]  [<ffffffff95078e5a>] scsi_alloc_sdev+0xea/0xcf0
    [    3.289701]  [<ffffffff9507de76>] __scsi_scan_target+0xa06/0xdf0
    [    3.290034]  [<ffffffff9507e505>] scsi_scan_channel+0x105/0x160
    [    3.290362]  [<ffffffff9507e8a2>] scsi_scan_host_selected+0x212/0x2f0
    [    3.290724]  [<ffffffff9507eb3c>] do_scsi_scan_host+0x1bc/0x250
    [    3.291055]  [<ffffffff9507efc1>] do_scan_async+0x41/0x450
    [    3.291354]  [<ffffffff941c1fee>] async_run_entry_fn+0xfe/0x610
    [    3.291695]  [<ffffffff941a9a84>] process_one_work+0x544/0x12d0
    [    3.292022]  [<ffffffff941aa8e9>] worker_thread+0xd9/0x12f0
    [    3.292325]  [<ffffffff941bb365>] kthread+0x1c5/0x260
    [    3.292594]  [<ffffffff956dde9f>] ret_from_fork+0x1f/0x40
    [    3.292886] Freed:
    [    3.292945] PID = 27
    [    3.293016]  [<ffffffff940b27ab>] save_stack_trace+0x2b/0x50
    [    3.293327]  [<ffffffff9459f246>] save_stack+0x46/0xd0
    [    3.293600]  [<ffffffff9459fa61>] kasan_slab_free+0x71/0xb0
    [    3.293916]  [<ffffffff9459bac2>] kfree+0xa2/0x1f0
    [    3.294168]  [<ffffffff9508158a>] scsi_device_dev_release_usercontext+0x50a/0x730
    [    3.294598]  [<ffffffff941ace9a>] execute_in_process_context+0xda/0x130
    [    3.294974]  [<ffffffff9508107c>] scsi_device_dev_release+0x1c/0x20
    [    3.295322]  [<ffffffff94f566f6>] device_release+0x76/0x1e0
    [    3.295626]  [<ffffffff94bc2db7>] kobject_release+0x107/0x370
    [    3.295942]  [<ffffffff94bc29ce>] kobject_put+0x4e/0xa0
    [    3.296222]  [<ffffffff94f56e17>] put_device+0x17/0x20
    [    3.296497]  [<ffffffff9505201c>] scsi_device_put+0x7c/0xa0
    [    3.296801]  [<ffffffff9507e1bc>] __scsi_scan_target+0xd4c/0xdf0
    [    3.297132]  [<ffffffff9507e505>] scsi_scan_channel+0x105/0x160
    [    3.297458]  [<ffffffff9507e8a2>] scsi_scan_host_selected+0x212/0x2f0
    [    3.297829]  [<ffffffff9507eb3c>] do_scsi_scan_host+0x1bc/0x250
    [    3.298156]  [<ffffffff9507efc1>] do_scan_async+0x41/0x450
    [    3.298453]  [<ffffffff941c1fee>] async_run_entry_fn+0xfe/0x610
    [    3.298777]  [<ffffffff941a9a84>] process_one_work+0x544/0x12d0
    [    3.299105]  [<ffffffff941aa8e9>] worker_thread+0xd9/0x12f0
    [    3.299408]  [<ffffffff941bb365>] kthread+0x1c5/0x260
    [    3.299676]  [<ffffffff956dde9f>] ret_from_fork+0x1f/0x40
    [    3.299967] Memory state around the buggy address:
    [    3.300209]  ffff880254d8c200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [    3.300608]  ffff880254d8c280: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [    3.300986] >ffff880254d8c300: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [    3.301408]                    ^
    [    3.301550]  ffff880254d8c380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [    3.301987]  ffff880254d8c400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [    3.302396]
    ==================================================================
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit 19c4d2f994788a954af1aa7e53b0fdb46fd7925a
Author: Chris Mason <clm@fb.com>
Date:   Mon Oct 10 13:43:31 2016 -0700

    Revert "btrfs: let btrfs_delete_unused_bgs() to clean relocated bgs"
    
    This reverts commit 5d8eb6fe517583f9c6d5b94faf2254a0207a45c9.
    
    When we remove devices, we free the device structures.  Delaying
    btfs_remove_chunk() ends up hitting a use-after-free on them.
    
    Signed-off-by: Chris Mason <clm@fb.com>

commits)
      drivers: dma-coherent: Move spinlock in dma_alloc_from_coherent()
      drivers: dma-coherent: Fix DMA coherent size for less than page
      MAINTAINERS: extend firmware_class maintainer list
      debugfs: propagate release() call result
      driver-core: platform: Catch errors from calls to irq_get_irq_data
      sysfs print name of undiscoverable attribute group
      carl9170: fix debugfs crashes
      b43legacy: fix debugfs crash
      b43: fix debugfs crash
      debugfs: introduce a public file_operations accessor
      device core: Remove deprecated create_singlethread_workqueue
      drivers/base dmam_declare_coherent_memory leaks
      platform: don't return 0 from platform_get_irq[_byname]() on error
      cpu: clean up register_cpu func
      dma-mapping: use vma_pages().
      drivers: dma-coherent: use vma_pages().
      attribute_container: Fix typo
      base: soc: make it explicitly non-modular
      drivers: base: dma-mapping: page align the size when unmap_kernel_range
      platform driver: fix use-after-free in platform_device_del()
      ...

commit 04dc923c9e4c43df7d2d94f290189785d3172326
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Sep 15 18:05:16 2016 +0200

    rbd: img_data requests don't own their page array
    
    Move the check into rbd_obj_request_destroy() to avoid use-after-free
    on errors in rbd_img_request_fill(..., OBJ_REQUEST_PAGES, ...), where
    pages, owned by the caller, gets freed in rbd_img_request_fill().
    
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Reviewed-by: David Disseldorp <ddiss@suse.de>

commit 0d5b0cf246a3227d811e7bf55d756b273408e414
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Oct 3 09:48:08 2016 +1100

    fs: update atime before I/O in generic_file_read_iter
    
    After the call to ->direct_IO the final reference to the file might have
    been dropped by aio_complete already, and the call to file_accessed might
    cause a use after free.
    
    Instead update the access time before the I/O, similar to how we
    update the time stamps before writes.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit a447d7cd15c759d8ab7f3c9c8183aa8c999d7ed4
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Oct 3 09:47:34 2016 +1100

    xfs: update atime before I/O in xfs_file_dio_aio_read
    
    After the call to __blkdev_direct_IO the final reference to the file
    might have been dropped by aio_complete already, and the call to
    file_accessed might cause a use after free.
    
    Instead update the access time before the I/O, similar to how we
    update the time stamps before writes.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reported-and-tested-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit e96e0eded1335b9cfac71fcdd989d682eb3f8412
Author: jbaron@akamai.com <jbaron@akamai.com>
Date:   Mon Sep 26 11:00:44 2016 -0400

    bnx2x: free the mac filter group list before freeing the cmd
    
    The group list must be freed prior to freeing the command otherwise
    we have a use-after-free.
    
    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Cc: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Cc: Ariel Elior <Ariel.Elior@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acf91ec384dd4c7c2c88cbaa2e0374e537123c1f
Author: Laura Abbott <labbott@redhat.com>
Date:   Thu Sep 22 11:20:42 2016 -0700

    Bluetooth: btwilink: Save the packet type before sending
    
    Running with KASAN produces some messages:
    
    BUG: KASAN: use-after-free in ti_st_send_frame+0x9c/0x16c at addr
    ffffffc064868fe8
    Read of size 1 by task kworker/u17:1/1266
    
    <KASAN output trimmed>
    
    Hardware name: HiKey Development Board (DT)
    Workqueue: hci0 hci_cmd_work
    Call trace:
    [<ffffffc00008c00c>] dump_backtrace+0x0/0x178
    [<ffffffc00008c1a4>] show_stack+0x20/0x28
    [<ffffffc00067da38>] dump_stack+0xa8/0xe0
    [<ffffffc000288430>] print_trailer+0x110/0x174
    [<ffffffc00028aedc>] object_err+0x4c/0x5c
    [<ffffffc00028f714>] kasan_report_error+0x254/0x54c
    [<ffffffc00028fa70>] kasan_report+0x64/0x70
    [<ffffffc00028eb8c>] __asan_load1+0x4c/0x54
    [<ffffffc000b59b24>] ti_st_send_frame+0x9c/0x16c
    [<ffffffc000ee8dcc>] hci_send_frame+0xb4/0x118
    [<ffffffc000ee8efc>] hci_cmd_work+0xcc/0x154
    [<ffffffc0000f6c48>] process_one_work+0x26c/0x7a4
    [<ffffffc0000f721c>] worker_thread+0x9c/0x73c
    [<ffffffc000100250>] kthread+0x138/0x154
    [<ffffffc000085c50>] ret_from_fork+0x10/0x40
    
    The packet is being accessed for statistics after it has been freed.
    Save the packet type before sending for statistics afterwards.
    
    Signed-off-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commit c131f751ab1a852d4dd4b490b3a7fbba7d738de5
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Mon Sep 19 14:44:01 2016 -0700

    khugepaged: fix use-after-free in collapse_huge_page()
    
    hugepage_vma_revalidate() tries to re-check if we still should try to
    collapse small pages into huge one after the re-acquiring mmap_sem.
    
    The problem Dmitry Vyukov reported[1] is that the vma found by
    hugepage_vma_revalidate() can be suitable for huge pages, but not the
    same vma we had before dropping mmap_sem.  And dereferencing original
    vma can lead to fun results..
    
    Let's use vma hugepage_vma_revalidate() found instead of assuming it's the
    same as what we had before the lock was dropped.
    
    [1] http://lkml.kernel.org/r/CACT4Y+Z3gigBvhca9kRJFcjX0G70V_nRhbwKBU+yGoESBDKi9Q@mail.gmail.com
    
    Link: http://lkml.kernel.org/r/20160907122559.GA6542@black.fi.intel.com
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Ebru Akagunduz <ebru.akagunduz@gmail.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Sasha Levin <levinsasha928@gmail.com>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Suleiman Souhlal <suleiman@google.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: syzkaller <syzkaller@googlegroups.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cde5f1097356568492257a550766e45264cfa923
Author: John L. Hammond <john.hammond@intel.com>
Date:   Sun Sep 18 16:37:02 2016 -0400

    staging: lustre: ldlm: fix a use after free in ldlm_resource_get()
    
    If lvbo initialization has failed then save the return status (from
    lr_lvb_len) before putting the resource.
    
    Signed-off-by: John L. Hammond <john.hammond@intel.com>
    Intel-bug-id: https://jira.hpdd.intel.com/browse/LU-5305
    Reviewed-on: http://review.whamcloud.com/11017
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Reviewed-by: Emoly Liu <emoly.liu@intel.com>
    Reviewed-by: Dmitry Eremin <dmitry.eremin@intel.com>
    Signed-off-by: James Simmons <jsimmons@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 715f5552b1e90ba3eecf6d1a6d044d0d5226663f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Sep 10 23:11:23 2016 +0800

    sctp: hold the transport before using it in sctp_hash_cmp
    
    Since commit 4f0087812648 ("sctp: apply rhashtable api to send/recv
    path"), sctp uses transport rhashtable with .obj_cmpfn sctp_hash_cmp,
    in which it compares the members of the transport with the rhashtable
    args to check if it's the right transport.
    
    But sctp uses the transport without holding it in sctp_hash_cmp, it can
    cause a use-after-free panic. As after it gets transport from hashtable,
    another CPU may close the sk and free the asoc. In sctp_association_free,
    it frees all the transports, meanwhile, the assoc's refcnt may be reduced
    to 0, assoc can be destroyed by sctp_association_destroy.
    
    So after that, transport->assoc is actually an unavailable memory address
    in sctp_hash_cmp. Although sctp_hash_cmp is under rcu_read_lock, it still
    can not avoid this, as assoc is not freed by RCU.
    
    This patch is to hold the transport before checking it's members with
    sctp_transport_hold, in which it checks the refcnt first, holds it if
    it's not 0.
    
    Fixes: 4f0087812648 ("sctp: apply rhashtable api to send/recv path")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d762e49c2117d3829eb3355f2617aea080ed3a7
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Fri Sep 9 18:08:23 2016 +0200

    perf/x86/amd/uncore: Prevent use after free
    
    The resent conversion of the cpu hotplug support in the uncore driver
    introduced a regression due to the way the callbacks are invoked at
    initialization time.
    
    The old code called the prepare/starting/online function on each online cpu
    as a block. The new code registers the hotplug callbacks in the core for
    each state. The core invokes the callbacks at each registration on all
    online cpus.
    
    The code implicitely relied on the prepare/starting/online callbacks being
    called as combo on a particular cpu, which was not obvious and completely
    undocumented.
    
    The resulting subtle wreckage happens due to the way how the uncore code
    manages shared data structures for cpus which share an uncore resource in
    hardware. The sharing is determined in the cpu starting callback, but the
    prepare callback allocates per cpu data for the upcoming cpu because
    potential sharing is unknown at this point. If the starting callback finds
    a online cpu which shares the hardware resource it takes a refcount on the
    percpu data of that cpu and puts the own data structure into a
    'free_at_online' pointer of that shared data structure. The online callback
    frees that.
    
    With the old model this worked because in a starting callback only one non
    unused structure (the one of the starting cpu) was available. The new code
    allocates the data structures for all cpus when the prepare callback is
    registered.
    
    Now the starting function iterates through all online cpus and looks for a
    data structure (skipping its own) which has a matching hardware id. The id
    member of the data structure is initialized to 0, but the hardware id can
    be 0 as well. The resulting wreckage is:
    
      CPU0 finds a matching id on CPU1, takes a refcount on CPU1 data and puts
      its own data structure into CPU1s data structure to be freed.
    
      CPU1 skips CPU0 because the data structure is its allegedly unsued own.
      It finds a matching id on CPU2, takes a refcount on CPU1 data and puts
      its own data structure into CPU2s data structure to be freed.
    
      ....
    
    Now the online callbacks are invoked.
    
      CPU0 has a pointer to CPU1s data and frees the original CPU0 data. So
      far so good.
    
      CPU1 has a pointer to CPU2s data and frees the original CPU1 data, which
      is still referenced by CPU0 ---> Booom
    
    So there are two issues to be solved here:
    
    1) The id field must be initialized at allocation time to a value which
       cannot be a valid hardware id, i.e. -1
    
       This prevents the above scenario, but now CPU1 and CPU2 both stick their
       own data structure into the free_at_online pointer of CPU0. So we leak
       CPU1s data structure.
    
    2) Fix the memory leak described in #1
    
       Instead of having a single pointer, use a hlist to enqueue the
       superflous data structures which are then freed by the first cpu
       invoking the online callback.
    
    Ideally we should know the sharing _before_ invoking the prepare callback,
    but that's way beyond the scope of this bug fix.
    
    [ tglx: Rewrote changelog ]
    
    Fixes: 96b2bd3866a0 ("perf/x86/amd/uncore: Convert to hotplug state machine")
    Reported-and-tested-by: Eric Sandeen <sandeen@sandeen.net>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20160909160822.lowgmkdwms2dheyv@linutronix.de
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 0dbf657c3993a269fa0cd7dabbb9c02741d4aefa
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Wed Sep 7 19:07:57 2016 +0300

    net/mlx5e: Fix xmit_more counter race issue
    
    Update the xmit_more counter before notifying the HW,
    to prevent a possible use-after-free of the skb.
    
    Fixes: c8cf78fe100b ("net/mlx5e: Add ethtool counter for TX xmit_more")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2f86953e7436c9b9a4690909c5e2db24799e173b
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Sep 2 10:22:54 2016 +0200

    l2tp: fix use-after-free during module unload
    
    Tunnel deletion is delayed by both a workqueue (l2tp_tunnel_delete -> wq
     -> l2tp_tunnel_del_work) and RCU (sk_destruct -> RCU ->
    l2tp_tunnel_destruct).
    
    By the time l2tp_tunnel_destruct() runs to destroy the tunnel and finish
    destroying the socket, the private data reserved via the net_generic
    mechanism has already been freed, but l2tp_tunnel_destruct() actually
    uses this data.
    
    Make sure tunnel deletion for the netns has completed before returning
    from l2tp_exit_net() by first flushing the tunnel removal workqueue, and
    then waiting for RCU callbacks to complete.
    
    Fixes: 167eb17e0b17 ("l2tp: create tunnel sockets in the right namespace")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 68c6bcdd8bd00394c234b915ab9b97c74104130c
Author: Erez Shitrit <erezsh@mellanox.com>
Date:   Sun Aug 28 10:58:30 2016 +0300

    IB/core: Fix use after free in send_leave function
    
    The function send_leave sets the member: group->query_id
    (group->query_id = ret) after calling the sa_query, but leave_handler
    can be executed before the setting and it might delete the group object,
    and will get a memory corruption.
    
    Additionally, this patch gets rid of group->query_id variable which is
    not used.
    
    Fixes: faec2f7b96b5 ('IB/sa: Track multicast join/leave requests')
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit c11600e4fed67ae4cd6a8096936afd445410e8ed
Author: David Rientjes <rientjes@google.com>
Date:   Thu Sep 1 16:15:07 2016 -0700

    mm, mempolicy: task->mempolicy must be NULL before dropping final reference
    
    KASAN allocates memory from the page allocator as part of
    kmem_cache_free(), and that can reference current->mempolicy through any
    number of allocation functions.  It needs to be NULL'd out before the
    final reference is dropped to prevent a use-after-free bug:
    
            BUG: KASAN: use-after-free in alloc_pages_current+0x363/0x370 at addr ffff88010b48102c
            CPU: 0 PID: 15425 Comm: trinity-c2 Not tainted 4.8.0-rc2+ #140
            ...
            Call Trace:
                    dump_stack
                    kasan_object_err
                    kasan_report_error
                    __asan_report_load2_noabort
                    alloc_pages_current     <-- use after free
                    depot_save_stack
                    save_stack
                    kasan_slab_free
                    kmem_cache_free
                    __mpol_put              <-- free
                    do_exit
    
    This patch sets current->mempolicy to NULL before dropping the final
    reference.
    
    Link: http://lkml.kernel.org/r/alpine.DEB.2.10.1608301442180.63329@chino.kir.corp.google.com
    Fixes: cd11016e5f52 ("mm, kasan: stackdepot implementation. Enable stackdepot for SLAB")
    Signed-off-by: David Rientjes <rientjes@google.com>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>    [4.6+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c90aab9c96c2a7f7bf3f7a54167dc5c0ba2b178c
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Mon Jul 25 16:13:32 2016 +0200

    platform driver: fix use-after-free in platform_device_del()
    
    In platform_device_del(), the device is still used after a call to
    device_del(). At this point there is no guarantee that the device is
    still there and there could be a use-after-free access. Move the
    call to device_remove_properties() before device_del() to fix that.
    
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      Add Killer E2500 device ID in alx driver.
      net: smc91x: fix SMC accesses
      Documentation: networking: dsa: Remove platform device TODO
      net/mlx5: Increase number of ethtool steering priorities
      net/mlx5: Add error prints when validate ETS failed
      net/mlx5e: Fix memory leak if refreshing TIRs fails
      net/mlx5e: Add ethtool counter for TX xmit_more
      net/mlx5e: Fix ethtool -g/G rx ring parameter report with striding RQ
      net/mlx5e: Don't wait for SQ completions on close
      net/mlx5e: Don't post fragmented MPWQE when RQ is disabled
      net/mlx5e: Don't wait for RQ completions on close
      net/mlx5e: Limit UMR length to the device's limitation
      rhashtable: fix a memory leak in alloc_bucket_locks()
      sfc: fix potential stack corruption from running past stat bitmask
      team: loadbalance: push lacpdus to exact delivery
      net: hns: dereference ppe_cb->ppe_common_cb if it is non-null
      8139cp: Fix one possible deadloop in cp_rx_poll
      i40e: Change some init flow for the client
      Revert "phy: IRQ cannot be shared"
      net: dsa: bcm_sf2: Fix race condition while unmasking interrupts
      ...

commits)
      i40iw: Send last streaming mode message for loopback connections
      IB/srpt: Update sport->port_guid with each port refresh
      RDMA/ocrdma: Fix the max_sge reported from FW
      i40iw: Avoid writing to freed memory
      i40iw: Fix double free of allocated_buffer
      IB/mlx5: Remove superfluous include of io-mapping.h
      i40iw: Do not set self-referencing pointer to NULL after kfree
      i40iw: Add missing NULL check for MPA private data
      iw_cxgb4: Fix cxgb4 arm CQ logic w/IB_CQ_REPORT_MISSED_EVENTS
      i40iw: Add missing check for interface already open
      i40iw: Protect req_resource_num update
      i40iw: Change mem_resources pointer to a u8
      IB/core: Use memdup_user() rather than duplicating its implementation
      IB/qib: Use memdup_user() rather than duplicating its implementation
      iw_cxgb4: use the MPA initiator's IRD if < our ORD
      iw_cxgb4: limit IRD/ORD advertised to ULP by device max.
      IB/hfi1: Fix mm_struct use after free
      IB/rdmvat: Fix double vfree() in rvt_create_qp() error path
      IB/hfi1: Improve J_KEY generation
      IB/hfi1: Return invalid field for non-QSFP CableInfo queries
      ...

commit c15e07b02bf0450bc8e60f2cc51cb42daa371417
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Aug 25 18:30:52 2016 +0200

    team: loadbalance: push lacpdus to exact delivery
    
    When team is in bridge and LACP is utilized, LACPDU packets are pushed
    to userspace using raw socket and there they are processed. However,
    since 8626c56c8279b, LACPDU skbs are dropped by bridge rx_handler so
    they never reach packet handlers in rx path. Fix this by explicity treat
    LACPDUs to be pushed to exact delivery in team rx_handler.
    
    Reported-by: Ido Schimmel <idosch@mellanox.com>
    Fixes: 8626c56c8279b ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 869c554808ccf7ddd25be5317073b88ceddb8507
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Aug 25 14:11:43 2016 -0600

    mmc: fix use-after-free of struct request
    
    We call mmc_req_is_special() after having processed a request, but
    it could be freed after that. Check that ahead of time, and use
    the cached value.
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: c2df40dfb8c0 ("drivers: use req op accessor")
    
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 533e33009897c7dd1b0424c0d4b3331b222d5681
Author: Liping Zhang <liping.zhang@spreadtrum.com>
Date:   Mon Aug 22 21:58:18 2016 +0800

    netfilter: cttimeout: unlink timeout objs in the unconfirmed ct lists
    
    KASAN reported this bug:
      BUG: KASAN: use-after-free in icmp_packet+0x25/0x50 [nf_conntrack_ipv4] at
      addr ffff880002db08c8
      Read of size 4 by task lt-nf-queue/19041
      Call Trace:
      <IRQ>  [<ffffffff815eeebb>] dump_stack+0x63/0x88
      [<ffffffff813386f8>] kasan_report_error+0x528/0x560
      [<ffffffff81338cc8>] kasan_report+0x58/0x60
      [<ffffffffa07393f5>] ? icmp_packet+0x25/0x50 [nf_conntrack_ipv4]
      [<ffffffff81337551>] __asan_load4+0x61/0x80
      [<ffffffffa07393f5>] icmp_packet+0x25/0x50 [nf_conntrack_ipv4]
      [<ffffffffa06ecaa0>] nf_conntrack_in+0x550/0x980 [nf_conntrack]
      [<ffffffffa06ec550>] ? __nf_conntrack_confirm+0xb10/0xb10 [nf_conntrack]
      [ ... ]
    
    The main reason is that we missed to unlink the timeout objects in the
    unconfirmed ct lists, so we will access the timeout objects that have
    already been freed.
    
    Signed-off-by: Liping Zhang <liping.zhang@spreadtrum.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit e0cf75deab8155334c8228eb7f097b15127d0a49
Author: Ira Weiny <ira.weiny@intel.com>
Date:   Tue Aug 16 13:27:03 2016 -0700

    IB/hfi1: Fix mm_struct use after free
    
    Testing with CONFIG_SLUB_DEBUG_ON=y resulted in the kernel panic below.
    
    This is the result of the mm_struct sometimes being free'd prior to
    hfi1_file_close being called.
    
    This was due to the combination of 2 reasons:
    
    1) hfi1_file_close is deferred in process exit and it therefore may not
       be called synchronously with process exit.
    2) exit_mm is called prior to exit_files in do_exit.  Normally this is ok
       however, our kernel bypass code requires us to have access to the
       mm_struct for house keeping both at "normal" close time as well as at
       process exit.
    
    Therefore, the fix is to simply keep a reference to the mm_struct until
    we are done with it.
    
    [ 3006.340150] general protection fault: 0000 [#1] SMP
    [ 3006.346469] Modules linked in: hfi1 rdmavt rpcrdma ib_isert iscsi_target_mod
    ib_iser libiscsi scsi_transport_iscsi ib_srpt target_core_mod
     ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_ucm ib_uverbs ib_umad rdma_cm
     ib_cm iw_cm dm_mirror dm_region_hash dm_log dm_mod snd_hda_code
     c_realtek iTCO_wdt snd_hda_codec_generic iTCO_vendor_support sb_edac edac_core
     x86_pkg_temp_thermal intel_powerclamp coretemp kvm irqbypass c
     rct10dif_pclmul crc32_pclmul ghash_clmulni_intel aesni_intel lrw snd_hda_intel
     gf128mul snd_hda_codec glue_helper snd_hda_core ablk_helper sn
     d_hwdep cryptd snd_seq snd_seq_device snd_pcm snd_timer snd soundcore pcspkr
     shpchp mei_me sg lpc_ich mei i2c_i801 mfd_core ioatdma ipmi_devi
     ntf wmi ipmi_si ipmi_msghandler acpi_cpufreq nfsd auth_rpcgss nfs_acl lockd
     grace sunrpc ip_tables ext4 jbd2 mbcache mlx4_en ib_core sr_mod s
     d_mod cdrom crc32c_intel mgag200 drm_kms_helper syscopyarea sysfillrect igb
     sysimgblt fb_sys_fops ptp mlx4_core ttm isci pps_core ahci drm li
     bsas libahci dca firewire_ohci i2c_algo_bit scsi_transport_sas firewire_core
     crc_itu_t i2c_core libata [last unloaded: mlx4_ib]
     [ 3006.461759] CPU: 16 PID: 11624 Comm: mpi_stress Not tainted 4.7.0-rc5+ #1
     [ 3006.469915] Hardware name: Intel Corporation W2600CR ........../W2600CR, BIOS SE5C600.86B.01.08.0003.022620131521 02/26/2013
     [ 3006.483027] task: ffff8804102f0040 ti: ffff8804102f8000 task.ti: ffff8804102f8000
     [ 3006.491971] RIP: 0010:[<ffffffff810f0383>]  [<ffffffff810f0383>] __lock_acquire+0xb3/0x19e0
     [ 3006.501905] RSP: 0018:ffff8804102fb908  EFLAGS: 00010002
     [ 3006.508447] RAX: 6b6b6b6b6b6b6b6b RBX: 0000000000000001 RCX: 0000000000000000
     [ 3006.517012] RDX: 0000000000000001 RSI: 0000000000000000 RDI: ffff880410b56a40
     [ 3006.525569] RBP: ffff8804102fb9b0 R08: 0000000000000001 R09: 0000000000000000
     [ 3006.534119] R10: ffff8804102f0040 R11: 0000000000000000 R12: 0000000000000000
     [ 3006.542664] R13: ffff880410b56a40 R14: 0000000000000000 R15: 0000000000000000
     [ 3006.551203] FS:  00007ff478c08700(0000) GS:ffff88042e200000(0000) knlGS:0000000000000000
     [ 3006.560814] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [ 3006.567806] CR2: 00007f667f5109e0 CR3: 0000000001c06000 CR4: 00000000000406e0
     [ 3006.576352] Stack:
     [ 3006.579157]  ffffffff8124b819 ffffffffffffffff 0000000000000000 ffff8804102fb940
     [ 3006.588072]  0000000000000002 0000000000000000 ffff8804102f0040 0000000000000007
     [ 3006.596971]  0000000000000006 ffff8803cad6f000 0000000000000000 ffff8804102f0040
     [ 3006.605878] Call Trace:
     [ 3006.609220]  [<ffffffff8124b819>] ? uncharge_batch+0x109/0x250
     [ 3006.616382]  [<ffffffff810f2313>] lock_acquire+0xd3/0x220
     [ 3006.623056]  [<ffffffffa0a30bfc>] ? hfi1_release_user_pages+0x7c/0xa0 [hfi1]
     [ 3006.631593]  [<ffffffff81775579>] down_write+0x49/0x80
     [ 3006.638022]  [<ffffffffa0a30bfc>] ? hfi1_release_user_pages+0x7c/0xa0 [hfi1]
     [ 3006.646569]  [<ffffffffa0a30bfc>] hfi1_release_user_pages+0x7c/0xa0 [hfi1]
     [ 3006.654898]  [<ffffffffa0a2efb6>] cacheless_tid_rb_remove+0x106/0x330 [hfi1]
     [ 3006.663417]  [<ffffffff810efd36>] ? mark_held_locks+0x66/0x90
     [ 3006.670498]  [<ffffffff817771f6>] ? _raw_spin_unlock_irqrestore+0x36/0x60
     [ 3006.678741]  [<ffffffffa0a2f1ee>] tid_rb_remove+0xe/0x10 [hfi1]
     [ 3006.686010]  [<ffffffffa0a0c5d5>] hfi1_mmu_rb_unregister+0xc5/0x100 [hfi1]
     [ 3006.694387]  [<ffffffffa0a2fcb9>] hfi1_user_exp_rcv_free+0x39/0x120 [hfi1]
     [ 3006.702732]  [<ffffffffa09fc6ea>] hfi1_file_close+0x17a/0x330 [hfi1]
     [ 3006.710489]  [<ffffffff81263e9a>] __fput+0xfa/0x230
     [ 3006.716595]  [<ffffffff8126400e>] ____fput+0xe/0x10
     [ 3006.722696]  [<ffffffff810b95c6>] task_work_run+0x86/0xc0
     [ 3006.729379]  [<ffffffff81099933>] do_exit+0x323/0xc40
     [ 3006.735672]  [<ffffffff8109a2dc>] do_group_exit+0x4c/0xc0
     [ 3006.742371]  [<ffffffff810a7f55>] get_signal+0x345/0x940
     [ 3006.748958]  [<ffffffff810340c7>] do_signal+0x37/0x700
     [ 3006.755328]  [<ffffffff8127872a>] ? poll_select_set_timeout+0x5a/0x90
     [ 3006.763146]  [<ffffffff811609cb>] ? __audit_syscall_exit+0x1db/0x260
     [ 3006.770853]  [<ffffffff8110f3e3>] ? rcu_read_lock_sched_held+0x93/0xa0
     [ 3006.778765]  [<ffffffff812347a4>] ? kfree+0x1e4/0x2a0
     [ 3006.784986]  [<ffffffff8108e75a>] ? exit_to_usermode_loop+0x33/0xac
     [ 3006.792551]  [<ffffffff8108e785>] exit_to_usermode_loop+0x5e/0xac
     [ 3006.799907]  [<ffffffff81003dca>] do_syscall_64+0x12a/0x190
     [ 3006.806664]  [<ffffffff81777a7f>] entry_SYSCALL64_slow_path+0x25/0x25
     [ 3006.814396] Code: 24 08 44 89 44 24 10 89 4c 24 18 e8 a8 d8 ff ff 48 85 c0
     8b 4c 24 18 44 8b 44 24 10 44 8b 4c 24 08 4c 8b 14 24 0f 84 30
     08 00 00 <f0> ff 80 98 01 00 00 8b 3d 48 ad be 01 45 8b a2 90 0b 00 00 85
     [ 3006.837158] RIP  [<ffffffff810f0383>] __lock_acquire+0xb3/0x19e0
     [ 3006.844401]  RSP <ffff8804102fb908>
     [ 3006.851170] ---[ end trace b7b9f21cf06c27df ]---
     [ 3006.927420] Kernel panic - not syncing: Fatal exception
     [ 3006.933954] Kernel Offset: disabled
     [ 3006.940961] ---[ end Kernel panic - not syncing: Fatal exception
     [ 3006.948249] ------------[ cut here ]------------
    
    Fixes: 3faa3d9a308e ("IB/hfi1: Make use of mm consistent")
    Reviewed-by: Dean Luick <dean.luick@intel.com>
    Signed-off-by: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 98096d8a787f05b1afe3869aa01e84981915c81d
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Aug 18 11:16:35 2016 -0700

    nvme-fabrics: get a reference when reusing a nvme_host structure
    
    Without this we'll get a use after free after connecting two controller
    using the same hostnqn and then disconnecting one of them.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jay Freyensee <james_p_freyensee@linux.intel.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit bb1fceca22492109be12640d49f5ea5a544c6bb4
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 17 05:56:26 2016 -0700

    tcp: fix use after free in tcp_xmit_retransmit_queue()
    
    When tcp_sendmsg() allocates a fresh and empty skb, it puts it at the
    tail of the write queue using tcp_add_write_queue_tail()
    
    Then it attempts to copy user data into this fresh skb.
    
    If the copy fails, we undo the work and remove the fresh skb.
    
    Unfortunately, this undo lacks the change done to tp->highest_sack and
    we can leave a dangling pointer (to a freed skb)
    
    Later, tcp_xmit_retransmit_queue() can dereference this pointer and
    access freed memory. For regular kernels where memory is not unmapped,
    this might cause SACK bugs because tcp_highest_sack_seq() is buggy,
    returning garbage instead of tp->snd_nxt, but with various debug
    features like CONFIG_DEBUG_PAGEALLOC, this can crash the kernel.
    
    This bug was found by Marco Grassi thanks to syzkaller.
    
    Fixes: 6859d49475d4 ("[TCP]: Abstract tp->highest_sack accessing & point to next skb")
    Reported-by: Marco Grassi <marco.gra@gmail.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
    Cc: Yuchung Cheng <ycheng@google.com>
    Cc: Neal Cardwell <ncardwell@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b75911b66ad508a3c3f006ce37d9f9ebee34da43
Author: Liping Zhang <liping.zhang@spreadtrum.com>
Date:   Thu Aug 18 20:39:05 2016 +0800

    netfilter: cttimeout: fix use after free error when delete netns
    
    In general, when we want to delete a netns, cttimeout_net_exit will
    be called before ipt_unregister_table, i.e. before ctnl_timeout_put.
    
    But after call kfree_rcu in cttimeout_net_exit, we will still decrease
    the timeout object's refcnt in ctnl_timeout_put, this is incorrect,
    and will cause a use after free error.
    
    It is easy to reproduce this problem:
      # while : ; do
      ip netns add xxx
      ip netns exec xxx nfct add timeout testx inet icmp timeout 200
      ip netns exec xxx iptables -t raw -p icmp -I OUTPUT -j CT --timeout testx
      ip netns del xxx
      done
    
      =======================================================================
      BUG kmalloc-96 (Tainted: G    B       E  ): Poison overwritten
      -----------------------------------------------------------------------
      INFO: 0xffff88002b5161e8-0xffff88002b5161e8. First byte 0x6a instead of
      0x6b
      INFO: Allocated in cttimeout_new_timeout+0xd4/0x240 [nfnetlink_cttimeout]
      age=104 cpu=0 pid=3330
      ___slab_alloc+0x4da/0x540
      __slab_alloc+0x20/0x40
      __kmalloc+0x1c8/0x240
      cttimeout_new_timeout+0xd4/0x240 [nfnetlink_cttimeout]
      nfnetlink_rcv_msg+0x21a/0x230 [nfnetlink]
      [ ... ]
    
    So only when the refcnt decreased to 0, we call kfree_rcu to free the
    timeout object. And like nfnetlink_acct do, use atomic_cmpxchg to
    avoid race between ctnl_timeout_try_del and ctnl_timeout_put.
    
    Signed-off-by: Liping Zhang <liping.zhang@spreadtrum.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit d2d371ae5dd6af9a6a3d7f50b753627c42868409
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Aug 16 16:45:38 2016 +0200

    net: ipconfig: Fix more use after free
    
    While commit 9c706a49d660 ("net: ipconfig: fix use after free") avoids
    the use after free, the resulting code still ends up calling both the
    ic_setup_if() and ic_setup_routes() after calling ic_close_devs(), and
    access to the device is still required.
    
    Move the call to ic_close_devs() to the very end of the function.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3256aaef5e9a851f6be47656868020726e102187
Author: Vincent Stehlé <vincent.stehle@intel.com>
Date:   Tue Aug 16 15:11:25 2016 +0200

    nvmet-rdma: Fix use after free
    
    Avoid dereferencing the queue pointer in nvmet_rdma_release_queue_work()
    after it has been freed by nvmet_rdma_free_queue().
    
    Fixes: d8f7750a08968b10 ("nvmet-rdma: Correctly handle RDMA device hot removal")
    Signed-off-by: Vincent Stehlé <vincent.stehle@intel.com>
    Cc: Sagi Grimberg <sagi@grimberg.me>
    Cc: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>

commit eb8fc32354aa77678dc6e7950a8f0c79cace204f
Author: Vincent <vincent.stehle@laposte.net>
Date:   Sun Aug 14 15:38:29 2016 +0200

    mlxsw: spectrum_router: Fix use after free
    
    In mlxsw_sp_router_fib4_add_info_destroy(), the fib_entry pointer is used
    after it has been freed by mlxsw_sp_fib_entry_destroy(). Use a temporary
    variable to fix this.
    
    Fixes: 61c503f976b5449e ("mlxsw: spectrum_router: Implement fib4 add/del switchdev obj ops")
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Cc: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bbe11fab0b6c1d113776b2898e085bf4d1fdc607
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Thu Aug 11 15:24:27 2016 +0200

    macsec: use after free when deleting the underlying device
    
    macsec_notify() loops over the list of macsec devices configured on the
    underlying device when this device is being removed.  This list is part
    of the rx_handler data.
    
    However, macsec_dellink unregisters the rx_handler and frees the
    rx_handler data when the last macsec device is removed from the
    underlying device.
    
    Add macsec_common_dellink() to delete macsec devices without
    unregistering the rx_handler and freeing the associated data.
    
    Fixes: 960d5848dbf1 ("macsec: fix memory leaks around rx_handler (un)registration")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 104a493390940e85fb7c840a9fd5214aba5cb3bd
Author: Jason Wang <jasowang@redhat.com>
Date:   Thu Aug 11 18:15:56 2016 +0800

    macvtap: fix use after free for skb_array during release
    
    We've clean skb_array in macvtap_put_queue() but still try to pop from
    it during macvtap_sock_destruct(). Fix this use after free by moving
    the skb array cleanup to macvtap_sock_destruct() instead.
    
    Fixes: 362899b8725b ("macvtap: switch to use skb array")
    Reported-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Tested-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c706a49d660653625d206f6972541c1f60ea2b0
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Aug 10 11:44:17 2016 +0200

    net: ipconfig: fix use after free
    
    ic_close_devs() calls kfree() for all devices's ic_device. Since commit
    2647cffb2bc6 ("net: ipconfig: Support using "delayed" DHCP replies")
    the active device's ic_device is still used however to print the
    ipconfig summary which results in an oops if the memory is already
    changed. So delay freeing until after the autoconfig results are
    reported.
    
    Fixes: 2647cffb2bc6 ("net: ipconfig: Support using "delayed" DHCP replies")
    Reported-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Tested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3fda5d6e580193fa005014355b3a61498f1b3ae0
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Thu Aug 4 14:52:53 2016 +0100

    vhost/vsock: fix vhost virtio_vsock_pkt use-after-free
    
    Stash the packet length in a local variable before handing over
    ownership of the packet to virtio_transport_recv_pkt() or
    virtio_transport_free_pkt().
    
    This patch solves the use-after-free since pkt is no longer guaranteed
    to be alive.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

commit 77da160530dd1dc94f6ae15a981f24e5f0021e84
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Fri Jul 29 10:40:31 2016 +0200

    block: fix use-after-free in seq file
    
    I got a KASAN report of use-after-free:
    
        ==================================================================
        BUG: KASAN: use-after-free in klist_iter_exit+0x61/0x70 at addr ffff8800b6581508
        Read of size 8 by task trinity-c1/315
        =============================================================================
        BUG kmalloc-32 (Not tainted): kasan: bad access detected
        -----------------------------------------------------------------------------
    
        Disabling lock debugging due to kernel taint
        INFO: Allocated in disk_seqf_start+0x66/0x110 age=144 cpu=1 pid=315
                ___slab_alloc+0x4f1/0x520
                __slab_alloc.isra.58+0x56/0x80
                kmem_cache_alloc_trace+0x260/0x2a0
                disk_seqf_start+0x66/0x110
                traverse+0x176/0x860
                seq_read+0x7e3/0x11a0
                proc_reg_read+0xbc/0x180
                do_loop_readv_writev+0x134/0x210
                do_readv_writev+0x565/0x660
                vfs_readv+0x67/0xa0
                do_preadv+0x126/0x170
                SyS_preadv+0xc/0x10
                do_syscall_64+0x1a1/0x460
                return_from_SYSCALL_64+0x0/0x6a
        INFO: Freed in disk_seqf_stop+0x42/0x50 age=160 cpu=1 pid=315
                __slab_free+0x17a/0x2c0
                kfree+0x20a/0x220
                disk_seqf_stop+0x42/0x50
                traverse+0x3b5/0x860
                seq_read+0x7e3/0x11a0
                proc_reg_read+0xbc/0x180
                do_loop_readv_writev+0x134/0x210
                do_readv_writev+0x565/0x660
                vfs_readv+0x67/0xa0
                do_preadv+0x126/0x170
                SyS_preadv+0xc/0x10
                do_syscall_64+0x1a1/0x460
                return_from_SYSCALL_64+0x0/0x6a
    
        CPU: 1 PID: 315 Comm: trinity-c1 Tainted: G    B           4.7.0+ #62
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
         ffffea0002d96000 ffff880119b9f918 ffffffff81d6ce81 ffff88011a804480
         ffff8800b6581500 ffff880119b9f948 ffffffff8146c7bd ffff88011a804480
         ffffea0002d96000 ffff8800b6581500 fffffffffffffff4 ffff880119b9f970
        Call Trace:
         [<ffffffff81d6ce81>] dump_stack+0x65/0x84
         [<ffffffff8146c7bd>] print_trailer+0x10d/0x1a0
         [<ffffffff814704ff>] object_err+0x2f/0x40
         [<ffffffff814754d1>] kasan_report_error+0x221/0x520
         [<ffffffff8147590e>] __asan_report_load8_noabort+0x3e/0x40
         [<ffffffff83888161>] klist_iter_exit+0x61/0x70
         [<ffffffff82404389>] class_dev_iter_exit+0x9/0x10
         [<ffffffff81d2e8ea>] disk_seqf_stop+0x3a/0x50
         [<ffffffff8151f812>] seq_read+0x4b2/0x11a0
         [<ffffffff815f8fdc>] proc_reg_read+0xbc/0x180
         [<ffffffff814b24e4>] do_loop_readv_writev+0x134/0x210
         [<ffffffff814b4c45>] do_readv_writev+0x565/0x660
         [<ffffffff814b8a17>] vfs_readv+0x67/0xa0
         [<ffffffff814b8de6>] do_preadv+0x126/0x170
         [<ffffffff814b92ec>] SyS_preadv+0xc/0x10
    
    This problem can occur in the following situation:
    
    open()
     - pread()
        - .seq_start()
           - iter = kmalloc() // succeeds
           - seqf->private = iter
        - .seq_stop()
           - kfree(seqf->private)
     - pread()
        - .seq_start()
           - iter = kmalloc() // fails
        - .seq_stop()
           - class_dev_iter_exit(seqf->private) // boom! old pointer
    
    As the comment in disk_seqf_stop() says, stop is called even if start
    failed, so we need to reinitialise the private pointer to NULL when seq
    iteration stops.
    
    An alternative would be to set the private pointer to NULL when the
    kmalloc() in disk_seqf_start() fails.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit b3cbd9bf77cd1888114dbee1653e79aa23fd4068
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Tue Aug 2 14:02:52 2016 -0700

    mm/kasan: get rid of ->state in struct kasan_alloc_meta
    
    The state of object currently tracked in two places - shadow memory, and
    the ->state field in struct kasan_alloc_meta.  We can get rid of the
    latter.  The will save us a little bit of memory.  Also, this allow us
    to move free stack into struct kasan_alloc_meta, without increasing
    memory consumption.  So now we should always know when the last time the
    object was freed.  This may be useful for long delayed use-after-free
    bugs.
    
    As a side effect this fixes following UBSAN warning:
            UBSAN: Undefined behaviour in mm/kasan/quarantine.c:102:13
            member access within misaligned address ffff88000d1efebc for type 'struct qlist_node'
            which requires 8 byte alignment
    
    Link: http://lkml.kernel.org/r/1470062715-14077-5-git-send-email-aryabinin@virtuozzo.com
    Reported-by: kernel test robot <xiaolong.ye@intel.com>
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4a3d308d6674fabf213bce9c1a661ef43a85e515
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Tue Aug 2 14:02:40 2016 -0700

    mm/kasan: fix corruptions and false positive reports
    
    Once an object is put into quarantine, we no longer own it, i.e.  object
    could leave the quarantine and be reallocated.  So having set_track()
    call after the quarantine_put() may corrupt slab objects.
    
     BUG kmalloc-4096 (Not tainted): Poison overwritten
     -----------------------------------------------------------------------------
     Disabling lock debugging due to kernel taint
     INFO: 0xffff8804540de850-0xffff8804540de857. First byte 0xb5 instead of 0x6b
    ...
     INFO: Freed in qlist_free_all+0x42/0x100 age=75 cpu=3 pid=24492
      __slab_free+0x1d6/0x2e0
      ___cache_free+0xb6/0xd0
      qlist_free_all+0x83/0x100
      quarantine_reduce+0x177/0x1b0
      kasan_kmalloc+0xf3/0x100
      kasan_slab_alloc+0x12/0x20
      kmem_cache_alloc+0x109/0x3e0
      mmap_region+0x53e/0xe40
      do_mmap+0x70f/0xa50
      vm_mmap_pgoff+0x147/0x1b0
      SyS_mmap_pgoff+0x2c7/0x5b0
      SyS_mmap+0x1b/0x30
      do_syscall_64+0x1a0/0x4e0
      return_from_SYSCALL_64+0x0/0x7a
     INFO: Slab 0xffffea0011503600 objects=7 used=7 fp=0x          (null) flags=0x8000000000004080
     INFO: Object 0xffff8804540de848 @offset=26696 fp=0xffff8804540dc588
     Redzone ffff8804540de840: bb bb bb bb bb bb bb bb                          ........
     Object ffff8804540de848: 6b 6b 6b 6b 6b 6b 6b 6b b5 52 00 00 f2 01 60 cc  kkkkkkkk.R....`.
    
    Similarly, poisoning after the quarantine_put() leads to false positive
    use-after-free reports:
    
     BUG: KASAN: use-after-free in anon_vma_interval_tree_insert+0x304/0x430 at addr ffff880405c540a0
     Read of size 8 by task trinity-c0/3036
     CPU: 0 PID: 3036 Comm: trinity-c0 Not tainted 4.7.0-think+ #9
     Call Trace:
       dump_stack+0x68/0x96
       kasan_report_error+0x222/0x600
       __asan_report_load8_noabort+0x61/0x70
       anon_vma_interval_tree_insert+0x304/0x430
       anon_vma_chain_link+0x91/0xd0
       anon_vma_clone+0x136/0x3f0
       anon_vma_fork+0x81/0x4c0
       copy_process.part.47+0x2c43/0x5b20
       _do_fork+0x16d/0xbd0
       SyS_clone+0x19/0x20
       do_syscall_64+0x1a0/0x4e0
       entry_SYSCALL64_slow_path+0x25/0x25
    
    Fix this by putting an object in the quarantine after all other
    operations.
    
    Fixes: 80a9201a5965 ("mm, kasan: switch SLUB to stackdepot, enable memory quarantine for SLUB")
    Link: http://lkml.kernel.org/r/1470062715-14077-1-git-send-email-aryabinin@virtuozzo.com
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Reported-by: Sasha Levin <alexander.levin@verizon.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7522c03ae307e657114ff909aec650304371a134
Author: Tom Zanussi <tom.zanussi@linux.intel.com>
Date:   Wed Jun 29 19:56:00 2016 -0500

    tracing: Fix use-after-free in hist_register_trigger()
    
    This fixes a use-after-free case flagged by KASAN; make sure the test
    happens before the potential free in this case.
    
    Link: http://lkml.kernel.org/r/48fd74ab61bebd7dca9714386bb47d7c5ccd6a7b.1467247517.git.tom.zanussi@linux.intel.com
    
    Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit 47c1856971dd05cac730f70d073518da021b2e5c
Author: Steven Rostedt <rostedt@goodmis.org>
Date:   Wed Jun 29 19:55:59 2016 -0500

    tracing: Fix use-after-free in hist_unreg_all/hist_enable_unreg_all
    
    While running tools/testing/selftests test suite with KASAN, Dmitry
    Vyukov hit the following use-after-free report:
    
      ==================================================================
      BUG: KASAN: use-after-free in hist_unreg_all+0x1a1/0x1d0 at addr
      ffff880031632cc0
      Read of size 8 by task ftracetest/7413
      ==================================================================
      BUG kmalloc-128 (Not tainted): kasan: bad access detected
      ------------------------------------------------------------------
    
    This fixes the problem, along with the same problem in
    hist_enable_unreg_all().
    
    Link: http://lkml.kernel.org/r/c3d05b79e42555b6e36a3a99aae0e37315ee5304.1467247517.git.tom.zanussi@linux.intel.com
    
    Cc: Dmitry Vyukov <dvyukov@google.com>
    [Copied Steve's hist_enable_unreg_all() fix to hist_unreg_all()]
    Signed-off-by: Tom Zanussi <tom.zanussi@linux.intel.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit with ADR / directed-flushing.
    
       The pcommit instruction, which has not shipped on any product, is
       deprecated.  Instead, the requirement is that platforms implement
       either ADR, or provide one or more flush addresses per nvdimm.
    
       ADR (Asynchronous DRAM Refresh) flushes data in posted write buffers
       to the memory controller on a power-fail event.
    
       Flush addresses are defined in ACPI 6.x as an NVDIMM Firmware
       Interface Table (NFIT) sub-structure: "Flush Hint Address Structure".
       A flush hint is an mmio address that when written and fenced assures
       that all previous posted writes targeting a given dimm have been
       flushed to media.
    
     - On-demand ARS (address range scrub).
    
       Linux uses the results of the ACPI ARS commands to track bad blocks
       in pmem devices.  When latent errors are detected we re-scrub the
       media to refresh the bad block list, userspace can also request a
       re-scrub at any time.
    
     - Support for the Microsoft DSM (device specific method) command
       format.
    
     - Support for EDK2/OVMF virtual disk device memory ranges.
    
     - Various fixes and cleanups across the subsystem.
    
    * tag 'libnvdimm-for-4.8' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm: (41 commits)
      libnvdimm-btt: Delete an unnecessary check before the function call "__nd_device_register"
      nfit: do an ARS scrub on hitting a latent media error
      nfit: move to nfit/ sub-directory
      nfit, libnvdimm: allow an ARS scrub to be triggered on demand
      libnvdimm: register nvdimm_bus devices with an nd_bus driver
      pmem: clarify a debug print in pmem_clear_poison
      x86/insn: remove pcommit
      Revert "KVM: x86: add pcommit support"
      nfit, tools/testing/nvdimm/: unify shutdown paths
      libnvdimm: move ->module to struct nvdimm_bus_descriptor
      nfit: cleanup acpi_nfit_init calling convention
      nfit: fix _FIT evaluation memory leak + use after free
      tools/testing/nvdimm: add manufacturing_{date|location} dimm properties
      tools/testing/nvdimm: add virtual ramdisk range
      acpi, nfit: treat virtual ramdisk SPA as pmem region
      pmem: kill __pmem address space
      pmem: kill wmb_pmem()
      libnvdimm, pmem: use nvdimm_flush() for namespace I/O writes
      fs/dax: remove wmb_pmem()
      libnvdimm, pmem: flush posted-write queues on shutdown
      ...

commits)
      mm, compaction: simplify contended compaction handling
      mm, compaction: introduce direct compaction priority
      mm, thp: remove __GFP_NORETRY from khugepaged and madvised allocations
      mm, page_alloc: make THP-specific decisions more generic
      mm, page_alloc: restructure direct compaction handling in slowpath
      mm, page_alloc: don't retry initial attempt in slowpath
      mm, page_alloc: set alloc_flags only once in slowpath
      lib/stackdepot.c: use __GFP_NOWARN for stack allocations
      mm, kasan: switch SLUB to stackdepot, enable memory quarantine for SLUB
      mm, kasan: account for object redzone in SLUB's nearest_obj()
      mm: fix use-after-free if memory allocation failed in vma_adjust()
      zsmalloc: Delete an unnecessary check before the function call "iput"
      mm/memblock.c: fix index adjustment error in __next_mem_range_rev()
      mem-hotplug: alloc new page from a nearest neighbor node when mem-offline
      mm: optimize copy_page_to/from_iter_iovec
      mm: add cond_resched() to generic_swapfile_activate()
      Revert "mm, mempool: only set __GFP_NOMEMALLOC if there are free elements"
      mm, compaction: don't isolate PageWriteback pages in MIGRATE_SYNC_LIGHT mode
      mm: hwpoison: remove incorrect comments
      make __section_nr() more efficient
      ...

commit 734537c9cb725fc8005ee7a25c48f1ad10fce5df
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Thu Jul 28 15:49:01 2016 -0700

    mm: fix use-after-free if memory allocation failed in vma_adjust()
    
    There's one case when vma_adjust() expands the vma, overlapping with
    *two* next vma.  See case 6 of mprotect, described in the comment to
    vma_merge().
    
    To handle this (and only this) situation we iterate twice over main part
    of the function.  See "goto again".
    
    Vegard reported[1] that he sees out-of-bounds access complain from
    KASAN, if anon_vma_clone() on the *second* iteration fails.
    
    This happens because we free 'next' vma by the end of first iteration
    and don't have a way to undo this if anon_vma_clone() fails on the
    second iteration.
    
    The solution is to do all required allocations upfront, before we touch
    vmas.
    
    The allocation on the second iteration is only required if first two
    vmas don't have anon_vma, but third does.  So we need, in total, one
    anon_vma_clone() call.
    
    It's easy to adjust 'exporter' to the third vma for such case.
    
    [1] http://lkml.kernel.org/r/1469514843-23778-1-git-send-email-vegard.nossum@oracle.com
    
    Link: http://lkml.kernel.org/r/1469625255-126641-1-git-send-email-kirill.shutemov@linux.intel.com
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit fc8c3892f30c39f28fdb835f7c8598ac4cf5ed1e
Author: Yan, Zheng <zyan@redhat.com>
Date:   Tue Jun 14 11:13:59 2016 +0800

    ceph: fix use-after-free bug in ceph_direct_read_write()
    
    ceph_aio_complete() can free the ceph_aio_request struct before
    the code exits the while loop.
    
    Signed-off-by: Yan, Zheng <zyan@redhat.com>

commit d78388dbec256b179f1c42e714cf4acf630067c6
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Jul 22 15:29:50 2016 -0600

    selftests: media_tests add a new video device test
    
    Add a new video device test that opens user specified Video Device and
    calls video ioctls in a loop once every 10 seconds.
    
    This test is intended for testing device removal and driver unbind while
    an ioctl is active. Clean device removal and driver unbind is expected
    without any use-after-free and panics.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit baedbe55884c003819f5c8c063ec3d2569414296
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Jul 22 14:56:20 2016 +0300

    bridge: Fix incorrect re-injection of LLDP packets
    
    Commit 8626c56c8279 ("bridge: fix potential use-after-free when hook
    returns QUEUE or STOLEN verdict") caused LLDP packets arriving through a
    bridge port to be re-injected to the Rx path with skb->dev set to the
    bridge device, but this breaks the lldpad daemon.
    
    The lldpad daemon opens a packet socket with protocol set to ETH_P_LLDP
    for any valid device on the system, which doesn't not include soft
    devices such as bridge and VLAN.
    
    Since packet sockets (ptype_base) are processed in the Rx path after the
    Rx handler, LLDP packets with skb->dev set to the bridge device never
    reach the lldpad daemon.
    
    Fix this by making the bridge's Rx handler re-inject LLDP packets with
    RX_HANDLER_PASS, which effectively restores the behaviour prior to the
    mentioned commit.
    
    This means netfilter will never receive LLDP packets coming through a
    bridge port, as I don't see a way in which we can have okfn() consume
    the packet without breaking existing behaviour. I've already carried out
    a similar fix for STP packets in commit 56fae404fb2c ("bridge: Fix
    incorrect re-injection of STP packets").
    
    Fixes: 8626c56c8279 ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28b783e47ad702b8e0f4861ef94cdfce6abd7c80
Author: Dave Chinner <dchinner@redhat.com>
Date:   Fri Jul 22 09:56:38 2016 +1000

    xfs: bufferhead chains are invalid after end_page_writeback
    
    In xfs_finish_page_writeback(), we have a loop that looks like this:
    
            do {
                    if (off < bvec->bv_offset)
                            goto next_bh;
                    if (off > end)
                            break;
                    bh->b_end_io(bh, !error);
    next_bh:
                    off += bh->b_size;
            } while ((bh = bh->b_this_page) != head);
    
    The b_end_io function is end_buffer_async_write(), which will call
    end_page_writeback() once all the buffers have marked as no longer
    under IO.  This issue here is that the only thing currently
    protecting both the bufferhead chain and the page from being
    reclaimed is the PageWriteback state held on the page.
    
    While we attempt to limit the loop to just the buffers covered by
    the IO, we still read from the buffer size and follow the next
    pointer in the bufferhead chain. There is no guarantee that either
    of these are valid after the PageWriteback flag has been cleared.
    Hence, loops like this are completely unsafe, and result in
    use-after-free issues. One such problem was caught by Calvin Owens
    with KASAN:
    
    .....
     INFO: Freed in 0x103fc80ec age=18446651500051355200 cpu=2165122683 pid=-1
      free_buffer_head+0x41/0x90
      __slab_free+0x1ed/0x340
      kmem_cache_free+0x270/0x300
      free_buffer_head+0x41/0x90
      try_to_free_buffers+0x171/0x240
      xfs_vm_releasepage+0xcb/0x3b0
      try_to_release_page+0x106/0x190
      shrink_page_list+0x118e/0x1a10
      shrink_inactive_list+0x42c/0xdf0
      shrink_zone_memcg+0xa09/0xfa0
      shrink_zone+0x2c3/0xbc0
    .....
     Call Trace:
      <IRQ>  [<ffffffff81e8b8e4>] dump_stack+0x68/0x94
      [<ffffffff8153a995>] print_trailer+0x115/0x1a0
      [<ffffffff81541174>] object_err+0x34/0x40
      [<ffffffff815436e7>] kasan_report_error+0x217/0x530
      [<ffffffff81543b33>] __asan_report_load8_noabort+0x43/0x50
      [<ffffffff819d651f>] xfs_destroy_ioend+0x3bf/0x4c0
      [<ffffffff819d69d4>] xfs_end_bio+0x154/0x220
      [<ffffffff81de0c58>] bio_endio+0x158/0x1b0
      [<ffffffff81dff61b>] blk_update_request+0x18b/0xb80
      [<ffffffff821baf57>] scsi_end_request+0x97/0x5a0
      [<ffffffff821c5558>] scsi_io_completion+0x438/0x1690
      [<ffffffff821a8d95>] scsi_finish_command+0x375/0x4e0
      [<ffffffff821c3940>] scsi_softirq_done+0x280/0x340
    
    
    Where the access is occuring during IO completion after the buffer
    had been freed from direct memory reclaim.
    
    Prevent use-after-free accidents in this end_io processing loop by
    pre-calculating the loop conditionals before calling bh->b_end_io().
    The loop is already limited to just the bufferheads covered by the
    IO in progress, so the offset checks are sufficient to prevent
    accessing buffers in the chain after end_page_writeback() has been
    called by the the bh->b_end_io() callout.
    
    Yet another example of why Bufferheads Must Die.
    
    cc: <stable@vger.kernel.org> # 4.7
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reported-and-Tested-by: Calvin Owens <calvinowens@fb.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit 3193204149de4d563519d6847aba638bb4d9662b
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Jul 14 17:22:48 2016 -0700

    nfit: fix _FIT evaluation memory leak + use after free
    
    acpi_evaluate_object() allocates memory. Free the buffer allocated
    during acpi_nfit_add(). In order for this memory to be freed
    acpi_nfit_init() needs to be converted to duplicate the nfit contents in
    its internal allocation.  Use zero-length arrays to minimize the thrash
    with the rest of the nfit driver implementation.
    
    All of the add_<nfit-sub-table>() routines now validate a minimum table
    size and expect hotplugged tables to match the size of the original
    table to count as a duplicate. For variable length tables, like 'idt'
    and 'flush', we calculate the dynamic size. Note that hotplug by
    definition cannot change the interleave as it would cause data
    corruption of in-use namespaces.
    
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Reported-by: Xiao Guangrong <guangrong.xiao@intel.com>
    Reported-by: Haozhong Zhang <haozhong.zhang@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commit 360cb4d15567a7eca07a5f3ade6de308bbfb4e70
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Jul 14 13:22:50 2016 -0700

    x86/mm/cpa: In populate_pgd(), don't set the PGD entry until it's populated
    
    This avoids pointless races in which another CPU or task might see a
    partially populated global PGD entry.  These races should normally
    be harmless, but, if another CPU propagates the entry via
    vmalloc_fault() and then populate_pgd() fails (due to memory allocation
    failure, for example), this prevents a use-after-free of the PGD
    entry.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/bf99df27eac6835f687005364bd1fbd89130946c.1468527351.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit d370c917b9d4bef71e5d994aac5547f06f4dd76f
Author: Ilya Lesokhin <ilyal@mellanox.com>
Date:   Thu Jul 14 16:50:19 2016 +0300

    vfio: fix possible use after free of vfio group
    
    The vfio group should be released after
    the vfio_group_try_dissolve_container call.
    The code should not rely on someone else to hold
    a reference on the group.
    
    Signed-off-by: Ilya Lesokhin <ilyal@mellanox.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

commit da677fe14364f7ac1f5f7085c58bbc2f7bb12da0
Author: Max Kellermann <max@duempel.org>
Date:   Mon Jul 4 14:08:45 2016 +0200

    [media] dvb-core/en50221: use kref to manage struct dvb_ca_private
    
    Don't free the object until the file handle has been closed.  Fixes
    use-after-free bug which occurs when I disconnect my DVB-S received
    while VDR is running.
    
    This is a crash dump of such a use-after-free:
    
        general protection fault: 0000 [#1] SMP
        CPU: 0 PID: 2541 Comm: CI adapter on d Not tainted 4.7.0-rc1-hosting+ #49
        Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
        task: ffff880027d7ce00 ti: ffff88003d8f8000 task.ti: ffff88003d8f8000
        RIP: 0010:[<ffffffff812f3d1f>]  [<ffffffff812f3d1f>] dvb_ca_en50221_io_read_condition.isra.7+0x6f/0x150
        RSP: 0018:ffff88003d8fba98  EFLAGS: 00010206
        RAX: 0000000059534255 RBX: 000000753d470f90 RCX: ffff88003c74d181
        RDX: 00000001bea04ba9 RSI: ffff88003d8fbaf4 RDI: 3a3030a56d763fc0
        RBP: ffff88003d8fbae0 R08: ffff88003c74d180 R09: 0000000000000000
        R10: 0000000000000001 R11: 0000000000000000 R12: ffff88003c480e00
        R13: 00000000ffffffff R14: 0000000059534255 R15: 0000000000000000
        FS:  00007fb4209b4700(0000) GS:ffff88003fc00000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 00007f06445f4078 CR3: 000000003c55b000 CR4: 00000000000006b0
        Stack:
         ffff88003d8fbaf4 000000003c2170c0 0000000000004000 0000000000000000
         ffff88003c480e00 ffff88003d8fbc80 ffff88003c74d180 ffff88003d8fbb8c
         0000000000000000 ffff88003d8fbb10 ffffffff812f3e37 ffff88003d8fbb00
        Call Trace:
         [<ffffffff812f3e37>] dvb_ca_en50221_io_poll+0x37/0xa0
         [<ffffffff8113109b>] do_sys_poll+0x2db/0x520
    
    This is a backtrace of the kernel attempting to lock a freed mutex:
    
        #0  0xffffffff81083d40 in rep_nop () at ./arch/x86/include/asm/processor.h:569
        #1  cpu_relax () at ./arch/x86/include/asm/processor.h:574
        #2  virt_spin_lock (lock=<optimized out>) at ./arch/x86/include/asm/qspinlock.h:57
        #3  native_queued_spin_lock_slowpath (lock=0xffff88003c480e90, val=761492029) at kernel/locking/qspinlock.c:304
        #4  0xffffffff810d1a06 in pv_queued_spin_lock_slowpath (val=<optimized out>, lock=<optimized out>) at ./arch/x86/include/asm/paravirt.h:669
        #5  queued_spin_lock_slowpath (val=<optimized out>, lock=<optimized out>) at ./arch/x86/include/asm/qspinlock.h:28
        #6  queued_spin_lock (lock=<optimized out>) at include/asm-generic/qspinlock.h:107
        #7  __mutex_lock_common (use_ww_ctx=<optimized out>, ww_ctx=<optimized out>, ip=<optimized out>, nest_lock=<optimized out>, subclass=<optimized out>,
            state=<optimized out>, lock=<optimized out>) at kernel/locking/mutex.c:526
        #8  mutex_lock_interruptible_nested (lock=0xffff88003c480e88, subclass=<optimized out>) at kernel/locking/mutex.c:647
        #9  0xffffffff812f49fe in dvb_ca_en50221_io_do_ioctl (file=<optimized out>, cmd=761492029, parg=0x1 <irq_stack_union+1>)
            at drivers/media/dvb-core/dvb_ca_en50221.c:1210
        #10 0xffffffff812ee660 in dvb_usercopy (file=<optimized out>, cmd=761492029, arg=<optimized out>, func=<optimized out>) at drivers/media/dvb-core/dvbdev.c:883
        #11 0xffffffff812f3410 in dvb_ca_en50221_io_ioctl (file=<optimized out>, cmd=<optimized out>, arg=<optimized out>) at drivers/media/dvb-core/dvb_ca_en50221.c:1284
        #12 0xffffffff8112eddd in vfs_ioctl (arg=<optimized out>, cmd=<optimized out>, filp=<optimized out>) at fs/ioctl.c:43
        #13 do_vfs_ioctl (filp=0xffff88003c480e90, fd=<optimized out>, cmd=<optimized out>, arg=<optimized out>) at fs/ioctl.c:674
        #14 0xffffffff8112f30c in SYSC_ioctl (arg=<optimized out>, cmd=<optimized out>, fd=<optimized out>) at fs/ioctl.c:689
        #15 SyS_ioctl (fd=6, cmd=2148298626, arg=140734533693696) at fs/ioctl.c:680
        #16 0xffffffff8103feb2 in entry_SYSCALL_64 () at arch/x86/entry/entry_64.S:207
    
    Signed-off-by: Max Kellermann <max@duempel.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 2a6a20ea7d894464ca6bd402058c1aadf796a48c
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Thu Jun 23 14:37:20 2016 +0200

    snic: Fix use-after-free in case of a dma mapping error
    
    If there is a dma mapping error snic kfree()s buf right before printing
    it.  Change the order to not accidently trip on memory that's not owned
    by us anymore.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Acked-by: Narsimhulu Musini <nmusini@cisco.com>
    Reviewed-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit ab58d8cc870ef3f0771c197700441936898d1f1d
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Mon Jul 11 19:51:06 2016 +0200

    ALSA: hda - fix use-after-free after module unload
    
    register_vga_switcheroo() sets the PM ops from the hda structure which
    is freed later in azx_free. Make sure that these ops are cleared.
    
    Caught by KASAN, initially noticed due to a general protection fault.
    
    Fixes: 246efa4a072f ("snd/hda: add runtime suspend/resume on optimus support (v4)")
    Signed-off-by: Peter Wu <peter@lekensteyn.nl>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 8ba8682107ee2ca3347354e018865d8e1967c5f4
Author: Omar Sandoval <osandov@fb.com>
Date:   Fri Jul 1 00:39:35 2016 -0700

    block: fix use-after-free in sys_ioprio_get()
    
    get_task_ioprio() accesses the task->io_context without holding the task
    lock and thus can race with exit_io_context(), leading to a
    use-after-free. The reproducer below hits this within a few seconds on
    my 4-core QEMU VM:
    
    #define _GNU_SOURCE
    #include <assert.h>
    #include <unistd.h>
    #include <sys/syscall.h>
    #include <sys/wait.h>
    
    int main(int argc, char **argv)
    {
            pid_t pid, child;
            long nproc, i;
    
            /* ioprio_set(IOPRIO_WHO_PROCESS, 0, IOPRIO_PRIO_VALUE(IOPRIO_CLASS_IDLE, 0)); */
            syscall(SYS_ioprio_set, 1, 0, 0x6000);
    
            nproc = sysconf(_SC_NPROCESSORS_ONLN);
    
            for (i = 0; i < nproc; i++) {
                    pid = fork();
                    assert(pid != -1);
                    if (pid == 0) {
                            for (;;) {
                                    pid = fork();
                                    assert(pid != -1);
                                    if (pid == 0) {
                                            _exit(0);
                                    } else {
                                            child = wait(NULL);
                                            assert(child == pid);
                                    }
                            }
                    }
    
                    pid = fork();
                    assert(pid != -1);
                    if (pid == 0) {
                            for (;;) {
                                    /* ioprio_get(IOPRIO_WHO_PGRP, 0); */
                                    syscall(SYS_ioprio_get, 2, 0);
                            }
                    }
            }
    
            for (;;) {
                    /* ioprio_get(IOPRIO_WHO_PGRP, 0); */
                    syscall(SYS_ioprio_get, 2, 0);
            }
    
            return 0;
    }
    
    This gets us KASAN dumps like this:
    
    [   35.526914] ==================================================================
    [   35.530009] BUG: KASAN: out-of-bounds in get_task_ioprio+0x7b/0x90 at addr ffff880066f34e6c
    [   35.530009] Read of size 2 by task ioprio-gpf/363
    [   35.530009] =============================================================================
    [   35.530009] BUG blkdev_ioc (Not tainted): kasan: bad access detected
    [   35.530009] -----------------------------------------------------------------------------
    
    [   35.530009] Disabling lock debugging due to kernel taint
    [   35.530009] INFO: Allocated in create_task_io_context+0x2b/0x370 age=0 cpu=0 pid=360
    [   35.530009]  ___slab_alloc+0x55d/0x5a0
    [   35.530009]  __slab_alloc.isra.20+0x2b/0x40
    [   35.530009]  kmem_cache_alloc_node+0x84/0x200
    [   35.530009]  create_task_io_context+0x2b/0x370
    [   35.530009]  get_task_io_context+0x92/0xb0
    [   35.530009]  copy_process.part.8+0x5029/0x5660
    [   35.530009]  _do_fork+0x155/0x7e0
    [   35.530009]  SyS_clone+0x19/0x20
    [   35.530009]  do_syscall_64+0x195/0x3a0
    [   35.530009]  return_from_SYSCALL_64+0x0/0x6a
    [   35.530009] INFO: Freed in put_io_context+0xe7/0x120 age=0 cpu=0 pid=1060
    [   35.530009]  __slab_free+0x27b/0x3d0
    [   35.530009]  kmem_cache_free+0x1fb/0x220
    [   35.530009]  put_io_context+0xe7/0x120
    [   35.530009]  put_io_context_active+0x238/0x380
    [   35.530009]  exit_io_context+0x66/0x80
    [   35.530009]  do_exit+0x158e/0x2b90
    [   35.530009]  do_group_exit+0xe5/0x2b0
    [   35.530009]  SyS_exit_group+0x1d/0x20
    [   35.530009]  entry_SYSCALL_64_fastpath+0x1a/0xa4
    [   35.530009] INFO: Slab 0xffffea00019bcd00 objects=20 used=4 fp=0xffff880066f34ff0 flags=0x1fffe0000004080
    [   35.530009] INFO: Object 0xffff880066f34e58 @offset=3672 fp=0x0000000000000001
    [   35.530009] ==================================================================
    
    Fix it by grabbing the task lock while we poke at the io_context.
    
    Cc: stable@vger.kernel.org
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 6343a2120862f7023006c8091ad95c1f16a32077
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Jul 1 14:56:07 2016 +0200

    locks: use file_inode()
    
    (Another one for the f_path debacle.)
    
    ltp fcntl33 testcase caused an Oops in selinux_file_send_sigiotask.
    
    The reason is that generic_add_lease() used filp->f_path.dentry->inode
    while all the others use file_inode().  This makes a difference for files
    opened on overlayfs since the former will point to the overlay inode the
    latter to the underlying inode.
    
    So generic_add_lease() added the lease to the overlay inode and
    generic_delete_lease() removed it from the underlying inode.  When the file
    was released the lease remained on the overlay inode's lock list, resulting
    in use after free.
    
    Reported-by: Eryu Guan <eguan@redhat.com>
    Fixes: 4bacc9c9234c ("overlayfs: Make f_path always point to the overlay and f_inode to the underlay")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit e06b933e6ded42384164d28a2060b7f89243b895
Author: Andrey Ulanov <andreyu@google.com>
Date:   Fri Apr 15 14:24:41 2016 -0700

    namespace: update event counter when umounting a deleted dentry
    
    - m_start() in fs/namespace.c expects that ns->event is incremented each
      time a mount added or removed from ns->list.
    - umount_tree() removes items from the list but does not increment event
      counter, expecting that it's done before the function is called.
    - There are some codepaths that call umount_tree() without updating
      "event" counter. e.g. from __detach_mounts().
    - When this happens m_start may reuse a cached mount structure that no
      longer belongs to ns->list (i.e. use after free which usually leads
      to infinite loop).
    
    This change fixes the above problem by incrementing global event counter
    before invoking umount_tree().
    
    Change-Id: I622c8e84dcb9fb63542372c5dbf0178ee86bb589
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrey Ulanov <andreyu@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 9c4604a298e0a9807eaf2cd912d1ebf24d98fbeb
Author: Sven Eckelmann <sven@narfation.org>
Date:   Sun Jun 26 11:16:10 2016 +0200

    batman-adv: Fix use-after-free/double-free of tt_req_node
    
    The tt_req_node is added and removed from a list inside a spinlock. But the
    locking is sometimes removed even when the object is still referenced and
    will be used later via this reference. For example batadv_send_tt_request
    can create a new tt_req_node (including add to a list) and later
    re-acquires the lock to remove it from the list and to free it. But at this
    time another context could have already removed this tt_req_node from the
    list and freed it.
    
    CPU#0
    
        batadv_batman_skb_recv from net_device 0
        -> batadv_iv_ogm_receive
          -> batadv_iv_ogm_process
            -> batadv_iv_ogm_process_per_outif
              -> batadv_tvlv_ogm_receive
                -> batadv_tvlv_ogm_receive
                  -> batadv_tvlv_containers_process
                    -> batadv_tvlv_call_handler
                      -> batadv_tt_tvlv_ogm_handler_v1
                        -> batadv_tt_update_orig
                          -> batadv_send_tt_request
                            -> batadv_tt_req_node_new
                               spin_lock(...)
                               allocates new tt_req_node and adds it to list
                               spin_unlock(...)
                               return tt_req_node
    
    CPU#1
    
        batadv_batman_skb_recv from net_device 1
        -> batadv_recv_unicast_tvlv
          -> batadv_tvlv_containers_process
            -> batadv_tvlv_call_handler
              -> batadv_tt_tvlv_unicast_handler_v1
                -> batadv_handle_tt_response
                   spin_lock(...)
                   tt_req_node gets removed from list and is freed
                   spin_unlock(...)
    
    CPU#0
    
                          <- returned to batadv_send_tt_request
                             spin_lock(...)
                             tt_req_node gets removed from list and is freed
                             MEMORY CORRUPTION/SEGFAULT/...
                             spin_unlock(...)
    
    This can only be solved via reference counting to allow multiple contexts
    to handle the list manipulation while making sure that only the last
    context holding a reference will free the object.
    
    Fixes: a73105b8d4c7 ("batman-adv: improved client announcement mechanism")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Tested-by: Martin Weinelt <martin@darmstadt.freifunk.net>
    Tested-by: Amadeus Alfa <amadeus@chemnitz.freifunk.net>
    Signed-off-by: Marek Lindner <mareklindner@neomailbox.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9b75a867cc9ddbafcaf35029358ac500f2635ff3
Author: Andrey Ryabinin <aryabinin@virtuozzo.com>
Date:   Fri Jun 24 14:49:34 2016 -0700

    mm: mempool: kasan: don't poot mempool objects in quarantine
    
    Currently we may put reserved by mempool elements into quarantine via
    kasan_kfree().  This is totally wrong since quarantine may really free
    these objects.  So when mempool will try to use such element,
    use-after-free will happen.  Or mempool may decide that it no longer
    need that element and double-free it.
    
    So don't put object into quarantine in kasan_kfree(), just poison it.
    Rename kasan_kfree() to kasan_poison_kfree() to respect that.
    
    Also, we shouldn't use kasan_slab_alloc()/kasan_krealloc() in
    kasan_unpoison_element() because those functions may update allocation
    stacktrace.  This would be wrong for the most of the remove_element call
    sites.
    
    (The only call site where we may want to update alloc stacktrace is
     in mempool_alloc(). Kmemleak solves this by calling
     kmemleak_update_trace(), so we could make something like that too.
     But this is out of scope of this patch).
    
    Fixes: 55834c59098d ("mm: kasan: initial memory quarantine implementation")
    Link: http://lkml.kernel.org/r/575977C3.1010905@virtuozzo.com
    Signed-off-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Reported-by: Kuthonuzo Luruo <kuthonuzo.luruo@hpe.com>
    Acked-by: Alexander Potapenko <glider@google.com>
    Cc: Dmitriy Vyukov <dvyukov@google.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cea7f829d3ea6e87a67220bc417260b858e278ff
Author: Oleg Drokin <green@linuxhacker.ru>
Date:   Fri Jun 17 16:48:23 2016 -0400

    nfs4: Fix potential use after free of state in nfs4_do_reclaim.
    
    Commit e8d975e73e5f ("fixing infinite OPEN loop in 4.0 stateid recovery")
    introduced access to state after it was just potentially freed by
    nfs4_put_open_state leading to a random data corruption somewhere.
    
    BUG: unable to handle kernel paging request at ffff88004941ee40
    IP: [<ffffffff813baf01>] nfs4_do_reclaim+0x461/0x740
    PGD 3501067 PUD 3504067 PMD 6ff37067 PTE 800000004941e060
    Oops: 0002 [#1] SMP DEBUG_PAGEALLOC
    Modules linked in: loop rpcsec_gss_krb5 acpi_cpufreq tpm_tis joydev i2c_piix4 pcspkr tpm virtio_console nfsd ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops floppy serio_raw virtio_blk drm
    CPU: 6 PID: 2161 Comm: 192.168.10.253- Not tainted 4.7.0-rc1-vm-nfs+ #112
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    task: ffff8800463dcd00 ti: ffff88003ff48000 task.ti: ffff88003ff48000
    RIP: 0010:[<ffffffff813baf01>]  [<ffffffff813baf01>] nfs4_do_reclaim+0x461/0x740
    RSP: 0018:ffff88003ff4bd68  EFLAGS: 00010246
    RAX: 0000000000000000 RBX: ffffffff81a49900 RCX: 00000000000000e8
    RDX: 00000000000000e8 RSI: ffff8800418b9930 RDI: ffff880040c96c88
    RBP: ffff88003ff4bdf8 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: ffff880040c96c98
    R13: ffff88004941ee20 R14: ffff88004941ee40 R15: ffff88004941ee00
    FS:  0000000000000000(0000) GS:ffff88006d000000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff88004941ee40 CR3: 0000000060b0b000 CR4: 00000000000006e0
    Stack:
     ffffffff813baad5 ffff8800463dcd00 ffff880000000001 ffffffff810e6b68
     ffff880043ddbc88 ffff8800418b9800 ffff8800418b98c8 ffff88004941ee48
     ffff880040c96c90 ffff880040c96c00 ffff880040c96c20 ffff880040c96c40
    Call Trace:
     [<ffffffff813baad5>] ? nfs4_do_reclaim+0x35/0x740
     [<ffffffff810e6b68>] ? trace_hardirqs_on_caller+0x128/0x1b0
     [<ffffffff813bb7cd>] nfs4_run_state_manager+0x5ed/0xa40
     [<ffffffff813bb1e0>] ? nfs4_do_reclaim+0x740/0x740
     [<ffffffff813bb1e0>] ? nfs4_do_reclaim+0x740/0x740
     [<ffffffff810af0d1>] kthread+0x101/0x120
     [<ffffffff810e6b68>] ? trace_hardirqs_on_caller+0x128/0x1b0
     [<ffffffff818843af>] ret_from_fork+0x1f/0x40
     [<ffffffff810aefd0>] ? kthread_create_on_node+0x250/0x250
    Code: 65 80 4c 8b b5 78 ff ff ff e8 fc 88 4c 00 48 8b 7d 88 e8 13 67 d2 ff 49 8b 47 40 a8 02 0f 84 d3 01 00 00 4c 89 ff e8 7f f9 ff ff <f0> 41 80 26 7f 48 8b 7d c8 e8 b1 84 4c 00 e9 39 fd ff ff 3d e6
    RIP  [<ffffffff813baf01>] nfs4_do_reclaim+0x461/0x740
     RSP <ffff88003ff4bd68>
    CR2: ffff88004941ee40
    
    Signed-off-by: Oleg Drokin <green@linuxhacker.ru>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>

commit d5dbbe6569481bf12dcbe3e12cff72c5f78d272c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jun 24 15:15:26 2016 +0200

    ALSA: dummy: Fix a use-after-free at closing
    
    syzkaller fuzzer spotted a potential use-after-free case in snd-dummy
    driver when hrtimer is used as backend:
    > ==================================================================
    > BUG: KASAN: use-after-free in rb_erase+0x1b17/0x2010 at addr ffff88005e5b6f68
    >  Read of size 8 by task syz-executor/8984
    > =============================================================================
    > BUG kmalloc-192 (Not tainted): kasan: bad access detected
    > -----------------------------------------------------------------------------
    >
    > Disabling lock debugging due to kernel taint
    > INFO: Allocated in 0xbbbbbbbbbbbbbbbb age=18446705582212484632
    > ....
    > [<      none      >] dummy_hrtimer_create+0x49/0x1a0 sound/drivers/dummy.c:464
    > ....
    > INFO: Freed in 0xfffd8e09 age=18446705496313138713 cpu=2164287125 pid=-1
    > [<      none      >] dummy_hrtimer_free+0x68/0x80 sound/drivers/dummy.c:481
    > ....
    > Call Trace:
    >  [<ffffffff8179e59e>] __asan_report_load8_noabort+0x3e/0x40 mm/kasan/report.c:333
    >  [<     inline     >] rb_set_parent include/linux/rbtree_augmented.h:111
    >  [<     inline     >] __rb_erase_augmented include/linux/rbtree_augmented.h:218
    >  [<ffffffff82ca5787>] rb_erase+0x1b17/0x2010 lib/rbtree.c:427
    >  [<ffffffff82cb02e8>] timerqueue_del+0x78/0x170 lib/timerqueue.c:86
    >  [<ffffffff814d0c80>] __remove_hrtimer+0x90/0x220 kernel/time/hrtimer.c:903
    >  [<     inline     >] remove_hrtimer kernel/time/hrtimer.c:945
    >  [<ffffffff814d23da>] hrtimer_try_to_cancel+0x22a/0x570 kernel/time/hrtimer.c:1046
    >  [<ffffffff814d2742>] hrtimer_cancel+0x22/0x40 kernel/time/hrtimer.c:1066
    >  [<ffffffff85420531>] dummy_hrtimer_stop+0x91/0xb0 sound/drivers/dummy.c:417
    >  [<ffffffff854228bf>] dummy_pcm_trigger+0x17f/0x1e0 sound/drivers/dummy.c:507
    >  [<ffffffff85392170>] snd_pcm_do_stop+0x160/0x1b0 sound/core/pcm_native.c:1106
    >  [<ffffffff85391b26>] snd_pcm_action_single+0x76/0x120 sound/core/pcm_native.c:956
    >  [<ffffffff85391e01>] snd_pcm_action+0x231/0x290 sound/core/pcm_native.c:974
    >  [<     inline     >] snd_pcm_stop sound/core/pcm_native.c:1139
    >  [<ffffffff8539754d>] snd_pcm_drop+0x12d/0x1d0 sound/core/pcm_native.c:1784
    >  [<ffffffff8539d3be>] snd_pcm_common_ioctl1+0xfae/0x2150 sound/core/pcm_native.c:2805
    >  [<ffffffff8539ee91>] snd_pcm_capture_ioctl1+0x2a1/0x5e0 sound/core/pcm_native.c:2976
    >  [<ffffffff8539f2ec>] snd_pcm_kernel_ioctl+0x11c/0x160 sound/core/pcm_native.c:3020
    >  [<ffffffff853d9a44>] snd_pcm_oss_sync+0x3a4/0xa30 sound/core/oss/pcm_oss.c:1693
    >  [<ffffffff853da27d>] snd_pcm_oss_release+0x1ad/0x280 sound/core/oss/pcm_oss.c:2483
    >  .....
    
    A workaround is to call hrtimer_cancel() in dummy_hrtimer_sync() which
    is called certainly before other blocking ops.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 21de12ee5568fd1aec47890c72967abf791ac80a
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jun 20 15:00:43 2016 -0700

    netem: fix a use after free
    
    If the packet was dropped by lower qdisc, then we must not
    access it later.
    
    Save qdisc_pkt_len(skb) in a temp variable.
    
    Fixes: 2ccccf5fb43f ("net_sched: update hierarchical backlog too")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: WANG Cong <xiyou.wangcong@gmail.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c001da4f7c025a612a594b0ac421bce11fb5bc8b
Author: Matthew Auld <matthew.auld@intel.com>
Date:   Mon Jun 20 17:42:46 2016 +0100

    drm: fix send_vblank_event use-after-free error
    
    The drm_pending_event can be freed by drm_send_event_locked, as a
    result we should call trace_drm_vblank_event_delivered before this
    to avoid hitting a user-after-free error when accessing the pid member:
    
    [  378.438497] BUG: KASAN: use-after-free in send_vblank_event+0xf0/0x310 [drm] at addr ffff8801ac7e50a0
    [  378.438500] Read of size 4 by task Xorg/1562
    [  378.438501] =============================================================================
    [  378.438504] BUG kmalloc-128 (Tainted: G    B          ): kasan: bad access detected
    [  378.438506] -----------------------------------------------------------------------------
    
    [  378.438509] INFO: Freed in 0x10001309c age=18446737369265680575 cpu=0 pid=0
    [  378.438541]  drm_send_event_locked+0x207/0x2f0 [drm]
    [  378.438544]  __slab_free+0x24c/0x650
    [  378.438546]  kfree+0x3a2/0x760
    [  378.438578]  drm_send_event_locked+0x207/0x2f0 [drm]
    [  378.438610]  send_vblank_event+0xb7/0x310 [drm]
    [  378.438643]  drm_crtc_send_vblank_event+0x130/0x1f0 [drm]
    [  378.438722]  intel_atomic_commit_tail+0x23b5/0x53f0 [i915]
    [  378.438802]  intel_atomic_commit+0xbae/0x12f0 [i915]
    [  378.438839]  drm_atomic_commit+0xb0/0x120 [drm]
    [  378.438855]  drm_atomic_helper_connector_dpms+0x339/0x5d0 [drm_kms_helper]
    [  378.438891]  drm_mode_obj_set_property_ioctl+0x8f1/0xcc0 [drm]
    [  378.438927]  drm_mode_connector_property_set_ioctl+0xf3/0x170 [drm]
    [  378.438959]  drm_ioctl+0x2d7/0xae0 [drm]
    [  378.438962]  do_vfs_ioctl+0x1c9/0x1280
    [  378.438964]  SyS_ioctl+0x79/0x90
    [  378.438967]  entry_SYSCALL_64_fastpath+0x1a/0xa4
    
    Cc: dri-devel@lists.freedesktop.org
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Signed-off-by: Matthew Auld <matthew.auld@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1466440966-5410-1-git-send-email-matthew.auld@intel.com

commit 996818869c9cc25581e81ff809d790651129cb4a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Jun 20 09:29:17 2016 +0100

    drm/i915: Avoid use-after-free of intel_encoder in intel_dp_connector_destrpy
    
    The drm_dp_aux is associated with the intel_dp encoder and not the
    connector. Since the encoder is destroyed before the connector,
    attempting to free the drm_dp_aux from inside the connector cleanup
    causes a use-after-free.
    
    This was applied to the patch that CI was happy with, but in the
    confusion of so many series trying to make CI happy, the unready
    patch was plucked.
    
    Fixes: c191eca110a3 ("drm/i915: Move intel_connector->unregister to connector->early_unregister")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1466411357-730-1-git-send-email-chris@chris-wilson.co.uk

commit 4e239fac7c6b9d703e83c81b52ec9fec00c50129
Author: Nogah Frankel <nogahf@mellanox.com>
Date:   Fri Jun 17 15:09:06 2016 +0200

    mlxsw: switchx2: Don't count internal TX header bytes to stats
    
    Stop the SW TX counter from counting the TX header bytes
    since they are not being sent out.
    
    Fixes: e577516b9db3 ("mlxsw: Fix use-after-free bug in mlxsw_sx_port_xmit")
    Signed-off-by: Nogah Frankel <nogahf@mellanox.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f0dd24a084a17f9984dd49dffbf7055bf123993
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Jun 10 14:37:23 2016 -0300

    [media] media: fix media devnode ioctl/syscall and unregister race
    
    Media devnode open/ioctl could be in progress when media device unregister
    is initiated. System calls and ioctls check media device registered status
    at the beginning, however, there is a window where unregister could be in
    progress without changing the media devnode status to unregistered.
    
    process 1                               process 2
    fd = open(/dev/media0)
    media_devnode_is_registered()
            (returns true here)
    
                                            media_device_unregister()
                                                    (unregister is in progress
                                                    and devnode isn't
                                                    unregistered yet)
                                            ...
    ioctl(fd, ...)
    __media_ioctl()
    media_devnode_is_registered()
            (returns true here)
                                            ...
                                            media_devnode_unregister()
                                            ...
                                            (driver releases the media device
                                            memory)
    
    media_device_ioctl()
            (By this point
            devnode->media_dev does not
            point to allocated memory.
            use-after free in in mutex_lock_nested)
    
    BUG: KASAN: use-after-free in mutex_lock_nested+0x79c/0x800 at addr
    ffff8801ebe914f0
    
    Fix it by clearing register bit when unregister starts to avoid the race.
    
    process 1                               process 2
    fd = open(/dev/media0)
    media_devnode_is_registered()
            (could return true here)
    
                                            media_device_unregister()
                                                    (clear the register bit,
                                                     then start unregister.)
                                            ...
    ioctl(fd, ...)
    __media_ioctl()
    media_devnode_is_registered()
            (return false here, ioctl
             returns I/O error, and
             will not access media
             device memory)
                                            ...
                                            media_devnode_unregister()
                                            ...
                                            (driver releases the media device
                                             memory)
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Suggested-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reported-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Tested-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 5b28dde51d0ccc54cee70756e1800d70bed7114a
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Wed May 4 16:48:28 2016 -0300

    [media] media: fix use-after-free in cdev_put() when app exits after driver unbind
    
    When driver unbinds while media_ioctl is in progress, cdev_put() fails with
    when app exits after driver unbinds.
    
    Add devnode struct device kobj as the cdev parent kobject. cdev_add() gets
    a reference to it and releases it in cdev_del() ensuring that the devnode
    is not deallocated as long as the application has the device file open.
    
    media_devnode_register() initializes the struct device kobj before calling
    cdev_add(). media_devnode_unregister() does cdev_del() and then deletes the
    device. devnode is released when the last reference to the struct device is
    gone.
    
    This problem is found on uvcvideo, em28xx, and au0828 drivers and fix has
    been tested on all three.
    
    kernel: [  193.599736] BUG: KASAN: use-after-free in cdev_put+0x4e/0x50
    kernel: [  193.599745] Read of size 8 by task media_device_te/1851
    kernel: [  193.599792] INFO: Allocated in __media_device_register+0x54
    kernel: [  193.599951] INFO: Freed in media_devnode_release+0xa4/0xc0
    
    kernel: [  193.601083] Call Trace:
    kernel: [  193.601093]  [<ffffffff81aecac3>] dump_stack+0x67/0x94
    kernel: [  193.601102]  [<ffffffff815359b2>] print_trailer+0x112/0x1a0
    kernel: [  193.601111]  [<ffffffff8153b5e4>] object_err+0x34/0x40
    kernel: [  193.601119]  [<ffffffff8153d9d4>] kasan_report_error+0x224/0x530
    kernel: [  193.601128]  [<ffffffff814a2c3d>] ? kzfree+0x2d/0x40
    kernel: [  193.601137]  [<ffffffff81539d72>] ? kfree+0x1d2/0x1f0
    kernel: [  193.601154]  [<ffffffff8157ca7e>] ? cdev_put+0x4e/0x50
    kernel: [  193.601162]  [<ffffffff8157ca7e>] cdev_put+0x4e/0x50
    kernel: [  193.601170]  [<ffffffff815767eb>] __fput+0x52b/0x6c0
    kernel: [  193.601179]  [<ffffffff8117743a>] ? switch_task_namespaces+0x2a
    kernel: [  193.601188]  [<ffffffff815769ee>] ____fput+0xe/0x10
    kernel: [  193.601196]  [<ffffffff81170023>] task_work_run+0x133/0x1f0
    kernel: [  193.601204]  [<ffffffff8117746e>] ? switch_task_namespaces+0x5e
    kernel: [  193.601213]  [<ffffffff8111b50c>] do_exit+0x72c/0x2c20
    kernel: [  193.601224]  [<ffffffff8111ade0>] ? release_task+0x1250/0x1250
    -
    -
    -
    kernel: [  193.601360]  [<ffffffff81003587>] ? exit_to_usermode_loop+0xe7
    kernel: [  193.601368]  [<ffffffff810035c0>] exit_to_usermode_loop+0x120
    kernel: [  193.601376]  [<ffffffff810061da>] syscall_return_slowpath+0x16a
    kernel: [  193.601386]  [<ffffffff82848b33>] entry_SYSCALL_64_fastpath+0xa6
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>
    Tested-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit a087ce704b802becbb4b0f2a20f2cb3f6911802e
Author: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
Date:   Wed Apr 27 19:28:26 2016 -0300

    [media] media-device: dynamically allocate struct media_devnode
    
    struct media_devnode is currently embedded at struct media_device.
    
    While this works fine during normal usage, it leads to a race
    condition during devnode unregister. the problem is that drivers
    assume that, after calling media_device_unregister(), the struct
    that contains media_device can be freed. This is not true, as it
    can't be freed until userspace closes all opened /dev/media devnodes.
    
    In other words, if the media devnode is still open, and media_device
    gets freed, any call to an ioctl will make the core to try to access
    struct media_device, with will cause an use-after-free and even GPF.
    
    Fix this by dynamically allocating the struct media_devnode and only
    freeing it when it is safe.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

commit 6e85dbe4b461e59fa3cad6f6235cb47fa4c6a629
Author: Crestez Dan Leonard <leonard.crestez@intel.com>
Date:   Fri Jun 3 21:30:24 2016 +0300

    iio: inv_mpu6050: Fix use-after-free in ACPI code
    
    In some cases this can result in incorrectly returning a negative value
    from asus_acpi_get_sensor_info and the AK8963 magnetometer failing to
    show up.
    
    Note cpm is an alias for buffer.pointer which isn't apparent in this
    patch on it's own.
    
    Cc: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Crestez Dan Leonard <leonard.crestez@intel.com>
    Acked-by: Daniel Baluta <daniel.baluta@intel.com>
    Signed-off-by: Jonathan Cameron <jic23@kernel.org>

commit 56fae404fb2c306db0a35dad0d16fa24c65678f3
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Tue Jun 7 12:06:58 2016 +0300

    bridge: Fix incorrect re-injection of STP packets
    
    Commit 8626c56c8279 ("bridge: fix potential use-after-free when hook
    returns QUEUE or STOLEN verdict") fixed incorrect usage of NF_HOOK's
    return value by consuming packets in okfn via br_pass_frame_up().
    
    However, this function re-injects packets to the Rx path with skb->dev
    set to the bridge device, which breaks kernel's STP, as all STP packets
    appear to originate from the bridge device itself.
    
    Instead, if STP is enabled and bridge isn't a 802.1ad bridge, then learn
    packet's SMAC and inject it back to the Rx path for further processing
    by the packet handlers.
    
    The patch also makes netfilter's behavior consistent with regards to
    packets destined to the Bridge Group Address, as no hook registered at
    LOCAL_IN will ever be called, regardless if STP is enabled or not.
    
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Cc: Toshiaki Makita <makita.toshiaki@lab.ntt.co.jp>
    Fixes: 8626c56c8279 ("bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77154fd969df749f5bf83f639af19fca199de033
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Thu Jun 2 12:42:32 2016 +1000

    drm/nouveau/core: swap the order of imem/fb
    
    Fixes a use-after-free reported by valgrind and KASAN.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commits)
      Linux 4.7-rc1
      hash_string: Fix zero-length case for !DCACHE_WORD_ACCESS
      Rename other copy of hash_string to hashlen_string
      hpfs: implement the show_options method
      affs: fix remount failure when there are no options changed
      hpfs: fix remount failure when there are no options changed
      fs: fix binfmt_aout.c build error
      h8300: Add <asm/hash.h>
      microblaze: Add <asm/hash.h>
      m68k: Add <asm/hash.h>
      <linux/hash.h>: Add support for architecture-specific functions
      fs/namei.c: Improve dcache hash function
      Eliminate bad hash multipliers from hash_32() and  hash_64()
      Change hash_64() return value to 32 bits
      <linux/sunrpc/svcauth.h>: Define hash_str() in terms of hashlen_string()
      fs/namei.c: Add hashlen_string() function
      Pull out string hash to <linux/stringhash.h>
      Revert "platform/chrome: chromeos_laptop: Add Leon Touch"
      i2c: dev: use after free in detach
      MIPS: Add missing FROZEN hotplug notifier transitions
      ...

commit 956b56a984ddf10aa69b25318dc04430101beed6
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Mon May 30 07:50:10 2016 -0600

    vfio/pci: Fix ordering of eventfd vs virqfd shutdown
    
    Both the INTx and MSI/X disable paths do an eventfd_ctx_put() for the
    trigger eventfd before calling vfio_virqfd_disable() any potential
    mask and unmask eventfds.  This opens a use-after-free race where an
    inopportune irqfd can reference the freed signalling eventfd.  Reorder
    to avoid this possibility.
    
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

commit e6be18f6d62c1d3b331ae020b76a29c2ccf6b0bf
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat May 28 08:01:46 2016 +0300

    i2c: dev: use after free in detach
    
    The call to put_i2c_dev() frees "i2c_dev" so there is a use after
    free when we call cdev_del(&i2c_dev->cdev).
    
    Fixes: d6760b14d4a1 ('i2c: dev: switch from register_chrdev to cdev API')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 663ae2cc04773608e1e741f693e41200fd4faf14
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Mon May 16 13:18:57 2016 +0200

    rbd: get/put img_request in rbd_img_request_submit()
    
    By the time we get to checking for_each_obj_request_safe(img_request)
    terminating condition, all obj_requests may be complete and img_request
    ref, that rbd_img_request_submit() takes away from its caller, may be
    put.  Moving the next_obj_request cursor is then a use-after-free on
    img_request.
    
    It's totally benign, as the value that's read is never used, but
    I think it's still worth fixing.
    
    Cc: Alex Elder <elder@linaro.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>

commits)
      USB: serial: ti_usb_3410_5052: add MOXA UPORT 11x0 support
      USB: serial: fix minor-number allocation
      USB: serial: quatech2: fix use-after-free in probe error path
      USB: serial: mxuport: fix use-after-free in probe error path
      USB: serial: keyspan: fix debug and error messages
      USB: serial: keyspan: fix URB unlink
      USB: serial: keyspan: fix use-after-free in probe error path
      USB: serial: io_edgeport: fix memory leaks in probe error path
      USB: serial: io_edgeport: fix memory leaks in attach error path
      usb: Remove unnecessary space before operator ','.
      usb: Remove unnecessary space before open square bracket.
      USB: FHCI: avoid redundant condition
      usb: host: xhci-rcar: Avoid long wait in xhci_reset()
      usb/host/fotg210: remove dead code in create_sysfs_files
      usb: wusbcore: Do not initialise statics to 0.
      usb: wusbcore: Remove space before ',' and '(' .
      USB: serial: cp210x: clean up CRTSCTS flag code
      USB: serial: cp210x: get rid of magic numbers in CRTSCTS flag code
      USB: serial: cp210x: fix hardware flow-control disable
      USB: serial: option: add even more ZTE device ids
      ...

commit 55834c59098d0c5a97b0f3247e55832b67facdcf
Author: Alexander Potapenko <glider@google.com>
Date:   Fri May 20 16:59:11 2016 -0700

    mm: kasan: initial memory quarantine implementation
    
    Quarantine isolates freed objects in a separate queue.  The objects are
    returned to the allocator later, which helps to detect use-after-free
    errors.
    
    When the object is freed, its state changes from KASAN_STATE_ALLOC to
    KASAN_STATE_QUARANTINE.  The object is poisoned and put into quarantine
    instead of being returned to the allocator, therefore every subsequent
    access to that object triggers a KASAN error, and the error handler is
    able to say where the object has been allocated and deallocated.
    
    When it's time for the object to leave quarantine, its state becomes
    KASAN_STATE_FREE and it's returned to the allocator.  From now on the
    allocator may reuse it for another allocation.  Before that happens,
    it's still possible to detect a use-after free on that object (it
    retains the allocation/deallocation stacks).
    
    When the allocator reuses this object, the shadow is unpoisoned and old
    allocation/deallocation stacks are wiped.  Therefore a use of this
    object, even an incorrect one, won't trigger ASan warning.
    
    Without the quarantine, it's not guaranteed that the objects aren't
    reused immediately, that's why the probability of catching a
    use-after-free is lower than with quarantine in place.
    
    Quarantine isolates freed objects in a separate queue.  The objects are
    returned to the allocator later, which helps to detect use-after-free
    errors.
    
    Freed objects are first added to per-cpu quarantine queues.  When a
    cache is destroyed or memory shrinking is requested, the objects are
    moved into the global quarantine queue.  Whenever a kmalloc call allows
    memory reclaiming, the oldest objects are popped out of the global queue
    until the total size of objects in quarantine is less than 3/4 of the
    maximum quarantine size (which is a fraction of installed physical
    memory).
    
    As long as an object remains in the quarantine, KASAN is able to report
    accesses to it, so the chance of reporting a use-after-free is
    increased.  Once the object leaves quarantine, the allocator may reuse
    it, in which case the object is unpoisoned and KASAN can't detect
    incorrect accesses to it.
    
    Right now quarantine support is only enabled in SLAB allocator.
    Unification of KASAN features in SLAB and SLUB will be done later.
    
    This patch is based on the "mm: kasan: quarantine" patch originally
    prepared by Dmitry Chernenkov.  A number of improvements have been
    suggested by Andrey Ryabinin.
    
    [glider@google.com: v9]
      Link: http://lkml.kernel.org/r/1462987130-144092-1-git-send-email-glider@google.com
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Andrey Konovalov <adech.fo@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Konstantin Serebryany <kcc@google.com>
    Cc: Dmitry Chernenkov <dmitryc@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7bfec6f47bb0ffd207c7e813e819235e6c1c0f34
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Thu May 19 17:14:15 2016 -0700

    mm, page_alloc: check multiple page fields with a single branch
    
    Every page allocated or freed is checked for sanity to avoid corruptions
    that are difficult to detect later.  A bad page could be due to a number
    of fields.  Instead of using multiple branches, this patch combines
    multiple fields into a single branch.  A detailed check is only
    necessary if that check fails.
    
                                                 4.6.0-rc2                  4.6.0-rc2
                                            initonce-v1r20            multcheck-v1r20
      Min      alloc-odr0-1               359.00 (  0.00%)           348.00 (  3.06%)
      Min      alloc-odr0-2               260.00 (  0.00%)           254.00 (  2.31%)
      Min      alloc-odr0-4               214.00 (  0.00%)           213.00 (  0.47%)
      Min      alloc-odr0-8               186.00 (  0.00%)           186.00 (  0.00%)
      Min      alloc-odr0-16              173.00 (  0.00%)           173.00 (  0.00%)
      Min      alloc-odr0-32              165.00 (  0.00%)           166.00 ( -0.61%)
      Min      alloc-odr0-64              162.00 (  0.00%)           162.00 (  0.00%)
      Min      alloc-odr0-128             161.00 (  0.00%)           160.00 (  0.62%)
      Min      alloc-odr0-256             170.00 (  0.00%)           169.00 (  0.59%)
      Min      alloc-odr0-512             181.00 (  0.00%)           180.00 (  0.55%)
      Min      alloc-odr0-1024            190.00 (  0.00%)           188.00 (  1.05%)
      Min      alloc-odr0-2048            196.00 (  0.00%)           194.00 (  1.02%)
      Min      alloc-odr0-4096            202.00 (  0.00%)           199.00 (  1.49%)
      Min      alloc-odr0-8192            205.00 (  0.00%)           202.00 (  1.46%)
      Min      alloc-odr0-16384           205.00 (  0.00%)           203.00 (  0.98%)
    
    Again, the benefit is marginal but avoiding excessive branches is
    important.  Ideally the paths would not have to check these conditions
    at all but regrettably abandoning the tests would make use-after-free
    bugs much harder to detect.
    
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c7ce4f60ac199fb3521c5fcd64da21cee801ec2b
Author: Thomas Garnier <thgarnie@google.com>
Date:   Thu May 19 17:10:37 2016 -0700

    mm: SLAB freelist randomization
    
    Provides an optional config (CONFIG_SLAB_FREELIST_RANDOM) to randomize
    the SLAB freelist.  The list is randomized during initialization of a
    new set of pages.  The order on different freelist sizes is pre-computed
    at boot for performance.  Each kmem_cache has its own randomized
    freelist.  Before pre-computed lists are available freelists are
    generated dynamically.  This security feature reduces the predictability
    of the kernel SLAB allocator against heap overflows rendering attacks
    much less stable.
    
    For example this attack against SLUB (also applicable against SLAB)
    would be affected:
    
      https://jon.oberheide.org/blog/2010/09/10/linux-kernel-can-slub-overflow/
    
    Also, since v4.6 the freelist was moved at the end of the SLAB.  It
    means a controllable heap is opened to new attacks not yet publicly
    discussed.  A kernel heap overflow can be transformed to multiple
    use-after-free.  This feature makes this type of attack harder too.
    
    To generate entropy, we use get_random_bytes_arch because 0 bits of
    entropy is available in the boot stage.  In the worse case this function
    will fallback to the get_random_bytes sub API.  We also generate a shift
    random number to shift pre-computed freelist for each new set of pages.
    
    The config option name is not specific to the SLAB as this approach will
    be extended to other allocators like SLUB.
    
    Performance results highlighted no major changes:
    
    Hackbench (running 90 10 times):
    
      Before average: 0.0698
      After average: 0.0663 (-5.01%)
    
    slab_test 1 run on boot.  Difference only seen on the 2048 size test
    being the worse case scenario covered by freelist randomization.  New
    slab pages are constantly being created on the 10000 allocations.
    Variance should be mainly due to getting new pages every few
    allocations.
    
    Before:
    
      Single thread testing
      =====================
      1. Kmalloc: Repeatedly allocate then free test
      10000 times kmalloc(8) -> 99 cycles kfree -> 112 cycles
      10000 times kmalloc(16) -> 109 cycles kfree -> 140 cycles
      10000 times kmalloc(32) -> 129 cycles kfree -> 137 cycles
      10000 times kmalloc(64) -> 141 cycles kfree -> 141 cycles
      10000 times kmalloc(128) -> 152 cycles kfree -> 148 cycles
      10000 times kmalloc(256) -> 195 cycles kfree -> 167 cycles
      10000 times kmalloc(512) -> 257 cycles kfree -> 199 cycles
      10000 times kmalloc(1024) -> 393 cycles kfree -> 251 cycles
      10000 times kmalloc(2048) -> 649 cycles kfree -> 228 cycles
      10000 times kmalloc(4096) -> 806 cycles kfree -> 370 cycles
      10000 times kmalloc(8192) -> 814 cycles kfree -> 411 cycles
      10000 times kmalloc(16384) -> 892 cycles kfree -> 455 cycles
      2. Kmalloc: alloc/free test
      10000 times kmalloc(8)/kfree -> 121 cycles
      10000 times kmalloc(16)/kfree -> 121 cycles
      10000 times kmalloc(32)/kfree -> 121 cycles
      10000 times kmalloc(64)/kfree -> 121 cycles
      10000 times kmalloc(128)/kfree -> 121 cycles
      10000 times kmalloc(256)/kfree -> 119 cycles
      10000 times kmalloc(512)/kfree -> 119 cycles
      10000 times kmalloc(1024)/kfree -> 119 cycles
      10000 times kmalloc(2048)/kfree -> 119 cycles
      10000 times kmalloc(4096)/kfree -> 121 cycles
      10000 times kmalloc(8192)/kfree -> 119 cycles
      10000 times kmalloc(16384)/kfree -> 119 cycles
    
    After:
    
      Single thread testing
      =====================
      1. Kmalloc: Repeatedly allocate then free test
      10000 times kmalloc(8) -> 130 cycles kfree -> 86 cycles
      10000 times kmalloc(16) -> 118 cycles kfree -> 86 cycles
      10000 times kmalloc(32) -> 121 cycles kfree -> 85 cycles
      10000 times kmalloc(64) -> 176 cycles kfree -> 102 cycles
      10000 times kmalloc(128) -> 178 cycles kfree -> 100 cycles
      10000 times kmalloc(256) -> 205 cycles kfree -> 109 cycles
      10000 times kmalloc(512) -> 262 cycles kfree -> 136 cycles
      10000 times kmalloc(1024) -> 342 cycles kfree -> 157 cycles
      10000 times kmalloc(2048) -> 701 cycles kfree -> 238 cycles
      10000 times kmalloc(4096) -> 803 cycles kfree -> 364 cycles
      10000 times kmalloc(8192) -> 835 cycles kfree -> 404 cycles
      10000 times kmalloc(16384) -> 896 cycles kfree -> 441 cycles
      2. Kmalloc: alloc/free test
      10000 times kmalloc(8)/kfree -> 121 cycles
      10000 times kmalloc(16)/kfree -> 121 cycles
      10000 times kmalloc(32)/kfree -> 123 cycles
      10000 times kmalloc(64)/kfree -> 142 cycles
      10000 times kmalloc(128)/kfree -> 121 cycles
      10000 times kmalloc(256)/kfree -> 119 cycles
      10000 times kmalloc(512)/kfree -> 119 cycles
      10000 times kmalloc(1024)/kfree -> 119 cycles
      10000 times kmalloc(2048)/kfree -> 119 cycles
      10000 times kmalloc(4096)/kfree -> 119 cycles
      10000 times kmalloc(8192)/kfree -> 119 cycles
      10000 times kmalloc(16384)/kfree -> 119 cycles
    
    [akpm@linux-foundation.org: propagate gfp_t into cache_random_seq_create()]
    Signed-off-by: Thomas Garnier <thgarnie@google.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Laura Abbott <labbott@fedoraproject.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit afee4d8707ab1f21b7668de995be3a5961e83582
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Tue May 17 15:07:50 2016 +0200

    Revert "drm/i915: Avoid stalling on pending flips for legacy cursor updates"
    
    This reverts commit acf4e84d6167317ff21be5c03e1ea76ea5783701.
    Unfortunately this breaks the next commit with a use-after-free, so
    temporarily revert until we can apply a solution.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463490484-19540-8-git-send-email-maarten.lankhorst@linux.intel.com
    Reviewed-by: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>

commit 55d80d230178a7ec21f12ee9b3fda5e1f2aa98ca
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Tue May 17 15:07:45 2016 +0200

    drm/i915: Remove stallcheck special handling, v3.
    
    Both intel_unpin_work.pending and intel_unpin_work.enable_stall_check
    were used to see if work should be enabled. By only using pending
    some special cases are gone, and access to unpin_work can be simplified.
    
    A flip could previously be queued before
    stallcheck was active. With the addition of the pending member
    enable_stall_check became obsolete and can thus be removed.
    
    Use this to only access work members untilintel_mark_page_flip_active
    is called, or intel_queue_mmio_flip is used. This will prevent
    use-after-free, and makes it easier to verify accesses.
    
    Changes since v1:
    - Reword commit message.
    - Do not access unpin_work after intel_mark_page_flip_active.
    - Add the right memory barriers.
    Changes since v2:
    - atomic_read() needs a full smp_rmb.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463490484-19540-3-git-send-email-maarten.lankhorst@linux.intel.com
    Reviewed-by: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>

commit ef62adae82524c745640850f62ab0dfe0b580c9f
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed May 18 15:47:48 2016 +0200

    greybus: operation: fix broken activation logic
    
    An operation should only be added to the connection active list if the
    connection is in the enabled state, or if it is in the enabled_tx state
    and the operation is not incoming.
    
    This fixes a race where an early or late incoming request could be added
    to the active list while the connection is being enabled or disabled,
    something which could lead to use-after-free issues or worse.
    
    Note that the early connection-state checks in the receive path
    limited the impact of this bug.
    
    Fixes: e903a2ce7379 ("connection: add unidirectional enabled state")
    Reported-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 1f2dcfe89edac4e3bf5b76c56f745191f921fd2a
Author: Dave Chinner <dchinner@redhat.com>
Date:   Wed May 18 14:01:53 2016 +1000

    xfs: xfs_inode_free() isn't RCU safe
    
    The xfs_inode freed in xfs_inode_free() has multiple allocated
    structures attached to it. We free these in xfs_inode_free() before
    we mark the inode as invalid, and before we run call_rcu() to queue
    the structure for freeing.
    
    Unfortunately, this freeing can race with other accesses that are in
    the RCU current grace period that have found the inode in the radix
    tree with a valid state.  This includes xfs_iflush_cluster(), which
    calls xfs_inode_clean(), and that accesses the inode log item on the
    xfs_inode.
    
    The log item structure is freed in xfs_inode_free(), so there is the
    possibility we can be accessing freed memory in xfs_iflush_cluster()
    after validating the xfs_inode structure as being valid for this RCU
    context. Hence we can get spuriously incorrect clean state returned
    from such checks. This can lead to use thinking the inode is dirty
    when it is, in fact, clean, and so incorrectly attaching it to the
    buffer for IO and completion processing.
    
    This then leads to use-after-free situations on the xfs_inode itself
    if the IO completes after the current RCU grace period expires. The
    buffer callbacks will access the xfs_inode and try to do all sorts
    of things it shouldn't with freed memory.
    
    IOWs, xfs_iflush_cluster() only works correctly when racing with
    inode reclaim if the inode log item is present and correctly stating
    the inode is clean. If the inode is being freed, then reclaim has
    already made sure the inode is clean, and hence xfs_iflush_cluster
    can skip it. However, we are accessing the inode inode under RCU
    read lock protection and so also must ensure that all dynamically
    allocated memory we reference in this context is not freed until the
    RCU grace period expires.
    
    To fix this, move all the potential memory freeing into
    xfs_inode_free_callback() so that we are guarantee RCU protected
    lookup code will always have the memory structures it needs
    available during the RCU grace period that lookup races can occur
    in.
    
    Discovered-by: Brain Foster <bfoster@redhat.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit b1438f477934f5a4d5a44df26f3079a7575d5946
Author: Dave Chinner <dchinner@redhat.com>
Date:   Wed May 18 13:53:42 2016 +1000

    xfs: xfs_iflush_cluster fails to abort on error
    
    When a failure due to an inode buffer occurs, the error handling
    fails to abort the inode writeback correctly. This can result in the
    inode being reclaimed whilst still in the AIL, leading to
    use-after-free situations as well as filesystems that cannot be
    unmounted as the inode log items left in the AIL never get removed.
    
    Fix this by ensuring fatal errors from xfs_imap_to_bp() result in
    the inode flush being aborted correctly.
    
    cc: <stable@vger.kernel.org> # 3.10.x-
    Reported-by: Shyam Kaushik <shyam@zadarastorage.com>
    Diagnosed-by: Shyam Kaushik <shyam@zadarastorage.com>
    Tested-by: Shyam Kaushik <shyam@zadarastorage.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit fc173ae6ddd0e7271447f1cb2d048b11cb6fd872
Author: Andrzej Hajda <a.hajda@samsung.com>
Date:   Wed May 4 15:23:11 2016 +0200

    drm/exynos: fix cancel page flip code
    
    Driver code did not remove event from the list of pending events before destroy.
    As a result drm core later tried to inspect invalid memory location.
    The patch replaces removal code with call to core helper.
    
    The bug was detected using KASAN:
    
    [   10.107249] ==================================================================
    [   10.107518] BUG: KASAN: use-after-free in drm_release+0xe9c/0x1000 at addr ffffffc089154a18
    [   10.107784] Read of size 8 by task modetest/103
    [   10.107931] =============================================================================
    [   10.113191] BUG kmalloc-128 (Not tainted): kasan: bad access detected
    [   10.119608] -----------------------------------------------------------------------------
    [   10.119608]
    [   10.129243] Disabling lock debugging due to kernel taint
    [   10.134551] INFO: Allocated in drm_mode_page_flip_ioctl+0x500/0xa98 age=4 cpu=0 pid=103
    [   10.142532]  alloc_debug_processing+0x18c/0x198
    [   10.147043]  ___slab_alloc.constprop.28+0x360/0x380
    [   10.151906]  __slab_alloc.isra.25.constprop.27+0x54/0xa0
    [   10.157197]  kmem_cache_alloc_trace+0x370/0x3b0
    [   10.161709]  drm_mode_page_flip_ioctl+0x500/0xa98
    [   10.166400]  drm_ioctl+0x4c4/0xb68
    [   10.169787]  do_vfs_ioctl+0x16c/0xeb8
    [   10.173429]  SyS_ioctl+0x8c/0xa0
    [   10.176642]  el0_svc_naked+0x24/0x28
    [   10.180204] INFO: Freed in exynos_drm_crtc_cancel_page_flip+0xe0/0x160 age=0 cpu=0 pid=103
    [   10.188447]  free_debug_processing+0x174/0x388
    [   10.192871]  __slab_free+0x2e8/0x438
    [   10.196431]  kfree+0x350/0x360
    [   10.199469]  exynos_drm_crtc_cancel_page_flip+0xe0/0x160
    [   10.204762]  exynos_drm_preclose+0x58/0xa0
    [   10.208844]  drm_release+0x1f0/0x1000
    [   10.212491]  __fput+0x1c4/0x5b8
    [   10.215613]  ____fput+0xc/0x18
    [   10.218654]  task_work_run+0x130/0x198
    [   10.222385]  do_exit+0x700/0x2278
    [   10.225681]  do_group_exit+0xe4/0x2c8
    [   10.229327]  SyS_exit_group+0x1c/0x20
    [   10.232973]  el0_svc_naked+0x24/0x28
    [   10.236532] INFO: Slab 0xffffffbdc2a45500 objects=32 used=10 fp=0xffffffc089154a00 flags=0x4080
    [   10.245210] INFO: Object 0xffffffc089154a00 @offset=2560 fp=0xffffffc089157600
    [   10.245210]
    ...
    [   10.384532] CPU: 0 PID: 103 Comm: modetest Tainted: G    B           4.5.0-rc3-00748-gd5e2881 #271
    [   10.398325] Call trace:
    [   10.400764] [<ffffffc000091428>] dump_backtrace+0x0/0x328
    [   10.406141] [<ffffffc000091764>] show_stack+0x14/0x20
    [   10.411176] [<ffffffc00089c550>] dump_stack+0xb0/0xe8
    [   10.416210] [<ffffffc000395778>] print_trailer+0xf8/0x160
    [   10.421592] [<ffffffc00039b5cc>] object_err+0x3c/0x50
    [   10.426626] [<ffffffc00039d630>] kasan_report_error+0x248/0x550
    [   10.432527] [<ffffffc00039da50>] __asan_report_load8_noabort+0x40/0x48
    [   10.439039] [<ffffffc000b5b724>] drm_release+0xe9c/0x1000
    [   10.444419] [<ffffffc0003d340c>] __fput+0x1c4/0x5b8
    [   10.449280] [<ffffffc0003d3884>] ____fput+0xc/0x18
    [   10.454055] [<ffffffc000101aa8>] task_work_run+0x130/0x198
    [   10.459522] [<ffffffc0000bc058>] do_exit+0x700/0x2278
    [   10.464557] [<ffffffc0000bdcfc>] do_group_exit+0xe4/0x2c8
    [   10.469939] [<ffffffc0000bdefc>] SyS_exit_group+0x1c/0x20
    [   10.475320] [<ffffffc000087530>] el0_svc_naked+0x24/0x28
    
    Signed-off-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit 028c49f5e02a257c94129cd815f7c8485f51d4ef
Author: Johan Hovold <johan@kernel.org>
Date:   Sun May 8 20:08:02 2016 +0200

    USB: serial: quatech2: fix use-after-free in probe error path
    
    The interface read URB is submitted in attach, but was only unlinked by
    the driver at disconnect.
    
    In case of a late probe error (e.g. due to failed minor allocation),
    disconnect is never called and we would end up with active URBs for an
    unbound interface. This in turn could lead to deallocated memory being
    dereferenced in the completion callback.
    
    Fixes: f7a33e608d9a ("USB: serial: add quatech2 usb to serial driver")
    Cc: stable <stable@vger.kernel.org>     # v3.5: 40d04738491d
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e45284984096314994777f27e1446dfbfd2f0d7
Author: Johan Hovold <johan@kernel.org>
Date:   Sun May 8 20:08:01 2016 +0200

    USB: serial: mxuport: fix use-after-free in probe error path
    
    The interface read and event URBs are submitted in attach, but were
    never explicitly unlinked by the driver. Instead the URBs would have
    been killed by usb-serial core on disconnect.
    
    In case of a late probe error (e.g. due to failed minor allocation),
    disconnect is never called and we could end up with active URBs for an
    unbound interface. This in turn could lead to deallocated memory being
    dereferenced in the completion callbacks.
    
    Fixes: ee467a1f2066 ("USB: serial: add Moxa UPORT 12XX/14XX/16XX
    driver")
    Cc: stable <stable@vger.kernel.org>     # v3.14
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35be1a71d70775e7bd7e45fa6d2897342ff4c9d2
Author: Johan Hovold <johan@kernel.org>
Date:   Sun May 8 20:07:58 2016 +0200

    USB: serial: keyspan: fix use-after-free in probe error path
    
    The interface instat and indat URBs were submitted in attach, but never
    unlinked in release before deallocating the corresponding transfer
    buffers.
    
    In the case of a late probe error (e.g. due to failed minor allocation),
    disconnect would not have been called before release, causing the
    buffers to be freed while the URBs are still in use. We'd also end up
    with active URBs for an unbound interface.
    
    Fixes: f9c99bb8b3a1 ("USB: usb-serial: replace shutdown with disconnect,
    release")
    Cc: stable <stable@vger.kernel.org>     # v2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab925a315eb3c6cd9fe25ff0ca5babb94a98b55c
Author: Shawn Lin <shawn.lin@rock-chips.com>
Date:   Wed Mar 9 10:34:46 2016 +0800

    mmc: dw_mmc: avoid using dmaengine_terminate_all
    
    dmaengine_terminate_all is deprecated and should be
    replaced by more explicit synchronous and asynchronous
    terminate functions. This change is based on the
    commit b36f09c3c441 ("dmaengine: Add transfer termination
    synchronization support"). Currently dw_mci_stop_dma
    may be called under the spinlock, let's migrate
    dmaengine_terminate_all to async terminate. This could
    avoid the race condition of use-after-free resouce of
    dmaengine once slave-dma driver implement the synchronize
    method.
    
    Signed-off-by: Shawn Lin <shawn.lin@rock-chips.com>
    Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>

commit cec5913c1515e5619907016658838af4eff78dd3
Author: Liping Zhang <liping.zhang@spreadtrum.com>
Date:   Thu Apr 21 00:47:08 2016 -0700

    netfilter: IDLETIMER: fix race condition when destroy the target
    
    Workqueue maybe still in running while we destroy the IDLETIMER target,
    thus cause a use after free error, add cancel_work_sync() to avoid such
    situation.
    
    Signed-off-by: Liping Zhang <liping.zhang@spreadtrum.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit e88c9271d9f8db79d8104f7f7bd14cb8d88cc187
Author: Mitko Haralanov <mitko.haralanov@intel.com>
Date:   Tue Apr 12 10:46:53 2016 -0700

    IB/hfi1: Fix buffer cache races which may cause corruption
    
    There are two possible causes for node/memory corruption both
    of which are related to the cache eviction algorithm. One way
    to cause corruption is due to the asynchronous nature of the
    MMU invalidation and the locking used when invalidating node.
    
    The MMU invalidation routine would temporarily release the
    RB tree lock to avoid a deadlock. However, this would allow
    the eviction function to take the lock resulting in the removal
    of cache nodes.
    
    If the node being removed by the eviction code is the same as
    the node being invalidated, the result is use after free.
    
    The same is true in the other direction due to the temporary
    release of the eviction list lock in the eviction loop.
    
    Another corner case exists when dealing with the SDMA buffer
    cache that could cause memory corruption of kernel memory.
    The most common way, in which this corruption exhibits itself
    is a linked list node corruption. In that case, the kernel will
    complain that a node with poisoned pointers is being removed.
    The fact that the pointers are already poisoned means that the
    node has already been removed from the list.
    
    To root cause of this corruption was a mishandling of the
    eviction list maintained by the driver. In order for this
    to happen four conditions need to be satisfied:
    
       1. A node describing a user buffer already exists in the
          interval RB tree,
       2. The beginning of the current user buffer matches that
          node but is bigger. This will cause the node to be
          extended.
       3. The amount of cached buffers is close or at the limit
          of the buffer cache size.
       4. The node has dropped close to the end of the eviction
          list. This will cause the node to be considered for
          eviction.
    
    If all of the above conditions have been satisfied, it is
    possible for the eviction algorithm to evict the current node,
    which will free the node without the driver knowing.
    
    To solve both issues described above:
       - the locking around the MMU invalidation loop and cache
         eviction loop has been improved so locks are not released in
         the loop body,
       - a new RB function is introduced which will "atomically" find
         and remove the matching node from the RB tree, preventing the
         MMU invalidation loop from touching it, and
       - the node being extended by the pin_vector_pages() function is
         removed from the eviction list prior to calling the eviction
         function.
    
    Reviewed-by: Dean Luick <dean.luick@intel.com>
    Signed-off-by: Mitko Haralanov <mitko.haralanov@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 8ef8561f2c8a5e3c8cfd84a1a755dcabc1440235
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Apr 28 09:56:39 2016 +0100

    drm/i915: Move ioremap_wc tracking onto VMA
    
    By tracking the iomapping on the VMA itself, we can share that area
    between multiple users. Also by only revoking the iomapping upon
    unbinding from the mappable portion of the GGTT, we can keep that iomap
    across multiple invocations (e.g. execlists context pinning).
    
    Note that by moving the iounnmap tracking to the VMA, we actually end up
    fixing a leak of the iomapping in intel_fbdev.
    
    v1.5: Rebase prompted by Tvrtko
    v2: Drop dev_priv parameter, we can recover the i915_ggtt from the vma.
    v3: Move handling of ioremap space exhaustion to vmap_purge and also
    allow vmallocs to recover old iomaps. Add Tvrtko's kerneldoc.
    v4: Fix a use-after-free in shrinker and rearrange i915_vma_iomap
    v5: Back to i915_vm_to_ggtt
    v6: Use i915_vma_pin_iomap and i915_vma_unpin_iomap to mark critical
    sections and ensure the VMA cannot be reaped whilst mapped.
    v7: Move i915_vma_iounmap so that consumers of the API are not tempted,
    and add iomem annotations
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1461833819-3991-5-git-send-email-chris@chris-wilson.co.uk

commit 0224a4a30b57385a60065aa598181868881d8fc6
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Wed Apr 27 14:04:20 2016 +0300

    device property: Avoid potential dereferences of invalid pointers
    
    Since fwnode may hold ERR_PTR(-ENODEV) or it may be NULL,
    the fwnode type checks is_of_node(), is_acpi_node() and is
    is_pset_node() need to consider it. Using IS_ERR_OR_NULL()
    to check it.
    
    Fixes: 0d67e0fa1664 (device property: fix for a case of use-after-free)
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    [ rjw: Subject & changelog ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 263efde31f97c498e1ebad30e4d2906609d7ad6b
Author: cpaul@redhat.com <cpaul@redhat.com>
Date:   Fri Apr 22 16:08:46 2016 -0400

    drm/dp/mst: Get validated port ref in drm_dp_update_payload_part1()
    
    We can thank KASAN for finding this, otherwise I probably would have spent
    hours on it. This fixes a somewhat harder to trigger kernel panic, occuring
    while enabling MST where the port we were currently updating the payload on
    would have all of it's refs dropped before we finished what we were doing:
    
    ==================================================================
    BUG: KASAN: use-after-free in drm_dp_update_payload_part1+0xb3f/0xdb0 [drm_kms_helper] at addr ffff8800d29de018
    Read of size 4 by task Xorg/973
    =============================================================================
    BUG kmalloc-2048 (Tainted: G    B   W      ): kasan: bad access detected
    -----------------------------------------------------------------------------
    
    INFO: Allocated in drm_dp_add_port+0x1aa/0x1ed0 [drm_kms_helper] age=16477 cpu=0 pid=2175
            ___slab_alloc+0x472/0x490
            __slab_alloc+0x20/0x40
            kmem_cache_alloc_trace+0x151/0x190
            drm_dp_add_port+0x1aa/0x1ed0 [drm_kms_helper]
            drm_dp_send_link_address+0x526/0x960 [drm_kms_helper]
            drm_dp_check_and_send_link_address+0x1ac/0x210 [drm_kms_helper]
            drm_dp_mst_link_probe_work+0x77/0xd0 [drm_kms_helper]
            process_one_work+0x562/0x1350
            worker_thread+0xd9/0x1390
            kthread+0x1c5/0x260
            ret_from_fork+0x22/0x40
    INFO: Freed in drm_dp_free_mst_port+0x50/0x60 [drm_kms_helper] age=7521 cpu=0 pid=2175
            __slab_free+0x17f/0x2d0
            kfree+0x169/0x180
            drm_dp_free_mst_port+0x50/0x60 [drm_kms_helper]
            drm_dp_destroy_connector_work+0x2b8/0x490 [drm_kms_helper]
            process_one_work+0x562/0x1350
            worker_thread+0xd9/0x1390
            kthread+0x1c5/0x260
            ret_from_fork+0x22/0x40
    
    which on this T460s, would eventually lead to kernel panics in somewhat
    random places later in intel_mst_enable_dp() if we got lucky enough.
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 8358b02bf67d3a5d8a825070e1aa73f25fb2e4c7
Author: Jann Horn <jannh@google.com>
Date:   Tue Apr 26 22:26:26 2016 +0200

    bpf: fix double-fdput in replace_map_fd_with_map_ptr()
    
    When bpf(BPF_PROG_LOAD, ...) was invoked with a BPF program whose bytecode
    references a non-map file descriptor as a map file descriptor, the error
    handling code called fdput() twice instead of once (in __bpf_map_get() and
    in replace_map_fd_with_map_ptr()). If the file descriptor table of the
    current task is shared, this causes f_count to be decremented too much,
    allowing the struct file to be freed while it is still in use
    (use-after-free). This can be exploited to gain root privileges by an
    unprivileged user.
    
    This bug was introduced in
    commit 0246e64d9a5f ("bpf: handle pseudo BPF_LD_IMM64 insn"), but is only
    exploitable since
    commit 1be7f75d1668 ("bpf: enable non-root eBPF programs") because
    previously, CAP_SYS_ADMIN was required to reach the vulnerable code.
    
    (posted publicly according to request by maintainer)
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d2c5cf88d5282de258f4eb6ab40040b80a075cd8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Apr 24 22:52:18 2016 +0200

    ALSA: hrtimer: Handle start/stop more properly
    
    This patch tries to address the still remaining issues in ALSA hrtimer
    driver:
    - Spurious use-after-free was detected in hrtimer callback
    - Incorrect rescheduling due to delayed start
    - WARN_ON() is triggered in hrtimer_forward() invoked in hrtimer
      callback
    
    The first issue happens only when the new timer is scheduled even
    while hrtimer is being closed.  It's related with the second and third
    items; since ALSA timer core invokes hw.start callback during hrtimer
    interrupt, this may result in the explicit call of hrtimer_start().
    
    Also, the similar problem is seen for the stop; ALSA timer core
    invokes hw.stop callback even in the hrtimer handler, too.  Since we
    must not call the synced hrtimer_cancel() in such a context, it's just
    a hrtimer_try_to_cancel() call that doesn't properly work.
    
    Another culprit of the second and third items is the call of
    hrtimer_forward_now() before snd_timer_interrupt().  The timer->stick
    value may change during snd_timer_interrupt() call, but this
    possibility is ignored completely.
    
    For covering these subtle and messy issues, the following changes have
    been done in this patch:
    - A new flag, in_callback, is introduced in the private data to
      indicate that the hrtimer handler is being processed.
    - Both start and stop callbacks skip when called from (during)
      in_callback flag.
    - The hrtimer handler returns properly HRTIMER_RESTART and NORESTART
      depending on the running state now.
    - The hrtimer handler reprograms the expiry properly after
      snd_timer_interrupt() call, instead of before.
    - The close callback clears running flag and sets in_callback flag
      to block any further start/stop calls.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit dba599091c191d209b1499511a524ad9657c0e5a
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Apr 15 09:41:35 2016 +0200

    s390/pci: fix use after free in dma_init
    
    After a failure during registration of the dma_table (because of the
    function being in error state) we free its memory but don't reset the
    associated pointer to zero.
    
    When we then receive a notification from firmware (about the function
    being in error state) we'll try to walk and free the dma_table again.
    
    Fix this by resetting the dma_table pointer. In addition to that make
    sure that we free the iommu_bitmap when appropriate.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 07c8fccbf7fd6adf896db380c5a32c66a5b32aca
Author: Krzysztof Kozlowski <k.kozlowski@samsung.com>
Date:   Tue Apr 19 15:44:11 2016 +0200

    crypto: s5p-sss - Fix use after free of copied input buffer in error path
    
    The driver makes copies of memory (input or output scatterlists) if they
    are not aligned. In s5p_aes_crypt_start() error path (on unsuccessful
    initialization of output scatterlist), if input scatterlist was not
    aligned, the driver first freed copied input memory and then unmapped it
    from the device, instead of doing otherwise (unmap and then free).
    
    This was wrong in two ways:
    1. Freed pages were still mapped to the device.
    2. The dma_unmap_sg() iterated over freed scatterlist structure.
    
    The call to s5p_free_sg_cpy() in this error path is not needed because
    the copied scatterlists will be freed by s5p_aes_complete().
    
    Fixes: 9e4a1100a445 ("crypto: s5p-sss - Handle unaligned buffers")
    Signed-off-by: Krzysztof Kozlowski <k.kozlowski@samsung.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 38740a5b87d53ceb89eb2c970150f6e94e00373a
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Apr 14 17:01:17 2016 +0200

    usb: gadget: f_fs: Fix use-after-free
    
    When using asynchronous read or write operations on the USB endpoints the
    issuer of the IO request is notified by calling the ki_complete() callback
    of the submitted kiocb when the URB has been completed.
    
    Calling this ki_complete() callback will free kiocb. Make sure that the
    structure is no longer accessed beyond that point, otherwise undefined
    behaviour might occur.
    
    Fixes: 2e4c7553cd6f ("usb: gadget: f_fs: add aio support")
    Cc: <stable@vger.kernel.org> # v3.15+
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 373a32c848ae3a1c03618517cce85f9211a6facf
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Sat Mar 19 11:05:18 2016 +0100

    Bluetooth: vhci: fix open_timeout vs. hdev race
    
    Both vhci_get_user and vhci_release race with open_timeout work. They
    both contain cancel_delayed_work_sync, but do not test whether the
    work actually created hdev or not. Since the work can be in progress
    and _sync will wait for finishing it, we can have data->hdev allocated
    when cancel_delayed_work_sync returns. But the call sites do 'if
    (data->hdev)' *before* cancel_delayed_work_sync.
    
    As a result:
    * vhci_get_user allocates a second hdev and puts it into
      data->hdev. The former is leaked.
    * vhci_release does not release data->hdev properly as it thinks there
      is none.
    
    Fix both cases by moving the actual test *after* the call to
    cancel_delayed_work_sync.
    
    This can be hit by this program:
            #include <err.h>
            #include <fcntl.h>
            #include <stdio.h>
            #include <stdlib.h>
            #include <time.h>
            #include <unistd.h>
    
            #include <sys/stat.h>
            #include <sys/types.h>
    
            int main(int argc, char **argv)
            {
                    int fd;
    
                    srand(time(NULL));
    
                    while (1) {
                            const int delta = (rand() % 200 - 100) * 100;
    
                            fd = open("/dev/vhci", O_RDWR);
                            if (fd < 0)
                                    err(1, "open");
    
                            usleep(1000000 + delta);
    
                            close(fd);
                    }
    
                    return 0;
            }
    
    And the result is:
    BUG: KASAN: use-after-free in skb_queue_tail+0x13e/0x150 at addr ffff88006b0c1228
    Read of size 8 by task kworker/u13:1/32068
    =============================================================================
    BUG kmalloc-192 (Tainted: G            E     ): kasan: bad access detected
    -----------------------------------------------------------------------------
    
    Disabling lock debugging due to kernel taint
    INFO: Allocated in vhci_open+0x50/0x330 [hci_vhci] age=260 cpu=3 pid=32040
    ...
            kmem_cache_alloc_trace+0x150/0x190
            vhci_open+0x50/0x330 [hci_vhci]
            misc_open+0x35b/0x4e0
            chrdev_open+0x23b/0x510
    ...
    INFO: Freed in vhci_release+0xa4/0xd0 [hci_vhci] age=9 cpu=2 pid=32040
    ...
            __slab_free+0x204/0x310
            vhci_release+0xa4/0xd0 [hci_vhci]
    ...
    INFO: Slab 0xffffea0001ac3000 objects=16 used=13 fp=0xffff88006b0c1e00 flags=0x5fffff80004080
    INFO: Object 0xffff88006b0c1200 @offset=4608 fp=0xffff88006b0c0600
    Bytes b4 ffff88006b0c11f0: 09 df 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................
    Object ffff88006b0c1200: 00 06 0c 6b 00 88 ff ff 00 00 00 00 00 00 00 00  ...k............
    Object ffff88006b0c1210: 10 12 0c 6b 00 88 ff ff 10 12 0c 6b 00 88 ff ff  ...k.......k....
    Object ffff88006b0c1220: c0 46 c2 6b 00 88 ff ff c0 46 c2 6b 00 88 ff ff  .F.k.....F.k....
    Object ffff88006b0c1230: 01 00 00 00 01 00 00 00 e0 ff ff ff 0f 00 00 00  ................
    Object ffff88006b0c1240: 40 12 0c 6b 00 88 ff ff 40 12 0c 6b 00 88 ff ff  @..k....@..k....
    Object ffff88006b0c1250: 50 0d 6e a0 ff ff ff ff 00 02 00 00 00 00 ad de  P.n.............
    Object ffff88006b0c1260: 00 00 00 00 00 00 00 00 ab 62 02 00 01 00 00 00  .........b......
    Object ffff88006b0c1270: 90 b9 19 81 ff ff ff ff 38 12 0c 6b 00 88 ff ff  ........8..k....
    Object ffff88006b0c1280: 03 00 20 00 ff ff ff ff ff ff ff ff 00 00 00 00  .. .............
    Object ffff88006b0c1290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    Object ffff88006b0c12a0: 00 00 00 00 00 00 00 00 00 80 cd 3d 00 88 ff ff  ...........=....
    Object ffff88006b0c12b0: 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . ..............
    Redzone ffff88006b0c12c0: bb bb bb bb bb bb bb bb                          ........
    Padding ffff88006b0c13f8: 00 00 00 00 00 00 00 00                          ........
    CPU: 3 PID: 32068 Comm: kworker/u13:1 Tainted: G    B       E      4.4.6-0-default #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.8.1-0-g4adadbd-20151112_172657-sheep25 04/01/2014
    Workqueue: hci0 hci_cmd_work [bluetooth]
     00000000ffffffff ffffffff81926cfa ffff88006be37c68 ffff88006bc27180
     ffff88006b0c1200 ffff88006b0c1234 ffffffff81577993 ffffffff82489320
     ffff88006bc24240 0000000000000046 ffff88006a100000 000000026e51eb80
    Call Trace:
    ...
     [<ffffffff81ec8ebe>] ? skb_queue_tail+0x13e/0x150
     [<ffffffffa06e027c>] ? vhci_send_frame+0xac/0x100 [hci_vhci]
     [<ffffffffa0c61268>] ? hci_send_frame+0x188/0x320 [bluetooth]
     [<ffffffffa0c61515>] ? hci_cmd_work+0x115/0x310 [bluetooth]
     [<ffffffff811a1375>] ? process_one_work+0x815/0x1340
     [<ffffffff811a1f85>] ? worker_thread+0xe5/0x11f0
     [<ffffffff811a1ea0>] ? process_one_work+0x1340/0x1340
     [<ffffffff811b3c68>] ? kthread+0x1c8/0x230
    ...
    Memory state around the buggy address:
     ffff88006b0c1100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88006b0c1180: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88006b0c1200: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                      ^
     ffff88006b0c1280: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc
     ffff88006b0c1300: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    Fixes: 23424c0d31 (Bluetooth: Add support creating virtual AMP controllers)
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: stable 3.13+ <stable@vger.kernel.org>

commit e6e8379c876de16c6b78f83b15d5ac32c79cb440
Author: Alexander Potapenko <glider@google.com>
Date:   Fri Mar 25 14:21:56 2016 -0700

    kasan: modify kmalloc_large_oob_right(), add kmalloc_pagealloc_oob_right()
    
    This patchset implements SLAB support for KASAN
    
    Unlike SLUB, SLAB doesn't store allocation/deallocation stacks for heap
    objects, therefore we reimplement this feature in mm/kasan/stackdepot.c.
    The intention is to ultimately switch SLUB to use this implementation as
    well, which will save a lot of memory (right now SLUB bloats each object
    by 256 bytes to store the allocation/deallocation stacks).
    
    Also neither SLUB nor SLAB delay the reuse of freed memory chunks, which
    is necessary for better detection of use-after-free errors.  We
    introduce memory quarantine (mm/kasan/quarantine.c), which allows
    delayed reuse of deallocated memory.
    
    This patch (of 7):
    
    Rename kmalloc_large_oob_right() to kmalloc_pagealloc_oob_right(), as
    the test only checks the page allocator functionality.  Also reimplement
    kmalloc_large_oob_right() so that the test allocates a large enough
    chunk of memory that still does not trigger the page allocator fallback.
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Andrey Konovalov <adech.fo@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Konstantin Serebryany <kcc@google.com>
    Cc: Dmitry Chernenkov <dmitryc@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1f461dcdd296eecedaffffc6bae2bfa90bd7eb89
Author: Guillaume Nault <g.nault@alphalink.fr>
Date:   Wed Mar 23 16:38:55 2016 +0100

    ppp: take reference on channels netns
    
    Let channels hold a reference on their network namespace.
    Some channel types, like ppp_async and ppp_synctty, can have their
    userspace controller running in a different namespace. Therefore they
    can't rely on them to preclude their netns from being removed from
    under them.
    
    ==================================================================
    BUG: KASAN: use-after-free in ppp_unregister_channel+0x372/0x3a0 at
    addr ffff880064e217e0
    Read of size 8 by task syz-executor/11581
    =============================================================================
    BUG net_namespace (Not tainted): kasan: bad access detected
    -----------------------------------------------------------------------------
    
    Disabling lock debugging due to kernel taint
    INFO: Allocated in copy_net_ns+0x6b/0x1a0 age=92569 cpu=3 pid=6906
    [<      none      >] ___slab_alloc+0x4c7/0x500 kernel/mm/slub.c:2440
    [<      none      >] __slab_alloc+0x4c/0x90 kernel/mm/slub.c:2469
    [<     inline     >] slab_alloc_node kernel/mm/slub.c:2532
    [<     inline     >] slab_alloc kernel/mm/slub.c:2574
    [<      none      >] kmem_cache_alloc+0x23a/0x2b0 kernel/mm/slub.c:2579
    [<     inline     >] kmem_cache_zalloc kernel/include/linux/slab.h:597
    [<     inline     >] net_alloc kernel/net/core/net_namespace.c:325
    [<      none      >] copy_net_ns+0x6b/0x1a0 kernel/net/core/net_namespace.c:360
    [<      none      >] create_new_namespaces+0x2f6/0x610 kernel/kernel/nsproxy.c:95
    [<      none      >] copy_namespaces+0x297/0x320 kernel/kernel/nsproxy.c:150
    [<      none      >] copy_process.part.35+0x1bf4/0x5760 kernel/kernel/fork.c:1451
    [<     inline     >] copy_process kernel/kernel/fork.c:1274
    [<      none      >] _do_fork+0x1bc/0xcb0 kernel/kernel/fork.c:1723
    [<     inline     >] SYSC_clone kernel/kernel/fork.c:1832
    [<      none      >] SyS_clone+0x37/0x50 kernel/kernel/fork.c:1826
    [<      none      >] entry_SYSCALL_64_fastpath+0x16/0x7a kernel/arch/x86/entry/entry_64.S:185
    
    INFO: Freed in net_drop_ns+0x67/0x80 age=575 cpu=2 pid=2631
    [<      none      >] __slab_free+0x1fc/0x320 kernel/mm/slub.c:2650
    [<     inline     >] slab_free kernel/mm/slub.c:2805
    [<      none      >] kmem_cache_free+0x2a0/0x330 kernel/mm/slub.c:2814
    [<     inline     >] net_free kernel/net/core/net_namespace.c:341
    [<      none      >] net_drop_ns+0x67/0x80 kernel/net/core/net_namespace.c:348
    [<      none      >] cleanup_net+0x4e5/0x600 kernel/net/core/net_namespace.c:448
    [<      none      >] process_one_work+0x794/0x1440 kernel/kernel/workqueue.c:2036
    [<      none      >] worker_thread+0xdb/0xfc0 kernel/kernel/workqueue.c:2170
    [<      none      >] kthread+0x23f/0x2d0 kernel/drivers/block/aoe/aoecmd.c:1303
    [<      none      >] ret_from_fork+0x3f/0x70 kernel/arch/x86/entry/entry_64.S:468
    INFO: Slab 0xffffea0001938800 objects=3 used=0 fp=0xffff880064e20000
    flags=0x5fffc0000004080
    INFO: Object 0xffff880064e20000 @offset=0 fp=0xffff880064e24200
    
    CPU: 1 PID: 11581 Comm: syz-executor Tainted: G    B           4.4.0+
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.8.2-0-g33fbe13 by qemu-project.org 04/01/2014
     00000000ffffffff ffff8800662c7790 ffffffff8292049d ffff88003e36a300
     ffff880064e20000 ffff880064e20000 ffff8800662c77c0 ffffffff816f2054
     ffff88003e36a300 ffffea0001938800 ffff880064e20000 0000000000000000
    Call Trace:
     [<     inline     >] __dump_stack kernel/lib/dump_stack.c:15
     [<ffffffff8292049d>] dump_stack+0x6f/0xa2 kernel/lib/dump_stack.c:50
     [<ffffffff816f2054>] print_trailer+0xf4/0x150 kernel/mm/slub.c:654
     [<ffffffff816f875f>] object_err+0x2f/0x40 kernel/mm/slub.c:661
     [<     inline     >] print_address_description kernel/mm/kasan/report.c:138
     [<ffffffff816fb0c5>] kasan_report_error+0x215/0x530 kernel/mm/kasan/report.c:236
     [<     inline     >] kasan_report kernel/mm/kasan/report.c:259
     [<ffffffff816fb4de>] __asan_report_load8_noabort+0x3e/0x40 kernel/mm/kasan/report.c:280
     [<     inline     >] ? ppp_pernet kernel/include/linux/compiler.h:218
     [<ffffffff83ad71b2>] ? ppp_unregister_channel+0x372/0x3a0 kernel/drivers/net/ppp/ppp_generic.c:2392
     [<     inline     >] ppp_pernet kernel/include/linux/compiler.h:218
     [<ffffffff83ad71b2>] ppp_unregister_channel+0x372/0x3a0 kernel/drivers/net/ppp/ppp_generic.c:2392
     [<     inline     >] ? ppp_pernet kernel/drivers/net/ppp/ppp_generic.c:293
     [<ffffffff83ad6f26>] ? ppp_unregister_channel+0xe6/0x3a0 kernel/drivers/net/ppp/ppp_generic.c:2392
     [<ffffffff83ae18f3>] ppp_asynctty_close+0xa3/0x130 kernel/drivers/net/ppp/ppp_async.c:241
     [<ffffffff83ae1850>] ? async_lcp_peek+0x5b0/0x5b0 kernel/drivers/net/ppp/ppp_async.c:1000
     [<ffffffff82c33239>] tty_ldisc_close.isra.1+0x99/0xe0 kernel/drivers/tty/tty_ldisc.c:478
     [<ffffffff82c332c0>] tty_ldisc_kill+0x40/0x170 kernel/drivers/tty/tty_ldisc.c:744
     [<ffffffff82c34943>] tty_ldisc_release+0x1b3/0x260 kernel/drivers/tty/tty_ldisc.c:772
     [<ffffffff82c1ef21>] tty_release+0xac1/0x13e0 kernel/drivers/tty/tty_io.c:1901
     [<ffffffff82c1e460>] ? release_tty+0x320/0x320 kernel/drivers/tty/tty_io.c:1688
     [<ffffffff8174de36>] __fput+0x236/0x780 kernel/fs/file_table.c:208
     [<ffffffff8174e405>] ____fput+0x15/0x20 kernel/fs/file_table.c:244
     [<ffffffff813595ab>] task_work_run+0x16b/0x200 kernel/kernel/task_work.c:115
     [<     inline     >] exit_task_work kernel/include/linux/task_work.h:21
     [<ffffffff81307105>] do_exit+0x8b5/0x2c60 kernel/kernel/exit.c:750
     [<ffffffff813fdd20>] ? debug_check_no_locks_freed+0x290/0x290 kernel/kernel/locking/lockdep.c:4123
     [<ffffffff81306850>] ? mm_update_next_owner+0x6f0/0x6f0 kernel/kernel/exit.c:357
     [<ffffffff813215e6>] ? __dequeue_signal+0x136/0x470 kernel/kernel/signal.c:550
     [<ffffffff8132067b>] ? recalc_sigpending_tsk+0x13b/0x180 kernel/kernel/signal.c:145
     [<ffffffff81309628>] do_group_exit+0x108/0x330 kernel/kernel/exit.c:880
     [<ffffffff8132b9d4>] get_signal+0x5e4/0x14f0 kernel/kernel/signal.c:2307
     [<     inline     >] ? kretprobe_table_lock kernel/kernel/kprobes.c:1113
     [<ffffffff8151d355>] ? kprobe_flush_task+0xb5/0x450 kernel/kernel/kprobes.c:1158
     [<ffffffff8115f7d3>] do_signal+0x83/0x1c90 kernel/arch/x86/kernel/signal.c:712
     [<ffffffff8151d2a0>] ? recycle_rp_inst+0x310/0x310 kernel/include/linux/list.h:655
     [<ffffffff8115f750>] ? setup_sigcontext+0x780/0x780 kernel/arch/x86/kernel/signal.c:165
     [<ffffffff81380864>] ? finish_task_switch+0x424/0x5f0 kernel/kernel/sched/core.c:2692
     [<     inline     >] ? finish_lock_switch kernel/kernel/sched/sched.h:1099
     [<ffffffff81380560>] ? finish_task_switch+0x120/0x5f0 kernel/kernel/sched/core.c:2678
     [<     inline     >] ? context_switch kernel/kernel/sched/core.c:2807
     [<ffffffff85d794e9>] ? __schedule+0x919/0x1bd0 kernel/kernel/sched/core.c:3283
     [<ffffffff81003901>] exit_to_usermode_loop+0xf1/0x1a0 kernel/arch/x86/entry/common.c:247
     [<     inline     >] prepare_exit_to_usermode kernel/arch/x86/entry/common.c:282
     [<ffffffff810062ef>] syscall_return_slowpath+0x19f/0x210 kernel/arch/x86/entry/common.c:344
     [<ffffffff85d88022>] int_ret_from_sys_call+0x25/0x9f kernel/arch/x86/entry/entry_64.S:281
    Memory state around the buggy address:
     ffff880064e21680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880064e21700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff880064e21780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                           ^
     ffff880064e21800: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880064e21880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Fixes: 273ec51dd7ce ("net: ppp_generic - introduce net-namespace functionality v2")
    Reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
    Reviewed-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2dc10cd8bc2662d0311224d92fb82f34be0424bc
Author: Mika Kuoppala <mika.kuoppala@linux.intel.com>
Date:   Wed Mar 23 10:31:46 2016 +0200

    drm/i915: Fix use after free when printing load failure
    
    Commit d15d7538c6d2 ("drm/i915: Tune down init error message due
    to failure injection") added i915_load_error message to failure
    path on device initialization. The message is printed
    after the device is freed. And as the message printing helper
    uses the device structure, this leads to use after free.
    
    Spotted by Kasan.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/1458721906-10625-1-git-send-email-mika.kuoppala@intel.com

commit 2f5177f0fd7e531b26d54633be62d1d4cb94621c
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Mar 16 16:22:45 2016 +0100

    sched/cgroup: Fix/cleanup cgroup teardown/init
    
    The CPU controller hasn't kept up with the various changes in the whole
    cgroup initialization / destruction sequence, and commit:
    
      2e91fa7f6d45 ("cgroup: keep zombies associated with their original cgroups")
    
    caused it to explode.
    
    The reason for this is that zombies do not inhibit css_offline() from
    being called, but do stall css_released(). Now we tear down the cfs_rq
    structures on css_offline() but zombies can run after that, leading to
    use-after-free issues.
    
    The solution is to move the tear-down to css_released(), which
    guarantees nobody (including no zombies) is still using our cgroup.
    
    Furthermore, a few simple cleanups are possible too. There doesn't
    appear to be any point to us using css_online() (anymore?) so fold that
    in css_alloc().
    
    And since cgroup code guarantees an RCU grace period between
    css_released() and css_free() we can forgo using call_rcu() and free the
    stuff immediately.
    
    Suggested-by: Tejun Heo <tj@kernel.org>
    Reported-by: Kazuki Yamaguchi <k@rhe.jp>
    Reported-by: Niklas Cassel <niklas.cassel@axis.com>
    Tested-by: Niklas Cassel <niklas.cassel@axis.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Fixes: 2e91fa7f6d45 ("cgroup: keep zombies associated with their original cgroups")
    Link: http://lkml.kernel.org/r/20160316152245.GY6344@twins.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 614a4e3773148a31f58dc174bbf578ceb63510c2
Author: Tejun Heo <tj@kernel.org>
Date:   Fri Mar 18 13:50:03 2016 -0400

    writeback, cgroup: fix premature wb_put() in locked_inode_to_wb_and_lock_list()
    
    locked_inode_to_wb_and_lock_list() wb_get()'s the wb associated with
    the target inode, unlocks inode, locks the wb's list_lock and verifies
    that the inode is still associated with the wb.  To prevent the wb
    going away between dropping inode lock and acquiring list_lock, the wb
    is pinned while inode lock is held.  The wb reference is put right
    after acquiring list_lock citing that the wb won't be dereferenced
    anymore.
    
    This isn't true.  If the inode is still associated with the wb, the
    inode has reference and it's safe to return the wb; however, if inode
    has been switched, the wb still needs to be unlocked which is a
    dereference and can lead to use-after-free if it it races with wb
    destruction.
    
    Fix it by putting the reference after releasing list_lock.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Fixes: 87e1d789bf55 ("writeback: implement [locked_]inode_to_wb_and_lock_list()")
    Cc: stable@vger.kernel.org # v4.2+
    Tested-by: Tahsin Erdogan <tahsin@google.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commits)
      tools/power turbostat: bugfix: TDP MSRs print bits fixing
      tools/power turbostat: correct output for MSR_NHM_SNB_PKG_CST_CFG_CTL dump
      tools/power turbostat: call __cpuid() instead of __get_cpuid()
      tools/power turbostat: indicate SMX and SGX support
      tools/power turbostat: detect and work around syscall jitter
      tools/power turbostat: show GFX%rc6
      tools/power turbostat: show GFXMHz
      tools/power turbostat: show IRQs per CPU
      tools/power turbostat: make fewer systems calls
      tools/power turbostat: fix compiler warnings
      tools/power turbostat: add --out option for saving output in a file
      tools/power turbostat: re-name "%Busy" field to "Busy%"
      tools/power turbostat: Intel Xeon x200: fix turbo-ratio decoding
      tools/power turbostat: Intel Xeon x200: fix erroneous bclk value
      tools/power turbostat: allow sub-sec intervals
      ACPI / APEI: ERST: Fixed leaked resources in erst_init
      ACPI / APEI: Fix leaked resources
      intel_pstate: Do not skip samples partially
      intel_pstate: Remove freq calculation from intel_pstate_calc_busy()
      intel_pstate: Move intel_pstate_calc_busy() into get_target_pstate_use_performance()
      ...

commit d1ed3ba4e3d76b4ebec239c64f990c26d7935700
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Tue Mar 8 18:46:13 2016 -0800

    watchdog: Ensure that wdd is not dereferenced if NULL
    
    Smatch rightfully complains that wdd is dereferenced in the watchdog
    release function after being checked for NULL. Also make sure that it
    is not accessed outside mutex protection to avoid use-after-free problems.
    
    Fixes: e6c71e84e4c0 ("watchdog: Introduce WDOG_HW_RUNNING flag")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@iguana.be>

commit 8626c56c8279b88b91b8df55345cdf89542d5e90
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Mar 12 11:14:42 2016 +0100

    bridge: fix potential use-after-free when hook returns QUEUE or STOLEN verdict
    
    Zefir Kurtisi reported kernel panic with an openwrt specific patch.
    However, it turns out that mainline has a similar bug waiting to happen.
    
    Once NF_HOOK() returns the skb is in undefined state and must not be
    used.   Moreover, the okfn must consume the skb to support async
    processing (NF_QUEUE).
    
    Current okfn in this spot doesn't consume it and caller assumes that
    NF_HOOK return value tells us if skb was freed or not, but thats wrong.
    
    It "works" because no in-tree user registers a NFPROTO_BRIDGE hook at
    LOCAL_IN that returns STOLEN or NF_QUEUE verdicts.
    
    Once we add NF_QUEUE support for nftables bridge this will break --
    NF_QUEUE holds the skb for async processing, caller will erronoulsy
    return RX_HANDLER_PASS and on reinject netfilter will access free'd skb.
    
    Fix this by pushing skb up the stack in the okfn instead.
    
    NB: It also seems dubious to use LOCAL_IN while bypassing PRE_ROUTING
    completely in this case but this is how its been forever so it seems
    preferable to not change this.
    
    Cc: Felix Fietkau <nbd@openwrt.org>
    Cc: Zefir Kurtisi <zefir.kurtisi@neratec.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Tested-by: Zefir Kurtisi <zefir.kurtisi@neratec.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34b88a68f26a75e4fded796f1a49c40f82234b7d
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Mar 14 09:56:35 2016 -0300

    net: Fix use after free in the recvmmsg exit path
    
    The syzkaller fuzzer hit the following use-after-free:
    
      Call Trace:
       [<ffffffff8175ea0e>] __asan_report_load8_noabort+0x3e/0x40 mm/kasan/report.c:295
       [<ffffffff851cc31a>] __sys_recvmmsg+0x6fa/0x7f0 net/socket.c:2261
       [<     inline     >] SYSC_recvmmsg net/socket.c:2281
       [<ffffffff851cc57f>] SyS_recvmmsg+0x16f/0x180 net/socket.c:2270
       [<ffffffff86332bb6>] entry_SYSCALL_64_fastpath+0x16/0x7a
      arch/x86/entry/entry_64.S:185
    
    And, as Dmitry rightly assessed, that is because we can drop the
    reference and then touch it when the underlying recvmsg calls return
    some packets and then hit an error, which will make recvmmsg to set
    sock->sk->sk_err, oops, fix it.
    
    Reported-and-Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Kostya Serebryany <kcc@google.com>
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Fixes: a2e2725541fa ("net: Introduce recvmmsg socket syscall")
    http://lkml.kernel.org/r/20160122211644.GC2470@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7cabc61e01a0a8b663bd2b4c982aa53048218734
Author: Robert Doebbelin <robert@quobyte.com>
Date:   Mon Mar 7 09:50:56 2016 +0100

    fuse: do not use iocb after it may have been freed
    
    There's a race in fuse_direct_IO(), whereby is_sync_kiocb() is called on an
    iocb that could have been freed if async io has already completed.  The fix
    in this case is simple and obvious: cache the result before starting io.
    
    It was discovered by KASan:
    
    kernel: ==================================================================
    kernel: BUG: KASan: use after free in fuse_direct_IO+0xb1a/0xcc0 at addr ffff88036c414390
    
    Signed-off-by: Robert Doebbelin <robert@quobyte.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Fixes: bcba24ccdc82 ("fuse: enable asynchronous processing direct IO")
    Cc: <stable@vger.kernel.org> # 3.10+

commit 9590232bb4f4cc824f3425a6e1349afbe6d6d2b7
Author: EunTaik Lee <eun.taik.lee@samsung.com>
Date:   Wed Feb 24 04:38:06 2016 +0000

    staging/android/ion : fix a race condition in the ion driver
    
    There is a use-after-free problem in the ion driver.
    This is caused by a race condition in the ion_ioctl()
    function.
    
    A handle has ref count of 1 and two tasks on different
    cpus calls ION_IOC_FREE simultaneously.
    
    cpu 0                                   cpu 1
    -------------------------------------------------------
    ion_handle_get_by_id()
    (ref == 2)
                                ion_handle_get_by_id()
                                (ref == 3)
    
    ion_free()
    (ref == 2)
    
    ion_handle_put()
    (ref == 1)
    
                                ion_free()
                                (ref == 0 so ion_handle_destroy() is
                                called
                                and the handle is freed.)
    
                                ion_handle_put() is called and it
                                decreases the slub's next free pointer
    
    The problem is detected as an unaligned access in the
    spin lock functions since it uses load exclusive
     instruction. In some cases it corrupts the slub's
    free pointer which causes a mis-aligned access to the
    next free pointer.(kmalloc returns a pointer like
    ffffc0745b4580aa). And it causes lots of other
    hard-to-debug problems.
    
    This symptom is caused since the first member in the
    ion_handle structure is the reference count and the
    ion driver decrements the reference after it has been
    freed.
    
    To fix this problem client->lock mutex is extended
    to protect all the codes that uses the handle.
    
    Signed-off-by: Eun Taik Lee <eun.taik.lee@samsung.com>
    Reviewed-by: Laura Abbott <labbott@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7640131032db9118a78af715ac77ba2debeeb17c
Author: Matthew Dawson <matthew@mjdsystems.ca>
Date:   Fri Mar 11 13:08:07 2016 -0800

    mm/mempool: avoid KASAN marking mempool poison checks as use-after-free
    
    When removing an element from the mempool, mark it as unpoisoned in KASAN
    before verifying its contents for SLUB/SLAB debugging.  Otherwise KASAN
    will flag the reads checking the element use-after-free writes as
    use-after-free reads.
    
    Signed-off-by: Matthew Dawson <matthew@mjdsystems.ca>
    Acked-by: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0d67e0fa1664ad6aaba0552e170608bafb4b6196
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Mar 10 13:03:18 2016 +0200

    device property: fix for a case of use-after-free
    
    In device_remove_property_set(), the secondary fwnode needs
    to be cleared before the pset is freed. This fixes a
    use-after-free when a property set is providing the primary
    fwnode.
    
    As a result of the fix, the primary fwnode may end up
    containing ERR_PTR(-ENODEV), so also adding checks for it to
    the property handling code.
    
    Reported-by: John Youn <John.Youn@synopsys.com>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 7f54ab5ff52fb0b91569bc69c4a6bc5cac1b768d
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Sat Mar 5 20:00:12 2016 -0800

    target: Drop incorrect ABORT_TASK put for completed commands
    
    This patch fixes a recent ABORT_TASK regression associated
    with commit febe562c, where a left-over target_put_sess_cmd()
    would still be called when __target_check_io_state() detected
    a command has already been completed, and explicit ABORT must
    be avoided.
    
    Note commit febe562c dropped the local kref_get_unless_zero()
    check in core_tmr_abort_task(), but did not drop this extra
    corresponding target_put_sess_cmd() in the failure path.
    
    So go ahead and drop this now bogus target_put_sess_cmd(),
    and avoid this potential use-after-free.
    
    Reported-by: Dan Lane <dracodan@gmail.com>
    Cc: Quinn Tran <quinn.tran@qlogic.com>
    Cc: Himanshu Madhani <himanshu.madhani@qlogic.com>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Andy Grover <agrover@redhat.com>
    Cc: Mike Christie <mchristi@redhat.com>
    Cc: stable@vger.kernel.org # 3.14+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 16e80218816488f016418717d23c660abe073a67
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Jan 28 18:19:55 2016 -0800

    usb: dwc2: host: Avoid use of chan->qh after qh freed
    
    When poking around with USB devices with slub_debug enabled, I found
    another obvious use after free.  Turns out that in dwc2_hc_n_intr() I
    was in a state when the contents of chan->qh was filled with 0x6b,
    indicating that chan->qh was freed but chan still had a reference to
    it.
    
    Let's make sure that whenever we free qh we also make sure we remove a
    reference from its channel.
    
    The bug fixed here doesn't appear to be new--I believe I just got lucky
    and happened to see it while stress testing.
    
    Acked-by: John Youn <johnyoun@synopsys.com>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Kever Yang <kever.yang@rock-chips.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>

commit 7c0ae5be821c1b6a700c5506de9b62e95f60df3c
Author: Kees Cook <keescook@chromium.org>
Date:   Fri Feb 26 15:27:35 2016 -0800

    lkdtm: improve use-after-free tests
    
    This improves the order of operations on the use-after-free tests to
    try to make sure we've executed any available sanity-checking code,
    and to report the poisoning that was found.
    
    Signed-off-by: Kees Cook <keescook@chromium.org>

commit 9d22f6e14e249713108c8adcc8705c39303f0628
Author: Shuah Khan <shuahkh@osg.samsung.com>
Date:   Fri Feb 12 17:43:31 2016 -0700

    selftests: add a new test for Media Controller API
    
    This test opens user specified Media Device and calls
    MEDIA_IOC_DEVICE_INFO ioctl in a loop once every 10
    seconds. This test is for detecting errors in device
    removal path.
    
    Usage:
        sudo ./media_device_test -d /dev/mediaX
    
    While test is running, remove the device and
    ensure there are no use after free errors and
    other Oops in the dmesg. Enable KaSan kernel
    config option for use-after-free error detection.
    
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit c231c5a47a0c697e7bc821af0b5cb28d129fe8e0
Author: Alexander Aring <aar@pengutronix.de>
Date:   Fri Feb 19 09:59:12 2016 +0100

    at86rf230: fix race on error handling
    
    The resource "ctx" can be still used by at86rf230_async_state_change, we
    need to free it at the complete handler of the async state change to
    avoid a use after free.
    
    Signed-off-by: Alexander Aring <aar@pengutronix.de>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commits)
      blk: fix overflow in queue_discard_max_hw_show
      writeback: initialize inode members that track writeback history
      writeback: keep superblock pinned during cgroup writeback association switches
      bio: return EINTR if copying to user space got interrupted
      NVMe: Rate limit nvme IO warnings
      NVMe: Poll device while still active during remove
      NVMe: Requeue requests on suspended queues
      NVMe: Allow request merges
      NVMe: Fix io incapable return values
      blk-mq: End unstarted requests on dying queue
      block: Initialize max_dev_sectors to 0
      null_blk: oops when initializing without lightnvm
      block: fix module reference leak on put_disk() call for cgroups throttle
      nvme: fix Kconfig description for BLK_DEV_NVME_SCSI
      kernel/fs: fix I/O wait not accounted for RW O_DSYNC
      floppy: refactor open() flags handling
      lightnvm: allow to force mm initialization
      lightnvm: check overflow and correct mlc pairs
      lightnvm: fix request intersection locking in rrpc
      lightnvm: warn if irqs are disabled in lock laddr
      ...

commit a5527dda344fff0514b7989ef7a755729769daa1
Author: Rainer Weikusat <rweikusat@mobileactivedefense.com>
Date:   Thu Feb 11 19:37:27 2016 +0000

    af_unix: Guard against other == sk in unix_dgram_sendmsg
    
    The unix_dgram_sendmsg routine use the following test
    
    if (unlikely(unix_peer(other) != sk && unix_recvq_full(other))) {
    
    to determine if sk and other are in an n:1 association (either
    established via connect or by using sendto to send messages to an
    unrelated socket identified by address). This isn't correct as the
    specified address could have been bound to the sending socket itself or
    because this socket could have been connected to itself by the time of
    the unix_peer_get but disconnected before the unix_state_lock(other). In
    both cases, the if-block would be entered despite other == sk which
    might either block the sender unintentionally or lead to trying to unlock
    the same spin lock twice for a non-blocking send. Add a other != sk
    check to guard against this.
    
    Fixes: 7d267278a9ec ("unix: avoid use-after-free in ep_remove_wait_queue")
    Reported-By: Philipp Hahn <pmhahn@pmhahn.de>
    Signed-off-by: Rainer Weikusat <rweikusat@mobileactivedefense.com>
    Tested-by: Philipp Hahn <pmhahn@pmhahn.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6ddf2f0cb1e1931d16e08e30130ed04e5a441f2c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Feb 12 09:40:26 2016 +0300

    misc: mic: use after free printing error message
    
    Swap the printk and kfree() to avoid a use after free bug.
    
    Fixes: 61e9c905df78 ('misc: mic: Enable VOP host side functionality')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 949928c1c731417cc0f070912c63878b62b544f4
Author: Keith Busch <keith.busch@intel.com>
Date:   Thu Dec 17 17:08:15 2015 -0700

    NVMe: Fix possible queue use after freed
    
    This notifies blk-mq when the tag set contains a different number of
    queues prior to freeing unused ones that the request queue points to.
    
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 1f55c718c290616889c04946864a13ef30f64929
Author: Herton R. Krzesinski <herton@redhat.com>
Date:   Thu Jan 14 17:56:58 2016 -0200

    pty: make sure super_block is still valid in final /dev/tty close
    
    Considering current pty code and multiple devpts instances, it's possible
    to umount a devpts file system while a program still has /dev/tty opened
    pointing to a previosuly closed pty pair in that instance. In the case all
    ptmx and pts/N files are closed, umount can be done. If the program closes
    /dev/tty after umount is done, devpts_kill_index will use now an invalid
    super_block, which was already destroyed in the umount operation after
    running ->kill_sb. This is another "use after free" type of issue, but now
    related to the allocated super_block instance.
    
    To avoid the problem (warning at ida_remove and potential crashes) for
    this specific case, I added two functions in devpts which grabs additional
    references to the super_block, which pty code now uses so it makes sure
    the super block structure is still valid until pty shutdown is done.
    I also moved the additional inode references to the same functions, which
    also covered similar case with inode being freed before /dev/tty final
    close/shutdown.
    
    Signed-off-by: Herton R. Krzesinski <herton@redhat.com>
    Cc: stable@vger.kernel.org # 2.6.29+
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2831c89f42dcde440cfdccb9fee9f42d54bbc1ef
Author: Herton R. Krzesinski <herton@redhat.com>
Date:   Mon Jan 11 12:07:43 2016 -0200

    pty: fix possible use after free of tty->driver_data
    
    This change fixes a bug for a corner case where we have the the last
    release from a pty master/slave coming from a previously opened /dev/tty
    file. When this happens, the tty->driver_data can be stale, due to all
    ptmx or pts/N files having already been closed before (and thus the inode
    related to these files, which tty->driver_data points to, being already
    freed/destroyed).
    
    The fix here is to keep a reference on the opened master ptmx inode.
    We maintain the inode referenced until the final pty_unix98_shutdown,
    and only pass this inode to devpts_kill_index.
    
    Signed-off-by: Herton R. Krzesinski <herton@redhat.com>
    Cc: <stable@vger.kernel.org> # 2.6.29+
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 401879c57f01cbf2da204ad2e8db910525c6dbea
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Sat Jan 9 17:48:45 2016 -0800

    net: irda: Fix use-after-free in irtty_open()
    
    The N_IRDA line discipline may access the previous line discipline's closed
    and already-fre private data on open [1].
    
    The tty->disc_data field _never_ refers to valid data on entry to the
    line discipline's open() method. Rather, the ldisc is expected to
    initialize that field for its own use for the lifetime of the instance
    (ie. from open() to close() only).
    
    [1]
        ==================================================================
        BUG: KASAN: use-after-free in irtty_open+0x422/0x550 at addr ffff8800331dd068
        Read of size 4 by task a.out/13960
        =============================================================================
        BUG kmalloc-512 (Tainted: G    B          ): kasan: bad access detected
        -----------------------------------------------------------------------------
        ...
        Call Trace:
         [<ffffffff815fa2ae>] __asan_report_load4_noabort+0x3e/0x40 mm/kasan/report.c:279
         [<ffffffff836938a2>] irtty_open+0x422/0x550 drivers/net/irda/irtty-sir.c:436
         [<ffffffff829f1b80>] tty_ldisc_open.isra.2+0x60/0xa0 drivers/tty/tty_ldisc.c:447
         [<ffffffff829f21c0>] tty_set_ldisc+0x1a0/0x940 drivers/tty/tty_ldisc.c:567
         [<     inline     >] tiocsetd drivers/tty/tty_io.c:2650
         [<ffffffff829da49e>] tty_ioctl+0xace/0x1fd0 drivers/tty/tty_io.c:2883
         [<     inline     >] vfs_ioctl fs/ioctl.c:43
         [<ffffffff816708ac>] do_vfs_ioctl+0x57c/0xe60 fs/ioctl.c:607
         [<     inline     >] SYSC_ioctl fs/ioctl.c:622
         [<ffffffff81671204>] SyS_ioctl+0x74/0x80 fs/ioctl.c:613
         [<ffffffff852a7876>] entry_SYSCALL_64_fastpath+0x16/0x7a
    
    Reported-and-tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63e41ebc6630f39422d87f8a4bade1e793f37a01
Author: Mathias Krause <minipli@googlemail.com>
Date:   Mon Feb 1 14:27:30 2016 +0100

    crypto: user - lock crypto_alg_list on alg dump
    
    We miss to take the crypto_alg_sem semaphore when traversing the
    crypto_alg_list for CRYPTO_MSG_GETALG dumps. This allows a race with
    crypto_unregister_alg() removing algorithms from the list while we're
    still traversing it, thereby leading to a use-after-free as show below:
    
    [ 3482.071639] general protection fault: 0000 [#1] SMP
    [ 3482.075639] Modules linked in: aes_x86_64 glue_helper lrw ablk_helper cryptd gf128mul ipv6 pcspkr serio_raw virtio_net microcode virtio_pci virtio_ring virtio sr_mod cdrom [last unloaded: aesni_intel]
    [ 3482.075639] CPU: 1 PID: 11065 Comm: crconf Not tainted 4.3.4-grsec+ #126
    [ 3482.075639] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.7.5-20140531_083030-gandalf 04/01/2014
    [ 3482.075639] task: ffff88001cd41a40 ti: ffff88001cd422c8 task.ti: ffff88001cd422c8
    [ 3482.075639] RIP: 0010:[<ffffffff93722bd3>]  [<ffffffff93722bd3>] strncpy+0x13/0x30
    [ 3482.075639] RSP: 0018:ffff88001f713b60  EFLAGS: 00010202
    [ 3482.075639] RAX: ffff88001f6c4430 RBX: ffff88001f6c43a0 RCX: ffff88001f6c4430
    [ 3482.075639] RDX: 0000000000000040 RSI: fefefefefefeff16 RDI: ffff88001f6c4430
    [ 3482.075639] RBP: ffff88001f713b60 R08: ffff88001f6c4470 R09: ffff88001f6c4480
    [ 3482.075639] R10: 0000000000000002 R11: 0000000000000246 R12: ffff88001ce2aa28
    [ 3482.075639] R13: ffff880000093700 R14: ffff88001f5e4bf8 R15: 0000000000003b20
    [ 3482.075639] FS:  0000033826fa2700(0000) GS:ffff88001e900000(0000) knlGS:0000000000000000
    [ 3482.075639] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 3482.075639] CR2: ffffffffff600400 CR3: 00000000139ec000 CR4: 00000000001606f0
    [ 3482.075639] Stack:
    [ 3482.075639]  ffff88001f713bd8 ffffffff936ccd00 ffff88001e5c4200 ffff880000093700
    [ 3482.075639]  ffff88001f713bd0 ffffffff938ef4bf 0000000000000000 0000000000003b20
    [ 3482.075639]  ffff88001f5e4bf8 ffff88001f5e4848 0000000000000000 0000000000003b20
    [ 3482.075639] Call Trace:
    [ 3482.075639]  [<ffffffff936ccd00>] crypto_report_alg+0xc0/0x3e0
    [ 3482.075639]  [<ffffffff938ef4bf>] ? __alloc_skb+0x16f/0x300
    [ 3482.075639]  [<ffffffff936cd08a>] crypto_dump_report+0x6a/0x90
    [ 3482.075639]  [<ffffffff93935707>] netlink_dump+0x147/0x2e0
    [ 3482.075639]  [<ffffffff93935f99>] __netlink_dump_start+0x159/0x190
    [ 3482.075639]  [<ffffffff936ccb13>] crypto_user_rcv_msg+0xc3/0x130
    [ 3482.075639]  [<ffffffff936cd020>] ? crypto_report_alg+0x3e0/0x3e0
    [ 3482.075639]  [<ffffffff936cc4b0>] ? alg_test_crc32c+0x120/0x120
    [ 3482.075639]  [<ffffffff93933145>] ? __netlink_lookup+0xd5/0x120
    [ 3482.075639]  [<ffffffff936cca50>] ? crypto_add_alg+0x1d0/0x1d0
    [ 3482.075639]  [<ffffffff93938141>] netlink_rcv_skb+0xe1/0x130
    [ 3482.075639]  [<ffffffff936cc4f8>] crypto_netlink_rcv+0x28/0x40
    [ 3482.075639]  [<ffffffff939375a8>] netlink_unicast+0x108/0x180
    [ 3482.075639]  [<ffffffff93937c21>] netlink_sendmsg+0x541/0x770
    [ 3482.075639]  [<ffffffff938e31e1>] sock_sendmsg+0x21/0x40
    [ 3482.075639]  [<ffffffff938e4763>] SyS_sendto+0xf3/0x130
    [ 3482.075639]  [<ffffffff93444203>] ? bad_area_nosemaphore+0x13/0x20
    [ 3482.075639]  [<ffffffff93444470>] ? __do_page_fault+0x80/0x3a0
    [ 3482.075639]  [<ffffffff939d80cb>] entry_SYSCALL_64_fastpath+0x12/0x6e
    [ 3482.075639] Code: 88 4a ff 75 ed 5d 48 0f ba 2c 24 3f c3 66 66 2e 0f 1f 84 00 00 00 00 00 55 48 85 d2 48 89 f8 48 89 f9 4c 8d 04 17 48 89 e5 74 15 <0f> b6 16 80 fa 01 88 11 48 83 de ff 48 83 c1 01 4c 39 c1 75 eb
    [ 3482.075639] RIP  [<ffffffff93722bd3>] strncpy+0x13/0x30
    
    To trigger the race run the following loops simultaneously for a while:
      $ while : ; do modprobe aesni-intel; rmmod aesni-intel; done
      $ while : ; do crconf show all > /dev/null; done
    
    Fix the race by taking the crypto_alg_sem read lock, thereby preventing
    crypto_unregister_alg() from modifying the algorithm list during the
    dump.
    
    This bug has been detected by the PaX memory sanitize feature.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: PaX Team <pageexec@freemail.hu>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 094fd3be87b0f102589e2d5c3fa5d06b7e20496d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 4 17:06:13 2016 +0100

    ALSA: timer: Fix leftover link at closing
    
    In ALSA timer core, the active timer instance is managed in
    active_list linked list.  Each element is added / removed dynamically
    at timer start, stop and in timer interrupt.  The problem is that
    snd_timer_interrupt() has a thinko and leaves the element in
    active_list when it's the last opened element.  This eventually leads
    to list corruption or use-after-free error.
    
    This hasn't been revealed because we used to delete the list forcibly
    in snd_timer_stop() in the past.  However, the recent fix avoids the
    double-stop behavior (in commit [f784beb75ce8: ALSA: timer: Fix link
    corruption due to double start or stop]), and this leak hits reality.
    
    This patch fixes the link management in snd_timer_interrupt().  Now it
    simply unlinks no matter which stream is.
    
    BugLink: http://lkml.kernel.org/r/CACT4Y+Yy2aukHP-EDp8-ziNqNNmb-NTf=jDWXMP7jB8HDa2vng@mail.gmail.com
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 210bd104c6acd31c3c6b8b075b3f12d4a9f6b60d
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 3 13:34:00 2016 -0200

    [media] xc2028: unlock on error in xc2028_set_config()
    
    We have to unlock before returning -ENOMEM.
    
    Fixes: 8dfbcc4351a0 ('[media] xc2028: avoid use after free')
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>

commits)
      tcp: avoid cwnd undo after receiving ECN
      irda: fix a potential use-after-free in ircomm_param_request
      net: tg3: avoid uninitialized variable warning
      net: nb8800: avoid uninitialized variable warning
      net: vxge: avoid unused function warnings
      net: bgmac: clarify CONFIG_BCMA dependency
      net: hp100: remove unnecessary #ifdefs
      net: davinci_cpdma: use dma_addr_t for DMA address
      ipv6/udp: use sticky pktinfo egress ifindex on connect()
      ipv6: enforce flowi6_oif usage in ip6_dst_lookup_tail()
      netlink: not trim skb for mmaped socket when dump
      vxlan: fix a out of bounds access in __vxlan_find_mac
      net: dsa: mv88e6xxx: fix port VLAN maps
      fib_trie: Fix shift by 32 in fib_table_lookup
      net: moxart: use correct accessors for DMA memory
      ipv4: ipconfig: avoid unused ic_proto_used symbol
      bnxt_en: Fix crash in bnxt_free_tx_skbs() during tx timeout.
      bnxt_en: Exclude rx_drop_pkts hw counter from the stack's rx_dropped counter.
      bnxt_en: Ring free response from close path should use completion ring
      net_sched: drr: check for NULL pointer in drr_dequeue
      ...

commit f784beb75ce82f4136f8a0960d3ee872f7109e09
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Jan 30 23:09:08 2016 +0100

    ALSA: timer: Fix link corruption due to double start or stop
    
    Although ALSA timer code got hardening for races, it still causes
    use-after-free error.  This is however rather a corrupted linked list,
    not actually the concurrent accesses.  Namely, when timer start is
    triggered twice, list_add_tail() is called twice, too.  This ends
    up with the link corruption and triggers KASAN error.
    
    The simplest fix would be replacing list_add_tail() with
    list_move_tail(), but fundamentally it's the problem that we don't
    check the double start/stop correctly.  So, the right fix here is to
    add the proper checks to snd_timer_start() and snd_timer_stop() (and
    their variants).
    
    BugLink: http://lkml.kernel.org/r/CACT4Y+ZyPRoMQjmawbvmCEDrkBD2BQuH7R09=eOkf5ESK8kJAw@mail.gmail.com
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 2cdc7b636d55cbcf42e1e6c8accd85e62d3e9ae8
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat Jan 30 23:30:25 2016 +0100

    ALSA: seq: Fix yet another races among ALSA timer accesses
    
    ALSA sequencer may open/close and control ALSA timer instance
    dynamically either via sequencer events or direct ioctls.  These are
    done mostly asynchronously, and it may call still some timer action
    like snd_timer_start() while another is calling snd_timer_close().
    Since the instance gets removed by snd_timer_close(), it may lead to
    a use-after-free.
    
    This patch tries to address such a race by protecting each
    snd_timer_*() call via the existing spinlock and also by avoiding the
    access to timer during close call.
    
    BugLink: http://lkml.kernel.org/r/CACT4Y+Z6RzW5MBr-HUdV-8zwg71WQfKTdPpYGvOeS7v4cyurNQ@mail.gmail.com
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 2d1b5c08366acd46c35a2e9aba5d650cb5bf5c19
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Feb 1 12:06:42 2016 +0100

    ALSA: seq: Fix race at closing in virmidi driver
    
    The virmidi driver has an open race at closing its assigned rawmidi
    device, and this may lead to use-after-free in
    snd_seq_deliver_single_event().
    
    Plug the hole by properly protecting the linked list deletion and
    calling in the right order in snd_virmidi_input_close().
    
    BugLink: http://lkml.kernel.org/r/CACT4Y+Zd66+w12fNN85-425cVQT=K23kWbhnCEcMB8s3us-Frw@mail.gmail.com
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 8dfbcc4351a0b6d2f2d77f367552f48ffefafe18
Author: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
Date:   Thu Jan 28 09:22:44 2016 -0200

    [media] xc2028: avoid use after free
    
    If struct xc2028_config is passed without a firmware name,
    the following trouble may happen:
    
    [11009.907205] xc2028 5-0061: type set to XCeive xc2028/xc3028 tuner
    [11009.907491] ==================================================================
    [11009.907750] BUG: KASAN: use-after-free in strcmp+0x96/0xb0 at addr ffff8803bd78ab40
    [11009.907992] Read of size 1 by task modprobe/28992
    [11009.907994] =============================================================================
    [11009.907997] BUG kmalloc-16 (Tainted: G        W      ): kasan: bad access detected
    [11009.907999] -----------------------------------------------------------------------------
    
    [11009.908008] INFO: Allocated in xhci_urb_enqueue+0x214/0x14c0 [xhci_hcd] age=0 cpu=3 pid=28992
    [11009.908012]  ___slab_alloc+0x581/0x5b0
    [11009.908014]  __slab_alloc+0x51/0x90
    [11009.908017]  __kmalloc+0x27b/0x350
    [11009.908022]  xhci_urb_enqueue+0x214/0x14c0 [xhci_hcd]
    [11009.908026]  usb_hcd_submit_urb+0x1e8/0x1c60
    [11009.908029]  usb_submit_urb+0xb0e/0x1200
    [11009.908032]  usb_serial_generic_write_start+0xb6/0x4c0
    [11009.908035]  usb_serial_generic_write+0x92/0xc0
    [11009.908039]  usb_console_write+0x38a/0x560
    [11009.908045]  call_console_drivers.constprop.14+0x1ee/0x2c0
    [11009.908051]  console_unlock+0x40d/0x900
    [11009.908056]  vprintk_emit+0x4b4/0x830
    [11009.908061]  vprintk_default+0x1f/0x30
    [11009.908064]  printk+0x99/0xb5
    [11009.908067]  kasan_report_error+0x10a/0x550
    [11009.908070]  __asan_report_load1_noabort+0x43/0x50
    [11009.908074] INFO: Freed in xc2028_set_config+0x90/0x630 [tuner_xc2028] age=1 cpu=3 pid=28992
    [11009.908077]  __slab_free+0x2ec/0x460
    [11009.908080]  kfree+0x266/0x280
    [11009.908083]  xc2028_set_config+0x90/0x630 [tuner_xc2028]
    [11009.908086]  xc2028_attach+0x310/0x8a0 [tuner_xc2028]
    [11009.908090]  em28xx_attach_xc3028.constprop.7+0x1f9/0x30d [em28xx_dvb]
    [11009.908094]  em28xx_dvb_init.part.3+0x8e4/0x5cf4 [em28xx_dvb]
    [11009.908098]  em28xx_dvb_init+0x81/0x8a [em28xx_dvb]
    [11009.908101]  em28xx_register_extension+0xd9/0x190 [em28xx]
    [11009.908105]  em28xx_dvb_register+0x10/0x1000 [em28xx_dvb]
    [11009.908108]  do_one_initcall+0x141/0x300
    [11009.908111]  do_init_module+0x1d0/0x5ad
    [11009.908114]  load_module+0x6666/0x9ba0
    [11009.908117]  SyS_finit_module+0x108/0x130
    [11009.908120]  entry_SYSCALL_64_fastpath+0x16/0x76
    [11009.908123] INFO: Slab 0xffffea000ef5e280 objects=25 used=25 fp=0x          (null) flags=0x2ffff8000004080
    [11009.908126] INFO: Object 0xffff8803bd78ab40 @offset=2880 fp=0x0000000000000001
    
    [11009.908130] Bytes b4 ffff8803bd78ab30: 01 00 00 00 2a 07 00 00 9d 28 00 00 01 00 00 00  ....*....(......
    [11009.908133] Object ffff8803bd78ab40: 01 00 00 00 00 00 00 00 b0 1d c3 6a 00 88 ff ff  ...........j....
    [11009.908137] CPU: 3 PID: 28992 Comm: modprobe Tainted: G    B   W       4.5.0-rc1+ #43
    [11009.908140] Hardware name:                  /NUC5i7RYB, BIOS RYBDWi35.86A.0350.2015.0812.1722 08/12/2015
    [11009.908142]  ffff8803bd78a000 ffff8802c273f1b8 ffffffff81932007 ffff8803c6407a80
    [11009.908148]  ffff8802c273f1e8 ffffffff81556759 ffff8803c6407a80 ffffea000ef5e280
    [11009.908153]  ffff8803bd78ab40 dffffc0000000000 ffff8802c273f210 ffffffff8155ccb4
    [11009.908158] Call Trace:
    [11009.908162]  [<ffffffff81932007>] dump_stack+0x4b/0x64
    [11009.908165]  [<ffffffff81556759>] print_trailer+0xf9/0x150
    [11009.908168]  [<ffffffff8155ccb4>] object_err+0x34/0x40
    [11009.908171]  [<ffffffff8155f260>] kasan_report_error+0x230/0x550
    [11009.908175]  [<ffffffff81237d71>] ? trace_hardirqs_off_caller+0x21/0x290
    [11009.908179]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50
    [11009.908182]  [<ffffffff8155f5c3>] __asan_report_load1_noabort+0x43/0x50
    [11009.908185]  [<ffffffff8155ea00>] ? __asan_register_globals+0x50/0xa0
    [11009.908189]  [<ffffffff8194cea6>] ? strcmp+0x96/0xb0
    [11009.908192]  [<ffffffff8194cea6>] strcmp+0x96/0xb0
    [11009.908196]  [<ffffffffa13ba4ac>] xc2028_set_config+0x15c/0x630 [tuner_xc2028]
    [11009.908200]  [<ffffffffa13bac90>] xc2028_attach+0x310/0x8a0 [tuner_xc2028]
    [11009.908203]  [<ffffffff8155ea78>] ? memset+0x28/0x30
    [11009.908206]  [<ffffffffa13ba980>] ? xc2028_set_config+0x630/0x630 [tuner_xc2028]
    [11009.908211]  [<ffffffffa157a59a>] em28xx_attach_xc3028.constprop.7+0x1f9/0x30d [em28xx_dvb]
    [11009.908215]  [<ffffffffa157aa2a>] ? em28xx_dvb_init.part.3+0x37c/0x5cf4 [em28xx_dvb]
    [11009.908219]  [<ffffffffa157a3a1>] ? hauppauge_hvr930c_init+0x487/0x487 [em28xx_dvb]
    [11009.908222]  [<ffffffffa01795ac>] ? lgdt330x_attach+0x1cc/0x370 [lgdt330x]
    [11009.908226]  [<ffffffffa01793e0>] ? i2c_read_demod_bytes.isra.2+0x210/0x210 [lgdt330x]
    [11009.908230]  [<ffffffff812e87d0>] ? ref_module.part.15+0x10/0x10
    [11009.908233]  [<ffffffff812e56e0>] ? module_assert_mutex_or_preempt+0x80/0x80
    [11009.908238]  [<ffffffffa157af92>] em28xx_dvb_init.part.3+0x8e4/0x5cf4 [em28xx_dvb]
    [11009.908242]  [<ffffffffa157a6ae>] ? em28xx_attach_xc3028.constprop.7+0x30d/0x30d [em28xx_dvb]
    [11009.908245]  [<ffffffff8195222d>] ? string+0x14d/0x1f0
    [11009.908249]  [<ffffffff8195381f>] ? symbol_string+0xff/0x1a0
    [11009.908253]  [<ffffffff81953720>] ? uuid_string+0x6f0/0x6f0
    [11009.908257]  [<ffffffff811a775e>] ? __kernel_text_address+0x7e/0xa0
    [11009.908260]  [<ffffffff8104b02f>] ? print_context_stack+0x7f/0xf0
    [11009.908264]  [<ffffffff812e9846>] ? __module_address+0xb6/0x360
    [11009.908268]  [<ffffffff8137fdc9>] ? is_ftrace_trampoline+0x99/0xe0
    [11009.908271]  [<ffffffff811a775e>] ? __kernel_text_address+0x7e/0xa0
    [11009.908275]  [<ffffffff81240a70>] ? debug_check_no_locks_freed+0x290/0x290
    [11009.908278]  [<ffffffff8104a24b>] ? dump_trace+0x11b/0x300
    [11009.908282]  [<ffffffffa13e8143>] ? em28xx_register_extension+0x23/0x190 [em28xx]
    [11009.908285]  [<ffffffff81237d71>] ? trace_hardirqs_off_caller+0x21/0x290
    [11009.908289]  [<ffffffff8123ff56>] ? trace_hardirqs_on_caller+0x16/0x590
    [11009.908292]  [<ffffffff812404dd>] ? trace_hardirqs_on+0xd/0x10
    [11009.908296]  [<ffffffffa13e8143>] ? em28xx_register_extension+0x23/0x190 [em28xx]
    [11009.908299]  [<ffffffff822dcbb0>] ? mutex_trylock+0x400/0x400
    [11009.908302]  [<ffffffff810021a1>] ? do_one_initcall+0x131/0x300
    [11009.908306]  [<ffffffff81296dc7>] ? call_rcu_sched+0x17/0x20
    [11009.908309]  [<ffffffff8159e708>] ? put_object+0x48/0x70
    [11009.908314]  [<ffffffffa1579f11>] em28xx_dvb_init+0x81/0x8a [em28xx_dvb]
    [11009.908317]  [<ffffffffa13e81f9>] em28xx_register_extension+0xd9/0x190 [em28xx]
    [11009.908320]  [<ffffffffa0150000>] ? 0xffffffffa0150000
    [11009.908324]  [<ffffffffa0150010>] em28xx_dvb_register+0x10/0x1000 [em28xx_dvb]
    [11009.908327]  [<ffffffff810021b1>] do_one_initcall+0x141/0x300
    [11009.908330]  [<ffffffff81002070>] ? try_to_run_init_process+0x40/0x40
    [11009.908333]  [<ffffffff8123ff56>] ? trace_hardirqs_on_caller+0x16/0x590
    [11009.908337]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50
    [11009.908340]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50
    [11009.908343]  [<ffffffff8155e926>] ? kasan_unpoison_shadow+0x36/0x50
    [11009.908346]  [<ffffffff8155ea37>] ? __asan_register_globals+0x87/0xa0
    [11009.908350]  [<ffffffff8144da7b>] do_init_module+0x1d0/0x5ad
    [11009.908353]  [<ffffffff812f2626>] load_module+0x6666/0x9ba0
    [11009.908356]  [<ffffffff812e9c90>] ? symbol_put_addr+0x50/0x50
    [11009.908361]  [<ffffffffa1580037>] ? em28xx_dvb_init.part.3+0x5989/0x5cf4 [em28xx_dvb]
    [11009.908366]  [<ffffffff812ebfc0>] ? module_frob_arch_sections+0x20/0x20
    [11009.908369]  [<ffffffff815bc940>] ? open_exec+0x50/0x50
    [11009.908374]  [<ffffffff811671bb>] ? ns_capable+0x5b/0xd0
    [11009.908377]  [<ffffffff812f5e58>] SyS_finit_module+0x108/0x130
    [11009.908379]  [<ffffffff812f5d50>] ? SyS_init_module+0x1f0/0x1f0
    [11009.908383]  [<ffffffff81004044>] ? lockdep_sys_exit_thunk+0x12/0x14
    [11009.908394]  [<ffffffff822e6936>] entry_SYSCALL_64_fastpath+0x16/0x76
    [11009.908396] Memory state around the buggy address:
    [11009.908398]  ffff8803bd78aa00: 00 00 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [11009.908401]  ffff8803bd78aa80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [11009.908403] >ffff8803bd78ab00: fc fc fc fc fc fc fc fc 00 00 fc fc fc fc fc fc
    [11009.908405]                                            ^
    [11009.908407]  ffff8803bd78ab80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [11009.908409]  ffff8803bd78ac00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [11009.908411] ==================================================================
    
    In order to avoid it, let's set the cached value of the firmware
    name to NULL after freeing it. While here, return an error if
    the memory allocation fails.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>

commit 7ddc971f86aa0a4cee9f6886c356a052461957ae
Author: Mike Krinkin <krinkin.m.u@gmail.com>
Date:   Sat Jan 30 19:09:59 2016 +0300

    block: fix use-after-free in dio_bio_complete
    
    kasan reported the following error when i ran xfstest:
    
    [  701.826854] ==================================================================
    [  701.826864] BUG: KASAN: use-after-free in dio_bio_complete+0x41a/0x600 at addr ffff880080b95f94
    [  701.826870] Read of size 4 by task loop2/3874
    [  701.826879] page:ffffea000202e540 count:0 mapcount:0 mapping:          (null) index:0x0
    [  701.826890] flags: 0x100000000000000()
    [  701.826895] page dumped because: kasan: bad access detected
    [  701.826904] CPU: 3 PID: 3874 Comm: loop2 Tainted: G    B   W    L  4.5.0-rc1-next-20160129 #83
    [  701.826910] Hardware name: LENOVO 23205NG/23205NG, BIOS G2ET95WW (2.55 ) 07/09/2013
    [  701.826917]  ffff88008fadf800 ffff88008fadf758 ffffffff81ca67bb 0000000041b58ab3
    [  701.826941]  ffffffff830d1e74 ffffffff81ca6724 ffff88008fadf748 ffffffff8161c05c
    [  701.826963]  0000000000000282 ffff88008fadf800 ffffed0010172bf2 ffffea000202e540
    [  701.826987] Call Trace:
    [  701.826997]  [<ffffffff81ca67bb>] dump_stack+0x97/0xdc
    [  701.827005]  [<ffffffff81ca6724>] ? _atomic_dec_and_lock+0xc4/0xc4
    [  701.827014]  [<ffffffff8161c05c>] ? __dump_page+0x32c/0x490
    [  701.827023]  [<ffffffff816b0d03>] kasan_report_error+0x5f3/0x8b0
    [  701.827033]  [<ffffffff817c302a>] ? dio_bio_complete+0x41a/0x600
    [  701.827040]  [<ffffffff816b1119>] __asan_report_load4_noabort+0x59/0x80
    [  701.827048]  [<ffffffff817c302a>] ? dio_bio_complete+0x41a/0x600
    [  701.827053]  [<ffffffff817c302a>] dio_bio_complete+0x41a/0x600
    [  701.827057]  [<ffffffff81bd19c8>] ? blk_queue_exit+0x108/0x270
    [  701.827060]  [<ffffffff817c32b0>] dio_bio_end_aio+0xa0/0x4d0
    [  701.827063]  [<ffffffff817c3210>] ? dio_bio_complete+0x600/0x600
    [  701.827067]  [<ffffffff81bd2806>] ? blk_account_io_completion+0x316/0x5d0
    [  701.827070]  [<ffffffff81bafe89>] bio_endio+0x79/0x200
    [  701.827074]  [<ffffffff81bd2c9f>] blk_update_request+0x1df/0xc50
    [  701.827078]  [<ffffffff81c02c27>] blk_mq_end_request+0x57/0x120
    [  701.827081]  [<ffffffff81c03670>] __blk_mq_complete_request+0x310/0x590
    [  701.827084]  [<ffffffff812348d8>] ? set_next_entity+0x2f8/0x2ed0
    [  701.827088]  [<ffffffff8124b34d>] ? put_prev_entity+0x22d/0x2a70
    [  701.827091]  [<ffffffff81c0394b>] blk_mq_complete_request+0x5b/0x80
    [  701.827094]  [<ffffffff821e2a33>] loop_queue_work+0x273/0x19d0
    [  701.827098]  [<ffffffff811f6578>] ? finish_task_switch+0x1c8/0x8e0
    [  701.827101]  [<ffffffff8129d058>] ? trace_hardirqs_on_caller+0x18/0x6c0
    [  701.827104]  [<ffffffff821e27c0>] ? lo_read_simple+0x890/0x890
    [  701.827108]  [<ffffffff8129dd60>] ? debug_check_no_locks_freed+0x350/0x350
    [  701.827111]  [<ffffffff811f63b0>] ? __hrtick_start+0x130/0x130
    [  701.827115]  [<ffffffff82a0c8f6>] ? __schedule+0x936/0x20b0
    [  701.827118]  [<ffffffff811dd6bd>] ? kthread_worker_fn+0x3ed/0x8d0
    [  701.827121]  [<ffffffff811dd4ed>] ? kthread_worker_fn+0x21d/0x8d0
    [  701.827125]  [<ffffffff8129d058>] ? trace_hardirqs_on_caller+0x18/0x6c0
    [  701.827128]  [<ffffffff811dd57f>] kthread_worker_fn+0x2af/0x8d0
    [  701.827132]  [<ffffffff811dd2d0>] ? __init_kthread_worker+0x170/0x170
    [  701.827135]  [<ffffffff82a1ea46>] ? _raw_spin_unlock_irqrestore+0x36/0x60
    [  701.827138]  [<ffffffff811dd2d0>] ? __init_kthread_worker+0x170/0x170
    [  701.827141]  [<ffffffff811dd2d0>] ? __init_kthread_worker+0x170/0x170
    [  701.827144]  [<ffffffff811dd00b>] kthread+0x24b/0x3a0
    [  701.827148]  [<ffffffff811dcdc0>] ? kthread_create_on_node+0x4c0/0x4c0
    [  701.827151]  [<ffffffff8129d70d>] ? trace_hardirqs_on+0xd/0x10
    [  701.827155]  [<ffffffff8116d41d>] ? do_group_exit+0xdd/0x350
    [  701.827158]  [<ffffffff811dcdc0>] ? kthread_create_on_node+0x4c0/0x4c0
    [  701.827161]  [<ffffffff82a1f52f>] ret_from_fork+0x3f/0x70
    [  701.827165]  [<ffffffff811dcdc0>] ? kthread_create_on_node+0x4c0/0x4c0
    [  701.827167] Memory state around the buggy address:
    [  701.827170]  ffff880080b95e80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  701.827172]  ffff880080b95f00: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  701.827175] >ffff880080b95f80: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  701.827177]                          ^
    [  701.827179]  ffff880080b96000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  701.827182]  ffff880080b96080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
    [  701.827183] ==================================================================
    
    The problem is that bio_check_pages_dirty calls bio_put, so we must
    not access bio fields after bio_check_pages_dirty.
    
    Fixes: 9b81c842355ac96097ba ("block: don't access bio->bi_error after bio_put()").
    Signed-off-by: Mike Krinkin <krinkin.m.u@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 3d45296ab96c2ec8308226b3350a6d9e48379870
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Fri Jan 29 11:58:03 2016 -0800

    irda: fix a potential use-after-free in ircomm_param_request
    
    self->ctrl_skb is protected by self->spinlock, we should not
    access it out of the lock. Move the debugging printk inside.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Samuel Ortiz <samuel@sortiz.org>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a3351b612b72c558910c88a43e2ef6d7d68bc97
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Jan 25 14:09:54 2016 +0100

    perf: Fix race in perf_event_exit_task_context()
    
    There is a race between perf_event_exit_task_context() and
    orphans_remove_work() which results in a use-after-free.
    
    We mark ctx->task with TASK_TOMBSTONE to indicate a context is
    'dead', under ctx->lock. After which point event_function_call()
    on any event of that context will NOP
    
    A concurrent orphans_remove_work() will only hold ctx->mutex for
    the list iteration and not serialize against this. Therefore its
    possible that orphans_remove_work()'s perf_remove_from_context()
    call will fail, but we'll continue to free the event, with the
    result of free'd memory still being on lists and everything.
    
    Once perf_event_exit_task_context() gets around to acquiring
    ctx->mutex it too will iterate the event list, encounter the
    already free'd event and proceed to free it _again_. This fails
    with the WARN in free_event().
    
    Plug the race by having perf_event_exit_task_context() hold
    ctx::mutex over the whole tear-down, thereby 'naturally'
    serializing against all other sites, including the orphan work.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: alexander.shishkin@linux.intel.com
    Cc: dsahern@gmail.com
    Cc: namhyung@kernel.org
    Link: http://lkml.kernel.org/r/20160125130954.GY6357@twins.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 9a4e7849b5e4e8742d71fa90fbf0722dd0710a56
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Tue Jan 26 14:49:22 2016 +0000

    component: fix crash on x86_64 with hda audio drivers
    
    Maarten reports that the addition of releasing match data to the
    component helper results in a general protection fault on x86_64.
    
    This is caused by the devm resources being freed in reverse order
    to their allocation, which caused a use-after-free of the match
    array.
    
    Switch the match array to be a more conventional kmalloc/kfree()
    affair, explicitly freeing it along with the parent match data
    structure.
    
    Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: ce657b1cddf1 ("component: add support for releasing match data")
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 2989be09a8a9d62a785137586ad941f916e08f83
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Jan 14 16:00:41 2016 +0200

    virtio_pci: fix use after free on release
    
    KASan detected a use-after-free error in virtio-pci remove code. In
    virtio_pci_remove(), vp_dev is still used after being freed in
    unregister_virtio_device() (in virtio_pci_release_dev() more
    precisely).
    
    To fix, keep a reference until cleanup is done.
    
    Fixes: 63bd62a08ca4 ("virtio_pci: defer kfree until release callback")
    Reported-by: Jerome Marchand <jmarchan@redhat.com>
    Cc: stable@vger.kernel.org
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Tested-by: Jerome Marchand <jmarchan@redhat.com>

commit 0a95b851370b84a4b9d92ee6d1fa0926901d0454
Author: Qu Wenruo <quwenruo@cn.fujitsu.com>
Date:   Fri Jan 22 09:28:38 2016 +0800

    btrfs: async-thread: Fix a use-after-free error for trace
    
    Parameter of trace_btrfs_work_queued() can be freed in its workqueue.
    So no one use use that pointer after queue_work().
    
    Fix the user-after-free bug by move the trace line before queue_work().
    
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Signed-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commit 4ae2182b1e3407de369f8c5d799543b7db74221b
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Jan 25 10:08:00 2016 -0600

    PCI/AER: Flush workqueue on device remove to avoid use-after-free
    
    A Root Port's AER structure (rpc) contains a queue of events.  aer_irq()
    enqueues AER status information and schedules aer_isr() to dequeue and
    process it.  When we remove a device, aer_remove() waits for the queue to
    be empty, then frees the rpc struct.
    
    But aer_isr() references the rpc struct after dequeueing and possibly
    emptying the queue, which can cause a use-after-free error as in the
    following scenario with two threads, aer_isr() on the left and a
    concurrent aer_remove() on the right:
    
      Thread A                      Thread B
      --------                      --------
      aer_irq():
        rpc->prod_idx++
                                    aer_remove():
                                      wait_event(rpc->prod_idx == rpc->cons_idx)
                                      # now blocked until queue becomes empty
      aer_isr():                      # ...
        rpc->cons_idx++               # unblocked because queue is now empty
        ...                           kfree(rpc)
        mutex_unlock(&rpc->rpc_mutex)
    
    To prevent this problem, use flush_work() to wait until the last scheduled
    instance of aer_isr() has completed before freeing the rpc struct in
    aer_remove().
    
    I reproduced this use-after-free by flashing a device FPGA and
    re-enumerating the bus to find the new device.  With SLUB debug, this
    crashes with 0x6b bytes (POISON_FREE, the use-after-free magic number) in
    GPR25:
    
      pcieport 0000:00:00.0: AER: Multiple Corrected error received: id=0000
      Unable to handle kernel paging request for data at address 0x27ef9e3e
      Workqueue: events aer_isr
      GPR24: dd6aa000 6b6b6b6b 605f8378 605f8360 d99b12c0 604fc674 606b1704 d99b12c0
      NIP [602f5328] pci_walk_bus+0xd4/0x104
    
    [bhelgaas: changelog, stable tag]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    CC: stable@vger.kernel.org

commits in this
         series have not been updated with review or final SOB tags because
         the branch they were originally published in was needed by ext4.
         Those tags are:
    
            Reviewed-by: Theodore Ts'o <tytso@mit.edu>
            Signed-off-by: Dave Chinner <david@fromrobit.com>
    
       - Revert a change that is causing suspend failures.
    
       - Fix a use-after-free that can occur on log mount failures.  Been
         around forever, but now exposed by other changes to log recovery
         made in the first 4.5 merge"
    
    * tag 'xfs-for-linus-4.5-2' of git://git.kernel.org/pub/scm/linux/kernel/git/dgc/linux-xfs:
      xfs: log mount failures don't wait for buffers to be released
      Revert "xfs: clear PF_NOFREEZE for xfsaild kthread"
      xfs: introduce per-inode DAX enablement
      xfs: use FS_XFLAG definitions directly
      fs: XFS_IOC_FS[SG]SETXATTR to FS_IOC_FS[SG]ETXATTR promotion

commit 1dff76b92f69051e579bdc131e01500da9fa2a91
Author: Gavin Guo <gavin.guo@canonical.com>
Date:   Wed Jan 20 12:36:58 2016 +0800

    sched/numa: Fix use-after-free bug in the task_numa_compare
    
    The following message can be observed on the Ubuntu v3.13.0-65 with KASan
    backported:
    
      ==================================================================
      BUG: KASan: use after free in task_numa_find_cpu+0x64c/0x890 at addr ffff880dd393ecd8
      Read of size 8 by task qemu-system-x86/3998900
      =============================================================================
      BUG kmalloc-128 (Tainted: G    B        ): kasan: bad access detected
      -----------------------------------------------------------------------------
    
      INFO: Allocated in task_numa_fault+0xc1b/0xed0 age=41980 cpu=18 pid=3998890
            __slab_alloc+0x4f8/0x560
            __kmalloc+0x1eb/0x280
            task_numa_fault+0xc1b/0xed0
            do_numa_page+0x192/0x200
            handle_mm_fault+0x808/0x1160
            __do_page_fault+0x218/0x750
            do_page_fault+0x1a/0x70
            page_fault+0x28/0x30
            SyS_poll+0x66/0x1a0
            system_call_fastpath+0x1a/0x1f
      INFO: Freed in task_numa_free+0x1d2/0x200 age=62 cpu=18 pid=0
            __slab_free+0x2ab/0x3f0
            kfree+0x161/0x170
            task_numa_free+0x1d2/0x200
            finish_task_switch+0x1d2/0x210
            __schedule+0x5d4/0xc60
            schedule_preempt_disabled+0x40/0xc0
            cpu_startup_entry+0x2da/0x340
            start_secondary+0x28f/0x360
      Call Trace:
       [<ffffffff81a6ce35>] dump_stack+0x45/0x56
       [<ffffffff81244aed>] print_trailer+0xfd/0x170
       [<ffffffff8124ac36>] object_err+0x36/0x40
       [<ffffffff8124cbf9>] kasan_report_error+0x1e9/0x3a0
       [<ffffffff8124d260>] kasan_report+0x40/0x50
       [<ffffffff810dda7c>] ? task_numa_find_cpu+0x64c/0x890
       [<ffffffff8124bee9>] __asan_load8+0x69/0xa0
       [<ffffffff814f5c38>] ? find_next_bit+0xd8/0x120
       [<ffffffff810dda7c>] task_numa_find_cpu+0x64c/0x890
       [<ffffffff810de16c>] task_numa_migrate+0x4ac/0x7b0
       [<ffffffff810de523>] numa_migrate_preferred+0xb3/0xc0
       [<ffffffff810e0b88>] task_numa_fault+0xb88/0xed0
       [<ffffffff8120ef02>] do_numa_page+0x192/0x200
       [<ffffffff81211038>] handle_mm_fault+0x808/0x1160
       [<ffffffff810d7dbd>] ? sched_clock_cpu+0x10d/0x160
       [<ffffffff81068c52>] ? native_load_tls+0x82/0xa0
       [<ffffffff81a7bd68>] __do_page_fault+0x218/0x750
       [<ffffffff810c2186>] ? hrtimer_try_to_cancel+0x76/0x160
       [<ffffffff81a6f5e7>] ? schedule_hrtimeout_range_clock.part.24+0xf7/0x1c0
       [<ffffffff81a7c2ba>] do_page_fault+0x1a/0x70
       [<ffffffff81a772e8>] page_fault+0x28/0x30
       [<ffffffff8128cbd4>] ? do_sys_poll+0x1c4/0x6d0
       [<ffffffff810e64f6>] ? enqueue_task_fair+0x4b6/0xaa0
       [<ffffffff810233c9>] ? sched_clock+0x9/0x10
       [<ffffffff810cf70a>] ? resched_task+0x7a/0xc0
       [<ffffffff810d0663>] ? check_preempt_curr+0xb3/0x130
       [<ffffffff8128b5c0>] ? poll_select_copy_remaining+0x170/0x170
       [<ffffffff810d3bc0>] ? wake_up_state+0x10/0x20
       [<ffffffff8112a28f>] ? drop_futex_key_refs.isra.14+0x1f/0x90
       [<ffffffff8112d40e>] ? futex_requeue+0x3de/0xba0
       [<ffffffff8112e49e>] ? do_futex+0xbe/0x8f0
       [<ffffffff81022c89>] ? read_tsc+0x9/0x20
       [<ffffffff8111bd9d>] ? ktime_get_ts+0x12d/0x170
       [<ffffffff8108f699>] ? timespec_add_safe+0x59/0xe0
       [<ffffffff8128d1f6>] SyS_poll+0x66/0x1a0
       [<ffffffff81a830dd>] system_call_fastpath+0x1a/0x1f
    
    As commit 1effd9f19324 ("sched/numa: Fix unsafe get_task_struct() in
    task_numa_assign()") points out, the rcu_read_lock() cannot protect the
    task_struct from being freed in the finish_task_switch(). And the bug
    happens in the process of calculation of imp which requires the access of
    p->numa_faults being freed in the following path:
    
    do_exit()
            current->flags |= PF_EXITING;
        release_task()
            ~~delayed_put_task_struct()~~
        schedule()
        ...
        ...
    rq->curr = next;
        context_switch()
            finish_task_switch()
                put_task_struct()
                    __put_task_struct()
                        task_numa_free()
    
    The fix here to get_task_struct() early before end of dst_rq->lock to
    protect the calculation process and also put_task_struct() in the
    corresponding point if finally the dst_rq->curr somehow cannot be
    assigned.
    
    Additional credit to Liang Chen who helped fix the error logic and add the
    put_task_struct() to the place it missed.
    
    Signed-off-by: Gavin Guo <gavin.guo@canonical.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: jay.vosburgh@canonical.com
    Cc: liang.chen@canonical.com
    Link: http://lkml.kernel.org/r/1453264618-17645-1-git-send-email-gavin.guo@canonical.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 02a54dd18f1eb831f4bf02ac763a4e9d805e1ba3
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Jan 19 12:51:10 2016 +0100

    greybus: core: add defensive connection disable post disconnect
    
    Bundle drivers *must* disable their connections in the disconnect
    callback, but add a defensive test and warn about buggy drivers
    nonetheless.
    
    Note that bundle drivers would generally release their state containers
    in disconnect so a failure stop I/O could potentially lead to
    use-after-free bugs in any late operation completion callbacks.
    
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 17ec4cd985780a7e30aa45bb8f272237c12502a4
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Fri Jan 15 16:54:48 2016 -0800

    zram: don't call idr_remove() from zram_remove()
    
    The use of idr_remove() is forbidden in the callback functions of
    idr_for_each().  It is therefore unsafe to call idr_remove in
    zram_remove().
    
    This patch moves the call to idr_remove() from zram_remove() to
    hot_remove_store().  In the detroy_devices() path, idrs are removed by
    idr_destroy().  This solves an use-after-free detected by KASan.
    
    [akpm@linux-foundation.org: fix coding stype, per Sergey]
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.2+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9c6f3ffe8200327d1cf2aad2ff2b414adaacbe96
Author: David Vrabel <david.vrabel@citrix.com>
Date:   Fri Jan 15 14:55:36 2016 +0000

    xen-netback: free queues after freeing the net device
    
    If a queue still has a NAPI instance added to the net device, freeing
    the queues early results in a use-after-free.
    
    The shouldn't ever happen because we disconnect and tear down all queues
    before freeing the net device, but doing this makes it obviously safe.
    
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b5a663aa426f4884c71cd8580adae73f33570f0d
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Jan 14 16:30:58 2016 +0100

    ALSA: timer: Harden slave timer list handling
    
    A slave timer instance might be still accessible in a racy way while
    operating the master instance as it lacks of locking.  Since the
    master operation is mostly protected with timer->lock, we should cope
    with it while changing the slave instance, too.  Also, some linked
    lists (active_list and ack_list) of slave instances aren't unlinked
    immediately at stopping or closing, and this may lead to unexpected
    accesses.
    
    This patch tries to address these issues.  It adds spin lock of
    timer->lock (either from master or slave, which is equivalent) in a
    few places.  For avoiding a deadlock, we ensure that the global
    slave_active_lock is always locked at first before each timer lock.
    
    Also, ack and active_list of slave instances are properly unlinked at
    snd_timer_stop() and snd_timer_close().
    
    Last but not least, remove the superfluous call of _snd_timer_stop()
    at removing slave links.  This is a noop, and calling it may confuse
    readers wrt locking.  Further cleanup will follow in a later patch.
    
    Actually we've got reports of use-after-free by syzkaller fuzzer, and
    this hopefully fixes these issues.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 820962dc700598ffe8cd21b967e30e7520c34748
Author: Rabin Vincent <rabin.vincent@axis.com>
Date:   Wed Dec 23 07:32:41 2015 +0100

    cifs: fix race between call_async() and reconnect()
    
    cifs_call_async() queues the MID to the pending list and calls
    smb_send_rqst().  If smb_send_rqst() performs a partial send, it sets
    the tcpStatus to CifsNeedReconnect and returns an error code to
    cifs_call_async().  In this case, cifs_call_async() removes the MID
    from the list and returns to the caller.
    
    However, cifs_call_async() releases the server mutex _before_ removing
    the MID.  This means that a cifs_reconnect() can race with this function
    and manage to remove the MID from the list and delete the entry before
    cifs_call_async() calls cifs_delete_mid().  This leads to various
    crashes due to the use after free in cifs_delete_mid().
    
    Task1                           Task2
    
    cifs_call_async():
     - rc = -EAGAIN
     - mutex_unlock(srv_mutex)
    
                                    cifs_reconnect():
                                     - mutex_lock(srv_mutex)
                                     - mutex_unlock(srv_mutex)
                                     - list_delete(mid)
                                     - mid->callback()
                                            cifs_writev_callback():
                                                    - mutex_lock(srv_mutex)
                                                    - delete(mid)
                                                    - mutex_unlock(srv_mutex)
    
     - cifs_delete_mid(mid) <---- use after free
    
    Fix this by removing the MID in cifs_call_async() before releasing the
    srv_mutex.  Also hold the srv_mutex in cifs_reconnect() until the MIDs
    are moved out of the pending list.
    
    Signed-off-by: Rabin Vincent <rabin.vincent@axis.com>
    Acked-by: Shirish Pargaonkar <shirishpargaonkar@gmail.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <sfrench@localhost.localdomain>

commit af368027a49a751d6ff4ee9e3f9961f35bb4fede
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jan 13 17:48:01 2016 +0100

    ALSA: timer: Fix race among timer ioctls
    
    ALSA timer ioctls have an open race and this may lead to a
    use-after-free of timer instance object.  A simplistic fix is to make
    each ioctl exclusive.  We have already tread_sem for controlling the
    tread, and extend this as a global mutex to be applied to each ioctl.
    
    The downside is, of course, the worse concurrency.  But these ioctls
    aren't to be parallel accessible, in anyway, so it should be fine to
    serialize there.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 3567eb6af614dac436c4b16a8d426f9faed639b3
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Jan 12 15:36:27 2016 +0100

    ALSA: seq: Fix race at timer setup and close
    
    ALSA sequencer code has an open race between the timer setup ioctl and
    the close of the client.  This was triggered by syzkaller fuzzer, and
    a use-after-free was caught there as a result.
    
    This patch papers over it by adding a proper queue->timer_mutex lock
    around the timer-related calls in the relevant code path.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit accad1ba7d62543ab3bcf08813726ea87d237bb6
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Jan 8 13:53:47 2016 +0000

    greybus: power_supply: fix use after free of power supply
    
    Individual power supply were being freed and checked using the wrong
    pointers and at the wrong place, which would make several issues, like
    used after free and so on.
    Fix it by freeing all allocated memory after release individual power
    supply.
    
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Reported-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 649621e3d54439ae232d726d7beef295d3887a68
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Fri Jan 8 11:00:54 2016 -0200

    sctp: fix use-after-free in pr_debug statement
    
    Dmitry Vyukov reported a use-after-free in the code expanded by the
    macro debug_post_sfx, which is caused by the use of the asoc pointer
    after it was freed within sctp_side_effect() scope.
    
    This patch fixes it by allowing sctp_side_effect to clear that asoc
    pointer when the TCB is freed.
    
    As Vlad explained, we also have to cover the SCTP_DISPOSITION_ABORT case
    because it will trigger DELETE_TCB too on that same loop.
    
    Also, there were places issuing SCTP_CMD_INIT_FAILED and ASSOC_FAILED
    but returning SCTP_DISPOSITION_CONSUME, which would fool the scheme
    above. Fix it by returning SCTP_DISPOSITION_ABORT instead.
    
    The macro is already prepared to handle such NULL pointer.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 33c6853347c13b7cf8d11c12714cd855a84bc992
Author: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
Date:   Tue Dec 29 16:45:21 2015 -0200

    [media] dvb-usb-v2: postpone removal of media_device
    
    We should not remove the media_device until its last usage,
    or we may have use after free troubles.
    
    So, move the per-adapter media_device removal to happen at
    the end of the adapter removal code.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>

commit eb910947c82f93cee6ee00a59a4ed86f12cf6e7f
Author: Brian Norris <computersforpeace@gmail.com>
Date:   Wed Dec 9 14:50:27 2015 -0800

    test: firmware_class: add asynchronous request trigger
    
    We might want to test for bugs like that found in commit f9692b2699bd
    ("firmware: fix possible use after free on name on asynchronous
    request"), where the asynchronous request API had race conditions.
    
    Let's add a simple file that will launch the async request, then wait
    until it's complete and report the status. It's not a true async test
    (we're using a mutex + wait_for_completion(), so we can't get more than
    one going at the same time), but it does help make sure the basic API is
    sane, and it can catch some class of bugs.
    
    Signed-off-by: Brian Norris <computersforpeace@gmail.com>
    Cc: Luis R. Rodriguez <mcgrof@suse.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit 07a5d38453599052aff0877b16bb9c1585f08609
Author: Francesco Ruggeri <fruggeri@aristanetworks.com>
Date:   Wed Jan 6 00:18:48 2016 -0800

    net: possible use after free in dst_release
    
    dst_release should not access dst->flags after decrementing
    __refcnt to 0. The dst_entry may be in dst_busy_list and
    dst_gc_task may dst_destroy it before dst_release gets a chance
    to access dst->flags.
    
    Fixes: d69bbf88c8d0 ("net: fix a race in dst_release()")
    Fixes: 27b75c95f10d ("net: avoid RCU for NOCACHE dst")
    Signed-off-by: Francesco Ruggeri <fruggeri@arista.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 12ca6ad2e3a896256f086497a7c7406a547ee373
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Dec 15 13:49:05 2015 +0100

    perf: Fix race in swevent hash
    
    There's a race on CPU unplug where we free the swevent hash array
    while it can still have events on. This will result in a
    use-after-free which is BAD.
    
    Simply do not free the hash array on unplug. This leaves the thing
    around and no use-after-free takes place.
    
    When the last swevent dies, we do a for_each_possible_cpu() iteration
    anyway to clean these up, at which time we'll free it, so no leakage
    will occur.
    
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Tested-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commits)
      sctp: sctp should release assoc when sctp_make_abort_user return NULL in sctp_close
      net, socket, socket_wq: fix missing initialization of flags
      drivers: net: cpsw: fix error return code
      openvswitch: Fix template leak in error cases.
      sctp: label accepted/peeled off sockets
      sctp: use GFP_USER for user-controlled kmalloc
      qlcnic: fix a loop exit condition better
      net: cdc_ncm: avoid changing RX/TX buffers on MTU changes
      geneve: initialize needed_headroom
      ipv6: honor ifindex in case we receive ll addresses in router advertisements
      addrconf: always initialize sysctl table data
      ipv6/addrlabel: fix ip6addrlbl_get()
      switchdev: bridge: Pass ageing time as clock_t instead of jiffies
      sh_eth: fix 16-bit descriptor field access endianness too
      veth: don’t modify ip_summed; doing so treats packets with bad checksums as good.
      net: usb: cdc_ncm: Adding Dell DW5813 LTE AT&T Mobile Broadband Card
      net: usb: cdc_ncm: Adding Dell DW5812 LTE Verizon Mobile Broadband Card
      natsemi: add checks for dma mapping errors
      rhashtable: Kill harmless RCU warning in rhashtable_walk_init
      openvswitch: correct encoding of set tunnel action attributes
      ...

commit 6df38689e0e9a07ff4f42c06b302e203b33667e9
Author: Vladimir Davydov <vdavydov@virtuozzo.com>
Date:   Tue Dec 29 14:54:10 2015 -0800

    mm: memcontrol: fix possible memcg leak due to interrupted reclaim
    
    Memory cgroup reclaim can be interrupted with mem_cgroup_iter_break()
    once enough pages have been reclaimed, in which case, in contrast to a
    full round-trip over a cgroup sub-tree, the current position stored in
    mem_cgroup_reclaim_iter of the target cgroup does not get invalidated
    and so is left holding the reference to the last scanned cgroup.  If the
    target cgroup does not get scanned again (we might have just reclaimed
    the last page or all processes might exit and free their memory
    voluntary), we will leak it, because there is nobody to put the
    reference held by the iterator.
    
    The problem is easy to reproduce by running the following command
    sequence in a loop:
    
        mkdir /sys/fs/cgroup/memory/test
        echo 100M > /sys/fs/cgroup/memory/test/memory.limit_in_bytes
        echo $$ > /sys/fs/cgroup/memory/test/cgroup.procs
        memhog 150M
        echo $$ > /sys/fs/cgroup/memory/cgroup.procs
        rmdir test
    
    The cgroups generated by it will never get freed.
    
    This patch fixes this issue by making mem_cgroup_iter avoid taking
    reference to the current position.  In order not to hit use-after-free
    bug while running reclaim in parallel with cgroup deletion, we make use
    of ->css_released cgroup callback to clear references to the dying
    cgroup in all reclaim iterators that might refer to it.  This callback
    is called right before scheduling rcu work which will free css, so if we
    access iter->position from rcu read section, we might be sure it won't
    go away under us.
    
    [hannes@cmpxchg.org: clean up css ref handling]
    Fixes: 5ac8fb31ad2e ("mm: memcontrol: convert reclaim iterator to simple css refcounting")
    Signed-off-by: Vladimir Davydov <vdavydov@virtuozzo.com>
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@kernel.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>    [3.19+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 218a773f7632d8553638c76d3a5a8c77e82ccea1
Author: Matan Barak <matanb@mellanox.com>
Date:   Wed Dec 23 14:56:54 2015 +0200

    IB/rdma_cm: Add wrapper for cma reference count
    
    Currently, cma users can't increase or decrease the cma reference
    count. This is necassary when setting cma attributes (like the
    default GID type) in order to avoid use-after-free errors.
    Adding cma_ref_dev and cma_deref_dev APIs.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit f4cee3af0dedf3270e6d615d772e3fbfa3200769
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Dec 22 09:43:07 2015 +0100

    mlxsw: core: Use devm_kzalloc to allocate mlxsw_hwmon structure
    
    KASan reported use-after-free for the hwmon structure. So fix this by
    using devm_kzalloc and let the core take care about freeing the memory
    during device dettach.
    
    Reported-by: Ido Schimmel <idosch@mellanox.com>
    Fixes: 89309da39 ("mlxsw: core: Implement temperature hwmon interface")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e8271201462710dbbaa0448b768428606724ca90
Author: Mike Krinkin <krinkin.m.u@gmail.com>
Date:   Tue Dec 15 12:56:40 2015 +0300

    null_blk: fix use-after-free error
    
    blk_end_request_all may free request, so we need to save
    request_queue pointer before blk_end_request_all call.
    
    The problem was introduced in commit cf8ecc5a8455266f8d51
    ("null_blk: guarantee device restart in all irq modes")
    and causes general protection fault with slab poisoning
    enabled.
    
    Fixes: cf8ecc5a8455266f8d51 ("null_blk: guarantee device
           restart in all irq modes")
    
    Signed-off-by: Mike Krinkin <krinkin.m.u@gmail.com>
    Reviewed-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit d79f16c046086f4fe0d42184a458e187464eb83e
Author: David Miller <davem@davemloft.net>
Date:   Thu Dec 17 16:05:49 2015 -0500

    mkiss: Fix use after free in mkiss_close().
    
    Need to do the unregister_device() after all references to the driver
    private have been done.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acf673a3187edf72068ee2f92f4dc47d66baed47
Author: David Miller <davem@davemloft.net>
Date:   Thu Dec 17 16:05:32 2015 -0500

    6pack: Fix use after free in sixpack_close().
    
    Need to do the unregister_device() after all references to the driver
    private have been done.
    
    Also we need to use del_timer_sync() for the timers so that we don't
    have any asynchronous references after the unregister.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50460e37186a2b932eacea24dca804bd1bcd2012
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Nov 20 10:42:47 2015 +0000

    Btrfs: fix race when finishing dev replace leading to transaction abort
    
    During the final phase of a device replace operation, I ran into a
    transaction abort that resulted in the following trace:
    
    [23919.655368] WARNING: CPU: 10 PID: 30175 at fs/btrfs/extent-tree.c:9843 btrfs_create_pending_block_groups+0x15e/0x1ab [btrfs]()
    [23919.664742] BTRFS: Transaction aborted (error -2)
    [23919.665749] Modules linked in: btrfs crc32c_generic xor raid6_pq nfsd auth_rpcgss oid_registry nfs_acl nfs lockd grace fscache sunrpc loop fuse parport_pc i2c_piix4 parport psmouse acpi_cpufreq processor i2c_core evdev microcode pcspkr button serio_raw ext4 crc16 jbd2 mbcache sd_mod sg sr_mod cdrom virtio_scsi ata_generic ata_piix virtio_pci floppy virtio_ring libata e1000 virtio scsi_mod [last unloaded: btrfs]
    [23919.679442] CPU: 10 PID: 30175 Comm: fsstress Not tainted 4.3.0-rc5-btrfs-next-17+ #1
    [23919.682392] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.8.1-0-g4adadbd-20150316_085822-nilsson.home.kraxel.org 04/01/2014
    [23919.689151]  0000000000000000 ffff8804020cbb50 ffffffff812566f4 ffff8804020cbb98
    [23919.692604]  ffff8804020cbb88 ffffffff8104d0a6 ffffffffa03eea69 ffff88041b678a48
    [23919.694230]  ffff88042ac38000 ffff88041b678930 00000000fffffffe ffff8804020cbbf0
    [23919.696716] Call Trace:
    [23919.698669]  [<ffffffff812566f4>] dump_stack+0x4e/0x79
    [23919.700597]  [<ffffffff8104d0a6>] warn_slowpath_common+0x9f/0xb8
    [23919.701958]  [<ffffffffa03eea69>] ? btrfs_create_pending_block_groups+0x15e/0x1ab [btrfs]
    [23919.703612]  [<ffffffff8104d107>] warn_slowpath_fmt+0x48/0x50
    [23919.705047]  [<ffffffffa03eea69>] btrfs_create_pending_block_groups+0x15e/0x1ab [btrfs]
    [23919.706967]  [<ffffffffa0402097>] __btrfs_end_transaction+0x84/0x2dd [btrfs]
    [23919.708611]  [<ffffffffa0402300>] btrfs_end_transaction+0x10/0x12 [btrfs]
    [23919.710099]  [<ffffffffa03ef0b8>] btrfs_alloc_data_chunk_ondemand+0x121/0x28b [btrfs]
    [23919.711970]  [<ffffffffa0413025>] btrfs_fallocate+0x7d3/0xc6d [btrfs]
    [23919.713602]  [<ffffffff8108b78f>] ? lock_acquire+0x10d/0x194
    [23919.714756]  [<ffffffff81086dbc>] ? percpu_down_read+0x51/0x78
    [23919.716155]  [<ffffffff8116ef1d>] ? __sb_start_write+0x5f/0xb0
    [23919.718918]  [<ffffffff8116ef1d>] ? __sb_start_write+0x5f/0xb0
    [23919.724170]  [<ffffffff8116b579>] vfs_fallocate+0x170/0x1ff
    [23919.725482]  [<ffffffff8117c1d7>] ioctl_preallocate+0x89/0x9b
    [23919.726790]  [<ffffffff8117c5ef>] do_vfs_ioctl+0x406/0x4e6
    [23919.728428]  [<ffffffff81171175>] ? SYSC_newfstat+0x25/0x2e
    [23919.729642]  [<ffffffff8118574d>] ? __fget_light+0x4d/0x71
    [23919.730782]  [<ffffffff8117c726>] SyS_ioctl+0x57/0x79
    [23919.731847]  [<ffffffff8147cd97>] entry_SYSCALL_64_fastpath+0x12/0x6f
    [23919.733330] ---[ end trace 166ef301a335832a ]---
    
    This is due to a race between device replace and chunk allocation, which
    the following diagram illustrates:
    
             CPU 1                                    CPU 2
    
     btrfs_dev_replace_finishing()
    
       at this point
        dev_replace->tgtdev->devid ==
        BTRFS_DEV_REPLACE_DEVID (0ULL)
    
       ...
    
       btrfs_start_transaction()
       btrfs_commit_transaction()
    
                                                   btrfs_fallocate()
                                                     btrfs_alloc_data_chunk_ondemand()
                                                       btrfs_join_transaction()
                                                         --> starts a new transaction
                                                       do_chunk_alloc()
                                                         lock fs_info->chunk_mutex
                                                           btrfs_alloc_chunk()
                                                             --> creates extent map for
                                                                 the new chunk with
                                                                 em->bdev->map->stripes[i]->dev->devid
                                                                 == X (X > 0)
                                                             --> extent map is added to
                                                                 fs_info->mapping_tree
                                                             --> initial phase of bg A
                                                                 allocation completes
                                                         unlock fs_info->chunk_mutex
    
       lock fs_info->chunk_mutex
    
       btrfs_dev_replace_update_device_in_mapping_tree()
         --> iterates fs_info->mapping_tree and
             replaces the device in every extent
             map's map->stripes[] with
             dev_replace->tgtdev, which still has
             an id of 0ULL (BTRFS_DEV_REPLACE_DEVID)
    
                                                       btrfs_end_transaction()
                                                         btrfs_create_pending_block_groups()
                                                           --> starts final phase of
                                                               bg A creation (update device,
                                                               extent, and chunk trees, etc)
                                                           btrfs_finish_chunk_alloc()
    
                                                             btrfs_update_device()
                                                               --> attempts to update a device
                                                                   item with ID == 0ULL
                                                                   (BTRFS_DEV_REPLACE_DEVID)
                                                                   which is the current ID of
                                                                   bg A's
                                                                   em->bdev->map->stripes[i]->dev->devid
                                                               --> doesn't find such item
                                                                   returns -ENOENT
                                                               --> the device id should have been X
                                                                   and not 0ULL
    
                                                           got -ENOENT from
                                                           btrfs_finish_chunk_alloc()
                                                           and aborts current transaction
    
       finishes setting up the target device,
       namely it sets tgtdev->devid to the value
       of srcdev->devid, which is X (and X > 0)
    
       frees the srcdev
    
       unlock fs_info->chunk_mutex
    
    So fix this by taking the device list mutex when processing the chunk's
    extent map stripes to update the device items. This avoids getting the
    wrong device id and use-after-free problems if the task finishing a
    chunk allocation grabs the replaced device, which is freed while the
    dev replace task is holding the device list mutex.
    
    This happened while running fstest btrfs/071.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Liu Bo <bo.li.liu@oracle.com>

commit dd42bf1197144ede075a9d4793123f7689e164bc
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Fri Nov 27 14:30:21 2015 -0500

    tty: Prevent ldisc drivers from re-using stale tty fields
    
    Line discipline drivers may mistakenly misuse ldisc-related fields
    when initializing. For example, a failure to initialize tty->receive_room
    in the N_GIGASET_M101 line discipline was recently found and fixed [1].
    Now, the N_X25 line discipline has been discovered accessing the previous
    line discipline's already-freed private data [2].
    
    Harden the ldisc interface against misuse by initializing revelant
    tty fields before instancing the new line discipline.
    
    [1]
        commit fd98e9419d8d622a4de91f76b306af6aa627aa9c
        Author: Tilman Schmidt <tilman@imap.cc>
        Date:   Tue Jul 14 00:37:13 2015 +0200
    
        isdn/gigaset: reset tty->receive_room when attaching ser_gigaset
    
    [2] Report from Sasha Levin <sasha.levin@oracle.com>
        [  634.336761] ==================================================================
        [  634.338226] BUG: KASAN: use-after-free in x25_asy_open_tty+0x13d/0x490 at addr ffff8800a743efd0
        [  634.339558] Read of size 4 by task syzkaller_execu/8981
        [  634.340359] =============================================================================
        [  634.341598] BUG kmalloc-512 (Not tainted): kasan: bad access detected
        ...
        [  634.405018] Call Trace:
        [  634.405277] dump_stack (lib/dump_stack.c:52)
        [  634.405775] print_trailer (mm/slub.c:655)
        [  634.406361] object_err (mm/slub.c:662)
        [  634.406824] kasan_report_error (mm/kasan/report.c:138 mm/kasan/report.c:236)
        [  634.409581] __asan_report_load4_noabort (mm/kasan/report.c:279)
        [  634.411355] x25_asy_open_tty (drivers/net/wan/x25_asy.c:559 (discriminator 1))
        [  634.413997] tty_ldisc_open.isra.2 (drivers/tty/tty_ldisc.c:447)
        [  634.414549] tty_set_ldisc (drivers/tty/tty_ldisc.c:567)
        [  634.415057] tty_ioctl (drivers/tty/tty_io.c:2646 drivers/tty/tty_io.c:2879)
        [  634.423524] do_vfs_ioctl (fs/ioctl.c:43 fs/ioctl.c:607)
        [  634.427491] SyS_ioctl (fs/ioctl.c:622 fs/ioctl.c:613)
        [  634.427945] entry_SYSCALL_64_fastpath (arch/x86/entry/entry_64.S:188)
    
    Cc: Tilman Schmidt <tilman@imap.cc>
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9470e24f35ab81574da54e69df90c1eb4a96b43f
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 9 07:25:06 2015 -0800

    ipv6: sctp: clone options to avoid use after free
    
    SCTP is lacking proper np->opt cloning at accept() time.
    
    TCP and DCCP use ipv6_dup_options() helper, do the same
    in SCTP.
    
    We might later factorize this code in a common helper to avoid
    future mistakes.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit af3302b90775ca3389c93ab31458d696e8a8fa60
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Dec 4 17:27:15 2015 +0100

    Revert "drm/i915: Extend LRC pinning to cover GPU context writeback"
    
    This reverts commit 6d65ba943a2d1e4292a07ca7ddb6c5138b9efa5d.
    
    Mika Kuoppala traced down a use-after-free crash in module unload to
    this commit, because ring->last_context is leaked beyond when the
    context gets destroyed. Mika submitted a quick fix to patch that up in
    the context destruction code, but that's too much of a hack.
    
    The right fix is instead for the ring to hold a full reference onto
    it's last context, like we do for legacy contexts.
    
    Since this is causing a regression in BAT it gets reverted before we
    can close this.
    
    Cc: Nick Hoath <nicholas.hoath@intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: David Gordon <david.s.gordon@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Alex Dai <yu.dai@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=93248
    Acked-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

commits)
      net: phy: reset only targeted phy
      bnxt_en: Setup uc_list mac filters after resetting the chip.
      bnxt_en: enforce proper storing of MAC address
      bnxt_en: Fixed incorrect implementation of ndo_set_mac_address
      net: lpc_eth: remove irq > NR_IRQS check from probe()
      net_sched: fix qdisc_tree_decrease_qlen() races
      openvswitch: fix hangup on vxlan/gre/geneve device deletion
      ipv4: igmp: Allow removing groups from a removed interface
      ipv6: sctp: implement sctp_v6_destroy_sock()
      arm64: bpf: add 'store immediate' instruction
      ipv6: kill sk_dst_lock
      ipv6: sctp: add rcu protection around np->opt
      net/neighbour: fix crash at dumping device-agnostic proxy entries
      sctp: use GFP_USER for user-controlled kmalloc
      sctp: convert sack_needed and sack_generation to bits
      ipv6: add complete rcu protection around np->opt
      bpf: fix allocation warnings in bpf maps and integer overflow
      mvebu: dts: enable IP checksum with jumbo frames for Armada 38x on Port0
      net: mvneta: enable setting custom TX IP checksum limit
      net: mvneta: fix error path for building skb
      ...

commit 6bd4f355df2eae80b8a5c7b097371cd1e05f20d5
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 2 21:53:57 2015 -0800

    ipv6: kill sk_dst_lock
    
    While testing the np->opt RCU conversion, I found that UDP/IPv6 was
    using a mixture of xchg() and sk_dst_lock to protect concurrent changes
    to sk->sk_dst_cache, leading to possible corruptions and crashes.
    
    ip6_sk_dst_lookup_flow() uses sk_dst_check() anyway, so the simplest
    way to fix the mess is to remove sk_dst_lock completely, as we did for
    IPv4.
    
    __ip6_dst_store() and ip6_dst_store() share same implementation.
    
    sk_setup_caps() being called with socket lock being held or not,
    we have to use sk_dst_set() instead of __sk_dst_set()
    
    Note that I had to move the "np->dst_cookie = rt6_get_cookie(rt);"
    in ip6_dst_store() before the sk_setup_caps(sk, dst) call.
    
    This is because ip6_dst_store() can be called from process context,
    without any lock held.
    
    As soon as the dst is installed in sk->sk_dst_cache, dst can be freed
    from another cpu doing a concurrent ip6_dst_store()
    
    Doing the dst dereference before doing the install is needed to make
    sure no use after free would trigger.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45f6fad84cc305103b28d73482b344d7f5b76f39
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Nov 29 19:37:57 2015 -0800

    ipv6: add complete rcu protection around np->opt
    
    This patch addresses multiple problems :
    
    UDP/RAW sendmsg() need to get a stable struct ipv6_txoptions
    while socket is not locked : Other threads can change np->opt
    concurrently. Dmitry posted a syzkaller
    (http://github.com/google/syzkaller) program desmonstrating
    use-after-free.
    
    Starting with TCP/DCCP lockless listeners, tcp_v6_syn_recv_sock()
    and dccp_v6_request_recv_sock() also need to use RCU protection
    to dereference np->opt once (before calling ipv6_dup_options())
    
    This patch adds full RCU protection to np->opt
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ee9159ddce14bc1dec9435ae4e3bd3153e783706
Author: Peter Hurley <peter@hurleysoftware.com>
Date:   Fri Nov 27 14:18:39 2015 -0500

    wan/x25: Fix use-after-free in x25_asy_open_tty()
    
    The N_X25 line discipline may access the previous line discipline's closed
    and already-freed private data on open [1].
    
    The tty->disc_data field _never_ refers to valid data on entry to the
    line discipline's open() method. Rather, the ldisc is expected to
    initialize that field for its own use for the lifetime of the instance
    (ie. from open() to close() only).
    
    [1]
        [  634.336761] ==================================================================
        [  634.338226] BUG: KASAN: use-after-free in x25_asy_open_tty+0x13d/0x490 at addr ffff8800a743efd0
        [  634.339558] Read of size 4 by task syzkaller_execu/8981
        [  634.340359] =============================================================================
        [  634.341598] BUG kmalloc-512 (Not tainted): kasan: bad access detected
        ...
        [  634.405018] Call Trace:
        [  634.405277] dump_stack (lib/dump_stack.c:52)
        [  634.405775] print_trailer (mm/slub.c:655)
        [  634.406361] object_err (mm/slub.c:662)
        [  634.406824] kasan_report_error (mm/kasan/report.c:138 mm/kasan/report.c:236)
        [  634.409581] __asan_report_load4_noabort (mm/kasan/report.c:279)
        [  634.411355] x25_asy_open_tty (drivers/net/wan/x25_asy.c:559 (discriminator 1))
        [  634.413997] tty_ldisc_open.isra.2 (drivers/tty/tty_ldisc.c:447)
        [  634.414549] tty_set_ldisc (drivers/tty/tty_ldisc.c:567)
        [  634.415057] tty_ioctl (drivers/tty/tty_io.c:2646 drivers/tty/tty_io.c:2879)
        [  634.423524] do_vfs_ioctl (fs/ioctl.c:43 fs/ioctl.c:607)
        [  634.427491] SyS_ioctl (fs/ioctl.c:622 fs/ioctl.c:613)
        [  634.427945] entry_SYSCALL_64_fastpath (arch/x86/entry/entry_64.S:188)
    
    Reported-and-tested-by: Sasha Levin <sasha.levin@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53254f900bd9ff1e3cc5628e76126bb403d9d160
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Nov 23 14:55:41 2015 -0500

    cgroup: make css_set pin its css's to avoid use-afer-free
    
    A css_set represents the relationship between a set of tasks and
    css's.  css_set never pinned the associated css's.  This was okay
    because tasks used to always disassociate immediately (in RCU sense) -
    either a task is moved to a different css_set or exits and never
    accesses css_set again.
    
    Unfortunately, afcf6c8b7544 ("cgroup: add cgroup_subsys->free() method
    and use it to fix pids controller") and patches leading up to it made
    a zombie hold onto its css_set and deref the associated css's on its
    release.  Nothing pins the css's after exit and it might have already
    been freed leading to use-after-free.
    
     general protection fault: 0000 [#1] PREEMPT SMP
     task: ffffffff81bf2500 ti: ffffffff81be4000 task.ti: ffffffff81be4000
     RIP: 0010:[<ffffffff810fa205>]  [<ffffffff810fa205>] pids_cancel.constprop.4+0x5/0x40
     ...
     Call Trace:
      <IRQ>
      [<ffffffff810fb02d>] ? pids_free+0x3d/0xa0
      [<ffffffff810f8893>] cgroup_free+0x53/0xe0
      [<ffffffff8104ed62>] __put_task_struct+0x42/0x130
      [<ffffffff81053557>] delayed_put_task_struct+0x77/0x130
      [<ffffffff810c6b34>] rcu_process_callbacks+0x2f4/0x820
      [<ffffffff810c6af3>] ? rcu_process_callbacks+0x2b3/0x820
      [<ffffffff81056e54>] __do_softirq+0xd4/0x460
      [<ffffffff81057369>] irq_exit+0x89/0xa0
      [<ffffffff81876212>] smp_apic_timer_interrupt+0x42/0x50
      [<ffffffff818747f4>] apic_timer_interrupt+0x84/0x90
      <EOI>
     ...
     Code: 5b 5d c3 48 89 df 48 c7 c2 c9 f9 ae 81 48 c7 c6 91 2c ae 81 e8 1d 94 0e 00 31 c0 5b 5d c3 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 <f0> 48 83 87 e0 00 00 00 ff 78 01 c3 80 3d 08 7a c1 00 00 74 02
     RIP  [<ffffffff810fa205>] pids_cancel.constprop.4+0x5/0x40
      RSP <ffff88001fc03e20>
     ---[ end trace 89a4a4b916b90c49 ]---
     Kernel panic - not syncing: Fatal exception in interrupt
     Kernel Offset: disabled
     ---[ end Kernel panic - not syncing: Fatal exception in interrupt
    
    Fix it by making css_set pin the associate css's until its release.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Reported-by: Daniel Wagner <daniel.wagner@bmw-carit.de>
    Link: http://lkml.kernel.org/g/20151120041836.GA18390@codemonkey.org.uk
    Link: http://lkml.kernel.org/g/5652D448.3080002@bmw-carit.de
    Fixes: afcf6c8b7544 ("cgroup: add cgroup_subsys->free() method and use it to fix pids controller")

commit 9ffad80a9c65d7c2ab5ad6cb8b4b0559b9ed8b8c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Nov 25 09:02:10 2015 -0800

    drivers: net: xgene: fix possible use after free
    
    Once TX has been enabled on a NIC, it is illegal to access skb,
    as this skb might have been freed by another cpu, from TX completion
    handler.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Iyappan Subramanian <isubramanian@apm.com>
    Acked-by: Iyappan Subramanian <isubramanian@apm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 057085e522f8bf94c2e691a5b76880f68060f8ba
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Thu Nov 5 23:37:59 2015 -0800

    target: Fix race for SCF_COMPARE_AND_WRITE_POST checking
    
    This patch addresses a race + use after free where the first
    stage of COMPARE_AND_WRITE in compare_and_write_callback()
    is rescheduled after the backend sends the secondary WRITE,
    resulting in second stage compare_and_write_post() callback
    completing in target_complete_ok_work() before the first
    can return.
    
    Because current code depends on checking se_cmd->se_cmd_flags
    after return from se_cmd->transport_complete_callback(),
    this results in first stage having SCF_COMPARE_AND_WRITE_POST
    set, which incorrectly falls through into second stage CAW
    processing code, eventually triggering a NULL pointer
    dereference due to use after free.
    
    To address this bug, pass in a new *post_ret parameter into
    se_cmd->transport_complete_callback(), and depend upon this
    value instead of ->se_cmd_flags to determine when to return
    or fall through into ->queue_status() code for CAW.
    
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Cc: <stable@vger.kernel.org> # v3.12+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 7d267278a9ece963d77eefec61630223fce08c6c
Author: Rainer Weikusat <rweikusat@mobileactivedefense.com>
Date:   Fri Nov 20 22:07:23 2015 +0000

    unix: avoid use-after-free in ep_remove_wait_queue
    
    Rainer Weikusat <rweikusat@mobileactivedefense.com> writes:
    An AF_UNIX datagram socket being the client in an n:1 association with
    some server socket is only allowed to send messages to the server if the
    receive queue of this socket contains at most sk_max_ack_backlog
    datagrams. This implies that prospective writers might be forced to go
    to sleep despite none of the message presently enqueued on the server
    receive queue were sent by them. In order to ensure that these will be
    woken up once space becomes again available, the present unix_dgram_poll
    routine does a second sock_poll_wait call with the peer_wait wait queue
    of the server socket as queue argument (unix_dgram_recvmsg does a wake
    up on this queue after a datagram was received). This is inherently
    problematic because the server socket is only guaranteed to remain alive
    for as long as the client still holds a reference to it. In case the
    connection is dissolved via connect or by the dead peer detection logic
    in unix_dgram_sendmsg, the server socket may be freed despite "the
    polling mechanism" (in particular, epoll) still has a pointer to the
    corresponding peer_wait queue. There's no way to forcibly deregister a
    wait queue with epoll.
    
    Based on an idea by Jason Baron, the patch below changes the code such
    that a wait_queue_t belonging to the client socket is enqueued on the
    peer_wait queue of the server whenever the peer receive queue full
    condition is detected by either a sendmsg or a poll. A wake up on the
    peer queue is then relayed to the ordinary wait queue of the client
    socket via wake function. The connection to the peer wait queue is again
    dissolved if either a wake up is about to be relayed or the client
    socket reconnects or a dead peer is detected or the client socket is
    itself closed. This enables removing the second sock_poll_wait from
    unix_dgram_poll, thus avoiding the use-after-free, while still ensuring
    that no blocked writer sleeps forever.
    
    Signed-off-by: Rainer Weikusat <rweikusat@mobileactivedefense.com>
    Fixes: ec0d215f9420 ("af_unix: fix 'poll for write'/connected DGRAM sockets")
    Reviewed-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e6edc95382cc36423aff18a237173ad62d5ab52
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Nov 19 13:29:28 2015 -0800

    block: protect rw_page against device teardown
    
    Fix use after free crashes like the following:
    
     general protection fault: 0000 [#1] SMP
     Call Trace:
      [<ffffffffa0050216>] ? pmem_do_bvec.isra.12+0xa6/0xf0 [nd_pmem]
      [<ffffffffa0050ba2>] pmem_rw_page+0x42/0x80 [nd_pmem]
      [<ffffffff8128fd90>] bdev_read_page+0x50/0x60
      [<ffffffff812972f0>] do_mpage_readpage+0x510/0x770
      [<ffffffff8128fd20>] ? I_BDEV+0x20/0x20
      [<ffffffff811d86dc>] ? lru_cache_add+0x1c/0x50
      [<ffffffff81297657>] mpage_readpages+0x107/0x170
      [<ffffffff8128fd20>] ? I_BDEV+0x20/0x20
      [<ffffffff8128fd20>] ? I_BDEV+0x20/0x20
      [<ffffffff8129058d>] blkdev_readpages+0x1d/0x20
      [<ffffffff811d615f>] __do_page_cache_readahead+0x28f/0x310
      [<ffffffff811d6039>] ? __do_page_cache_readahead+0x169/0x310
      [<ffffffff811c5abd>] ? pagecache_get_page+0x2d/0x1d0
      [<ffffffff811c76f6>] filemap_fault+0x396/0x530
      [<ffffffff811f816e>] __do_fault+0x4e/0xf0
      [<ffffffff811fce7d>] handle_mm_fault+0x11bd/0x1b50
    
    Cc: <stable@vger.kernel.org>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Reported-by: kbuild test robot <lkp@intel.com>
    Acked-by: Matthew Wilcox <willy@linux.intel.com>
    [willy: symmetry fixups]
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commits)
      MAINTAINERS: Update Mellanox's Eth NIC driver entries
      net/core: revert "net: fix __netdev_update_features return.." and add comment
      af_unix: take receive queue lock while appending new skb
      rtnetlink: fix frame size warning in rtnl_fill_ifinfo
      net: use skb_clone to avoid alloc_pages failure.
      packet: Use PAGE_ALIGNED macro
      packet: Don't check frames_per_block against negative values
      net: phy: Use interrupts when available in NOLINK state
      phy: marvell: Add support for 88E1540 PHY
      arm64: bpf: make BPF prologue and epilogue align with ARM64 AAPCS
      macvlan: fix leak in macvlan_handle_frame
      ipvlan: fix use after free of skb
      ipvlan: fix leak in ipvlan_rcv_frame
      vlan: Do not put vlan headers back on bridge and macvlan ports
      vlan: Fix untag operations of stacked vlans with REORDER_HEADER off
      via-velocity: unconditionally drop frames with bad l2 length
      ipg: Remove ipg driver
      dl2k: Add support for IP1000A-based cards
      snmp: Remove duplicate OUTMCAST stat increment
      net: thunder: Check for driver data in nicvf_remove()
      ...

commit a534dc529853c69e94994aa47c1d80a03ce2c11d
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Mon Nov 16 22:44:53 2015 +0100

    ipvlan: fix use after free of skb
    
    ipvlan_handle_frame is a rx_handler, and when it returns a value other
    than RX_HANDLER_CONSUMED (here, NET_RX_DROP aka RX_HANDLER_ANOTHER),
    __netif_receive_skb_core expects that the skb still exists and will
    process it further, but we just freed it.
    
    Fixes: 2ad7bf363841 ("ipvlan: Initial check-in of the IPVLAN driver.")
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4572372847680ee04f184df916d5cf007c94ff7e
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Nov 11 11:29:08 2015 +0100

    drm/core: Fix old_fb handling in drm_mode_atomic_ioctl.
    
    plane_mask should be cleared inside the retry loop, because it gets
    reset on every retry. Without this fix the plane->fb refcounting might
    get out of sync on retries, resulting in either leaked memory or
    use-after-free.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: stable@vger.kernel.org #v4.3
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1447237751-9663-3-git-send-email-maarten.lankhorst@ubuntu.com

commit bc0e7345168c0f7483d2d1da86285d89136417cd
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Oct 20 11:46:31 2015 +0200

    ALSA: pcm_dmaengine: Properly synchronize DMA on shutdown
    
    Use the new dmaengine_synchronize() function to make sure that all complete
    callbacks have finished running before the runtime data, which is accessed
    in the completed callback, is freed.
    
    This fixes a long standing use-after-free race condition that has been
    observed on some systems.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit b36f09c3c441a6e59eab9315032e7d546571de3f
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Tue Oct 20 11:46:28 2015 +0200

    dmaengine: Add transfer termination synchronization support
    
    The DMAengine API has a long standing race condition that is inherent to
    the API itself. Calling dmaengine_terminate_all() is supposed to stop and
    abort any pending or active transfers that have previously been submitted.
    Unfortunately it is possible that this operation races against a currently
    running (or with some drivers also scheduled) completion callback.
    
    Since the API allows dmaengine_terminate_all() to be called from atomic
    context as well as from within a completion callback it is not possible to
    synchronize to the execution of the completion callback from within
    dmaengine_terminate_all() itself.
    
    This means that a user of the DMAengine API does not know when it is safe
    to free resources used in the completion callback, which can result in a
    use-after-free race condition.
    
    This patch addresses the issue by introducing an explicit synchronization
    primitive to the DMAengine API called dmaengine_synchronize().
    
    The existing dmaengine_terminate_all() is deprecated in favor of
    dmaengine_terminate_sync() and dmaengine_terminate_async(). The former
    aborts all pending and active transfers and synchronizes to the current
    context, meaning it will wait until all running completion callbacks have
    finished. This means it is only possible to call this function from
    non-atomic context. The later function does not synchronize, but can still
    be used in atomic context or from within a complete callback. It has to be
    followed up by dmaengine_synchronize() before a client can free the
    resources used in a completion callback.
    
    In addition to this the semantics of the device_terminate_all() callback
    are slightly relaxed by this patch. It is now OK for a driver to only
    schedule the termination of the active transfer, but does not necessarily
    have to wait until the DMA controller has completely stopped. The driver
    must ensure though that the controller has stopped and no longer accesses
    any memory when the device_synchronize() callback returns.
    
    This was in part done since most drivers do not pay attention to this
    anyway at the moment and to emphasize that this needs to be done when the
    device_synchronize() callback is implemented. But it also helps with
    implementing support for devices where stopping the controller can require
    operations that may sleep.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>

commit 73ed5d25dce0354ea381d6dc93005c3085fae03d
Author: Hannes Frederic Sowa <hannes@stressinduktion.org>
Date:   Tue Nov 10 16:23:15 2015 +0100

    af-unix: fix use-after-free with concurrent readers while splicing
    
    During splicing an af-unix socket to a pipe we have to drop all
    af-unix socket locks. While doing so we allow another reader to enter
    unix_stream_read_generic which can read, copy and finally free another
    skb. If exactly this skb is just in process of being spliced we get a
    use-after-free report by kasan.
    
    First, we must make sure to not have a free while the skb is used during
    the splice operation. We simply increment its use counter before unlocking
    the reader lock.
    
    Stream sockets have the nice characteristic that we don't care about
    zero length writes and they never reach the peer socket's queue. That
    said, we can take the UNIXCB.consumed field as the indicator if the
    skb was already freed from the socket's receive queue. If the skb was
    fully consumed after we locked the reader side again we know it has been
    dropped by a second reader. We indicate a short read to user space and
    abort the current splice operation.
    
    This bug has been found with syzkaller
    (http://github.com/google/syzkaller) by Dmitry Vyukov.
    
    Fixes: 2b514574f7e8 ("net: af_unix: implement splice for stream af_unix sockets")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 39174291d8e8acfd1113214a943263aaa03c57c8
Author: françois romieu <romieu@fr.zoreil.com>
Date:   Wed Nov 11 23:35:18 2015 +0100

    r8169: fix kasan reported skb use-after-free.
    
    Signed-off-by: Francois Romieu <romieu@fr.zoreil.com>
    Reported-by: Dave Jones <davej@codemonkey.org.uk>
    Fixes: d7d2d89d4b0af ("r8169: Add software counter for multicast packages")
    Acked-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Corinna Vinschen <vinschen@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eeb6a6ff597ee47a6ecc652dab769c3137fd1483
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed Nov 11 10:07:05 2015 +0100

    greybus: interface: fix potential use-after-free at remove
    
    Fix resources (accessible through sysfs) being released before interface
    is deregistered.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commits)
      Revert "bridge: Allow forward delay to be cfgd when STP enabled"
      bpf_trace: Make dependent on PERF_EVENTS
      qed: select ZLIB_INFLATE
      net: fix a race in dst_release()
      net: mvneta: Fix memory use after free.
      net: Documentation: Fix default value tcp_limit_output_bytes
      macvtap: Resolve possible __might_sleep warning in macvtap_do_read()
      mvneta: add FIXED_PHY dependency
      net: caif: check return value of alloc_netdev
      net: hisilicon: NET_VENDOR_HISILICON should depend on HAS_DMA
      drivers: net: xgene: fix RGMII 10/100Mb mode
      netfilter: nft_meta: use skb_to_full_sk() helper
      net_sched: em_meta: use skb_to_full_sk() helper
      sched: cls_flow: use skb_to_full_sk() helper
      netfilter: xt_owner: use skb_to_full_sk() helper
      smack: use skb_to_full_sk() helper
      net: add skb_to_full_sk() helper and use it in selinux_netlbl_skbuff_setsid()
      bpf: doc: correct arch list for supported eBPF JIT
      dwc_eth_qos: Delete an unnecessary check before the function call "of_node_put"
      bonding: fix panic on non-ARPHRD_ETHER enslave failure
      ...

commit 8c94ddbc139bf8511d79153a81191b07f8e03eb4
Author: Justin Maggard <jmaggard10@gmail.com>
Date:   Mon Nov 9 17:21:05 2015 -0800

    net: mvneta: Fix memory use after free.
    
    After changing an interface's MTU, then bringing the interface down and
    back up again, I immediately saw tons of kernel messages like below.
    The reason for this bad behavior is mvneta_rxq_drop_pkts(), which calls
    dma_unmap_single() on already-freed memory.  So we need to switch the
    order of those two operations.
    
    [  152.388518] BUG: Bad page state in process ifconfig  pfn:1b518
    [  152.388526] page:dff3dbc0 count:0 mapcount:0 mapping:  (null) index:0x0
    [  152.395178] flags: 0x200(arch_1)
    [  152.398441] page dumped because: PAGE_FLAGS_CHECK_AT_PREP flag set
    [  152.398446] bad because of flags:
    [  152.398450] flags: 0x200(arch_1)
    [  152.401716] Modules linked in:
    [  152.401728] CPU: 0 PID: 1453 Comm: ifconfig Tainted: P    B      O    4.1.12.armada.1 #1
    [  152.401733] Hardware name: Marvell Armada 370/XP (Device Tree)
    [  152.401749] [<c0015b1c>] (unwind_backtrace) from [<c0011d8c>] (show_stack+0x10/0x14)
    [  152.401762] [<c0011d8c>] (show_stack) from [<c06aa68c>] (dump_stack+0x74/0x90)
    [  152.401772] [<c06aa68c>] (dump_stack) from [<c0096c08>] (bad_page+0xc4/0x124)
    [  152.401783] [<c0096c08>] (bad_page) from [<c0099378>] (get_page_from_freelist+0x4e4/0x644)
    [  152.401794] [<c0099378>] (get_page_from_freelist) from [<c0099620>] (__alloc_pages_nodemask+0x148/0x784)
    [  152.401805] [<c0099620>] (__alloc_pages_nodemask) from [<c00ac658>] (kmalloc_order+0x10/0x20)
    [  152.401818] [<c00ac658>] (kmalloc_order) from [<c04c6f44>] (mvneta_rx_refill+0xc4/0xe8)
    [  152.401830] [<c04c6f44>] (mvneta_rx_refill) from [<c04c96c0>] (mvneta_setup_rxqs+0x298/0x39c)
    [  152.401842] [<c04c96c0>] (mvneta_setup_rxqs) from [<c04c9904>] (mvneta_open+0x3c/0x150)
    [  152.401853] [<c04c9904>] (mvneta_open) from [<c0597764>] (__dev_open+0xac/0x124)
    [  152.401864] [<c0597764>] (__dev_open) from [<c05979e4>] (__dev_change_flags+0x8c/0x148)
    [  152.401875] [<c05979e4>] (__dev_change_flags) from [<c0597ac0>] (dev_change_flags+0x18/0x48)
    [  152.401886] [<c0597ac0>] (dev_change_flags) from [<c060d308>] (devinet_ioctl+0x620/0x6d0)
    [  152.401897] [<c060d308>] (devinet_ioctl) from [<c057d810>] (sock_ioctl+0x64/0x288)
    [  152.401908] [<c057d810>] (sock_ioctl) from [<c00dcb7c>] (do_vfs_ioctl+0x78/0x608)
    [  152.401918] [<c00dcb7c>] (do_vfs_ioctl) from [<c00dd170>] (SyS_ioctl+0x64/0x74)
    [  152.401930] [<c00dd170>] (SyS_ioctl) from [<c000f3a0>] (ret_fast_syscall+0x0/0x3c)
    
    Signed-off-by: Justin Maggard <jmaggard@netgear.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Btrfs: fix hole punching when using the no-holes feature
      Btrfs: find_free_extent: Do not erroneously skip LOOP_CACHING_WAIT state
      btrfs: Fix a data space underflow warning
      btrfs: qgroup: Fix a rebase bug which will cause qgroup double free
      btrfs: qgroup: Fix a race in delayed_ref which leads to abort trans
      btrfs: clear PF_NOFREEZE in cleaner_kthread()
      btrfs: qgroup: Don't copy extent buffer to do qgroup rescan
      btrfs: add balance filters limits, stripes and usage to supported mask
      btrfs: extend balance filter usage to take minimum and maximum
      btrfs: add balance filter for stripes
      btrfs: extend balance filter limit to take minimum and maximum
      btrfs: fix use after free iterating extrefs
      btrfs: check unsupported filters in balance arguments
      Btrfs: fix regression running delayed references when using qgroups
      Btrfs: fix regression when running delayed references
      Btrfs: don't do extra bitmap search in one bit case
      Btrfs: keep track of largest extent in bitmaps
      Btrfs: don't keep trying to build clusters if we are fragmented
      Btrfs: cut down on loops through the allocator
      Btrfs: don't continue setting up space cache when enospc
      ...

commits)
      fs/ext4: remove unnecessary new_valid_dev check
      ext4: fix abs() usage in ext4_mb_check_group_pa
      ext4: do not allow journal_opts for fs w/o journal
      ext4: explicit mount options parsing cleanup
      ext4, jbd2: ensure entering into panic after recording an error in superblock
      [PATCH] fix calculation of meta_bg descriptor backups
      ext4: fix potential use after free in __ext4_journal_stop
      jbd2: fix checkpoint list cleanup
      ext4: fix xfstest generic/269 double revoked buffer bug with bigalloc
      ext4: make the bitmap read routines return real error codes
      jbd2: clean up feature test macros with predicate functions
      ext4: clean up feature test macros with predicate functions
      ext4: call out CRC and corruption errors with specific error codes
      ext4: store checksum seed in superblock
      ext4: reserve code points for the project quota feature
      ext4: promote ext4 over ext2 in the default probe order
      jbd2: gate checksum calculations on crc driver presence, not sb flags
      ext4: use private version of page_zero_new_buffers() for data=journal mode
      ext4 crypto: fix bugs in ext4_encrypted_zeroout()
      ext4 crypto: replace some BUG_ON()'s with error checks
      ...

commits)
      USB: core: Codestyle fix in urb.c
      usb: misc: usb3503: Use i2c_add_driver helper macro
      usb: host: lpc32xx: don't unregister phy device
      usb: host: lpc32xx: balance clk enable/disable on removal
      usb: host: lpc32xx: fix warnings caused by enabling unprepared clock
      uwb: drp: Use setup_timer
      uwb: neh: Use setup_timer
      uwb: rsv: Use setup_timer
      USB: qcserial: add Sierra Wireless MC74xx/EM74xx
      usb: chipidea: otg: don't wait vbus drops below BSV when starts host
      chipidea: ci_hdrc_pci: use PCI_VDEVICE() instead of PCI_DEVICE()
      doc: dt-binding: ci-hdrc-usb2: split vendor specific properties
      usb: chipidea: imx: add imx6ul usb support
      doc: dt-binding: ci-hdrc-usb2: improve property description
      usb: chipidea: imx: add usb support for imx7d
      Doc: usb: ci-hdrc-usb2: Add phy-clkgate-delay-us entry
      usb: chipidea: Add support for 'phy-clkgate-delay-us' property
      usb: chipidea: Use extcon framework for VBUS and ID detect
      usb: gadget: net2280: restore ep_cfg after defect7374 workaround
      usb: dwc2: host: Fix use after free w/ simultaneous irqs
      ...

commit a51e8551e298841f26ccf02193caf2b69da2434c
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed Nov 4 18:55:12 2015 +0100

    greybus: es2: fix use-after-free at disconnect
    
    The interface private data is released as part of host-device removal
    and must not be accessed afterwards.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 07bc588fc1087929e8e6dfe95ffcee1cb69a240f
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Oct 30 17:46:19 2015 +0100

    bridge: vlan: Prevent possible use-after-free
    
    When adding a port to a bridge we initialize VLAN filtering on it. We do
    not bail out in case an error occurred in nbp_vlan_init, as it can be
    used as a non VLAN filtering bridge.
    
    However, if VLAN filtering is required and an error occurred in
    nbp_vlan_init, we should set vlgrp to NULL, so that VLAN filtering
    functions (e.g. br_vlan_find, br_get_pvid) will know the struct is
    invalid and will not try to access it.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2849a854224487bc578b73b64422c3cb3ef93ff5
Author: Chris Mason <clm@fb.com>
Date:   Tue Oct 13 14:06:48 2015 -0400

    btrfs: fix use after free iterating extrefs
    
    The code for btrfs inode-resolve has never worked properly for
    files with enough hard links to trigger extrefs.  It was trying to
    get the leaf out of a path after freeing the path:
    
            btrfs_release_path(path);
            leaf = path->nodes[0];
            item_size = btrfs_item_size_nr(leaf, slot);
    
    The fix here is to use the extent buffer we cloned just a little higher
    up to avoid deadlocks caused by using the leaf in the path.
    
    Signed-off-by: Chris Mason <clm@fb.com>
    cc: stable@vger.kernel.org # v3.7+
    cc: Mark Fasheh <mfasheh@suse.de>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Mark Fasheh <mfasheh@suse.de>
    Signed-off-by: Chris Mason <clm@fb.com>

commit 23695e41a1cac017edad2b38607f33678a31b877
Author: Junichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Tue Oct 6 04:32:57 2015 +0000

    scsi_dh: fix use-after-free when removing scsi device
    
    The commit 1bab0de0274f ("dm-mpath, scsi_dh: don't let dm detach device
    handlers") removed reference counting of attached scsi device handler.
    As a result, handler data is freed immediately via scsi_dh->detach()
    in the context of scsi_remove_device() where activation request can be
    still in flight.
    
    This patch moves scsi_dh_handler_detach() to sdev releasing function,
    scsi_device_dev_release_usercontext(), at that point the device
    is already in quiesced state.
    
    Fixes: 1bab0de0274f ("dm-mpath, scsi_dh: don't let dm detach device handlers")
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Acked-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: James Bottomley <JBottomley@Odin.com>

commit 16cd787d2d54a47b1d8575bb96bff4b0edc7000b
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed Oct 21 11:51:42 2015 +0200

    greybus: endo: fix use-after-free in error path
    
    Fix use-after-free in endo-registration error path by moving the
    id-release to the device release function.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 0ca81a2840f77855bbad1b9f172c545c4dc9e6a4
Author: Doron Tsur <doront@mellanox.com>
Date:   Sun Oct 11 15:58:17 2015 +0300

    IB/cm: Fix rb-tree duplicate free and use-after-free
    
    ib_send_cm_sidr_rep could sometimes erase the node from the sidr
    (depending on errors in the process). Since ib_send_cm_sidr_rep is
    called both from cm_sidr_req_handler and cm_destroy_id, cm_id_priv
    could be either erased from the rb_tree twice or not erased at all.
    Fixing that by making sure it's erased only once before freeing
    cm_id_priv.
    
    Fixes: a977049dacde ('[PATCH] IB: Add the kernel CM implementation')
    Signed-off-by: Doron Tsur <doront@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit 3909642034ffd7a8906ff3f2b2a71455bf39e7f6
Author: Matan Barak <matanb@mellanox.com>
Date:   Thu Oct 15 15:01:03 2015 +0300

    IB/core: Fix use after free of ifa
    
    When using ifup/ifdown while executing enum_netdev_ipv4_ips,
    ifa could become invalid and cause use after free error.
    Fixing it by protecting with RCU lock.
    
    Fixes: 03db3a2d81e6 ('IB/core: Add RoCE GID table management')
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit dc8730846948e517169f630826cd2c97615f5ee8
Author: Doug Anderson <dianders@chromium.org>
Date:   Fri Oct 16 16:01:32 2015 -0700

    usb: dwc2: host: Fix use after free w/ simultaneous irqs
    
    While plugging / unplugging on a DWC2 host port with "slub_debug=FZPUA"
    enabled, I found a crash that was quite obviously a use after free.
    
    It appears that in some cases when we handle the various sub-cases of
    HCINT we may end up freeing the QTD.  If there is more than one bit set
    in HCINT we may then end up continuing to use the QTD, which is bad.
    Let's be paranoid and check for this after each sub-case.  This should
    be safe since we officially have the "hsotg->lock" (it was grabbed in
    dwc2_handle_hcd_intr).
    
    The specific crash I found was:
     Unable to handle kernel paging request at virtual address 6b6b6b9f
    
    At the time of the crash, the kernel reported:
     (dwc2_hc_nak_intr+0x5c/0x198)
     (dwc2_handle_hcd_intr+0xa84/0xbf8)
     (_dwc2_hcd_irq+0x1c/0x20)
     (usb_hcd_irq+0x34/0x48)
    
    Popping into kgdb found that "*qtd" was filled with "0x6b", AKA qtd had
    been freed and filled with slub_debug poison.
    
    kgdb gave a little better stack crawl:
     0 dwc2_hc_nak_intr (hsotg=hsotg@entry=0xec42e058,
         chan=chan@entry=0xec546dc0, chnum=chnum@entry=4,
         qtd=qtd@entry=0xec679600) at drivers/usb/dwc2/hcd_intr.c:1237
     1 dwc2_hc_n_intr (chnum=4, hsotg=0xec42e058) at
         drivers/usb/dwc2/hcd_intr.c:2041
     2 dwc2_hc_intr (hsotg=0xec42e058) at drivers/usb/dwc2/hcd_intr.c:2078
     3 dwc2_handle_hcd_intr (hsotg=0xec42e058) at
         drivers/usb/dwc2/hcd_intr.c:2128
     4 _dwc2_hcd_irq (hcd=<optimized out>) at drivers/usb/dwc2/hcd.c:2837
     5 usb_hcd_irq (irq=<optimized out>, __hcd=<optimized out>) at
         drivers/usb/core/hcd.c:2353
    
    Popping up to frame #1 (dwc2_hc_n_intr) found:
     (gdb) print /x hcint
     $12 = 0x12
    
    AKA:
     #define HCINTMSK_CHHLTD  (1 << 1)
     #define HCINTMSK_NAK     (1 << 4)
    
    Further debugging found that by simulating receiving those two
    interrupts at the same time it was trivial to replicate the
    use-after-free.  See <http://crosreview.com/305712> for a patch and
    instructions.  This lead to getting the following stack crawl of the
    actual free:
     0  arch_kgdb_breakpoint () at arch/arm/include/asm/outercache.h:103
     1  kgdb_breakpoint () at kernel/debug/debug_core.c:1054
     2  dwc2_hcd_qtd_unlink_and_free (hsotg=<optimized out>, qh=<optimized
          out>, qtd=0xe4479a00) at drivers/usb/dwc2/hcd.h:488
     3  dwc2_deactivate_qh (free_qtd=<optimized out>, qh=0xe5efa280,
          hsotg=0xed424618) at drivers/usb/dwc2/hcd_intr.c:671
     4  dwc2_release_channel (hsotg=hsotg@entry=0xed424618,
          chan=chan@entry=0xed5be000, qtd=<optimized out>,
          halt_status=<optimized out>) at drivers/usb/dwc2/hcd_intr.c:742
     5  dwc2_halt_channel (hsotg=0xed424618, chan=0xed5be000, qtd=<optimized
          out>, halt_status=<optimized out>) at
          drivers/usb/dwc2/hcd_intr.c:804
     6  dwc2_complete_non_periodic_xfer (chnum=<optimized out>,
          halt_status=<optimized out>, qtd=<optimized out>, chan=<optimized
          out>, hsotg=<optimized out>) at drivers/usb/dwc2/hcd_intr.c:889
     7  dwc2_hc_xfercomp_intr (hsotg=hsotg@entry=0xed424618,
          chan=chan@entry=0xed5be000, chnum=chnum@entry=6,
          qtd=qtd@entry=0xe4479a00) at drivers/usb/dwc2/hcd_intr.c:1065
     8  dwc2_hc_chhltd_intr_dma (qtd=0xe4479a00, chnum=6, chan=0xed5be000,
          hsotg=0xed424618) at drivers/usb/dwc2/hcd_intr.c:1823
     9  dwc2_hc_chhltd_intr (qtd=0xe4479a00, chnum=6, chan=0xed5be000,
          hsotg=0xed424618) at drivers/usb/dwc2/hcd_intr.c:1944
     10 dwc2_hc_n_intr (chnum=6, hsotg=0xed424618) at
          drivers/usb/dwc2/hcd_intr.c:2052
     11 dwc2_hc_intr (hsotg=0xed424618) at drivers/usb/dwc2/hcd_intr.c:2097
     12 dwc2_handle_hcd_intr (hsotg=0xed424618) at
          drivers/usb/dwc2/hcd_intr.c:2147
     13 _dwc2_hcd_irq (hcd=<optimized out>) at drivers/usb/dwc2/hcd.c:2837
     14 usb_hcd_irq (irq=<optimized out>, __hcd=<optimized out>) at
          drivers/usb/core/hcd.c:2353
    
    Though we could add specific code to handle this case, adding the
    general purpose code to check for all cases where qtd might be freed
    seemed safer.
    
    Acked-by: John Youn <johnyoun@synopsys.com>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 6934da9238da947628be83635e365df41064b09b
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Sat Oct 17 22:57:06 2015 -0400

    ext4: fix potential use after free in __ext4_journal_stop
    
    There is a use-after-free possibility in __ext4_journal_stop() in the
    case that we free the handle in the first jbd2_journal_stop() because
    we're referencing handle->h_err afterwards. This was introduced in
    9705acd63b125dee8b15c705216d7186daea4625 and it is wrong. Fix it by
    storing the handle->h_err value beforehand and avoid referencing
    potentially freed handle.
    
    Fixes: 9705acd63b125dee8b15c705216d7186daea4625
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Cc: stable@vger.kernel.org

commit fixes a bug we hit last week at FB, a combination of lots of
      hard links and an admin command to resolve inode numbers.
    
      Dave is adding checks to make sure balance on current kernels ignores
      filters it doesn't understand.  The penalty for being wrong is just
      doing more work (not crashing etc), but it's a good fix"
    
    * 'for-linus-4.3' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:
      btrfs: fix use after free iterating extrefs
      btrfs: check unsupported filters in balance arguments

commit f42d79ab67322e51b92dd7aa965e310c71352a64
Author: Junichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Wed Oct 14 05:02:15 2015 +0000

    blk-mq: fix use-after-free in blk_mq_free_tag_set()
    
    tags is freed in blk_mq_free_rq_map() and should not be used after that.
    The problem doesn't manifest if CONFIG_CPUMASK_OFFSTACK is false because
    free_cpumask_var() is nop.
    
    tags->cpumask is allocated in blk_mq_init_tags() so it's natural to
    free cpumask in its counter part, blk_mq_free_tags().
    
    Fixes: f26cdc8536ad ("blk-mq: Shared tag enhancements")
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Cc: Keith Busch <keith.busch@intel.com>
    Reviewed-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit a6ef15652d260f754ead223d0c55434a3a39fe1d
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Mon Sep 7 19:51:39 2015 +0200

    s390/cio: fix use after free in cmb processing
    
    Devices with active channel measurement are included in a list. When a
    device is removed without deactivating channel measurement first the
    list_head is freed but still used. Fix this by making sure that
    channel measurement is deactivated during device deregistration.
    
    For devices that we deregister because they are no longer accessible
    deactivating channel measurement will fail. In this case we can report
    success because the FW will no longer access the measurement block.
    
    In addition to these steps keep an extra device reference while
    channel measurement is active.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit dc6c5fb3b514221f2e9d21ee626a9d95d3418dff
Author: Chris Mason <clm@fb.com>
Date:   Tue Oct 13 14:06:48 2015 -0400

    btrfs: fix use after free iterating extrefs
    
    The code for btrfs inode-resolve has never worked properly for
    files with enough hard links to trigger extrefs.  It was trying to
    get the leaf out of a path after freeing the path:
    
            btrfs_release_path(path);
            leaf = path->nodes[0];
            item_size = btrfs_item_size_nr(leaf, slot);
    
    The fix here is to use the extent buffer we cloned just a little higher
    up to avoid deadlocks caused by using the leaf in the path.
    
    Signed-off-by: Chris Mason <clm@fb.com>
    cc: stable@vger.kernel.org # v3.7+
    cc: Mark Fasheh <mfasheh@suse.de>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Mark Fasheh <mfasheh@suse.de>

commit 514ed62ed3f6846325d9bfb15cb5c3540547f13b
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Oct 8 23:38:07 2015 +0200

    netfilter: sync with packet rx also after removing queue entries
    
    We need to sync packet rx again after flushing the queue entries.
    Otherwise, the following race could happen:
    
    cpu1: nf_unregister_hook(H) called, H unliked from lists, calls
    synchronize_net() to wait for packet rx completion.
    
    Problem is that while no new nf_queue_entry structs that use H can be
    allocated, another CPU might receive a verdict from userspace just before
    cpu1 calls nf_queue_nf_hook_drop to remove this entry:
    
    cpu2: receive verdict from userspace, lock queue
    cpu2: unlink nf_queue_entry struct E, which references H, from queue list
    cpu1: calls nf_queue_nf_hook_drop, blocks on queue spinlock
    cpu2: unlock queue
    cpu1: nf_queue_nf_hook_drop drops affected queue entries
    cpu2: call nf_reinject for E
    cpu1: kfree(H)
    cpu2: potential use-after-free for H
    
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Fixes: 085db2c04557 ("netfilter: Per network namespace netfilter hooks.")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 95913d97914f44db2b81271c2e2ebd4d2ac2df83
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Sep 29 14:45:09 2015 +0200

    sched/core: Fix TASK_DEAD race in finish_task_switch()
    
    So the problem this patch is trying to address is as follows:
    
            CPU0                            CPU1
    
            context_switch(A, B)
                                            ttwu(A)
                                              LOCK A->pi_lock
                                              A->on_cpu == 0
            finish_task_switch(A)
              prev_state = A->state  <-.
              WMB                      |
              A->on_cpu = 0;           |
              UNLOCK rq0->lock         |
                                       |    context_switch(C, A)
                                       `--  A->state = TASK_DEAD
              prev_state == TASK_DEAD
                put_task_struct(A)
                                            context_switch(A, C)
                                            finish_task_switch(A)
                                              A->state == TASK_DEAD
                                                put_task_struct(A)
    
    The argument being that the WMB will allow the load of A->state on CPU0
    to cross over and observe CPU1's store of A->state, which will then
    result in a double-drop and use-after-free.
    
    Now the comment states (and this was true once upon a long time ago)
    that we need to observe A->state while holding rq->lock because that
    will order us against the wakeup; however the wakeup will not in fact
    acquire (that) rq->lock; it takes A->pi_lock these days.
    
    We can obviously fix this by upgrading the WMB to an MB, but that is
    expensive, so we'd rather avoid that.
    
    The alternative this patch takes is: smp_store_release(&A->on_cpu, 0),
    which avoids the MB on some archs, but not important ones like ARM.
    
    Reported-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org> # v3.1+
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-kernel@vger.kernel.org
    Cc: manfred@colorfullife.com
    Cc: will.deacon@arm.com
    Fixes: e4a52bcb9a18 ("sched: Remove rq->lock from the first half of ttwu()")
    Link: http://lkml.kernel.org/r/20150929124509.GG3816@twins.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 44583fecfd85f33878a90ca9cad2eb533bfc39a1
Author: Yunzhi Li <lyz@rock-chips.com>
Date:   Tue Sep 29 12:25:01 2015 +0200

    usb: dwc2: gadget: fix a memory use-after-free bug
    
    When dwc2_hsotg_handle_unaligned_buf_complete() hs_req->req.buf
    already destroyed, in dwc2_hsotg_unmap_dma(), it touches
    hs_req->req.dma again, so dwc2_hsotg_unmap_dma() should be called
    before dwc2_hsotg_handle_unaligned_buf_complete(). Otherwise, it
    will cause a bad_page BUG, when allocate this memory page next
    time.
    
    This bug led to the following crash:
    
    BUG: Bad page state in process swapper/0  pfn:2bdbc
    [   26.820440] page:eed76780 count:0 mapcount:0 mapping:  (null) index:0x0
    [   26.854710] page flags: 0x200(arch_1)
    [   26.885836] page dumped because: PAGE_FLAGS_CHECK_AT_PREP flag set
    [   26.919179] bad because of flags:
    [   26.948917] page flags: 0x200(arch_1)
    [   26.979100] Modules linked in:
    [   27.008401] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G W3.14.0 #17
    [   27.041816] [<c010e1f8>] (unwind_backtrace) from [<c010a704>] (show_stack+0x20/0x24)
    [   27.076108] [<c010a704>] (show_stack) from [<c087eea8>] (dump_stack+0x70/0x8c)
    [   27.110246] [<c087eea8>] (dump_stack) from [<c01ce0b8>] (bad_page+0xfc/0x12c)
    [   27.143958] [<c01ce0b8>] (bad_page) from [<c01ce65c>] (get_page_from_freelist+0x3e4/0x50c)
    [   27.179298] [<c01ce65c>] (get_page_from_freelist) from [<c01ce9a0>] (__alloc_pages_nodemask)
    [   27.216296] [<c01ce9a0>] (__alloc_pages_nodemask) from [<c01cf00c>] (__get_free_pages+0x20/)
    [   27.252326] [<c01cf00c>] (__get_free_pages) from [<c01e5bec>] (kmalloc_order_trace+0x34/0xa)
    [   27.288295] [<c01e5bec>] (kmalloc_order_trace) from [<c0203304>] (__kmalloc+0x40/0x1ac)
    [   27.323751] [<c0203304>] (__kmalloc) from [<c052abc0>] (dwc2_hsotg_ep_queue.isra.12+0x7c/0x1)
    [   27.359937] [<c052abc0>] (dwc2_hsotg_ep_queue.isra.12) from [<c052af88>] (dwc2_hsotg_ep_queue)
    [   27.397478] [<c052af88>] (dwc2_hsotg_ep_queue_lock) from [<c0554110>] (rx_submit+0xfc/0x164)
    [   27.433619] [<c0554110>] (rx_submit) from [<c05546e8>] (rx_complete+0x22c/0x230)
    [   27.468872] [<c05546e8>] (rx_complete) from [<c052b528>] (dwc2_hsotg_complete_request+0xfc/0)
    [   27.506240] [<c052b528>] (dwc2_hsotg_complete_request) from [<c052bba0>] (dwc2_hsotg_handle_o)
    [   27.545401] [<c052bba0>] (dwc2_hsotg_handle_outdone) from [<c052be70>] (dwc2_hsotg_epint+0x2c)
    [   27.583689] [<c052be70>] (dwc2_hsotg_epint) from [<c052c750>] (dwc2_hsotg_irq+0x1dc/0x4ac)
    [   27.621041] [<c052c750>] (dwc2_hsotg_irq) from [<c01682e0>] (handle_irq_event_percpu+0x70/0x)
    [   27.659066] [<c01682e0>] (handle_irq_event_percpu) from [<c01684ec>] (handle_irq_event+0x4c)
    [   27.697322] [<c01684ec>] (handle_irq_event) from [<c016bae0>] (handle_fasteoi_irq+0xc8/0x11)
    [   27.735451] [<c016bae0>] (handle_fasteoi_irq) from [<c0167b8c>] (generic_handle_irq+0x30/0x)
    [   27.773918] [<c0167b8c>] (generic_handle_irq) from [<c0167ca4>] (__handle_domain_irq+0x84/0)
    [   27.812018] [<c0167ca4>] (__handle_domain_irq) from [<c01003b0>] (gic_handle_irq+0x48/0x6c)
    [   27.849695] [<c01003b0>] (gic_handle_irq) from [<c010b340>] (__irq_svc+0x40/0x50)
    [   27.886907] Exception stack(0xc0d01ee0 to 0xc0d01f28)
    
    Acked-by: John Youn <johnyoun@synopsys.com>
    Tested-by: Heiko Stuebner <heiko@sntech.de>
    Tested-by: Jeffy Chen <jeffy.chen@rock-chips.com>
    Signed-off-by: Yunzhi Li <lyz@rock-chips.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 58c85123d9a1801af2558a0c925d90fe1599c27f
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Sat Sep 26 14:37:59 2015 -0700

    greybus: es1/2: fix use-after-free in completion callback
    
    Reset the hcpriv field before returning the message to greybus core in
    the OUT-URB completion callback.
    
    This fixes a use-after-free bug when sending responses to incoming
    requests as the final reference is then dropped when the message is
    returned.
    
    Reported-by: Michael Scott <michael.scott@linaro.org>
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 3aaf14da807a4e9931a37f21e4251abb8a67021b
Author: Luis Henriques <luis.henriques@canonical.com>
Date:   Thu Sep 17 16:01:40 2015 -0700

    zram: fix possible use after free in zcomp_create()
    
    zcomp_create() verifies the success of zcomp_strm_{multi,single}_create()
    through comp->stream, which can potentially be pointing to memory that
    was freed if these functions returned an error.
    
    While at it, replace a 'ERR_PTR(-ENOMEM)' by a more generic
    'ERR_PTR(error)' as in the future zcomp_strm_{multi,siggle}_create()
    could return other error codes.  Function documentation updated
    accordingly.
    
    Fixes: beca3ec71fe5 ("zram: add multi stream functionality")
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bd3792205aaeb79b994338af2e5499fa503d79c7
Author: Jenny Derzhavetz <jennyf@mellanox.com>
Date:   Sun Sep 6 14:52:24 2015 +0300

    iser-target: Fix pending connections handling in target stack shutdown sequnce
    
    Instead of handing a connection to the iscsi stack
    for processing right after accepting (rdma_accept) we only hand
    the connection to the iscsi core after we reached to a connected
    state (ESTABLISHED CM event). This will prevent two error scenrios:
    
    1. race between rdma connection teardown and iscsi login sequence
       reported by Nic in: (ce9a9fc20a78a "iser-target: Fix REJECT CM event
       use-after-free OOPs")
    
    2. target stack shutdown sequence race with constant login attempts by
       multiple initiators.
    
    We address this by maintaining two queues at the isert_np level:
    - accepted: connections that were accepted but have not reached
      connected state (might get rejected, unreachable or error).
    - pending: connections in connected state, but have yet to handed
      to the iscsi core for login processing. iser connections are promoted
      to the pending queue only from the accepted queue.
    
    This way the iscsi core now will only handle functional iser connections
    and once we shutdown the target stack, we look for any stales that
    got left behind so we can safely release them.
    
    Signed-off-by: Jenny Derzhavetz <jennyf@mellanox.com>
    Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
    Cc: <stable@vger.kernel.org> # v3.10+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit b9154df5cfd2d4cc180f425f0b26e095ce1ffdbc
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Mon Sep 14 20:19:04 2015 +0200

    greybus: sdio: fix work-queue leak and use-after-free
    
    A single global work-queue pointer was used for the per-connection
    workqueue, something which would lead to memory leaks and all sorts of
    bad things if there are ever more than one SDIO connection in a system.
    
    Also add the missing error handling when allocating the queue.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit e5265266ec6360702feb6ff69d1aec9e318ae1f6
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Mon Sep 14 20:19:03 2015 +0200

    greybus: sdio: fix tear-down use-after-free
    
    The mmc-driver private data must not be accessed after mmc_free_host()
    has released it.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commits)
      scsi_dh: fix randconfig build error
      scsi: fix scsi_error_handler vs. scsi_host_dev_release race
      fcoe: Convert use of __constant_htons to htons
      mpt2sas: setpci reset kernel oops fix
      pm80xx: Don't override ts->stat on IO_OPEN_CNX_ERROR_HW_RESOURCE_BUSY
      lpfc: Fix possible use-after-free and double free in lpfc_mbx_cmpl_rdp_page_a2()
      bfa: Fix incorrect de-reference of pointer
      bfa: Fix indentation
      scsi_transport_sas: Remove check for SAS expander when querying bay/enclosure IDs.
      scsi_debug: resp_request: remove unused variable
      scsi_debug: fix REPORT LUNS Well Known LU
      scsi_debug: schedule_resp fix input variable check
      scsi_debug: make dump_sector static
      scsi_debug: vfree is null safe so drop the check
      scsi_debug: use SCSI_W_LUN_REPORT_LUNS instead of SAM2_WLUN_REPORT_LUNS;
      scsi_debug: define pr_fmt() for consistent logging
      mpt2sas: Refcount fw_events and fix unsafe list usage
      mpt2sas: Refcount sas_device objects and fix unsafe list usage
      scsi_dh: return SCSI_DH_NOTCONN in scsi_dh_activate()
      scsi_dh: don't allow to detach device handlers at runtime
      ...

commit 6fe810bda0bd9a5d7674fc671fac27b8aa8ec243
Author: Tejun Heo <tj@kernel.org>
Date:   Sat Sep 5 15:47:36 2015 -0400

    block: blkg_destroy_all() should clear q->root_blkg and ->root_rl.blkg
    
    While making the root blkg unconditional, ec13b1d6f0a0 ("blkcg: always
    create the blkcg_gq for the root blkcg") removed the part which clears
    q->root_blkg and ->root_rl.blkg during q exit.  This leaves the two
    pointers dangling after blkg_destroy_all().  blk-throttle exit path
    performs blkg traversals and dereferences ->root_blkg and can lead to
    the following oops.
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000558
     IP: [<ffffffff81389746>] __blkg_lookup+0x26/0x70
     ...
     task: ffff88001b4e2580 ti: ffff88001ac0c000 task.ti: ffff88001ac0c000
     RIP: 0010:[<ffffffff81389746>]  [<ffffffff81389746>] __blkg_lookup+0x26/0x70
     ...
     Call Trace:
      [<ffffffff8138d14a>] blk_throtl_drain+0x5a/0x110
      [<ffffffff8138a108>] blkcg_drain_queue+0x18/0x20
      [<ffffffff81369a70>] __blk_drain_queue+0xc0/0x170
      [<ffffffff8136a101>] blk_queue_bypass_start+0x61/0x80
      [<ffffffff81388c59>] blkcg_deactivate_policy+0x39/0x100
      [<ffffffff8138d328>] blk_throtl_exit+0x38/0x50
      [<ffffffff8138a14e>] blkcg_exit_queue+0x3e/0x50
      [<ffffffff8137016e>] blk_release_queue+0x1e/0xc0
     ...
    
    While the bug is a straigh-forward use-after-free bug, it is tricky to
    reproduce because blkg release is RCU protected and the rest of exit
    path usually finishes before RCU grace period.
    
    This patch fixes the bug by updating blkg_destro_all() to clear
    q->root_blkg and ->root_rl.blkg.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: "Richard W.M. Jones" <rjones@redhat.com>
    Reported-by: Josh Boyer <jwboyer@fedoraproject.org>
    Link: http://lkml.kernel.org/g/CA+5PVA5rzQ0s4723n5rHBcxQa9t0cW8BPPBekr_9aMRoWt2aYg@mail.gmail.com
    Fixes: ec13b1d6f0a0 ("blkcg: always create the blkcg_gq for the root blkcg")
    Cc: stable@vger.kernel.org # v4.2+
    Tested-by: Richard W.M. Jones <rjones@redhat.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 7cb74be6fd827e314f81df3c5889b87e4c87c569
Author: Hin-Tak Leung <htl10@users.sourceforge.net>
Date:   Wed Sep 9 15:38:04 2015 -0700

    hfs,hfsplus: cache pages correctly between bnode_create and bnode_free
    
    Pages looked up by __hfs_bnode_create() (called by hfs_bnode_create() and
    hfs_bnode_find() for finding or creating pages corresponding to an inode)
    are immediately kmap()'ed and used (both read and write) and kunmap()'ed,
    and should not be page_cache_release()'ed until hfs_bnode_free().
    
    This patch fixes a problem I first saw in July 2012: merely running "du"
    on a large hfsplus-mounted directory a few times on a reasonably loaded
    system would get the hfsplus driver all confused and complaining about
    B-tree inconsistencies, and generates a "BUG: Bad page state".  Most
    recently, I can generate this problem on up-to-date Fedora 22 with shipped
    kernel 4.0.5, by running "du /" (="/" + "/home" + "/mnt" + other smaller
    mounts) and "du /mnt" simultaneously on two windows, where /mnt is a
    lightly-used QEMU VM image of the full Mac OS X 10.9:
    
    $ df -i / /home /mnt
    Filesystem                  Inodes   IUsed      IFree IUse% Mounted on
    /dev/mapper/fedora-root    3276800  551665    2725135   17% /
    /dev/mapper/fedora-home   52879360  716221   52163139    2% /home
    /dev/nbd0p2             4294967295 1387818 4293579477    1% /mnt
    
    After applying the patch, I was able to run "du /" (60+ times) and "du
    /mnt" (150+ times) continuously and simultaneously for 6+ hours.
    
    There are many reports of the hfsplus driver getting confused under load
    and generating "BUG: Bad page state" or other similar issues over the
    years.  [1]
    
    The unpatched code [2] has always been wrong since it entered the kernel
    tree.  The only reason why it gets away with it is that the
    kmap/memcpy/kunmap follow very quickly after the page_cache_release() so
    the kernel has not had a chance to reuse the memory for something else,
    most of the time.
    
    The current RW driver appears to have followed the design and development
    of the earlier read-only hfsplus driver [3], where-by version 0.1 (Dec
    2001) had a B-tree node-centric approach to
    read_cache_page()/page_cache_release() per bnode_get()/bnode_put(),
    migrating towards version 0.2 (June 2002) of caching and releasing pages
    per inode extents.  When the current RW code first entered the kernel [2]
    in 2005, there was an REF_PAGES conditional (and "//" commented out code)
    to switch between B-node centric paging to inode-centric paging.  There
    was a mistake with the direction of one of the REF_PAGES conditionals in
    __hfs_bnode_create().  In a subsequent "remove debug code" commit [4], the
    read_cache_page()/page_cache_release() per bnode_get()/bnode_put() were
    removed, but a page_cache_release() was mistakenly left in (propagating
    the "REF_PAGES <-> !REF_PAGE" mistake), and the commented-out
    page_cache_release() in bnode_release() (which should be spanned by
    !REF_PAGES) was never enabled.
    
    References:
    [1]:
    Michael Fox, Apr 2013
    http://www.spinics.net/lists/linux-fsdevel/msg63807.html
    ("hfsplus volume suddenly inaccessable after 'hfs: recoff %d too large'")
    
    Sasha Levin, Feb 2015
    http://lkml.org/lkml/2015/2/20/85 ("use after free")
    
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/740814
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1027887
    https://bugzilla.kernel.org/show_bug.cgi?id=42342
    https://bugzilla.kernel.org/show_bug.cgi?id=63841
    https://bugzilla.kernel.org/show_bug.cgi?id=78761
    
    [2]:
    http://git.kernel.org/cgit/linux/kernel/git/tglx/history.git/commit/\
    fs/hfs/bnode.c?id=d1081202f1d0ee35ab0beb490da4b65d4bc763db
    commit d1081202f1d0ee35ab0beb490da4b65d4bc763db
    Author: Andrew Morton <akpm@osdl.org>
    Date:   Wed Feb 25 16:17:36 2004 -0800
    
        [PATCH] HFS rewrite
    
    http://git.kernel.org/cgit/linux/kernel/git/tglx/history.git/commit/\
    fs/hfsplus/bnode.c?id=91556682e0bf004d98a529bf829d339abb98bbbd
    
    commit 91556682e0bf004d98a529bf829d339abb98bbbd
    Author: Andrew Morton <akpm@osdl.org>
    Date:   Wed Feb 25 16:17:48 2004 -0800
    
        [PATCH] HFS+ support
    
    [3]:
    http://sourceforge.net/projects/linux-hfsplus/
    
    http://sourceforge.net/projects/linux-hfsplus/files/Linux%202.4.x%20patch/hfsplus%200.1/
    http://sourceforge.net/projects/linux-hfsplus/files/Linux%202.4.x%20patch/hfsplus%200.2/
    
    http://linux-hfsplus.cvs.sourceforge.net/viewvc/linux-hfsplus/linux/\
    fs/hfsplus/bnode.c?r1=1.4&r2=1.5
    
    Date:   Thu Jun 6 09:45:14 2002 +0000
    Use buffer cache instead of page cache in bnode.c. Cache inode extents.
    
    [4]:
    http://git.kernel.org/cgit/linux/kernel/git/\
    stable/linux-stable.git/commit/?id=a5e3985fa014029eb6795664c704953720cc7f7d
    
    commit a5e3985fa014029eb6795664c704953720cc7f7d
    Author: Roman Zippel <zippel@linux-m68k.org>
    Date:   Tue Sep 6 15:18:47 2005 -0700
    
    [PATCH] hfs: remove debug code
    
    Signed-off-by: Hin-Tak Leung <htl10@users.sourceforge.net>
    Signed-off-by: Sergei Antonov <saproj@gmail.com>
    Reviewed-by: Anton Altaparmakov <anton@tuxera.com>
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Vyacheslav Dubeyko <slava@dubeyko.com>
    Cc: Sougata Santra <sougata@tuxera.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 612872cabf5be6f95d43d9a88eef38201ae8005d
Author: Johannes Thumshirn <jthumshirn@suse.de>
Date:   Mon Aug 17 13:03:02 2015 +0200

    lpfc: Fix possible use-after-free and double free in lpfc_mbx_cmpl_rdp_page_a2()
    
    If the bf_get() call in lpfc_mbx_cmpl_rdp_page_a2() does succeeds, execution
    continues normally and mp gets kfree()d.
    
    If the subsequent call to lpfc_sli_issue_mbox() fails execution jumps to the
    error label where lpfc_mbuf_free() is called with mp->virt and mp->phys as
    function arguments. This is the use after free. Following the use after free mp
    gets kfree()d again which is a double free.
    
    Signed-off-by: Johannes Thumshirn <jthumshirn@suse.de>
    Acked-by: James Smart <james.smart@avagotech.com>
    Signed-off-by: James Bottomley <JBottomley@Odin.com>

commit 7fbc67df2cd6d0b72fd5d6d3acaa79ab6f5b0224
Author: Sagi Grimberg <sagig@mellanox.com>
Date:   Mon Aug 24 19:04:51 2015 +0300

    IB/srp: Fix possible protection fault
    
    srp_destroy_qp is designed to indicate we are safe to continue with
    freeing the channel resources by modifying the qp error state,
    posting a dummy wr on the queue-pair and waiting for it to flush.
    This also holds for the channel registration pool as we are unmapping
    the memory region when handling a scsi response. Destroying the
    channel registration pool before we make sure we processed all the
    inflight IO might introduce a use-after-free of the registration pool.
    
    This use-after-free is demonstrated in the stack trace below where
    srp is trying to unmap a used FMR after the fmr_pool was already destroyed.
    
    general protection fault: 0000 [#1] SMP
    RIP: 0010:[<ffffffff8151121b>]  [<ffffffff8151121b>] _raw_spin_lock_irqsave+0x1b/0x50
    Call Trace:
     [<ffffffffa055d88a>] ib_fmr_pool_unmap+0x1a/0xb0 [ib_core]
     [<ffffffffa06c00ed>] srp_unmap_data.isra.28+0x17d/0x250 [ib_srp]
     [<ffffffffa06c01eb>] srp_free_req+0x2b/0x60 [ib_srp]
     [<ffffffffa06c0c94>] srp_recv_completion+0x174/0x580 [ib_srp]
     [<ffffffffa04580fe>] mlx4_eq_int+0x4de/0xe50 [mlx4_core]
     [<ffffffffa0458b00>] mlx4_msi_x_interrupt+0x10/0x20 [mlx4_core]
     [<ffffffff810abc45>] handle_irq_event_percpu+0x35/0x1b0
     [<ffffffff810abdf2>] handle_irq_event+0x32/0x50
     [<ffffffff810ae5cf>] handle_edge_irq+0x6f/0x120
     [<ffffffff8100455a>] handle_irq+0x1a/0x30
     [<ffffffff8151b475>] do_IRQ+0x45/0xb0
     [<ffffffff8151162d>] common_interrupt+0x6d/0x6d
     [<ffffffff813e4d2f>] cpuidle_enter_state+0x4f/0xc0
     [<ffffffff813e4e6c>] cpuidle_idle_call+0xcc/0x210
     [<ffffffff8100b9ea>] arch_cpu_idle+0xa/0x30
     [<ffffffff810ab1e1>] cpu_startup_entry+0xe1/0x270
     [<ffffffff81030b3a>] start_secondary+0x21a/0x2c0
    
    Reported-by: Eliott Kespi <eliottk@mellanox.com>
    Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit but doing a partial pull
      instead, this merge commit thus also obviously is missing the git
      signature from the original tag ]
    
    * tag 'dm-4.3-changes' of git://git.kernel.org/pub/scm/linux/kernel/git/device-mapper/linux-dm:
      dm cache: fix use after freeing migrations
      dm cache: small cleanups related to deferred prison cell cleanup
      dm cache: fix leaking of deferred bio prison cells
      dm raid: document RAID 4/5/6 discard support
      dm stats: report precise_timestamps and histogram in @stats_list output
      dm thin: optimize async discard submission
      dm snapshot: don't invalidate on-disk image on snapshot write overflow
      dm: remove unlikely() before IS_ERR()
      dm: do not override error code returned from dm_get_device()
      dm: test return value for DM_MAPIO_SUBMITTED
      dm verity: remove unused mempool
      dm cache: move wake_waker() from free_migrations() to where it is needed
      dm btree remove: remove unused function get_nr_entries()
      dm btree: remove unused "dm_block_t root" parameter in btree_split_sibling()
      dm cache policy smq: change the mutex to a spinlock

commits)
      blk: Fix bio_io_vec index when checking bvec gaps
      block: Replace SG_GAPS with new queue limits mask
      block: bump BLK_DEF_MAX_SECTORS to 2560
      Revert "block: remove artifical max_hw_sectors cap"
      blk-mq: fix race between timeout and freeing request
      blk-mq: fix buffer overflow when reading sysfs file of 'pending'
      Documentation: update notes in biovecs about arbitrarily sized bios
      block: remove bio_get_nr_vecs()
      fs: use helper bio_add_page() instead of open coding on bi_io_vec
      block: kill merge_bvec_fn() completely
      md/raid5: get rid of bio_fits_rdev()
      md/raid5: split bio for chunk_aligned_read
      block: remove split code in blkdev_issue_{discard,write_same}
      btrfs: remove bio splitting and merge_bvec_fn() calls
      bcache: remove driver private bio splitting code
      block: simplify bio_add_page()
      block: make generic_make_request handle arbitrarily sized bios
      blk-cgroup: Drop unlikely before IS_ERR(_OR_NULL)
      block: don't access bio->bi_error after bio_put()
      block: shrink struct bio down to 2 cache lines again
      ...

commit cc7da0ba9c96699592d0a69d7d146ac6adcc18e7
Author: Joe Thornber <ejt@redhat.com>
Date:   Tue Sep 1 11:38:19 2015 +0100

    dm cache: fix use after freeing migrations
    
    Both free_io_migration() and issue_discard() dereference a migration
    that was just freed.  Fix those by saving off the migrations's cache
    object before freeing the migration.  Also cleanup needless mg->cache
    dereferences now that the cache object is available directly.
    
    Fixes: e44b6a5a3c ("dm cache: move wake_waker() from free_migrations() to where it is needed")
    Signed-off-by: Joe Thornber <ejt@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit 7e967fd0b84a843b2475acc67a5a8df138c5f5c0
Author: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
Date:   Tue Aug 4 17:13:32 2015 -0600

    IB/ucma: Fix theoretical user triggered use-after-free
    
    Something like this:
    
    CPU A                         CPU B
    Acked-by: Sean Hefty <sean.hefty@intel.com>
    
    ========================      ================================
    ucma_destroy_id()
     wait_for_completion()
                                  .. anything
                                    ucma_put_ctx()
                                      complete()
     .. continues ...
                                  ucma_leave_multicast()
                                   mutex_lock(mut)
                                     atomic_inc(ctx->ref)
                                   mutex_unlock(mut)
     ucma_free_ctx()
      ucma_cleanup_multicast()
       mutex_lock(mut)
         kfree(mc)
                                   rdma_leave_multicast(mc->ctx->cm_id,..
    
    Fix it by latching the ref at 0. Once it goes to 0 mc and ctx cannot
    leave the mutex(mut) protection.
    
    The other atomic_inc in ucma_get_ctx is OK because mutex(mut) protects
    it from racing with ucma_destroy_id.
    
    Signed-off-by: Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
    Acked-by: Sean Hefty <sean.hefty@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit a5e090acbf545c0a3b04080f8a488b17ec41fe02
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Wed Aug 19 20:40:41 2015 +0100

    ARM: software-based priviledged-no-access support
    
    Provide a software-based implementation of the priviledged no access
    support found in ARMv8.1.
    
    Userspace pages are mapped using a different domain number from the
    kernel and IO mappings.  If we switch the user domain to "no access"
    when we enter the kernel, we can prevent the kernel from touching
    userspace.
    
    However, the kernel needs to be able to access userspace via the
    various user accessor functions.  With the wrapping in the previous
    patch, we can temporarily enable access when the kernel needs user
    access, and re-disable it afterwards.
    
    This allows us to trap non-intended accesses to userspace, eg, caused
    by an inadvertent dereference of the LIST_POISON* values, which, with
    appropriate user mappings setup, can be made to succeed.  This in turn
    can allow use-after-free bugs to be further exploited than would
    otherwise be possible.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit e252b3d1a1744af1431aca30e091420734c2b012
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Aug 25 10:38:53 2015 -0700

    route: fix a use-after-free
    
    This patch fixes the following crash:
    
     general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC
     CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.2.0-rc7+ #166
     Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
     task: ffff88010656d280 ti: ffff880106570000 task.ti: ffff880106570000
     RIP: 0010:[<ffffffff8182f91b>]  [<ffffffff8182f91b>] dst_destroy+0xa6/0xef
     RSP: 0018:ffff880107603e38  EFLAGS: 00010202
     RAX: 0000000000000001 RBX: ffff8800d225a000 RCX: ffffffff82250fd0
     RDX: 0000000000000001 RSI: ffffffff82250fd0 RDI: 6b6b6b6b6b6b6b6b
     RBP: ffff880107603e58 R08: 0000000000000001 R09: 0000000000000001
     R10: 000000000000b530 R11: ffff880107609000 R12: 0000000000000000
     R13: ffffffff82343c40 R14: 0000000000000000 R15: ffffffff8182fb4f
     FS:  0000000000000000(0000) GS:ffff880107600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
     CR2: 00007fcabd9d3000 CR3: 00000000d7279000 CR4: 00000000000006e0
     Stack:
      ffffffff82250fd0 ffff8801077d6f00 ffffffff82253c40 ffff8800d225a000
      ffff880107603e68 ffffffff8182fb5d ffff880107603f08 ffffffff810d795e
      ffffffff810d7648 ffff880106574000 ffff88010656d280 ffff88010656d280
     Call Trace:
      <IRQ>
      [<ffffffff8182fb5d>] dst_destroy_rcu+0xe/0x1d
      [<ffffffff810d795e>] rcu_process_callbacks+0x618/0x7eb
      [<ffffffff810d7648>] ? rcu_process_callbacks+0x302/0x7eb
      [<ffffffff8182fb4f>] ? dst_gc_task+0x1eb/0x1eb
      [<ffffffff8107e11b>] __do_softirq+0x178/0x39f
      [<ffffffff8107e52e>] irq_exit+0x41/0x95
      [<ffffffff81a4f215>] smp_apic_timer_interrupt+0x34/0x40
      [<ffffffff81a4d5cd>] apic_timer_interrupt+0x6d/0x80
      <EOI>
      [<ffffffff8100b968>] ? default_idle+0x21/0x32
      [<ffffffff8100b966>] ? default_idle+0x1f/0x32
      [<ffffffff8100bf19>] arch_cpu_idle+0xf/0x11
      [<ffffffff810b0bc7>] default_idle_call+0x1f/0x21
      [<ffffffff810b0dce>] cpu_startup_entry+0x1ad/0x273
      [<ffffffff8102fe67>] start_secondary+0x135/0x156
    
    dst is freed right before lwtstate_put(), this is not correct...
    
    Fixes: 61adedf3e3f1 ("route: move lwtunnel state to dst_entry")
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Cong Wang <cwang@twopensource.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5fb4e288a025af1abc5c67ecebf30fbf6b3edad1
Author: Christopher Oo <t-chriso@microsoft.com>
Date:   Thu Jun 25 16:10:48 2015 -0700

    cifs: Fix use-after-free on mid_q_entry
    
    With CIFS_DEBUG_2 enabled, additional debug information is tracked inside each
    mid_q_entry struct, however cifs_save_when_sent may use the mid_q_entry after it
    has been freed from the appropriate callback if the transport layer has very low
    latency. Holding the srv_mutex fixes this use-after-free, as cifs_save_when_sent
    is called while the srv_mutex is held while the request is sent.
    
    Signed-off-by: Christopher Oo <t-chriso@microsoft.com>

commit 602b8593d2b4138c10e922eeaafe306f6b51817b
Author: Herton R. Krzesinski <herton@redhat.com>
Date:   Fri Aug 14 15:35:02 2015 -0700

    ipc,sem: fix use after free on IPC_RMID after a task using same semaphore set exits
    
    The current semaphore code allows a potential use after free: in
    exit_sem we may free the task's sem_undo_list while there is still
    another task looping through the same semaphore set and cleaning the
    sem_undo list at freeary function (the task called IPC_RMID for the same
    semaphore set).
    
    For example, with a test program [1] running which keeps forking a lot
    of processes (which then do a semop call with SEM_UNDO flag), and with
    the parent right after removing the semaphore set with IPC_RMID, and a
    kernel built with CONFIG_SLAB, CONFIG_SLAB_DEBUG and
    CONFIG_DEBUG_SPINLOCK, you can easily see something like the following
    in the kernel log:
    
       Slab corruption (Not tainted): kmalloc-64 start=ffff88003b45c1c0, len=64
       000: 6b 6b 6b 6b 6b 6b 6b 6b 00 6b 6b 6b 6b 6b 6b 6b  kkkkkkkk.kkkkkkk
       010: ff ff ff ff 6b 6b 6b 6b ff ff ff ff ff ff ff ff  ....kkkk........
       Prev obj: start=ffff88003b45c180, len=64
       000: 00 00 00 00 ad 4e ad de ff ff ff ff 5a 5a 5a 5a  .....N......ZZZZ
       010: ff ff ff ff ff ff ff ff c0 fb 01 37 00 88 ff ff  ...........7....
       Next obj: start=ffff88003b45c200, len=64
       000: 00 00 00 00 ad 4e ad de ff ff ff ff 5a 5a 5a 5a  .....N......ZZZZ
       010: ff ff ff ff ff ff ff ff 68 29 a7 3c 00 88 ff ff  ........h).<....
       BUG: spinlock wrong CPU on CPU#2, test/18028
       general protection fault: 0000 [#1] SMP
       Modules linked in: 8021q mrp garp stp llc nf_conntrack_ipv4 nf_defrag_ipv4 ip6t_REJECT nf_reject_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables binfmt_misc ppdev input_leds joydev parport_pc parport floppy serio_raw virtio_balloon virtio_rng virtio_console virtio_net iosf_mbi crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcspkr qxl ttm drm_kms_helper drm snd_hda_codec_generic i2c_piix4 snd_hda_intel snd_hda_codec snd_hda_core snd_hwdep snd_seq snd_seq_device snd_pcm snd_timer snd soundcore crc32c_intel virtio_pci virtio_ring virtio pata_acpi ata_generic [last unloaded: speedstep_lib]
       CPU: 2 PID: 18028 Comm: test Not tainted 4.2.0-rc5+ #1
       Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.8.1-20150318_183358- 04/01/2014
       RIP: spin_dump+0x53/0xc0
       Call Trace:
         spin_bug+0x30/0x40
         do_raw_spin_unlock+0x71/0xa0
         _raw_spin_unlock+0xe/0x10
         freeary+0x82/0x2a0
         ? _raw_spin_lock+0xe/0x10
         semctl_down.clone.0+0xce/0x160
         ? __do_page_fault+0x19a/0x430
         ? __audit_syscall_entry+0xa8/0x100
         SyS_semctl+0x236/0x2c0
         ? syscall_trace_leave+0xde/0x130
         entry_SYSCALL_64_fastpath+0x12/0x71
       Code: 8b 80 88 03 00 00 48 8d 88 60 05 00 00 48 c7 c7 a0 2c a4 81 31 c0 65 8b 15 eb 40 f3 7e e8 08 31 68 00 4d 85 e4 44 8b 4b 08 74 5e <45> 8b 84 24 88 03 00 00 49 8d 8c 24 60 05 00 00 8b 53 04 48 89
       RIP  [<ffffffff810d6053>] spin_dump+0x53/0xc0
        RSP <ffff88003750fd68>
       ---[ end trace 783ebb76612867a0 ]---
       NMI watchdog: BUG: soft lockup - CPU#3 stuck for 22s! [test:18053]
       Modules linked in: 8021q mrp garp stp llc nf_conntrack_ipv4 nf_defrag_ipv4 ip6t_REJECT nf_reject_ipv6 nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables binfmt_misc ppdev input_leds joydev parport_pc parport floppy serio_raw virtio_balloon virtio_rng virtio_console virtio_net iosf_mbi crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcspkr qxl ttm drm_kms_helper drm snd_hda_codec_generic i2c_piix4 snd_hda_intel snd_hda_codec snd_hda_core snd_hwdep snd_seq snd_seq_device snd_pcm snd_timer snd soundcore crc32c_intel virtio_pci virtio_ring virtio pata_acpi ata_generic [last unloaded: speedstep_lib]
       CPU: 3 PID: 18053 Comm: test Tainted: G      D         4.2.0-rc5+ #1
       Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.8.1-20150318_183358- 04/01/2014
       RIP: native_read_tsc+0x0/0x20
       Call Trace:
         ? delay_tsc+0x40/0x70
         __delay+0xf/0x20
         do_raw_spin_lock+0x96/0x140
         _raw_spin_lock+0xe/0x10
         sem_lock_and_putref+0x11/0x70
         SYSC_semtimedop+0x7bf/0x960
         ? handle_mm_fault+0xbf6/0x1880
         ? dequeue_task_fair+0x79/0x4a0
         ? __do_page_fault+0x19a/0x430
         ? kfree_debugcheck+0x16/0x40
         ? __do_page_fault+0x19a/0x430
         ? __audit_syscall_entry+0xa8/0x100
         ? do_audit_syscall_entry+0x66/0x70
         ? syscall_trace_enter_phase1+0x139/0x160
         SyS_semtimedop+0xe/0x10
         SyS_semop+0x10/0x20
         entry_SYSCALL_64_fastpath+0x12/0x71
       Code: 47 10 83 e8 01 85 c0 89 47 10 75 08 65 48 89 3d 1f 74 ff 7e c9 c3 0f 1f 44 00 00 55 48 89 e5 e8 87 17 04 00 66 90 c9 c3 0f 1f 00 <55> 48 89 e5 0f 31 89 c1 48 89 d0 48 c1 e0 20 89 c9 48 09 c8 c9
       Kernel panic - not syncing: softlockup: hung tasks
    
    I wasn't able to trigger any badness on a recent kernel without the
    proper config debugs enabled, however I have softlockup reports on some
    kernel versions, in the semaphore code, which are similar as above (the
    scenario is seen on some servers running IBM DB2 which uses semaphore
    syscalls).
    
    The patch here fixes the race against freeary, by acquiring or waiting
    on the sem_undo_list lock as necessary (exit_sem can race with freeary,
    while freeary sets un->semid to -1 and removes the same sem_undo from
    list_proc or when it removes the last sem_undo).
    
    After the patch I'm unable to reproduce the problem using the test case
    [1].
    
    [1] Test case used below:
    
        #include <stdio.h>
        #include <sys/types.h>
        #include <sys/ipc.h>
        #include <sys/sem.h>
        #include <sys/wait.h>
        #include <stdlib.h>
        #include <time.h>
        #include <unistd.h>
        #include <errno.h>
    
        #define NSEM 1
        #define NSET 5
    
        int sid[NSET];
    
        void thread()
        {
                struct sembuf op;
                int s;
                uid_t pid = getuid();
    
                s = rand() % NSET;
                op.sem_num = pid % NSEM;
                op.sem_op = 1;
                op.sem_flg = SEM_UNDO;
    
                semop(sid[s], &op, 1);
                exit(EXIT_SUCCESS);
        }
    
        void create_set()
        {
                int i, j;
                pid_t p;
                union {
                        int val;
                        struct semid_ds *buf;
                        unsigned short int *array;
                        struct seminfo *__buf;
                } un;
    
                /* Create and initialize semaphore set */
                for (i = 0; i < NSET; i++) {
                        sid[i] = semget(IPC_PRIVATE , NSEM, 0644 | IPC_CREAT);
                        if (sid[i] < 0) {
                                perror("semget");
                                exit(EXIT_FAILURE);
                        }
                }
                un.val = 0;
                for (i = 0; i < NSET; i++) {
                        for (j = 0; j < NSEM; j++) {
                                if (semctl(sid[i], j, SETVAL, un) < 0)
                                        perror("semctl");
                        }
                }
    
                /* Launch threads that operate on semaphore set */
                for (i = 0; i < NSEM * NSET * NSET; i++) {
                        p = fork();
                        if (p < 0)
                                perror("fork");
                        if (p == 0)
                                thread();
                }
    
                /* Free semaphore set */
                for (i = 0; i < NSET; i++) {
                        if (semctl(sid[i], NSEM, IPC_RMID))
                                perror("IPC_RMID");
                }
    
                /* Wait for forked processes to exit */
                while (wait(NULL)) {
                        if (errno == ECHILD)
                                break;
                };
        }
    
        int main(int argc, char **argv)
        {
                pid_t p;
    
                srand(time(NULL));
    
                while (1) {
                        p = fork();
                        if (p < 0) {
                                perror("fork");
                                exit(EXIT_FAILURE);
                        }
                        if (p == 0) {
                                create_set();
                                goto end;
                        }
    
                        /* Wait for forked processes to exit */
                        while (wait(NULL)) {
                                if (errno == ECHILD)
                                        break;
                        };
                }
        end:
                return 0;
        }
    
    [akpm@linux-foundation.org: use normal comment layout]
    Signed-off-by: Herton R. Krzesinski <herton@redhat.com>
    Acked-by: Manfred Spraul <manfred@colorfullife.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: Rafael Aquini <aquini@redhat.com>
    CC: Aristeu Rozanski <aris@redhat.com>
    Cc: David Jeffery <djeffery@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      cosa: missing error code on failure in probe()
      gianfar: remove faulty filer optimizer
      gianfar: correct list membership accounting
      gianfar: correct filer table writing
      bonding: Gratuitous ARP gets dropped when first slave added
      net: dsa: Do not override PHY interface if already configured
      net: fs_enet: mask interrupts for TX partial frames.
      net: fs_enet: explicitly remove I flag on TX partial frames
      inet: fix possible request socket leak
      inet: fix races with reqsk timers
      mkiss: Fix error handling in mkiss_open()
      bnx2x: Free NVRAM lock at end of each page
      bnx2x: Prevent null pointer dereference on SKB release
      cxgb4: missing curly braces in t4_setup_debugfs()
      net-timestamp: Update skb_complete_tx_timestamp comment
      ipv6: don't reject link-local nexthop on other interface
      netlink: make sure -EBUSY won't escape from netlink_insert
      bna: fix interrupts storm caused by erroneous packets
      net: mvpp2: replace TX coalescing interrupts with hrtimer
      net: mvpp2: enable proper per-CPU TX buffers unmapping
      ...

commit 9b81c842355ac96097ba32ad5632e9ef0ff59f92
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Mon Aug 10 19:05:18 2015 -0400

    block: don't access bio->bi_error after bio_put()
    
    Commit 4246a0b6 ("block: add a bi_error field to struct bio") has added a few
    dereferences of 'bio' after a call to bio_put(). This causes use-after-frees
    such as:
    
    [521120.719695] BUG: KASan: use after free in dio_bio_complete+0x2b3/0x320 at addr ffff880f36b38714
    [521120.720638] Read of size 4 by task mount.ocfs2/9644
    [521120.721212] =============================================================================
    [521120.722056] BUG kmalloc-256 (Not tainted): kasan: bad access detected
    [521120.722968] -----------------------------------------------------------------------------
    [521120.722968]
    [521120.723915] Disabling lock debugging due to kernel taint
    [521120.724539] INFO: Slab 0xffffea003cdace00 objects=32 used=25 fp=0xffff880f36b38600 flags=0x46fffff80004080
    [521120.726037] INFO: Object 0xffff880f36b38700 @offset=1792 fp=0xffff880f36b38800
    [521120.726037]
    [521120.726974] Bytes b4 ffff880f36b386f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.727898] Object ffff880f36b38700: 00 88 b3 36 0f 88 ff ff 00 00 d8 de 0b 88 ff ff  ...6............
    [521120.728822] Object ffff880f36b38710: 02 00 00 f0 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.729705] Object ffff880f36b38720: 01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  ................
    [521120.730623] Object ffff880f36b38730: 00 00 00 00 00 00 00 00 01 00 00 00 00 02 00 00  ................
    [521120.731621] Object ffff880f36b38740: 00 02 00 00 01 00 00 00 d0 f7 87 ad ff ff ff ff  ................
    [521120.732776] Object ffff880f36b38750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.733640] Object ffff880f36b38760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.734508] Object ffff880f36b38770: 01 00 03 00 01 00 00 00 88 87 b3 36 0f 88 ff ff  ...........6....
    [521120.735385] Object ffff880f36b38780: 00 73 22 ad 02 88 ff ff 40 13 e0 3c 00 ea ff ff  .s".....@..<....
    [521120.736667] Object ffff880f36b38790: 00 02 00 00 00 04 00 00 00 00 00 00 00 00 00 00  ................
    [521120.737596] Object ffff880f36b387a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.738524] Object ffff880f36b387b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.739388] Object ffff880f36b387c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.740277] Object ffff880f36b387d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.741187] Object ffff880f36b387e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.742233] Object ffff880f36b387f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [521120.743229] CPU: 41 PID: 9644 Comm: mount.ocfs2 Tainted: G    B           4.2.0-rc6-next-20150810-sasha-00039-gf909086 #2420
    [521120.744274]  ffff880f36b38000 ffff880d89c8f638 ffffffffb6e9ba8a ffff880101c0e5c0
    [521120.745025]  ffff880d89c8f668 ffffffffad76a313 ffff880101c0e5c0 ffffea003cdace00
    [521120.745908]  ffff880f36b38700 ffff880f36b38798 ffff880d89c8f690 ffffffffad772854
    [521120.747063] Call Trace:
    [521120.747520] dump_stack (lib/dump_stack.c:52)
    [521120.748053] print_trailer (mm/slub.c:653)
    [521120.748582] object_err (mm/slub.c:660)
    [521120.749079] kasan_report_error (include/linux/kasan.h:20 mm/kasan/report.c:152 mm/kasan/report.c:194)
    [521120.750834] __asan_report_load4_noabort (mm/kasan/report.c:250)
    [521120.753580] dio_bio_complete (fs/direct-io.c:478)
    [521120.755752] do_blockdev_direct_IO (fs/direct-io.c:494 fs/direct-io.c:1291)
    [521120.759765] __blockdev_direct_IO (fs/direct-io.c:1322)
    [521120.761658] blkdev_direct_IO (fs/block_dev.c:162)
    [521120.762993] generic_file_read_iter (mm/filemap.c:1738)
    [521120.767405] blkdev_read_iter (fs/block_dev.c:1649)
    [521120.768556] __vfs_read (fs/read_write.c:423 fs/read_write.c:434)
    [521120.772126] vfs_read (fs/read_write.c:454)
    [521120.773118] SyS_pread64 (fs/read_write.c:607 fs/read_write.c:594)
    [521120.776062] entry_SYSCALL_64_fastpath (arch/x86/entry/entry_64.S:186)
    [521120.777375] Memory state around the buggy address:
    [521120.778118]  ffff880f36b38600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [521120.779211]  ffff880f36b38680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [521120.780315] >ffff880f36b38700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [521120.781465]                          ^
    [521120.782083]  ffff880f36b38780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    [521120.783717]  ffff880f36b38800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [521120.784818] ==================================================================
    
    This patch fixes a few of those places that I caught while auditing the patch, but the
    original patch should be audited further for more occurences of this issue since I'm
    not too familiar with the code.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 4772ff03df8094fd99d28de5fcf5df3a3e9c68bb
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Tue Aug 11 09:54:29 2015 +0200

    drm/dp/mst: Remove port after removing connector.
    
    The port is removed synchronously, but the connector delayed.
    This causes a use after free which can cause a kernel BUG with
    slug_debug=FPZU. This is fixed by freeing the port after the
    connector.
    
    This fixes a regression introduced with
    6b8eeca65b18ae77e175cc2b6571731f0ee413bf
    "drm/dp/mst: close deadlock in connector destruction."
    
    Cc: stable@vger.kernel.org
    Cc: Dave Airlie <airlied@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit e577516b9db3e0f19df82b6430fe3b06e05d6304
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Thu Aug 6 16:41:58 2015 +0200

    mlxsw: Fix use-after-free bug in mlxsw_sx_port_xmit
    
    Store the length of the skb before transmitting it and use it for stats
    instead of skb->len, since skb might have been freed already.
    
    This issue was discovered using the Kernel Address sanitizer (KASan).
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a0a2a6602496a45ae838a96db8b8173794b5d398
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Aug 4 15:42:47 2015 +0800

    net: Fix skb_set_peeked use-after-free bug
    
    The commit 738ac1ebb96d02e0d23bc320302a6ea94c612dec ("net: Clone
    skb before setting peeked flag") introduced a use-after-free bug
    in skb_recv_datagram.  This is because skb_set_peeked may create
    a new skb and free the existing one.  As it stands the caller will
    continue to use the old freed skb.
    
    This patch fixes it by making skb_set_peeked return the new skb
    (or the old one if unchanged).
    
    Fixes: 738ac1ebb96d ("net: Clone skb before setting peeked flag")
    Reported-by: Brenden Blanco <bblanco@plumgrid.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Tested-by: Brenden Blanco <bblanco@plumgrid.com>
    Reviewed-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2475b22526d70234ecfe4a1ff88aed69badefba9
Author: Ross Lagerwall <ross.lagerwall@citrix.com>
Date:   Mon Aug 3 15:38:03 2015 +0100

    xen-netback: Allocate fraglist early to avoid complex rollback
    
    Determine if a fraglist is needed in the tx path, and allocate it if
    necessary before setting up the copy and map operations.
    Otherwise, undoing the copy and map operations is tricky.
    
    This fixes a use-after-free: if allocating the fraglist failed, the copy
    and map operations that had been set up were still executed, writing
    over the data area of a freed skb.
    
    Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9450918293b3c35f11883231a53da1aed2c78403
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Wed Jul 29 22:27:13 2015 -0700

    target: Perform RCU callback barrier before backend/fabric unload
    
    This patch addresses a v4.2-rc1 regression where backend driver
    module unload happening immediately after TBO->free_device()
    does internal call_rcu(), will currently result in IRQ context
    rcu_process_callbacks() use-after-free paging OOPsen.
    
    It adds the missing rcu_barrier() in target_backend_unregister()
    to perform an explicit RCU barrier waiting for all RCU callbacks
    to complete before releasing target_backend_ops memory, and
    allowing TBO->module exit to proceed.
    
    Also, do the same for fabric drivers in target_unregister_template()
    to ensure se_deve_entry->rcu_head -> kfree_rcu() callbacks have
    completed, before allowing target_core_fabric_ops->owner module
    exit to proceed.
    
    Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commits)
      Documentation/target: Fix tcm_mod_builder.py build breakage
      iser-target: Fix REJECT CM event use-after-free OOPs
      iscsi-target: Fix iser explicit logout TX kthread leak
      iscsi-target: Fix iscsit_start_kthreads failure OOPs
      iscsi-target: Fix use-after-free during TPG session shutdown
      qla2xxx: terminate exchange when command is aborted by LIO
      qla2xxx: drop cmds/tmrs arrived while session is being deleted
      qla2xxx: disable scsi_transport_fc registration in target mode
      qla2xxx: added sess generations to detect RSCN update races
      qla2xxx: Abort stale cmds on qla_tgt_wq when plogi arrives
      qla2xxx: delay plogi/prli ack until existing sessions are deleted
      qla2xxx: cleanup cmd in qla workqueue before processing TMR
      qla2xxx: kill sessions/log out initiator on RSCN and port down events
      qla2xxx: fix command initialization in target mode.
      qla2xxx: Remove msleep in qlt_send_term_exchange
      qla2xxx: adjust debug flags
      qla2xxx: release request queue reservation.
      qla2xxx: Add flush after updating ATIOQ consumer index.
      qla2xxx: Enable target mode for ISP27XX
      qla2xxx: Fix hardware lock/unlock issue causing kernel panic.
      ...

commit 515f022e8b59ce928fe5d82affb3e93ab53d12ed
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Tue Jul 28 19:11:40 2015 +0200

    s390/pci: handle events for unused functions
    
    Receiving error events for a pci function that's currently not in use
    will crash the kernel. For example the procedure for FW upgrades might
    include:
    * remove the function from Linux
    * apply FW upgrade
    * rescan for new functions
    
    Receiving an event during the FW upgrade will result in a use after free
    when printing the functions name. Just print "n/a" in such cases.
    
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit ce9a9fc20a78ad1e5222fae3a83d105f2d2fb9b9
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Fri Jul 24 02:29:55 2015 +0000

    iser-target: Fix REJECT CM event use-after-free OOPs
    
    This patch fixes a bug in iser-target code where the REJECT CM event
    handler code currently performs a isert_put_conn() for the final
    isert_conn->kref put, while iscsi_np process context is still blocked
    in isert_get_login_rx().
    
    Once isert_get_login_rx() is awoking due to login timeout, iscsi_np
    process context will attempt to invoke iscsi_target_login_sess_out()
    to cleanup iscsi_conn as expected, and calls isert_wait_conn() +
    isert_free_conn() which triggers the use-after-free OOPs.
    
    To address this bug, move the kref_get_unless_zero() call from
    isert_connected_handler() into isert_connect_request() immediately
    preceeding isert_rdma_accept() to ensure the CM handler cleanup
    paths and isert_free_conn() are always operating with two refs.
    
    Cc: Sagi Grimberg <sagig@mellanox.com>
    Cc: <stable@vger.kernel.org> # v3.10+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 417c20a9bdd1e876384127cf096d8ae8b559066c
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Wed Jul 22 00:24:09 2015 -0700

    iscsi-target: Fix use-after-free during TPG session shutdown
    
    This patch fixes a use-after-free bug in iscsit_release_sessions_for_tpg()
    where se_portal_group->session_lock was incorrectly released/re-acquired
    while walking the active se_portal_group->tpg_sess_list.
    
    The can result in a NULL pointer dereference when iscsit_close_session()
    shutdown happens in the normal path asynchronously to this code, causing
    a bogus dereference of an already freed list entry to occur.
    
    To address this bug, walk the session list checking for the same state
    as before, but move entries to a local list to avoid dropping the lock
    while walking the active list.
    
    As before, signal using iscsi_session->session_restatement=1 for those
    list entries to be released locally by iscsit_free_session() code.
    
    Reported-by: Sunilkumar Nadumuttlu <sjn@datera.io>
    Cc: Sunilkumar Nadumuttlu <sjn@datera.io>
    Cc: <stable@vger.kernel.org> # v3.1+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commits)
      ravb: fix ring memory allocation
      net: phy: dp83867: Fix warning check for setting the internal delay
      openvswitch: allocate nr_node_ids flow_stats instead of num_possible_nodes
      netlink: don't hold mutex in rcu callback when releasing mmapd ring
      ARM: net: fix vlan access instructions in ARM JIT.
      ARM: net: handle negative offsets in BPF JIT.
      ARM: net: fix condition for load_order > 0 when translating load instructions.
      tcp: suppress a division by zero warning
      drivers: net: cpsw: remove tx event processing in rx napi poll
      inet: frags: fix defragmented packet's IP header for af_packet
      net: mvneta: fix refilling for Rx DMA buffers
      stmmac: fix setting of driver data in stmmac_dvr_probe
      sched: cls_flow: fix panic on filter replace
      sched: cls_flower: fix panic on filter replace
      sched: cls_bpf: fix panic on filter replace
      net/mdio: fix mdio_bus_match for c45 PHY
      net: ratelimit warnings about dst entry refcount underflow or overflow
      caif: fix leaks and race in caif_queue_rcv_skb()
      qmi_wwan: add the second QMI/network interface for Sierra Wireless MC7305/MC7355
      ravb: fix race updating TCCR
      ...

commit 21974061cfb3c4b0b1a83447fb5e7cdcd06e56dc
Author: Mike Krinkin <krinkin.m.u@gmail.com>
Date:   Sun Jul 19 09:53:17 2015 +0300

    null_blk: fix use-after-free problem
    
    end_cmd finishes request associated with nullb_cmd struct, so we
    should save pointer to request_queue in a local variable before
    calling end_cmd.
    
    The problem was causes general protection fault with slab poisoning
    enabled.
    
    Fixes: 8b70f45e2eb2 ("null_blk: restart request processing on completion handler")
    Tested-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Mike Krinkin <krinkin.m.u@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 0838aa7fcfcd875caa7bcc5dab0c3fd40444553d
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Mon Jul 13 15:11:48 2015 +0200

    netfilter: fix netns dependencies with conntrack templates
    
    Quoting Daniel Borkmann:
    
    "When adding connection tracking template rules to a netns, f.e. to
    configure netfilter zones, the kernel will endlessly busy-loop as soon
    as we try to delete the given netns in case there's at least one
    template present, which is problematic i.e. if there is such bravery that
    the priviledged user inside the netns is assumed untrusted.
    
    Minimal example:
    
      ip netns add foo
      ip netns exec foo iptables -t raw -A PREROUTING -d 1.2.3.4 -j CT --zone 1
      ip netns del foo
    
    What happens is that when nf_ct_iterate_cleanup() is being called from
    nf_conntrack_cleanup_net_list() for a provided netns, we always end up
    with a net->ct.count > 0 and thus jump back to i_see_dead_people. We
    don't get a soft-lockup as we still have a schedule() point, but the
    serving CPU spins on 100% from that point onwards.
    
    Since templates are normally allocated with nf_conntrack_alloc(), we
    also bump net->ct.count. The issue why they are not yet nf_ct_put() is
    because the per netns .exit() handler from x_tables (which would eventually
    invoke xt_CT's xt_ct_tg_destroy() that drops reference on info->ct) is
    called in the dependency chain at a *later* point in time than the per
    netns .exit() handler for the connection tracker.
    
    This is clearly a chicken'n'egg problem: after the connection tracker
    .exit() handler, we've teared down all the connection tracking
    infrastructure already, so rightfully, xt_ct_tg_destroy() cannot be
    invoked at a later point in time during the netns cleanup, as that would
    lead to a use-after-free. At the same time, we cannot make x_tables depend
    on the connection tracker module, so that the xt_ct_tg_destroy() would
    be invoked earlier in the cleanup chain."
    
    Daniel confirms this has to do with the order in which modules are loaded or
    having compiled nf_conntrack as modules while x_tables built-in. So we have no
    guarantees regarding the order in which netns callbacks are executed.
    
    Fix this by allocating the templates through kmalloc() from the respective
    SYNPROXY and CT targets, so they don't depend on the conntrack kmem cache.
    Then, release then via nf_ct_tmpl_free() from destroy_conntrack(). This branch
    is marked as unlikely since conntrack templates are rarely allocated and only
    from the configuration plane path.
    
    Note that templates are not kept in any list to avoid further dependencies with
    nf_conntrack anymore, thus, the tmpl larval list is removed.
    
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Tested-by: Daniel Borkmann <daniel@iogearbox.net>

commit e8d092aafd9e68c04d7b468e95ff7a617998a796
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue Jul 14 11:21:57 2015 -0700

    net_sched: fix a use-after-free in sfq
    
    Fixes: 25331d6ce42b ("net: sched: implement qstat helper routines")
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Cong Wang <cwang@twopensource.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 052cbda41fdc243a8d40cce7ab3a6327b4b2887e
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Mon Jul 13 12:30:07 2015 -0700

    fq_codel: fix a use-after-free
    
    Fixes: 25331d6ce42b ("net: sched: implement qstat helper routines")
    Cc: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: Cong Wang <cwang@twopensource.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f1b67cd535673cef9b9c9fa772d04015f64bd8e
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Jul 14 15:43:32 2015 +0200

    greybus: connection: fix protocol tear-down race
    
    Make sure to cancel all active operations before calling protocol
    connection_exit to prevent use-after-free issues when the protocol state
    is being deallocated (e.g. late processing of already-queued requests or
    completions).
    
    Note that already-queued requests or completions will be processed as
    part of cancellation.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 008974cb528d301895797fec0f7d4fd64d01fce0
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Jul 14 15:43:31 2015 +0200

    greybus: operation: fix connection tear down
    
    Fix connection tear down, which was done in an unsafe way that could
    result in use-after-free as the per-connection list of operations was
    iterated without any locking or refcounting.
    
    Specifically, the operations list was iterated without holding any locks or
    operation refcounts even though operations were being both removed from
    the list and deallocated during per-operation cancellation. Any
    operation completing during tear down could also cause corruption.
    
    Change the per-connection operation list to only contain active
    operations and use the recently introduced active counter to maintain
    the list.
    
    Add new helper that is called on connection tear down to cancel all
    outstanding operations in a safe way by using proper locks and making
    sure to hold a reference to any operation being cancelled.
    
    Note that by verifying the connection state before incrementing the
    active count we can make sure that all active operations have been
    cancelled and that no new ones have been started when the helper
    returns.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit fffc151381473384629d78cb89b7f7bbb9dc53b0
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Jul 14 15:43:23 2015 +0200

    greybus: operation: fix another cancellation use-after-free
    
    An incoming operation could already be scheduled even if
    gb_operation_result_set succeeds as its initial status is -EINPROGRESS.
    
    Avoid potential use-after-free by never dropping the reference count for
    incoming operations as part of cancellation.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit 1c0ee046957648106b415df79038e4e62b144c19
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: pcan_usb: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Stephane Grosjean <s.grosjean@peak-system.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 9b721a4cefcbdedadbe72b5ec405046c139cf8ad
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: usb_8dev: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Bernd Krumboeck <b.krumboeck@gmail.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 43c021e8d6844c4b0f5cc9eda10d232e7b87a456
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: ems_usb: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Gerhard Uttenthaler <uttenthaler@ems-wuensche.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 296decb6931fca0bbc0bfb26865837d52e287599
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: esd_usb2: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Thomas Körper <thomas.koerper@esd.eu>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 889dd06e107d816fe63ff65e5dd3466949878439
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: sja1000: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit ef934e89f5e68535c447789b74de42cf389e55de
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: cc770: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Wolfgang Grandegger <wg@grandegger.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 05c4456538e9551b8ac47762b21127bf9cf6cc8e
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: ti_heccn: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Anant Gole <anantgole@ti.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit a2e78cf7a3f562edca4230b188c8832b6214eccd
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: slcan: don't touch skb after netif_rx_ni()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 83537b6fd6c3752bcb578d2bd46312d1e2c4a73a
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: grcan: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Andreas Larsson <andreas@gaisler.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 20926d79244de4e9c698ae429fdc1e7e5832b081
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:16:08 2015 +0200

    can: bfin_can: don't touch skb after netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Cc: Aaron Wu <Aaron.wu@analog.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit a18ec1b6c72eb87fe00e8e09c3a3f3cfbec3435b
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Fri May 8 11:30:29 2015 +0200

    can: flexcan: don't touch skb after netif_receive_skb()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 6ae3673debfbf2cfa1972b6d00b974d0e10ad3c6
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jul 11 21:03:07 2015 +0200

    can: at91_can: don't touch skb after netif_receive_skb()/netif_rx()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb() or netif_rx(). It might be freed or reused. Not really
    harmful as its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 3c150f0081647c0b96ce0d61d541b9b470433676
Author: Oleg Drokin <green@linuxhacker.ru>
Date:   Wed Jun 24 10:09:24 2015 -0400

    staging/lustre/lov: Move target sysfs symlink removal to LOV freeing
    
    This helps to avoid use after free on unmount.
    
    Signed-off-by: Oleg Drokin <green@linuxhacker.ru>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0581f28efb86d8eb7e7f6baf712578477f7c868e
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Thu Jul 9 15:17:59 2015 +0200

    greybus: operation: fix use-after-free in response receive path
    
    Fix potential use-after-free in response receive path, due to lack of
    reference counting when looking up operations on a connection.
    
    Make sure to acquire a reference to the operation while holding the
    connection-list lock.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commit b06075a98d595b761881fb2d7b8a557ea2f8b7ac
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Jul 10 17:21:43 2015 -0400

    dm: fix use after free crash due to incorrect cleanup sequence
    
    Linux 4.2-rc1 Commit 0f20972f7bf6 ("dm: factor out a common
    cleanup_mapped_device()") moved a common cleanup code to a separate
    function.  Unfortunately, that commit incorrectly changed the order of
    cleanup, so that it destroys the mapped_device's srcu structure
    'io_barrier' before destroying its workqueue.
    
    The function that is executed on the workqueue (dm_wq_work) uses the srcu
    structure, thus it may use it after being freed.  That results in a
    crash in the LVM test suite's mirror-vgreduce-removemissing.sh test.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Fixes: 0f20972f7bf6 ("dm: factor out a common cleanup_mapped_device()")
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>

commit 83bfff23e9ed19f37c4ef0bba84e75bd88e5cf21
Author: Jeff Layton <jeff.layton@primarydata.com>
Date:   Sat Jul 11 06:43:03 2015 -0400

    nfs4: have do_vfs_lock take an inode pointer
    
    Now that we have file locking helpers that can deal with an inode
    instead of a filp, we can change the NFSv4 locking code to use that
    instead.
    
    This should fix the case where we have a filp that is closed while flock
    or OFD locks are set on it, and the task is signaled so that it doesn't
    wait for the LOCKU reply to come in before the filp is freed. At that
    point we can end up with a use-after-free with the current code, which
    relies on dereferencing the fl_file in the lock request.
    
    Signed-off-by: Jeff Layton <jeff.layton@primarydata.com>
    Reviewed-by: "J. Bruce Fields" <bfields@fieldses.org>
    Tested-by: "J. Bruce Fields" <bfields@fieldses.org>

commit bcd7f78d078ff6197715c1ed070c92aca57ec12c
Author: Jeff Layton <jeff.layton@primarydata.com>
Date:   Sat Jul 11 06:43:02 2015 -0400

    locks: have flock_lock_file take an inode pointer instead of a filp
    
    ...and rename it to better describe how it works.
    
    In order to fix a use-after-free in NFS, we need to be able to remove
    locks from an inode after the filp associated with them may have already
    been freed. flock_lock_file already only dereferences the filp to get to
    the inode, so just change it so the callers do that.
    
    All of the callers already pass in a lock request that has the fl_file
    set properly, so we don't need to pass it in individually. With that
    change it now only dereferences the filp to get to the inode, so just
    push that out to the callers.
    
    Signed-off-by: Jeff Layton <jeff.layton@primarydata.com>
    Reviewed-by: "J. Bruce Fields" <bfields@fieldses.org>
    Tested-by: "J. Bruce Fields" <bfields@fieldses.org>

commit d3efe08400317888f559bbedf0e42cd31575d0ef
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Jul 3 20:30:34 2015 +0100

    Btrfs: fix list transaction->pending_ordered corruption
    
    When we call btrfs_commit_transaction(), we splice the list "ordered"
    of our transaction handle into the transaction's "pending_ordered"
    list, but we don't re-initialize the "ordered" list of our transaction
    handle, this means it still points to the same elements it used to
    before the splice. Then we check if the current transaction's state is
    >= TRANS_STATE_COMMIT_START and if it is we end up calling
    btrfs_end_transaction() which simply splices again the "ordered" list
    of our handle into the transaction's "pending_ordered" list, leaving
    multiple pointers to the same ordered extents which results in list
    corruption when we are iterating, removing and freeing ordered extents
    at btrfs_wait_pending_ordered(), resulting in access to dangling
    pointers / use-after-free issues.
    Similarly, btrfs_end_transaction() can end up in some cases calling
    btrfs_commit_transaction(), and both did a list splice of the transaction
    handle's "ordered" list into the transaction's "pending_ordered" without
    re-initializing the handle's "ordered" list, resulting in exactly the
    same problem.
    
    This produces the following warning on a kernel with linked list
    debugging enabled:
    
    [109749.265416] ------------[ cut here ]------------
    [109749.266410] WARNING: CPU: 7 PID: 324 at lib/list_debug.c:59 __list_del_entry+0x5a/0x98()
    [109749.267969] list_del corruption. prev->next should be ffff8800ba087e20, but was fffffff8c1f7c35d
    (...)
    [109749.287505] Call Trace:
    [109749.288135]  [<ffffffff8145f077>] dump_stack+0x4f/0x7b
    [109749.298080]  [<ffffffff81095de5>] ? console_unlock+0x356/0x3a2
    [109749.331605]  [<ffffffff8104b3b0>] warn_slowpath_common+0xa1/0xbb
    [109749.334849]  [<ffffffff81260642>] ? __list_del_entry+0x5a/0x98
    [109749.337093]  [<ffffffff8104b410>] warn_slowpath_fmt+0x46/0x48
    [109749.337847]  [<ffffffff81260642>] __list_del_entry+0x5a/0x98
    [109749.338678]  [<ffffffffa053e8bf>] btrfs_wait_pending_ordered+0x46/0xdb [btrfs]
    [109749.340145]  [<ffffffffa058a65f>] ? __btrfs_run_delayed_items+0x149/0x163 [btrfs]
    [109749.348313]  [<ffffffffa054077d>] btrfs_commit_transaction+0x36b/0xa10 [btrfs]
    [109749.349745]  [<ffffffff81087310>] ? trace_hardirqs_on+0xd/0xf
    [109749.350819]  [<ffffffffa055370d>] btrfs_sync_file+0x36f/0x3fc [btrfs]
    [109749.351976]  [<ffffffff8118ec98>] vfs_fsync_range+0x8f/0x9e
    [109749.360341]  [<ffffffff8118ecc3>] vfs_fsync+0x1c/0x1e
    [109749.368828]  [<ffffffff8118ee1d>] do_fsync+0x34/0x4e
    [109749.369790]  [<ffffffff8118f045>] SyS_fsync+0x10/0x14
    [109749.370925]  [<ffffffff81465197>] system_call_fastpath+0x12/0x6f
    [109749.382274] ---[ end trace 48e0d07f7c03d95a ]---
    
    On a non-debug kernel this leads to invalid memory accesses, causing a
    crash. Fix this by using list_splice_init() instead of list_splice() in
    btrfs_commit_transaction() and btrfs_end_transaction().
    
    Cc: stable@vger.kernel.org
    Fixes: 50d9aa99bd35 ("Btrfs: make sure logged extents complete in the current transaction V3"
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>

commit 73f9d73f124ccba16403971b5101d4a947161481
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Wed Jul 1 12:37:25 2015 +0200

    greybus: operation: fix cancellation use-after-free
    
    The final reference of an operation will be put after its completion
    handler has run, so we must not drop the reference if it has already
    been scheduled to avoid use-after-free.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@google.com>

commits)
      btrfs: delayed-ref: double free in btrfs_add_delayed_tree_ref()
      Btrfs: Check if kobject is initialized before put
      lib: export symbol kobject_move()
      Btrfs: sysfs: add support to show replacing target in the sysfs
      Btrfs: free the stale device
      Btrfs: use received_uuid of parent during send
      Btrfs: fix use-after-free in btrfs_replay_log
      btrfs: wait for delayed iputs on no space
      btrfs: qgroup: Make snapshot accounting work with new extent-oriented qgroup.
      btrfs: qgroup: Add the ability to skip given qgroup for old/new_roots.
      btrfs: ulist: Add ulist_del() function.
      btrfs: qgroup: Cleanup the old ref_node-oriented mechanism.
      btrfs: qgroup: Switch self test to extent-oriented qgroup mechanism.
      btrfs: qgroup: Switch to new extent-oriented qgroup mechanism.
      btrfs: qgroup: Switch rescan to new mechanism.
      btrfs: qgroup: Add new qgroup calculation function btrfs_qgroup_account_extents().
      btrfs: backref: Add special time_seq == (u64)-1 case for btrfs_find_all_roots().
      btrfs: qgroup: Add new function to record old_roots.
      btrfs: qgroup: Record possible quota-related extent for qgroup.
      btrfs: qgroup: Add function qgroup_update_counters().
      ...

commit 65f5333875d7bbfc13436e224a181d10a80d1ada
Author: Zhao Lei <zhaolei@cn.fujitsu.com>
Date:   Mon Jun 8 20:05:50 2015 +0800

    btrfs: cleanup noused initialization of dev in btrfs_end_bio()
    
    It is introduced by:
     c404e0dc2c843b154f9a36c3aec10d0a715d88eb
     Btrfs: fix use-after-free in the finishing procedure of the device replace
    
    But seems no relationship with that bug, this patch revirt these
    code block for cleanup.
    
    Signed-off-by: Zhao Lei <zhaolei@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commits)
      Revert "base/platform: Only insert MEM and IO resources"
      Revert "base/platform: Continue on insert_resource() error"
      Revert "of/platform: Use platform_device interface"
      Revert "base/platform: Remove code duplication"
      firmware: add missing kfree for work on async call
      fs: sysfs: don't pass count == 0 to bin file readers
      base:dd - Fix for typo in comment to function driver_deferred_probe_trigger().
      base/platform: Remove code duplication
      of/platform: Use platform_device interface
      base/platform: Continue on insert_resource() error
      base/platform: Only insert MEM and IO resources
      firmware: use const for remaining firmware names
      firmware: fix possible use after free on name on asynchronous request
      firmware: check for file truncation on direct firmware loading
      firmware: fix __getname() missing failure check
      drivers: of/base: move of_init to driver_init
      drivers/base: cacheinfo: fix annoying typo when DT nodes are absent
      sysfs: disambiguate between "error code" and "failure" in comments
      driver-core: fix build for !CONFIG_MODULES
      driver-core: make __device_attach() static
      ...

commit 887d9dc989eb0154492e41e7c07492edbb088ba1
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Jun 11 14:46:48 2015 +0200

    hrtimer: Allow hrtimer::function() to free the timer
    
    Currently an hrtimer callback function cannot free its own timer
    because __run_hrtimer() still needs to clear HRTIMER_STATE_CALLBACK
    after it. Freeing the timer would result in a clear use-after-free.
    
    Solve this by using a scheme similar to regular timers; track the
    current running timer in hrtimer_clock_base::running.
    
    Suggested-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: ktkhai@parallels.com
    Cc: rostedt@goodmis.org
    Cc: juri.lelli@gmail.com
    Cc: pang.xunlei@linaro.org
    Cc: wanpeng.li@linux.intel.com
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Paul McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: umgwanakikbuti@gmail.com
    Link: http://lkml.kernel.org/r/20150611124743.471563047@infradead.org
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 2dab80a8b486f02222a69daca6859519e05781d9
Author: Nikolay Aleksandrov <razor@blackwall.org>
Date:   Mon Jun 15 20:28:51 2015 +0300

    bridge: fix br_stp_set_bridge_priority race conditions
    
    After the ->set() spinlocks were removed br_stp_set_bridge_priority
    was left running without any protection when used via sysfs. It can
    race with port add/del and could result in use-after-free cases and
    corrupted lists. Tested by running port add/del in a loop with stp
    enabled while setting priority in a loop, crashes are easily
    reproducible.
    The spinlocks around sysfs ->set() were removed in commit:
    14f98f258f19 ("bridge: range check STP parameters")
    There's also a race condition in the netlink priority support that is
    fixed by this change, but it was introduced recently and the fixes tag
    covers it, just in case it's needed the commit is:
    af615762e972 ("bridge: add ageing_time, stp_state, priority over netlink")
    
    Signed-off-by: Nikolay Aleksandrov <razor@blackwall.org>
    Fixes: 14f98f258f19 ("bridge: range check STP parameters")
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0eeff2362b829b5e80f8b69f86b60b8094bc742d
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Thu Jun 11 14:16:44 2015 +0800

    Btrfs: fix use-after-free in btrfs_replay_log
    
    @log_root_tree should not be referenced after kfree.
    
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.cz>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Chris Mason <clm@fb.com>

commit 85bd839983778fcd0c1c043327b14a046e979b39
Author: Gu Zheng <guz.fnst@cn.fujitsu.com>
Date:   Wed Jun 10 11:14:43 2015 -0700

    mm/memory_hotplug.c: set zone->wait_table to null after freeing it
    
    Izumi found the following oops when hot re-adding a node:
    
        BUG: unable to handle kernel paging request at ffffc90008963690
        IP: __wake_up_bit+0x20/0x70
        Oops: 0000 [#1] SMP
        CPU: 68 PID: 1237 Comm: rs:main Q:Reg Not tainted 4.1.0-rc5 #80
        Hardware name: FUJITSU PRIMEQUEST2800E/SB, BIOS PRIMEQUEST 2000 Series BIOS Version 1.87 04/28/2015
        task: ffff880838df8000 ti: ffff880017b94000 task.ti: ffff880017b94000
        RIP: 0010:[<ffffffff810dff80>]  [<ffffffff810dff80>] __wake_up_bit+0x20/0x70
        RSP: 0018:ffff880017b97be8  EFLAGS: 00010246
        RAX: ffffc90008963690 RBX: 00000000003c0000 RCX: 000000000000a4c9
        RDX: 0000000000000000 RSI: ffffea101bffd500 RDI: ffffc90008963648
        RBP: ffff880017b97c08 R08: 0000000002000020 R09: 0000000000000000
        R10: 0000000000000000 R11: 0000000000000000 R12: ffff8a0797c73800
        R13: ffffea101bffd500 R14: 0000000000000001 R15: 00000000003c0000
        FS:  00007fcc7ffff700(0000) GS:ffff880874800000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: ffffc90008963690 CR3: 0000000836761000 CR4: 00000000001407e0
        Call Trace:
          unlock_page+0x6d/0x70
          generic_write_end+0x53/0xb0
          xfs_vm_write_end+0x29/0x80 [xfs]
          generic_perform_write+0x10a/0x1e0
          xfs_file_buffered_aio_write+0x14d/0x3e0 [xfs]
          xfs_file_write_iter+0x79/0x120 [xfs]
          __vfs_write+0xd4/0x110
          vfs_write+0xac/0x1c0
          SyS_write+0x58/0xd0
          system_call_fastpath+0x12/0x76
        Code: 5d c3 66 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 55 48 89 e5 48 83 ec 20 65 48 8b 04 25 28 00 00 00 48 89 45 f8 31 c0 48 8d 47 48 <48> 39 47 48 48 c7 45 e8 00 00 00 00 48 c7 45 f0 00 00 00 00 48
        RIP  [<ffffffff810dff80>] __wake_up_bit+0x20/0x70
         RSP <ffff880017b97be8>
        CR2: ffffc90008963690
    
    Reproduce method (re-add a node)::
      Hot-add nodeA --> remove nodeA --> hot-add nodeA (panic)
    
    This seems an use-after-free problem, and the root cause is
    zone->wait_table was not set to *NULL* after free it in
    try_offline_node.
    
    When hot re-add a node, we will reuse the pgdat of it, so does the zone
    struct, and when add pages to the target zone, it will init the zone
    first (including the wait_table) if the zone is not initialized.  The
    judgement of zone initialized is based on zone->wait_table:
    
            static inline bool zone_is_initialized(struct zone *zone)
            {
                    return !!zone->wait_table;
            }
    
    so if we do not set the zone->wait_table to *NULL* after free it, the
    memory hotplug routine will skip the init of new zone when hot re-add
    the node, and the wait_table still points to the freed memory, then we
    will access the invalid address when trying to wake up the waiting
    people after the i/o operation with the page is done, such as mentioned
    above.
    
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Reported-by: Taku Izumi <izumi.taku@jp.fujitsu.com>
    Reviewed by: Yasuaki Ishimatsu <isimatu.yasuaki@jp.fujitsu.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Tang Chen <tangchen@cn.fujitsu.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 524630d5824c7a75aab568c6bd1423fd748cd3bb
Author: Sagi Grimberg <sagig@mellanox.com>
Date:   Thu Jun 4 19:49:21 2015 +0300

    iser-target: Fix possible use-after-free
    
    iser connection termination process happens in 2 stages:
    - isert_wait_conn:
      - resumes rdma disconnect
      - wait for session commands
      - wait for flush completions (post a marked wr to signal we are done)
      - wait for logout completion
      - queue work for connection cleanup (depends on disconnected/timewait
        events)
    - isert_free_conn
      - last reference put on the connection
    
    In case we are terminating during IOs, we might be posting send/recv
    requests after we posted the last work request which might lead
    to a use-after-free condition in isert_handle_wc.
    After we posted the last wr in isert_wait_conn we are guaranteed that
    no successful completions will follow (meaning no new work request posts
    may happen) but other flush errors might still come. So before we
    put the last reference on the connection, we repeat the process of
    posting a marked work request (isert_wait4flush) in order to make sure all
    pending completions were flushed.
    
    Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
    Signed-off-by: Jenny Falkovich <jennyf@mellanox.com>
    Cc: stable@vger.kernel.org # 3.10+
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 27e41fcfa6b326ad44eee7e0b1930d080b270895
Author: Robert Shearman <rshearma@brocade.com>
Date:   Fri Jun 5 18:51:54 2015 +0100

    ipv6: fix possible use after free of dev stats
    
    The memory pointed to by idev->stats.icmpv6msgdev,
    idev->stats.icmpv6dev and idev->stats.ipv6 can each be used in an RCU
    read context without taking a reference on idev. For example, through
    IP6_*_STATS_* calls in ip6_rcv. These memory blocks are freed without
    waiting for an RCU grace period to elapse. This could lead to the
    memory being written to after it has been freed.
    
    Fix this by using call_rcu to free the memory used for stats, as well
    as idev after an RCU grace period has elapsed.
    
    Signed-off-by: Robert Shearman <rshearma@brocade.com>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25cc8f0763c972911b1a65099cd10d9f8a45a7b0
Author: Robert Shearman <rshearma@brocade.com>
Date:   Fri Jun 5 18:54:45 2015 +0100

    mpls: fix possible use after free of device
    
    The mpls device is used in an RCU read context without a lock being
    held. As the memory is freed without waiting for the RCU grace period
    to elapse, the freed memory could still be in use.
    
    Address this by using kfree_rcu to free the memory for the mpls device
    after the RCU grace period has elapsed.
    
    Fixes: 03c57747a702 ("mpls: Per-device MPLS state")
    Signed-off-by: Robert Shearman <rshearma@brocade.com>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2037a0933bc2894a2f50ae57a1ccf6be192adb76
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Tue May 12 19:31:37 2015 -0400

    btrfs: use after free when closing devices
    
    __btrfs_close_devices() would call_rcu to free the device, which is racy with
    list_for_each_entry() accessing the memory to retrieve the next device on the
    list.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Reviewed-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Chris Mason <clm@fb.com>

commits)
      sctp: Fix mangled IPv4 addresses on a IPv6 listening socket
      net_sched: invoke ->attach() after setting dev->qdisc
      xen-netfront: properly destroy queues when removing device
      mlx4_core: Fix fallback from MSI-X to INTx
      xen/netback: Properly initialize credit_bytes
      net: netxen: correct sysfs bin attribute return code
      tools: bpf_jit_disasm: fix segfault on disabled debugging log output
      unix/caif: sk_socket can disappear when state is unlocked
      amd-xgbe-phy: Fix initial mode when autoneg is disabled
      net: dp83640: fix improper double spin locking.
      net: dp83640: reinforce locking rules.
      net: dp83640: fix broken calibration routine.
      net: stmmac: create one debugfs dir per net-device
      net/ibm/emac: fix size of emac dump memory areas
      x86: bpf_jit: fix compilation of large bpf programs
      net: phy: bcm7xxx: Fix 7425 PHY ID and flags
      iwlwifi: mvm: avoid use-after-free on iwl_mvm_d0i3_enable_tx()
      iwlwifi: mvm: clean net-detect info if device was reset during suspend
      iwlwifi: mvm: take the UCODE_DOWN reference when resuming
      iwlwifi: mvm: BT Coex - duplicate the command if sent ASYNC
      ...

commit ad0681185770716523c81b156c44b9804d7b8ed2
Author: David Vrabel <david.vrabel@citrix.com>
Date:   Wed May 27 15:46:10 2015 +0100

    xen-netfront: properly destroy queues when removing device
    
    xennet_remove() freed the queues before freeing the netdevice which
    results in a use-after-free when free_netdev() tries to delete the
    napi instances that have already been freed.
    
    Fix this by fully destroy the queues (which includes deleting the napi
    instances) before freeing the netdevice.
    
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9692b2699bd82ae0df1d7d495d9fb9c4bd45ad9
Author: Luis R. Rodriguez <mcgrof@suse.com>
Date:   Tue May 12 14:49:42 2015 -0700

    firmware: fix possible use after free on name on asynchronous request
    
    Asynchronous firmware loading copies the pointer to the
    name passed as an argument only to be scheduled later and
    used. This behaviour works well for synchronous calling
    but in asynchronous mode there's a chance the caller could
    immediately free the passed string after making the
    asynchronous call. This could trigger a use after free
    having the kernel look on disk for arbitrary file names.
    
    In order to force-test the issue you can use a test-driver
    designed to illustrate this issue on github [0], use the
    next-20150505-fix-use-after-free branch.
    
    With this patch applied you get:
    
    [  283.512445] firmware name: test_module_stuff.bin
    [  287.514020] firmware name: test_module_stuff.bin
    [  287.532489] firmware found
    
    Without this patch applied you can end up with something such as:
    
    [  135.624216] firmware name: \xffffff80BJ
    [  135.624249] platform fake-dev.0: Direct firmware load for \xffffff80Bi failed with error -2
    [  135.624252] No firmware found
    [  135.624252] firmware found
    
    Unfortunatley in the worst and most common case however you
    can typically crash your system with a page fault by trying to
    free something which you cannot, and/or a NULL pointer
    dereference [1].
    
    The fix and issue using schedule_work() for asynchronous
    runs is generalized in the following SmPL grammar patch,
    when applied to next-20150505 only the firmware_class
    code is affected. This grammar patch can and should further
    be generalized to vet for for other kernel asynchronous
    mechanisms.
    
    @ calls_schedule_work @
    type T;
    T *priv_work;
    identifier func, work_func;
    identifier work;
    identifier priv_name, name;
    expression gfp;
    @@
    
     func(..., const char *name, ...)
     {
            ...
            priv_work = kzalloc(sizeof(T), gfp);
            ...
    -       priv_work->priv_name = name;
    +       priv_work->priv_name = kstrdup_const(name, gfp);
            ...
    (... when any
            if (...)
            {
                    ...
    +               kfree_const(priv_work->priv_name);
                    kfree(priv_work);
                    ...
            }
    ) ... when any
            INIT_WORK(&priv_work->work, work_func);
            ...
            schedule_work(&priv_work->work);
            ...
     }
    
    @ the_work_func depends on calls_schedule_work @
    type calls_schedule_work.T;
    T *priv_work;
    identifier calls_schedule_work.work_func;
    identifier calls_schedule_work.priv_name;
    identifier calls_schedule_work.work;
    identifier some_work;
    @@
    
     work_func(...)
     {
            ...
            priv_work = container_of(some_work, T, work);
            ...
    +       kfree_const(priv_work->priv_name);
            kfree(priv_work);
            ...
     }
    
    [0] https://github.com/mcgrof/fake-firmware-test.git
    [1] The following kernel ring buffer splat:
    
    firmware name: test_module_stuff.bin
    firmware name:
    firmware found
    general protection fault: 0000 [#1] SMP
    Modules linked in: test(O) <...etc-it-does-not-matter>
     drm sr_mod cdrom xhci_pci xhci_hcd rtsx_pci mfd_core video button sg
    CPU: 3 PID: 87 Comm: kworker/3:2 Tainted: G           O    4.0.0-00010-g22b5bb0-dirty #176
    Hardware name: LENOVO 20AW000LUS/20AW000LUS, BIOS GLET43WW (1.18 ) 12/04/2013
    Workqueue: events request_firmware_work_func
    task: ffff8800c7f8e290 ti: ffff8800c7f94000 task.ti: ffff8800c7f94000
    RIP: 0010:[<ffffffff814a586c>]  [<ffffffff814a586c>] fw_free_buf+0xc/0x40
    RSP: 0000:ffff8800c7f97d78  EFLAGS: 00010286
    RAX: ffffffff81ae3700 RBX: ffffffff816d1181 RCX: 0000000000000006
    RDX: 0001ee850ff68500 RSI: 0000000000000246 RDI: c35d5f415e415d41
    RBP: ffff8800c7f97d88 R08: 000000000000000a R09: 0000000000000000
    R10: 0000000000000358 R11: ffff8800c7f97a7e R12: ffff8800c7ec1e80
    R13: ffff88021e2d4cc0 R14: ffff88021e2dff00 R15: 00000000000000c0
    FS:  0000000000000000(0000) GS:ffff88021e2c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000034b8cd8 CR3: 000000021073c000 CR4: 00000000001407e0
    Stack:
     ffffffff816d1181 ffff8800c7ec1e80 ffff8800c7f97da8 ffffffff814a58f8
     000000000000000a ffffffff816d1181 ffff8800c7f97dc8 ffffffffa047002c
     ffff88021e2dff00 ffff8802116ac1c0 ffff8800c7f97df8 ffffffff814a65fe
    Call Trace:
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffff814a58f8>] release_firmware+0x58/0x80
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffffa047002c>] test_mod_cb+0x2c/0x43 [test]
     [<ffffffff814a65fe>] request_firmware_work_func+0x5e/0x80
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffff8108d23a>] process_one_work+0x14a/0x3f0
     [<ffffffff8108d911>] worker_thread+0x121/0x460
     [<ffffffff8108d7f0>] ? rescuer_thread+0x310/0x310
     [<ffffffff810928f9>] kthread+0xc9/0xe0
     [<ffffffff81092830>] ? kthread_create_on_node+0x180/0x180
     [<ffffffff816d52d8>] ret_from_fork+0x58/0x90
     [<ffffffff81092830>] ? kthread_create_on_node+0x180/0x180
    Code: c7 c6 dd ad a3 81 48 c7 c7 20 97 ce 81 31 c0 e8 0b b2 ed ff e9 78 ff ff ff 66 0f 1f 44 00 00 0f 1f 44 00 00 55 48 89 e5 41 54 53 <4c> 8b 67 38 48 89 fb 4c 89 e7 e8 85 f7 22 00 f0 83 2b 01 74 0f
    RIP  [<ffffffff814a586c>] fw_free_buf+0xc/0x40
     RSP <ffff8800c7f97d78>
    ---[ end trace 4e62c56a58d0eac1 ]---
    BUG: unable to handle kernel paging request at ffffffffffffffd8
    IP: [<ffffffff81093ee0>] kthread_data+0x10/0x20
    PGD 1c13067 PUD 1c15067 PMD 0
    Oops: 0000 [#2] SMP
    Modules linked in: test(O) <...etc-it-does-not-matter>
     drm sr_mod cdrom xhci_pci xhci_hcd rtsx_pci mfd_core video button sg
    CPU: 3 PID: 87 Comm: kworker/3:2 Tainted: G      D    O    4.0.0-00010-g22b5bb0-dirty #176
    Hardware name: LENOVO 20AW000LUS/20AW000LUS, BIOS GLET43WW (1.18 ) 12/04/2013
    task: ffff8800c7f8e290 ti: ffff8800c7f94000 task.ti: ffff8800c7f94000
    RIP: 0010:[<ffffffff81092ee0>]  [<ffffffff81092ee0>] kthread_data+0x10/0x20
    RSP: 0018:ffff8800c7f97b18  EFLAGS: 00010096
    RAX: 0000000000000000 RBX: 0000000000000003 RCX: 000000000000000d
    RDX: 0000000000000003 RSI: 0000000000000003 RDI: ffff8800c7f8e290
    RBP: ffff8800c7f97b18 R08: 000000000000bc00 R09: 0000000000007e76
    R10: 0000000000000001 R11: 000000000000002f R12: ffff8800c7f8e290
    R13: 00000000000154c0 R14: 0000000000000003 R15: 0000000000000000
    FS:  0000000000000000(0000) GS:ffff88021e2c0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000028 CR3: 0000000210675000 CR4: 00000000001407e0
    Stack:
     ffff8800c7f97b38 ffffffff8108dcd5 ffff8800c7f97b38 ffff88021e2d54c0
     ffff8800c7f97b88 ffffffff816d1500 ffff880213d42368 ffff8800c7f8e290
     ffff8800c7f97b88 ffff8800c7f97fd8 ffff8800c7f8e710 0000000000000246
    Call Trace:
     [<ffffffff8108dcd5>] wq_worker_sleeping+0x15/0xa0
     [<ffffffff816d1500>] __schedule+0x6e0/0x940
     [<ffffffff816d1797>] schedule+0x37/0x90
     [<ffffffff810779bc>] do_exit+0x6bc/0xb40
     [<ffffffff8101898f>] oops_end+0x9f/0xe0
     [<ffffffff81018efb>] die+0x4b/0x70
     [<ffffffff81015622>] do_general_protection+0xe2/0x170
     [<ffffffff816d74e8>] general_protection+0x28/0x30
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffff814a586c>] ? fw_free_buf+0xc/0x40
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffff814a58f8>] release_firmware+0x58/0x80
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffffa047002c>] test_mod_cb+0x2c/0x43 [test]
     [<ffffffff814a65fe>] request_firmware_work_func+0x5e/0x80
     [<ffffffff816d1181>] ? __schedule+0x361/0x940
     [<ffffffff8108d23a>] process_one_work+0x14a/0x3f0
     [<ffffffff8108d911>] worker_thread+0x121/0x460
     [<ffffffff8108d7f0>] ? rescuer_thread+0x310/0x310
     [<ffffffff810928f9>] kthread+0xc9/0xe0
     [<ffffffff81092830>] ? kthread_create_on_node+0x180/0x180
     [<ffffffff816d52d8>] ret_from_fork+0x58/0x90
     [<ffffffff81092830>] ? kthread_create_on_node+0x180/0x180
    Code: 00 48 89 e5 5d 48 8b 40 c8 48 c1 e8 02 83 e0 01 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00 48 8b 87 30 05 00 00 55 48 89 e5 <48> 8b 40 d8 5d c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44 00 00
    RIP  [<ffffffff81092ee0>] kthread_data+0x10/0x20
     RSP <ffff8800c7f97b18>
    CR2: ffffffffffffffd8
    ---[ end trace 4e62c56a58d0eac2 ]---
    Fixing recursive fault but reboot is needed!
    
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Rusty Russell <rusty@rustcorp.com.au>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Ming Lei <ming.lei@canonical.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: Kyle McMartin <kyle@kernel.org>
    Generated-by: Coccinelle SmPL
    Signed-off-by: Luis R. Rodriguez <mcgrof@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d322413d6cff0bd2ccafc03ab9314dc55417e9d
Author: Edward Cree <ecree@solarflare.com>
Date:   Wed May 20 11:10:03 2015 +0100

    sfc: protect filter table against use-after-free
    
    If MCDI timeouts are encountered during efx_ef10_filter_table_remove(),
    an FLR will be queued, but efx->filter_state will still be kfree()d.
    The queued FLR will then call efx_ef10_filter_table_restore(), which
    will try to use efx->filter_state. This previously caused a panic.
    This patch adds an rwsem to protect the existence of efx->filter_state,
    separately from the spinlock protecting its contents.  Users which can
    race against efx_ef10_filter_table_remove() should down_read this rwsem.
    
    Signed-off-by: Shradha Shah <sshah@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 292208914d8ca5a41cf68c2f1d2810a2ea2044e9
Author: Eliad Peller <eliad@wizery.com>
Date:   Tue Apr 14 11:36:23 2015 +0300

    iwlwifi: mvm: avoid use-after-free on iwl_mvm_d0i3_enable_tx()
    
    qos_seq points (to a struct) inside the command response data.
    
    Make sure to free the response only after qos_seq is not
    needed anymore.
    
    Reported-by: Heng Luo <heng.luo@intel.com>
    Signed-off-by: Eliad Peller <eliadx.peller@intel.com>
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>

commit 9d506594069355d1fb2de3f9104667312ff08ed3
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Thu May 14 18:55:18 2015 -0400

    ext4: fix NULL pointer dereference when journal restart fails
    
    Currently when journal restart fails, we'll have the h_transaction of
    the handle set to NULL to indicate that the handle has been effectively
    aborted. We handle this situation quietly in the jbd2_journal_stop() and just
    free the handle and exit because everything else has been done before we
    attempted (and failed) to restart the journal.
    
    Unfortunately there are a number of problems with that approach
    introduced with commit
    
    41a5b913197c "jbd2: invalidate handle if jbd2_journal_restart()
    fails"
    
    First of all in ext4 jbd2_journal_stop() will be called through
    __ext4_journal_stop() where we would try to get a hold of the superblock
    by dereferencing h_transaction which in this case would lead to NULL
    pointer dereference and crash.
    
    In addition we're going to free the handle regardless of the refcount
    which is bad as well, because others up the call chain will still
    reference the handle so we might potentially reference already freed
    memory.
    
    Moreover it's expected that we'll get aborted handle as well as detached
    handle in some of the journalling function as the error propagates up
    the stack, so it's unnecessary to call WARN_ON every time we get
    detached handle.
    
    And finally we might leak some memory by forgetting to free reserved
    handle in jbd2_journal_stop() in the case where handle was detached from
    the transaction (h_transaction is NULL).
    
    Fix the NULL pointer dereference in __ext4_journal_stop() by just
    calling jbd2_journal_stop() quietly as suggested by Jan Kara. Also fix
    the potential memory leak in jbd2_journal_stop() and use proper
    handle refcounting before we attempt to free it to avoid use-after-free
    issues.
    
    And finally remove all WARN_ON(!transaction) from the code so that we do
    not get random traces when something goes wrong because when journal
    restart fails we will get to some of those functions.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jan Kara <jack@suse.cz>

commit d744318574090c3b796915d9d710bdb17db191a1
Author: WANG Cong <xiyou.wangcong@gmail.com>
Date:   Tue May 5 15:22:02 2015 -0700

    net_sched: fix a use-after-free in tc_ctl_tfilter()
    
    When tcf_destroy() returns true, tp could be already destroyed,
    we should not use tp->next after that.
    
    For long term, we probably should move tp list to list_head.
    
    Fixes: 1e052be69d04 ("net_sched: destroy proto tp when all filters are gone")
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 483d821108791092798f5d230686868112927044
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Apr 21 17:42:09 2015 +0200

    gpio: sysfs: fix memory leaks and device hotplug
    
    Unregister GPIOs requested through sysfs at chip remove to avoid leaking
    the associated memory and sysfs entries.
    
    The stale sysfs entries prevented the gpio numbers from being exported
    when the gpio range was later reused (e.g. at device reconnect).
    
    This also fixes the related module-reference leak.
    
    Note that kernfs makes sure that any on-going sysfs operations finish
    before the class devices are unregistered and that further accesses
    fail.
    
    The chip exported flag is used to prevent gpiod exports during removal.
    This also makes it harder to trigger, but does not fix, the related race
    between gpiochip_remove and export_store, which is really a race with
    gpiod_request that needs to be addressed separately.
    
    Also note that this would prevent the crashes (e.g. NULL-dereferences)
    at reconnect that affects pre-3.18 kernels, as well as use-after-free on
    operations on open attribute files on pre-3.14 kernels (prior to
    kernfs).
    
    Fixes: d8f388d8dc8d ("gpio: sysfs interface")
    Cc: stable <stable@vger.kernel.org>     # v2.6.27: 01cca93a9491
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit e5629be7c9984c8427f36bc01c2c35fb4a21d26b
Author: Eliad Peller <eliad@wizery.com>
Date:   Tue Apr 14 11:36:23 2015 +0300

    iwlwifi: mvm: avoid use-after-free on iwl_mvm_d0i3_enable_tx() [BUGFIX]
    
    qos_seq points (to a struct) inside the command response data.
    
    Make sure to free the response only after qos_seq is not
    needed anymore.
    
    type=bugfix
    bug=not-tracked
    fixes=I78c07110b59dcd389207bd2b168b0a2760839fe0
    
    Change-Id: I619ce2c17e064dc98c7be9abc1e23175fdc8fb9a
    Reported-by: Heng Luo <heng.luo@intel.com>
    Signed-off-by: Eliad Peller <eliadx.peller@intel.com>
    Reviewed-on: https://gerrit.rds.intel.com/r/55381
    Reviewed-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Tested-by: IWL Jenkins
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>

commit f054b56c951bf1731ba7314a4c7f1cc0b2977cc9
Author: Ming Lei <ming.lei@canonical.com>
Date:   Tue Apr 21 10:00:19 2015 +0800

    blk-mq: fix race between timeout and CPU hotplug
    
    Firstly during CPU hotplug, even queue is freezed, timeout
    handler still may come and access hctx->tags, which may cause
    use after free, so this patch deactivates timeout handler
    inside CPU hotplug notifier.
    
    Secondly, tags can be shared by more than one queues, so we
    have to check if the hctx has been unmapped, otherwise
    still use-after-free on tags can be triggered.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: Dongsu Park <dongsu.park@profitbricks.com>
    Tested-by: Dongsu Park <dongsu.park@profitbricks.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 923936157b158f36bd6a3d86496dce82b1a957de
Author: Andrey Ryabinin <a.ryabinin@samsung.com>
Date:   Wed Apr 15 16:15:05 2015 -0700

    mm/mempool.c: kasan: poison mempool elements
    
    Mempools keep allocated objects in reserved for situations when ordinary
    allocation may not be possible to satisfy.  These objects shouldn't be
    accessed before they leave the pool.
    
    This patch poison elements when get into the pool and unpoison when they
    leave it.  This will let KASan to detect use-after-free of mempool's
    elements.
    
    Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
    Tested-by: David Rientjes <rientjes@google.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Dmitry Chernenkov <drcheren@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Alexander Potapenko <glider@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bdfedb76f4f5aa5e37380e3b71adee4a39f30fc6
Author: David Rientjes <rientjes@google.com>
Date:   Wed Apr 15 16:14:17 2015 -0700

    mm, mempool: poison elements backed by slab allocator
    
    Mempools keep elements in a reserved pool for contexts in which allocation
    may not be possible.  When an element is allocated from the reserved pool,
    its memory contents is the same as when it was added to the reserved pool.
    
    Because of this, elements lack any free poisoning to detect use-after-free
    errors.
    
    This patch adds free poisoning for elements backed by the slab allocator.
    This is possible because the mempool layer knows the object size of each
    element.
    
    When an element is added to the reserved pool, it is poisoned with
    POISON_FREE.  When it is removed from the reserved pool, the contents are
    checked for POISON_FREE.  If there is a mismatch, a warning is emitted to
    the kernel log.
    
    This is only effective for configs with CONFIG_DEBUG_SLAB or
    CONFIG_SLUB_DEBUG_ON.
    
    [fabio.estevam@freescale.com: use '%zu' for printing 'size_t' variable]
    [arnd@arndb.de: add missing include]
    Signed-off-by: David Rientjes <rientjes@google.com>
    Cc: Dave Kleikamp <shaggy@kernel.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 69911416d87d6673c48d23a9fbc060e85f41fc73
Author: Doug Ledford <dledford@redhat.com>
Date:   Sat Feb 21 19:27:05 2015 -0500

    IB/ipoib: fix MCAST_FLAG_BUSY usage
    
    Commit a9c8ba5884 ("IPoIB: Fix usage of uninitialized multicast
    objects") added a new flag MCAST_JOIN_STARTED, but was not very strict
    in how it was used.  We didn't always initialize the completion struct
    before we set the flag, and we didn't always call complete on the
    completion struct from all paths that complete it.  And when we did
    complete it, sometimes we continued to touch the mcast entry after
    the completion, opening us up to possible use after free issues.
    
    This made it less than totally effective, and certainly made its use
    confusing.  And in the flush function we would use the presence of this
    flag to signal that we should wait on the completion struct, but we never
    cleared this flag, ever.
    
    In order to make things clearer and aid in resolving the rtnl deadlock
    bug I've been chasing, I cleaned this up a bit.
    
     1) Remove the MCAST_JOIN_STARTED flag entirely
     2) Change MCAST_FLAG_BUSY so it now only means a join is in-flight
     3) Test mcast->mc directly to see if we have completed
        ib_sa_join_multicast (using IS_ERR_OR_NULL)
     4) Make sure that before setting MCAST_FLAG_BUSY we always initialize
        the mcast->done completion struct
     5) Make sure that before calling complete(&mcast->done), we always clear
        the MCAST_FLAG_BUSY bit
     6) Take the mcast_mutex before we call ib_sa_multicast_join and also
        take the mutex in our join callback.  This forces
        ib_sa_multicast_join to return and set mcast->mc before we process
        the callback.  This way, our callback can safely clear mcast->mc
        if there is an error on the join and we will do the right thing as
        a result in mcast_dev_flush.
     7) Because we need the mutex to synchronize mcast->mc, we can no
        longer call mcast_sendonly_join directly from mcast_send and
        instead must add sendonly join processing to the mcast_join_task
     8) Make MCAST_RUN mean that we have a working mcast subsystem, not that
        we have a running task.  We know when we need to reschedule our
        join task thread and don't need a flag to tell us.
     9) Add a helper for rescheduling the join task thread
    
    A number of different races are resolved with these changes.  These
    races existed with the old MCAST_FLAG_BUSY usage, the
    MCAST_JOIN_STARTED flag was an attempt to address them, and while it
    helped, a determined effort could still trip things up.
    
    One race looks something like this:
    
    Thread 1                             Thread 2
    ib_sa_join_multicast (as part of running restart mcast task)
      alloc member
      call callback
                                         ifconfig ib0 down
                                         wait_for_completion
        callback call completes
                                         wait_for_completion in
                                         mcast_dev_flush completes
                                           mcast->mc is PTR_ERR_OR_NULL
                                           so we skip ib_sa_leave_multicast
        return from callback
      return from ib_sa_join_multicast
    set mcast->mc = return from ib_sa_multicast
    
    We now have a permanently unbalanced join/leave issue that trips up the
    refcounting in core/multicast.c
    
    Another like this:
    
    Thread 1                   Thread 2         Thread 3
    ib_sa_multicast_join
                                                ifconfig ib0 down
                                                priv->broadcast = NULL
                               join_complete
                                                wait_for_completion
                               mcast->mc is not yet set, so don't clear
    return from ib_sa_join_multicast and set mcast->mc
                               complete
                               return -EAGAIN (making mcast->mc invalid)
                                                call ib_sa_multicast_leave
                                                on invalid mcast->mc, hang
                                                forever
    
    By holding the mutex around ib_sa_multicast_join and taking the mutex
    early in the callback, we force mcast->mc to be valid at the time we
    run the callback.  This allows us to clear mcast->mc if there is an
    error and the join is going to fail.  We do this before we complete
    the mcast.  In this way, mcast_dev_flush always sees consistent state
    in regards to mcast->mc membership at the time that the
    wait_for_completion() returns.
    
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commits)
      vfio-pci: Fix use after free
      vfio-pci: Move idle devices to D3hot power state
      vfio-pci: Remove warning if try-reset fails
      vfio-pci: Allow PCI IDs to be specified as module options
      vfio-pci: Add VGA arbiter client
      vfio-pci: Add module option to disable VGA region access
      vgaarb: Stub vga_set_legacy_decoding()
      vfio: Split virqfd into a separate module for vfio bus drivers
      vfio: virqfd_lock can be static
      vfio: put off the allocation of "minor" in vfio_create_group
      vfio/platform: implement IRQ masking/unmasking via an eventfd
      vfio: initialize the virqfd workqueue in VFIO generic code
      vfio: move eventfd support code for VFIO_PCI to a separate file
      vfio: pass an opaque pointer on virqfd initialization
      vfio: add local lock for virqfd instead of depending on VFIO PCI
      vfio: virqfd: rename vfio_pci_virqfd_init and vfio_pci_virqfd_exit
      vfio: add a vfio_ prefix to virqfd_enable and virqfd_disable and export
      vfio/platform: support for level sensitive interrupts
      vfio/platform: trigger an interrupt via eventfd
      vfio/platform: initial interrupts support code
      ...

commit cdfb080e1853660952db5e5332727e59427856df
Author: Chris Mason <clm@fb.com>
Date:   Mon Apr 6 18:17:00 2015 -0700

    Btrfs: fix use after free when close_ctree frees the orphan_rsv
    
    Near the end of close_ctree, we're calling btrfs_free_block_rsv
    to free up the orphan rsv.  The problem is this call updates the
    space_info, which has already been freed.
    
    This adds a new __ function that directly calls kfree instead of trying
    to update the space infos.
    
    Signed-off-by: Chris Mason <clm@fb.com>

commit d7b9ca2f7a41cd36f5ca6c220df48ca9294ed37a
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Apr 7 16:21:09 2015 +0100

    drm/i915: Remove request->uniq
    
    We already assign a unique identifier to every request: seqno. That
    someone felt like adding a second one without even mentioning why and
    tweaking ABI smells very fishy.
    
    Fixes regression from
    commit b3a38998f042b862f5ba4d7f2268f3a8dfb4883a
    Author: Nick Hoath <nicholas.hoath@intel.com>
    Date:   Thu Feb 19 16:30:47 2015 +0000
    
        drm/i915: Fix a use after free, and unbalanced refcounting
    
    v2: Rebase
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Nick Hoath <nicholas.hoath@intel.com>
    Cc: Thomas Daniel <thomas.daniel@intel.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Jani Nikula <jani.nikula@intel.com>
    [danvet: Fixup because different merge order.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 5a0ff17741c1785b27229a16b5ab77470d71b170
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Wed Apr 8 08:11:51 2015 -0600

    vfio-pci: Fix use after free
    
    Reported by 0-day test infrastructure.
    
    Fixes: ecaa1f6a0154 ("vfio-pci: Add VGA arbiter client")
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

commits)
      cxgb4: Fix to dump devlog, even if FW is crashed
      cxgb4: Firmware macro changes for fw verison 1.13.32.0
      bnx2x: Fix kdump when iommu=on
      bnx2x: Fix kdump on 4-port device
      mac80211: fix RX A-MPDU session reorder timer deletion
      MAINTAINERS: Update Intel Wired Ethernet Driver info
      tipc: fix a slab object leak
      net/usb/r8152: add device id for Lenovo TP USB 3.0 Ethernet
      af_iucv: fix AF_IUCV sendmsg() errno
      openvswitch: Return vport module ref before destruction
      netlink: pad nla_memcpy dest buffer with zeroes
      bonding: Bonding Overriding Configuration logic restored.
      ipvlan: fix check for IP addresses in control path
      ipvlan: do not use rcu operations for address list
      ipvlan: protect against concurrent link removal
      ipvlan: fix addr hash list corruption
      net: fec: setup right value for mdio hold time
      net: tcp6: fix double call of tcp_v6_fill_cb()
      cxgb4vf: Fix sparse warnings
      netns: don't clear nsid too early on removal
      ...

commit 788211d81bfdf9b6a547d0530f206ba6ee76b107
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Apr 1 14:20:42 2015 +0200

    mac80211: fix RX A-MPDU session reorder timer deletion
    
    There's an issue with the way the RX A-MPDU reorder timer is
    deleted that can cause a kernel crash like this:
    
     * tid_rx is removed - call_rcu(ieee80211_free_tid_rx)
     * station is destroyed
     * reorder timer fires before ieee80211_free_tid_rx() runs,
       accessing the station, thus potentially crashing due to
       the use-after-free
    
    The station deletion is protected by synchronize_net(), but
    that isn't enough -- ieee80211_free_tid_rx() need not have
    run when that returns (it deletes the timer.) We could use
    rcu_barrier() instead of synchronize_net(), but that's much
    more expensive.
    
    Instead, to fix this, add a field tracking that the session
    is being deleted. In this case, the only re-arming of the
    timer happens with the reorder spinlock held, so make that
    code not rearm it if the session is being deleted and also
    delete the timer after setting that field. This ensures the
    timer cannot fire after ___ieee80211_stop_rx_ba_session()
    returns, which fixes the problem.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit ff65be7a58201ca7843813f92192d997a2a4b4ee
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Fri Mar 27 12:41:15 2015 +0100

    greybus: operation: fix use-after-free and infinite loop on unhandled requests
    
    Make sure to return a proper response in case we get a request we do not
    recognise.
    
    This fixes an infinite loop and use-after-free bug, where the freed
    operations structure would get re-added to the work queue indefinitely.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

commit 0fb5acc4018c0da61f9084932d0cd816fab77eec
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Fri Mar 27 12:41:13 2015 +0100

    greybus: operation: fix use-after-free when sending responses
    
    Fix use-after-free when sending responses due to reference imbalance.
    
    Make sure to take a reference to the operation when sending responses.
    This reference is dropped in greybus_data_sent when the message has been
    sent, while the initial reference is dropped in gb_operation_work after
    processing the corresponding request.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

commit ba7c95ea3870fe7b847466d39a049ab6f156aa2c
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Mar 24 09:53:17 2015 +1100

    rhashtable: Fix sleeping inside RCU critical section in walk_stop
    
    The commit 963ecbd41a1026d99ec7537c050867428c397b89 ("rhashtable:
    Fix use-after-free in rhashtable_walk_stop") fixed a real bug
    but created another one because we may end up sleeping inside an
    RCU critical section.
    
    This patch fixes it properly by replacing the mutex with a spin
    lock that specifically protects the walker lists.
    
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e1e9bda22d7ddf88515e8fe401887e313922823e
Author: David Disseldorp <ddiss@suse.de>
Date:   Fri Mar 13 14:20:29 2015 +0100

    cifs: fix use-after-free bug in find_writable_file
    
    Under intermittent network outages, find_writable_file() is susceptible
    to the following race condition, which results in a user-after-free in
    the cifs_writepages code-path:
    
    Thread 1                                        Thread 2
    ========                                        ========
    
    inv_file = NULL
    refind = 0
    spin_lock(&cifs_file_list_lock)
    
    // invalidHandle found on openFileList
    
    inv_file = open_file
    // inv_file->count currently 1
    
    cifsFileInfo_get(inv_file)
    // inv_file->count = 2
    
    spin_unlock(&cifs_file_list_lock);
    
    cifs_reopen_file()                            cifs_close()
    // fails (rc != 0)                            ->cifsFileInfo_put()
                                           spin_lock(&cifs_file_list_lock)
                                           // inv_file->count = 1
                                           spin_unlock(&cifs_file_list_lock)
    
    spin_lock(&cifs_file_list_lock);
    list_move_tail(&inv_file->flist,
          &cifs_inode->openFileList);
    spin_unlock(&cifs_file_list_lock);
    
    cifsFileInfo_put(inv_file);
    ->spin_lock(&cifs_file_list_lock)
    
      // inv_file->count = 0
      list_del(&cifs_file->flist);
      // cleanup!!
      kfree(cifs_file);
    
      spin_unlock(&cifs_file_list_lock);
    
    spin_lock(&cifs_file_list_lock);
    ++refind;
    // refind = 1
    goto refind_writable;
    
    At this point we loop back through with an invalid inv_file pointer
    and a refind value of 1. On second pass, inv_file is not overwritten on
    openFileList traversal, and is subsequently dereferenced.
    
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Reviewed-by: Jeff Layton <jlayton@samba.org>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Steve French <smfrench@gmail.com>

commit 44538397e79987080adc619c6fd4edda92093d46
Author: Johan Hovold <johan@hovoldconsulting.com>
Date:   Tue Mar 17 10:55:52 2015 +0100

    greybus: connection: fix oops after failed init
    
    Make sure not to call connection_exit for connections that have never
    been initialised (e.g. due to failure to init).
    
    This fixes oopses due to null-dereferences and use-after-free in
    connection_exit callbacks (e.g. trying to remove a gpio-chip that has
    never been added) when the bundle and interface are ultimately
    destroyed.
    
    Signed-off-by: Johan Hovold <johan@hovoldconsulting.com>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

commit 963ecbd41a1026d99ec7537c050867428c397b89
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sun Mar 15 21:12:04 2015 +1100

    rhashtable: Fix use-after-free in rhashtable_walk_stop
    
    The commit c4db8848af6af92f90462258603be844baeab44d ("rhashtable:
    Move future_tbl into struct bucket_table") introduced a use-after-
    free bug in rhashtable_walk_stop because it dereferences tbl after
    droping the RCU read lock.
    
    This patch fixes it by moving the RCU read unlock down to the bottom
    of rhashtable_walk_stop.  In fact this was how I had it originally
    but it got dropped while rearranging patches because this one
    depended on the async freeing of bucket_table.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2bb2077ee607703771c35ed74837180760f9ce07
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 13 12:11:42 2015 +0300

    usb: gadget: printer: use after free in gprinter_alloc_inst()
    
    There was a missing goto so we free "opts" and then dereference it.
    
    Fixes: ee1cd515e889 ('usb: gadget: printer: add configfs support')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 8051a2a518fcf3827a143470083ad6008697ff17
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Mar 12 11:53:41 2015 +1030

    9p/trans_virtio: fix hot-unplug
    
    On device hot-unplug, 9p/virtio currently will kfree channel while
    it might still be in use.
    
    Of course, it might stay used forever, so it's an extremely ugly hack,
    but it seems better than use-after-free that we have now.
    
    [ Unused variable removed, whitespace cleanup, msg single-lined --RR ]
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commits)
      xhci: Workaround for PME stuck issues in Intel xhci
      xhci: fix reporting of 0-sized URBs in control endpoint
      usb: ftdi_sio: Add jtag quirk support for Cyber Cortex AV boards
      USB: ch341: set tty baud speed according to tty struct
      USB: serial: cp210x: Adding Seletek device id's
      USB: pl2303: disable break on shutdown
      USB: mxuport: fix null deref when used as a console
      USB: serial: clean up bus probe error handling
      USB: serial: fix port attribute-creation race
      USB: serial: fix tty-device error handling at probe
      USB: serial: fix potential use-after-free after failed probe
      USB: console: add dummy __module_get
      USB: ftdi_sio: add PIDs for Actisense USB devices
      Revert "USB: serial: make bulk_out_size a lower limit"
      cdc-acm: Add support for Denso cradle CU-321
      usb-storage: support for more than 8 LUNs
      uas: Add US_FL_NO_REPORT_OPCODES for JMicron JMS539
      USB: usbfs: don't leak kernel data in siginfo
      xhci: Clear the host side toggle manually when endpoint is 'soft reset'
      xhci: Allocate correct amount of scratchpad buffers
      ...

commits)
      drm: atmel-hlcdc: remove clock polarity from crtc driver
      drm/radeon: only enable DP audio if the monitor supports it
      drm/radeon: fix atom aux payload size check for writes (v2)
      drm/radeon: fix 1 RB harvest config setup for TN/RL
      drm/radeon: enable SRBM timeout interrupt on EG/NI
      drm/radeon: enable SRBM timeout interrupt on SI
      drm/radeon: enable SRBM timeout interrupt on CIK v2
      drm/radeon: dump full IB if we hit a packet error
      drm/radeon: disable mclk switching with 120hz+ monitors
      drm/radeon: use drm_mode_vrefresh() rather than mode->vrefresh
      drm/radeon: enable native backlight control on old macs
      drm/i915: Fix frontbuffer false positve.
      drm/i915: Align initial plane backing objects correctly
      drm/i915: avoid processing spurious/shared interrupts in low-power states
      drm/i915: Check obj->vma_list under the struct_mutex
      drm/i915: Fix a use after free, and unbalanced refcounting
      drm: atmel-hlcdc: remove useless pm_runtime_put_sync in probe
      drm: atmel-hlcdc: reset layer A2Q and UPDATE bits when disabling it
      drm: Fix deadlock due to getconnector locking changes
      drm/i915: Dell Chromebook 11 has PWM backlight
      ...

commit 07fdfc5e9f1c966be8722e8fa927e5ea140df5ce
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Feb 18 10:34:50 2015 +0700

    USB: serial: fix potential use-after-free after failed probe
    
    Fix return value in probe error path, which could end up returning
    success (0) on errors. This could in turn lead to use-after-free or
    double free (e.g. in port_remove) when the port device is removed.
    
    Fixes: c706ebdfc895 ("USB: usb-serial: call port_probe and port_remove
    at the right times")
    Cc: stable <stable@vger.kernel.org>     # v2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Acked-by: Greg Kroah-Hartman <greg@kroah.com>

commit b3a38998f042b862f5ba4d7f2268f3a8dfb4883a
Author: Nick Hoath <nicholas.hoath@intel.com>
Date:   Thu Feb 19 16:30:47 2015 +0000

    drm/i915: Fix a use after free, and unbalanced refcounting
    
    When converting from implicitly tracked execlist queue items to ref counted
    requests, not all frees of requests were replaced with unrefs, and extraneous
    refs/unrefs of contexts were added.
    Correct the unbalanced refcount & replace the frees.
    Remove a noisy warning when hitting the request creation path.
    
    drm_i915_gem_request and intel_context are both kref reference counted
    structures. Upon allocation, drm_i915_gem_request's ref count should be
    bumped using kref_init. When a context is assigned to the request,
    the context's reference count should be bumped using i915_gem_context_reference.
    i915_gem_request_reference will reduce the context reference count when
    the request is freed.
    
    Problem introduced in
    commit 6d3d8274bc45de4babb62d64562d92af984dd238
    Author:     Nick Hoath <nicholas.hoath@intel.com>
    AuthorDate: Thu Jan 15 13:10:39 2015 +0000
    
         drm/i915: Subsume intel_ctx_submit_request in to drm_i915_gem_request
    
    v2: Added comments explaining how the ctx pointer and the request object should
    be ref-counted. Removed noisy warning.
    
    v3: Cleaned up the language used in the commit & the header
    description (Thanks David Gordon)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=88652
    Signed-off-by: Nick Hoath <nicholas.hoath@intel.com>
    Reviewed-by: Thomas Daniel <thomas.daniel@intel.com>
    Reviewed-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 02263db00b6cb98701332aa257c07ca549c2324b
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Fri Feb 20 17:11:10 2015 +0100

    netfilter: nf_tables: fix addition/deletion of elements from commit/abort
    
    We have several problems in this path:
    
    1) There is a use-after-free when removing individual elements from
       the commit path.
    
    2) We have to uninit() the data part of the element from the abort
       path to avoid a chain refcount leak.
    
    3) We have to check for set->flags to see if there's a mapping, instead
       of the element flags.
    
    4) We have to check for !(flags & NFT_SET_ELEM_INTERVAL_END) to skip
       elements that are part of the interval that have no data part, so
       they don't need to be uninit().
    
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit to use pnfs_layout_mark_request_commit
      NFSv4: Kill unused nfs_inode->delegation_state field
      NFS: struct nfs_commit_info.lock must always point to inode->i_lock
      nfs: Can call nfs_clear_page_commit() instead
      nfs: Provide and use helper functions for marking a page as unstable
      SUNRPC: Always manipulate rpc_rqst::rq_bc_pa_list under xprt->bc_pa_lock
      SUNRPC: Fix a compile error when #undef CONFIG_PROC_FS
      NFSv4.1: Convert open-coded array allocation calls to kmalloc_array()
      NFSv4.1: Fix a kfree() of uninitialised pointers in decode_cb_sequence_args

commits)
      Btrfs: don't remove extents and xattrs when logging new names
      Btrfs: fix fsync data loss after adding hard link to inode
      Btrfs: fix BUG_ON in btrfs_orphan_add() when delete unused block group
      Btrfs: account for large extents with enospc
      Btrfs: don't set and clear delalloc for O_DIRECT writes
      Btrfs: only adjust outstanding_extents when we do a short write
      btrfs: Fix out-of-space bug
      Btrfs: scrub, fix sleep in atomic context
      Btrfs: fix scheduler warning when syncing log
      Btrfs: Remove unnecessary placeholder in btrfs_err_code
      btrfs: cleanup init for list in free-space-cache
      btrfs: delete chunk allocation attemp when setting block group ro
      btrfs: clear bio reference after submit_one_bio()
      Btrfs: fix scrub race leading to use-after-free
      Btrfs: add missing cleanup on sysfs init failure
      Btrfs: fix race between transaction commit and empty block group removal
      btrfs: add more checks to btrfs_read_sys_array
      btrfs: cleanup, rename a few variables in btrfs_read_sys_array
      btrfs: add checks for sys_chunk_array sizes
      btrfs: more superblock checks, lower bounds on devices and sectorsize/nodesize
      ...

commit f01d35a15fa04162a58b95970fc01fa70ec9dacd
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Feb 6 02:07:45 2015 -0500

    gadgetfs: use-after-free in ->aio_read()
    
    AIO_PREAD requests call ->aio_read() with iovec on caller's stack, so if
    we are going to access it asynchronously, we'd better get ourselves
    a copy - the one on kernel stack of aio_run_iocb() won't be there
    anymore.  function/f_fs.c take care of doing that, legacy/inode.c
    doesn't...
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commits)
      usb: musb: fix device hotplug behind hub
      usb: dwc2: Fix a bug in reading the endpoint directions from reg.
      staging: emxx_udc: fix the build error
      usb: Retry port status check on resume to work around RH bugs
      Revert "usb: Reset USB-3 devices on USB-3 link bounce"
      uhci-hub: use HUB_CHAR_*
      usb: kconfig: replace PPC_OF with PPC
      ehci-pci: disable for Intel MID platforms (update)
      usb: gadget: Kconfig: use bool instead of boolean
      usb: musb: blackfin: remove incorrect __exit_p()
      USB: fix use-after-free bug in usb_hcd_unlink_urb()
      ehci-pci: disable for Intel MID platforms
      usb: host: pci_quirks: joing string literals
      USB: add flag for HCDs that can't receive wakeup requests (isp1760-hcd)
      USB: usbfs: allow URBs to be reaped after disconnection
      cdc-acm: kill unnecessary messages
      cdc-acm: add sanity checks
      usb: phy: phy-generic: Fix USB PHY gpio reset
      usb: dwc2: fix USB core dependencies
      usb: renesas_usbhs: fix NULL pointer dereference in dma_release_channel()
      ...

commit f55985f4dda5cfb6967c17e96237f3c859076eb3
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Feb 9 21:14:24 2015 +0000

    Btrfs: scrub, fix sleep in atomic context
    
    My previous patch "Btrfs: fix scrub race leading to use-after-free"
    introduced the possibility to sleep in an atomic context, which happens
    when the scrub_lock mutex is held at the time scrub_pending_bio_dec()
    is called - this function can be called under an atomic context.
    Chris ran into this in a debug kernel which gave the following trace:
    
    [ 1928.950319] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:621
    [ 1928.967334] in_atomic(): 1, irqs_disabled(): 0, pid: 149670, name: fsstress
    [ 1928.981324] INFO: lockdep is turned off.
    [ 1928.989244] CPU: 24 PID: 149670 Comm: fsstress Tainted: G        W     3.19.0-rc7-mason+ #41
    [ 1929.006418] Hardware name: ZTSYSTEMS Echo Ridge T4  /A9DRPF-10D, BIOS 1.07 05/10/2012
    [ 1929.022207]  ffffffff81a22cf8 ffff881076e03b78 ffffffff816b8dd9 ffff881076e03b78
    [ 1929.037267]  ffff880d8e828710 ffff881076e03ba8 ffffffff810856c4 ffff881076e03bc8
    [ 1929.052315]  0000000000000000 000000000000026d ffffffff81a22cf8 ffff881076e03bd8
    [ 1929.067381] Call Trace:
    [ 1929.072344]  <IRQ>  [<ffffffff816b8dd9>] dump_stack+0x4f/0x6e
    [ 1929.083968]  [<ffffffff810856c4>] ___might_sleep+0x174/0x230
    [ 1929.095352]  [<ffffffff810857d2>] __might_sleep+0x52/0x90
    [ 1929.106223]  [<ffffffff816bb68f>] mutex_lock_nested+0x2f/0x3b0
    [ 1929.117951]  [<ffffffff810ab37d>] ? trace_hardirqs_on+0xd/0x10
    [ 1929.129708]  [<ffffffffa05dc838>] scrub_pending_bio_dec+0x38/0x70 [btrfs]
    [ 1929.143370]  [<ffffffffa05dd0e0>] scrub_parity_bio_endio+0x50/0x70 [btrfs]
    [ 1929.157191]  [<ffffffff812fa603>] bio_endio+0x53/0xa0
    [ 1929.167382]  [<ffffffffa05f96bc>] rbio_orig_end_io+0x7c/0xa0 [btrfs]
    [ 1929.180161]  [<ffffffffa05f97ba>] raid_write_parity_end_io+0x5a/0x80 [btrfs]
    [ 1929.194318]  [<ffffffff812fa603>] bio_endio+0x53/0xa0
    [ 1929.204496]  [<ffffffff8130401b>] blk_update_request+0x1eb/0x450
    [ 1929.216569]  [<ffffffff81096e58>] ? trigger_load_balance+0x78/0x500
    [ 1929.229176]  [<ffffffff8144c74d>] scsi_end_request+0x3d/0x1f0
    [ 1929.240740]  [<ffffffff8144ccac>] scsi_io_completion+0xac/0x5b0
    [ 1929.252654]  [<ffffffff81441c50>] scsi_finish_command+0xf0/0x150
    [ 1929.264725]  [<ffffffff8144d317>] scsi_softirq_done+0x147/0x170
    [ 1929.276635]  [<ffffffff8130ace6>] blk_done_softirq+0x86/0xa0
    [ 1929.288014]  [<ffffffff8105d92e>] __do_softirq+0xde/0x600
    [ 1929.298885]  [<ffffffff8105df6d>] irq_exit+0xbd/0xd0
    (...)
    
    Fix this by using a reference count on the scrub context structure
    instead of locking the scrub_lock mutex.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commit 3f15801cdc2379ca4bf507f48bffd788f9e508ae
Author: Andrey Ryabinin <a.ryabinin@samsung.com>
Date:   Fri Feb 13 14:39:53 2015 -0800

    lib: add kasan test module
    
    This is a test module doing various nasty things like out of bounds
    accesses, use after free.  It is useful for testing kernel debugging
    features like kernel address sanitizer.
    
    It mostly concentrates on testing of slab allocator, but we might want to
    add more different stuff here in future (like stack/global variables out
    of bounds accesses and so on).
    
    Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Konstantin Serebryany <kcc@google.com>
    Cc: Dmitry Chernenkov <dmitryc@google.com>
    Signed-off-by: Andrey Konovalov <adech.fo@gmail.com>
    Cc: Yuri Gribov <tetra2005@gmail.com>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0b24becc810dc3be6e3f94103a866f214c282394
Author: Andrey Ryabinin <a.ryabinin@samsung.com>
Date:   Fri Feb 13 14:39:17 2015 -0800

    kasan: add kernel address sanitizer infrastructure
    
    Kernel Address sanitizer (KASan) is a dynamic memory error detector.  It
    provides fast and comprehensive solution for finding use-after-free and
    out-of-bounds bugs.
    
    KASAN uses compile-time instrumentation for checking every memory access,
    therefore GCC > v4.9.2 required.  v4.9.2 almost works, but has issues with
    putting symbol aliases into the wrong section, which breaks kasan
    instrumentation of globals.
    
    This patch only adds infrastructure for kernel address sanitizer.  It's
    not available for use yet.  The idea and some code was borrowed from [1].
    
    Basic idea:
    
    The main idea of KASAN is to use shadow memory to record whether each byte
    of memory is safe to access or not, and use compiler's instrumentation to
    check the shadow memory on each memory access.
    
    Address sanitizer uses 1/8 of the memory addressable in kernel for shadow
    memory and uses direct mapping with a scale and offset to translate a
    memory address to its corresponding shadow address.
    
    Here is function to translate address to corresponding shadow address:
    
         unsigned long kasan_mem_to_shadow(unsigned long addr)
         {
                    return (addr >> KASAN_SHADOW_SCALE_SHIFT) + KASAN_SHADOW_OFFSET;
         }
    
    where KASAN_SHADOW_SCALE_SHIFT = 3.
    
    So for every 8 bytes there is one corresponding byte of shadow memory.
    The following encoding used for each shadow byte: 0 means that all 8 bytes
    of the corresponding memory region are valid for access; k (1 <= k <= 7)
    means that the first k bytes are valid for access, and other (8 - k) bytes
    are not; Any negative value indicates that the entire 8-bytes are
    inaccessible.  Different negative values used to distinguish between
    different kinds of inaccessible memory (redzones, freed memory) (see
    mm/kasan/kasan.h).
    
    To be able to detect accesses to bad memory we need a special compiler.
    Such compiler inserts a specific function calls (__asan_load*(addr),
    __asan_store*(addr)) before each memory access of size 1, 2, 4, 8 or 16.
    
    These functions check whether memory region is valid to access or not by
    checking corresponding shadow memory.  If access is not valid an error
    printed.
    
    Historical background of the address sanitizer from Dmitry Vyukov:
    
            "We've developed the set of tools, AddressSanitizer (Asan),
            ThreadSanitizer and MemorySanitizer, for user space. We actively use
            them for testing inside of Google (continuous testing, fuzzing,
            running prod services). To date the tools have found more than 10'000
            scary bugs in Chromium, Google internal codebase and various
            open-source projects (Firefox, OpenSSL, gcc, clang, ffmpeg, MySQL and
            lots of others): [2] [3] [4].
            The tools are part of both gcc and clang compilers.
    
            We have not yet done massive testing under the Kernel AddressSanitizer
            (it's kind of chicken and egg problem, you need it to be upstream to
            start applying it extensively). To date it has found about 50 bugs.
            Bugs that we've found in upstream kernel are listed in [5].
            We've also found ~20 bugs in out internal version of the kernel. Also
            people from Samsung and Oracle have found some.
    
            [...]
    
            As others noted, the main feature of AddressSanitizer is its
            performance due to inline compiler instrumentation and simple linear
            shadow memory. User-space Asan has ~2x slowdown on computational
            programs and ~2x memory consumption increase. Taking into account that
            kernel usually consumes only small fraction of CPU and memory when
            running real user-space programs, I would expect that kernel Asan will
            have ~10-30% slowdown and similar memory consumption increase (when we
            finish all tuning).
    
            I agree that Asan can well replace kmemcheck. We have plans to start
            working on Kernel MemorySanitizer that finds uses of unitialized
            memory. Asan+Msan will provide feature-parity with kmemcheck. As
            others noted, Asan will unlikely replace debug slab and pagealloc that
            can be enabled at runtime. Asan uses compiler instrumentation, so even
            if it is disabled, it still incurs visible overheads.
    
            Asan technology is easily portable to other architectures. Compiler
            instrumentation is fully portable. Runtime has some arch-dependent
            parts like shadow mapping and atomic operation interception. They are
            relatively easy to port."
    
    Comparison with other debugging features:
    ========================================
    
    KMEMCHECK:
    
      - KASan can do almost everything that kmemcheck can.  KASan uses
        compile-time instrumentation, which makes it significantly faster than
        kmemcheck.  The only advantage of kmemcheck over KASan is detection of
        uninitialized memory reads.
    
        Some brief performance testing showed that kasan could be
        x500-x600 times faster than kmemcheck:
    
    $ netperf -l 30
                    MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost (127.0.0.1) port 0 AF_INET
                    Recv   Send    Send
                    Socket Socket  Message  Elapsed
                    Size   Size    Size     Time     Throughput
                    bytes  bytes   bytes    secs.    10^6bits/sec
    
    no debug:       87380  16384  16384    30.00    41624.72
    
    kasan inline:   87380  16384  16384    30.00    12870.54
    
    kasan outline:  87380  16384  16384    30.00    10586.39
    
    kmemcheck:      87380  16384  16384    30.03      20.23
    
      - Also kmemcheck couldn't work on several CPUs.  It always sets
        number of CPUs to 1.  KASan doesn't have such limitation.
    
    DEBUG_PAGEALLOC:
            - KASan is slower than DEBUG_PAGEALLOC, but KASan works on sub-page
              granularity level, so it able to find more bugs.
    
    SLUB_DEBUG (poisoning, redzones):
            - SLUB_DEBUG has lower overhead than KASan.
    
            - SLUB_DEBUG in most cases are not able to detect bad reads,
              KASan able to detect both reads and writes.
    
            - In some cases (e.g. redzone overwritten) SLUB_DEBUG detect
              bugs only on allocation/freeing of object. KASan catch
              bugs right before it will happen, so we always know exact
              place of first bad read/write.
    
    [1] https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel
    [2] https://code.google.com/p/address-sanitizer/wiki/FoundBugs
    [3] https://code.google.com/p/thread-sanitizer/wiki/FoundBugs
    [4] https://code.google.com/p/memory-sanitizer/wiki/FoundBugs
    [5] https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel#Trophies
    
    Based on work by Andrey Konovalov.
    
    Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
    Acked-by: Michal Marek <mmarek@suse.cz>
    Signed-off-by: Andrey Konovalov <adech.fo@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Konstantin Serebryany <kcc@google.com>
    Cc: Dmitry Chernenkov <dmitryc@google.com>
    Cc: Yuri Gribov <tetra2005@gmail.com>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      cipso: don't use IPCB() to locate the CIPSO IP option
      SELinux: fix error code in policydb_init()
      selinux: add security in-core xattr support for pstore and debugfs
      selinux: quiet the filesystem labeling behavior message
      selinux: Remove unused function avc_sidcmp()
      ima: /proc/keys is now mandatory
      Smack: Repair netfilter dependency
      X.509: silence asn1 compiler debug output
      X.509: shut up about included cert for silent build
      KEYS: Make /proc/keys unconditional if CONFIG_KEYS=y
      MAINTAINERS: email update
      tpm/tpm_tis: Add missing ifdef CONFIG_ACPI for pnp_acpi_device
      smack: fix possible use after frees in task_security() callers
      smack: Add missing logging in bidirectional UDS connect check
      Smack: secmark support for netfilter
      Smack: Rework file hooks
      tpm: fix format string error in tpm-chip.c
      char/tpm/tpm_crb: fix build error
      smack: Fix a bidirectional UDS connect check typo
      smack: introduce a special case for tmpfs in smack_d_instantiate()
      ...

commit 460822b0b1a77db859b0320469799fa4dbe4d367
Author: Michał Winiarski <michal.winiarski@intel.com>
Date:   Tue Feb 3 15:48:17 2015 +0100

    drm/i915: Prevent use-after-free in invalidate_range_start callback
    
    It's possible for invalidate_range_start mmu notifier callback to race
    against userptr object release. If the gem object was released prior to
    obtaining the spinlock in invalidate_range_start we're hitting null
    pointer dereference.
    
    Testcase: igt/gem_userptr_blits/stress-mm-invalidate-close
    Testcase: igt/gem_userptr_blits/stress-mm-invalidate-close-overlap
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Michał Winiarski <michal.winiarski@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    [Jani: added code comment suggested by Chris]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commits)
      drm/i915: Remove bogus locking check in the hangcheck code
      drm/i915: Update DRIVER_DATE to 20150130
      drm/i915: Use pipe_config's cpu_transcoder for reading encoder hw state
      drm/i915: Fix a use-after-free in intel_execlists_retire_requests
      drm/i915: Split shared dpll setup out of __intel_set_mode()
      drm/i915: Don't do posting reads on getting forcewake
      drm/i915: Do uncore early sanitize after domain init
      drm/i915: Handle CHV in vlv_set_rps_idle()
      drm/i915: Remove nested work in gpu error handling
      drm/i915/documentation: Add intel_uncore.c to drm.tmpl
      drm/i915/dsi: remove intel_dsi_cmd.c and the unused functions therein
      drm/i915/dsi: move dpi_send_cmd() to intel_dsi.c and make it static
      drm/i915/dsi: remove old read/write functions in favor of new stuff
      drm/i915/dsi: make the vbt panel driver use mipi_dsi_device for transfers
      drm/i915/dsi: add drm mipi dsi host support
      drm/i915/dsi: switch to drm_panel interface
      drm/i915/skl: Enabling PSR on Skylake
      Revert "drm/i915: Fix mutex->owner inspection race under DEBUG_MUTEXES"
      drm/i915: Be consistent on printing seqnos
      drm/i915: Display current hangcheck status in debugfs
      ...

commit, and a proper rewrite of it.
    
      The rewrite has been tested by the users complaining about the
      regression, and it works fine now.  Additionally, I've run testing on
      all the blk-mq use cases for it and it passes.  So we should
      definitely get this into 3.19, to avoid regression for some cases"
    
    * 'for-linus' of git://git.kernel.dk/linux-block:
      blk-mq: release mq's kobjects in blk_release_queue()
      Revert "blk-mq: fix hctx/ctx kobject use-after-free"

commit de554a4fa61d77df2704be5b6b47472b2dbd1875
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Jan 27 23:06:42 2015 +0000

    Btrfs: fix scrub race leading to use-after-free
    
    While running a scrub on a kernel with CONFIG_DEBUG_PAGEALLOC=y, I got
    the following trace:
    
    [68127.807663] BUG: unable to handle kernel paging request at ffff8803f8947a50
    [68127.807663] IP: [<ffffffff8107da31>] do_raw_spin_lock+0x94/0x122
    [68127.807663] PGD 3003067 PUD 43e1f5067 PMD 43e030067 PTE 80000003f8947060
    [68127.807663] Oops: 0000 [#1] SMP DEBUG_PAGEALLOC
    [68127.807663] Modules linked in: dm_flakey dm_mod crc32c_generic btrfs xor raid6_pq nfsd auth_rpcgss oid_registry nfs_acl nfs lockd grace fscache sunrpc loop parport_pc processor parpo
    [68127.807663] CPU: 2 PID: 3081 Comm: kworker/u8:5 Not tainted 3.18.0-rc6-btrfs-next-3+ #4
    [68127.807663] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.7.5-0-ge51488c-20140602_164612-nilsson.home.kraxel.org 04/01/2014
    [68127.807663] Workqueue: btrfs-btrfs-scrub btrfs_scrub_helper [btrfs]
    [68127.807663] task: ffff880101fc5250 ti: ffff8803f097c000 task.ti: ffff8803f097c000
    [68127.807663] RIP: 0010:[<ffffffff8107da31>]  [<ffffffff8107da31>] do_raw_spin_lock+0x94/0x122
    [68127.807663] RSP: 0018:ffff8803f097fbb8  EFLAGS: 00010093
    [68127.807663] RAX: 0000000028dd386c RBX: ffff8803f8947a50 RCX: 0000000028dd3854
    [68127.807663] RDX: 0000000000000018 RSI: 0000000000000002 RDI: 0000000000000001
    [68127.807663] RBP: ffff8803f097fbd8 R08: 0000000000000004 R09: 0000000000000001
    [68127.807663] R10: ffff880102620980 R11: ffff8801f3e8c900 R12: 000000000001d390
    [68127.807663] R13: 00000000cabd13c8 R14: ffff8803f8947800 R15: ffff88037c574f00
    [68127.807663] FS:  0000000000000000(0000) GS:ffff88043dd00000(0000) knlGS:0000000000000000
    [68127.807663] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [68127.807663] CR2: ffff8803f8947a50 CR3: 00000000b6481000 CR4: 00000000000006e0
    [68127.807663] Stack:
    [68127.807663]  ffffffff823942a8 ffff8803f8947a50 ffff8802a3416f80 0000000000000000
    [68127.807663]  ffff8803f097fc18 ffffffff8141e7c0 ffffffff81072948 000000000034f314
    [68127.807663]  ffff8803f097fc08 0000000000000292 ffff8803f097fc48 ffff8803f8947a50
    [68127.807663] Call Trace:
    [68127.807663]  [<ffffffff8141e7c0>] _raw_spin_lock_irqsave+0x4b/0x55
    [68127.807663]  [<ffffffff81072948>] ? __wake_up+0x22/0x4b
    [68127.807663]  [<ffffffff81072948>] __wake_up+0x22/0x4b
    [68127.807663]  [<ffffffffa0392327>] scrub_pending_bio_dec+0x32/0x36 [btrfs]
    [68127.807663]  [<ffffffffa0395e70>] scrub_bio_end_io_worker+0x5a3/0x5c9 [btrfs]
    [68127.807663]  [<ffffffff810e0c7c>] ? time_hardirqs_off+0x15/0x28
    [68127.807663]  [<ffffffff81078106>] ? trace_hardirqs_off_caller+0x4c/0xb9
    [68127.807663]  [<ffffffffa0372a7c>] normal_work_helper+0xf1/0x238 [btrfs]
    [68127.807663]  [<ffffffffa0372d3d>] btrfs_scrub_helper+0x12/0x14 [btrfs]
    [68127.807663]  [<ffffffff810582d2>] process_one_work+0x1e4/0x3b6
    [68127.807663]  [<ffffffff81078180>] ? trace_hardirqs_off+0xd/0xf
    [68127.807663]  [<ffffffff81058dc9>] worker_thread+0x1fb/0x2a8
    [68127.807663]  [<ffffffff81058bce>] ? rescuer_thread+0x219/0x219
    [68127.807663]  [<ffffffff8105cd75>] kthread+0xdb/0xe3
    [68127.807663]  [<ffffffff8105cc9a>] ? __kthread_parkme+0x67/0x67
    [68127.807663]  [<ffffffff8141f1ec>] ret_from_fork+0x7c/0xb0
    [68127.807663]  [<ffffffff8105cc9a>] ? __kthread_parkme+0x67/0x67
    [68127.807663] Code: 39 c2 75 14 8d 8a 00 00 01 00 89 d0 f0 0f b1 0b 39 d0 0f 84 81 00 00 00 4c 69 2d 27 86 99 00 fa 00 00 00 45 31 e4 4d 39 ec 74 2b <8b> 13 89 d0 c1 e8 10 66 39 c2 75
    [68127.807663] RIP  [<ffffffff8107da31>] do_raw_spin_lock+0x94/0x122
    [68127.807663]  RSP <ffff8803f097fbb8>
    [68127.807663] CR2: ffff8803f8947a50
    [68127.807663] ---[ end trace d7045aac00a66cd8 ]---
    
    This is due to a race that can happen in a very tiny time window and is
    illustrated by the following sequence diagram:
    
             CPU 1                                                     CPU 2
    
                                                                    btrfs_scrub_dev()
    scrub_bio_end_io_worker()
       scrub_pending_bio_dec()
           atomic_dec(&sctx->bios_in_flight)
                                                                       wait sctx->bios_in_flight == 0
                                                                       wait sctx->workers_pending == 0
                                                                       mutex_lock(&fs_info->scrub_lock)
                                                                       (...)
                                                                       mutex_lock(&fs_info->scrub_lock)
                                                                       scrub_free_ctx(sctx)
                                                                          kfree(sctx)
           wake_up(&sctx->list_wait)
              __wake_up()
                  spin_lock_irqsave(&sctx->list_wait->lock, flags)
    
    Another variation of this scenario that results in the same use-after-free
    issue is:
    
             CPU 1                                                     CPU 2
    
                                                                    btrfs_scrub_dev()
                                                                       wait sctx->bios_in_flight == 0
    scrub_bio_end_io_worker()
       scrub_pending_bio_dec()
           __wake_up(&sctx->list_wait)
              spin_lock_irqsave(&sctx->list_wait->lock, flags)
              default_wake_function()
                  wake up task at CPU 2
                                                                       wait sctx->workers_pending == 0
                                                                       mutex_lock(&fs_info->scrub_lock)
                                                                       (...)
                                                                       mutex_lock(&fs_info->scrub_lock)
                                                                       scrub_free_ctx(sctx)
                                                                          kfree(sctx)
              spin_unlock_irqrestore(&sctx->list_wait->lock, flags)
    
    Fix this by holding the scrub lock while doing the wakeup.
    
    This isn't a recent regression, the issue as been around since the scrub
    feature was added (2011, commit a2de733c78fa7af51ba9670482fa7d392aa67c57).
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commit c99197902da284b4b723451c1471c45b18537cde
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Jan 30 12:58:26 2015 -0500

    USB: fix use-after-free bug in usb_hcd_unlink_urb()
    
    The usb_hcd_unlink_urb() routine in hcd.c contains two possible
    use-after-free errors.  The dev_dbg() statement at the end of the
    routine dereferences urb and urb->dev even though both structures may
    have been deallocated.
    
    This patch fixes the problem by storing urb->dev in a local variable
    (avoiding the dereference of urb) and moving the dev_dbg() up before
    the usb_put_dev() call.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Joe Lawrence <joe.lawrence@stratus.com>
    Tested-by: Joe Lawrence <joe.lawrence@stratus.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <greg@kroah.com>

commit f82107950e9bda3779610e37bdfdccae6fc16f87
Author: Nick Hoath <nicholas.hoath@intel.com>
Date:   Thu Jan 29 16:55:07 2015 +0000

    drm/i915: Fix a use-after-free in intel_execlists_retire_requests
    
    Remove request from list before unreferencing it, in case it's actually
    the only reference. (Found by Tvrtko Ursulin)
    
    This issue has been most likely introduced in
    
    commit 6d3d8274bc45de4babb62d64562d92af984dd238
    Author: Nick Hoath <nicholas.hoath@intel.com>
    Date:   Thu Jan 15 13:10:39 2015 +0000
    
        drm/i915: Subsume intel_ctx_submit_request in to drm_i915_gem_request
    
    Signed-off-by: Nick Hoath <nicholas.hoath@intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 74170118b26e55b611de5210f47657118a03a0e1
Author: Ming Lei <ming.lei@canonical.com>
Date:   Thu Jan 29 20:17:26 2015 +0800

    Revert "blk-mq: fix hctx/ctx kobject use-after-free"
    
    This reverts commit 76d697d10769048e5721510100bf3a9413a56385.
    
    The commit 76d697d10769048 causes general protection fault
    reported from Bart Van Assche:
    
            https://lkml.org/lkml/2015/1/28/334
    
    Reported-by: Bart Van Assche <bart.vanassche@sandisk.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit a75d46a4f405eb19ff780410b968c8092af3fb1d
Author: Michael Büsch <m@bues.ch>
Date:   Mon Jan 26 18:26:17 2015 +0100

    b43: Fix locking FIXME in beacon update top half
    
    b43 has a FIXME about locking in the mac80211 set-beacon-int callback for a long time.
    As it turns out there actually is a tiny race window that could result in
    a use-after-free bug of the 'current_beacon' memory.
    Nobody ever reported this, so it probably never happened.
    
    Fix this by adding a spin lock that protects the current_beacon access.
    We must not be in atomic context while accessing hardware (due to SDIO),
    so the beacon update bottom half has to clone the skb and release the lock
    before writing it to hardware.
    
    Let's all hope that this stops the troll who is trying to submit incorrect
    fixes for this issue repeatedly.
    And let's hope that I'm not a troll, too, who just hides even more evil code
    in an even more complex attempt to fix the issue.
    
    Signed-off-by: Michael Buesch <m@bues.ch>
    Tested-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commits)
      net: don't OOPS on socket aio
      stmmac: prevent probe drivers to crash kernel
      bnx2x: fix napi poll return value for repoll
      ipv6: replacing a rt6_info needs to purge possible propagated rt6_infos too
      sh_eth: Fix DMA-API usage for RX buffers
      sh_eth: Check for DMA mapping errors on transmit
      sh_eth: Ensure DMA engines are stopped before freeing buffers
      sh_eth: Remove RX overflow log messages
      ping: Fix race in free in receive path
      udp_diag: Fix socket skipping within chain
      can: kvaser_usb: Fix state handling upon BUS_ERROR events
      can: kvaser_usb: Retry the first bulk transfer on -ETIMEDOUT
      can: kvaser_usb: Send correct context to URB completion
      can: kvaser_usb: Do not sleep in atomic context
      ipv4: try to cache dst_entries which would cause a redirect
      samples: bpf: relax test_maps check
      bpf: rcu lock must not be held when calling copy_to_user()
      net: sctp: fix slab corruption from use after free on INIT collisions
      net: mv643xx_eth: Fix highmem support in non-TSO egress path
      sh_eth: Fix serialisation of interrupt disable with interrupt & NAPI handlers
      ...

commit 600ddd6825543962fb807884169e57b580dba208
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Thu Jan 22 18:26:54 2015 +0100

    net: sctp: fix slab corruption from use after free on INIT collisions
    
    When hitting an INIT collision case during the 4WHS with AUTH enabled, as
    already described in detail in commit 1be9a950c646 ("net: sctp: inherit
    auth_capable on INIT collisions"), it can happen that we occasionally
    still remotely trigger the following panic on server side which seems to
    have been uncovered after the fix from commit 1be9a950c646 ...
    
    [  533.876389] BUG: unable to handle kernel paging request at 00000000ffffffff
    [  533.913657] IP: [<ffffffff811ac385>] __kmalloc+0x95/0x230
    [  533.940559] PGD 5030f2067 PUD 0
    [  533.957104] Oops: 0000 [#1] SMP
    [  533.974283] Modules linked in: sctp mlx4_en [...]
    [  534.939704] Call Trace:
    [  534.951833]  [<ffffffff81294e30>] ? crypto_init_shash_ops+0x60/0xf0
    [  534.984213]  [<ffffffff81294e30>] crypto_init_shash_ops+0x60/0xf0
    [  535.015025]  [<ffffffff8128c8ed>] __crypto_alloc_tfm+0x6d/0x170
    [  535.045661]  [<ffffffff8128d12c>] crypto_alloc_base+0x4c/0xb0
    [  535.074593]  [<ffffffff8160bd42>] ? _raw_spin_lock_bh+0x12/0x50
    [  535.105239]  [<ffffffffa0418c11>] sctp_inet_listen+0x161/0x1e0 [sctp]
    [  535.138606]  [<ffffffff814e43bd>] SyS_listen+0x9d/0xb0
    [  535.166848]  [<ffffffff816149a9>] system_call_fastpath+0x16/0x1b
    
    ... or depending on the the application, for example this one:
    
    [ 1370.026490] BUG: unable to handle kernel paging request at 00000000ffffffff
    [ 1370.026506] IP: [<ffffffff811ab455>] kmem_cache_alloc+0x75/0x1d0
    [ 1370.054568] PGD 633c94067 PUD 0
    [ 1370.070446] Oops: 0000 [#1] SMP
    [ 1370.085010] Modules linked in: sctp kvm_amd kvm [...]
    [ 1370.963431] Call Trace:
    [ 1370.974632]  [<ffffffff8120f7cf>] ? SyS_epoll_ctl+0x53f/0x960
    [ 1371.000863]  [<ffffffff8120f7cf>] SyS_epoll_ctl+0x53f/0x960
    [ 1371.027154]  [<ffffffff812100d3>] ? anon_inode_getfile+0xd3/0x170
    [ 1371.054679]  [<ffffffff811e3d67>] ? __alloc_fd+0xa7/0x130
    [ 1371.080183]  [<ffffffff816149a9>] system_call_fastpath+0x16/0x1b
    
    With slab debugging enabled, we can see that the poison has been overwritten:
    
    [  669.826368] BUG kmalloc-128 (Tainted: G        W     ): Poison overwritten
    [  669.826385] INFO: 0xffff880228b32e50-0xffff880228b32e50. First byte 0x6a instead of 0x6b
    [  669.826414] INFO: Allocated in sctp_auth_create_key+0x23/0x50 [sctp] age=3 cpu=0 pid=18494
    [  669.826424]  __slab_alloc+0x4bf/0x566
    [  669.826433]  __kmalloc+0x280/0x310
    [  669.826453]  sctp_auth_create_key+0x23/0x50 [sctp]
    [  669.826471]  sctp_auth_asoc_create_secret+0xcb/0x1e0 [sctp]
    [  669.826488]  sctp_auth_asoc_init_active_key+0x68/0xa0 [sctp]
    [  669.826505]  sctp_do_sm+0x29d/0x17c0 [sctp] [...]
    [  669.826629] INFO: Freed in kzfree+0x31/0x40 age=1 cpu=0 pid=18494
    [  669.826635]  __slab_free+0x39/0x2a8
    [  669.826643]  kfree+0x1d6/0x230
    [  669.826650]  kzfree+0x31/0x40
    [  669.826666]  sctp_auth_key_put+0x19/0x20 [sctp]
    [  669.826681]  sctp_assoc_update+0x1ee/0x2d0 [sctp]
    [  669.826695]  sctp_do_sm+0x674/0x17c0 [sctp]
    
    Since this only triggers in some collision-cases with AUTH, the problem at
    heart is that sctp_auth_key_put() on asoc->asoc_shared_key is called twice
    when having refcnt 1, once directly in sctp_assoc_update() and yet again
    from within sctp_auth_asoc_init_active_key() via sctp_assoc_update() on
    the already kzfree'd memory, which is also consistent with the observation
    of the poison decrease from 0x6b to 0x6a (note: the overwrite is detected
    at a later point in time when poison is checked on new allocation).
    
    Reference counting of auth keys revisited:
    
    Shared keys for AUTH chunks are being stored in endpoints and associations
    in endpoint_shared_keys list. On endpoint creation, a null key is being
    added; on association creation, all endpoint shared keys are being cached
    and thus cloned over to the association. struct sctp_shared_key only holds
    a pointer to the actual key bytes, that is, struct sctp_auth_bytes which
    keeps track of users internally through refcounting. Naturally, on assoc
    or enpoint destruction, sctp_shared_key are being destroyed directly and
    the reference on sctp_auth_bytes dropped.
    
    User space can add keys to either list via setsockopt(2) through struct
    sctp_authkey and by passing that to sctp_auth_set_key() which replaces or
    adds a new auth key. There, sctp_auth_create_key() creates a new sctp_auth_bytes
    with refcount 1 and in case of replacement drops the reference on the old
    sctp_auth_bytes. A key can be set active from user space through setsockopt()
    on the id via sctp_auth_set_active_key(), which iterates through either
    endpoint_shared_keys and in case of an assoc, invokes (one of various places)
    sctp_auth_asoc_init_active_key().
    
    sctp_auth_asoc_init_active_key() computes the actual secret from local's
    and peer's random, hmac and shared key parameters and returns a new key
    directly as sctp_auth_bytes, that is asoc->asoc_shared_key, plus drops
    the reference if there was a previous one. The secret, which where we
    eventually double drop the ref comes from sctp_auth_asoc_set_secret() with
    intitial refcount of 1, which also stays unchanged eventually in
    sctp_assoc_update(). This key is later being used for crypto layer to
    set the key for the hash in crypto_hash_setkey() from sctp_auth_calculate_hmac().
    
    To close the loop: asoc->asoc_shared_key is freshly allocated secret
    material and independant of the sctp_shared_key management keeping track
    of only shared keys in endpoints and assocs. Hence, also commit 4184b2a79a76
    ("net: sctp: fix memory leak in auth key management") is independant of
    this bug here since it concerns a different layer (though same structures
    being used eventually). asoc->asoc_shared_key is reference dropped correctly
    on assoc destruction in sctp_association_free() and when active keys are
    being replaced in sctp_auth_asoc_init_active_key(), it always has a refcount
    of 1. Hence, it's freed prematurely in sctp_assoc_update(). Simple fix is
    to remove that sctp_auth_key_put() from there which fixes these panics.
    
    Fixes: 730fc3d05cd4 ("[SCTP]: Implete SCTP-AUTH parameter processing")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Acked-by: Vlad Yasevich <vyasevich@gmail.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fe6a043c535acfec8f8e554536c87923dcb45097
Author: Thomas Graf <tgraf@suug.ch>
Date:   Wed Jan 21 11:54:01 2015 +0000

    rhashtable: rhashtable_remove() must unlink in both tbl and future_tbl
    
    As removals can occur during resizes, entries may be referred to from
    both tbl and future_tbl when the removal is requested. Therefore
    rhashtable_remove() must unlink the entry in both tables if this is
    the case. The existing code did search both tables but stopped when it
    hit the first match.
    
    Failing to unlink in both tables resulted in use after free.
    
    Fixes: 97defe1ecf86 ("rhashtable: Per bucket locks & deferred expansion/shrinking")
    Reported-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2b25d981790b doesn't
         do what it was supposed to.
    
       - a fixup for the hotplug handling for blk-mq from Ming Lei, using
         the proper kobject referencing to ensure we release resources at
         the right time"
    
    * 'for-linus' of git://git.kernel.dk/linux-block:
      blk-mq: fix hctx/ctx kobject use-after-free
      NVMe: cq_vector should be signed

commit 5168910413830435fa3f0a593933a83721ec8bad
Author: Paul Moore <pmoore@redhat.com>
Date:   Thu Jan 22 00:00:03 2015 -0500

    fs: create proper filename objects using getname_kernel()
    
    There are several areas in the kernel that create temporary filename
    objects using the following pattern:
    
            int func(const char *name)
            {
                    struct filename *file = { .name = name };
                    ...
                    return 0;
            }
    
    ... which for the most part works okay, but it causes havoc within the
    audit subsystem as the filename object does not persist beyond the
    lifetime of the function.  This patch converts all of these temporary
    filename objects into proper filename objects using getname_kernel()
    and putname() which ensure that the filename object persists until the
    audit subsystem is finished with it.
    
    Also, a special thanks to Al Viro, Guenter Roeck, and Sabrina Dubroca
    for helping resolve a difficult kernel panic on boot related to a
    use-after-free problem in kern_path_create(); the thread can be seen
    at the link below:
    
     * https://lkml.org/lkml/2015/1/20/710
    
    This patch includes code that was either based on, or directly written
    by Al in the above thread.
    
    CC: viro@zeniv.linux.org.uk
    CC: linux@roeck-us.net
    CC: sd@queasysnail.net
    CC: linux-fsdevel@vger.kernel.org
    Signed-off-by: Paul Moore <pmoore@redhat.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 6d1cff2a885850b78b40c34777b46cf5da5d1050
Author: Andrey Ryabinin <a.ryabinin@samsung.com>
Date:   Tue Jan 13 18:52:40 2015 +0300

    smack: fix possible use after frees in task_security() callers
    
    We hit use after free on dereferncing pointer to task_smack struct in
    smk_of_task() called from smack_task_to_inode().
    
    task_security() macro uses task_cred_xxx() to get pointer to the task_smack.
    task_cred_xxx() could be used only for non-pointer members of task's
    credentials. It cannot be used for pointer members since what they point
    to may disapper after dropping RCU read lock.
    
    Mainly task_security() used this way:
            smk_of_task(task_security(p))
    
    Intead of this introduce function smk_of_task_struct() which
    takes task_struct as argument and returns pointer to smk_known struct
    and do this under RCU read lock.
    Bogus task_security() macro is not used anymore, so remove it.
    
    KASan's report for this:
    
            AddressSanitizer: use after free in smack_task_to_inode+0x50/0x70 at addr c4635600
            =============================================================================
            BUG kmalloc-64 (Tainted: PO): kasan error
            -----------------------------------------------------------------------------
    
            Disabling lock debugging due to kernel taint
            INFO: Allocated in new_task_smack+0x44/0xd8 age=39 cpu=0 pid=1866
                    kmem_cache_alloc_trace+0x88/0x1bc
                    new_task_smack+0x44/0xd8
                    smack_cred_prepare+0x48/0x21c
                    security_prepare_creds+0x44/0x4c
                    prepare_creds+0xdc/0x110
                    smack_setprocattr+0x104/0x150
                    security_setprocattr+0x4c/0x54
                    proc_pid_attr_write+0x12c/0x194
                    vfs_write+0x1b0/0x370
                    SyS_write+0x5c/0x94
                    ret_fast_syscall+0x0/0x48
            INFO: Freed in smack_cred_free+0xc4/0xd0 age=27 cpu=0 pid=1564
                    kfree+0x270/0x290
                    smack_cred_free+0xc4/0xd0
                    security_cred_free+0x34/0x3c
                    put_cred_rcu+0x58/0xcc
                    rcu_process_callbacks+0x738/0x998
                    __do_softirq+0x264/0x4cc
                    do_softirq+0x94/0xf4
                    irq_exit+0xbc/0x120
                    handle_IRQ+0x104/0x134
                    gic_handle_irq+0x70/0xac
                    __irq_svc+0x44/0x78
                    _raw_spin_unlock+0x18/0x48
                    sync_inodes_sb+0x17c/0x1d8
                    sync_filesystem+0xac/0xfc
                    vdfs_file_fsync+0x90/0xc0
                    vfs_fsync_range+0x74/0x7c
            INFO: Slab 0xd3b23f50 objects=32 used=31 fp=0xc4635600 flags=0x4080
            INFO: Object 0xc4635600 @offset=5632 fp=0x  (null)
    
            Bytes b4 c46355f0: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a  ZZZZZZZZZZZZZZZZ
            Object c4635600: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
            Object c4635610: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
            Object c4635620: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
            Object c4635630: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b a5  kkkkkkkkkkkkkkk.
            Redzone c4635640: bb bb bb bb                                      ....
            Padding c46356e8: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a  ZZZZZZZZZZZZZZZZ
            Padding c46356f8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
            CPU: 5 PID: 834 Comm: launchpad_prelo Tainted: PBO 3.10.30 #1
            Backtrace:
            [<c00233a4>] (dump_backtrace+0x0/0x158) from [<c0023dec>] (show_stack+0x20/0x24)
             r7:c4634010 r6:d3b23f50 r5:c4635600 r4:d1002140
            [<c0023dcc>] (show_stack+0x0/0x24) from [<c06d6d7c>] (dump_stack+0x20/0x28)
            [<c06d6d5c>] (dump_stack+0x0/0x28) from [<c01c1d50>] (print_trailer+0x124/0x144)
            [<c01c1c2c>] (print_trailer+0x0/0x144) from [<c01c1e88>] (object_err+0x3c/0x44)
             r7:c4635600 r6:d1002140 r5:d3b23f50 r4:c4635600
            [<c01c1e4c>] (object_err+0x0/0x44) from [<c01cac18>] (kasan_report_error+0x2b8/0x538)
             r6:d1002140 r5:d3b23f50 r4:c6429cf8 r3:c09e1aa7
            [<c01ca960>] (kasan_report_error+0x0/0x538) from [<c01c9430>] (__asan_load4+0xd4/0xf8)
            [<c01c935c>] (__asan_load4+0x0/0xf8) from [<c031e168>] (smack_task_to_inode+0x50/0x70)
             r5:c4635600 r4:ca9da000
            [<c031e118>] (smack_task_to_inode+0x0/0x70) from [<c031af64>] (security_task_to_inode+0x3c/0x44)
             r5:cca25e80 r4:c0ba9780
            [<c031af28>] (security_task_to_inode+0x0/0x44) from [<c023d614>] (pid_revalidate+0x124/0x178)
             r6:00000000 r5:cca25e80 r4:cbabe3c0 r3:00008124
            [<c023d4f0>] (pid_revalidate+0x0/0x178) from [<c01db98c>] (lookup_fast+0x35c/0x43y4)
             r9:c6429efc r8:00000101 r7:c079d940 r6:c6429e90 r5:c6429ed8 r4:c83c4148
            [<c01db630>] (lookup_fast+0x0/0x434) from [<c01deec8>] (do_last.isra.24+0x1c0/0x1108)
            [<c01ded08>] (do_last.isra.24+0x0/0x1108) from [<c01dff04>] (path_openat.isra.25+0xf4/0x648)
            [<c01dfe10>] (path_openat.isra.25+0x0/0x648) from [<c01e1458>] (do_filp_open+0x3c/0x88)
            [<c01e141c>] (do_filp_open+0x0/0x88) from [<c01ccb28>] (do_sys_open+0xf0/0x198)
             r7:00000001 r6:c0ea2180 r5:0000000b r4:00000000
            [<c01cca38>] (do_sys_open+0x0/0x198) from [<c01ccc00>] (SyS_open+0x30/0x34)
            [<c01ccbd0>] (SyS_open+0x0/0x34) from [<c001db80>] (ret_fast_syscall+0x0/0x48)
            Read of size 4 by thread T834:
            Memory state around the buggy address:
             c4635380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
             c4635400: 00 00 00 00 00 00 00 00 fc fc fc fc fc fc fc fc
             c4635480: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
             c4635500: 00 00 00 00 00 fc fc fc fc fc fc fc fc fc fc fc
             c4635580: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
            >c4635600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
             c4635680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
             c4635700: 00 00 00 00 04 fc fc fc fc fc fc fc fc fc fc fc
             c4635780: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
             c4635800: 00 00 00 00 00 00 04 fc fc fc fc fc fc fc fc fc
             c4635880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
            ==================================================================
    
    Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
    Cc: <stable@vger.kernel.org>

commit 552941503b9500a99be06cc9f60348099435b160
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Jan 21 11:50:52 2015 +0100

    ata: libahci: Fix devres cleanup on failure
    
    Commit c7d7ddee7e24 ("ata: libahci: Allow using multiple regulators")
    releases regulators during ahci_platform_put_resources(). That doesn't
    work because the function is run as part of the devres machinery. Such
    resources are torn down in reverse order. Since the array that holds
    pointers to the regulators is allocated using devres after the device
    context to which ahci_platform_put_resources() is attached, the memory
    will be freed before calling ahci_platform_put_resources() and thereby
    causing a use-after-free error.
    
    This commit fixes this by using regular allocations for the array. The
    memory can then be freed after the regulators have been released. This
    conserves the advantages of using the managed API.
    
    Reported-by: Paul Walmsley <paul@pwsan.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit 76d697d10769048e5721510100bf3a9413a56385
Author: Ming Lei <ming.lei@canonical.com>
Date:   Tue Jan 20 11:00:56 2015 +0800

    blk-mq: fix hctx/ctx kobject use-after-free
    
    The kobject memory shouldn't have been freed before the kobject
    is released because driver core can access it freely before its
    release.
    
    This patch frees hctx in its release callback. For ctx, they
    share one single per-cpu variable which is associated with
    the request queue, so free ctx in q->mq_kobj's release handler.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    (fix ctx kobjects)
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit f2bbca513c80081245ce2cb39f314ec37703afb3
Author: David Ahern <dsahern@gmail.com>
Date:   Fri Jan 16 14:22:29 2015 -0700

    net: rocker: Add basic netdev counters - v2
    
    Add packet and byte counters for RX and TX paths.
    
    $ ifconfig eth1
    eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
            inet6 fe80::5054:ff:fe12:3501  prefixlen 64  scopeid 0x20<link>
            ether 52:54:00:12:35:01  txqueuelen 1000  (Ethernet)
            RX packets 63  bytes 15813 (15.4 KiB)
            RX errors 1  dropped 0  overruns 0  frame 0
            TX packets 79  bytes 17991 (17.5 KiB)
            TX errors 7  dropped 0 overruns 0  carrier 0  collisions 0
    
    Rx / Tx errors tested by injecting faults in qemu's hardware model for Rocker.
    
    v2:
    - moved counter locations to avoid potential use after free per Florian's comment
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Cc: Scott Feldman <sfeldma@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Scott Feldman <sfeldma@gmail.com>
    Acked-by: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      usb: dwc3: gadget: Stop TRB preparation after limit is reached
      usb: dwc3: gadget: Fix TRB preparation during SG
      usb: phy: mv-usb: fix usb_phy build errors
      usb: serial: handle -ENODEV quietly in generic_submit_read_urb
      usb: serial: silence all non-critical read errors
      USB: console: fix potential use after free
      USB: console: fix uninitialised ldisc semaphore
      usb: gadget: udc: atmel: fix possible oops when unloading module
      usb: gadget: gadgetfs: fix an oops in ep_write()
      usb: phy: Fix deferred probing
      OHCI: add a quirk for ULi M5237 blocking on reset
      uas: Add US_FL_NO_ATA_1X for 2 more Seagate disk enclosures
      uas: Do not blacklist ASM1153 disk enclosures
      usb: gadget: udc: avoid dereference before NULL check in ep_queue
      usb: host: ehci-tegra: request deferred probe when failing to get phy
      uas: disable UAS on Apricorn SATA dongles
      uas: Add US_FL_NO_REPORT_OPCODES for JMicron JMS566 with usb-id 0bc2:a013
      uas: Add US_FL_NO_ATA_1X for Seagate devices with usb-id 0bc2:a013
      xhci: Add broken-streams quirk for Fresco Logic FL1000G xhci controllers
      USB: EHCI: adjust error return code
      ...

commit 32a4bf2e81ec378e5925d4e069e0677a6c86a6ad
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 5 16:04:13 2015 +0100

    USB: console: fix potential use after free
    
    Use tty kref to release the fake tty in usb_console_setup to avoid use
    after free if the underlying serial driver has acquired a reference.
    
    Note that using the tty destructor release_one_tty requires some more
    state to be initialised.
    
    Fixes: 4a90f09b20f4 ("tty: usb-serial krefs")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

commits)
      drm/i915: Update DRIVER_DATE to 20141219
      drm/i915: Hold runtime PM during plane commit
      drm/i915: Organize bind_vma funcs
      drm/i915: Organize INSTDONE report for future.
      drm/i915: Organize PDP regs report for future.
      drm/i915: Organize PPGTT init
      drm/i915: Organize Fence registers for future enablement.
      drm/i915: tame the chattermouth (v2)
      drm/i915: Warn about missing context state workarounds only once
      drm/i915: Use true PPGTT in Gen8+ when execlists are enabled
      drm/i915: Skip gunit save/restore for cherryview
      drm/i915/chv: Use timeout mode for RC6 on chv
      drm/i915: Add GPGPU_THREADS_DISPATCHED to the register whitelist
      drm/i915: Tidy up execbuffer command parsing code
      drm/i915: Mark shadow batch buffers as purgeable
      drm/i915: Use batch length instead of object size in command parser
      drm/i915: Use batch pools with the command parser
      drm/i915: Implement a framework for batch buffer pools
      drm/i915: fix use after free during eDP encoder destroying
      drm/i915/skl: Skylake also supports DP MST
      ...

commit 87af9e7ff9d909e70a006ca0974466e2a1d8db0a
Author: David Hildenbrand <dahi@linux.vnet.ibm.com>
Date:   Fri Dec 12 10:11:44 2014 +0100

    hotplugcpu: Avoid deadlocks by waking active_writer
    
    Commit b2c4623dcd07 ("rcu: More on deadlock between CPU hotplug and expedited
    grace periods") introduced another problem that can easily be reproduced by
    starting/stopping cpus in a loop.
    
    E.g.:
      for i in `seq 5000`; do
          echo 1 > /sys/devices/system/cpu/cpu1/online
          echo 0 > /sys/devices/system/cpu/cpu1/online
      done
    
    Will result in:
      INFO: task /cpu_start_stop:1 blocked for more than 120 seconds.
      Call Trace:
      ([<00000000006a028e>] __schedule+0x406/0x91c)
       [<0000000000130f60>] cpu_hotplug_begin+0xd0/0xd4
       [<0000000000130ff6>] _cpu_up+0x3e/0x1c4
       [<0000000000131232>] cpu_up+0xb6/0xd4
       [<00000000004a5720>] device_online+0x80/0xc0
       [<00000000004a57f0>] online_store+0x90/0xb0
      ...
    
    And a deadlock.
    
    Problem is that if the last ref in put_online_cpus() can't get the
    cpu_hotplug.lock the puts_pending count is incremented, but a sleeping
    active_writer might never be woken up, therefore never exiting the loop in
    cpu_hotplug_begin().
    
    This fix removes puts_pending and turns refcount into an atomic variable. We
    also introduce a wait queue for the active_writer, to avoid possible races and
    use-after-free. There is no need to take the lock in put_online_cpus() anymore.
    
    Can't reproduce it with this fix.
    
    Signed-off-by: David Hildenbrand <dahi@linux.vnet.ibm.com>
    Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>

commit 7e77bdebff5cb1e9876c561f69710b9ab8fa1f7e
Author: Rabin Vincent <rabin.vincent@axis.com>
Date:   Fri Dec 19 13:36:08 2014 +0100

    crypto: af_alg - fix backlog handling
    
    If a request is backlogged, it's complete() handler will get called
    twice: once with -EINPROGRESS, and once with the final error code.
    
    af_alg's complete handler, unlike other users, does not handle the
    -EINPROGRESS but instead always completes the completion that recvmsg()
    is waiting on.  This can lead to a return to user space while the
    request is still pending in the driver.  If userspace closes the sockets
    before the requests are handled by the driver, this will lead to
    use-after-frees (and potential crashes) in the kernel due to the tfm
    having been freed.
    
    The crashes can be easily reproduced (for example) by reducing the max
    queue length in cryptod.c and running the following (from
    http://www.chronox.de/libkcapi.html) on AES-NI capable hardware:
    
     $ while true; do kcapi -x 1 -e -c '__ecb-aes-aesni' \
        -k 00000000000000000000000000000000 \
        -p 00000000000000000000000000000000 >/dev/null & done
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Rabin Vincent <rabin.vincent@axis.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commits)
      perf: Fix building warning on ARM 32
      perf symbols: Fix use after free in filename__read_build_id
      perf evlist: Use roundup_pow_of_two
      tools: Adopt roundup_pow_of_two
      perf tools: Make the mmap length autotuning more robust
      tools: Adopt rounddown_pow_of_two and deps
      tools: Adopt fls_long and deps
      tools: Move bitops.h from tools/perf/util to tools/
      tools: Introduce asm-generic/bitops.h
      tools lib: Move asm-generic/bitops/find.h code to tools/include and tools/lib
      tools: Whitespace prep patches for moving bitops.h
      tools: Move code originally from asm-generic/atomic.h into tools/include/asm-generic/
      tools: Move code originally from linux/log2.h to tools/include/linux/
      tools: Move __ffs implementation to tools/include/asm-generic/bitops/__ffs.h
      perf evlist: Do not use hard coded value for a mmap_pages default
      perf trace: Let the perf_evlist__mmap autosize the number of pages to use
      perf evlist: Improve the strerror_mmap method
      perf evlist: Clarify sterror_mmap variable names
      perf evlist: Fixup brown paper bag on "hint" for --mmap-pages cmdline arg
      perf trace: Provide a better explanation when mmap fails
      ...

commit 7ad74b41e56e4f7f42c6b765bc44428cd09310d7
Author: Mitchell Krome <mitchellkrome@gmail.com>
Date:   Tue Dec 16 12:16:12 2014 +1000

    perf symbols: Fix use after free in filename__read_build_id
    
    In filename__read_build_id, phdr points to memory in buf, which gets realloced
    before a call to fseek that uses phdr->p_offset. This change stores the value
    of p_offset before buf is realloced, so the fseek can use the value safely.
    
    Signed-off-by: Mitchell Krome <mitchellkrome@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Link: http://lkml.kernel.org/r/20141216021612.GA7199@mitchell
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit c8bd0e49519ce1d80196e54ba2e20c3a1b7c88c0
Author: Imre Deak <imre.deak@intel.com>
Date:   Fri Dec 12 17:57:38 2014 +0200

    drm/i915: fix use after free during eDP encoder destroying
    
    After
    
    commit a18c0af171bfb875012da26f23df051004726973
    uthor: Thierry Reding <treding@nvidia.com>
    Date:   Wed Dec 10 11:38:49 2014 +0100
    
        drm: Zero out DRM object memory upon cleanup
    
    we will use the eDP encoder during destroying it. Fix this by calling
    drm_encoder_cleanup() at a point when the encoder is not used any more.
    This caused a NULL pointer dereference in pps_lock(), I can't see that
    it caused any other problem.
    
    All the other encoders seem to call drm_encoder_cleanup() at a safe
    place.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commits)
      bio: modify __bio_add_page() to accept pages that don't start a new segment
      blk-mq: Fix uninitialized kobject at CPU hotplugging
      blktrace: don't let the sysfs interface remove trace from running list
      blk-mq: Use all available hardware queues
      blk-mq: Micro-optimize bt_get()
      blk-mq: Fix a race between bt_clear_tag() and bt_get()
      blk-mq: Avoid that __bt_get_word() wraps multiple times
      blk-mq: Fix a use-after-free
      blk-mq: prevent unmapped hw queue from being scheduled
      blk-mq: re-check for available tags after running the hardware queue
      blk-mq: fix hang in bt_get()
      blk-mq: move the kdump check to blk_mq_alloc_tag_set
      blk-mq: cleanup tag free handling
      blk-mq: use 'nr_cpu_ids' as highest CPU ID count for hwq <-> cpu map
      blk: introduce generic io stat accounting help function
      blk-mq: handle the single queue case in blk_mq_hctx_next_cpu
      genhd: check for int overflow in disk_expand_part_tbl()
      blk-mq: add blk_mq_free_hctx_request()
      blk-mq: export blk_mq_free_request()
      blk-mq: use get_cpu/put_cpu instead of preempt_disable/preempt_enable
      ...

commit 8135be5a8012f4c7e95218563855e16c09a8271b
Author: Vladimir Davydov <vdavydov@parallels.com>
Date:   Fri Dec 12 16:56:38 2014 -0800

    memcg: fix possible use-after-free in memcg_kmem_get_cache()
    
    Suppose task @t that belongs to a memory cgroup @memcg is going to
    allocate an object from a kmem cache @c.  The copy of @c corresponding to
    @memcg, @mc, is empty.  Then if kmem_cache_alloc races with the memory
    cgroup destruction we can access the memory cgroup's copy of the cache
    after it was destroyed:
    
    CPU0                            CPU1
    ----                            ----
    [ current=@t
      @mc->memcg_params->nr_pages=0 ]
    
    kmem_cache_alloc(@c):
      call memcg_kmem_get_cache(@c);
      proceed to allocation from @mc:
        alloc a page for @mc:
          ...
    
                                    move @t from @memcg
                                    destroy @memcg:
                                      mem_cgroup_css_offline(@memcg):
                                        memcg_unregister_all_caches(@memcg):
                                          kmem_cache_destroy(@mc)
    
        add page to @mc
    
    We could fix this issue by taking a reference to a per-memcg cache, but
    that would require adding a per-cpu reference counter to per-memcg caches,
    which would look cumbersome.
    
    Instead, let's take a reference to a memory cgroup, which already has a
    per-cpu reference counter, in the beginning of kmem_cache_alloc to be
    dropped in the end, and move per memcg caches destruction from css offline
    to css free.  As a side effect, per-memcg caches will be destroyed not one
    by one, but all at once when the last page accounted to the memory cgroup
    is freed.  This doesn't sound as a high price for code readability though.
    
    Note, this patch does add some overhead to the kmem_cache_alloc hot path,
    but it is pretty negligible - it's just a function call plus a per cpu
    counter decrement, which is comparable to what we already have in
    memcg_kmem_get_cache.  Besides, it's only relevant if there are memory
    cgroups with kmem accounting enabled.  I don't think we can find a way to
    handle this race w/o it, because alloc_page called from kmem_cache_alloc
    may sleep so we can't flush all pending kmallocs w/o reference counting.
    
    Signed-off-by: Vladimir Davydov <vdavydov@parallels.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.cz>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      Btrfs: make get_caching_control unconditionally return the ctl
      Btrfs: fix unprotected deletion from pending_chunks list
      Btrfs: fix fs mapping extent map leak
      Btrfs: fix memory leak after block remove + trimming
      Btrfs: make btrfs_abort_transaction consider existence of new block groups
      Btrfs: fix race between writing free space cache and trimming
      Btrfs: fix race between fs trimming and block group remove/allocation
      Btrfs, replace: enable dev-replace for raid56
      Btrfs: fix freeing used extents after removing empty block group
      Btrfs: fix crash caused by block group removal
      Btrfs: fix invalid block group rbtree access after bg is removed
      Btrfs, raid56: fix use-after-free problem in the final device replace procedure on raid56
      Btrfs, replace: write raid56 parity into the replace target device
      Btrfs, replace: write dirty pages into the replace target device
      Btrfs, raid56: support parity scrub on raid56
      Btrfs, raid56: use a variant to record the operation type
      Btrfs, scrub: repair the common data on RAID5/6 if it is corrupted
      Btrfs, raid56: don't change bbio and raid_map
      Btrfs: remove unnecessary code of stripe_index assignment in __btrfs_map_block
      Btrfs: remove noused bbio_ret in __btrfs_map_block in condition
      ...

commit d025933e29872cb1fe19fc54d80e4dfa4ee5779c
Author: Andreas Müller <goo@stapelspeicher.org>
Date:   Fri Dec 12 12:11:11 2014 +0100

    mac80211: fix multicast LED blinking and counter
    
    As multicast-frames can't be fragmented, "dot11MulticastReceivedFrameCount"
    stopped being incremented after the use-after-free fix. Furthermore, the
    RX-LED will be triggered by every multicast frame (which wouldn't happen
    before) which wouldn't allow the LED to rest at all.
    
    Fixes https://bugzilla.kernel.org/show_bug.cgi?id=89431 which also had the
    patch.
    
    Cc: stable@vger.kernel.org
    Fixes: b8fff407a180 ("mac80211: fix use-after-free in defragmentation")
    Signed-off-by: Andreas Müller <goo@stapelspeicher.org>
    [rewrite commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 00c83b01d58068dfeb2e1351cca6fccf2a83fa8f
Author: Marcelo Leitner <mleitner@redhat.com>
Date:   Thu Dec 11 10:02:22 2014 -0200

    Fix race condition between vxlan_sock_add and vxlan_sock_release
    
    Currently, when trying to reuse a socket, vxlan_sock_add will grab
    vn->sock_lock, locate a reusable socket, inc refcount and release
    vn->sock_lock.
    
    But vxlan_sock_release() will first decrement refcount, and then grab
    that lock. refcnt operations are atomic but as currently we have
    deferred works which hold vs->refcnt each, this might happen, leading to
    a use after free (specially after vxlan_igmp_leave):
    
      CPU 1                            CPU 2
    
    deferred work                    vxlan_sock_add
      ...                              ...
                                       spin_lock(&vn->sock_lock)
                                       vs = vxlan_find_sock();
      vxlan_sock_release
        dec vs->refcnt, reaches 0
        spin_lock(&vn->sock_lock)
                                       vxlan_sock_hold(vs), refcnt=1
                                       spin_unlock(&vn->sock_lock)
        hlist_del_rcu(&vs->hlist);
        vxlan_notify_del_rx_port(vs)
        spin_unlock(&vn->sock_lock)
    
    So when we look for a reusable socket, we check if it wasn't freed
    already before reusing it.
    
    Signed-off-by: Marcelo Ricardo Leitner <mleitner@redhat.com>
    Fixes: 7c47cedf43a8b3 ("vxlan: move IGMP join/leave to work queue")
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7117bc8888aff73fb081956afa501edcc85a1552
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Wed Dec 10 15:54:39 2014 -0800

    usermodehelper: don't use CLONE_VFORK for ____call_usermodehelper()
    
    After "kernel/kmod: fix use-after-free of the sub_infostructure"
    CLONE_VFORK in __call_usermodehelper() buys nothing, we rely on on
    umh_complete() in ____call_usermodehelper() anyway.
    
    Remove it.  This also eliminates the unnecessary sleep/wakeup in the
    likely case, and this allows the next change.
    
    While at it, kill the "int wait" locals in ____call_usermodehelper() and
    __call_usermodehelper(), they can safely use sub_info->wait.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 45a9c9d909b24c6ad0e28a7946e7486e73010319
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 9 16:57:48 2014 +0100

    blk-mq: Fix a use-after-free
    
    blk-mq users are allowed to free the memory request_queue.tag_set
    points at after blk_cleanup_queue() has finished but before
    blk_release_queue() has started. This can happen e.g. in the SCSI
    core. The SCSI core namely embeds the tag_set structure in a SCSI
    host structure. The SCSI host structure is freed by
    scsi_host_dev_release(). This function is called after
    blk_cleanup_queue() finished but can be called before
    blk_release_queue().
    
    This means that it is not safe to access request_queue.tag_set from
    inside blk_release_queue(). Hence remove the blk_sync_queue() call
    from blk_release_queue(). This call is not necessary - outstanding
    requests must have finished before blk_release_queue() is
    called. Additionally, move the blk_mq_free_queue() call from
    blk_release_queue() to blk_cleanup_queue() to avoid that struct
    request_queue.tag_set gets accessed after it has been freed.
    
    This patch avoids that the following kernel oops can be triggered
    when deleting a SCSI host for which scsi-mq was enabled:
    
    Call Trace:
     [<ffffffff8109a7c4>] lock_acquire+0xc4/0x270
     [<ffffffff814ce111>] mutex_lock_nested+0x61/0x380
     [<ffffffff812575f0>] blk_mq_free_queue+0x30/0x180
     [<ffffffff8124d654>] blk_release_queue+0x84/0xd0
     [<ffffffff8126c29b>] kobject_cleanup+0x7b/0x1a0
     [<ffffffff8126c140>] kobject_put+0x30/0x70
     [<ffffffff81245895>] blk_put_queue+0x15/0x20
     [<ffffffff8125c409>] disk_release+0x99/0xd0
     [<ffffffff8133d056>] device_release+0x36/0xb0
     [<ffffffff8126c29b>] kobject_cleanup+0x7b/0x1a0
     [<ffffffff8126c140>] kobject_put+0x30/0x70
     [<ffffffff8125a78a>] put_disk+0x1a/0x20
     [<ffffffff811d4cb5>] __blkdev_put+0x135/0x1b0
     [<ffffffff811d56a0>] blkdev_put+0x50/0x160
     [<ffffffff81199eb4>] kill_block_super+0x44/0x70
     [<ffffffff8119a2a4>] deactivate_locked_super+0x44/0x60
     [<ffffffff8119a87e>] deactivate_super+0x4e/0x70
     [<ffffffff811b9833>] cleanup_mnt+0x43/0x90
     [<ffffffff811b98d2>] __cleanup_mnt+0x12/0x20
     [<ffffffff8107252c>] task_work_run+0xac/0xe0
     [<ffffffff81002c01>] do_notify_resume+0x61/0xa0
     [<ffffffff814d2c58>] int_signal+0x12/0x17
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Robert Elliott <elliott@hp.com>
    Cc: Ming Lei <ming.lei@canonical.com>
    Cc: Alexander Gordeev <agordeev@redhat.com>
    Cc: <stable@vger.kernel.org> # v3.13+
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 0333464f5f7c33965173893b2a7322da6fe751ab
Author: Emil Tantilov <emil.s.tantilov@intel.com>
Date:   Fri Dec 5 04:32:44 2014 +0000

    ixgbevf: fix possible crashes in probe and remove
    
    This patch resolves couple of issues in ixgbevf_probe/remove():
    
    1. Fix a case where adapter->state is tested after free_netdev() this is
    same as the patch for ixgbe from Daniel Borkmann <dborkman@redhat.com>:
    commit b5b2ffc0574e1f27 ("ixgbe: fix use after free adapter->state test in ixgbe_remove/ixgbe_probe")
    
    2. Move pci_set_drvdata() after all the error checks in ixgbevf_probe() and
    then add a check in ixgbevf_probe() to avoid running the cleanup functions
    twice in cases where probe failed.
    
    CC: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Emil Tantilov <emil.s.tantilov@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit 4245215d6a8dba1a51c50533b6667919687c0b89
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Tue Nov 25 16:39:28 2014 +0800

    Btrfs, raid56: fix use-after-free problem in the final device replace procedure on raid56
    
    The commit c404e0dc (Btrfs: fix use-after-free in the finishing
    procedure of the device replace) fixed a use-after-free problem
    which happened when removing the source device at the end of device
    replace, but at that time, btrfs didn't support device replace
    on raid56, so we didn't fix the problem on the raid56 profile.
    Currently, we implemented device replace for raid56, so we need
    kick that problem out before we enable that function for raid56.
    
    The fix method is very simple, we just increase the bio per-cpu
    counter before we submit a raid56 io, and decrease the counter
    when the raid56 io ends.
    
    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>

commit b5b2ffc0574e1f271d79b6b992ee382dc9d5eaa8
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Fri Nov 21 23:52:53 2014 -0800

    ixgbe: fix use after free adapter->state test in ixgbe_remove/ixgbe_probe
    
    While working on a different issue, I noticed an annoying use
    after free bug on my machine when unloading the ixgbe driver:
    
    [ 8642.318797] ixgbe 0000:02:00.1: removed PHC on p2p2
    [ 8642.742716] ixgbe 0000:02:00.1: complete
    [ 8642.743784] BUG: unable to handle kernel paging request at ffff8807d3740a90
    [ 8642.744828] IP: [<ffffffffa01c77dc>] ixgbe_remove+0xfc/0x1b0 [ixgbe]
    [ 8642.745886] PGD 20c6067 PUD 81c1f6067 PMD 81c15a067 PTE 80000007d3740060
    [ 8642.746956] Oops: 0002 [#1] SMP DEBUG_PAGEALLOC
    [ 8642.748039] Modules linked in: [...]
    [ 8642.752929] CPU: 1 PID: 1225 Comm: rmmod Not tainted 3.18.0-rc2+ #49
    [ 8642.754203] Hardware name: Supermicro X10SLM-F/X10SLM-F, BIOS 1.1b 11/01/2013
    [ 8642.755505] task: ffff8807e34d3fe0 ti: ffff8807b7204000 task.ti: ffff8807b7204000
    [ 8642.756831] RIP: 0010:[<ffffffffa01c77dc>]  [<ffffffffa01c77dc>] ixgbe_remove+0xfc/0x1b0 [ixgbe]
    [...]
    [ 8642.774335] Stack:
    [ 8642.775805]  ffff8807ee824098 ffff8807ee824098 ffffffffa01f3000 ffff8807ee824000
    [ 8642.777326]  ffff8807b7207e18 ffffffff8137720f ffff8807ee824098 ffff8807ee824098
    [ 8642.778848]  ffffffffa01f3068 ffff8807ee8240f8 ffff8807b7207e38 ffffffff8144180f
    [ 8642.780365] Call Trace:
    [ 8642.781869]  [<ffffffff8137720f>] pci_device_remove+0x3f/0xc0
    [ 8642.783395]  [<ffffffff8144180f>] __device_release_driver+0x7f/0xf0
    [ 8642.784876]  [<ffffffff814421f8>] driver_detach+0xb8/0xc0
    [ 8642.786352]  [<ffffffff814414a9>] bus_remove_driver+0x59/0xe0
    [ 8642.787783]  [<ffffffff814429d0>] driver_unregister+0x30/0x70
    [ 8642.789202]  [<ffffffff81375c65>] pci_unregister_driver+0x25/0xa0
    [ 8642.790657]  [<ffffffffa01eb38e>] ixgbe_exit_module+0x1c/0xc8e [ixgbe]
    [ 8642.792064]  [<ffffffff810f93a2>] SyS_delete_module+0x132/0x1c0
    [ 8642.793450]  [<ffffffff81012c61>] ? do_notify_resume+0x61/0xa0
    [ 8642.794837]  [<ffffffff816d2029>] system_call_fastpath+0x12/0x17
    
    The issue is that test_and_set_bit() done on adapter->state is being
    performed *after* the netdevice has been freed via free_netdev().
    
    When netdev is being allocated on initialization time, it allocates
    a private area, here struct ixgbe_adapter, that resides after the
    net_device structure. In ixgbe_probe(), the device init routine,
    we set up the adapter after alloc_etherdev_mq() on the private area
    and add a reference for the pci_dev as well via pci_set_drvdata().
    
    Both in the error path of ixgbe_probe(), but also on module unload
    when ixgbe_remove() is being called, commit 41c62843eb6a ("ixgbe:
    Fix rcu warnings induced by LER") accesses adapter after free_netdev().
    The patch stores the result in a bool and thus fixes above oops on my
    side.
    
    Fixes: 41c62843eb6a ("ixgbe: Fix rcu warnings induced by LER")
    Cc: stable <stable@vger.kernel.org>
    Cc: Mark Rustad <mark.d.rustad@intel.com>
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 828f6148e89ec051c2540400773655c0174ccaa3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Nov 13 09:19:47 2014 +0300

    usb: gadget: f_hid: use after free in hidg_alloc_inst()
    
    We free "opts" on the error path and then dereference it.
    
    Fixes: 21a9476a7ba8 ('usb: gadget: hid: add configfs support')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 8180bd47b043507568056f74f69b6a5abea26514
Author: Mathy Vanhoef <vanhoefm@gmail.com>
Date:   Wed Nov 12 21:33:34 2014 -0500

    brcmfmac: kill URB when request timed out
    
    Kill the submitted URB in brcmf_usb_dl_cmd if the request timed out. This
    assures the URB is never submitted twice. It also prevents a possible
    use-after-free of the URB transfer buffer if a timeout occurs.
    
    Signed-off-by: Mathy Vanhoef <vanhoefm@gmail.com>
    Acked-by: Arend van Spriel <arend@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit c270cc75cd22b606c901e606fbb93b002c2a655f
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Thu Nov 6 12:41:55 2014 +0000

    tracing: kdb: Fix kernel panic during ftdump
    
    Currently kdb's ftdump command unconditionally crashes due to a null
    pointer de-reference whenever the command is run. This in turn causes
    the kernel to panic.
    
    The abridged stacktrace (gathered with ARCH=arm) is:
    
    --- cut here ---
    [<c09535ac>] (panic) from [<c02132dc>] (die+0x264/0x440)
    [<c02132dc>] (die) from [<c0952eb8>]
    (__do_kernel_fault.part.11+0x74/0x84)
    [<c0952eb8>] (__do_kernel_fault.part.11) from [<c021f954>]
    (do_page_fault+0x1d0/0x3c4)
    [<c021f954>] (do_page_fault) from [<c020846c>] (do_DataAbort+0x48/0xac)
    
    [<c020846c>] (do_DataAbort) from [<c0213c58>] (__dabt_svc+0x38/0x60)
    Exception stack(0xc0deba88 to 0xc0debad0)
    ba80:                   e8c29180 00000001 e9854304 e9854300 c0f567d8
    c0df2580
    baa0: 00000000 00000000 00000000 c0f117b8 c0e3a3c0 c0debb0c 00000000
    c0debad0
    bac0: 0000672e c02f4d60 60000193 ffffffff
    [<c0213c58>] (__dabt_svc) from [<c02f4d60>] (kdb_ftdump+0x1e4/0x3d8)
    [<c02f4d60>] (kdb_ftdump) from [<c02ce328>] (kdb_parse+0x2b8/0x698)
    [<c02ce328>] (kdb_parse) from [<c02ceef0>] (kdb_main_loop+0x52c/0x784)
    [<c02ceef0>] (kdb_main_loop) from [<c02d1b0c>] (kdb_stub+0x238/0x490)
    --- cut here ---
    
    The NULL deref occurs due to the initialized use of struct trace_iter's
    buffer_iter member.
    
    This is a regression, albeit a fairly elderly one. It was introduced
    by commit 6d158a813efc ("tracing: Remove NR_CPUS array from
    trace_iterator").
    
    This patch solves this by providing a collection of ring_buffer_iter(s)
    and using this to initialize buffer_iter. Note that static allocation
    is used solely because the trace_iter itself is also static allocated.
    Static allocation also means that we have to NULL-ify the pointer during
    cleanup to avoid use-after-free problems.
    
    Link: http://lkml.kernel.org/r/1415277716-19419-2-git-send-email-daniel.thompson@linaro.org
    
    Cc: Jason Wessel <jason.wessel@windriver.com>
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commits)
      vxlan: Do not reuse sockets for a different address family
      smsc911x: power-up phydev before doing a software reset.
      lib: rhashtable - Remove weird non-ASCII characters from comments
      net/smsc911x: Fix delays in the PHY enable/disable routines
      net/smsc911x: Fix rare soft reset timeout issue due to PHY power-down mode
      netlink: Properly unbind in error conditions.
      net: ptp: fix time stamp matching logic for VLAN packets.
      cxgb4 : dcb open-lldp interop fixes
      selftests/net: psock_fanout seg faults in sock_fanout_read_ring()
      net: bcmgenet: apply MII configuration in bcmgenet_open()
      net: bcmgenet: connect and disconnect from the PHY state machine
      net: qualcomm: Fix dependency
      ixgbe: phy: fix uninitialized status in ixgbe_setup_phy_link_tnx
      net: phy: Correctly handle MII ioctl which changes autonegotiation.
      ipv6: fix IPV6_PKTINFO with v4 mapped
      net: sctp: fix memory leak in auth key management
      net: sctp: fix NULL pointer dereference in af->from_addr_param on malformed packet
      net: ppp: Don't call bpf_prog_create() in ppp_lock
      net/mlx4_en: Advertize encapsulation offloads features only when VXLAN tunnel is set
      cxgb4 : Fix bug in DCB app deletion
      ...

commit 816764859a5347315cb2f1578cf0252ee129c128
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Nov 1 01:40:47 2014 +0300

    m501fb: don't return zero on failure path in sm501fb_probe()
    
    If no framebuffers found, sm501fb_probe() breaks off initialization,
    deallocates sm501fb_info, but returns zero. As a result, use after free
    can happen in sm501fb_remove().
    
    The patch adds -ENODEV as a return value in this case.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

commit 67dfa1b756f250972bde31d65e3f8fde6aeddc5b
Author: Kirill Tkhai <ktkhai@parallels.com>
Date:   Mon Oct 27 17:40:52 2014 +0300

    sched/deadline: Implement cancel_dl_timer() to use in switched_from_dl()
    
    Currently used hrtimer_try_to_cancel() is racy:
    
    raw_spin_lock(&rq->lock)
    ...                            dl_task_timer                 raw_spin_lock(&rq->lock)
    ...                               raw_spin_lock(&rq->lock)   ...
       switched_from_dl()             ...                        ...
          hrtimer_try_to_cancel()     ...                        ...
       switched_to_fair()             ...                        ...
    ...                               ...                        ...
    ...                               ...                        ...
    raw_spin_unlock(&rq->lock)        ...                        (asquired)
    ...                               ...                        ...
    ...                               ...                        ...
    do_exit()                         ...                        ...
       schedule()                     ...                        ...
          raw_spin_lock(&rq->lock)    ...                        raw_spin_unlock(&rq->lock)
          ...                         ...                        ...
          raw_spin_unlock(&rq->lock)  ...                        raw_spin_lock(&rq->lock)
          ...                         ...                        (asquired)
          put_task_struct()           ...                        ...
              free_task_struct()      ...                        ...
          ...                         ...                        raw_spin_unlock(&rq->lock)
    ...                               (asquired)                 ...
    ...                               ...                        ...
    ...                               (use after free)           ...
    
    So, let's implement 100% guaranteed way to cancel the timer and let's
    be sure we are safe even in very unlikely situations.
    
    rq unlocking does not limit the area of switched_from_dl() use, because
    this has already been possible in pull_dl_task() below.
    
    Let's consider the safety of of this unlocking. New code in the patch
    is working when hrtimer_try_to_cancel() fails. This means the callback
    is running. In this case hrtimer_cancel() is just waiting till the
    callback is finished. Two
    
    1) Since we are in switched_from_dl(), new class is not dl_sched_class and
    new prio is not less MAX_DL_PRIO. So, the callback returns early; it's
    right after !dl_task() check. After that hrtimer_cancel() returns back too.
    
    The above is:
    
    raw_spin_lock(rq->lock);                  ...
    ...                                       dl_task_timer()
    ...                                          raw_spin_lock(rq->lock);
       switched_from_dl()                        ...
           hrtimer_try_to_cancel()               ...
              raw_spin_unlock(rq->lock);         ...
              hrtimer_cancel()                   ...
              ...                                raw_spin_unlock(rq->lock);
              ...                                return HRTIMER_NORESTART;
              ...                             ...
              raw_spin_lock(rq->lock);        ...
    
    2) But the below is also possible:
                                       dl_task_timer()
                                          raw_spin_lock(rq->lock);
                                          ...
                                          raw_spin_unlock(rq->lock);
    raw_spin_lock(rq->lock);              ...
       switched_from_dl()                 ...
           hrtimer_try_to_cancel()        ...
           ...                            return HRTIMER_NORESTART;
           raw_spin_unlock(rq->lock);  ...
           hrtimer_cancel();           ...
           raw_spin_lock(rq->lock);    ...
    
    In this case hrtimer_cancel() returns immediately. Very unlikely case,
    just to mention.
    
    Nobody can manipulate the task, because check_class_changed() is
    always called with pi_lock locked. Nobody can force the task to
    participate in (concurrent) priority inheritance schemes (the same reason).
    
    All concurrent task operations require pi_lock, which is held by us.
    No deadlocks with dl_task_timer() are possible, because it returns
    right after !dl_task() check (it does nothing).
    
    If we receive a new dl_task during the time of unlocked rq, we just
    don't have to do pull_dl_task() in switched_from_dl() further.
    
    Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
    [ Added comments]
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Juri Lelli <juri.lelli@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/1414420852.19914.186.camel@tkhai
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 148bb0439adeeae466dca31dd4c643e194bee023
Author: Axel Lin <axel.lin@ingics.com>
Date:   Mon Nov 3 10:21:54 2014 -0800

    soc: ti: knav_qmss_queue: Use list_for_each_entry_safe to prevent use after free
    
    list_for_each_entry_safe() is necessary if list objects are deleted from
    the list while traversing it.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

commit b8fff407a180286aa683d543d878d98d9fc57b13
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Nov 3 13:57:46 2014 +0100

    mac80211: fix use-after-free in defragmentation
    
    Upon receiving the last fragment, all but the first fragment
    are freed, but the multicast check for statistics at the end
    of the function refers to the current skb (the last fragment)
    causing a use-after-free bug.
    
    Since multicast frames cannot be fragmented and we check for
    this early in the function, just modify that check to also
    do the accounting to fix the issue.
    
    Cc: stable@vger.kernel.org
    Reported-by: Yosef Khyal <yosefx.khyal@intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commits)
      drivers: net: cpsw: Support ALLMULTI and fix IFF_PROMISC in switch mode
      drivers: net: cpsw: Fix broken loop condition in switch mode
      net: ethtool: Return -EOPNOTSUPP if user space tries to read EEPROM with lengh 0
      stmmac: pci: set default of the filter bins
      net: smc91x: Fix gpios for device tree based booting
      mpls: Allow mpls_gso to be built as module
      mpls: Fix mpls_gso handler.
      r8152: stop submitting intr for -EPROTO
      netfilter: nft_reject_bridge: restrict reject to prerouting and input
      netfilter: nft_reject_bridge: don't use IP stack to reject traffic
      netfilter: nf_reject_ipv6: split nf_send_reset6() in smaller functions
      netfilter: nf_reject_ipv4: split nf_send_reset() in smaller functions
      netfilter: nf_tables_bridge: update hook_mask to allow {pre,post}routing
      drivers/net: macvtap and tun depend on INET
      drivers/net, ipv6: Select IPv6 fragment idents for virtio UFO packets
      drivers/net: Disable UFO through virtio
      net: skb_fclone_busy() needs to detect orphaned skb
      gre: Use inner mac length when computing tunnel length
      mlx4: Avoid leaking steering rules on flow creation error flow
      net/mlx4_en: Don't attempt to TX offload the outer UDP checksum for VXLAN
      ...

commit daac197ca9966eca3a6b07600e579756a9a1d447
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Oct 29 19:10:57 2014 +0300

    Bluetooth: 6lowpan: use after free in disconnect_devices()
    
    This was accidentally changed from list_for_each_entry_safe() to
    list_for_each_entry() so now it has a use after free bug.  I've changed
    it back.
    
    Fixes: 90305829635d ('Bluetooth: 6lowpan: Converting rwlocks to use RCU')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Jukka Rissanen <jukka.rissanen@linux.intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

commits)
      mm/balloon_compaction: fix deflation when compaction is disabled
      sh: fix sh770x SCIF memory regions
      zram: avoid NULL pointer access in concurrent situation
      mm/slab_common: don't check for duplicate cache names
      ocfs2: fix d_splice_alias() return code checking
      mm: rmap: split out page_remove_file_rmap()
      mm: memcontrol: fix missed end-writeback page accounting
      mm: page-writeback: inline account_page_dirtied() into single caller
      lib/bitmap.c: fix undefined shift in __bitmap_shift_{left|right}()
      drivers/rtc/rtc-bq32k.c: fix register value
      memory-hotplug: clear pgdat which is allocated by bootmem in try_offline_node()
      drivers/rtc/rtc-s3c.c: fix initialization failure without rtc source clock
      kernel/kmod: fix use-after-free of the sub_info structure
      drivers/rtc/rtc-pm8xxx.c: rework to support pm8941 rtc
      mm, thp: fix collapsing of hugepages on madvise
      drivers: of: add return value to of_reserved_mem_device_init()
      mm: free compound page with correct order
      gcov: add ARM64 to GCOV_PROFILE_ALL
      fsnotify: next_i is freed during fsnotify_unmount_inodes.
      mm/compaction.c: avoid premature range skip in isolate_migratepages_range
      ...

commit 0baf2a4dbf75abb7c186fd6c8d55d27aaa354a29
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Oct 29 14:50:35 2014 -0700

    kernel/kmod: fix use-after-free of the sub_info structure
    
    Found this in the message log on a s390 system:
    
        BUG kmalloc-192 (Not tainted): Poison overwritten
        Disabling lock debugging due to kernel taint
        INFO: 0x00000000684761f4-0x00000000684761f7. First byte 0xff instead of 0x6b
        INFO: Allocated in call_usermodehelper_setup+0x70/0x128 age=71 cpu=2 pid=648
         __slab_alloc.isra.47.constprop.56+0x5f6/0x658
         kmem_cache_alloc_trace+0x106/0x408
         call_usermodehelper_setup+0x70/0x128
         call_usermodehelper+0x62/0x90
         cgroup_release_agent+0x178/0x1c0
         process_one_work+0x36e/0x680
         worker_thread+0x2f0/0x4f8
         kthread+0x10a/0x120
         kernel_thread_starter+0x6/0xc
         kernel_thread_starter+0x0/0xc
        INFO: Freed in call_usermodehelper_exec+0x110/0x1b8 age=71 cpu=2 pid=648
         __slab_free+0x94/0x560
         kfree+0x364/0x3e0
         call_usermodehelper_exec+0x110/0x1b8
         cgroup_release_agent+0x178/0x1c0
         process_one_work+0x36e/0x680
         worker_thread+0x2f0/0x4f8
         kthread+0x10a/0x120
         kernel_thread_starter+0x6/0xc
         kernel_thread_starter+0x0/0xc
    
    There is a use-after-free bug on the subprocess_info structure allocated
    by the user mode helper.  In case do_execve() returns with an error
    ____call_usermodehelper() stores the error code to sub_info->retval, but
    sub_info can already have been freed.
    
    Regarding UMH_NO_WAIT, the sub_info structure can be freed by
    __call_usermodehelper() before the worker thread returns from
    do_execve(), allowing memory corruption when do_execve() failed after
    exec_mmap() is called.
    
    Regarding UMH_WAIT_EXEC, the call to umh_complete() allows
    call_usermodehelper_exec() to continue which then frees sub_info.
    
    To fix this race the code needs to make sure that the call to
    call_usermodehelper_freeinfo() is always done after the last store to
    sub_info->retval.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Reviewed-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1effd9f19324efb05fccc7421530e11a52db0278
Author: Kirill Tkhai <ktkhai@parallels.com>
Date:   Wed Oct 22 11:17:11 2014 +0400

    sched/numa: Fix unsafe get_task_struct() in task_numa_assign()
    
    Unlocked access to dst_rq->curr in task_numa_compare() is racy.
    If curr task is exiting this may be a reason of use-after-free:
    
    task_numa_compare()                    do_exit()
        ...                                        current->flags |= PF_EXITING;
        ...                                    release_task()
        ...                                        ~~delayed_put_task_struct()~~
        ...                                    schedule()
        rcu_read_lock()                        ...
        cur = ACCESS_ONCE(dst_rq->curr)        ...
            ...                                rq->curr = next;
            ...                                    context_switch()
            ...                                        finish_task_switch()
            ...                                            put_task_struct()
            ...                                                __put_task_struct()
            ...                                                    free_task_struct()
            task_numa_assign()                                     ...
                get_task_struct()                                  ...
    
    As noted by Oleg:
    
      <<The lockless get_task_struct(tsk) is only safe if tsk == current
        and didn't pass exit_notify(), or if this tsk was found on a rcu
        protected list (say, for_each_process() or find_task_by_vpid()).
        IOW, it is only safe if release_task() was not called before we
        take rcu_read_lock(), in this case we can rely on the fact that
        delayed_put_pid() can not drop the (potentially) last reference
        until rcu_read_unlock().
    
        And as Kirill pointed out task_numa_compare()->task_numa_assign()
        path does get_task_struct(dst_rq->curr) and this is not safe. The
        task_struct itself can't go away, but rcu_read_lock() can't save
        us from the final put_task_struct() in finish_task_switch(); this
        reference goes away without rcu gp>>
    
    The patch provides simple check of PF_EXITING flag. If it's not set,
    this guarantees that call_rcu() of delayed_put_task_struct() callback
    hasn't happened yet, so we can safely do get_task_struct() in
    task_numa_assign().
    
    Locked dst_rq->lock protects from concurrency with the last schedule().
    Reusing or unmapping of cur's memory may happen without it.
    
    Suggested-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/1413962231.19914.130.camel@tkhai
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commits)
      [media] s5p-jpeg: Avoid -Wuninitialized warning in s5p_jpeg_parse_hdr
      [media] s5p-fimc: Only build suspend/resume for PM
      [media] s5p-jpeg: Only build suspend/resume for PM
      [media] Remove references to non-existent PLAT_S5P symbol
      [media] videobuf-dma-contig: set vm_pgoff to be zero to pass the sanity check in vm_iomap_memory()
      [media] tw68: remove bogus I2C_ALGOBIT dependency
      [media] usbvision-video: two use after frees
      [media] tw68: remove deprecated IRQF_DISABLED
      [media] xc5000: use after free in release()
      [media] em28xx-input: NULL dereference on error
      [media] wl128x: fix fmdbg compiler warning
      Revert "[media] v4l2-dv-timings: fix a sparse warning"
      [media] hackrf: harmless off by one in debug code
      [media] cx23885: initialize config structs for T9580
      [media] v4l: uvcvideo: Fix buffer completion size check
      [media] vivid: fix buffer overrun
      [media] saa7146: Create a device name before it's used
      [media] em28xx: fix uninitialized variable warning
      [media] vivid: fix Kconfig FB dependency
      [media] anysee: make sure loading modules is const
      ...

commit 470a9147899500eb4898f77816520c4b4aa1a698
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Oct 16 04:57:21 2014 -0300

    [media] usbvision-video: two use after frees
    
    The lock has been freed in usbvision_release() so there is no need to
    call mutex_unlock() here.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>

commit 4961a5323f5d873e2170c5ef4f48538930e6df3e
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Sep 25 08:40:08 2014 -0300

    [media] xc5000: use after free in release()
    
    I moved the call to hybrid_tuner_release_state(priv) after
    "priv->firmware" dereference.
    
    Fixes: 5264a522a597 ('[media] media: tuner xc5000 - release firmwware from xc5000_release()')
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Shuah Khan <shuahkh@osg.samsung.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@osg.samsung.com>

commit 789f202326640814c52f82e80cef3584d8254623
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Wed Oct 22 17:09:53 2014 +0800

    xfrm6: fix a potential use after free in xfrm6_policy.c
    
    pskb_may_pull() maybe change skb->data and make nh and exthdr pointer
    oboslete, so recompute the nd and exthdr
    
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Linux 3.18-rc1
      MAINTAINERS: corrected bcm2835 search
      Net: DSA: Fix checking for get_phy_flags function
      sparc64: Do not define thread fpregs save area as zero-length array.
      sparc64: Fix corrupted thread fault code.
      MAINTAINERS: Become the docs maintainer
      x86,kvm,vmx: Preserve CR4 across VM entry
      ipv6: fix a potential use after free in sit.c
      ipv6: fix a potential use after free in ip6_offload.c
      ipv4: fix a potential use after free in gre_offload.c
      tcp: fix build error if IPv6 is not enabled
      futex: Ensure get_futex_key_refs() always implies a barrier
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      ...

commits)
      Linux 3.18-rc1
      MAINTAINERS: corrected bcm2835 search
      Net: DSA: Fix checking for get_phy_flags function
      sparc64: Do not define thread fpregs save area as zero-length array.
      sparc64: Fix corrupted thread fault code.
      MAINTAINERS: Become the docs maintainer
      x86,kvm,vmx: Preserve CR4 across VM entry
      ipv6: fix a potential use after free in sit.c
      ipv6: fix a potential use after free in ip6_offload.c
      ipv4: fix a potential use after free in gre_offload.c
      tcp: fix build error if IPv6 is not enabled
      futex: Ensure get_futex_key_refs() always implies a barrier
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      ...

commit, the rest are a series of minor cleanups which
      have been sitting in MST's tree during my vacation.  I changed a
      function name and made one trivial change, then they spent two days in
      linux-next"
    
    * tag 'virtio-next-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/rusty/linux: (25 commits)
      virtio-rng: refactor probe error handling
      virtio_scsi: drop scan callback
      virtio_balloon: enable VQs early on restore
      virtio_scsi: fix race on device removal
      virito_scsi: use freezable WQ for events
      virtio_net: enable VQs early on restore
      virtio_console: enable VQs early on restore
      virtio_scsi: enable VQs early on restore
      virtio_blk: enable VQs early on restore
      virtio_scsi: move kick event out from virtscsi_init
      virtio_net: fix use after free on allocation failure
      9p/trans_virtio: enable VQs early
      virtio_console: enable VQs early
      virtio_blk: enable VQs early
      virtio_net: enable VQs early
      virtio: add API to enable VQs early
      virtio_net: minor cleanup
      virtio-net: drop config_mutex
      virtio_net: drop config_enable
      virtio-blk: drop config_mutex
      ...

commit a6d4518da371b0d21512ef0f641928d6f99ee70f
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Sat Oct 18 17:33:38 2014 +0800

    ipv6: fix a potential use after free in sit.c
    
    pskb_may_pull() maybe change skb->data and make iph pointer oboslete,
    fix it by geting ip header length directly.
    
    Fixes: ca15a078 (sit: generate icmpv6 error when receiving icmpv4 error)
    Cc: Oussama Ghorbel <ghorbel@pivasoftware.com>
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc6fb41cd64fd810bcc69fe9776d2f500778f38f
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Sat Oct 18 17:27:42 2014 +0800

    ipv6: fix a potential use after free in ip6_offload.c
    
    pskb_may_pull() maybe change skb->data and make opth pointer oboslete,
    so set the opth again
    
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b4e3cef703fb21b26db053a770900f2bd910638b
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Sat Oct 18 17:26:04 2014 +0800

    ipv4: fix a potential use after free in gre_offload.c
    
    pskb_may_pull() may change skb->data and make greh pointer oboslete;
    so need to reassign greh;
    but since first calling pskb_may_pull already ensured that skb->data
    has enough space for greh, so move the reference of greh before second
    calling pskb_may_pull(), to avoid reassign greh.
    
    Fixes: 7a7ffbabf9("ipv4: fix tunneled VM traffic over hw VXLAN/GRE GSO NIC")
    Cc: Wei-Chun Chao <weichunc@plumgrid.com>
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      r8152: return -EBUSY for runtime suspend
      ipv4: fix a potential use after free in fou.c
      ipv4: fix a potential use after free in ip_tunnel_core.c
      hyperv: Add handling of IP header with option field in netvsc_set_hash()
      openvswitch: Create right mask with disabled megaflows
      vxlan: fix a free after use
      openvswitch: fix a use after free
      ipv4: dst_entry leak in ip_send_unicast_reply()
      ipv4: clean up cookie_v4_check()
      ipv4: share tcp_v4_save_options() with cookie_v4_check()
      ipv4: call __ip_options_echo() in cookie_v4_check()
      atm: simplify lanai.c by using module_pci_driver
      ...

commit d8f00d27105a1553a13d4a96c3eb4544f70ca908
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Fri Oct 17 16:53:47 2014 +0800

    ipv4: fix a potential use after free in fou.c
    
    pskb_may_pull() maybe change skb->data and make uh pointer oboslete,
    so reload uh and guehdr
    
    Fixes: 37dd0247 ("gue: Receive side for Generic UDP Encapsulation")
    Cc: Tom Herbert <therbert@google.com>
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1245dfc8cadb258386fcd27df38215a0eccb1f17
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Fri Oct 17 16:53:23 2014 +0800

    ipv4: fix a potential use after free in ip_tunnel_core.c
    
    pskb_may_pull() maybe change skb->data and make eth pointer oboslete,
    so set eth after pskb_may_pull()
    
    Fixes:3d7b46cd("ip_tunnel: push generic protocol handling to ip_tunnel module")
    Cc: Pravin B Shelar <pshelar@nicira.com>
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Acked-by: Pravin B Shelar <pshelar@nicira.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 389f48947a5a37ea283de520abb742d42174edb0
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Fri Oct 17 14:03:08 2014 +0800

    openvswitch: fix a use after free
    
    pskb_may_pull() called by arphdr_ok can change skb->data, so put the arp
    setting after arphdr_ok to avoid the use the freed memory
    
    Fixes: 0714812134d7d ("openvswitch: Eliminate memset() from flow_extract.")
    Cc: Jesse Gross <jesse@nicira.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Acked-by: Jesse Gross <jesse@nicira.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ce6502a8f9572179f044a4d62667c4645256d6e4
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Thu Oct 16 08:49:41 2014 +0800

    vxlan: fix a use after free in vxlan_encap_bypass
    
    when netif_rx() is done, the netif_rx handled skb maybe be freed,
    and should not be used.
    
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b7fd2e688d51f8ed7380758047fcaa4d4693d47
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Wed Oct 15 16:23:28 2014 +0300

    virtio_net: fix use after free
    
    commit 0b725a2ca61bedc33a2a63d0451d528b268cf975
        net: Remove ndo_xmit_flush netdev operation, use signalling instead.
    
    added code that looks at skb->xmit_more after the skb has
    been put in TX VQ. Since some paths process the ring and free the skb
    immediately, this can cause use after free.
    
    Fix by storing xmit_more in a local variable.
    
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 923190d32de4428afbea5e5773be86bea60a9925
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Mon Oct 6 16:32:52 2014 -0400

    selinux: fix inode security list corruption
    
    sb_finish_set_opts() can race with inode_free_security()
    when initializing inode security structures for inodes
    created prior to initial policy load or by the filesystem
    during ->mount().   This appears to have always been
    a possible race, but commit 3dc91d4 ("SELinux:  Fix possible
    NULL pointer dereference in selinux_inode_permission()")
    made it more evident by immediately reusing the unioned
    list/rcu element  of the inode security structure for call_rcu()
    upon an inode_free_security().  But the underlying issue
    was already present before that commit as a possible use-after-free
    of isec.
    
    Shivnandan Kumar reported the list corruption and proposed
    a patch to split the list and rcu elements out of the union
    as separate fields of the inode_security_struct so that setting
    the rcu element would not affect the list element.  However,
    this would merely hide the issue and not truly fix the code.
    
    This patch instead moves up the deletion of the list entry
    prior to dropping the sbsec->isec_lock initially.  Then,
    if the inode is dropped subsequently, there will be no further
    references to the isec.
    
    Reported-by: Shivnandan Kumar <shivnandan.k@samsung.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Moore <pmoore@redhat.com>

commit 024655555021e971203c519770609509e0af4468
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Wed Oct 15 10:22:31 2014 +1030

    virtio_net: fix use after free on allocation failure
    
    In the extremely unlikely event that driver initialization fails after
    RX buffers are added, virtio net frees RX buffers while VQs are
    still active, potentially causing device to use a freed buffer.
    
    To fix, reset device first - same as we do on device removal.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit 589506f1e7f135943bcd34903bcdcf1fdaf00549
Author: Li RongQing <roy.qing.li@gmail.com>
Date:   Sun Sep 7 18:10:51 2014 +0800

    libceph: fix a use after free issue in osdmap_set_max_osd
    
    If the state variable is krealloced successfully, map->osd_state will be
    freed, once following two reallocation failed, and exit the function
    without resetting map->osd_state, map->osd_state become a wild pointer.
    
    fix it by resetting them after krealloc successfully.
    
    Signed-off-by: Li RongQing <roy.qing.li@gmail.com>
    Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>

commits)
      xfs: fix agno increment in xfs_inumbers() loop
      xfs: xfs_iflush_done checks the wrong log item callback
      xfs: flush the range before zero range conversion
      xfs: restore buffer_head unwritten bit on ioend cancel
      xfs: check for null dquot in xfs_quota_calc_throttle()
      xfs: fix crc field handling in xfs_sb_to/from_disk
      xfs: don't send null bp to xfs_trans_brelse()
      xfs: check for inode size overflow in xfs_new_eof()
      xfs: only set extent size hint when asked
      xfs: project id inheritance is a directory only flag
      xfs: kill time.h
      xfs: compat_xfs_bstat does not have forkoff
      xfs: simplify xfs_zero_remaining_bytes
      xfs: check xfs_buf_read_uncached returns correctly
      xfs: introduce xfs_buf_submit[_wait]
      xfs: kill xfs_bioerror_relse
      xfs: xfs_bioerror can die.
      xfs: kill xfs_bdstrat_cb
      xfs: rework xfs_buf_bio_endio error handling
      xfs: xfs_buf_ioend and xfs_buf_iodone_work duplicate functionality
      ...

commits)
      ASoC: mc13783: Ensure we only try to dereference valid of_nodes
      ASoC: rockchip-i2s: fix infinite loop in rockchip_snd_txctrl
      ALSA: hda - Add dock port support to Thinkpad L440 (71aa:501e)
      ALSA: Allow pass NULL dev for snd_pci_quirk_lookup()
      ASoC: imx-es8328: Fix of_node_put() call with uninitialized object
      ASoC: soc-pcm: fix sig_bits determination in soc_pcm_apply_msb()
      ASoC: simple-card: Initialize headphone and mic GPIO numbers
      ASoC: imx-es8328: Fix missing return code in imx_es8328_probe()
      ALSA: hda - Add dock support for Thinkpad T440 (17aa:2212)
      ALSA: usb: caiaq: check for cdev->n_streams > 1
      ASoC: 88pm860x-codec: Fix possibly missing string termination
      ASoC: core: fix use after free in snd_soc_remove_platform()
      ASoC: soc-dapm: fix use after free
      ALSA: hda - Make the inv dmic handling for Realtek use generic parser
      ALSA: hda - Add Inverted Internal mic for Samsung Ativ book 9 (NP900X3G)
      ALSA: hda - Add inverted internal mic for Asus Aspire 4830T
      ASoC: Intel: byt-rt5640: fix coccinelle warnings
      ASoC: fsl_esai doc: Add "fsl,vf610-esai" as compatible string
      ASoC: da732x: Remove unnecessary KERN_ERR in pr_err()
      ASoC: simple-card: Fix detect gpio documentation.
      ...

commit decc27b01d584c985c231e73d3b493de6ec07af8
Author: Daniel Mack <daniel@zonque.org>
Date:   Tue Oct 7 13:41:23 2014 +0200

    ASoC: core: fix use after free in snd_soc_remove_platform()
    
    Coverity spotted an use-after-free condition in snd_soc_remove_platform().
    Fix this by moving snd_soc_component_cleanup() after the debug print
    statement which uses the component's string.
    
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

commit e5092c96c9c28f4d12811edcd02ca8eec16e748e
Author: Daniel Mack <daniel@zonque.org>
Date:   Tue Oct 7 13:41:24 2014 +0200

    ASoC: soc-dapm: fix use after free
    
    Coverity spotted the following possible use-after-free condition in
    dapm_create_or_share_mixmux_kcontrol():
    
    If kcontrol is NULL, and (wname_in_long_name && kcname_in_long_name)
    validates to true, 'name' will be set to an allocated string, and be
    freed a few lines later via the 'long_name' alias. 'name', however,
    is used by dev_err() in case snd_ctl_add() fails.
    
    Fix this by adding a jump label that frees 'long_name' at the end of
    the function.
    
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org

commits)
      drm/i915: Enable pixel replicated modes on BDW and HSW.
      drm/i915: Don't spam dmesg with rps messages on vlv/chv
      drm/i915: Do not leak pages when freeing userptr objects
      drm/i915: Do not store the error pointer for a failed userptr registration
      Revert "drm/i915/bdw: BDW Software Turbo"
      drm/i915/bdw: Cleanup pre prod workarounds
      drm/i915: Use EIO instead of EAGAIN for sink CRC error.
      drm/i915: Extend BIOS stolen mem handling to all platform
      drm/i915: Match GTT space sanity checker with implementation
      drm/i915: HSW always use GGTT selector for secure batches
      drm/i915: add cherryview specfic forcewake in execlists_elsp_write
      drm/i915: fix another use-after-free in i915_gem_evict_everything
      drm/i915: Don't reinit hpd interrupts after gpu reset
      drm/i915: Wrap -EIO send-vblank event for failed pageflip in spinlock
      drm/i915: Drop any active reference before unbinding
      drm/i915: Objects on the unbound list may still have an active reference
      drm/i915/edp: use lane count and link rate from DPCD for eDP
      drm/i915/dp: add missing \n in the TPS3 debug message
      drm/i915/hdmi, dp: Do not dereference the encoder in the connector destroy
      drm/i915: Limit the watermark to at least 8 entries on gen2/3
      ...

commits)
      bna: Update Maintainer Email
      r8152: disable power cut for RTL8153
      r8152: remove clearing bp
      bnx2: Correctly receive full sized 802.1ad fragmes
      tg3: Allow for recieve of full-size 8021AD frames
      r8152: fix setting RTL8152_UNPLUG
      netxen: Fix bug in Tx completion path.
      netxen: Fix BUG "sleeping function called from invalid context"
      ipv6: remove rt6i_genid
      hyperv: Fix a bug in netvsc_start_xmit()
      net: stmmac: fix stmmac_pci_probe failed when CONFIG_HAVE_CLK is selected
      ematch: Fix matching of inverted containers.
      gro: fix aggregation for skb using frag_list
      neigh: check error pointer instead of NULL for ipv4_neigh_lookup()
      ip6_gre: Return an error when adding an existing tunnel.
      ip6_vti: Return an error when adding an existing tunnel.
      ip6_tunnel: Return an error when adding an existing tunnel.
      ip6gre: add a rtnl link alias for ip6gretap
      net/mlx4_core: Allow not to specify probe_vf in SRIOV IB mode
      r8152: fix the carrier off when autoresuming
      ...

commit e11bb8052c3f500e66142f33579cc054d691a8fb
Author: Dave Chinner <dchinner@redhat.com>
Date:   Thu Oct 2 09:04:11 2014 +1000

    xfs: synchronous buffer IO needs a reference
    
    When synchronous IO runs IO completion work, it does so without an
    IO reference or a hold reference on the buffer. The IO "hold
    reference" is owned by the submitter, and released when the
    submission is complete. The IO reference is released when both the
    submitter and the bio end_io processing is run, and so if the io
    completion work is run from IO completion context, it is run without
    an IO reference.
    
    Hence we can get the situation where the submitter can submit the
    IO, see an error on the buffer and unlock and free the buffer while
    there is still IO in progress. This leads to use-after-free and
    memory corruption.
    
    Fix this by taking a "sync IO hold" reference that is owned by the
    IO and not released until after the buffer completion calls are run
    to wake up synchronous waiters. This means that the buffer will not
    be freed in any circumstance until all IO processing is completed.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit f1e3a0932f3a9554371792a7daaf1e0eb19f66d5
Author: Kirill Tkhai <ktkhai@parallels.com>
Date:   Mon Sep 22 22:36:36 2014 +0400

    sched: Use rq->rd in sched_setaffinity() under RCU read lock
    
    Probability of use-after-free isn't zero in this place.
    
    Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org> # v3.14+
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20140922183636.11015.83611.stgit@localhost
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 66339c31bc3978d5fff9c4b4cb590a861def4db2
Author: Kirill Tkhai <ktkhai@parallels.com>
Date:   Mon Sep 22 22:36:24 2014 +0400

    sched: Use dl_bw_of() under RCU read lock
    
    dl_bw_of() dereferences rq->rd which has to have RCU read lock held.
    Probability of use-after-free isn't zero here.
    
    Also add lockdep assert into dl_bw_cpus().
    
    Signed-off-by: Kirill Tkhai <ktkhai@parallels.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org> # v3.14+
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20140922183624.11015.71558.stgit@localhost
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commits)
      drm/nouveau: ltc/gf100-: fix cbc issues on certain boards
      drm/bochs: add missing drm_connector_register call
      drm/cirrus: add missing drm_connector_register call
      staging: vt6655: buffer overflow in ioctl
      USB: storage: Add quirks for Entrega/Xircom USB to SCSI converters
      USB: storage: Add quirk for Ariston Technologies iConnect USB to SCSI adapter
      USB: storage: Add quirk for Adaptec USBConnect 2000 USB-to-SCSI Adapter
      USB: EHCI: unlink QHs even after the controller has stopped
      [SCSI] fix for bidi use after free
      [SCSI] fix regression that accidentally disabled block-based tcq
      [SCSI] libiscsi: fix potential buffer overrun in __iscsi_conn_send_pdu
      drm/radeon: Fix typo 'addr' -> 'entry' in rs400_gart_set_page
      drm/nouveau/runpm: fix module unload
      drm/radeon/px: fix module unload
      vgaswitcheroo: add vga_switcheroo_fini_domain_pm_ops
      drm/radeon: don't reset dma on r6xx-evergreen init
      drm/radeon: don't reset sdma on CIK init
      drm/radeon: don't reset dma on NI/SI init
      drm/radeon/dpm: fix resume on mullins
      drm/radeon: Disable HDP flush before every CS again for < r600
      ...

commit cf303626748e0a5c059e453d025539583d870116
Author: Michel Thierry <michel.thierry@intel.com>
Date:   Tue Sep 9 13:04:43 2014 +0100

    drm/i915: fix another use-after-free in i915_gem_evict_everything
    
    Also here, i915_gem_evict_vm causes an unbind, which can end up dropping
    the last ref to the ppgtt.
    
    Triggered by igt gem_evict_everything test.
    
    Testcase: igt/gem_evict_everything
    Signed-off-by: Michel Thierry <michel.thierry@intel.com>
    Reviewed-by: Chris Wilson <chris@cris-wilsonc.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f81426a84bef870d26e5e752772d8ca203cd4aed
Author: Daniel Gryniewicz <dang@linuxbox.com>
Date:   Tue Sep 16 10:41:13 2014 -0400

    [SCSI] fix for bidi use after free
    
    When ending a bi-directionional SCSI request, blk_finish_request()
    cleans up and frees the request, but scsi_release_bidi_buffers() tries
    to indirect through the request to find it's data buffers.  This causes
    a panic due to a null pointer dereference.
    
    Move the call to scsi_release_bidi_buffers() before the call to
    blk_finish_request().
    
    Signed-off-by: Daniel Gryniewicz <dang@linuxbox.com>
    Reviewed-by: Webb Scales <webbnh@hp.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 67a2c45ee7f4f250458279a2e1244679c5d9735c
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Wed Sep 3 21:35:43 2014 +0800

    Btrfs: fix use-after-free problem of the device during device replace
    
    The problem is:
            Task0(device scan task)         Task1(device replace task)
            scan_one_device()
            mutex_lock(&uuid_mutex)
            device = find_device()
                                            mutex_lock(&device_list_mutex)
                                            lock_chunk()
                                            rm_and_free_source_device
                                            unlock_chunk()
                                            mutex_unlock(&device_list_mutex)
            check device
    
    Destroying the target device if device replace fails also has the same problem.
    
    We fix this problem by locking uuid_mutex during destroying source device or
    target device, just like the device remove operation.
    
    It is a temporary solution, we can fix this problem and make the code more
    clear by atomic counter in the future.
    
    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commit db7157d4cfce6edf052452fb1d327d4d11b67f4c
Author: Joe Lawrence <joe.lawrence@stratus.com>
Date:   Tue Aug 26 17:10:41 2014 -0400

    qla2xxx: Fix shost use-after-free on device removal
    
    Once calling scsi_host_put, be careful to not access qla_hw_data through
    the Scsi_Host private data (ie, scsi_qla_host base_vha).
    
    Fixes: fe1b806f4f71 ("qla2xxx: Refactor shutdown code so some functionality can be reused")
    Cc: stable@vger.kernel.org # 3.14, 3.15, 3.16
    Signed-off-by: Joe Lawrence <joe.lawrence@stratus.com>
    Acked-by: Chad Dupuis <chad.dupuis@qlogic.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit 2368ffb18b1d2b04eb80478d225676caa7a3c4c8
Author: Mario Kleiner <mario.kleiner.de@gmail.com>
Date:   Wed Aug 6 03:22:46 2014 +0200

    drm: Use vblank_disable_and_save in drm_vblank_cleanup()
    
    Calling vblank_disable_fn() will cause that function to no-op
    if !dev->vblank_disable_allowed for some kms drivers, e.g.,
    on nouveau-kms. This can cause the gpu vblank irq's to not get
    disabled before freeing the dev->vblank array, so if a
    vblank irq fires and calls into drm_handle_vblank() after
    drm_vblank_cleanup() completes, it will cause use-after-free
    access to dev->vblank array.
    
    Call vblank_disable_and_save unconditionally, so vblank irqs
    are guaranteed to be off, before we delete the data structures
    on which they operate.
    
    Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    [danvet: Fix subsystem name in patch subject.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 721bd4d5c3f957f98157b6dcac9c4a4dd828e3ff
Author: Gu Zheng <guz.fnst@cn.fujitsu.com>
Date:   Fri Sep 5 18:31:00 2014 +0800

    f2fs: use lock-less list(llist) to simplify the flush cmd management
    
    We use flush cmd control to collect many flush cmds, and flush them
    together. In this case, we use two list to manage the flush cmds
    (collect and dispatch), and one spin lock is used to protect this.
    In fact, the lock-less list(llist) is very suitable to this case,
    and we use simplify this routine.
    
    -
    v2:
    -use llist_for_each_entry_safe to fix possible use-after-free issue.
    -remove the unused field from struct flush_cmd.
    Thanks for Yu's suggestion.
    -
    
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit b216df53848129c969a465bb9237fbc9b8fafaad
Author: Cyrill Gorcunov <gorcunov@gmail.com>
Date:   Fri Aug 8 00:26:15 2014 +0400

    tty: Fix potential use after free in release_one_tty
    
    In case if we're releasing the last tty reference the following
    call sequence is possible
    
    tty_driver_kref_put
      destruct_tty_driver
        kfree(driver);
    
    where @driver is used in next module_put call, which leads to
    
     | [ 285.964007] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
     | [ 285.964007] Workqueue: events release_one_tty
     | [ 285.964007] task: ffff8800cc7ea5f0 ti: ffff8800cb800000 task.ti: ffff8800cb800000
     | [ 285.964007] RIP: 0010:[<ffffffff810aeaf5>] [<ffffffff810aeaf5>] module_put+0x24/0xf4
     | [ 285.964007] RSP: 0018:ffff8800cb801d48 EFLAGS: 00010213
     | [ 285.964007] RAX: ffff8800cb801fd8 RBX: ffff8800ca3429d0 RCX: ffff8800cb1db400
     | [ 285.964007] RDX: 0000000000000000 RSI: ffffffff817349c1 RDI: 0000000000000001
     | [ 285.964007] RBP: ffff8800cb801d60 R08: ffff8800cd632b40 R09: 0000000000000000
     | [ 285.964007] R10: 00000000ffffffff R11: ffff88011f40a000 R12: 6b6b6b6b6b6b6b6b
     | [ 285.964007] R13: ffff8800ca342520 R14: 0000000000000000 R15: ffff88011f5d8200
     | [ 285.964007] FS: 0000000000000000(0000) GS:ffff88011f400000(0000) knlGS:0000000000000000
     | [ 285.964007] CS: 0010 DS: 0000 ES: 0000 CR0: 000000008005003b
     | [ 285.964007] CR2: 00007faf5229d090 CR3: 0000000001c0b000 CR4: 00000000000006f0
     | [ 285.964007] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     | [ 285.964007] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
     | [ 285.964007] Stack:
     | [ 285.964007] ffff8800ca3429d0 ffff8800ca342a30 ffff8800ca342520 ffff8800cb801d88
     | [ 285.964007] ffffffff8146554a ffff8800cc77cc78 ffff8800ca3429d0 ffff88011f5d3800
     | [ 285.964007] ffff8800cb801e08 ffffffff810683c1 ffffffff810682ff 0000000000000046
     | [ 285.964007] Call Trace:
     | [ 285.964007] [<ffffffff8146554a>] release_one_tty+0x54/0xa3
     | [ 285.964007] [<ffffffff810683c1>] process_one_work+0x223/0x404
     | [ 285.964007] [<ffffffff810682ff>] ? process_one_work+0x161/0x404
     | [ 285.964007] [<ffffffff81068971>] worker_thread+0x136/0x205
     | [ 285.964007] [<ffffffff8106883b>] ? rescuer_thread+0x26a/0x26a
     | [ 285.964007] [<ffffffff8106e5bf>] kthread+0xa2/0xaa
     | [ 285.964007] [<ffffffff810a4586>] ? trace_hardirqs_on_caller+0x16/0x1eb
     | [ 285.964007] [<ffffffff8106e51d>] ? __kthread_parkme+0x65/0x65
     | [ 285.964007] [<ffffffff8173f59c>] ret_from_fork+0x7c/0xb0
     | [ 285.964007] [<ffffffff8106e51d>] ? __kthread_parkme+0x65/0x65
     | [ 285.964007] Code: 09 00 5b 41 5c 5d c3 0f 1f 44 00 00 55 48 85 ff 48 89 e5 41 55 41 54 49 89 fc 53 0f 84 d3 00
     | 00 00 bf 01 00 00 00 e8 d0 a1 fc ff <49> 8b 84 24 50 02 00 00 65 48 ff 40 08 4c 8b 6d 08 0f 1f 44 00
    
    so simply keep a local reference to the module owner and
    use it later.
    
    CC: Pavel Emelyanov <xemul@parallels.com>
    CC: Jiri Slaby <jslaby@suse.cz>
    CC: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27419604f51a97d497853f14142c1059d46eb597
Author: David Howells <dhowells@redhat.com>
Date:   Tue Sep 2 13:52:20 2014 +0100

    KEYS: Fix use-after-free in assoc_array_gc()
    
    An edit script should be considered inaccessible by a function once it has
    called assoc_array_apply_edit() or assoc_array_cancel_edit().
    
    However, assoc_array_gc() is accessing the edit script just after the
    gc_complete: label.
    
    Reported-by: Andreea-Cristina Bernat <bernat.ada@gmail.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Andreea-Cristina Bernat <bernat.ada@gmail.com>
    cc: shemming@brocade.com
    cc: paulmck@linux.vnet.ibm.com
    Cc: stable@vger.kernel.org
    Signed-off-by: James Morris <james.l.morris@oracle.com>

commit 29e20aa6c6aff35c81d4da2e2cd516dadb569061
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Fri Aug 15 03:00:06 2014 +0400

    at76c50x-usb: fix use after free on failure path in at76_probe()
    
    After commit 174beab7d445 ("at76c50x-usb: Don't perform DMA from stack memory")
    at76_delete_device() and usb_put_dev() are called both
    if at76_init_new_device() fails in at76_probe().
    But at76_delete_device() does usb_put_dev(priv->dev) itself
    that means double usb_put_dev().
    
    The patch avoids the problem by moving usb_put_dev() from
    at76_delete_device() to at76_disconnect().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 884cf705c7e60bc6ade7ddafcbe943af4dc84604
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 22 20:30:12 2014 -0700

    net: remove dead code after sk_data_ready change
    
    As a followup to commit 676d23690fb ("net: Fix use after free by
    removing length arg from sk_data_ready callbacks"), we can remove
    some useless code in sock_queue_rcv_skb() and rxrpc_queue_rcv_skb()
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4958cf32f66df854b932b601eef2da3f95973339
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sun Aug 10 23:35:11 2014 +0700

    usb: dbgp gadget: fix use after free in dbgp_unbind()
    
    After dbgp_bind()-dbgp_unbind() cycle happens, static variable dbgp
    contains pointers to already deallocated memory (dbgp.serial and dbgp.req).
    If the next dbgp_bind() fails, for example in usb_ep_alloc_request(),
    dbgp_bind() calls dbgp_unbind() on failure path,
    and dbgp_unbind() frees dbgp.serial that still stores a pointer
    to already deallocated memory.
    
    The patch sets pointers to NULL in dbgp_unbind().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commits)
      bcache: Drop unneeded blk_sync_queue() calls
      bcache: add mutex lock for bch_is_open
      bcache: Correct printing of btree_gc_max_duration_ms
      bcache: try to set b->parent properly
      bcache: fix memory corruption in init error path
      bcache: fix crash with incomplete cache set
      bcache: Fix more early shutdown bugs
      bcache: fix use-after-free in btree_gc_coalesce()
      bcache: Fix an infinite loop in journal replay
      bcache: fix crash in bcache_btree_node_alloc_fail tracepoint
      bcache: bcache_write tracepoint was crashing
      bcache: fix typo in bch_bkey_equal_header
      bcache: Allocate bounce buffers with GFP_NOWAIT
      bcache: Make sure to pass GFP_WAIT to mempool_alloc()
      bcache: fix uninterruptible sleep in writeback thread
      bcache: wait for buckets when allocating new btree root
      bcache: fix crash on shutdown in passthrough mode
      bcache: fix lockdep warnings on shutdown
      bcache allocator: send discards with correct size
      bcache: Fix to remove the rcu_sched stalls.
      ...

commit 01777836c87081e4f68c4a43c9abe6114805f91e
Author: Jan Kara <jack@suse.cz>
Date:   Wed Aug 6 19:43:56 2014 +0200

    reiserfs: Fix use after free in journal teardown
    
    If do_journal_release() races with do_journal_end() which requeues
    delayed works for transaction flushing, we can leave work items for
    flushing outstanding transactions queued while freeing them. That
    results in use after free and possible crash in run_timers_softirq().
    
    Fix the problem by not requeueing works if superblock is being shut down
    (MS_ACTIVE not set) and using cancel_delayed_work_sync() in
    do_journal_release().
    
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 9cba5efab5a8145ae6c52ea273553f069c294482
Author: Mario Kleiner <mario.kleiner.de@gmail.com>
Date:   Tue Jul 29 02:36:44 2014 +0200

    drm/nouveau: Dis/Enable vblank irqs during suspend/resume.
    
    Vblank irqs don't get disabled during suspend or driver
    unload, which causes irq delivery after "suspend" or
    driver unload, at least until the gpu is powered off.
    This could race with drm_vblank_cleanup() in the case
    of nouveau and cause a use-after-free bug if the driver
    is unloaded.
    
    More annoyingly during everyday use, at least on nv50
    display engine (likely also others), vblank irqs are
    off after a resume from suspend, but the drm doesn't
    know this, so all vblank related functionality is dead
    after a resume. E.g., all windowed OpenGL clients will
    hang at swapbuffers time, as well as many fullscreen
    clients in many cases. This makes suspend/resume useless
    if one wants to use any OpenGL apps after the resume.
    
    In Linux 3.16, drm_vblank_on() was added, complementing
    the older drm_vblank_off()  to solve these problems
    elegantly, so use those calls in nouveaus suspend/resume
    code.
    
    For kernels 3.8 - 3.15, we need to cherry-pick the
    drm_vblank_on() patch to support this patch.
    
    Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    Cc: <stable@vger.kernel.org> #v3.16
    Cc: <stable@vger.kernel.org> #v3.8+: f275228: drm: Add drm_vblank_on()
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 5838d4442bd5971687b72221736222637e03140d
Author: Jan Kara <jack@suse.cz>
Date:   Wed Aug 6 16:03:28 2014 -0700

    fanotify: fix double free of pending permission events
    
    Commit 85816794240b ("fanotify: Fix use after free for permission
    events") introduced a double free issue for permission events which are
    pending in group's notification queue while group is being destroyed.
    These events are freed from fanotify_handle_event() but they are not
    removed from groups notification queue and thus they get freed again
    from fsnotify_flush_notify().
    
    Fix the problem by removing permission events from notification queue
    before freeing them if we skip processing access response.  Also expand
    comments in fanotify_release() to explain group shutdown in detail.
    
    Fixes: 85816794240b9659e66e4d9b0df7c6e814e5f603
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reported-by: Douglas Leeder <douglas.leeder@sophos.com>
    Tested-by: Douglas Leeder <douglas.leeder@sophos.com>
    Reported-by: Heinrich Schuchard <xypron.glpk@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 400ffaa2acd72274e2c7293a9724382383bebf3e
Author: Slava Pestov <sp@daterainc.com>
Date:   Sat Jul 12 21:53:11 2014 -0700

    bcache: fix use-after-free in btree_gc_coalesce()
    
    If we goto out_nocoalesce after we free new_nodes[0], we end up freeing
    new_nodes[0] again. This was generating a lockdep warning. The fix is
    to set new_nodes[0] to NULL, since the out_nocoalesce path safely
    ignores NULL entries in the new_nodes array.
    
    This regression was introduced in 2d7f9531.
    
    Change-Id: I76564d7257800583214376b4bacf236cda90c89c

commit 2bcf2e92c3918ce62ab4e934256e47e9a16d19c3
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jul 30 16:08:33 2014 -0700

    memcg: oom_notify use-after-free fix
    
    Paul Furtado has reported the following GPF:
    
      general protection fault: 0000 [#1] SMP
      Modules linked in: ipv6 dm_mod xen_netfront coretemp hwmon x86_pkg_temp_thermal crc32_pclmul crc32c_intel ghash_clmulni_intel aesni_intel ablk_helper cryptd lrw gf128mul glue_helper aes_x86_64 microcode pcspkr ext4 jbd2 mbcache raid0 xen_blkfront
      CPU: 3 PID: 3062 Comm: java Not tainted 3.16.0-rc5 #1
      task: ffff8801cfe8f170 ti: ffff8801d2ec4000 task.ti: ffff8801d2ec4000
      RIP: e030:mem_cgroup_oom_synchronize+0x140/0x240
      RSP: e02b:ffff8801d2ec7d48  EFLAGS: 00010283
      RAX: 0000000000000001 RBX: ffff88009d633800 RCX: 000000000000000e
      RDX: fffffffffffffffe RSI: ffff88009d630200 RDI: ffff88009d630200
      RBP: ffff8801d2ec7da8 R08: 0000000000000012 R09: 00000000fffffffe
      R10: 0000000000000000 R11: 0000000000000000 R12: ffff88009d633800
      R13: ffff8801d2ec7d48 R14: dead000000100100 R15: ffff88009d633a30
      FS:  00007f1748bb4700(0000) GS:ffff8801def80000(0000) knlGS:0000000000000000
      CS:  e033 DS: 0000 ES: 0000 CR0: 000000008005003b
      CR2: 00007f4110300308 CR3: 00000000c05f7000 CR4: 0000000000002660
      Call Trace:
        pagefault_out_of_memory+0x18/0x90
        mm_fault_error+0xa9/0x1a0
        __do_page_fault+0x478/0x4c0
        do_page_fault+0x2c/0x40
        page_fault+0x28/0x30
      Code: 44 00 00 48 89 df e8 40 ca ff ff 48 85 c0 49 89 c4 74 35 4c 8b b0 30 02 00 00 4c 8d b8 30 02 00 00 4d 39 fe 74 1b 0f 1f 44 00 00 <49> 8b 7e 10 be 01 00 00 00 e8 42 d2 04 00 4d 8b 36 4d 39 fe 75
      RIP  mem_cgroup_oom_synchronize+0x140/0x240
    
    Commit fb2a6fc56be6 ("mm: memcg: rework and document OOM waiting and
    wakeup") has moved mem_cgroup_oom_notify outside of memcg_oom_lock
    assuming it is protected by the hierarchical OOM-lock.
    
    Although this is true for the notification part the protection doesn't
    cover unregistration of event which can happen in parallel now so
    mem_cgroup_oom_notify can see already unlinked and/or freed
    mem_cgroup_eventfd_list.
    
    Fix this by using memcg_oom_lock also in mem_cgroup_oom_notify.
    
    Addresses https://bugzilla.kernel.org/show_bug.cgi?id=80881
    
    Fixes: fb2a6fc56be6 (mm: memcg: rework and document OOM waiting and wakeup)
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Reported-by: Paul Furtado <paulfurtado91@gmail.com>
    Tested-by: Paul Furtado <paulfurtado91@gmail.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>    [3.12+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit dbf20cb259e879e2d939fd3fd5c792732d845195
Author: Chao Yu <chao2.yu@samsung.com>
Date:   Fri Jul 25 12:00:57 2014 +0800

    f2fs: avoid use invalid mapping of node_inode when evict meta inode
    
    Andrey Tsyvarev reported:
    "Using memory error detector reveals the following use-after-free error
    in 3.15.0:
    
    AddressSanitizer: heap-use-after-free in f2fs_evict_inode
    Read of size 8 by thread T22279:
      [<ffffffffa02d8702>] f2fs_evict_inode+0x102/0x2e0 [f2fs]
      [<ffffffff812359af>] evict+0x15f/0x290
      [<     inlined    >] iput+0x196/0x280 iput_final
      [<ffffffff812369a6>] iput+0x196/0x280
      [<ffffffffa02dc416>] f2fs_put_super+0xd6/0x170 [f2fs]
      [<ffffffff81210095>] generic_shutdown_super+0xc5/0x1b0
      [<ffffffff812105fd>] kill_block_super+0x4d/0xb0
      [<ffffffff81210a86>] deactivate_locked_super+0x66/0x80
      [<ffffffff81211c98>] deactivate_super+0x68/0x80
      [<ffffffff8123cc88>] mntput_no_expire+0x198/0x250
      [<     inlined    >] SyS_umount+0xe9/0x1a0 SYSC_umount
      [<ffffffff8123f1c9>] SyS_umount+0xe9/0x1a0
      [<ffffffff81cc8df9>] system_call_fastpath+0x16/0x1b
    
    Freed by thread T3:
      [<ffffffffa02dc337>] f2fs_i_callback+0x27/0x30 [f2fs]
      [<     inlined    >] rcu_process_callbacks+0x2d6/0x930 __rcu_reclaim
      [<     inlined    >] rcu_process_callbacks+0x2d6/0x930 rcu_do_batch
      [<     inlined    >] rcu_process_callbacks+0x2d6/0x930 invoke_rcu_callbacks
      [<     inlined    >] rcu_process_callbacks+0x2d6/0x930 __rcu_process_callbacks
      [<ffffffff810fd266>] rcu_process_callbacks+0x2d6/0x930
      [<ffffffff8107cce2>] __do_softirq+0x142/0x380
      [<ffffffff8107cf50>] run_ksoftirqd+0x30/0x50
      [<ffffffff810b2a87>] smpboot_thread_fn+0x197/0x280
      [<ffffffff810a8238>] kthread+0x148/0x160
      [<ffffffff81cc8d4c>] ret_from_fork+0x7c/0xb0
    
    Allocated by thread T22276:
      [<ffffffffa02dc7dd>] f2fs_alloc_inode+0x2d/0x170 [f2fs]
      [<ffffffff81235e2a>] iget_locked+0x10a/0x230
      [<ffffffffa02d7495>] f2fs_iget+0x35/0xa80 [f2fs]
      [<ffffffffa02e2393>] f2fs_fill_super+0xb53/0xff0 [f2fs]
      [<ffffffff81211bce>] mount_bdev+0x1de/0x240
      [<ffffffffa02dbce0>] f2fs_mount+0x10/0x20 [f2fs]
      [<ffffffff81212a85>] mount_fs+0x55/0x220
      [<ffffffff8123c026>] vfs_kern_mount+0x66/0x200
      [<     inlined    >] do_mount+0x2b4/0x1120 do_new_mount
      [<ffffffff812400d4>] do_mount+0x2b4/0x1120
      [<     inlined    >] SyS_mount+0xb2/0x110 SYSC_mount
      [<ffffffff812414a2>] SyS_mount+0xb2/0x110
      [<ffffffff81cc8df9>] system_call_fastpath+0x16/0x1b
    
    The buggy address ffff8800587866c8 is located 48 bytes inside
      of 680-byte region [ffff880058786698, ffff880058786940)
    
    Memory state around the buggy address:
      ffff880058786100: ffffffff ffffffff ffffffff ffffffff
      ffff880058786200: ffffffff ffffffff ffffffrr rrrrrrrr
      ffff880058786300: rrrrrrrr rrffffff ffffffff ffffffff
      ffff880058786400: ffffffff ffffffff ffffffff ffffffff
      ffff880058786500: ffffffff ffffffff ffffffff fffffffr
     >ffff880058786600: rrrrrrrr rrrrrrrr rrrfffff ffffffff
                                                    ^
      ffff880058786700: ffffffff ffffffff ffffffff ffffffff
      ffff880058786800: ffffffff ffffffff ffffffff ffffffff
      ffff880058786900: ffffffff rrrrrrrr rrrrrrrr rrrr....
      ffff880058786a00: ........ ........ ........ ........
      ffff880058786b00: ........ ........ ........ ........
    Legend:
      f - 8 freed bytes
      r - 8 redzone bytes
      . - 8 allocated bytes
      x=1..7 - x allocated bytes + (8-x) redzone bytes
    
    Investigation shows, that f2fs_evict_inode, when called for
    'meta_inode', uses invalidate_mapping_pages() for 'node_inode'.
    But 'node_inode' is deleted before 'meta_inode' in f2fs_put_super via
    iput().
    
    It seems that in common usage scenario this use-after-free is benign,
    because 'node_inode' remains partially valid data even after
    kmem_cache_free().
    But things may change if, while 'meta_inode' is evicted in one f2fs
    filesystem, another (mounted) f2fs filesystem requests inode from cache,
    and formely
    'node_inode' of the first filesystem is returned."
    
    Nids for both meta_inode and node_inode are reservation, so it's not necessary
    for us to invalidate pages which will never be allocated.
    To fix this issue, let's skipping needlessly invalidating pages for
    {meta,node}_inode in f2fs_evict_inode.
    
    Reported-by: Andrey Tsyvarev <tsyvarev@ispras.ru>
    Tested-by: Andrey Tsyvarev <tsyvarev@ispras.ru>
    Signed-off-by: Gu Zheng <guz.fnst@cn.fujitsu.com>
    Signed-off-by: Chao Yu <chao2.yu@samsung.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

commit 32333edb82fb2009980eefc5518100068147ab82
Author: Vignesh Raman <Vignesh_Raman@mentor.com>
Date:   Tue Jul 22 19:24:25 2014 +0530

    Bluetooth: Avoid use of session socket after the session gets freed
    
    The commits 08c30aca9e698faddebd34f81e1196295f9dc063 "Bluetooth: Remove
    RFCOMM session refcnt" and 8ff52f7d04d9cc31f1e81dcf9a2ba6335ed34905
    "Bluetooth: Return RFCOMM session ptrs to avoid freed session"
    allow rfcomm_recv_ua and rfcomm_session_close to delete the session
    (and free the corresponding socket) and propagate NULL session pointer
    to the upper callers.
    
    Additional fix is required to terminate the loop in rfcomm_process_rx
    function to avoid use of freed 'sk' memory.
    
    The issue is only reproducible with kernel option CONFIG_PAGE_POISONING
    enabled making freed memory being changed and filled up with fixed char
    value used to unmask use-after-free issues.
    
    Signed-off-by: Vignesh Raman <Vignesh_Raman@mentor.com>
    Signed-off-by: Vitaly Kuzmichev <Vitaly_Kuzmichev@mentor.com>
    Acked-by: Dean Jenkins <Dean_Jenkins@mentor.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: stable@vger.kernel.org

commit 19eeb2f9e750f47c805f66e3b0e889b12557d80f
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Thu Jul 10 18:43:01 2014 -0400

    farsync: fix invalid memory accesses in fst_add_one() and fst_init_card()
    
    There are several issues in fst_add_one() and fst_init_card():
    - invalid pointer dereference at card->ports[card->nports - 1] if
      register_hdlc_device() fails for the first port in fst_init_card();
    - fst_card_array overflow at fst_card_array[no_of_cards_added]
      because there is no checks for array overflow;
    - use after free because pointer to deallocated card is left in fst_card_array
      if something fails after fst_card_array[no_of_cards_added] = card;
    - several leaks on failure paths in fst_add_one().
    
    The patch fixes all the issues and makes code more readable.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7214e8600eee146b6ea79eb6b7b01b343856a7c6
Author: Jeff Layton <jlayton@primarydata.com>
Date:   Thu Jul 10 14:07:33 2014 -0400

    nfsd: always hold the fi_lock when bumping fi_access refcounts
    
    Once we remove the client_mutex, there's an unlikely but possible race
    that could occur. It will be possible for nfs4_file_put_access to race
    with nfs4_file_get_access. The refcount will go to zero (briefly) and
    then bumped back to one. If that happens we set ourselves up for a
    use-after-free and the potential for a lock to race onto the i_flock
    list as a filp is being torn down.
    
    Ensure that we can safely bump the refcount on the file by holding the
    fi_lock whenever that's done. The only place it currently isn't is in
    get_lock_access.
    
    In order to ensure atomicity with finding the file, use the
    find_*_file_locked variants and then call get_lock_access to get new
    access references on the nfs4_file under the same lock.
    
    Signed-off-by: Jeff Layton <jlayton@primarydata.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit b86e1926be37c77deeb176466d98678feab04066
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 11 13:17:41 2014 +0300

    mfd: vexpress: fix error handling vexpress_syscfg_regmap_init()
    
    This function should be returning an ERR_PTR() on failure instead of
    NULL.  Also there is a use after free bug if regmap_init() fails because
    we free "func" and then dereference doing the return.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Pawel Moll <pawel.moll@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a70b621227d1fd3efd150fce63ea4d51d4acaa9
Author: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
Date:   Tue Jun 17 17:17:40 2014 +0300

    USB: EHCI: tegra: Fix use-after-free in .remove()
    
    The tegra_ehci_hcd structure is located in the private space allocated
    by the core USB code so it must not be accessed after the HCD is
    freed.
    
    Signed-off-by: Tuomas Tynkkynen <ttynkkynen@nvidia.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efa95b01da18ad22af62f6d99a3243f3be8fd264
Author: david decotigny <decot@googlers.com>
Date:   Tue Jul 8 15:14:41 2014 -0700

    netpoll: fix use after free
    
    After a bonding master reclaims the netpoll info struct, slaves could
    still hold a pointer to the reclaimed data. This patch fixes it: as
    soon as netpoll_async_cleanup is called for a slave (eg. when
    un-enslaved), we make sure that this slave doesn't point to the data.
    
    Signed-off-by: David Decotigny <decot@googlers.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit af59306455587143615517ade1ffce2e8f4fda48
Author: Ilya Dryomov <ilya.dryomov@inktank.com>
Date:   Fri Jun 20 18:29:20 2014 +0400

    libceph: unregister only registered linger requests
    
    Linger requests that have not yet been registered should not be
    unregistered by __unregister_linger_request().  This messes up ref
    count and leads to use-after-free.
    
    Signed-off-by: Ilya Dryomov <ilya.dryomov@inktank.com>
    Reviewed-by: Alex Elder <elder@linaro.org>

commit 14f5979633a67de81b9bd4a36a0eb99125728f9b
Author: Filipe Manana <fdmanana@gmail.com>
Date:   Sun Jun 29 21:45:40 2014 +0100

    Btrfs: fix use-after-free when cloning a trailing file hole
    
    The transaction handle was being used after being freed.
    
    Cc: Chris Mason <clm@fb.com>
    Signed-off-by: Filipe David Borba Manana <fdmanana@gmail.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commit a5049a8ae34950249a7ae94c385d7c5c98914412
Author: Tejun Heo <tj@kernel.org>
Date:   Thu Jun 19 17:42:57 2014 -0400

    blkcg: fix use-after-free in __blkg_release_rcu() by making blkcg_gq refcnt an atomic_t
    
    Hello,
    
    So, this patch should do.  Joe, Vivek, can one of you guys please
    verify that the oops goes away with this patch?
    
    Jens, the original thread can be read at
    
      http://thread.gmane.org/gmane.linux.kernel/1720729
    
    The fix converts blkg->refcnt from int to atomic_t.  It does some
    overhead but it should be minute compared to everything else which is
    going on and the involved cacheline bouncing, so I think it's highly
    unlikely to cause any noticeable difference.  Also, the refcnt in
    question should be converted to a perpcu_ref for blk-mq anyway, so the
    atomic_t is likely to go away pretty soon anyway.
    
    Thanks.
    
    ------- 8< -------
    __blkg_release_rcu() may be invoked after the associated request_queue
    is released with a RCU grace period inbetween.  As such, the function
    and callbacks invoked from it must not dereference the associated
    request_queue.  This is clearly indicated in the comment above the
    function.
    
    Unfortunately, while trying to fix a different issue, 2a4fd070ee85
    ("blkcg: move bulk of blkcg_gq release operations to the RCU
    callback") ignored this and added [un]locking of @blkg->q->queue_lock
    to __blkg_release_rcu().  This of course can cause oops as the
    request_queue may be long gone by the time this code gets executed.
    
      general protection fault: 0000 [#1] SMP
      CPU: 21 PID: 30 Comm: rcuos/21 Not tainted 3.15.0 #1
      Hardware name: Stratus ftServer 6400/G7LAZ, BIOS BIOS Version 6.3:57 12/25/2013
      task: ffff880854021de0 ti: ffff88085403c000 task.ti: ffff88085403c000
      RIP: 0010:[<ffffffff8162e9e5>]  [<ffffffff8162e9e5>] _raw_spin_lock_irq+0x15/0x60
      RSP: 0018:ffff88085403fdf0  EFLAGS: 00010086
      RAX: 0000000000020000 RBX: 0000000000000010 RCX: 0000000000000000
      RDX: 000060ef80008248 RSI: 0000000000000286 RDI: 6b6b6b6b6b6b6b6b
      RBP: ffff88085403fdf0 R08: 0000000000000286 R09: 0000000000009f39
      R10: 0000000000020001 R11: 0000000000020001 R12: ffff88103c17a130
      R13: ffff88103c17a080 R14: 0000000000000000 R15: 0000000000000000
      FS:  0000000000000000(0000) GS:ffff88107fca0000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00000000006e5ab8 CR3: 000000000193d000 CR4: 00000000000407e0
      Stack:
       ffff88085403fe18 ffffffff812cbfc2 ffff88103c17a130 0000000000000000
       ffff88103c17a130 ffff88085403fec0 ffffffff810d1d28 ffff880854021de0
       ffff880854021de0 ffff88107fcaec58 ffff88085403fe80 ffff88107fcaec30
      Call Trace:
       [<ffffffff812cbfc2>] __blkg_release_rcu+0x72/0x150
       [<ffffffff810d1d28>] rcu_nocb_kthread+0x1e8/0x300
       [<ffffffff81091d81>] kthread+0xe1/0x100
       [<ffffffff8163813c>] ret_from_fork+0x7c/0xb0
      Code: ff 47 04 48 8b 7d 08 be 00 02 00 00 e8 55 48 a4 ff 5d c3 0f 1f 00 66 66 66 66 90 55 48 89 e5
      +fa 66 66 90 66 66 90 b8 00 00 02 00 <f0> 0f c1 07 89 c2 c1 ea 10 66 39 c2 75 02 5d c3 83 e2 fe 0f
      +b7
      RIP  [<ffffffff8162e9e5>] _raw_spin_lock_irq+0x15/0x60
       RSP <ffff88085403fdf0>
    
    The request_queue locking was added because blkcg_gq->refcnt is an int
    protected with the queue lock and __blkg_release_rcu() needs to put
    the parent.  Let's fix it by making blkcg_gq->refcnt an atomic_t and
    dropping queue locking in the function.
    
    Given the general heavy weight of the current request_queue and blkcg
    operations, this is unlikely to cause any noticeable overhead.
    Moreover, blkcg_gq->refcnt is likely to be converted to percpu_ref in
    the near future, so whatever (most likely negligible) overhead it may
    add is temporary.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Joe Lawrence <joe.lawrence@stratus.com>
    Acked-by: Vivek Goyal <vgoyal@redhat.com>
    Link: http://lkml.kernel.org/g/alpine.DEB.2.02.1406081816540.17948@jlaw-desktop.mno.stratus.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit b28e7d5807051184270c40d4bc48db947189f107
Author: Yi Zhang <yizhang@marvell.com>
Date:   Tue Jun 3 21:03:08 2014 +0800

    staging: android: timed_output: fix use after free of dev
    
    tdev->dev has been freed in device_destroy(), it's not right to
    use dev_set_drvdata() after that;
    
    Signed-off-by: Yi Zhang <yizhang@marvell.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd9f26e4eca5d08a27d12c0933fceef76ed9663d
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Jun 18 13:32:33 2014 +0200

    ALSA: control: Don't access controls outside of protected regions
    
    A control that is visible on the card->controls list can be freed at any time.
    This means we must not access any of its memory while not holding the
    controls_rw_lock. Otherwise we risk a use after free access.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Jaroslav Kysela <perex@perex.cz>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit fc96e661a57d5e4de01503d460116cce7ced7e70
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 11 13:17:41 2014 +0300

    misc: vexpress: fix error handling vexpress_syscfg_regmap_init()
    
    This function should be returning an ERR_PTR() on failure instead of
    NULL.  Also there is a use after free bug if regmap_init() fails because
    we free "func" and then dereference doing the return.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Pawel Moll <pawel.moll@arm.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 25f8a7cc5856f1c697c9aee88b0a898fcb6d788c
Author: Jürg Billeter <j@bitron.ch>
Date:   Mon Jun 16 16:39:29 2014 +0200

    spi: sh-sci: fix use-after-free in sh_sci_spi_remove()
    
    setbits() uses sp->membase.
    
    Signed-off-by: Jürg Billeter <j@bitron.ch>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit ebe06187bf2aec10d537ce4595e416035367d703
Author: Konstantin Khlebnikov <koct9i@gmail.com>
Date:   Tue Jun 17 06:58:05 2014 +0400

    epoll: fix use-after-free in eventpoll_release_file
    
    This fixes use-after-free of epi->fllink.next inside list loop macro.
    This loop actually releases elements in the body.  The list is
    rcu-protected but here we cannot hold rcu_read_lock because we need to
    lock mutex inside.
    
    The obvious solution is to use list_for_each_entry_safe().  RCU-ness
    isn't essential because nobody can change this list under us, it's final
    fput for this file.
    
    The bug was introduced by ae10b2b4eb01 ("epoll: optimize EPOLL_CTL_DEL
    using rcu")
    
    Signed-off-by: Konstantin Khlebnikov <koct9i@gmail.com>
    Reported-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Cc: Stable <stable@vger.kernel.org> # 3.13+
    Cc: Sasha Levin <sasha.levin@oracle.com>
    Cc: Jason Baron <jbaron@akamai.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      perf: Differentiate exec() and non-exec() comm events
      perf: Fix perf_event_comm() vs. exec() assumption
      uprobes/x86: Rename arch_uprobe->def to ->defparam, minor comment updates
      perf/documentation: Add description for conditional branch filter
      perf/x86: Add conditional branch filtering support
      perf/tool: Add conditional branch filter 'cond' to perf record
      perf: Add new conditional branch filter 'PERF_SAMPLE_BRANCH_COND'
      uprobes: Teach copy_insn() to support tmpfs
      uprobes: Shift ->readpage check from __copy_insn() to uprobe_register()
      perf/x86: Use common PMU interrupt disabled code
      perf/ARM: Use common PMU interrupt disabled code
      perf: Disable sampled events if no PMU interrupt
      perf: Fix use after free in perf_remove_from_context()
      perf tools: Fix 'make help' message error
      perf record: Fix poll return value propagation
      perf tools: Move elide bool into perf_hpp_fmt struct
      perf tools: Remove elide setup for SORT_MODE__MEMORY mode
      perf tools: Fix "==" into "=" in ui_browser__warning assignment
      perf tools: Allow overriding sysfs and proc finding with env var
      perf tools: Consider header files outside perf directory in tags target
      ...

commit 9709674e68646cee5a24e3000b3558d25412203a
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 10 06:43:01 2014 -0700

    ipv4: fix a race in ip4_datagram_release_cb()
    
    Alexey gave a AddressSanitizer[1] report that finally gave a good hint
    at where was the origin of various problems already reported by Dormando
    in the past [2]
    
    Problem comes from the fact that UDP can have a lockless TX path, and
    concurrent threads can manipulate sk_dst_cache, while another thread,
    is holding socket lock and calls __sk_dst_set() in
    ip4_datagram_release_cb() (this was added in linux-3.8)
    
    It seems that all we need to do is to use sk_dst_check() and
    sk_dst_set() so that all the writers hold same spinlock
    (sk->sk_dst_lock) to prevent corruptions.
    
    TCP stack do not need this protection, as all sk_dst_cache writers hold
    the socket lock.
    
    [1]
    https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel
    
    AddressSanitizer: heap-use-after-free in ipv4_dst_check
    Read of size 2 by thread T15453:
     [<ffffffff817daa3a>] ipv4_dst_check+0x1a/0x90 ./net/ipv4/route.c:1116
     [<ffffffff8175b789>] __sk_dst_check+0x89/0xe0 ./net/core/sock.c:531
     [<ffffffff81830a36>] ip4_datagram_release_cb+0x46/0x390 ??:0
     [<ffffffff8175eaea>] release_sock+0x17a/0x230 ./net/core/sock.c:2413
     [<ffffffff81830882>] ip4_datagram_connect+0x462/0x5d0 ??:0
     [<ffffffff81846d06>] inet_dgram_connect+0x76/0xd0 ./net/ipv4/af_inet.c:534
     [<ffffffff817580ac>] SYSC_connect+0x15c/0x1c0 ./net/socket.c:1701
     [<ffffffff817596ce>] SyS_connect+0xe/0x10 ./net/socket.c:1682
     [<ffffffff818b0a29>] system_call_fastpath+0x16/0x1b
    ./arch/x86/kernel/entry_64.S:629
    
    Freed by thread T15455:
     [<ffffffff8178d9b8>] dst_destroy+0xa8/0x160 ./net/core/dst.c:251
     [<ffffffff8178de25>] dst_release+0x45/0x80 ./net/core/dst.c:280
     [<ffffffff818304c1>] ip4_datagram_connect+0xa1/0x5d0 ??:0
     [<ffffffff81846d06>] inet_dgram_connect+0x76/0xd0 ./net/ipv4/af_inet.c:534
     [<ffffffff817580ac>] SYSC_connect+0x15c/0x1c0 ./net/socket.c:1701
     [<ffffffff817596ce>] SyS_connect+0xe/0x10 ./net/socket.c:1682
     [<ffffffff818b0a29>] system_call_fastpath+0x16/0x1b
    ./arch/x86/kernel/entry_64.S:629
    
    Allocated by thread T15453:
     [<ffffffff8178d291>] dst_alloc+0x81/0x2b0 ./net/core/dst.c:171
     [<ffffffff817db3b7>] rt_dst_alloc+0x47/0x50 ./net/ipv4/route.c:1406
     [<     inlined    >] __ip_route_output_key+0x3e8/0xf70
    __mkroute_output ./net/ipv4/route.c:1939
     [<ffffffff817dde08>] __ip_route_output_key+0x3e8/0xf70 ./net/ipv4/route.c:2161
     [<ffffffff817deb34>] ip_route_output_flow+0x14/0x30 ./net/ipv4/route.c:2249
     [<ffffffff81830737>] ip4_datagram_connect+0x317/0x5d0 ??:0
     [<ffffffff81846d06>] inet_dgram_connect+0x76/0xd0 ./net/ipv4/af_inet.c:534
     [<ffffffff817580ac>] SYSC_connect+0x15c/0x1c0 ./net/socket.c:1701
     [<ffffffff817596ce>] SyS_connect+0xe/0x10 ./net/socket.c:1682
     [<ffffffff818b0a29>] system_call_fastpath+0x16/0x1b
    ./arch/x86/kernel/entry_64.S:629
    
    [2]
    <4>[196727.311203] general protection fault: 0000 [#1] SMP
    <4>[196727.311224] Modules linked in: xt_TEE xt_dscp xt_DSCP macvlan bridge coretemp crc32_pclmul ghash_clmulni_intel gpio_ich microcode ipmi_watchdog ipmi_devintf sb_edac edac_core lpc_ich mfd_core tpm_tis tpm tpm_bios ipmi_si ipmi_msghandler isci igb libsas i2c_algo_bit ixgbe ptp pps_core mdio
    <4>[196727.311333] CPU: 17 PID: 0 Comm: swapper/17 Not tainted 3.10.26 #1
    <4>[196727.311344] Hardware name: Supermicro X9DRi-LN4+/X9DR3-LN4+/X9DRi-LN4+/X9DR3-LN4+, BIOS 3.0 07/05/2013
    <4>[196727.311364] task: ffff885e6f069700 ti: ffff885e6f072000 task.ti: ffff885e6f072000
    <4>[196727.311377] RIP: 0010:[<ffffffff815f8c7f>]  [<ffffffff815f8c7f>] ipv4_dst_destroy+0x4f/0x80
    <4>[196727.311399] RSP: 0018:ffff885effd23a70  EFLAGS: 00010282
    <4>[196727.311409] RAX: dead000000200200 RBX: ffff8854c398ecc0 RCX: 0000000000000040
    <4>[196727.311423] RDX: dead000000100100 RSI: dead000000100100 RDI: dead000000200200
    <4>[196727.311437] RBP: ffff885effd23a80 R08: ffffffff815fd9e0 R09: ffff885d5a590800
    <4>[196727.311451] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    <4>[196727.311464] R13: ffffffff81c8c280 R14: 0000000000000000 R15: ffff880e85ee16ce
    <4>[196727.311510] FS:  0000000000000000(0000) GS:ffff885effd20000(0000) knlGS:0000000000000000
    <4>[196727.311554] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    <4>[196727.311581] CR2: 00007a46751eb000 CR3: 0000005e65688000 CR4: 00000000000407e0
    <4>[196727.311625] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    <4>[196727.311669] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    <4>[196727.311713] Stack:
    <4>[196727.311733]  ffff8854c398ecc0 ffff8854c398ecc0 ffff885effd23ab0 ffffffff815b7f42
    <4>[196727.311784]  ffff88be6595bc00 ffff8854c398ecc0 0000000000000000 ffff8854c398ecc0
    <4>[196727.311834]  ffff885effd23ad0 ffffffff815b86c6 ffff885d5a590800 ffff8816827821c0
    <4>[196727.311885] Call Trace:
    <4>[196727.311907]  <IRQ>
    <4>[196727.311912]  [<ffffffff815b7f42>] dst_destroy+0x32/0xe0
    <4>[196727.311959]  [<ffffffff815b86c6>] dst_release+0x56/0x80
    <4>[196727.311986]  [<ffffffff81620bd5>] tcp_v4_do_rcv+0x2a5/0x4a0
    <4>[196727.312013]  [<ffffffff81622b5a>] tcp_v4_rcv+0x7da/0x820
    <4>[196727.312041]  [<ffffffff815fd9e0>] ? ip_rcv_finish+0x360/0x360
    <4>[196727.312070]  [<ffffffff815de02d>] ? nf_hook_slow+0x7d/0x150
    <4>[196727.312097]  [<ffffffff815fd9e0>] ? ip_rcv_finish+0x360/0x360
    <4>[196727.312125]  [<ffffffff815fda92>] ip_local_deliver_finish+0xb2/0x230
    <4>[196727.312154]  [<ffffffff815fdd9a>] ip_local_deliver+0x4a/0x90
    <4>[196727.312183]  [<ffffffff815fd799>] ip_rcv_finish+0x119/0x360
    <4>[196727.312212]  [<ffffffff815fe00b>] ip_rcv+0x22b/0x340
    <4>[196727.312242]  [<ffffffffa0339680>] ? macvlan_broadcast+0x160/0x160 [macvlan]
    <4>[196727.312275]  [<ffffffff815b0c62>] __netif_receive_skb_core+0x512/0x640
    <4>[196727.312308]  [<ffffffff811427fb>] ? kmem_cache_alloc+0x13b/0x150
    <4>[196727.312338]  [<ffffffff815b0db1>] __netif_receive_skb+0x21/0x70
    <4>[196727.312368]  [<ffffffff815b0fa1>] netif_receive_skb+0x31/0xa0
    <4>[196727.312397]  [<ffffffff815b1ae8>] napi_gro_receive+0xe8/0x140
    <4>[196727.312433]  [<ffffffffa00274f1>] ixgbe_poll+0x551/0x11f0 [ixgbe]
    <4>[196727.312463]  [<ffffffff815fe00b>] ? ip_rcv+0x22b/0x340
    <4>[196727.312491]  [<ffffffff815b1691>] net_rx_action+0x111/0x210
    <4>[196727.312521]  [<ffffffff815b0db1>] ? __netif_receive_skb+0x21/0x70
    <4>[196727.312552]  [<ffffffff810519d0>] __do_softirq+0xd0/0x270
    <4>[196727.312583]  [<ffffffff816cef3c>] call_softirq+0x1c/0x30
    <4>[196727.312613]  [<ffffffff81004205>] do_softirq+0x55/0x90
    <4>[196727.312640]  [<ffffffff81051c85>] irq_exit+0x55/0x60
    <4>[196727.312668]  [<ffffffff816cf5c3>] do_IRQ+0x63/0xe0
    <4>[196727.312696]  [<ffffffff816c5aaa>] common_interrupt+0x6a/0x6a
    <4>[196727.312722]  <EOI>
    <1>[196727.313071] RIP  [<ffffffff815f8c7f>] ipv4_dst_destroy+0x4f/0x80
    <4>[196727.313100]  RSP <ffff885effd23a70>
    <4>[196727.313377] ---[ end trace 64b3f14fae0f2e29 ]---
    <0>[196727.380908] Kernel panic - not syncing: Fatal exception in interrupt
    
    Reported-by: Alexey Preobrazhensky <preobr@google.com>
    Reported-by: dormando <dormando@rydia.ne>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Fixes: 8141ed9fcedb2 ("ipv4: Add a socket release callback for datagram sockets")
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Btrfs: convert smp_mb__{before,after}_clear_bit
      Btrfs: fix scrub_print_warning to handle skinny metadata extents
      Btrfs: make fsync work after cloning into a file
      Btrfs: use right type to get real comparison
      Btrfs: don't check nodes for extent items
      Btrfs: don't release invalid page in btrfs_page_exists_in_range()
      Btrfs: make sure we retry if page is a retriable exception
      Btrfs: make sure we retry if we couldn't get the page
      btrfs: replace EINVAL with EOPNOTSUPP for dev_replace raid56
      trivial: fs/btrfs/ioctl.c: fix typo s/substract/subtract/
      Btrfs: fix leaf corruption after __btrfs_drop_extents
      Btrfs: ensure btrfs_prev_leaf doesn't miss 1 item
      Btrfs: fix clone to deal with holes when NO_HOLES feature is enabled
      btrfs: free delayed node outside of root->inode_lock
      btrfs: replace EINVAL with ERANGE for resize when ULLONG_MAX
      Btrfs: fix transaction leak during fsync call
      btrfs: Avoid trucating page or punching hole in a already existed hole.
      Btrfs: update commit root on snapshot creation after orphan cleanup
      Btrfs: ioctl, don't re-lock extent range when not necessary
      Btrfs: avoid visiting all extent items when cloning a range
      ...

commit da1de8dfff09d33d4a5345762c21b487028e25f5
Author: Wei Yang <weiyang@linux.vnet.ibm.com>
Date:   Sun Jun 8 13:49:46 2014 +0300

    net/mlx4_core: Keep only one driver entry release mlx4_priv
    
    Following commit befdf89 "net/mlx4_core: Preserve pci_dev_data after
    __mlx4_remove_one()", there are two mlx4 pci callbacks which will
    attempt to release the mlx4_priv object -- .shutdown and .remove.
    
    This leads to a use-after-free access to the already freed mlx4_priv
    instance and trigger a "Kernel access of bad area" crash when both
    .shutdown and .remove are called.
    
    During reboot or kexec, .shutdown is called, with the VFs probed to
    the host going through shutdown first and then the PF. Later, the PF
    will trigger VFs' .remove since VFs still have driver attached.
    
    Fix that by keeping only one driver entry which releases mlx4_priv.
    
    Fixes: befdf89 ('net/mlx4_core: Preserve pci_dev_data after __mlx4_remove_one()')
    CC: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
    Signed-off-by: Wei Yang <weiyang@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      RDMA/cxgb4: Add support for iWARP Port Mapper user space service
      RDMA/nes: Add support for iWARP Port Mapper user space service
      RDMA/core: Add support for iWARP Port Mapper user space service
      IB/mlx4: Fix gfp passing in create_qp_common()
      IB/umad: Fix use-after-free on close
      IB/core: Fix kobject leak on device register error flow
      RDMA/cxgb4: add missing padding at end of struct c4iw_alloc_ucontext_resp
      mlx4_core: Fix GFP flags parameters to be gfp_t
      IB/core: Fix port kobject deletion during error flow
      IB/core: Remove unneeded kobject_get/put calls
      IB/core: Fix sparse warnings about redeclared functions
      IB/mad: Fix sparse warning about gfp_t use
      IB/mlx4: Implement IB_QP_CREATE_USE_GFP_NOIO
      IB: Add a QP creation flag to use GFP_NOIO allocations
      IB: Return error for unsupported QP creation flags
      IB: Allow build of hw/ and ulp/ subdirectories independently
      mlx4_core: Move handling of MLX4_QP_ST_MLX to proper switch statement
      RDMA/cxgb4: Add missing padding at end of struct c4iw_create_cq_resp
      IB/srp: Avoid problems if a header uses pr_fmt
      IB/umad: Fix error handling
      ...

commit 60e1751cb52cc6d1ae04b6bd3c2b96e770b5823f
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Jun 6 18:25:04 2014 +0200

    IB/umad: Fix use-after-free on close
    
    Avoid that closing /dev/infiniband/umad<n> or /dev/infiniband/issm<n>
    triggers a use-after-free.  __fput() invokes f_op->release() before it
    invokes cdev_put().  Make sure that the ib_umad_device structure is
    freed by the cdev_put() call instead of f_op->release().  This avoids
    that changing the port mode from IB into Ethernet and back to IB
    followed by restarting opensmd triggers the following kernel oops:
    
        general protection fault: 0000 [#1] PREEMPT SMP
        RIP: 0010:[<ffffffff810cc65c>]  [<ffffffff810cc65c>] module_put+0x2c/0x170
        Call Trace:
         [<ffffffff81190f20>] cdev_put+0x20/0x30
         [<ffffffff8118e2ce>] __fput+0x1ae/0x1f0
         [<ffffffff8118e35e>] ____fput+0xe/0x10
         [<ffffffff810723bc>] task_work_run+0xac/0xe0
         [<ffffffff81002a9f>] do_notify_resume+0x9f/0xc0
         [<ffffffff814b8398>] int_signal+0x12/0x17
    
    Reference: https://bugzilla.kernel.org/show_bug.cgi?id=75051
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Yann Droneaud <ydroneaud@opteya.com>
    Cc: <stable@vger.kernel.org> # 3.x: 8ec0a0e6b58: IB/umad: Fix error handling
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commit 624483f3ea82598ab0f62f1bdb9177f531ab1892
Author: Andrey Ryabinin <a.ryabinin@samsung.com>
Date:   Fri Jun 6 19:09:30 2014 +0400

    mm: rmap: fix use-after-free in __put_anon_vma
    
    While working address sanitizer for kernel I've discovered
    use-after-free bug in __put_anon_vma.
    
    For the last anon_vma, anon_vma->root freed before child anon_vma.
    Later in anon_vma_free(anon_vma) we are referencing to already freed
    anon_vma->root to check rwsem.
    
    This fixes it by freeing the child anon_vma before freeing
    anon_vma->root.
    
    Signed-off-by: Andrey Ryabinin <a.ryabinin@samsung.com>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Cc: <stable@vger.kernel.org> # v3.0+
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ebf905fc7a6e7c99c53b5afc888d8f950da90aff
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu May 29 19:00:24 2014 +0200

    perf: Fix use after free in perf_remove_from_context()
    
    While that mutex should guard the elements, it doesn't guard against the
    use-after-free that's from list_for_each_entry_rcu().
    __perf_event_exit_task() can actually free the event.
    
    And because list addition/deletion is guarded by both ctx->mutex and
    ctx->lock, holding ctx->mutex is sufficient for reading the list, so we
    don't actually need the rcu list iteration.
    
    Fixes: 3a497f48637e ("perf: Simplify perf_event_exit_task_context()")
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    Tested-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Dave Jones <davej@redhat.com>
    Cc: acme@ghostprotocols.net
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20140529170024.GA2315@laptop.programming.kicks-ass.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 1e32e77f95d60b121b6072e3e3a650a7f93068f9
Author: Vladimir Davydov <vdavydov@parallels.com>
Date:   Wed Jun 4 16:07:37 2014 -0700

    memcg, slab: do not schedule cache destruction when last page goes away
    
    This patchset is a part of preparations for kmemcg re-parenting.  It
    targets at simplifying kmemcg work-flows and synchronization.
    
    First, it removes async per memcg cache destruction (see patches 1, 2).
    Now caches are only destroyed on memcg offline.  That means the caches
    that are not empty on memcg offline will be leaked.  However, they are
    already leaked, because memcg_cache_params::nr_pages normally never drops
    to 0 so the destruction work is never scheduled except kmem_cache_shrink
    is called explicitly.  In the future I'm planning reaping such dead caches
    on vmpressure or periodically.
    
    Second, it substitutes per memcg slab_caches_mutex's with the global
    memcg_slab_mutex, which should be taken during the whole per memcg cache
    creation/destruction path before the slab_mutex (see patch 3).  This
    greatly simplifies synchronization among various per memcg cache
    creation/destruction paths.
    
    I'm still not quite sure about the end picture, in particular I don't know
    whether we should reap dead memcgs' kmem caches periodically or try to
    merge them with their parents (see https://lkml.org/lkml/2014/4/20/38 for
    more details), but whichever way we choose, this set looks like a
    reasonable change to me, because it greatly simplifies kmemcg work-flows
    and eases further development.
    
    This patch (of 3):
    
    After a memcg is offlined, we mark its kmem caches that cannot be deleted
    right now due to pending objects as dead by setting the
    memcg_cache_params::dead flag, so that memcg_release_pages will schedule
    cache destruction (memcg_cache_params::destroy) as soon as the last slab
    of the cache is freed (memcg_cache_params::nr_pages drops to zero).
    
    I guess the idea was to destroy the caches as soon as possible, i.e.
    immediately after freeing the last object.  However, it just doesn't work
    that way, because kmem caches always preserve some pages for the sake of
    performance, so that nr_pages never gets to zero unless the cache is
    shrunk explicitly using kmem_cache_shrink.  Of course, we could account
    the total number of objects on the cache or check if all the slabs
    allocated for the cache are empty on kmem_cache_free and schedule
    destruction if so, but that would be too costly.
    
    Thus we have a piece of code that works only when we explicitly call
    kmem_cache_shrink, but complicates the whole picture a lot.  Moreover,
    it's racy in fact.  For instance, kmem_cache_shrink may free the last slab
    and thus schedule cache destruction before it finishes checking that the
    cache is empty, which can lead to use-after-free.
    
    So I propose to remove this async cache destruction from
    memcg_release_pages, and check if the cache is empty explicitly after
    calling kmem_cache_shrink instead.  This will simplify things a lot w/o
    introducing any functional changes.
    
    And regarding dead memcg caches (i.e.  those that are left hanging around
    after memcg offline for they have objects), I suppose we should reap them
    either periodically or on vmpressure as Glauber suggested initially.  I'm
    going to implement this later.
    
    Signed-off-by: Vladimir Davydov <vdavydov@parallels.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@suse.cz>
    Cc: Glauber Costa <glommer@gmail.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      block: virtio_blk: don't hold spin lock during world switch
      xen-blkback: defer freeing blkif to avoid blocking xenwatch
      xen blkif.h: fix comment typo in discard-alignment
      xen/blkback: disable discard feature if requested by toolstack
      xen-blkfront: remove type check from blkfront_setup_discard
      floppy: do not corrupt bio.bi_flags when reading block 0
      mtip32xx: move error handling to service thread
      virtio_blk: fix race between start and stop queue
      mtip32xx: stop block hardware queues before quiescing IO
      mtip32xx: blk_mq_init_queue() returns an ERR_PTR
      mtip32xx: convert to use blk-mq
      cdrom: Remove unnecessary prototype for cdrom_get_disc_info
      cdrom: Remove unnecessary prototype for cdrom_mrw_exit
      cdrom: Remove cdrom_count_tracks prototype
      cdrom: Remove cdrom_get_next_writeable prototype
      cdrom: Remove cdrom_get_last_written prototype
      cdrom: Move mmc_ioctls above cdrom_ioctl to remove unnecessary prototype
      cdrom: Remove unnecessary sanitize_format prototype
      cdrom: Remove unnecessary check_for_audio_disc prototype
      cdrom: Remove prototype for open_for_data
      ...

commit 8452727de70f6ad850cd6d0aaa18b5d9050aa63b
Author: Johan Hovold <jhovold@gmail.com>
Date:   Mon May 26 19:22:51 2014 +0200

    USB: sierra: fix use after free at suspend/resume
    
    Fix use after free or NULL-pointer dereference during suspend and
    resume.
    
    The port data may never have been allocated (port probe failed)
    or may already have been released by port_remove (e.g. driver is
    unloaded) when suspend and resume are called.
    
    Fixes: e6929a9020ac ("USB: support for autosuspend in sierra while
    online")
    
    Cc: <stable@vger.kernel.org>    # v2.6.32
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      batman: fix a bogus warning from batadv_is_on_batman_iface()
      ipv4: initialise the itag variable in __mkroute_input
      bonding: Send ALB learning packets using the right source
      bonding: Don't assume 802.1Q when sending alb learning packets.
      net: doc: Update references to skb->rxhash
      stmmac: Remove unbalanced clk_disable call
      ipv6: gro: fix CHECKSUM_COMPLETE support
      net_sched: fix an oops in tcindex filter
      can: peak_pci: prevent use after free at netdev removal
      ip_tunnel: Initialize the fallback device properly
      vlan: Fix build error wth vlan_get_encap_level()
      can: c_can: remove obsolete STRICT_FRAME_ORDERING Kconfig option
      MAINTAINERS: Pravin Shelar is Open vSwitch maintainer.
      bnx2x: Convert return 0 to return rc
      bonding: Fix alb mode to only use first level vlans.
      bonding: Fix stacked device detection in arp monitoring
      macvlan: Fix lockdep warnings with stacked macvlan devices
      vlan: Fix lockdep warning with stacked vlan devices.
      net: Allow for more then a single subclass for netif_addr_lock
      net: Find the nesting level of a given device by type.
      ...

commit dedabbbcb5ed7c75664b4ca66a525c09fe6acf12
Author: David Matlack <dmatlack@google.com>
Date:   Mon May 5 21:02:37 2014 -0700

    staging: slicoss: fix use-after-free bug in slic_entry_remove
    
    This patch fixes a use-after-free bug that causes a null pointer
    dereference in slic_entry_halt.
    
    Since unregister_netdev() will ultimately call slic_entry_halt (the
    net_device ndo_stop() virtual function for this device), we should
    call it before freeing the memory used by slic_entry_halt.
    
    Signed-off-by: David Matlack <dmatlack@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65bc0aaa9c2aa691e313a92250463008fb63266d
Author: David Matlack <dmatlack@google.com>
Date:   Mon May 5 21:02:31 2014 -0700

    staging: slicoss: fix use-after-free in slic_entry_probe
    
    This patch fixes a use-after-free bug that can cause a kernel
    oops. If slic_card_init fails then slic_entry_probe (the pci
    probe() function for this device) will return error without
    cleaning up memory.
    
    Signed-off-by: David Matlack <dmatlack@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf68f517c5c5041e3f3de502dccb008ec21f7262
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed May 21 10:06:02 2014 +0200

    can: gs_usb: gs_destroy_candev(): fix use after free
    
    This patch fixes a use after free of "dev" in gs_destroy_candev().
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 0b5a958cf4df3a5cd578b861471e62138f55c85e
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Tue May 20 11:38:56 2014 +0200

    can: peak_pci: prevent use after free at netdev removal
    
    As remarked by Christopher R. Baker in his post at
    
    http://marc.info/?l=linux-can&m=139707295706465&w=2
    
    there's a possibility for an use after free condition at device removal.
    
    This simplified patch introduces an additional variable to prevent the issue.
    Thanks for catching this.
    
    Cc: linux-stable <stable@vger.kernel.org>
    Reported-by: Christopher R. Baker <cbaker@rec.ri.cmu.edu>
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit a8951d5814e1373807a94f79f7ccec7041325470
Author: Sergey Popovich <popovich_sergei@mail.ru>
Date:   Thu May 8 16:22:35 2014 +0300

    netfilter: Fix potential use after free in ip6_route_me_harder()
    
    Dst is released one line before we access it again with dst->error.
    
    Fixes: 58e35d147128 netfilter: ipv6: propagate routing errors from
    ip6_route_me_harder()
    
    Signed-off-by: Sergey Popovich <popovich_sergei@mail.ru>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 8058bd0faad860e75547cc5cb5d4ade016247a79
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Thu May 8 07:47:49 2014 -0400

    tracepoint: Fix use of tracepoint funcs after rcu free
    
    Commit de7b2973903c "tracepoint: Use struct pointer instead of name hash
    for reg/unreg tracepoints" introduces a use after free by calling
    release_probes on the old struct tracepoint array before the newly
    allocated array is published with rcu_assign_pointer. There is a race
    window where tracepoints (RCU readers) can perform a
    "use-after-grace-period-after-free", which shows up as a GPF in
    stress-tests.
    
    Link: http://lkml.kernel.org/r/53698021.5020108@oracle.com
    Link: http://lkml.kernel.org/p/1399549669-25465-1-git-send-email-mathieu.desnoyers@efficios.com
    
    Reported-by: Sasha Levin <sasha.levin@oracle.com>
    CC: Oleg Nesterov <oleg@redhat.com>
    CC: Dave Jones <davej@redhat.com>
    Fixes: de7b2973903c "tracepoint: Use struct pointer instead of name hash for reg/unreg tracepoints"
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit ecd15dd7e45f3683fa8142b9f2c015dfaa0c243d
Author: Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
Date:   Sun May 4 13:35:37 2014 +0200

    netfilter: nfnetlink: Fix use after free when it fails to process batch
    
    This bug manifests when calling the nft command line tool without
    nf_tables kernel support.
    
    kernel message:
    [   44.071555] Netfilter messages via NETLINK v0.30.
    [   44.072253] BUG: unable to handle kernel NULL pointer dereference at 0000000000000119
    [   44.072264] IP: [<ffffffff8171db1f>] netlink_getsockbyportid+0xf/0x70
    [   44.072272] PGD 7f2b74067 PUD 7f2b73067 PMD 0
    [   44.072277] Oops: 0000 [#1] SMP
    [...]
    [   44.072369] Call Trace:
    [   44.072373]  [<ffffffff8171fd81>] netlink_unicast+0x91/0x200
    [   44.072377]  [<ffffffff817206c9>] netlink_ack+0x99/0x110
    [   44.072381]  [<ffffffffa004b951>] nfnetlink_rcv+0x3c1/0x408 [nfnetlink]
    [   44.072385]  [<ffffffff8171fde3>] netlink_unicast+0xf3/0x200
    [   44.072389]  [<ffffffff817201ef>] netlink_sendmsg+0x2ff/0x740
    [   44.072394]  [<ffffffff81044752>] ? __mmdrop+0x62/0x90
    [   44.072398]  [<ffffffff816dafdb>] sock_sendmsg+0x8b/0xc0
    [   44.072403]  [<ffffffff812f1af5>] ? copy_user_enhanced_fast_string+0x5/0x10
    [   44.072406]  [<ffffffff816dbb6c>] ? move_addr_to_kernel+0x2c/0x50
    [   44.072410]  [<ffffffff816db423>] ___sys_sendmsg+0x3c3/0x3d0
    [   44.072415]  [<ffffffff811301ba>] ? handle_mm_fault+0xa9a/0xc60
    [   44.072420]  [<ffffffff811362d6>] ? mmap_region+0x166/0x5a0
    [   44.072424]  [<ffffffff817da84c>] ? __do_page_fault+0x1dc/0x510
    [   44.072428]  [<ffffffff812b8b2c>] ? apparmor_capable+0x1c/0x60
    [   44.072435]  [<ffffffff817d6e9a>] ? _raw_spin_unlock_bh+0x1a/0x20
    [   44.072439]  [<ffffffff816dfc86>] ? release_sock+0x106/0x150
    [   44.072443]  [<ffffffff816dc212>] __sys_sendmsg+0x42/0x80
    [   44.072446]  [<ffffffff816dc262>] SyS_sendmsg+0x12/0x20
    [   44.072450]  [<ffffffff817df616>] system_call_fastpath+0x1a/0x1f
    
    Signed-off-by: Denys Fedoryshchenko <nuclearcat@nuclearcat.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit fc27691f3537a0df087214322467b642d1f6dedb
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Thu May 1 15:12:36 2014 +0800

    block: null_blk: fix use after free
    
    entry(cmd->ll_list) may belong to new request once end_cmd()
    returns, so fix the bug with the patch.
    
    Without the change, it is easy to observe oops when
    doing null_blk(timer) test.
    
    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 9c64863a49bd23c5a3a983680eb500f7796c81be
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Apr 11 08:13:12 2014 +0000

    can: c_can: Do not access skb after net_receive_skb()
    
    There is no guarantee that the skb is in the same state after calling
    net_receive_skb(). It might be freed or reused. Not really harmful as
    its a read access, except you turn on the proper debugging options
    which catch a use after free.
    
    The whole can subsystem is full of this. Copy and paste ....
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Alexander Stein <alexander.stein@systec-electronic.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 68c03d9193f55dad93036f439b94912c5003a173
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Apr 15 12:24:56 2014 +0200

    [SCSI] don't reference freed command in scsi_prep_return
    
    Patch
    
    commit 0479633686d370303e3430256ace4bd5f7f138dc
    Author: Christoph Hellwig <hch@infradead.org>
    Date:   Thu Feb 20 14:20:55 2014 -0800
    
        [SCSI] do not manipulate device reference counts in scsi_get/put_command
    
    Introduced a use after free:I in the kill case of scsi_prep_return we have to
    release our device reference, but we do this trying to reference the just
    freed command.  Use the local sdev pointer instead.
    
    Fixes: 0479633686d370303e3430256ace4bd5f7f138dc
    Reported-by: Joe Lawrence <joe.lawrence@stratus.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 5e012aad85f2ee31d7de5c21d63ccd2702d63db2
Author: Christoph Hellwig <hch@lst.de>
Date:   Tue Apr 15 12:24:55 2014 +0200

    [SCSI] don't reference freed command in scsi_init_sgtable
    
    Patch
    
    commit 0479633686d370303e3430256ace4bd5f7f138dc
    Author: Christoph Hellwig <hch@infradead.org>
    Date:   Thu Feb 20 14:20:55 2014 -0800
    
        [SCSI] do not manipulate device reference counts in scsi_get/put_command
    
    Introduced a use after free: when scsi_init_io fails we have to release our
    device reference, but we do this trying to reference the just freed command.
    Add a local scsi_device pointer to fix this.
    
    Fixes: 0479633686d370303e3430256ace4bd5f7f138dc
    Reported-by: Sander Eikelenboom <linux@eikelenboom.it>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 8d6c121018bf60d631c05a4a2efc468a392b97bb
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Thu Apr 17 08:15:28 2014 +1000

    xfs: fix buffer use after free on IO error
    
    When testing exhaustion of dm snapshots, the following appeared
    with CONFIG_DEBUG_OBJECTS_FREE enabled:
    
    ODEBUG: free active (active state 0) object type: work_struct hint: xfs_buf_iodone_work+0x0/0x1d0 [xfs]
    
    indicating that we'd freed a buffer which still had a pending reference,
    down this path:
    
    [  190.867975]  [<ffffffff8133e6fb>] debug_check_no_obj_freed+0x22b/0x270
    [  190.880820]  [<ffffffff811da1d0>] kmem_cache_free+0xd0/0x370
    [  190.892615]  [<ffffffffa02c5924>] xfs_buf_free+0xe4/0x210 [xfs]
    [  190.905629]  [<ffffffffa02c6167>] xfs_buf_rele+0xe7/0x270 [xfs]
    [  190.911770]  [<ffffffffa034c826>] xfs_trans_read_buf_map+0x7b6/0xac0 [xfs]
    
    At issue is the fact that if IO fails in xfs_buf_iorequest,
    we'll queue completion unconditionally, and then call
    xfs_buf_rele; but if IO failed, there are no IOs remaining,
    and xfs_buf_rele will free the bp while work is still queued.
    
    Fix this by not scheduling completion if the buffer has
    an error on it; run it immediately.  The rest is only comment
    changes.
    
    Thanks to dchinner for spotting the root cause.
    
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit e6b1ea773e0a6dd611278d0d6f81ea6ff9d6938b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 10 12:45:45 2014 +0300

    Staging: unisys: use after free in list_for_each()
    
    These should be using the _safe version of list_for_each() because we
    free the current element and it leads to a use after free bug.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d21bb45081484b95fb0c80f1afa492a7275689c2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Apr 10 12:36:13 2014 +0300

    staging: unisys: use after free in error messages
    
    We dereference "bus" when we report the error so we have to move the
    kfree() down a couple lines.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0040e606e35a0db80fc3fac04ccc7c7176a8e2b1
Author: Christoph Jaeger <christophjaeger@linux.com>
Date:   Sat Apr 12 13:33:13 2014 +0200

    btrfs: fix use-after-free in mount_subvol()
    
    Pointer 'newargs' is used after the memory that it points to has already
    been freed.
    
    Picked up by Coverity - CID 1201425.
    
    Fixes: 0723a0473f ("btrfs: allow mounting btrfs subvolumes with
    different ro/rw options")
    Signed-off-by: Christoph Jaeger <christophjaeger@linux.com>
    Signed-off-by: Chris Mason <clm@fb.com>

commits)
      vti: don't allow to add the same tunnel twice
      gre: don't allow to add the same tunnel twice
      drivers: net: xen-netfront: fix array initialization bug
      pktgen: be friendly to LLTX devices
      r8152: check RTL8152_UNPLUG
      net: sun4i-emac: add promiscuous support
      net/apne: replace IS_ERR and PTR_ERR with PTR_ERR_OR_ZERO
      net: ipv6: Fix oif in TCP SYN+ACK route lookup.
      drivers: net: cpsw: enable interrupts after napi enable and clearing previous interrupts
      drivers: net: cpsw: discard all packets received when interface is down
      net: Fix use after free by removing length arg from sk_data_ready callbacks.
      Drivers: net: hyperv: Address UDP checksum issues
      Drivers: net: hyperv: Negotiate suitable ndis version for offload support
      Drivers: net: hyperv: Allocate memory for all possible per-pecket information
      bridge: Fix double free and memory leak around br_allowed_ingress
      bonding: Remove debug_fs files when module init fails
      i40evf: program RSS LUT correctly
      i40evf: remove open-coded skb_cow_head
      ixgb: remove open-coded skb_cow_head
      igbvf: remove open-coded skb_cow_head
      ...

commits)
      ib_srpt: Use correct ib_sg_dma primitives
      target/tcm_fc: Rename ft_tport_create to ft_tport_get
      target/tcm_fc: Rename ft_{add,del}_lport to {add,del}_wwn
      target/tcm_fc: Rename structs and list members for clarity
      target/tcm_fc: Limit to 1 TPG per wwn
      target/tcm_fc: Don't export ft_lport_list
      target/tcm_fc: Fix use-after-free of ft_tpg
      target: Add check to prevent Abort Task from aborting itself
      target: Enable READ_STRIP emulation in target_complete_ok_work
      target/sbc: Add sbc_dif_read_strip software emulation
      target: Enable WRITE_INSERT emulation in target_execute_cmd
      target/sbc: Add sbc_dif_generate software emulation
      target/sbc: Only expose PI read_cap16 bits when supported by fabric
      target/spc: Only expose PI mode page bits when supported by fabric
      target/spc: Only expose PI inquiry bits when supported by fabric
      target: Pass in transport supported PI at session initialization
      target/iblock: Fix double bioset_integrity_free bug
      Target/sbc: Initialize COMPARE_AND_WRITE write_sg scatterlist
      target/rd: T10-Dif: RAM disk is allocating more space than required.
      iscsi-target: Fix ERL=2 ASYNC_EVENT connection pointer bug
      ...

commit 2c42be2dd4f6586728dba5c4e197afd5cfaded78
Author: Andy Grover <agrover@redhat.com>
Date:   Fri Apr 4 16:44:37 2014 -0700

    target/tcm_fc: Fix use-after-free of ft_tpg
    
    ft_del_tpg checks tpg->tport is set before unlinking the tpg from the
    tport when the tpg is being removed. Set this pointer in ft_tport_create,
    or the unlinking won't happen in ft_del_tpg and tport->tpg will reference
    a deleted object.
    
    This patch sets tpg->tport in ft_tport_create, because that's what
    ft_del_tpg checks, and is the only way to get back to the tport to
    clear tport->tpg.
    
    The bug was occuring when:
    
    - lport created, tport (our per-lport, per-provider context) is
      allocated.
      tport->tpg = NULL
    - tpg created
    - a PRLI is received. ft_tport_create is called, tpg is found and
      tport->tpg is set
    - tpg removed. ft_tpg is freed in ft_del_tpg. Since tpg->tport was not
      set, tport->tpg is not cleared and points at freed memory
    - Future calls to ft_tport_create return tport via first conditional,
      instead of searching for new tpg by calling ft_lport_find_tpg.
      tport->tpg is still invalid, and will access freed memory.
    
    see https://bugzilla.redhat.com/show_bug.cgi?id=1071340
    
    Cc: stable@vger.kernel.org # 3.0+
    Signed-off-by: Andy Grover <agrover@redhat.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 676d23690fb62b5d51ba5d659935e9f7d9da9f8e
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 11 16:15:36 2014 -0400

    net: Fix use after free by removing length arg from sk_data_ready callbacks.
    
    Several spots in the kernel perform a sequence like:
    
            skb_queue_tail(&sk->s_receive_queue, skb);
            sk->sk_data_ready(sk, skb->len);
    
    But at the moment we place the SKB onto the socket receive queue it
    can be consumed and freed up.  So this skb->len access is potentially
    to freed up memory.
    
    Furthermore, the skb->len can be modified by the consumer so it is
    possible that the value isn't accurate.
    
    And finally, no actual implementation of this callback actually uses
    the length argument.  And since nobody actually cared about it's
    value, lots of call sites pass arbitrary values in such as '0' and
    even '1'.
    
    So just remove the length argument from the callback, that way there
    is no confusion whatsoever and all of these use-after-free cases get
    fixed as a side effect.
    
    Based upon a patch by Eric Dumazet and his suggestion to audit this
    issue tree-wide.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 691e6415c891b8b2b082a120b896b443531c4d45
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 9 09:07:36 2014 +0100

    drm/i915: Always use kref tracking for all contexts.
    
    If we always initialize kref for the context, even if we are using fake
    contexts for hangstats when there is no hw support, we can forgo the
    dance to dereference the ctx->obj and inspect whether we are permitted
    to use kref inside i915_gem_context_reference() and _unreference().
    
    My ulterior motive here is to improve the debugging of a use-after-free
    of ctx->obj. This patch avoids the dereference here and instead forces
    the assertion checks associated with kref.
    
    v2: Refactor the fake contexts to being even more like the real
    contexts, so that there is much less duplicated and special case code.
    
    v3: Tweaks.
    v4: Tweaks, minor.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=76671
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Tested-by: lu hua <huax.lu@intel.com>
    Cc: Ben Widawsky <benjamin.widawsky@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Reviewed-by: Ben Widawsky <ben@bwidawsk.net>
    [Jani: tiny change to backport to drm-intel-fixes.]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit table rule updates before trying to copy the
        counters back to userspace (it's the last action we perform), we
        really can't signal the user copy with an error as we are beyond the
        point from which we can unwind everything.  This causes all kinds of
        use after free crashes and other mysterious behavior.
    
        From Thomas Graf.
    
    12) Restore previous behvaior of div/mod by zero in BPF filter
        processing.  From Daniel Borkmann.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (38 commits)
      net: sctp: wake up all assocs if sndbuf policy is per socket
      isdnloop: several buffer overflows
      netdev: remove potentially harmful checks
      pktgen: fix xmit test for BQL enabled devices
      net/at91_ether: avoid NULL pointer dereference
      tipc: Let tipc_release() return 0
      at86rf230: fix MAX_CSMA_RETRIES parameter
      mac802154: fix duplicate #include headers
      sxgbe: fix duplicate #include headers
      net: filter: be more defensive on div/mod by X==0
      netfilter: Can't fail and free after table replacement
      xen-netback: Trivial format string fix
      net: bcmgenet: Remove unnecessary version.h inclusion
      net: smc911x: Remove unused local variable
      bonding: Inactive slaves should keep inactive flag's value
      netfilter: nf_tables: fix wrong format in request_module()
      netfilter: nf_tables: set names cannot be larger than 15 bytes
      netfilter: nf_conntrack: reserve two bytes for nf_ct_ext->len
      netfilter: Add {ipt,ip6t}_osf aliases for xt_osf
      netfilter: x_tables: allow to use cgroup match for LOCAL_IN nf hooks
      ...

commit 23aebe1691a3d98a79676db6c0fd813e16478804
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Apr 7 15:38:39 2014 -0700

    exec: kill bprm->tcomm[], simplify the "basename" logic
    
    Starting from commit c4ad8f98bef7 ("execve: use 'struct filename *' for
    executable name passing") bprm->filename can not go away after
    flush_old_exec(), so we do not need to save the binary name in
    bprm->tcomm[] added by 96e02d158678 ("exec: fix use-after-free bug in
    setup_new_exec()").
    
    And there was never need for filename_to_taskname-like code, we can
    simply do set_task_comm(kbasename(filename).
    
    This patch has to change set_task_comm() and trace_task_rename() to
    accept "const char *", but I think this change is also good.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      nfs: pass string length to pr_notice message about readdir loops
      NFSv4: Fix a use-after-free problem in open()
      SUNRPC: rpc_restart_call/rpc_restart_call_prepare should clear task->tk_status
      SUNRPC: Don't let rpc_delay() clobber non-timeout errors
      SUNRPC: Ensure call_connect_status() deals correctly with SOFTCONN tasks
      SUNRPC: Ensure call_status() deals correctly with SOFTCONN tasks
      NFSv4: Ensure we respect soft mount timeouts during trunking discovery
      NFSv4: Schedule recovery if nfs40_walk_client_list() is interrupted
      NFS: advertise only supported callback netids
      SUNRPC: remove KERN_INFO from dprintk() call sites
      SUNRPC: Fix large reads on NFS/RDMA
      NFS: Clean up: revert increase in READDIR RPC buffer max size
      SUNRPC: Ensure that call_bind times out correctly
      SUNRPC: Ensure that call_connect times out correctly
      nfs: emit a fsnotify_nameremove call in sillyrename codepath
      nfs: remove synchronous rename code
      nfs: convert nfs_rename to use async_rename infrastructure
      nfs: make nfs_async_rename non-static
      nfs: abstract out code needed to complete a sillyrename
      NFSv4: Clear the open state flags if the new stateid does not match
      ...

commit a31267c30880ebdc73e6815f58c69a665052fab8
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Sat Mar 29 00:26:15 2014 +0400

    rtl8187: fix use after free on failure path in rtl8187_probe()
    
    If allocation of io_dmabuf fails, rtl8187_probe() calls usb_put_dev(udev)
    while usb_get_dev(udev) is not called yet. As a result refcnt is decremented
    incorrectly and usb_dev can be used after memory deallocation.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit e911b8158ee1def8153849b1641b736026b036e0
Author: Trond Myklebust <trond.myklebust@primarydata.com>
Date:   Wed Mar 26 13:24:37 2014 -0700

    NFSv4: Fix a use-after-free problem in open()
    
    If we interrupt the nfs4_wait_for_completion_rpc_task() call in
    nfs4_run_open_task(), then we don't prevent the RPC call from
    completing. So freeing up the opendata->f_attr.mdsthreshold
    in the error path in _nfs4_do_open() leads to a use-after-free
    when the XDR decoder tries to decode the mdsthreshold information
    from the server.
    
    Fixes: 82be417aa37c0 (NFSv4.1 cache mdsthreshold values on OPEN)
    Tested-by: Steve Dickson <SteveD@redhat.com>
    Cc: stable@vger.kernel.org # 3.5+
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commit 307ceaffb3a7a4c71999ccd3f8711e9ad2d5e729
Author: Daniel Kurtz <djkurtz@chromium.org>
Date:   Mon Mar 17 11:28:06 2014 +0800

    drm/exynos: Fix (more) freeing issues in exynos_drm_drv.c
    
    The following commit [0] fixed a use-after-free, but left the subdrv open
    in the error path.
    
    [0] commit 6ca605f7c70895a35737435f17ae9cc5e36f1466
    drm/exynos: Fix freeing issues in exynos_drm_drv.c
    
    Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
    Acked-by: Sachin Kamat <sachin.kamat@linaro.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit 85d898bf8f638b7a23af95dc7d32b4a72c178637
Author: Daniel Kurtz <djkurtz@chromium.org>
Date:   Mon Mar 17 11:28:06 2014 +0800

    drm/exynos: Fix (more) freeing issues in exynos_drm_drv.c
    
    The following commit [0] fixed a use-after-free, but left the subdrv open
    in the error path.
    
    [0] commit 6ca605f7c70895a35737435f17ae9cc5e36f1466
    drm/exynos: Fix freeing issues in exynos_drm_drv.c
    
    Signed-off-by: Daniel Kurtz <djkurtz@chromium.org>
    Acked-by: Sachin Kamat <sachin.kamat@linaro.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit d2722f8b87fb172ff2f31d3a2816b31d58678d40
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Tue Mar 4 11:43:28 2014 +0100

    mac80211: fix potential use-after-free
    
    The bss struct might be freed in ieee80211_rx_bss_put(),
    so we shouldn't use it afterwards.
    
    Cc: stable@vger.kernel.org (3.10+)
    Fixes: 817cee7675237 ("mac80211: track AP's beacon rate and give it to the driver")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit ea8ea460c9ace60bbb5ac6e5521d637d5c15293d
Author: David Woodhouse <David.Woodhouse@intel.com>
Date:   Wed Mar 5 17:09:32 2014 +0000

    iommu/vt-d: Clean up and fix page table clear/free behaviour
    
    There is a race condition between the existing clear/free code and the
    hardware. The IOMMU is actually permitted to cache the intermediate
    levels of the page tables, and doesn't need to walk the table from the
    very top of the PGD each time. So the existing back-to-back calls to
    dma_pte_clear_range() and dma_pte_free_pagetable() can lead to a
    use-after-free where the IOMMU reads from a freed page table.
    
    When freeing page tables we actually need to do the IOTLB flush, with
    the 'invalidation hint' bit clear to indicate that it's not just a
    leaf-node flush, after unlinking each page table page from the next level
    up but before actually freeing it.
    
    So in the rewritten domain_unmap() we just return a list of pages (using
    pg->freelist to make a list of them), and then the caller is expected to
    do the appropriate IOTLB flush (or tear down the domain completely,
    whatever), before finally calling dma_free_pagelist() to free the pages.
    
    As an added bonus, we no longer need to flush the CPU's data cache for
    pages which are about to be *removed* from the page table hierarchy anyway,
    in the non-cache-coherent case. This drastically improves the performance
    of large unmaps.
    
    As a side-effect of all these changes, this also fixes the fact that
    intel_iommu_unmap() was neglecting to free the page tables for the range
    in question after clearing them.
    
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>

commit 8cfad496c4257441710735ccef622f3829870164
Author: Phoebe Buckheister <phoebe.buckheister@itwm.fraunhofer.de>
Date:   Mon Mar 17 18:30:19 2014 +0100

    ieee802154: properly unshare skbs in ieee802154 *_rcv functions
    
    ieee802154 sockets do not properly unshare received skbs, which leads to
    panics (at least) when they are used in conjunction with 6lowpan, so
    run skb_share_check on received skbs.
    6lowpan also contains a use-after-free, which is trivially fixed by
    replacing the inlined skb_share_check with the explicit call.
    
    Signed-off-by: Phoebe Buckheister <phoebe.buckheister@itwm.fraunhofer.de>
    Tested-by: Alexander Aring <alex.aring@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27410e8248c64f5c6d28891389083b1022c15a10
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jan 30 17:58:38 2014 +0100

    drm: Fix use-after-free in the shadow-attache exit code
    
    This regression has been introduced in
    
    commit b3f2333de8e81b089262b26d52272911523e605f
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Dec 11 11:34:31 2013 +0100
    
        drm: restrict the device list for shadow attached drivers
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit c94adc4a65c67a79f0d19285bf5c32fe4c00176f
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jan 30 17:58:38 2014 +0100

    drm: Fix use-after-free in the shadow-attache exit code
    
    This regression has been introduced in
    
    commit b3f2333de8e81b089262b26d52272911523e605f
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Dec 11 11:34:31 2013 +0100
    
        drm: restrict the device list for shadow attached drivers
    
    Reported-by: Dave Jones <davej@redhat.com>
    Cc: Dave Jones <davej@redhat.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: David Herrmann <dh.herrmann@gmail.com>

commit 5c1d5f091dc39eecf9a34a8be01492d14c23ad91
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Mar 12 08:34:39 2014 +0100

    ASoC: Fix use after free
    
    Freeing the current list element while iterating over the list will cause a use
    after free since the iterator function will still use the current element to
    look up the next. Use list_for_each_safe() and remove the element from the list
    before freeing it to avoid this.
    
    Fixes: 1438c2f60b ("ASoC: Add a per component dai list")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit c404e0dc2c843b154f9a36c3aec10d0a715d88eb
Author: Miao Xie <miaox@cn.fujitsu.com>
Date:   Thu Jan 30 16:46:55 2014 +0800

    Btrfs: fix use-after-free in the finishing procedure of the device replace
    
    During device replace test, we hit a null pointer deference (It was very easy
    to reproduce it by running xfstests' btrfs/011 on the devices with the virtio
    scsi driver). There were two bugs that caused this problem:
    - We might allocate new chunks on the replaced device after we updated
      the mapping tree. And we forgot to replace the source device in those
      mapping of the new chunks.
    - We might get the mapping information which including the source device
      before the mapping information update. And then submit the bio which was
      based on that mapping information after we freed the source device.
    
    For the first bug, we can fix it by doing mapping tree update and source
    device remove in the same context of the chunk mutex. The chunk mutex is
    used to protect the allocable device list, the above method can avoid
    the new chunk allocation, and after we remove the source device, all
    the new chunks will be allocated on the new device. So it can fix
    the first bug.
    
    For the second bug, we need make sure all flighting bios are finished and
    no new bios are produced during we are removing the source device. To fix
    this problem, we introduced a global @bio_counter, we not only inc/dec
    @bio_counter outsize of map_blocks, but also inc it before submitting bio
    and dec @bio_counter when ending bios.
    
    Since Raid56 is a little different and device replace dosen't support raid56
    yet, it is not addressed in the patch and I add comments to make sure we will
    fix it in the future.
    
    Reported-by: Qu Wenruo <quwenruo@cn.fujitsu.com>
    Signed-off-by: Wang Shilong <wangsl.fnst@cn.fujitsu.com>
    Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
    Signed-off-by: Josef Bacik <jbacik@fb.com>

commit d1a59868efa65379482c79de997973b06cefb9d2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Mar 10 08:07:01 2014 +0000

    drm/i915: Prevent use-after-free of inherited framebuffer
    
    During KMS takeover, we try to capture the current configuration and
    preserve it across our initialisation. For a variety of reasons, we may
    fail this, for example if the current mode was using the legacy VGA
    plane. Under such circumstances, we discard the fb in the plane config
    and tried to find a matching fb on another CRTC. This obviously also
    failed, leaving the plane config fb dangling, pointing to the freed block.
    
    Regression from
    commit 484b41dd70a9fbea894632d8926bbb93f05021c7
    Author: Jesse Barnes <jbarnes@virtuousgeek.org>
    Date:   Fri Mar 7 08:57:55 2014 -0800
    
        drm/i915: remove early fb allocation dependency on CONFIG_FB v2
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=75963
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4f50b41fa3deb541364462f3014e0b9d09b91f75
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 5 14:07:15 2014 +0300

    ALSA: echoaudio: use after free on error
    
    There are some places where we dereference "chip" in the error message
    but we've already freed it.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit c327cddd184059d018b12d7ef818ba0961200079
Author: Michael Knudsen <m.knudsen@samsung.com>
Date:   Tue Feb 18 09:48:08 2014 +0100

    Bluetooth: Stop BCSP/H5 timer before cleaning up
    
    When stopping BCSP/H5, stop the retransmission timer before proceeding
    to clean up packet queues.  The previous code had a race condition where
    the timer could trigger after the packet lists and protocol structure
    had been removed which led to dereferencing NULL or use-after-free bugs.
    
    Signed-off-by: Michael Knudsen <m.knudsen@samsung.com>
    Reported-by: Kirill Tkhai <ktkhai@parallels.com>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

commit bcdb72ac7c00d2b56359fc82bcc8fe50454717d5
Author: Imre Deak <imre.deak@intel.com>
Date:   Fri Feb 14 20:23:54 2014 +0200

    drm/i915: fix pch pci device enumeration
    
    pci_get_class(class, from) drops the refcount for 'from', so the
    extra pci_dev_put we do on it will result in a use after free bug
    starting with the WARN below.
    
    Regression introduced in
    
    commit 6a9c4b35e6696a63805b6da5e4889c6986e9ee1b
    Author: Rui Guo <firemeteor@users.sourceforge.net>
    Date:   Wed Jun 19 21:10:23 2013 +0800
    
        drm/i915: Fix PCH detect with multiple ISA bridges in VM
    
    [  164.338460] WARNING: CPU: 1 PID: 2094 at include/linux/kref.h:47 klist_next+0xae/0x110()
    [  164.347731] CPU: 1 PID: 2094 Comm: modprobe Tainted: G           O 3.13.0-imre+ #354
    [  164.356468] Hardware name: Intel Corp. VALLEYVIEW B0 PLATFORM/NOTEBOOK, BIOS BYTICRB1.X64.0062.R70.1310112051 10/11/2013
    [  164.368796] Call Trace:
    [  164.371609]  [<ffffffff816a32a6>] dump_stack+0x4e/0x7a
    [  164.377447]  [<ffffffff8104f75d>] warn_slowpath_common+0x7d/0xa0
    [  164.384238]  [<ffffffff8104f83a>] warn_slowpath_null+0x1a/0x20
    [  164.390851]  [<ffffffff8169aeae>] klist_next+0xae/0x110
    [  164.396777]  [<ffffffff8130a110>] ? pci_do_find_bus+0x70/0x70
    [  164.403286]  [<ffffffff813cb4a9>] bus_find_device+0x89/0xc0
    [  164.409719]  [<ffffffff8130a373>] pci_get_dev_by_id+0x63/0xa0
    [  164.416238]  [<ffffffff8130a4e4>] pci_get_class+0x44/0x50
    [  164.422433]  [<ffffffffa034821f>] intel_dsm_detect+0x16f/0x1f0 [i915]
    [  164.429801]  [<ffffffffa03482ae>] intel_register_dsm_handler+0xe/0x10 [i915]
    [  164.437831]  [<ffffffffa02d30fe>] i915_driver_load+0xafe/0xf30 [i915]
    [  164.445126]  [<ffffffff8158a150>] ? intel_alloc_coherent+0x110/0x110
    [  164.452340]  [<ffffffffa0148c07>] drm_dev_register+0xc7/0x150 [drm]
    [  164.459462]  [<ffffffffa014b23f>] drm_get_pci_dev+0x11f/0x1f0 [drm]
    [  164.466554]  [<ffffffff816abb81>] ? _raw_spin_unlock_irqrestore+0x51/0x70
    [  164.474287]  [<ffffffffa02cf7a6>] i915_pci_probe+0x56/0x60 [i915]
    [  164.481185]  [<ffffffff8130a028>] pci_device_probe+0x78/0xf0
    [  164.487603]  [<ffffffff813cd495>] driver_probe_device+0x155/0x350
    [  164.494505]  [<ffffffff813cd74e>] __driver_attach+0x6e/0xa0
    [  164.500826]  [<ffffffff813cd6e0>] ? __device_attach+0x50/0x50
    [  164.507333]  [<ffffffff813cb2be>] bus_for_each_dev+0x6e/0xc0
    [  164.513752]  [<ffffffff813ccefe>] driver_attach+0x1e/0x20
    [  164.519870]  [<ffffffff813cc958>] bus_add_driver+0x138/0x260
    [  164.526289]  [<ffffffffa0188000>] ? 0xffffffffa0187fff
    [  164.532116]  [<ffffffff813cde78>] driver_register+0x98/0xe0
    [  164.538558]  [<ffffffffa0188000>] ? 0xffffffffa0187fff
    [  164.544389]  [<ffffffff813087b0>] __pci_register_driver+0x60/0x70
    [  164.551336]  [<ffffffffa014b37d>] drm_pci_init+0x6d/0x120 [drm]
    [  164.558040]  [<ffffffffa0188000>] ? 0xffffffffa0187fff
    [  164.563928]  [<ffffffffa018806a>] i915_init+0x6a/0x6c [i915]
    [  164.570363]  [<ffffffff810002da>] do_one_initcall+0xaa/0x160
    [  164.576783]  [<ffffffff8103b140>] ? set_memory_nx+0x40/0x50
    [  164.583100]  [<ffffffff810ce7f5>] load_module+0x1fb5/0x2550
    [  164.589410]  [<ffffffff810caab0>] ? store_uevent+0x40/0x40
    [  164.595628]  [<ffffffff810cee7d>] SyS_init_module+0xed/0x100
    [  164.602048]  [<ffffffff816b3c52>] system_call_fastpath+0x16/0x1b
    
    v2: simplify the loop further (Chris)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reported-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=65652
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=74161
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 8987583366ae9e03c306c2b7d73bdb952df1d08d
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Tue Feb 18 22:25:15 2014 +0100

    firewire: net: fix use after free
    
    Commit 8408dc1c14c1 "firewire: net: use dev_printk API" introduced a
    use-after-free in a failure path.  fwnet_transmit_packet_failed(ptask)
    may free ptask, then the dev_err() call dereferenced it.  The fix is
    straightforward; simply reorder the two calls.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable@vger.kernel.org # v3.4+
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

commit 92e3b40537707001d17bbad800d150ab04e53bf4
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 17 20:33:01 2014 -0500

    jbd2: fix use after free in jbd2_journal_start_reserved()
    
    If start_this_handle() fails then it leads to a use after free of
    "handle".
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: stable@vger.kernel.org

commits)
      RDMA/ocrdma: Fix load time panic during GID table init
      RDMA/ocrdma: Fix traffic class shift
      IB/iser: Fix use after free in iser_snd_completion()
      IB/iser: Avoid dereferencing iscsi_iser conn object when not bound to iser connection
      IB/usnic: Fix smatch endianness error
      IB/mlx5: Remove dependency on X86
      mlx5: Add include of <linux/slab.h> because of kzalloc()/kfree() use
      IB/qib: Add missing serdes init sequence
      RDMA/cxgb4: Add missing neigh_release in LE-Workaround path
      IB: Report using RoCE IP based gids in port caps
      IB/mlx4: Build the port IBoE GID table properly under bonding
      IB/mlx4: Do IBoE GID table resets per-port
      IB/mlx4: Do IBoE locking earlier when initializing the GID table
      IB/mlx4: Move rtnl locking to the right place
      IB/mlx4: Make sure GID index 0 is always occupied
      IB/mlx4: Don't allocate range of steerable UD QPs for Ethernet-only device
      RDMA/amso1100: Fix error return code
      RDMA/nes: Fix error return code
      IB/mlx5: Don't set "block multicast loopback" capability
      IB/mlx5: Fix binary compatibility with libmlx5
      ...

commit fd8b48b22a2b7cdf21f15b01cae379e6159a7eea
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 29 16:18:51 2014 +0300

    IB/iser: Fix use after free in iser_snd_completion()
    
    We use "tx_desc" again after we free it.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commit b0c057ca7e835b36c6050c7627634b664796c1d6
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Feb 13 11:45:11 2014 +0200

    vhost: fix a theoretical race in device cleanup
    
    vhost_zerocopy_callback accesses VQ right after it drops a ubuf
    reference.  In theory, this could race with device removal which waits
    on the ubuf kref, and crash on use after free.
    
    Do all accesses within rcu read side critical section, and synchronize
    on release.
    
    Since callbacks are always invoked from bh, synchronize_rcu_bh seems
    enough and will help release complete a bit faster.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e8243f32f2550de0eb97180f02a4e94c42d68b38
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 5 16:21:53 2014 +0300

    dlm: silence a harmless use after free warning
    
    We pass the freed "r" pointer back to the caller.  It's harmless but it
    upsets the static checkers.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David Teigland <teigland@redhat.com>

commit aadbacc7f2f0f359bd562cb95adde3da348fb643
Author: Oleg Drokin <green@linuxhacker.ru>
Date:   Thu Jan 23 23:45:05 2014 -0500

    staging/lustre/lnet: Fix use after free in ksocknal_send
    
    Call to ksocknal_launch_packet might schedule a callback that
    might free the just sent message, and so subsequent access to it
    via lntmsg->msg_vmflush goes to freed memory.
    
    Instead we'll just remember if we are in the vmflush thread and
    only restore if we happened to set mempressure flag.
    
    Signed-off-by: Oleg Drokin <oleg.drokin@intel.com>
    Reviewed-on: http://review.whamcloud.com/8667
    Intel-bug-id: https://jira.hpdd.intel.com/browse/LU-4360
    Reviewed-by: Liang Zhen <liang.zhen@intel.com>
    Reviewed-by: Amir Shehata <amir.shehata@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a617302c531eaf497ccd02a61d380efc119ba999
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Jan 22 11:14:18 2014 +0200

    cfg80211: fix scan done race
    
    When an interface/wdev is removed, any ongoing scan should be
    cancelled by the driver. This will make it call cfg80211, which
    only queues a work struct. If interface/wdev removal is quick
    enough, this can leave the scan request pending and processed
    only after the interface is gone, causing a use-after-free.
    
    Fix this by making sure the scan request is not pending after
    the interface is destroyed. We can't flush or cancel the work
    item due to locking concerns, but when it'll run it shouldn't
    find anything to do. This leaves a potential issue, if a new
    scan gets requested before the work runs, it prematurely stops
    the running scan, potentially causing another crash. I'll fix
    that in the next patch.
    
    This was particularly observed with P2P_DEVICE wdevs, likely
    because freeing them is quicker than freeing netdevs.
    
    Reported-by: Andrei Otcheretianski <andrei.otcheretianski@intel.com>
    Fixes: 4a58e7c38443 ("cfg80211: don't "leak" uncompleted scans")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit c4ad8f98bef77c7356aa6a9ad9188a6acc6b849d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Feb 5 12:54:53 2014 -0800

    execve: use 'struct filename *' for executable name passing
    
    This changes 'do_execve()' to get the executable name as a 'struct
    filename', and to free it when it is done.  This is what the normal
    users want, and it simplifies and streamlines their error handling.
    
    The controlled lifetime of the executable name also fixes a
    use-after-free problem with the trace_sched_process_exec tracepoint: the
    lifetime of the passed-in string for kernel users was not at all
    obvious, and the user-mode helper code used UMH_WAIT_EXEC to serialize
    the pathname allocation lifetime with the execve() having finished,
    which in turn meant that the trace point that happened after
    mm_release() of the old process VM ended up using already free'd memory.
    
    To solve the kernel string lifetime issue, this simply introduces
    "getname_kernel()" that works like the normal user-space getname()
    function, except with the source coming from kernel memory.
    
    As Oleg points out, this also means that we could drop the tcomm[] array
    from 'struct linux_binprm', since the pathname lifetime now covers
    setup_new_exec().  That would be a separate cleanup.
    
    Reported-by: Igor Zhbanov <i.zhbanov@samsung.com>
    Tested-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5547fec74a566e1f5e00a937b9a367f7c6a94a8b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jan 29 16:17:57 2014 +0300

    UBI: fix some use after free bugs
    
    Move the kmem_cache_free() calls down a couple lines.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

commit 9ac27090f61ea6735a62b0a98c7669c833bcdc09
Author: Keith Busch <keith.busch@intel.com>
Date:   Fri Jan 31 16:53:39 2014 -0700

    NVMe: Namespace use after free on surprise removal
    
    An nvme block device may have open references when the device is
    removed. New commands may still be sent on the removed device, so we
    need to ref count the opens, return errors for new commands, and not
    free the namespace and nvme_dev until all references are closed.
    
    Signed-off-by: Keith Busch <keith.busch@intel.com>
    Signed-off-by: Matthew Wilcox <matthew.r.wilcox@intel.com>

commit 85816794240b9659e66e4d9b0df7c6e814e5f603
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 28 21:38:06 2014 +0100

    fanotify: Fix use after free for permission events
    
    Currently struct fanotify_event_info has been destroyed immediately
    after reporting its contents to userspace. However that is wrong for
    permission events because those need to stay around until userspace
    provides response which is filled back in fanotify_event_info. So change
    to code to free permission events only after we have got the response
    from userspace.
    
    Reported-and-tested-by: Jiri Kosina <jkosina@suse.cz>
    Reported-and-tested-by: Dave Jones <davej@fedoraproject.org>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 13116dfd13c8c9d60ea04ece13419af2de8e2e37
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 28 18:29:24 2014 +0100

    fanotify: Fix use after free in mask checking
    
    We cannot use the event structure returned from
    fsnotify_add_notify_event() because that event can be freed by the time
    that function returns. Use the mask argument passed into the event
    handler directly instead. This also fixes a possible problem when we
    could unnecessarily wait for permission response for a normal fanotify
    event which got merged with a permission event.
    
    We also disallow merging of permission event with any other event so
    that we know the permission event which we just created is the one on
    which we should wait for permission response.
    
    Reported-and-tested-by: Jiri Kosina <jkosina@suse.cz>
    Reported-and-tested-by: Dave Jones <davej@fedoraproject.org>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit code
       - RPC layer needs finer grained handling of connection errors
       - more RPC GSS upcall fixes"
    
    * tag 'nfs-for-3.14-1' of git://git.linux-nfs.org/projects/trondmy/linux-nfs: (30 commits)
      pnfs: Proper delay for NFS4ERR_RECALLCONFLICT in layout_get_done
      pnfs: fix BUG in filelayout_recover_commit_reqs
      nfs4: fix discover_server_trunking use after free
      NFSv4.1: Handle errors correctly in nfs41_walk_client_list
      nfs: always make sure page is up-to-date before extending a write to cover the entire page
      nfs: page cache invalidation for dio
      nfs: take i_mutex during direct I/O reads
      nfs: merge nfs_direct_write into nfs_file_direct_write
      nfs: merge nfs_direct_read into nfs_file_direct_read
      nfs: increment i_dio_count for reads, too
      nfs: defer inode_dio_done call until size update is done
      nfs: fix size updates for aio writes
      nfs4.1: properly handle ENOTSUP in SECINFO_NO_NAME
      NFSv4.1: Fix a race in nfs4_write_inode
      NFSv4.1: Don't trust attributes if a pNFS LAYOUTCOMMIT is outstanding
      point to the right include file in a comment (left over from a9004abc3)
      NFS: dprintk() should not print negative fileids and inode numbers
      nfs: fix dead code of ipv6_addr_scope
      sunrpc: Fix infinite loop in RPC state machine
      SUNRPC: Add tracepoint for socket errors
      ...

commit 940fe4793a219375c4713a17c61b843720807c9d
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Thu Jan 23 15:55:36 2014 -0800

    proc: fix the potential use-after-free in first_tid()
    
    proc_task_readdir() verifies that the result of get_proc_task() is
    pid_alive() and thus its ->group_leader is fine too.  However this is not
    necessarily true after rcu_read_unlock(), we need to recheck this again
    after first_tid() does rcu_read_lock().  Otherwise
    leader->thread_group.next (used by next_thread()) can be invalid if the
    rcu grace period expires in between.
    
    The race is subtle and unlikely, but still it is possible afaics.  To
    simplify lets ignore the "likely" case when tid != 0, f_version can be
    cleared by proc_task_operations->llseek().
    
    Suppose we have a main thread M and its subthread T.  Suppose that f_pos
    == 3, iow first_tid() should return T.  Now suppose that the following
    happens between rcu_read_unlock() and rcu_read_lock():
    
            1. T execs and becomes the new leader. This removes M from
                ->thread_group but next_thread(M) is still T.
    
            2. T creates another thread X which does exec as well, T
               goes away.
    
            3. X creates another subthread, this increments nr_threads.
    
            4. first_tid() does next_thread(M) and returns the already
               dead T.
    
    Note also that we need 2.  and 3.  only because of get_nr_threads() check,
    and this check was supposed to be optimization only.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Michal Hocko <mhocko@suse.cz>
    Cc: Sameer Nanda <snanda@chromium.org>
    Cc: Sergey Dyasly <dserrg@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f8570263ee16eb1d5038b8e20d7db3a68bbb2b49
Author: Vladimir Davydov <vdavydov@parallels.com>
Date:   Thu Jan 23 15:53:06 2014 -0800

    memcg, slab: RCU protect memcg_params for root caches
    
    We relocate root cache's memcg_params whenever we need to grow the
    memcg_caches array to accommodate all kmem-active memory cgroups.
    Currently on relocation we free the old version immediately, which can
    lead to use-after-free, because the memcg_caches array is accessed
    lock-free (see cache_from_memcg_idx()).  This patch fixes this by making
    memcg_params RCU-protected for root caches.
    
    Signed-off-by: Vladimir Davydov <vdavydov@parallels.com>
    Cc: Michal Hocko <mhocko@suse.cz>
    Cc: Glauber Costa <glommer@gmail.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Balbir Singh <bsingharora@gmail.com>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: Christoph Lameter <cl@linux.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 93079162bf0ed2934c7b0c3ee93ba894df8fb3cd
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Wed Dec 11 17:06:14 2013 +0100

    scsi_transport_srp: Fix a race condition
    
    The rport timers must be stopped before the SRP initiator destroys the
    resources associated with the SCSI host. This is necessary because
    otherwise the callback functions invoked from the SRP transport layer
    could trigger a use-after-free. Stopping the rport timers before
    invoking scsi_remove_host() can trigger long delays in the SCSI error
    handler if a transport layer failure occurs while scsi_remove_host()
    is in progress. Hence move the code for stopping the rport timers from
    srp_rport_release() into a new function and invoke that function after
    scsi_remove_host() has finished. This patch fixes the following
    sporadic kernel crash:
    
         kernel BUG at include/asm-generic/dma-mapping-common.h:64!
         invalid opcode: 0000 [#1] SMP
         RIP: 0010:[<ffffffffa03b20b1>]  [<ffffffffa03b20b1>] srp_unmap_data+0x121/0x130 [ib_srp]
         Call Trace:
         [<ffffffffa03b20fc>] srp_free_req+0x3c/0x80 [ib_srp]
         [<ffffffffa03b2188>] srp_finish_req+0x48/0x70 [ib_srp]
         [<ffffffffa03b21fb>] srp_terminate_io+0x4b/0x60 [ib_srp]
         [<ffffffffa03a6fb5>] __rport_fail_io_fast+0x75/0x80 [scsi_transport_srp]
         [<ffffffffa03a7438>] rport_fast_io_fail_timedout+0x88/0xc0 [scsi_transport_srp]
         [<ffffffff8108b370>] worker_thread+0x170/0x2a0
         [<ffffffff81090876>] kthread+0x96/0xa0
         [<ffffffff8100c0ca>] child_rip+0xa/0x20
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commit abad2fa5ba67725a3f9c376c8cfe76fbe94a3041
Author: Weston Andros Adamson <dros@primarydata.com>
Date:   Sun Jan 19 22:45:36 2014 -0500

    nfs4: fix discover_server_trunking use after free
    
    If clp is new (cl_count = 1) and it matches another client in
    nfs4_discover_server_trunking, the nfs_put_client will free clp before
    ->cl_preserve_clid is set.
    
    Cc: stable@vger.kernel.org # 3.7+
    Signed-off-by: Weston Andros Adamson <dros@primarydata.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>

commits)
      perf tools: Remove unnecessary callchain cursor state restore on unmatch
      perf callchain: Spare double comparison of callchain first entry
      perf tools: Do proper comm override error handling
      perf symbols: Export elf_section_by_name and reuse
      perf probe: Release all dynamically allocated parameters
      perf probe: Release allocated probe_trace_event if failed
      perf tools: Add 'build-test' make target
      tools lib traceevent: Unregister handler when xen plugin is unloaded
      tools lib traceevent: Unregister handler when scsi plugin is unloaded
      tools lib traceevent: Unregister handler when jbd2 plugin is is unloaded
      tools lib traceevent: Unregister handler when cfg80211 plugin is unloaded
      tools lib traceevent: Unregister handler when mac80211 plugin is unloaded
      tools lib traceevent: Unregister handler when sched_switch plugin is unloaded
      tools lib traceevent: Unregister handler when kvm plugin is unloaded
      tools lib traceevent: Unregister handler when kmem plugin is unloaded
      tools lib traceevent: Unregister handler when hrtimer plugin is unloaded
      tools lib traceevent: Unregister handler when function plugin is unloaded
      tools lib traceevent: Add pevent_unregister_print_function()
      tools lib traceevent: Add pevent_unregister_event_handler()
      tools lib traceevent: fix pointer-integer size mismatch
      ...

commit f466f75385369a181409e46da272db3de6f5c5cb
Author: Asias He <asias.hejun@gmail.com>
Date:   Thu Jan 16 10:18:48 2014 +1030

    virtio-scsi: Fix hotcpu_notifier use-after-free with virtscsi_freeze
    
    vqs are freed in virtscsi_freeze but the hotcpu_notifier is not
    unregistered. We will have a use-after-free usage when the notifier
    callback is called after virtscsi_freeze.
    
    Fixes: 285e71ea6f3583a85e27cb2b9a7d8c35d4c0d558
    ("virtio-scsi: reset virtqueue affinity when doing cpu hotplug")
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Asias He <asias.hejun@gmail.com>
    Reviewed-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit 8a4c5c329de716996eea03d93753ccbb5406072b
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Jan 14 12:04:51 2014 -0700

    PCI: Check parent kobject in pci_destroy_dev()
    
    If pci_stop_and_remove_bus_device() is run concurrently for a device and
    its parent bridge via remove_callback(), both code paths attempt to acquire
    pci_rescan_remove_lock.  If the child device removal acquires it first,
    there will be no problems.  However, if the parent bridge removal acquires
    it first, it will eventually execute pci_destroy_dev() for the child
    device, but that device object will not be freed yet due to the reference
    held by the concurrent child removal.  Consequently, both
    pci_stop_bus_device() and pci_remove_bus_device() will be executed for that
    device unnecessarily and pci_destroy_dev() will see a corrupted list head
    in that object.  Moreover, an excess put_device() will be executed for that
    device in that case which may lead to a use-after-free in the final
    kobject_put() done by sysfs_schedule_callback_work().
    
    To avoid that problem, make pci_destroy_dev() check if the device's parent
    kobject is NULL, which only happens after device_del() has already run for
    it.  Make pci_destroy_dev() return immediately whithout doing anything in
    that case.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>

commit 174be70b638ceb1038f466b5ca014f6b1d9c8a59
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Sat Jan 4 14:21:42 2014 +0100

    driver-core: Fix use-after-free triggered by bus_unregister()
    
    Avoid that bus_unregister() triggers a use-after-free with
    CONFIG_DEBUG_KOBJECT_RELEASE=y. This patch avoids that the
    following sequence triggers a kernel crash with memory poisoning
    enabled:
    * bus_register()
    * driver_register()
    * driver_unregister()
    * bus_unregister()
    
    The above sequence causes the bus private data to be freed from
    inside the bus_unregister() call although it is not guaranteed in
    that function that the reference count on the bus private data has
    dropped to zero. As an example, with CONFIG_DEBUG_KOBJECT_RELEASE=y
    the ${bus}/drivers kobject is still holding a reference on
    bus->p->subsys.kobj via its parent pointer at the time the bus
    private data is freed. Fix this by deferring freeing the bus private
    data until the last kobject_put() call on bus->p->subsys.kobj.
    
    The kernel oops triggered by the above sequence and with memory
    poisoning enabled and that is fixed by this patch is as follows:
    
    general protection fault: 0000 [#1] PREEMPT SMP
    CPU: 3 PID: 2711 Comm: kworker/3:32 Tainted: G        W  O 3.13.0-rc4-debug+ #1
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    Workqueue: events kobject_delayed_cleanup
    task: ffff880037f866d0 ti: ffff88003b638000 task.ti: ffff88003b638000
    Call Trace:
     [<ffffffff81263105>] ? kobject_get_path+0x25/0x100
     [<ffffffff81264354>] kobject_uevent_env+0x134/0x600
     [<ffffffff8126482b>] kobject_uevent+0xb/0x10
     [<ffffffff81262fa2>] kobject_delayed_cleanup+0xc2/0x1b0
     [<ffffffff8106c047>] process_one_work+0x217/0x700
     [<ffffffff8106bfdb>] ? process_one_work+0x1ab/0x700
     [<ffffffff8106c64b>] worker_thread+0x11b/0x3a0
     [<ffffffff8106c530>] ? process_one_work+0x700/0x700
     [<ffffffff81074b70>] kthread+0xf0/0x110
     [<ffffffff81074a80>] ? insert_kthread_work+0x80/0x80
     [<ffffffff815673bc>] ret_from_fork+0x7c/0xb0
     [<ffffffff81074a80>] ? insert_kthread_work+0x80/0x80
    Code: 89 f8 48 89 e5 f6 82 c0 27 63 81 20 74 15 0f 1f 44 00 00 48 83 c0 01 0f b6 10 f6 82 c0 27 63 81 20 75 f0 5d c3 66 0f 1f 44 00 00 <80> 3f 00 55 48 89 e5 74 15 48 89 f8 0f 1f 40 00 48 83 c0 01 80
    RIP  [<ffffffff81267ed0>] strlen+0x0/0x30
     RSP <ffff88003b639c70>
    ---[ end trace 210f883ef80376aa ]---
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26a865f4aa8e66a6d94958de7656f7f1b03c6c56
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Fri Jan 3 17:00:51 2014 -0200

    KVM: VMX: fix use after free of vmx->loaded_vmcs
    
    After free_loaded_vmcs executes, the "loaded_vmcs" structure
    is kfreed, and now vmx->loaded_vmcs points to a kfreed area.
    Subsequent free_loaded_vmcs then attempts to manipulate
    vmx->loaded_vmcs.
    
    Switch the order to avoid the problem.
    
    https://bugzilla.redhat.com/show_bug.cgi?id=1047892
    
    Reviewed-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>

commits)
      bridge: use spin_lock_bh() in br_multicast_set_hash_max
      ipv6: don't install anycast address for /128 addresses on routers
      hso: fix handling of modem port SERIAL_STATE notifications
      isdn: Drop big endian cpp checks from telespci and hfc_pci drivers
      be2net: fix max_evt_qs calculation for BE3 in SR-IOV config
      be2net: increase the timeout value for loopback-test FW cmd
      be2net: disable RSS when number of RXQs is reduced to 1 via set-channels
      xen-netback: Include header for vmalloc
      net: 6lowpan: fix lowpan_header_create non-compression memcpy call
      fec: Revert "fec: Do not assume that PHY reset is active low"
      bnx2x: fix VLAN configuration for VFs.
      bnx2x: fix AFEX memory overflow
      bnx2x: Clean before update RSS arrives
      bnx2x: Correct number of MSI-X vectors for VFs
      bnx2x: limit number of interrupt vectors for 57711
      qlcnic: Fix bug in Tx completion path
      infiniband: make sure the src net is infiniband when create new link
      {vxlan, inet6} Mark vxlan_dev flags with VXLAN_F_IPV6 properly
      cxgb4: allow large buffer size to have page size
      netpoll: Fix missing TXQ unlock and and OOPS.
      ...

commit 4d231b76eef6c4a6bd9c96769e191517765942cb
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Mon Dec 30 23:40:50 2013 +0100

    net: llc: fix use after free in llc_ui_recvmsg
    
    While commit 30a584d944fb fixes datagram interface in LLC, a use
    after free bug has been introduced for SOCK_STREAM sockets that do
    not make use of MSG_PEEK.
    
    The flow is as follow ...
    
      if (!(flags & MSG_PEEK)) {
        ...
        sk_eat_skb(sk, skb, false);
        ...
      }
      ...
      if (used + offset < skb->len)
        continue;
    
    ... where sk_eat_skb() calls __kfree_skb(). Therefore, cache
    original length and work on skb_len to check partial reads.
    
    Fixes: 30a584d944fb ("[LLX]: SOCK_DGRAM interface fixes")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4eb919825e6c3c7fb3630d5621f6d11e98a18b3a
Author: Rik van Riel <riel@redhat.com>
Date:   Thu Jan 2 12:58:46 2014 -0800

    mm: fix use-after-free in sys_remap_file_pages
    
    remap_file_pages calls mmap_region, which may merge the VMA with other
    existing VMAs, and free "vma".  This can lead to a use-after-free bug.
    Avoid the bug by remembering vm_flags before calling mmap_region, and
    not trying to dereference vma later.
    
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: PaX Team <pageexec@freemail.hu>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Cyrill Gorcunov <gorcunov@openvz.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      stmmac: Fix incorrect spinlock release and PTP cap detection.
      phy: IRQ cannot be shared
      net: rose: restore old recvmsg behavior
      xen-netback: fix guest-receive-side array sizes
      fec: Do not assume that PHY reset is active low
      tipc: fix deadlock during socket release
      netfilter: nf_tables: fix wrong datatype in nft_validate_data_load()
      batman-adv: fix vlan header access
      batman-adv: clean nf state when removing protocol header
      batman-adv: fix alignment for batadv_tvlv_tt_change
      batman-adv: fix size of batadv_bla_claim_dst
      batman-adv: fix size of batadv_icmp_header
      batman-adv: fix header alignment by unrolling batadv_header
      batman-adv: fix alignment for batadv_coded_packet
      netfilter: nf_tables: fix oops when updating table with user chains
      netfilter: nf_tables: fix dumping with large number of sets
      ipv6: release dst properly in ipip6_tunnel_xmit
      netxen: Correct off-by-one errors in bounds checks
      net: Add some clarification to skb_tx_timestamp() comment.
      arc_emac: fix potential use after free
      ...

commit 74cf249d5cf7de84c88cca69a2f13b13d500ff94
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Fri Dec 27 16:55:14 2013 -0300

    perf tools: Use zfree to help detect use after free bugs
    
    Several areas already used this technique, so do some audit to
    consistently use it elsewhere.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lkml.kernel.org/n/tip-9sbere0kkplwe45ak6rk4a1f@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 37ec274e9713eafc2ba6c4471420f06cb8f68ecf
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Thu Dec 19 18:10:40 2013 -0800

    arc_emac: fix potential use after free
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    
    skb_tx_timestamp(skb) should be called _before_ TX completion
    has a chance to trigger, otherwise it is too late and we access
    freed memory.
    
    Fixes: e4f2379db6c6 ("ethernet/arc/arc_emac - Add new driver")
    From: Eric Dumazet <edumazet@google.com>
    Cc: Alexey Brodkin <Alexey.Brodkin@synopsys.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7a2a84518cfb263d2c4171b3d63671f88316adb2
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 19 10:53:02 2013 -0800

    net: fec: fix potential use after free
    
    skb_tx_timestamp(skb) should be called _before_ TX completion
    has a chance to trigger, otherwise it is too late and we access
    freed memory.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Fixes: de5fb0a05348 ("net: fec: put tx to napi poll function to fix dead lock")
    Cc: Frank Li <Frank.Li@freescale.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Acked-by: Frank Li <Frank.Li@freescale.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      drm/edid: add quirk for BPC in Samsung NP700G7A-S01PL notebook
      drm/ttm: Fix accesses through vmas with only partial coverage
      drm/nouveau: only runtime suspend by default in optimus configuration
      drm: don't double-free on driver load error
      Revert "drm/radeon: Implement radeon_pci_shutdown"
      drm/radeon: add missing display tiling setup for oland
      drm/radeon: fix typo in cik_copy_dma
      drm/radeon/cik: plug in missing blit callback
      drm/radeon/dpm: Fix hwmon crash
      drm/radeon: Fix sideport problems on certain RS690 boards
      drm/i915: don't update the dri1 breadcrumb with modesetting
      DRM: Armada: prime refcounting bug fix
      DRM: Armada: fix printing of phys_addr_t/dma_addr_t
      DRM: Armada: destroy framebuffer after helper
      DRM: Armada: implement lastclose() for fbhelper
      drm/i915: Repeat eviction search after idling the GPU
      drm/vmwgfx: Add max surface memory param
      drm/i915: Fix use-after-free in do_switch
      drm/i915: fix pm init ordering
      drm/i915: Hold mutex across i915_gem_release
      ...

commit 03439e7d0a7ab3d77a74523b9ba64736c0fc28de
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Dec 4 14:29:11 2013 +0100

    s390/3270: fix use after free of tty3270_screen structure
    
    The deactivation and freeing of the tty view of the 3270 device
    can race with a tty3270_update invocation via the update timer.
    To fix this move the del_timer_sync call for the update timer from
    tty3270_free_view to tty3270_free prior to the tty3270_free_screen
    call.
    
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commits)
      igb: Fix for issue where values could be too high for udelay function.
      i40e: fix null dereference
      xen-netback: fix gso_prefix check
      net: make neigh_priv_len in struct net_device 16bit instead of 8bit
      drivers: net: cpsw: fix for cpsw crash when build as modules
      xen-netback: napi: don't prematurely request a tx event
      xen-netback: napi: fix abuse of budget
      sch_tbf: use do_div() for 64-bit divide
      udp: ipv4: must add synchronization in udp_sk_rx_dst_set()
      net:fec: remove duplicate lines in comment about errata ERR006358
      Revert "8390 : Replace ei_debug with msg_enable/NETIF_MSG_* feature"
      8390 : Replace ei_debug with msg_enable/NETIF_MSG_* feature
      xen-netback: make sure skb linear area covers checksum field
      net: smc91x: Fix device tree based configuration so it's usable
      udp: ipv4: fix potential use after free in udp_v4_early_demux()
      macvtap: signal truncated packets
      tun: unbreak truncated packet signalling
      net: sched: htb: fix the calculation of quantum
      net: sched: tbf: fix the calculation of max_size
      micrel: add support for KSZ8041RNLI
      ...

commit f020b4430bf29a25229fd9975662baefb02facda
Author: Mitchel Humpherys <mitchelh@codeaurora.org>
Date:   Fri Dec 13 19:26:17 2013 -0800

    gpu: ion: fix use-after-free in ion_heap_freelist_drain
    
    The `buffer' variable is being used after being freed. Fix this.
    
    Signed-off-by: Mitchel Humpherys <mitchelh@codeaurora.org>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9290a9a7c0bcf5400e8dbfbf9707fa68ea3fb338
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Dec 10 12:06:35 2013 -0500

    GFS2: Fix use-after-free race when calling gfs2_remove_from_ail
    
    Function gfs2_remove_from_ail drops the reference on the bh via
    brelse. This patch fixes a race condition whereby bh is deferenced
    after the brelse when setting bd->bd_blkno = bh->b_blocknr;
    Under certain rare circumstances, bh might be gone or reused,
    and bd->bd_blkno is set to whatever that memory happens to be,
    which is often 0. Later, in gfs2_trans_add_unrevoke, that bd fails
    the test "bd->bd_blkno >= blkno" which causes it to never be freed.
    The end result is that the bd is never freed from the bufdata cache,
    which results in this error:
    slab error in kmem_cache_destroy(): cache `gfs2_bufdata': Can't free all objects
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commits)
      [media] videobuf2-dma-sg: fix possible memory leak
      [media] vb2: regression fix: always set length field.
      [media] mt9p031: Include linux/of.h header
      [media] rtl2830: add parent for I2C adapter
      [media] media: marvell-ccic: use devm to release clk
      [media] ths7303: Declare as static a private function
      [media] em28xx-video: Swap release order to avoid lock nesting
      [media] usbtv: Add support for PAL video source
      [media] media_tree: Fix spelling errors
      [media] videobuf2: Add support for file access mode flags for DMABUF exporting
      [media] radio-shark2: Mark shark_resume_leds() inline to kill compiler warning
      [media] radio-shark: Mark shark_resume_leds() inline to kill compiler warning
      [media] af9035: unlock on error in af9035_i2c_master_xfer()
      [media] af9033: fix broken I2C
      [media] v4l: omap3isp: Don't check for missing get_fmt op on remote subdev
      [media] af9035: fix broken I2C and USB I/O
      [media] wm8775: fix broken audio routing
      [media] marvell-ccic: drop resource free in driver remove
      [media] tef6862/radio-tea5764: actually assign clamp result
      [media] cx231xx: use after free on error path in probe
      ...

commits)
      [media] videobuf2-dma-sg: fix possible memory leak
      [media] vb2: regression fix: always set length field.
      [media] mt9p031: Include linux/of.h header
      [media] rtl2830: add parent for I2C adapter
      [media] media: marvell-ccic: use devm to release clk
      [media] ths7303: Declare as static a private function
      [media] em28xx-video: Swap release order to avoid lock nesting
      [media] usbtv: Add support for PAL video source
      [media] media_tree: Fix spelling errors
      [media] videobuf2: Add support for file access mode flags for DMABUF exporting
      [media] radio-shark2: Mark shark_resume_leds() inline to kill compiler warning
      [media] radio-shark: Mark shark_resume_leds() inline to kill compiler warning
      [media] af9035: unlock on error in af9035_i2c_master_xfer()
      [media] af9033: fix broken I2C
      [media] v4l: omap3isp: Don't check for missing get_fmt op on remote subdev
      [media] af9035: fix broken I2C and USB I/O
      [media] wm8775: fix broken audio routing
      [media] marvell-ccic: drop resource free in driver remove
      [media] tef6862/radio-tea5764: actually assign clamp result
      [media] cx231xx: use after free on error path in probe
      ...

commit 9ae9ab522094406915c27dc729d3ecef7b44af72
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Dec 4 09:52:58 2013 +0000

    drm/i915: Prevent double unref following alloc failure during execbuffer
    
    Whilst looking up the objects required for an execbuffer, an untimely
    allocation failure in creating the vma results in the object being
    unreferenced from two lists. The ownership during the lookup is meant to
    be moved from the list of objects being looked to the vma, and this
    double unreference upon error results in a use-after-free.
    
    Fixes regression from
    commit 27173f1f95db5e74ceb35fe9a2f2f348ea11bac9
    Author: Ben Widawsky <ben@bwidawsk.net>
    Date:   Wed Aug 14 11:38:36 2013 +0200
    
        drm/i915: Convert execbuf code to use vmas
    
    Based on the fix by Ben Widawsky.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ben Widawsky <ben@bwidawsk.net>
    Cc: stable@vger.kernel.org
    [danvet: Bikeshed the crucial comment above the ownership transfer as
    discussed on irc.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 610438b74496b2986a9025f8e23c134cb638e338
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 11 08:10:05 2013 -0800

    udp: ipv4: fix potential use after free in udp_v4_early_demux()
    
    pskb_may_pull() can reallocate skb->head, we need to move the
    initialization of iph and uh pointers after its call.
    
    Fixes: 421b3885bf6d ("udp: ipv4: Add udp early demux")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Shawn Bohrer <sbohrer@rgmadvisors.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a7560a0132cfc93b25d2df1d277a078a05220cf4
Author: Tejun Heo <tj@kernel.org>
Date:   Tue Dec 10 10:22:30 2013 -0500

    sysfs: fix use-after-free in sysfs_kill_sb()
    
    While restructuring the [u]mount path, 4b93dc9b1c68 ("sysfs, kernfs:
    prepare mount path for kernfs") incorrectly updated sysfs_kill_sb() so
    that it first kills super_block and then tries to dereference its
    namespace tag to drop it.  Fix it by caching namespace tag before
    killing the superblock and then drop the cached namespace tag.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reported-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Tested-by: Yuanhan Liu <yuanhan.liu@linux.intel.com>
    Tested-by: Vlastimil Babka <vbabka@suse.cz>
    Link: http://lkml.kernel.org/g/20131205031051.GC5135@yliu-dev.sh.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8afdd99a1315e759de04ad6e2344f0c5f17ecb1b
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 10 18:07:23 2013 -0800

    udp: ipv4: fix an use after free in __udp4_lib_rcv()
    
    Dave Jones reported a use after free in UDP stack :
    
    [ 5059.434216] =========================
    [ 5059.434314] [ BUG: held lock freed! ]
    [ 5059.434420] 3.13.0-rc3+ #9 Not tainted
    [ 5059.434520] -------------------------
    [ 5059.434620] named/863 is freeing memory ffff88005e960000-ffff88005e96061f, with a lock still held there!
    [ 5059.434815]  (slock-AF_INET){+.-...}, at: [<ffffffff8149bd21>] udp_queue_rcv_skb+0xd1/0x4b0
    [ 5059.435012] 3 locks held by named/863:
    [ 5059.435086]  #0:  (rcu_read_lock){.+.+..}, at: [<ffffffff8143054d>] __netif_receive_skb_core+0x11d/0x940
    [ 5059.435295]  #1:  (rcu_read_lock){.+.+..}, at: [<ffffffff81467a5e>] ip_local_deliver_finish+0x3e/0x410
    [ 5059.435500]  #2:  (slock-AF_INET){+.-...}, at: [<ffffffff8149bd21>] udp_queue_rcv_skb+0xd1/0x4b0
    [ 5059.435734]
    stack backtrace:
    [ 5059.435858] CPU: 0 PID: 863 Comm: named Not tainted 3.13.0-rc3+ #9 [loadavg: 0.21 0.06 0.06 1/115 1365]
    [ 5059.436052] Hardware name:                  /D510MO, BIOS MOPNV10J.86A.0175.2010.0308.0620 03/08/2010
    [ 5059.436223]  0000000000000002 ffff88007e203ad8 ffffffff8153a372 ffff8800677130e0
    [ 5059.436390]  ffff88007e203b10 ffffffff8108cafa ffff88005e960000 ffff88007b00cfc0
    [ 5059.436554]  ffffea00017a5800 ffffffff8141c490 0000000000000246 ffff88007e203b48
    [ 5059.436718] Call Trace:
    [ 5059.436769]  <IRQ>  [<ffffffff8153a372>] dump_stack+0x4d/0x66
    [ 5059.436904]  [<ffffffff8108cafa>] debug_check_no_locks_freed+0x15a/0x160
    [ 5059.437037]  [<ffffffff8141c490>] ? __sk_free+0x110/0x230
    [ 5059.437147]  [<ffffffff8112da2a>] kmem_cache_free+0x6a/0x150
    [ 5059.437260]  [<ffffffff8141c490>] __sk_free+0x110/0x230
    [ 5059.437364]  [<ffffffff8141c5c9>] sk_free+0x19/0x20
    [ 5059.437463]  [<ffffffff8141cb25>] sock_edemux+0x25/0x40
    [ 5059.437567]  [<ffffffff8141c181>] sock_queue_rcv_skb+0x81/0x280
    [ 5059.437685]  [<ffffffff8149bd21>] ? udp_queue_rcv_skb+0xd1/0x4b0
    [ 5059.437805]  [<ffffffff81499c82>] __udp_queue_rcv_skb+0x42/0x240
    [ 5059.437925]  [<ffffffff81541d25>] ? _raw_spin_lock+0x65/0x70
    [ 5059.438038]  [<ffffffff8149bebb>] udp_queue_rcv_skb+0x26b/0x4b0
    [ 5059.438155]  [<ffffffff8149c712>] __udp4_lib_rcv+0x152/0xb00
    [ 5059.438269]  [<ffffffff8149d7f5>] udp_rcv+0x15/0x20
    [ 5059.438367]  [<ffffffff81467b2f>] ip_local_deliver_finish+0x10f/0x410
    [ 5059.438492]  [<ffffffff81467a5e>] ? ip_local_deliver_finish+0x3e/0x410
    [ 5059.438621]  [<ffffffff81468653>] ip_local_deliver+0x43/0x80
    [ 5059.438733]  [<ffffffff81467f70>] ip_rcv_finish+0x140/0x5a0
    [ 5059.438843]  [<ffffffff81468926>] ip_rcv+0x296/0x3f0
    [ 5059.438945]  [<ffffffff81430b72>] __netif_receive_skb_core+0x742/0x940
    [ 5059.439074]  [<ffffffff8143054d>] ? __netif_receive_skb_core+0x11d/0x940
    [ 5059.442231]  [<ffffffff8108c81d>] ? trace_hardirqs_on+0xd/0x10
    [ 5059.442231]  [<ffffffff81430d83>] __netif_receive_skb+0x13/0x60
    [ 5059.442231]  [<ffffffff81431c1e>] netif_receive_skb+0x1e/0x1f0
    [ 5059.442231]  [<ffffffff814334e0>] napi_gro_receive+0x70/0xa0
    [ 5059.442231]  [<ffffffffa01de426>] rtl8169_poll+0x166/0x700 [r8169]
    [ 5059.442231]  [<ffffffff81432bc9>] net_rx_action+0x129/0x1e0
    [ 5059.442231]  [<ffffffff810478cd>] __do_softirq+0xed/0x240
    [ 5059.442231]  [<ffffffff81047e25>] irq_exit+0x125/0x140
    [ 5059.442231]  [<ffffffff81004241>] do_IRQ+0x51/0xc0
    [ 5059.442231]  [<ffffffff81542bef>] common_interrupt+0x6f/0x6f
    
    We need to keep a reference on the socket, by using skb_steal_sock()
    at the right place.
    
    Note that another patch is needed to fix a race in
    udp_sk_rx_dst_set(), as we hold no lock protecting the dst.
    
    Fixes: 421b3885bf6d ("udp: ipv4: Add udp early demux")
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Shawn Bohrer <sbohrer@rgmadvisors.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 781c2a5a5f75eacc04663aced0f0f1a648d4f308
Author: Jeff Layton <jlayton@redhat.com>
Date:   Mon Dec 2 15:26:19 2013 -0500

    nfsd: when reusing an existing repcache entry, unhash it first
    
    The DRC code will attempt to reuse an existing, expired cache entry in
    preference to allocating a new one. It'll then search the cache, and if
    it gets a hit it'll then free the cache entry that it was going to
    reuse.
    
    The cache code doesn't unhash the entry that it's going to reuse
    however, so it's possible for it end up designating an entry for reuse
    and then subsequently freeing the same entry after it finds it.  This
    leads it to a later use-after-free situation and usually some list
    corruption warnings or an oops.
    
    Fix this by simply unhashing the entry that we intend to reuse. That
    will mean that it's not findable via a search and should prevent this
    situation from occurring.
    
    Cc: stable@vger.kernel.org # v3.10+
    Reported-by: Christoph Hellwig <hch@infradead.org>
    Reported-by: g. artim <gartim@gmail.com>
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit ee021d42238daadc7ba49274bb0ba7dff219c6ab
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 10 15:26:55 2013 -0300

    perf symbols: Set freed members to NULL in dso destructor
    
    To help in debugging use after free bugs.
    
    Reported-by: Ingo Molnar <mingo@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lkml.kernel.org/n/tip-3ckwsob2g1q23s77nuhexrq7@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 66e56cd46b93ef407c60adcac62cf33b06119d50
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Fri Dec 6 11:36:15 2013 +0100

    packet: fix send path when running with proto == 0
    
    Commit e40526cb20b5 introduced a cached dev pointer, that gets
    hooked into register_prot_hook(), __unregister_prot_hook() to
    update the device used for the send path.
    
    We need to fix this up, as otherwise this will not work with
    sockets created with protocol = 0, plus with sll_protocol = 0
    passed via sockaddr_ll when doing the bind.
    
    So instead, assign the pointer directly. The compiler can inline
    these helper functions automagically.
    
    While at it, also assume the cached dev fast-path as likely(),
    and document this variant of socket creation as it seems it is
    not widely used (seems not even the author of TX_RING was aware
    of that in his reference example [1]). Tested with reproducer
    from e40526cb20b5.
    
     [1] http://wiki.ipxwarzone.com/index.php5?title=Linux_packet_mmap#Example
    
    Fixes: e40526cb20b5 ("packet: fix use after free race in send path when dev is released")
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Tested-by: Salam Noureddine <noureddine@aristanetworks.com>
    Tested-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acc240d41ea1ab9c488a79219fb313b5b46265ae
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Dec 5 15:42:34 2013 +0100

    drm/i915: Fix use-after-free in do_switch
    
    So apparently under ridiculous amounts of memory pressure we can get
    into trouble in do_switch when we try to move the old hw context
    backing storage object onto the active lists.
    
    With list debugging enabled that usually results in us chasing a
    poisoned pointer - which means we've hit upon a vma that has been
    removed from all lrus with list_del (and then deallocated, so it's a
    real use-after free).
    
    Ian Lister has done some great callchain chasing and noticed that we
    can reenter do_switch:
    
    i915_gem_do_execbuffer()
    
    i915_switch_context()
    
    do_switch()
       from = ring->last_context;
       i915_gem_object_pin()
    
          i915_gem_object_bind_to_gtt()
             ret = drm_mm_insert_node_in_range_generic();
             // If the above call fails then it will try i915_gem_evict_something()
             // If that fails it will call i915_gem_evict_everything() ...
             i915_gem_evict_everything()
                i915_gpu_idle()
                   i915_switch_context(DEFAULT_CONTEXT)
    
    Like with everything else where the shrinker or eviction code can
    invalidate pointers we need to reload relevant state.
    
    Note that there's no need to recheck whether a context switch is still
    required because:
    
    - Doing a switch to the same context is harmless (besides wasting a
      bit of energy).
    
    - This can only happen with the default context. But since that one's
      pinned we'll never call down into evict_everything under normal
      circumstances. Note that there's a little driver bringup fun
      involved namely that we could recourse into do_switch for the
      initial switch. Atm we're fine since we assign the context pointer
      only after the call to do_switch at driver load or resume time. And
      in the gpu reset case we skip the entire setup sequence (which might
      be a bug on its own, but definitely not this one here).
    
    Cc'ing stable since apparently ChromeOS guys are seeing this in the
    wild (and not just on artificial stress tests), see the reference.
    
    Note that in upstream code doesn't calle evict_everything directly
    from evict_something, that's an extension in this product branch. But
    we can still hit upon this bug (and apparently we do, see the linked
    backtraces). I've noticed this while trying to construct a testcase
    for this bug and utterly failed to provoke it. It looks like we need
    to driver the system squarly into the lowmem wall and provoke the
    shrinker to evict the context object by doing the last-ditch
    evict_everything call.
    
    Aside: There's currently no means to get a badly-fragmenting hw
    context object away from a bad spot in the upstream code. We should
    fix this by at least adding some code to evict_something to handle hw
    contexts.
    
    References: https://code.google.com/p/chromium/issues/detail?id=248191
    Reported-by: Ian Lister <ian.lister@intel.com>
    Cc: Ian Lister <ian.lister@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Ben Widawsky <benjamin.widawsky@intel.com>
    Cc: Stéphane Marchesin <marcheu@chromium.org>
    Cc: Bloomfield, Jon <jon.bloomfield@intel.com>
    Tested-by: Rafael Barbalho <rafael.barbalho@intel.com>
    Reviewed-by: Ian Lister <ian.lister@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4a58e7c38443154fce1b47910e1a9184f65c5d72
Author: Eliad Peller <eliad@wizery.com>
Date:   Thu Dec 5 18:30:17 2013 +0200

    cfg80211: don't "leak" uncompleted scans
    
    ___cfg80211_scan_done() can be called in some cases
    (e.g. on NETDEV_DOWN) before the low level driver
    notified scan completion (which is indicated by
    passing leak=true).
    
    Clearing rdev->scan_req in this case is buggy, as
    scan_done_wk might have already being queued/running
    (and can't be flushed as it takes rtnl()).
    
    If a new scan will be requested at this stage, the
    scan_done_wk will try freeing it (instead of the
    previous scan), and this will later result in
    a use after free.
    
    Simply remove the "leak" option, and replace it with
    a standard WARN_ON.
    
    An example backtrace after such crash:
    Unable to handle kernel paging request at virtual address fffffee5
    pgd = c0004000
    [fffffee5] *pgd=9fdf6821, *pte=00000000, *ppte=00000000
    Internal error: Oops: 17 [#1] SMP ARM
    PC is at cfg80211_scan_done+0x28/0xc4 [cfg80211]
    LR is at __ieee80211_scan_completed+0xe4/0x2dc [mac80211]
    [<bf0077b0>] (cfg80211_scan_done+0x28/0xc4 [cfg80211])
    [<bf0973d4>] (__ieee80211_scan_completed+0xe4/0x2dc [mac80211])
    [<bf0982cc>] (ieee80211_scan_work+0x94/0x4f0 [mac80211])
    [<c005fd10>] (process_one_work+0x1b0/0x4a8)
    [<c0060404>] (worker_thread+0x138/0x37c)
    [<c0066d70>] (kthread+0xa4/0xb0)
    
    Signed-off-by: Eliad Peller <eliad@wizery.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 0d11e6aca396e679c07b2dd6af5dc8b7f041fbbd
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Thu Dec 5 10:50:39 2013 -0700

    blk-mq: fix use-after-free of request
    
    If accounting is on, we will do the IO completion accounting after
    we have freed the request. Fix that by moving it sooner instead.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 0d1430a3f4b7cfd8779b78740a4182321f3ca7f3
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Dec 4 14:52:06 2013 +0000

    drm/i915: Hold mutex across i915_gem_release
    
    Inorder to serialise the closing of the file descriptor and its
    subsequent release of client requests with i915_gem_free_request(), we
    need to hold the struct_mutex in i915_gem_release(). Failing to do so
    has the potential to trigger an OOPS, later with a use-after-free.
    
    Testcase: igt/gem_close_race
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70874
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=71029
    Reported-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4e8d2139802ce4f41936a687f06c560b12115247
Author: Junho Ryu <jayr@google.com>
Date:   Tue Dec 3 18:10:28 2013 -0500

    ext4: fix use-after-free in ext4_mb_new_blocks
    
    ext4_mb_put_pa should hold pa->pa_lock before accessing pa->pa_count.
    While ext4_mb_use_preallocated checks pa->pa_deleted first and then
    increments pa->count later, ext4_mb_put_pa decrements pa->pa_count
    before holding pa->pa_lock and then sets pa->pa_deleted.
    
    * Free sequence
    ext4_mb_put_pa (1):             atomic_dec_and_test pa->pa_count
    ext4_mb_put_pa (2):             lock pa->pa_lock
    ext4_mb_put_pa (3):                     check pa->pa_deleted
    ext4_mb_put_pa (4):                     set pa->pa_deleted=1
    ext4_mb_put_pa (5):             unlock pa->pa_lock
    ext4_mb_put_pa (6):             remove pa from a list
    ext4_mb_pa_callback:            free pa
    
    * Use sequence
    ext4_mb_use_preallocated (1):   iterate over preallocation
    ext4_mb_use_preallocated (2):   lock pa->pa_lock
    ext4_mb_use_preallocated (3):           check pa->pa_deleted
    ext4_mb_use_preallocated (4):           increase pa->pa_count
    ext4_mb_use_preallocated (5):   unlock pa->pa_lock
    ext4_mb_release_context:        access pa
    
    * Use-after-free sequence
    [initial status]                <pa->pa_deleted = 0, pa_count = 1>
    ext4_mb_use_preallocated (1):   iterate over preallocation
    ext4_mb_use_preallocated (2):   lock pa->pa_lock
    ext4_mb_use_preallocated (3):           check pa->pa_deleted
    ext4_mb_put_pa (1):             atomic_dec_and_test pa->pa_count
    [pa_count decremented]          <pa->pa_deleted = 0, pa_count = 0>
    ext4_mb_use_preallocated (4):           increase pa->pa_count
    [pa_count incremented]          <pa->pa_deleted = 0, pa_count = 1>
    ext4_mb_use_preallocated (5):   unlock pa->pa_lock
    ext4_mb_put_pa (2):             lock pa->pa_lock
    ext4_mb_put_pa (3):                     check pa->pa_deleted
    ext4_mb_put_pa (4):                     set pa->pa_deleted=1
    [race condition!]               <pa->pa_deleted = 1, pa_count = 1>
    ext4_mb_put_pa (5):             unlock pa->pa_lock
    ext4_mb_put_pa (6):             remove pa from a list
    ext4_mb_pa_callback:            free pa
    ext4_mb_release_context:        access pa
    
    AddressSanitizer has detected use-after-free in ext4_mb_new_blocks
    Bug report: http://goo.gl/rG1On3
    
    Signed-off-by: Junho Ryu <jayr@google.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: stable@vger.kernel.org

commit b0d8d2292160bb63de1972361ebed100c64b5b37
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 2 09:44:51 2013 -0800

    vfs: fix subtle use-after-free of pipe_inode_info
    
    The pipe code was trying (and failing) to be very careful about freeing
    the pipe info only after the last access, with a pattern like:
    
            spin_lock(&inode->i_lock);
            if (!--pipe->files) {
                    inode->i_pipe = NULL;
                    kill = 1;
            }
            spin_unlock(&inode->i_lock);
            __pipe_unlock(pipe);
            if (kill)
                    free_pipe_info(pipe);
    
    where the final freeing is done last.
    
    HOWEVER.  The above is actually broken, because while the freeing is
    done at the end, if we have two racing processes releasing the pipe
    inode info, the one that *doesn't* free it will decrement the ->files
    count, and unlock the inode i_lock, but then still use the
    "pipe_inode_info" afterwards when it does the "__pipe_unlock(pipe)".
    
    This is *very* hard to trigger in practice, since the race window is
    very small, and adding debug options seems to just hide it by slowing
    things down.
    
    Simon originally reported this way back in July as an Oops in
    kmem_cache_allocate due to a single bit corruption (due to the final
    "spin_unlock(pipe->mutex.wait_lock)" incrementing a field in a different
    allocation that had re-used the free'd pipe-info), it's taken this long
    to figure out.
    
    Since the 'pipe->files' accesses aren't even protected by the pipe lock
    (we very much use the inode lock for that), the simple solution is to
    just drop the pipe lock early.  And since there were two users of this
    pattern, create a helper function for it.
    
    Introduced commit ba5bb147330a ("pipe: take allocation and freeing of
    pipe_inode_info out of ->i_mutex").
    
    Reported-by: Simon Kirby <sim@hostway.ca>
    Reported-by: Ian Applegate <ia@cloudflare.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: stable@kernel.org   # v3.10+
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7e4b918750b494b68e24222dea5f7d85e90db022
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Nov 1 07:34:40 2013 -0300

    [media] cx231xx: use after free on error path in probe
    
    We dereference "dev" after it has already been freed.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hans.verkuil@cisco.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

commit 993fc6ebaf4af6fdfde08cc8649c386e483a5908
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Nov 29 11:44:59 2013 +0000

    drm/i915: Pin pages whilst allocating for dma-buf vmap()
    
    During the vmap() routine for the dma-buf, we first grab the pages and
    then try to allocate a temporary array to pass to the vmap(). However,
    the shrinker can and will reap any object that is unbound if the
    allocation for the array first fails. This includes the object which we
    are attempting to vmap(). The solution is to mark the object's pages as
    pinned whilst we try the allocation to prevent the use-after-free
    introduced by the potential shrinkage.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit fbd1cd202739558210fd8f441b36601b29050bf4
Author: Paul Zimmerman <Paul.Zimmerman@synopsys.com>
Date:   Fri Nov 22 16:43:46 2013 -0800

    staging: dwc2: fix potential use after free
    
    dwc2_process_non_isoc_desc() can potentially free the qtd, so null
    out the qtd pointer if the call fails so we don't try to access it
    later
    
    Signed-off-by: Paul Zimmerman <paulz@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 202317a573b20d77a9abb7c16a3fd5b40cef3d9d
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Nov 22 21:54:37 2013 +0100

    ACPI / scan: Add acpi_device objects for all device nodes in the namespace
    
    Modify the ACPI namespace scanning code to register a struct
    acpi_device object for every namespace node representing a device,
    processor and so on, even if the device represented by that namespace
    node is reported to be not present and not functional by _STA.
    
    There are multiple reasons to do that.  First of all, it avoids
    quite a lot of overhead when struct acpi_device objects are
    deleted every time acpi_bus_trim() is run and then added again
    by a subsequent acpi_bus_scan() for the same scope, although the
    namespace objects they correspond to stay in memory all the time
    (which always is the case on a vast majority of systems).
    
    Second, it will allow user space to see that there are namespace
    nodes representing devices that are not present at the moment and may
    be added to the system.  It will also allow user space to evaluate
    _SUN for those nodes to check what physical slots the "missing"
    devices may be put into and it will make sense to add a sysfs
    attribute for _STA evaluation after this change (that will be
    useful for thermal management on some systems).
    
    Next, it will help to consolidate the ACPI hotplug handling among
    subsystems by making it possible to store hotplug-related information
    in struct acpi_device objects in a standard common way.
    
    Finally, it will help to avoid a race condition related to the
    deletion of ACPI namespace nodes.  Namely, namespace nodes may be
    deleted as a result of a table unload triggered by _EJ0 or _DCK.
    If a hotplug notification for one of those nodes is triggered
    right before the deletion and it executes a hotplug callback
    via acpi_hotplug_execute(), the ACPI handle passed to that
    callback may be stale when the callback actually runs.  One way
    to work around that is to always pass struct acpi_device pointers
    to hotplug callbacks after doing a get_device() on the objects in
    question which eliminates the use-after-free possibility (the ACPI
    handles in those objects are invalidated by acpi_scan_drop_device(),
    so they will trigger ACPICA errors on attempts to use them).
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Mika Westerberg <mika.westerberg@linux.intel.com>

commits)
      gso: handle new frag_list of frags GRO packets
      genetlink: fix genl_set_err() group ID
      genetlink: fix genlmsg_multicast() bug
      packet: fix use after free race in send path when dev is released
      xen-netback: stop the VIF thread before unbinding IRQs
      wimax: remove dead code
      net/phy: Add the autocross feature for forced links on VSC82x4
      net/phy: Add VSC8662 support
      net/phy: Add VSC8574 support
      net/phy: Add VSC8234 support
      net: add BUG_ON if kernel advertises msg_namelen > sizeof(struct sockaddr_storage)
      net: rework recvmsg handler msg_name and msg_namelen logic
      bridge: flush br's address entry in fdb when remove the
      net: core: Always propagate flag changes to interfaces
      ipv4: fix race in concurrent ip_route_input_slow()
      r8152: fix incorrect type in assignment
      r8152: support stopping/waking tx queue
      r8152: modify the tx flow
      r8152: fix tx/rx memory overflow
      netfilter: ebt_ip6: fix source and destination matching
      ...

commit a399b29dfbaaaf91162b2dc5a5875dd51bbfa2a1
Author: Greg Thelen <gthelen@google.com>
Date:   Thu Nov 21 14:32:00 2013 -0800

    ipc,shm: fix shm_file deletion races
    
    When IPC_RMID races with other shm operations there's potential for
    use-after-free of the shm object's associated file (shm_file).
    
    Here's the race before this patch:
    
      TASK 1                     TASK 2
      ------                     ------
      shm_rmid()
        ipc_lock_object()
                                 shmctl()
                                 shp = shm_obtain_object_check()
    
        shm_destroy()
          shum_unlock()
          fput(shp->shm_file)
                                 ipc_lock_object()
                                 shmem_lock(shp->shm_file)
                                 <OOPS>
    
    The oops is caused because shm_destroy() calls fput() after dropping the
    ipc_lock.  fput() clears the file's f_inode, f_path.dentry, and
    f_path.mnt, which causes various NULL pointer references in task 2.  I
    reliably see the oops in task 2 if with shmlock, shmu
    
    This patch fixes the races by:
    1) set shm_file=NULL in shm_destroy() while holding ipc_object_lock().
    2) modify at risk operations to check shm_file while holding
       ipc_object_lock().
    
    Example workloads, which each trigger oops...
    
    Workload 1:
      while true; do
        id=$(shmget 1 4096)
        shm_rmid $id &
        shmlock $id &
        wait
      done
    
      The oops stack shows accessing NULL f_inode due to racing fput:
        _raw_spin_lock
        shmem_lock
        SyS_shmctl
    
    Workload 2:
      while true; do
        id=$(shmget 1 4096)
        shmat $id 4096 &
        shm_rmid $id &
        wait
      done
    
      The oops stack is similar to workload 1 due to NULL f_inode:
        touch_atime
        shmem_mmap
        shm_mmap
        mmap_region
        do_mmap_pgoff
        do_shmat
        SyS_shmat
    
    Workload 3:
      while true; do
        id=$(shmget 1 4096)
        shmlock $id
        shm_rmid $id &
        shmunlock $id &
        wait
      done
    
      The oops stack shows second fput tripping on an NULL f_inode.  The
      first fput() completed via from shm_destroy(), but a racing thread did
      a get_file() and queued this fput():
        locks_remove_flock
        __fput
        ____fput
        task_work_run
        do_notify_resume
        int_signal
    
    Fixes: c2c737a0461e ("ipc,shm: shorten critical region for shmat")
    Fixes: 2caacaa82a51 ("ipc,shm: shorten critical region for shmctl")
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Cc: Davidlohr Bueso <davidlohr@hp.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>  # 3.10.17+ 3.11.6+
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e40526cb20b5ee53419452e1f03d97092f144418
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Thu Nov 21 16:50:58 2013 +0100

    packet: fix use after free race in send path when dev is released
    
    Salam reported a use after free bug in PF_PACKET that occurs when
    we're sending out frames on a socket bound device and suddenly the
    net device is being unregistered. It appears that commit 827d9780
    introduced a possible race condition between {t,}packet_snd() and
    packet_notifier(). In the case of a bound socket, packet_notifier()
    can drop the last reference to the net_device and {t,}packet_snd()
    might end up suddenly sending a packet over a freed net_device.
    
    To avoid reverting 827d9780 and thus introducing a performance
    regression compared to the current state of things, we decided to
    hold a cached RCU protected pointer to the net device and maintain
    it on write side via bind spin_lock protected register_prot_hook()
    and __unregister_prot_hook() calls.
    
    In {t,}packet_snd() path, we access this pointer under rcu_read_lock
    through packet_cached_dev_get() that holds reference to the device
    to prevent it from being freed through packet_notifier() while
    we're in send path. This is okay to do as dev_put()/dev_hold() are
    per-cpu counters, so this should not be a performance issue. Also,
    the code simplifies a bit as we don't need need_rls_dev anymore.
    
    Fixes: 827d978037d7 ("af-packet: Use existing netdev reference for bound sockets.")
    Reported-by: Salam Noureddine <noureddine@aristanetworks.com>
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Signed-off-by: Salam Noureddine <noureddine@aristanetworks.com>
    Cc: Ben Greear <greearb@candelatech.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      genetlink: make multicast groups const, prevent abuse
      genetlink: pass family to functions using groups
      genetlink: add and use genl_set_err()
      genetlink: remove family pointer from genl_multicast_group
      genetlink: remove genl_unregister_mc_group()
      hsr: don't call genl_unregister_mc_group()
      quota/genetlink: use proper genetlink multicast APIs
      drop_monitor/genetlink: use proper genetlink multicast APIs
      genetlink: only pass array to genl_register_family_with_ops()
      tcp: don't update snd_nxt, when a socket is switched from repair mode
      atm: idt77252: fix dev refcnt leak
      xfrm: Release dst if this dst is improper for vti tunnel
      netlink: fix documentation typo in netlink_set_err()
      be2net: Delete secondary unicast MAC addresses during be_close
      be2net: Fix unconditional enabling of Rx interface options
      net, virtio_net: replace the magic value
      ping: prevent NULL pointer dereference on write to msg_name
      bnx2x: Prevent "timeout waiting for state X"
      bnx2x: prevent CFC attention
      bnx2x: Prevent panic during DMAE timeout
      ...

commit a104b4d467d1c4a09727bac2816928aef3304d3a
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Nov 14 23:18:32 2013 +0100

    ACPI / bind: Use (put|get)_device() on ACPI device objects too
    
    When associating a "physical" device with an ACPI device object
    acpi_bind_one() only uses get_device() to increment the reference
    counter of the former, but there is no reason not to do that with
    the latter too.  Among other things, that may help to avoid
    use-after-free when an ACPI device object is freed without calling
    acpi_unbind_one() for all "physical" devices associated with it
    (that only can happen in buggy code, but then it's better if the
    kernel doesn't crash as a result of a bug).
    
    For this reason, modify acpi_bind_one() to apply get_device() to
    the ACPI device object too and update acpi_unbind_one() to drop
    that reference using put_device() as appropriate.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lan Tianyu <tianyu.lan@intel.com>

commit 1e9f3d6f1c403dd2b6270f654b4747147aa2306f
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Thu Nov 14 15:47:03 2013 +0100

    ip6tnl: fix use after free of fb_tnl_dev
    
    Bug has been introduced by commit bb8140947a24 ("ip6tnl: allow to use rtnl ops
    on fb tunnel").
    
    When ip6_tunnel.ko is unloaded, FB device is delete by rtnl_link_unregister()
    and then we try to use the pointer in ip6_tnl_destroy_tunnels().
    
    Let's add an handler for dellink, which will never remove the FB tunnel. With
    this patch it will no more be possible to remove it via 'ip link del ip6tnl0',
    but it's safer.
    
    The same fix was already proposed by Willem de Bruijn <willemb@google.com> for
    sit interfaces.
    
    CC: Willem de Bruijn <willemb@google.com>
    Reported-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9434266f2c645d4fcf62a03a8e36ad8075e37943
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Nov 13 21:27:38 2013 -0500

    sit: fix use after free of fb_tunnel_dev
    
    Bug: The fallback device is created in sit_init_net and assumed to be
    freed in sit_exit_net. First, it is dereferenced in that function, in
    sit_destroy_tunnels:
    
            struct net *net = dev_net(sitn->fb_tunnel_dev);
    
    Prior to this, rtnl_unlink_register has removed all devices that match
    rtnl_link_ops == sit_link_ops.
    
    Commit 205983c43700 added the line
    
    +       sitn->fb_tunnel_dev->rtnl_link_ops = &sit_link_ops;
    
    which cases the fallback device to match here and be freed before it
    is last dereferenced.
    
    Fix: This commit adds an explicit .delllink callback to sit_link_ops
    that skips deallocation at rtnl_unlink_register for the fallback
    device. This mechanism is comparable to the one in ip_tunnel.
    
    It also modifies sit_destroy_tunnels and its only caller sit_exit_net
    to avoid the offending dereference in the first place. That double
    lookup is more complicated than required.
    
    Test: The bug is only triggered when CONFIG_NET_NS is enabled. It
    causes a GPF only when CONFIG_DEBUG_SLAB is enabled. Verified that
    this bug exists at the mentioned commit, at davem-net HEAD and at
    3.11.y HEAD. Verified that it went away after applying this patch.
    
    Fixes: 205983c43700 ("sit: allow to use rtnl ops on fb tunnel")
    
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 724e2315db3d59a8201d4a87c7c7a873e60e1ce0
Author: Josef Bacik <jbacik@fusionio.com>
Date:   Mon Sep 30 11:36:38 2013 -0400

    Btrfs: fix two use-after-free bugs with transaction cleanup
    
    I was noticing the slab redzone stuff going off every once and a while during
    transaction aborts.  This was caused by two things
    
    1) We would walk the pending snapshots and set their error to -ECANCELED.  We
    don't need to do this, the snapshot stuff waits for a transaction commit and if
    there is a problem we just free our pending snapshot object and exit.  Doing
    this was causing us to touch the pending snapshot object after the thing had
    already been freed.
    
    2) We were freeing the transaction manually with wanton disregard for it's
    use_count reference counter.  To fix this I cleaned up the transaction freeing
    loop to either wait for the transaction commit to finish if it was in the middle
    of that (since it will be cleaned and freed up there) or to do the cleanup
    oursevles.
    
    I also moved the global "kill all things dirty everywhere" stuff outside of the
    transaction cleanup loop since that only needs to be done once.  With this patch
    I'm no longer seeing slab corruption because of use after frees.  Thanks,
    
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <chris.mason@fusionio.com>

commit c359c4157cf0d852387aff2f2d83fef039aadc2c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Nov 4 15:58:56 2013 +0300

    netfilter: nft_compat: use _safe version of list_for_each
    
    We need to use the _safe version of list_for_each_entry() here otherwise
    we have a use after free bug.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 1dfba3060fe7ee03ccec25a91d35085142dfc295
Author: Dan Williams <dcbw@redhat.com>
Date:   Mon Oct 14 17:51:55 2013 -0500

    libertas: move firmware lifetime handling to firmware.c
    
    Previously, each bus type was responsible for freeing the firmware
    structure, but some did that badly.  Move responsibility for freeing
    firmware into firmware.c so that it's done once and correctly, instead
    of happening in multiple places in bus-specific code.
    
    This fixes a use-after-free bug found by Dr. H. Nikolaus Schaller where
    the SDIO code forgot to NULL priv->helper_fw after freeing it.
    
    Signed-off-by: Dan Williams <dcbw@redhat.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit is only
      meant for 3.12.  The rest of the fixes are also available in my master
      branch on top of my last 3.11 based pull"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:
      btrfs: Fix crash due to not allocating integrity data for a bioset
      Btrfs: fix a use-after-free bug in btrfs_dev_replace_finishing
      Btrfs: eliminate races in worker stopping code
      Btrfs: fix crash of compressed writes
      Btrfs: fix transid verify errors when recovering log tree

commit 1357272fc7deeebb7b3c5d1a071562edc273cdaf
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Wed Oct 2 20:41:01 2013 +0300

    Btrfs: fix a use-after-free bug in btrfs_dev_replace_finishing
    
    free_device rcu callback, scheduled from btrfs_rm_dev_replace_srcdev,
    can be processed before btrfs_scratch_superblock is called, which would
    result in a use-after-free on btrfs_device contents.  Fix this by
    zeroing the superblock before the rcu callback is registered.
    
    Cc: Stefan Behrens <sbehrens@giantdisaster.de>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>

commit a6f951ddbdfb7bd87d31a44f61abe202ed6ce57f
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Tue Oct 1 14:24:58 2013 -0400

    NFSv4: Fix a use-after-free situation in _nfs4_proc_getlk()
    
    In nfs4_proc_getlk(), when some error causes a retry of the call to
    _nfs4_proc_getlk(), we can end up with Oopses of the form
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000134
     IP: [<ffffffff8165270e>] _raw_spin_lock+0xe/0x30
    <snip>
     Call Trace:
      [<ffffffff812f287d>] _atomic_dec_and_lock+0x4d/0x70
      [<ffffffffa053c4f2>] nfs4_put_lock_state+0x32/0xb0 [nfsv4]
      [<ffffffffa053c585>] nfs4_fl_release_lock+0x15/0x20 [nfsv4]
      [<ffffffffa0522c06>] _nfs4_proc_getlk.isra.40+0x146/0x170 [nfsv4]
      [<ffffffffa052ad99>] nfs4_proc_lock+0x399/0x5a0 [nfsv4]
    
    The problem is that we don't clear the request->fl_ops after the first
    try and so when we retry, nfs4_set_lock_state() exits early without
    setting the lock stateid.
    Regression introduced by commit 70cc6487a4e08b8698c0e2ec935fb48d10490162
    (locks: make ->lock release private data before returning in GETLK case)
    
    Reported-by: Weston Andros Adamson <dros@netapp.com>
    Reported-by: Jorge Mora <mora@netapp.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
    Cc: <stable@vger.kernel.org> #2.6.22+

commit 5e9ae2e5da0beb93f8557fc92a8f4fbc05ea448f
Author: Benjamin LaHaise <bcrl@kvack.org>
Date:   Thu Sep 26 20:34:51 2013 -0400

    aio: fix use-after-free in aio_migratepage
    
    Dmitry Vyukov managed to trigger a case where aio_migratepage can cause a
    use-after-free during teardown of the aio ring buffer's mapping.  This turns
    out to be caused by access to the ioctx's ring_pages via the migratepage
    operation which was not being protected by any locks during ioctx freeing.
    Use the address_space's private_lock to protect use and updates of the mapping's
    private_data, and make ioctx teardown unlink the ioctx from the address space.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Tested-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Benjamin LaHaise <bcrl@kvack.org>

commit f123db8e9d6c84c863cb3c44d17e61995dc984fb
Author: Benson Leung <bleung@chromium.org>
Date:   Tue Sep 24 20:05:11 2013 -0700

    driver core : Fix use after free of dev->parent in device_shutdown
    
    The put_device(dev) at the bottom of the loop of device_shutdown
    may result in the dev being cleaned up. In device_create_release,
    the dev is kfreed.
    
    However, device_shutdown attempts to use the dev pointer again after
    put_device by referring to dev->parent.
    
    Copy the parent pointer instead to avoid this condition.
    
    This bug was found on Chromium OS's chromeos-3.8, which is based on v3.8.11.
    See bug report : https://code.google.com/p/chromium/issues/detail?id=297842
    This can easily be reproduced when shutting down with
    hidraw devices that report battery condition.
    Two examples are the HP Bluetooth Mouse X4000b and the Apple Magic Mouse.
    For example, with the magic mouse :
    The dev in question is "hidraw0"
    dev->parent is "magicmouse"
    
    In the course of the shutdown for this device, the input event cleanup calls
    a put on hidraw0, decrementing its reference count.
    When we finally get to put_device(dev) in device_shutdown, kobject_cleanup
    is called and device_create_release does kfree(dev).
    dev->parent is no longer valid, and we may crash in
    put_device(dev->parent).
    
    This change should be applied on any kernel with this change :
    d1c6c030fcec6f860d9bb6c632a3ebe62e28440b
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Benson Leung <bleung@chromium.org>
    Reviewed-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53dad6d3a8e5ac1af8bacc6ac2134ae1a8b085f1
Author: Davidlohr Bueso <davidlohr@hp.com>
Date:   Mon Sep 23 17:04:45 2013 -0700

    ipc: fix race with LSMs
    
    Currently, IPC mechanisms do security and auditing related checks under
    RCU.  However, since security modules can free the security structure,
    for example, through selinux_[sem,msg_queue,shm]_free_security(), we can
    race if the structure is freed before other tasks are done with it,
    creating a use-after-free condition.  Manfred illustrates this nicely,
    for instance with shared mem and selinux:
    
     -> do_shmat calls rcu_read_lock()
     -> do_shmat calls shm_object_check().
         Checks that the object is still valid - but doesn't acquire any locks.
         Then it returns.
     -> do_shmat calls security_shm_shmat (e.g. selinux_shm_shmat)
     -> selinux_shm_shmat calls ipc_has_perm()
     -> ipc_has_perm accesses ipc_perms->security
    
    shm_close()
     -> shm_close acquires rw_mutex & shm_lock
     -> shm_close calls shm_destroy
     -> shm_destroy calls security_shm_free (e.g. selinux_shm_free_security)
     -> selinux_shm_free_security calls ipc_free_security(&shp->shm_perm)
     -> ipc_free_security calls kfree(ipc_perms->security)
    
    This patch delays the freeing of the security structures after all RCU
    readers are done.  Furthermore it aligns the security life cycle with
    that of the rest of IPC - freeing them based on the reference counter.
    For situations where we need not free security, the current behavior is
    kept.  Linus states:
    
     "... the old behavior was suspect for another reason too: having the
      security blob go away from under a user sounds like it could cause
      various other problems anyway, so I think the old code was at least
      _prone_ to bugs even if it didn't have catastrophic behavior."
    
    I have tested this patch with IPC testcases from LTP on both my
    quad-core laptop and on a 64 core NUMA server.  In both cases selinux is
    enabled, and tests pass for both voluntary and forced preemption models.
    While the mentioned races are theoretical (at least no one as reported
    them), I wanted to make sure that this new logic doesn't break anything
    we weren't aware of.
    
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Acked-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c13a84a830a208fb3443628773c8ca0557773cc7
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Wed Sep 11 10:17:27 2013 +0200

    netfilter: nf_conntrack: use RCU safe kfree for conntrack extensions
    
    Commit 68b80f11 (netfilter: nf_nat: fix RCU races) introduced
    RCU protection for freeing extension data when reallocation
    moves them to a new location. We need the same protection when
    freeing them in nf_ct_ext_free() in order to prevent a
    use-after-free by other threads referencing a NAT extension data
    via bysource list.
    
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

commit 662ca437e714caaab855b12415d6ffd815985bc0
Author: Jason Wang <jasowang@redhat.com>
Date:   Wed Sep 11 18:09:48 2013 +0800

    tuntap: correctly handle error in tun_set_iff()
    
    Commit c8d68e6be1c3b242f1c598595830890b65cea64a
    (tuntap: multiqueue support) only call free_netdev() on error in
    tun_set_iff(). This causes several issues:
    
    - memory of tun security were leaked
    - use after free since the flow gc timer was not deleted and the tfile
      were not detached
    
    This patch solves the above issues.
    
    Reported-by: Wannes Rombouts <wannes.rombouts@epitech.eu>
    Cc: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c9a27f5da9609fca46cb2b183724531b48f71ad
Author: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>
Date:   Tue Sep 10 18:16:36 2013 +0900

    sched/fair: Fix small race where child->se.parent,cfs_rq might point to invalid ones
    
    There is a small race between copy_process() and cgroup_attach_task()
    where child->se.parent,cfs_rq points to invalid (old) ones.
    
            parent doing fork()      | someone moving the parent to another cgroup
      -------------------------------+---------------------------------------------
        copy_process()
          + dup_task_struct()
            -> parent->se is copied to child->se.
               se.parent,cfs_rq of them point to old ones.
    
                                         cgroup_attach_task()
                                           + cgroup_task_migrate()
                                             -> parent->cgroup is updated.
                                           + cpu_cgroup_attach()
                                             + sched_move_task()
                                               + task_move_group_fair()
                                                 +- set_task_rq()
                                                    -> se.parent,cfs_rq of parent
                                                       are updated.
    
          + cgroup_fork()
            -> parent->cgroup is copied to child->cgroup. (*1)
          + sched_fork()
            + task_fork_fair()
              -> se.parent,cfs_rq of child are accessed
                 while they point to old ones. (*2)
    
    In the worst case, this bug can lead to "use-after-free" and cause a panic,
    because it's new cgroup's refcount that is incremented at (*1),
    so the old cgroup(and related data) can be freed before (*2).
    
    In fact, a panic caused by this bug was originally caught in RHEL6.4.
    
        BUG: unable to handle kernel NULL pointer dereference at (null)
        IP: [<ffffffff81051e3e>] sched_slice+0x6e/0xa0
        [...]
        Call Trace:
         [<ffffffff81051f25>] place_entity+0x75/0xa0
         [<ffffffff81056a3a>] task_fork_fair+0xaa/0x160
         [<ffffffff81063c0b>] sched_fork+0x6b/0x140
         [<ffffffff8106c3c2>] copy_process+0x5b2/0x1450
         [<ffffffff81063b49>] ? wake_up_new_task+0xd9/0x130
         [<ffffffff8106d2f4>] do_fork+0x94/0x460
         [<ffffffff81072a9e>] ? sys_wait4+0xae/0x100
         [<ffffffff81009598>] sys_clone+0x28/0x30
         [<ffffffff8100b393>] stub_clone+0x13/0x20
         [<ffffffff8100b072>] ? system_call_fastpath+0x16/0x1b
    
    Signed-off-by: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/039601ceae06$733d3130$59b79390$@mxp.nes.nec.co.jp
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 8a10da264663f97ad8b5c85343274ad903b32196
Author: Alexey Khoroshilov <khoroshilov@ispras.ru>
Date:   Wed Sep 4 00:37:17 2013 +0400

    rtl8187: fix use after free on failure path in rtl8187_init_urbs()
    
    In case of __dev_alloc_skb() failure rtl8187_init_urbs()
    calls usb_free_urb(entry) where 'entry' can points to urb
    allocated at the previous iteration. That means refcnt will be
    decremented incorrectly and the urb can be used after memory
    deallocation.
    
    The patch fixes the issue and implements error handling of init_urbs
    in rtl8187_start().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 3a1c756590633c0e86df606e5c618c190926a0df
Author: Daniel Borkmann <dborkman@redhat.com>
Date:   Tue Sep 3 19:29:12 2013 +0200

    net: ipv6: tcp: fix potential use after free in tcp_v6_do_rcv
    
    In tcp_v6_do_rcv() code, when processing pkt options, we soley work
    on our skb clone opt_skb that we've created earlier before entering
    tcp_rcv_established() on our way. However, only in condition ...
    
      if (np->rxopt.bits.rxtclass)
        np->rcv_tclass = ipv6_get_dsfield(ipv6_hdr(skb));
    
    ... we work on skb itself. As we extract every other information out
    of opt_skb in ipv6_pktoptions path, this seems wrong, since skb can
    already be released by tcp_rcv_established() earlier on. When we try
    to access it in ipv6_hdr(), we will dereference freed skb.
    
    [ Bug added by commit 4c507d2897bd9b ("net: implement IP_RECVTOS for
      IP_PKTOPTIONS") ]
    
    Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      spi/qspi: fix missing unlock on error in ti_qspi_start_transfer_one()
      spi: quad: fix the name of DT property
      spi: core: Fix spi_register_master error handling
      spi: efm32: Fix build error
      spi: altera: Use DIV_ROUND_UP to calculate hw->bytes_per_word
      spi: rspi: Add spi_master_get() call to prevent use after free
      spi: quad: Make DT properties optional
      spi: quad: Fix missing return
      spi: Use dev_get_drvdata at appropriate places
      spi: use dev_get_platdata()
      spi: nuc900: Fix mode_bits setting
      spi: simplify devm_request_mem_region/devm_ioremap
      spi: altera: Simplify altera_spi_txrx implementation for noirq case
      spi: spi-rspi: fix inconsistent spin_lock_irqsave
      spi/qspi: Add compatible string for am4372.
      spi/qspi: Fix device table entry
      spi/sirf: fix the misunderstanding about len of spi_transfer
      spi/qspi: Add dual/quad spi read support
      spi: sirf: fix error return code in spi_sirfsoc_probe()
      spi: bcm2835: Add spi_master_get() call to prevent use after free
      ...

commit 9d3405dbbbd8418a095301d495da65bc3bc5f806
Author: Axel Lin <axel.lin@ingics.com>
Date:   Sat Aug 31 19:42:56 2013 +0800

    spi: rspi: Add spi_master_get() call to prevent use after free
    
    In rspi_remove(), current code dereferences rspi after spi_unregister_master(),
    thus add an extra spi_master_get() call is necessary to prevent use after free.
    
    Current code already has an extra spi_master_put() call in rspi_remove(), so
    this patch just adds a spi_master_get() call rather than a spi_master_get() with
    spi_master_put() calls.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 2d9db75005effd6d4e0c8be4f74922e4f413fbe5
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Fri Aug 30 09:17:33 2013 -0400

    NFS: Fix up two use-after-free issues with the new tracing code
    
    We don't want to pass the context argument to trace_nfs_atomic_open_exit()
    after it has been released.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit df4989954abc5ae160865bec79b0f099086decce
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Aug 23 11:16:15 2013 +0300

    usb: gadget: gadgetfs: potential use after free in unbind()
    
    ffs_data_put() can sometimes free "ffs" so I have moved the call down
    a line below the dereference.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 1826e9b1bd9139850954acb9c2e0fb230ba94e0d
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Aug 23 11:14:49 2013 +0300

    usb: gadget: gadgetfs: use after free in dev_release()
    
    The call to put_dev() releases "dev".  Hopefully, we don't need to set
    the state to STATE_DEV_DISABLED anyway so I have removed those lines.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit b0eb57cb97e7837ebb746404c2c58c6f536f23fa
Author: Andy King <acking@vmware.com>
Date:   Fri Aug 23 09:33:49 2013 -0700

    VMXNET3: Add support for virtual IOMMU
    
    This patch adds support for virtual IOMMU to the vmxnet3 module.  We
    switch to DMA consistent mappings for anything we pass to the device.
    There were a few places where we already did this, but using pci_blah();
    these have been fixed to use dma_blah(), along with all new occurrences
    where we've replaced kmalloc() and friends.
    
    Also fix two small bugs:
    1) use after free of rq->buf_info in vmxnet3_rq_destroy()
    2) a cpu_to_le32() that should have been a cpu_to_le64()
    
    Acked-by: George Zhang <georgezhang@vmware.com>
    Acked-by: Aditya Sarwade <asarwade@vmware.com>
    Signed-off-by: Andy King <acking@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8637b407cf1740c52a01b9fc0cf506f31e225151
Author: Ben Widawsky <benjamin.widawsky@intel.com>
Date:   Fri Aug 16 13:29:33 2013 -0700

    drm/i915/vma: Correct use after free in eviction
    
    The vma will [possibly] be destroyed during unbind in eviction.
    Immediately after this, we try to delete the list entry.
    
    Chris and Ville did the debug on this before I woke up, I just get to
    take credit for the fix :p
    
    For future reference the Oops that Mika reported:
    
    [  403.472448] BUG: unable to handle kernel paging request at 6b6b6b6b
    [  403.472473] IP: [<c12c1500>] __list_del_entry+0x20/0xe0
    [  403.472514] *pdpt = 000000002e89c001 *pde = 0000000000000000
    [  403.472556] Oops: 0000 [#1] SMP
    [  403.472582] Modules linked in: mxm_wmi snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_intel snd_hda_codec snd_hwdep snd_pcm snd_seq_midi snd_rawmidi psmouse snd_seq_midi_event snd_seq serio_raw snd_timer snd_seq_device snd soundcore snd_page_alloc wmi bnep rfcomm bluetooth mac_hid parport_pc ppdev lp parport usbhid dm_crypt firewire_ohci firewire_core crc_itu_t i915 drm_kms_helper e1000e ptp drm i2c_algo_bit pps_core xhci_hcd video
    [  403.472895] CPU: 2 PID: 1940 Comm: Xorg Not tainted 3.11.0-rc2+ #827
    [  403.472938] Hardware name:                  /DZ77BH-55K, BIOS BHZ7710H.86A.0070.2012.0416.2117 04/16/2012
    [  403.473002] task: ec866c00 ti: ee6a2000 task.ti: ee6a2000
    [  403.473039] EIP: 0060:[<c12c1500>] EFLAGS: 00013202 CPU: 2
    [  403.473078] EIP is at __list_del_entry+0x20/0xe0
    [  403.473109] EAX: f016d9bc EBX: f016d9bc ECX: 6b6b6b6b EDX: 6b6b6b6b
    [  403.473151] ESI: 00000000 EDI: ee6a3c90 EBP: ee6a3c60 ESP: ee6a3c48
    [  403.473193]  DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
    [  403.473230] CR0: 80050033 CR2: 6b6b6b6b CR3: 2ec43000 CR4: 001407f0
    [  403.473271] Stack:
    [  403.473285]  f63b2ff0 f61f98c0 f61f8000 f016d9bc 00000000 f016d9bc ee6a3cac f8519a4a
    [  403.473347]  00000000 00000000 10000000 f61f8000 0100a000 10000000 00000001 008ca000
    [  403.473410]  f64ee840 f61f98c0 f016d9bc f016dcec ee6a3c98 ee6a3c98 f61f98c0 dcc58f00
    [  403.473472] Call Trace:
    [  403.473509]  [<f8519a4a>] i915_gem_evict_something+0x17a/0x2d0 [i915]
    [  403.473567]  [<f8516ed1>] i915_gem_object_pin+0x271/0x660 [i915]
    [  403.473622]  [<f851c740>] ? i915_ggtt_clear_range+0x20/0x20 [i915]
    [  403.473676]  [<f8517afa>] i915_gem_object_pin_to_display_plane+0xda/0x190 [i915]
    [  403.473742]  [<f852d9fa>] intel_pin_and_fence_fb_obj+0xba/0x140 [i915]
    [  403.473800]  [<f852db40>] intel_gen7_queue_flip+0x30/0x1c0 [i915]
    [  403.473856]  [<f85337b0>] intel_crtc_page_flip+0x1a0/0x320 [i915]
    [  403.473911]  [<f847b549>] ? drm_framebuffer_reference+0x39/0x80 [drm]
    [  403.473965]  [<f847f9fb>] drm_mode_page_flip_ioctl+0x28b/0x320 [drm]
    [  403.474018]  [<f846fec8>] drm_ioctl+0x4b8/0x560 [drm]
    [  403.474064]  [<f847f770>] ? drm_mode_gamma_get_ioctl+0xd0/0xd0 [drm]
    [  403.474113]  [<c1140f8a>] ? do_sync_read+0x6a/0xa0
    [  403.474154]  [<f846fa10>] ? drm_copy_field+0x80/0x80 [drm]
    [  403.474193]  [<c115134c>] do_vfs_ioctl+0x7c/0x5b0
    [  403.474228]  [<c1141d2f>] ? vfs_read+0xef/0x160
    [  403.474263]  [<c108dcbb>] ? ktime_get_ts+0x4b/0x120
    [  403.474298]  [<c1151917>] SyS_ioctl+0x97/0xa0
    [  403.474330]  [<c1590bc1>] sysenter_do_call+0x12/0x22
    [  403.474364] Code: 55 f4 8b 45 f8 e9 75 ff ff ff 90 55 89 e5 53 83 ec 14 8b 08 8b 50 04 81 f9 00 01 10 00 74 24 81 fa 00 02 20 00 0f 84 8e 00 00 00 <8b> 1a 39 d8 75 62 8b 59 04 39 d8 75 35 89 51 04 89 0a 83 c4 14
    [  403.474566] EIP: [<c12c1500>] __list_del_entry+0x20/0xe0 SS:ESP 0068:ee6a3c48
    [  403.476513] CR2: 000000006b6b6b6b
    
    v2: Missed the drm_object_unreference use after free (Ville)
    Daniel Vetter <daniel@ffwll.ch> writes:
    
    Reported-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    [danvet: Add the Oops from Mika to the commit message.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7bc003100b61cdfe0515fe907010fe822353d924
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Aug 22 23:19:07 2013 +0800

    spi: bcm2835: Add spi_master_get() call to prevent use after free
    
    The call to spi_unregister_master results in device memory being freed, it must
    no longer be accessed afterwards. Thus call spi_master_get() to get an extra
    reference to the device and call spi_master_put() only after the last access to
    device data.
    
    Note, current code has an extra spi_master_put() call in bcm2835_spi_remove().
    Thus this patch just adds an spi_master_get() to balance the reference count.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 396dc223dd36edd218650d042a07c5e61f022c5b
Author: Gianluca Anzolin <gianluca@sottospazio.it>
Date:   Mon Jul 29 17:08:08 2013 +0200

    Bluetooth: Take proper tty_struct references
    
    In net/bluetooth/rfcomm/tty.c the struct tty_struct is used without
    taking references. This may lead to a use-after-free of the rfcomm tty.
    
    Fix this by taking references properly, using the tty_port_* helpers
    when possible.
    
    The raw assignments of dev->port.tty in rfcomm_tty_open/close are
    addressed in the later commit 'rfcomm: Implement .activate, .shutdown
    and .carrier_raised methods'.
    
    Signed-off-by: Gianluca Anzolin <gianluca@sottospazio.it>
    Reviewed-by: Peter Hurley <peter@hurleysoftware.com>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>

commit 2ad01f53dc34ef3180e555d40b331f95f269a0fa
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon Aug 12 20:50:11 2013 +1000

    xfs: use reference counts to free clean buffer items
    
    When a transaction is cancelled and the buffer log item is clean in
    the transaction, the buffer log item is unconditionally freed. If
    the log item is in the AIL, however, this leads to a use after free
    condition as the item still has other users.
    
    In this case, xfs_buf_item_relse() should only be called on clean
    buffer items if the reference count has dropped to zero. This
    ensures only the last user frees the item.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Mark Tinguely <tinguely@sgi.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>

commit 91aa11fae1cf8c2fd67be0609692ea9741cdcc43
Author: Jan Kara <jack@suse.cz>
Date:   Mon Aug 12 09:53:28 2013 -0400

    jbd2: Fix use after free after error in jbd2_journal_dirty_metadata()
    
    When jbd2_journal_dirty_metadata() returns error,
    __ext4_handle_dirty_metadata() stops the handle. However callers of this
    function do not count with that fact and still happily used now freed
    handle. This use after free can result in various issues but very likely
    we oops soon.
    
    The motivation of adding __ext4_journal_stop() into
    __ext4_handle_dirty_metadata() in commit 9ea7a0df seems to be only to
    improve error reporting. So replace __ext4_journal_stop() with
    ext4_journal_abort_handle() which was there before that commit and add
    WARN_ON_ONCE() to dump stack to provide useful information.
    
    Reported-by: Sage Weil <sage@inktank.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: stable@vger.kernel.org      # 3.2+

commit 3b868a4073cdedf395f26d843874414e0e0e9cfd
Author: Amit Shah <amit.shah@redhat.com>
Date:   Wed Aug 7 15:54:17 2013 +0930

    virtio: console: prevent use-after-free of port name in port unplug
    
    Remove the debugfs path before freeing port->name, to prevent a possible
    use-after-free.
    
    Reported-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit f93f3c4ee48727713c3349b659adf8048fd4524b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 31 13:53:34 2013 -0700

    rapidio: fix use after free in rio_unregister_scan()
    
    We're freeing the list iterator so we can't move to the next entry.
    Since there is only one matching mport_id, we can just break after
    finding it.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Ryan Mallon <rmallon@gmail.com>
    Acked-by: Alexandre Bounine <alexandre.bounine@idt.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 11940c8728b8e4bd67d0afacefbb9391ff8f4201
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 22 11:02:01 2013 +0300

    mlx5_core: Fix use after free in mlx5_cmd_comp_handler()
    
    We can't dereference "ent" after passing it to free_cmd().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Eli Cohen <eli@mellanox.com>
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commits)
      mlx5: fix error return code in mlx5_alloc_uuars()
      mvneta: Try to fix mvneta when compiled as module
      mvneta: Fix hang when loading the mvneta driver
      atl1c: Fix misuse of netdev_alloc_skb in refilling rx ring
      genetlink: fix usage of NLM_F_EXCL or NLM_F_REPLACE
      af_key: more info leaks in pfkey messages
      net/fec: Don't let ndo_start_xmit return NETDEV_TX_BUSY without link
      net_sched: Fix stack info leak in cbq_dump_wrr().
      igb: fix vlan filtering in promisc mode when not in VT mode
      ixgbe: Fix Tx Hang issue with lldpad on 82598EB
      genetlink: release cb_lock before requesting additional module
      net: fec: workaround stop tx during errata ERR006358
      qlcnic: Fix diagnostic interrupt test for 83xx adapters.
      qlcnic: Fix setting Guest VLAN
      qlcnic: Fix operation type and command type.
      qlcnic: Fix initialization of work function.
      Revert "atl1c: Fix misuse of netdev_alloc_skb in refilling rx ring"
      atl1c: Fix misuse of netdev_alloc_skb in refilling rx ring
      net/tg3: Fix warning from pci_disable_device()
      net/tg3: Fix kernel crash
      ...

commit 0eb25bb027a100f5a9df8991f2f628e7d851bc1e
Author: NeilBrown <neilb@suse.de>
Date:   Wed Jul 24 15:37:42 2013 +1000

    md/raid10: remove use-after-free bug.
    
    We always need to be careful when calling generic_make_request, as it
    can start a chain of events which might free something that we are
    using.
    
    Here is one place I wasn't careful enough.  If the wbio2 is not in
    use, then it might get freed at the first generic_make_request call.
    So perform all necessary tests first.
    
    This bug was introduced in 3.3-rc3 (24afd80d99) and can cause an
    oops, so fix is suitable for any -stable since then.
    
    Cc: stable@vger.kernel.org (3.3+)
    Signed-off-by: NeilBrown <neilb@suse.de>

commit 64d2c22a4cdd3ce752ca700964a6120049d78aed
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 22 11:02:01 2013 +0300

    mlx5: use after free in mlx5_cmd_comp_handler()
    
    We can't dereference "ent" after passing it to free_cmd().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2a6fed1ceaecf6054627f0ddbd4becf43c997fc
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 22 11:00:53 2013 +0300

    staging: gdm72xx: potential use after free in send_qos_list()
    
    Sometimes free_qos_entry() sometimes frees its argument.  I have moved
    the dereference of "entry" ahead on line to avoid a use after free.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8145c56103099565be2e18aeac2a32f79361f3f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jul 22 09:57:49 2013 +0300

    staging: frontier: use after free in disconnect()
    
    usb_alphatrack_delete() frees "dev" so we can't use it on that path.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2080205729edf2a59296f17081c9aa25a7ed6368
Author: Dmitry Eremin <dmitry.eremin@intel.com>
Date:   Tue Jul 23 00:06:31 2013 +0800

    staging/lustre/ptlrpc: race in pinger (use-after-free situation)
    
    The race is result of use-after-free situation:
    
    ~ ptlrpc_stop_pinger()          ~ ptlrpc_pinger_main()
    ---------------------------------------------------------------
    thread_set_flags(SVC_STOPPING)
    cfs_waitq_signal(pinger_thread) ...
    ...                             thread_set_flags(SVC_STOPPED)
    l_wait_event(thread_is_stopped)
    OBD_FREE_PTR(pinger_thread)
    ...                             cfs_waitq_signal(pinger_thread)
    ---------------------------------------------------------------
    
    The memory used by pinger_thread might have been freed and
    reallocated to something else, when ptlrpc_pinger_main()
    used it in cvs_waitq_signal().
    
    Signed-off-by: Li Wei <wei.g.li@intel.com>
    Signed-off-by: Dmitry Eremin <dmitry.eremin@intel.com>
    Intel-bug-id: https://jira.hpdd.intel.com/browse/LU-3032
    Lustre-change: http://review.whamcloud.com/6040
    Reviewed-by: Faccini Bruno <bruno.faccini@intel.com>
    Reviewed-by: Mike Pershin <mike.pershin@intel.com>
    Reviewed-by: Andreas Dilger <andreas.dilger@intel.com>
    Signed-off-by: Peng Tao <tao.peng@emc.com>
    Signed-off-by: Andreas Dilger <andreas.dilger@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6286ef9b56bfc5d4f3f06ef5488e41da4480dc85
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jul 19 08:46:27 2013 +0300

    drm/i915: use after free on error path
    
    i915_gem_vma_destroy() frees its argument so we have to move the
    drm_mm_remove_node() call up a few lines.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 822dbba33458cd6ad0e715f3f4a57ebc99d54d1b
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jul 10 21:31:04 2013 -0400

    ext4: fix warning in ext4_evict_inode()
    
    The following race can lead to ext4_evict_inode() seeing i_ioend_count
    > 0 and thus triggering a sanity check warning:
    
            CPU1                                    CPU2
    ext4_end_bio()                          ext4_evict_inode()
      ext4_finish_bio()
        end_page_writeback();
                                              truncate_inode_pages()
                                                evict page
                                            WARN_ON(i_ioend_count > 0);
      ext4_put_io_end_defer()
        ext4_release_io_end()
          dec i_ioend_count
    
    This is possible use-after-free bug since we decrement i_ioend_count in
    possibly released inode.
    
    Since i_ioend_count is used only for sanity checks one possible solution
    would be to just remove it but for now I'd like to keep those sanity
    checks to help debugging the new ext4 writeback code.
    
    This patch changes ext4_end_bio() to call ext4_put_io_end_defer() before
    ext4_finish_bio() in the shortcut case when unwritten extent conversion
    isn't needed.  In that case we don't need the io_end so we are safe to
    drop it early.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commits)
      drivers/net: caif: fix wrong rtnl_is_locked() usage
      drivers/net: enic: release rtnl_lock on error-path
      vhost-net: fix use-after-free in vhost_net_flush
      net: mv643xx_eth: do not use port number as platform device id
      net: sctp: confirm route during forward progress
      virtio_net: fix race in RX VQ processing
      virtio: support unlocked queue poll
      net/cadence/macb: fix bug/typo in extracting gem_irq_read_clear bit
      Documentation: Fix references to defunct linux-net@vger.kernel.org
      net/fs: change busy poll time accounting
      net: rename low latency sockets functions to busy poll
      bridge: fix some kernel warning in multicast timer
      sfc: Fix memory leak when discarding scattered packets
      sit: fix tunnel update via netlink
      dt:net:stmmac: Add dt specific phy reset callback support.
      dt:net:stmmac: Add support to dwmac version 3.610 and 3.710
      dt:net:stmmac: Allocate platform data only if its NULL.
      net:stmmac: fix memleak in the open method
      ipv6: rt6_check_neigh should successfully verify neigh if no NUD information are available
      net: ipv6: fix wrong ping_v6_sendmsg return value
      ...

commit dd7633ecd553a5e304d349aa6f8eb8a0417098c5
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Sun Jul 7 14:26:53 2013 +0300

    vhost-net: fix use-after-free in vhost_net_flush
    
    vhost_net_ubuf_put_and_wait has a confusing name:
    it will actually also free it's argument.
    Thus since commit 1280c27f8e29acf4af2da914e80ec27c3dbd5c01
        "vhost-net: flush outstanding DMAs on memory change"
    vhost_net_flush tries to use the argument after passing it
    to vhost_net_ubuf_put_and_wait, this results
    in use after free.
    To fix, don't free the argument in vhost_net_ubuf_put_and_wait,
    add an new API for callers that want to free ubufs.
    
    Acked-by: Asias He <asias@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fa460c2d37870e0a6f94c70e8b76d05ca11b6db0
Author: Michal Hocko <mhocko@suse.cz>
Date:   Mon Jul 8 16:00:27 2013 -0700

    Revert "memcg: avoid dangling reference count in creation failure"
    
    This reverts commit e4715f01be697a.
    
    mem_cgroup_put is hierarchy aware so mem_cgroup_put(memcg) already drops
    an additional reference from all parents so the additional
    mem_cgrroup_put(parent) potentially causes use-after-free.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Signed-off-by: Li Zefan <lizefan@huawei.com>
    Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Glauber Costa <glommer@openvz.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: <stable@vger.kernel.org>    [3.9+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c38e39c378f46f00ce922dd40a91043a9925c28d
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Tue Jun 25 17:29:46 2013 +0300

    vhost-net: fix use-after-free in vhost_net_flush
    
    vhost_net_ubuf_put_and_wait has a confusing name:
    it will actually also free it's argument.
    Thus since commit 1280c27f8e29acf4af2da914e80ec27c3dbd5c01
        "vhost-net: flush outstanding DMAs on memory change"
    vhost_net_flush tries to use the argument after passing it
    to vhost_net_ubuf_put_and_wait, this results
    in use after free.
    To fix, don't free the argument in vhost_net_ubuf_put_and_wait,
    add an new API for callers that want to free ubufs.
    
    Acked-by: Asias He <asias@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

commit 08234e3adc7a299c9213bcfa0b5e97c359129670
Author: Jörn Engel <joern@logfs.org>
Date:   Wed Jun 12 16:27:54 2013 -0400

    qla_target: remove qlt_check_fcport_exist
    
    Comment from original 2012 patch:
      In all our testing this function has never returned true.  However, the
      dropping of hardware_lock necessary to call this function seems to cause
      a use-after-free we manage to hit rather frequently.  Given this
      cost-benefit ratio, I'm willing to remove some 100 lines of code.
    
    And since the same problem exists around shutdown_sess and put_sess,
    this patch changes them from taking the hardware_lock to requiring the
    hardware_lock to be taken.  In most cases the caller already had the
    lock and had to drop it for the called method to reacquire it.  At best
    that hurts performance and in rare instances it causes races with fatal
    consequences.
    
    We dropped the original 2012 patch when upgrading our kernel and it took
    us nearly half a year to discover we still need it.
    
    (nab: Fix qla_tgt_sess reference in tcm_qla2xxx_put_sess)
    
    Signed-off-by: Joern Engel <joern@logfs.org>
    Cc: Giridhar Malavali <giridhar.malavali@qlogic.com>
    Cc: Chad Dupuis <chad.dupuis@qlogic.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 875979368eb4cfecff9f0e97625b90cc6009269d
Author: Ming Lei <ming.lei@canonical.com>
Date:   Sat Jun 15 16:36:38 2013 +0800

    firmware loader: fix use-after-free by double abort
    
    fw_priv->buf is accessed in both request_firmware_load() and
    writing to sysfs file of 'loading' context, but not protected
    by 'fw_lock' entirely. The patch makes sure that access on
    'fw_priv->buf' is protected by the lock.
    
    So fixes the double abort problem reported by nirinA raseliarison:
    
            http://lkml.org/lkml/2013/6/14/188
    
    Reported-and-tested-by: nirinA raseliarison <nirina.raseliarison@gmail.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable <stable@vger.kernel.org> # 3.9
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89dc991f0f5272c307c746fdd57d0bff382b1ba2
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Wed Jun 12 14:05:09 2013 -0700

    mm: memcontrol: fix lockless reclaim hierarchy iterator
    
    The lockless reclaim hierarchy iterator currently has a misplaced
    barrier that can lead to use-after-free crashes.
    
    The reclaim hierarchy iterator consist of a sequence count and a
    position pointer that are read and written locklessly, with memory
    barriers enforcing ordering.
    
    The write side sets the position pointer first, then updates the
    sequence count to "publish" the new position.  Likewise, the read side
    must read the sequence count first, then the position.  If the sequence
    count is up to date, it's guaranteed that the position is up to date as
    well:
    
      writer:                         reader:
      iter->position = position       if iter->sequence == expected:
      smp_wmb()                           smp_rmb()
      iter->sequence = sequence           position = iter->position
    
    However, the read side barrier is currently misplaced, which can lead to
    dereferencing stale position pointers that no longer point to valid
    memory.  Fix this.
    
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Reported-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Tejun Heo <tj@kernel.org>
    Acked-by: Michal Hocko <mhocko@suse.cz>
    Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Glauber Costa <glommer@parallels.com>
    Cc: <stable@kernel.org>         [3.10+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 2932505abe7c56477315a3d93ffb3c27c5182e9d
Author: Liu Bo <bo.li.liu@oracle.com>
Date:   Sun May 26 13:50:27 2013 +0000

    Btrfs: fix use-after-free bug during umount
    
    Commit be283b2e674a09457d4563729015adb637ce7cc1
    (    Btrfs: use helper to cleanup tree roots) introduced the following bug,
    
     BUG: unable to handle kernel NULL pointer dereference at 0000000000000034
     IP: [<ffffffffa039368c>] extent_buffer_get+0x4/0xa [btrfs]
    [...]
     Pid: 2463, comm: btrfs-cache-1 Tainted: G           O 3.9.0+ #4 innotek GmbH VirtualBox/VirtualBox
     RIP: 0010:[<ffffffffa039368c>]  [<ffffffffa039368c>] extent_buffer_get+0x4/0xa [btrfs]
     Process btrfs-cache-1 (pid: 2463, threadinfo ffff880112d60000, task ffff880117679730)
    [...]
     Call Trace:
      [<ffffffffa0398a99>] btrfs_search_slot+0x104/0x64d [btrfs]
      [<ffffffffa039aea4>] btrfs_next_old_leaf+0xa7/0x334 [btrfs]
      [<ffffffffa039b141>] btrfs_next_leaf+0x10/0x12 [btrfs]
      [<ffffffffa039ea13>] caching_thread+0x1a3/0x2e0 [btrfs]
      [<ffffffffa03d8811>] worker_loop+0x14b/0x48e [btrfs]
      [<ffffffffa03d86c6>] ? btrfs_queue_worker+0x25c/0x25c [btrfs]
      [<ffffffff81068d3d>] kthread+0x8d/0x95
      [<ffffffff81068cb0>] ? kthread_freezable_should_stop+0x43/0x43
      [<ffffffff8151e5ac>] ret_from_fork+0x7c/0xb0
      [<ffffffff81068cb0>] ? kthread_freezable_should_stop+0x43/0x43
    RIP  [<ffffffffa039368c>] extent_buffer_get+0x4/0xa [btrfs]
    
    We've free'ed commit_root before actually getting to free block groups where
    caching thread needs valid extent_root->commit_root.
    
    Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <chris.mason@fusionio.com>

commit 7b5ff90ed081787ec0765ceb4fe5ccf5677493a6
Author: Josef Bacik <jbacik@fusionio.com>
Date:   Thu Jun 6 10:29:40 2013 -0400

    Btrfs: don't delete fs_roots until after we cleanup the transaction
    
    We get a use after free if we had a transaction to cleanup since there could be
    delayed inodes which refer to their respective fs_root.  Thanks
    
    Reported-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>
    Signed-off-by: Chris Mason <chris.mason@fusionio.com>

commit b7ea85a4fed37835eec78a7be3039c8dc22b8178
Author: Huacai Chen <chenhc@lemote.com>
Date:   Tue May 21 06:23:43 2013 +0000

    drm: fix a use-after-free when GPU acceleration disabled
    
    When GPU acceleration is disabled, drm_vblank_cleanup() will free the
    vblank-related data, such as vblank_refcount, vblank_inmodeset, etc.
    But we found that drm_vblank_post_modeset() may be called after the
    cleanup, which use vblank_refcount and vblank_inmodeset. And this will
    cause a kernel panic.
    
    Fix this by return immediately if dev->num_crtcs is zero. This is the
    same thing that drm_vblank_pre_modeset() does.
    
    Call trace of a drm_vblank_post_modeset() after drm_vblank_cleanup():
    [   62.628906] [<ffffffff804868d0>] drm_vblank_post_modeset+0x34/0xb4
    [   62.628906] [<ffffffff804c7008>] atombios_crtc_dpms+0xb4/0x174
    [   62.628906] [<ffffffff804c70e0>] atombios_crtc_commit+0x18/0x38
    [   62.628906] [<ffffffff8047f038>] drm_crtc_helper_set_mode+0x304/0x3cc
    [   62.628906] [<ffffffff8047f92c>] drm_crtc_helper_set_config+0x6d8/0x988
    [   62.628906] [<ffffffff8047dd40>] drm_fb_helper_set_par+0x94/0x104
    [   62.628906] [<ffffffff80439d14>] fbcon_init+0x424/0x57c
    [   62.628906] [<ffffffff8046a638>] visual_init+0xb8/0x118
    [   62.628906] [<ffffffff8046b9f8>] take_over_console+0x238/0x384
    [   62.628906] [<ffffffff80436df8>] fbcon_takeover+0x7c/0xdc
    [   62.628906] [<ffffffff8024fa20>] notifier_call_chain+0x44/0x94
    [   62.628906] [<ffffffff8024fcbc>] __blocking_notifier_call_chain+0x48/0x68
    [   62.628906] [<ffffffff8042d990>] register_framebuffer+0x228/0x260
    [   62.628906] [<ffffffff8047e010>] drm_fb_helper_single_fb_probe+0x260/0x314
    [   62.628906] [<ffffffff8047e2c4>] drm_fb_helper_initial_config+0x200/0x234
    [   62.628906] [<ffffffff804e5560>] radeon_fbdev_init+0xd4/0xf4
    [   62.628906] [<ffffffff804e0e08>] radeon_modeset_init+0x9bc/0xa18
    [   62.628906] [<ffffffff804bfc14>] radeon_driver_load_kms+0xdc/0x12c
    [   62.628906] [<ffffffff8048b548>] drm_get_pci_dev+0x148/0x238
    [   62.628906] [<ffffffff80423564>] local_pci_probe+0x5c/0xd0
    [   62.628906] [<ffffffff80241ac4>] work_for_cpu_fn+0x1c/0x30
    [   62.628906] [<ffffffff802427c8>] process_one_work+0x274/0x3bc
    [   62.628906] [<ffffffff80242934>] process_scheduled_works+0x24/0x44
    [   62.628906] [<ffffffff8024515c>] worker_thread+0x31c/0x3f4
    [   62.628906] [<ffffffff802497a8>] kthread+0x88/0x90
    [   62.628906] [<ffffffff80206794>] kernel_thread_helper+0x10/0x18
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Binbin Zhou <zhoubb@lemote.com>
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Michel Dänzer <michel.daenzer@amd.com>
    Acked-by: Paul Menzel <paulepanter@users.sourceforge.net>
    Signed-off-by: Dave Airlie <airlied@gmail.com>

commit 41261b6a832ea0e788627f6a8707854423f9ff49
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Fri May 24 18:07:49 2013 +0200

    sched/autogroup: Fix race with task_groups list
    
    In autogroup_create(), a tg is allocated and added to the task_groups
    list. If CONFIG_RT_GROUP_SCHED is set, this tg is then modified while on
    the list, without locking. This can race with someone walking the list,
    like __enable_runtime() during CPU unplug, and result in a use-after-free
    bug.
    
    To fix this, move sched_online_group(), which adds the tg to the list,
    to the end of the autogroup_create() function after the modification.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1369411669-46971-2-git-send-email-gerald.schaefer@de.ibm.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 509e708a8929c5b75a16c985c03db5329e09cad4
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon May 20 09:51:10 2013 +1000

    xfs: Don't reference the EFI after it is freed
    
    Checking the EFI for whether it is being released from recovery
    after we've already released the known active reference is a mistake
    worthy of a brown paper bag. Fix the (now) obvious use after free
    that it can cause.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>
    
    (cherry picked from commit 52c24ad39ff02d7bd73c92eb0c926fb44984a41d)

commit abd9a0c36028771a8f397f38bf79bfcf404f957f
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri May 17 16:37:59 2013 +0200

    s390/dma: do not call debug_dma after free
    
    In dma_free_coherent call debug_dma_free_coherent before deallocating
    the memory to avoid a possible use after free.
    
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 52c24ad39ff02d7bd73c92eb0c926fb44984a41d
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon May 20 09:51:10 2013 +1000

    xfs: Don't reference the EFI after it is freed
    
    Checking the EFI for whether it is being released from recovery
    after we've already released the known active reference is a mistake
    worthy of a brown paper bag. Fix the (now) obvious use after free
    that it can cause.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>

commit 3abef3b3585bbc67d56fdc9c67761a900fb4b69d
Author: Alex Elder <elder@inktank.com>
Date:   Mon May 13 20:35:37 2013 -0500

    rbd: fix cleanup in rbd_add()
    
    Bjorn Helgaas pointed out that a recent commit introduced a
    use-after-free condition in an error path for rbd_add().
    He correctly stated:
    
        I think b536f69a3a5 "rbd: set up devices only for mapped images"
        introduced a use-after-free error in rbd_add():
            ...
        If rbd_dev_device_setup() returns an error, we call
        rbd_dev_image_release(), which ultimately kfrees rbd_dev.
        Then we call rbd_dev_destroy(), which references fields in
        the already-freed rbd_dev struct before kfreeing it again.
    
    The simple fix is to return the error code after the call to
    rbd_dev_image_release().
    
    Closer examination revealed that there's no need to clean up
    rbd_opts in that function, so fix that too.
    
    Update some other comments that have also become out of date.
    
    Reported-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Alex Elder <elder@inktank.com>
    Reviewed-by: Josh Durgin <josh.durgin@inktank.com>

commit 2d864e41710f1d2ba406fb62018ab0487152e6f2
Author: Anatol Pomozov <anatol.pomozov@gmail.com>
Date:   Tue May 7 15:37:48 2013 -0700

    kref: minor cleanup
    
     - make warning smp-safe
     - result of atomic _unless_zero functions should be checked by caller
       to avoid use-after-free error
     - trivial whitespace fix.
    
    Link: https://lkml.org/lkml/2013/4/12/391
    
    Tested: compile x86, boot machine and run xfstests
    Signed-off-by: Anatol Pomozov <anatol.pomozov@gmail.com>
    [ Removed line-break, changed to use WARN_ON_ONCE()  - Linus ]
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      cpuset: fix compile warning when CONFIG_SMP=n
      cpuset: fix cpu hotplug vs rebuild_sched_domains() race
      cpuset: use rebuild_sched_domains() in cpuset_hotplug_workfn()
      cgroup: restore the call to eventfd->poll()
      cgroup: fix use-after-free when umounting cgroupfs
      cgroup: fix broken file xattrs
      devcg: remove parent_cgroup.
      memcg: force use_hierarchy if sane_behavior
      cgroup: remove cgrp->top_cgroup
      cgroup: introduce sane_behavior mount option
      move cgroupfs_root to include/linux/cgroup.h
      cgroup: convert cgroupfs_root flag bits to masks and add CGRP_ prefix
      cgroup: make cgroup_path() not print double slashes
      Revert "cgroup: remove bind() method from cgroup_subsys."
      perf: make perf_event cgroup hierarchical
      cgroup: implement cgroup_is_descendant()
      cgroup: make sure parent won't be destroyed before its children
      cgroup: remove bind() method from cgroup_subsys.
      devcg: remove broken_hierarchy tag
      cgroup: remove cgroup_lock_is_held()
      ...

commit fd0ccaf2bd04e54d2a6979fbfdcad856694e3877
Author: Li Zefan <lizefan@huawei.com>
Date:   Mon Apr 29 15:08:43 2013 -0700

    memcg: avoid accessing memcg after releasing reference
    
    This might cause a use-after-free bug.
    
    Signed-off-by: Li Zefan <lizefan@huawei.com>
    Cc: Glauber Costa <glommer@parallels.com>
    Acked-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cc20e01cd607282d48f8ea538aba10fa850a4312
Author: Li Zefan <lizefan@huawei.com>
Date:   Fri Apr 26 11:58:02 2013 -0700

    cgroup: fix use-after-free when umounting cgroupfs
    
    Try:
      # mount -t cgroup xxx /cgroup
      # mkdir /cgroup/sub && rmdir /cgroup/sub && umount /cgroup
    
    And you might see this:
    
    ida_remove called for id=1 which is not allocated.
    
    It's because cgroup_kill_sb() is called to destroy root->cgroup_ida
    and free cgrp->root before ida_simple_removed() is called. What's
    worse is we're accessing cgrp->root while it has been freed.
    
    Signed-off-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>

commit d837a2ae40fd37bcbb5a42126e3d89c68c90fccc
Author: Bing Zhao <bzhao@marvell.com>
Date:   Fri Apr 12 10:34:17 2013 -0700

    mwifiex: fix use-after-free in beacon_ie processing
    
    beacon_ie buffer is allocated in mwifiex_fill_new_bss_desc()
    and the buffer pointer is saved in bss_desc->beacon_buf.
    beacon_ie is freed before the function returns. However,
    bss_desc->beacon_buf is still being accessed afterwards.
    
    Fix it by freeing beacon_ie (bss_desc->beacon_buf) in
    caller's scope.
    
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Reviewed-by: Paul Stewart <pstew@chromium.org>
    Signed-off-by: Bing Zhao <bzhao@marvell.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d875cf08391a811703f8adf39db598cac9ece6a1
Author: Andrei Epure <epure.andrei@gmail.com>
Date:   Wed Apr 17 15:58:24 2013 -0700

    drivers/video/mmp/core.c: fix use-after-free bug
    
    Found with coccinelle.
    
    Signed-off-by: Andrei Epure <epure.andrei@gmail.com>
    Cc: Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8d12356f33f819ec0d064e233f7ca8e59eaa38ef
Author: David Herrmann <dh.herrmann@gmail.com>
Date:   Sat Apr 6 20:28:39 2013 +0200

    Bluetooth: introduce hci_conn ref-counting
    
    We currently do not allow using hci_conn from outside of HCI-core.
    However, several other users could make great use of it. This includes
    HIDP, rfcomm and all other sub-protocols that rely on an active
    connection.
    
    Hence, we now introduce hci_conn ref-counting. We currently never call
    get_device(). put_device() is exclusively used in hci_conn_del_sysfs().
    Hence, we currently never have a greater device-refcnt than 1.
    Therefore, it is safe to move the put_device() call from
    hci_conn_del_sysfs() to hci_conn_del() (it's the only caller). In fact,
    this even fixes a "use-after-free" bug as we access hci_conn after calling
    hci_conn_del_sysfs() in hci_conn_del().
    
    From now on we can add references to hci_conn objects in other layers
    (like l2cap_sock, HIDP, rfcomm, ...) and grab a reference via
    hci_conn_get(). This does _not_ guarantee, that the connection is still
    alive. But, this isn't what we want. We can simply lock the hci_conn
    device and use "device_is_registered(hci_conn->dev)" to test that.
    However, this is hardly necessary as outside users should never rely on
    the HCI connection to be alive, anyway. Instead, they should solely rely
    on the device-object to be available.
    But if sub-devices want the hci_conn object as sysfs parent, they need to
    be notified when the connection drops. This will be introduced in later
    patches with l2cap_users.
    
    Signed-off-by: David Herrmann <dh.herrmann@gmail.com>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>

commit d14a489a411937fb9420fe2b05168ee9e1e06c9c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Apr 12 11:07:47 2013 -0700

    act_csum: fix possible use after free
    
    tcf_csum_skb_nextlayer() / pskb_may_pull() can change skb->head, so we
    must be careful not keeping pointers to previous headers.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Grégoire Baron <baronchon@n7mm.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 99ba6a4610c8413c9166e600b1797f0a8f1c4498
Author: Felix Fietkau <nbd@openwrt.org>
Date:   Mon Apr 8 00:04:13 2013 +0200

    ath9k: implement buffer holding handling for EDMA FIFO
    
    Inside one FIFO slot queue, EDMA chipsets have the same link pointer
    re-read race condition as older chipsets, so the same buffer holding
    logic needs to be used in order to avoid use-after-free bugs.
    Unlike on older chips, it can be skipped for the end of the queue.
    
    Signed-off-by: Felix Fietkau <nbd@openwrt.org>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit bb2b0051d7b0772ea9d0b4be900c2d965093f5d7
Author: Ming Lei <ming.lei@canonical.com>
Date:   Thu Apr 4 22:22:37 2013 +0800

    sysfs: check if one entry has been removed before freeing
    
    It might be a kernel disaster if one sysfs entry is freed but
    still referenced by sysfs tree.
    
    Recently Dave and Sasha reported one use-after-free problem on
    sysfs entry, and the problem has been troubleshooted with help
    of debug message added in this patch.
    
    Given sysfs_get_dirent/sysfs_put are exported APIs, even inside
    sysfs they are called in many contexts(kobject/attribe add/delete,
    inode init/drop, dentry lookup/release, readdir, ...), it is healthful
    to check the removed flag before freeing one entry and dump message
    if it is freeing without being removed first.
    
    Cc: Dave Jones <davej@redhat.com>
    Cc: Sasha Levin <levinsasha928@gmail.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      netfilter: don't reset nf_trace in nf_reset()
      net: ipv4: notify when address lifetime changes
      ixgbe: fix registration order of driver and DCA nofitication
      af_unix: If we don't care about credentials coallesce all messages
      Revert "af_unix: dont send SCM_CREDENTIAL when dest socket is NULL"
      bonding: remove sysfs before removing devices
      atl1e: limit gso segment size to prevent generation of wrong ip length fields
      net: count hw_addr syncs so that unsync works properly.
      r8169: fix auto speed down issue
      netfilter: ip6t_NPT: Fix translation for non-multiple of 32 prefix lengths
      mwifiex: limit channel number not to overflow memory
      NFC: microread: Fix build failure due to a new MEI bus API
      iwlwifi: dvm: fix the passive-no-RX workaround
      netfilter: nf_conntrack: fix error return code
      NFC: llcp: Keep the connected socket parent pointer alive
      mac80211: fix idle handling sequence
      netfilter: nfnetlink_acct: return -EINVAL if object name is empty
      netfilter: nfnetlink_queue: fix error return code in nfnetlink_queue_init()
      netfilter: reset nf_trace in nf_reset
      mac80211: fix remain-on-channel cancel crash
      ...

commit f7db5e7660b122142410dcf36ba903c73d473250
Author: Ming Lei <ming.lei@canonical.com>
Date:   Tue Apr 2 10:12:26 2013 +0800

    sysfs: fix use after free in case of concurrent read/write and readdir
    
    The inode->i_mutex isn't hold when updating filp->f_pos
    in read()/write(), so the filp->f_pos might be read as
    0 or 1 in readdir() when there is concurrent read()/write()
    on this same file, then may cause use after free in readdir().
    
    The bug can be reproduced with Li Zefan's test code on the
    link:
    
            https://patchwork.kernel.org/patch/2160771/
    
    This patch fixes the use after free under this situation.
    
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Li Zefan <lizefan@huawei.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e4b7239a62a0c58664bf0cf73aea951b7e046fc
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Fri Mar 8 09:30:43 2013 -0500

    nfsd4: fix use-after-free of 4.1 client on connection loss
    
    Once we drop the lock here there's nothing keeping the client around:
    the only lock still held is the xpt_lock on this socket, but this socket
    no longer has any connection with the client so there's no way for other
    code to know we're still using the client.
    
    The solution is simple: all nfsd4_probe_callback does is set a few
    variables and queue some work, so there's no reason we can't just keep
    it under the lock.
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit c1681bf8a7b1b98edee8b862a42c19c4e53205fd
Author: Anatol Pomozov <anatol.pomozov@gmail.com>
Date:   Mon Apr 1 09:47:56 2013 -0700

    loop: prevent bdev freeing while device in use
    
    struct block_device lifecycle is defined by its inode (see fs/block_dev.c) -
    block_device allocated first time we access /dev/loopXX and deallocated on
    bdev_destroy_inode. When we create the device "losetup /dev/loopXX afile"
    we want that block_device stay alive until we destroy the loop device
    with "losetup -d".
    
    But because we do not hold /dev/loopXX inode its counter goes 0, and
    inode/bdev can be destroyed at any moment. Usually it happens at memory
    pressure or when user drops inode cache (like in the test below). When later in
    loop_clr_fd() we want to use bdev we have use-after-free error with following
    stack:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000280
      bd_set_size+0x10/0xa0
      loop_clr_fd+0x1f8/0x420 [loop]
      lo_ioctl+0x200/0x7e0 [loop]
      lo_compat_ioctl+0x47/0xe0 [loop]
      compat_blkdev_ioctl+0x341/0x1290
      do_filp_open+0x42/0xa0
      compat_sys_ioctl+0xc1/0xf20
      do_sys_open+0x16e/0x1d0
      sysenter_dispatch+0x7/0x1a
    
    To prevent use-after-free we need to grab the device in loop_set_fd()
    and put it later in loop_clr_fd().
    
    The issue is reprodusible on current Linus head and v3.3. Here is the test:
    
      dd if=/dev/zero of=loop.file bs=1M count=1
      while [ true ]; do
        losetup /dev/loop0 loop.file
        echo 2 > /proc/sys/vm/drop_caches
        losetup -d /dev/loop0
      done
    
    [ Doing bdgrab/bput in loop_set_fd/loop_clr_fd is safe, because every
      time we call loop_set_fd() we check that loop_device->lo_state is
      Lo_unbound and set it to Lo_bound If somebody will try to set_fd again
      it will get EBUSY.  And if we try to loop_clr_fd() on unbound loop
      device we'll get ENXIO.
    
      loop_set_fd/loop_clr_fd (and any other loop ioctl) is called under
      loop_device->lo_ctl_mutex. ]
    
    Signed-off-by: Anatol Pomozov <anatol.pomozov@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4c16bd327c74d6678858706211a0c6e4e53eb3e6
Author: Tejun Heo <tj@kernel.org>
Date:   Mon Apr 1 11:23:36 2013 -0700

    workqueue: implement NUMA affinity for unbound workqueues
    
    Currently, an unbound workqueue has single current, or first, pwq
    (pool_workqueue) to which all new work items are queued.  This often
    isn't optimal on NUMA machines as workers may jump around across node
    boundaries and work items get assigned to workers without any regard
    to NUMA affinity.
    
    This patch implements NUMA affinity for unbound workqueues.  Instead
    of mapping all entries of numa_pwq_tbl[] to the same pwq,
    apply_workqueue_attrs() now creates a separate pwq covering the
    intersecting CPUs for each NUMA node which has online CPUs in
    @attrs->cpumask.  Nodes which don't have intersecting possible CPUs
    are mapped to pwqs covering whole @attrs->cpumask.
    
    As CPUs come up and go down, the pool association is changed
    accordingly.  Changing pool association may involve allocating new
    pools which may fail.  To avoid failing CPU_DOWN, each workqueue
    always keeps a default pwq which covers whole attrs->cpumask which is
    used as fallback if pool creation fails during a CPU hotplug
    operation.
    
    This ensures that all work items issued on a NUMA node is executed on
    the same node as long as the workqueue allows execution on the CPUs of
    the node.
    
    As this maps a workqueue to multiple pwqs and max_active is per-pwq,
    this change the behavior of max_active.  The limit is now per NUMA
    node instead of global.  While this is an actual change, max_active is
    already per-cpu for per-cpu workqueues and primarily used as safety
    mechanism rather than for active concurrency control.  Concurrency is
    usually limited from workqueue users by the number of concurrently
    active work items and this change shouldn't matter much.
    
    v2: Fixed pwq freeing in apply_workqueue_attrs() error path.  Spotted
        by Lai.
    
    v3: The previous version incorrectly made a workqueue spanning
        multiple nodes spread work items over all online CPUs when some of
        its nodes don't have any desired cpus.  Reimplemented so that NUMA
        affinity is properly updated as CPUs go up and down.  This problem
        was spotted by Lai Jiangshan.
    
    v4: destroy_workqueue() was putting wq->dfl_pwq and then clearing it;
        however, wq may be freed at any time after dfl_pwq is put making
        the clearing use-after-free.  Clear wq->dfl_pwq before putting it.
    
    v5: apply_workqueue_attrs() was leaking @tmp_attrs, @new_attrs and
        @pwq_tbl after success.  Fixed.
    
        Retry loop in wq_update_unbound_numa_attrs() isn't necessary as
        application of new attrs is excluded via CPU hotplug.  Removed.
    
        Documentation on CPU affinity guarantee on CPU_DOWN added.
    
        All changes are suggested by Lai Jiangshan.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Lai Jiangshan <laijs@cn.fujitsu.com>

commits)
      ipv4: Fix ip-header identification for gso packets.
      bonding: remove already created master sysfs link on failure
      af_unix: dont send SCM_CREDENTIAL when dest socket is NULL
      pch_gbe: fix ip_summed checksum reporting on rx
      igb: fix PHC stopping on max freq
      igb: make sensor info static
      igb: SR-IOV init reordering
      igb: Fix null pointer dereference
      igb: fix i350 anti spoofing config
      ixgbevf: don't release the soft entries
      ipv6: fix bad free of addrconf_init_net
      unix: fix a race condition in unix_release()
      tcp: undo spurious timeout after SACK reneging
      bnx2x: fix assignment of signed expression to unsigned variable
      bridge: fix crash when set mac address of br interface
      8021q: fix a potential use-after-free
      net: remove a WARN_ON() in net_enable_timestamp()
      tcp: preserve ACK clocking in TSO
      net: fix *_DIAG_MAX constants
      net/mlx4_core: Disallow releasing VF QPs which have steering rules
      ...

commit eba0e3c3a0ba7b96f01cbe997680f6a4401a0bfc
Author: Ming Lei <tom.leiming@gmail.com>
Date:   Tue Mar 26 10:49:55 2013 +0800

    USB: serial: fix hang when opening port
    
    Johan's 'fix use-after-free in TIOCMIWAIT' patchset[1] introduces
    one bug which can cause kernel hang when opening port.
    
    This patch initialized the 'port->delta_msr_wait' waitqueue head
    to fix the bug which is introduced in 3.9-rc4.
    
    [1], http://marc.info/?l=linux-usb&m=136368139627876&w=2
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Acked-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a7df340ed1bac190c124c1601bfc10cde9fb4fb
Author: Cong Wang <amwang@redhat.com>
Date:   Fri Mar 22 19:14:07 2013 +0000

    8021q: fix a potential use-after-free
    
    vlan_vid_del() could possibly free ->vlan_info after a RCU grace
    period, however, we may still refer to the freed memory area
    by 'grp' pointer. Found by code inspection.
    
    This patch moves vlan_vid_del() as behind as possible.
    
    Cc: Patrick McHardy <kaber@trash.net>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Cong Wang <amwang@redhat.com>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      USB: ti_usb_3410_5052: fix use-after-free in TIOCMIWAIT
      USB: ssu100: fix use-after-free in TIOCMIWAIT
      USB: spcp8x5: fix use-after-free in TIOCMIWAIT
      USB: quatech2: fix use-after-free in TIOCMIWAIT
      USB: pl2303: fix use-after-free in TIOCMIWAIT
      USB: oti6858: fix use-after-free in TIOCMIWAIT
      USB: mos7840: fix use-after-free in TIOCMIWAIT
      USB: mos7840: fix broken TIOCMIWAIT
      USB: mct_u232: fix use-after-free in TIOCMIWAIT
      USB: io_ti: fix use-after-free in TIOCMIWAIT
      USB: io_edgeport: fix use-after-free in TIOCMIWAIT
      USB: ftdi_sio: fix use-after-free in TIOCMIWAIT
      USB: f81232: fix use-after-free in TIOCMIWAIT
      USB: cypress_m8: fix use-after-free in TIOCMIWAIT
      USB: ch341: fix use-after-free in TIOCMIWAIT
      USB: ark3116: fix use-after-free in TIOCMIWAIT
      USB: serial: add modem-status-change wait queue
      USB: serial: fix interface refcounting
      USB: io_ti: fix get_icount for two port adapters
      USB: garmin_gps: fix memory leak on disconnect
      ...

commits)
      ext4: fix data=journal fast mount/umount hang
      ext4: fix ext4_evict_inode() racing against workqueue processing code
      ext4: fix memory leakage in mext_check_coverage
      ext4: use s_extent_max_zeroout_kb value as number of kb
      ext4: use atomic64_t for the per-flexbg free_clusters count
      jbd2: fix use after free in jbd2_journal_dirty_metadata()
      ext4: reserve metadata block for every delayed write
      ext4: update reserved space after the 'correction'
      ext4: do not use yield()
      ext4: remove unused variable in ext4_free_blocks()
      ext4: fix WARN_ON from ext4_releasepage()
      ext4: fix the wrong number of the allocated blocks in ext4_split_extent()
      ext4: update extent status tree after an extent is zeroed out
      ext4: fix wrong m_len value after unwritten extent conversion
      ext4: add self-testing infrastructure to do a sanity check
      ext4: avoid a potential overflow in ext4_es_can_be_merged()
      ext4: invalidate extent status tree during extent migration
      ext4: remove unnecessary wait for extent conversion in ext4_fallocate()
      ext4: add warning to ext4_convert_unwritten_extents_endio
      ext4: disable merging of uninitialized extents
      ...

commit fc98ab873aa3dbe783ce56a2ffdbbe7c7609521a
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:26 2013 +0100

    USB: ti_usb_3410_5052: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43a66b4c417ad15f6d2f632ce67ad195bdf999e8
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:25 2013 +0100

    USB: ssu100: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbcea7615d8d7d58f6ff49d2c5568113f70effe9
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:24 2013 +0100

    USB: spcp8x5: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69f87f40d2b98e8b4ab82a121fd2bd584690b887
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:23 2013 +0100

    USB: quatech2: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40509ca982c00c4b70fc00be887509feca0bff15
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:22 2013 +0100

    USB: pl2303: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8edfdab37157d2683e51b8be5d3d5697f66a9f7b
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:21 2013 +0100

    USB: oti6858: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a14430db686b8e459e1cf070a6ecf391515c9ab9
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:20 2013 +0100

    USB: mos7840: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf1d24443677a0758cfa88ca40f24858b89261c0
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:18 2013 +0100

    USB: mct_u232: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b2459690584f239650a365f3411ba2ec1c6d1e0
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:17 2013 +0100

    USB: io_ti: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 333576255d4cfc53efd056aad438568184b36af6
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:16 2013 +0100

    USB: io_edgeport: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71ccb9b01981fabae27d3c98260ea4613207618e
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:15 2013 +0100

    USB: ftdi_sio: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    When switching to tty ports, some lifetime assumptions were changed.
    Specifically, close can now be called before the final tty reference is
    dropped as part of hangup at device disconnect. Even with the ftdi
    private-data refcounting this means that the port private data can be
    freed while a process is sleeping on modem-status changes and thus
    cannot be relied on to detect disconnects when woken up.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 508f940f1407656076a2e7d8f7fa059b567ecac2
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:14 2013 +0100

    USB: f81232: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 356050d8b1e526db093e9d2c78daf49d6bf418e3
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:13 2013 +0100

    USB: cypress_m8: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Also remove bogus test for private data pointer being NULL as it is
    never assigned in the loop.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa1e11d5231c001c80a479160b5832933c5d35fb
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:12 2013 +0100

    USB: ch341: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5018860321dc7a9e50a75d5f319bc981298fb5b7
Author: Johan Hovold <jhovold@gmail.com>
Date:   Tue Mar 19 09:21:11 2013 +0100

    USB: ark3116: fix use-after-free in TIOCMIWAIT
    
    Use the port wait queue and make sure to check the serial disconnected
    flag before accessing private port data after waking up.
    
    This is is needed as the private port data (including the wait queue
    itself) can be gone when waking up after a disconnect.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <jhovold@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5110f411d2ee35bf8d202ccca2e89c633060dca
Author: Ming Lei <ming.lei@canonical.com>
Date:   Wed Mar 20 23:25:25 2013 +0800

    sysfs: handle failure path correctly for readdir()
    
    In case of 'if (filp->f_pos ==  0 or 1)' of sysfs_readdir(),
    the failure from filldir() isn't handled, and the reference counter
    of the sysfs_dirent object pointed by filp->private_data will be
    released without clearing filp->private_data, so use after free
    bug will be triggered later.
    
    This patch returns immeadiately under the situation for fixing the bug,
    and it is reasonable to return from readdir() when filldir() fails.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Tested-by: Sasha Levin <levinsasha928@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 511f3c5326eabe1ece35202a404c24c0aeacc246
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Mar 15 14:02:14 2013 -0400

    usb: gadget: udc-core: fix a regression during gadget driver unbinding
    
    This patch (as1666) fixes a regression in the UDC core.  The core
    takes care of unbinding gadget drivers, and it does the unbinding
    before telling the UDC driver to turn off the controller hardware.
    When the call to the udc_stop callback is made, the gadget no longer
    has a driver.  The callback routine should not be invoked with a
    pointer to the old driver; doing so can cause problems (such as
    use-after-free accesses in net2280).
    
    This patch should be applied, with appropriate context changes, to all
    the stable kernels going back to 3.1.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 0b79459b482e85cb7426aa7da683a9f2c97aeae1
Author: Andy Honig <ahonig@google.com>
Date:   Wed Feb 20 14:48:10 2013 -0800

    KVM: x86: Convert MSR_KVM_SYSTEM_TIME to use gfn_to_hva_cache functions (CVE-2013-1797)
    
    There is a potential use after free issue with the handling of
    MSR_KVM_SYSTEM_TIME.  If the guest specifies a GPA in a movable or removable
    memory such as frame buffers then KVM might continue to write to that
    address even after it's removed via KVM_SET_USER_MEMORY_REGION.  KVM pins
    the page in memory so it's unlikely to cause an issue, but if the user
    space component re-purposes the memory previously used for the guest, then
    the guest will be able to corrupt that memory.
    
    Tested: Tested against kvmclock unit test
    
    Signed-off-by: Andrew Honig <ahonig@google.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>

commit ad56edad089b56300fd13bb9eeb7d0424d978239
Author: Jan Kara <jack@suse.cz>
Date:   Mon Mar 11 13:24:56 2013 -0400

    jbd2: fix use after free in jbd2_journal_dirty_metadata()
    
    jbd2_journal_dirty_metadata() didn't get a reference to journal_head it
    was working with. This is OK in most of the cases since the journal head
    should be attached to a transaction but in rare occasions when we are
    journalling data, __ext4_journalled_writepage() can race with
    jbd2_journal_invalidatepage() stripping buffers from a page and thus
    journal head can be freed under hands of jbd2_journal_dirty_metadata().
    
    Fix the problem by getting own journal head reference in
    jbd2_journal_dirty_metadata() (and also in jbd2_journal_set_triggers()
    which can possibly have the same issue).
    
    Reported-by: Zheng Liu <gnehzuil.liu@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Cc: stable@vger.kernel.org

commit 075dd9b83da5bc54b53b23f6e315c19b54f2d800
Author: Xi Wang <xi.wang@gmail.com>
Date:   Wed Mar 6 16:32:25 2013 -0500

    Staging: bcm: avoid use-after-free in bcm_char_ioctl()
    
    Free pBulkBuffer (pvBuffer) after pBulkBuffer->Register.
    
    Signed-off-by: Xi Wang <xi.wang@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      saner proc_get_inode() calling conventions
      proc: avoid extra pde_put() in proc_fill_super()
      fs: change return values from -EACCES to -EPERM
      fs/exec.c: make bprm_mm_init() static
      ocfs2/dlm: use GFP_ATOMIC inside a spin_lock
      ocfs2: fix possible use-after-free with AIO
      ocfs2: Fix oops in ocfs2_fast_symlink_readpage() code path
      get_empty_filp()/alloc_file() leave both ->f_pos and ->f_version zero
      target: writev() on single-element vector is pointless
      export kernel_write(), convert open-coded instances
      fs: encode_fh: return FILEID_INVALID if invalid fid_type
      kill f_vfsmnt
      vfs: kill FS_REVAL_DOT by adding a d_weak_revalidate dentry op
      nfsd: handle vfs_getattr errors in acl protocol
      switch vfs_getattr() to struct path
      default SET_PERSONALITY() in linux/elf.h
      ceph: prepopulate inodes only when request is aborted
      d_hash_and_lookup(): export, switch open-coded instances
      9p: switch v9fs_set_create_acl() to inode+fid, do it before d_instantiate()
      9p: split dropping the acls from v9fs_set_create_acl()
      ...

commit 9b171e0c74ca0549d0610990a862dd895870f04a
Author: Jan Kara <jack@suse.cz>
Date:   Wed Feb 20 13:16:39 2013 +1100

    ocfs2: fix possible use-after-free with AIO
    
    Running AIO is pinning inode in memory using file reference. Once AIO
    is completed using aio_complete(), file reference is put and inode can
    be freed from memory. So we have to be sure that calling aio_complete()
    is the last thing we do with the inode.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Acked-by: Jeff Moyer <jmoyer@redhat.com>
    Acked-by: Joel Becker <jlbec@evilplan.org>
    Cc: Mark Fasheh <mfasheh@suse.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commits)
      ksm: allocate roots when needed
      mm: cleanup "swapcache" in do_swap_page
      mm,ksm: swapoff might need to copy
      mm,ksm: FOLL_MIGRATION do migration_entry_wait
      ksm: shrink 32-bit rmap_item back to 32 bytes
      ksm: treat unstable nid like in stable tree
      ksm: add some comments
      tmpfs: fix mempolicy object leaks
      tmpfs: fix use-after-free of mempolicy object
      mm/fadvise.c: drain all pagevecs if POSIX_FADV_DONTNEED fails to discard all pages
      mm: export mmu notifier invalidates
      mm: accelerate mm_populate() treatment of THP pages
      mm: use long type for page counts in mm_populate() and get_user_pages()
      mm: accurately document nr_free_*_pages functions with code comments
      HWPOISON: change order of error_states[]'s elements
      HWPOISON: fix misjudgement of page_action() for errors on mlocked pages
      memcg: stop warning on memcg_propagate_kmem
      net: change type of virtio_chan->p9_max_pages
      vmscan: change type of vm_total_pages to unsigned long
      fs/nfsd: change type of max_delegations, nfsd_drc_max_mem and nfsd_drc_mem_used
      ...

commit 5f00110f7273f9ff04ac69a5f85bb535a4fd0987
Author: Greg Thelen <gthelen@google.com>
Date:   Fri Feb 22 16:36:01 2013 -0800

    tmpfs: fix use-after-free of mempolicy object
    
    The tmpfs remount logic preserves filesystem mempolicy if the mpol=M
    option is not specified in the remount request.  A new policy can be
    specified if mpol=M is given.
    
    Before this patch remounting an mpol bound tmpfs without specifying
    mpol= mount option in the remount request would set the filesystem's
    mempolicy object to a freed mempolicy object.
    
    To reproduce the problem boot a DEBUG_PAGEALLOC kernel and run:
        # mkdir /tmp/x
    
        # mount -t tmpfs -o size=100M,mpol=interleave nodev /tmp/x
    
        # grep /tmp/x /proc/mounts
        nodev /tmp/x tmpfs rw,relatime,size=102400k,mpol=interleave:0-3 0 0
    
        # mount -o remount,size=200M nodev /tmp/x
    
        # grep /tmp/x /proc/mounts
        nodev /tmp/x tmpfs rw,relatime,size=204800k,mpol=??? 0 0
            # note ? garbage in mpol=... output above
    
        # dd if=/dev/zero of=/tmp/x/f count=1
            # panic here
    
    Panic:
        BUG: unable to handle kernel NULL pointer dereference at           (null)
        IP: [<          (null)>]           (null)
        [...]
        Oops: 0010 [#1] SMP DEBUG_PAGEALLOC
        Call Trace:
          mpol_shared_policy_init+0xa5/0x160
          shmem_get_inode+0x209/0x270
          shmem_mknod+0x3e/0xf0
          shmem_create+0x18/0x20
          vfs_create+0xb5/0x130
          do_last+0x9a1/0xea0
          path_openat+0xb3/0x4d0
          do_filp_open+0x42/0xa0
          do_sys_open+0xfe/0x1e0
          compat_sys_open+0x1b/0x20
          cstar_dispatch+0x7/0x1f
    
    Non-debug kernels will not crash immediately because referencing the
    dangling mpol will not cause a fault.  Instead the filesystem will
    reference a freed mempolicy object, which will cause unpredictable
    behavior.
    
    The problem boils down to a dropped mpol reference below if
    shmem_parse_options() does not allocate a new mpol:
    
        config = *sbinfo
        shmem_parse_options(data, &config, true)
        mpol_put(sbinfo->mpol)
        sbinfo->mpol = config.mpol  /* BUG: saves unreferenced mpol */
    
    This patch avoids the crash by not releasing the mempolicy if
    shmem_parse_options() doesn't create a new mpol.
    
    How far back does this issue go? I see it in both 2.6.36 and 3.3.  I did
    not look back further.
    
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 54c807e71d5ac59dee56c685f2b66e27cd54c475
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jan 30 00:28:01 2013 +0100

    fs: Fix possible use-after-free with AIO
    
    Running AIO is pinning inode in memory using file reference. Once AIO
    is completed using aio_complete(), file reference is put and inode can
    be freed from memory. So we have to be sure that calling aio_complete()
    is the last thing we do with the inode.
    
    CC: Christoph Hellwig <hch@infradead.org>
    CC: Jens Axboe <axboe@kernel.dk>
    CC: Jeff Moyer <jmoyer@redhat.com>
    CC: stable@vger.kernel.org
    Acked-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commits)
      DocBook: update EXPORT_SYMBOL entry to point at export.h
      Documentation: update top level 00-INDEX file with new additions
      ARM: at91/ide: remove unsused at91-ide Kconfig entry
      percpu_counter.h: comment code for better readability
      x86, efi: fix comment typo in head_32.S
      IB: cxgb3: delay freeing mem untill entirely done with it
      net: mvneta: remove unneeded version.h include
      time: x86: report_lost_ticks doesn't exist any more
      pcmcia: avoid static analysis complaint about use-after-free
      fs/jfs: Fix typo in comment : 'how may' -> 'how many'
      of: add missing documentation for of_platform_populate()
      btrfs: remove unnecessary cur_trans set before goto loop in join_transaction
      sound: soc: Fix typo in sound/codecs
      treewide: Fix typo in various drivers
      btrfs: fix comment typos
      Update ibmvscsi module name in Kconfig.
      powerpc: fix typo (utilties -> utilities)
      of: fix spelling mistake in comment
      h8300: Fix home page URL in h8300/README
      xtensa: Fix home page URL in Kconfig
      ...

commit 20f7e9f3
    
       - remove obsolete simple_strto<foo>
    
       - fix return value when filesystem probe finds no XFS magic, a
         regression introduced in 9802182.
    
       - remove boolean_t typedef completely
    
       - fix stack switch in __xfs_bmapi_allocate by moving the check for
         stack switch up into xfs_bmapi_write.
    
       - fix build error due to incomplete boolean_t removal
    
       - fix oops in _xfs_buf_find by validating that the requested block is
         within the filesystem bounds.
    
       - limit speculative preallocation near ENOSPC.
    
       - fix an unmount hang in xfs_wait_buftarg by freeing the
         xfs_buf_log_item in xfs_buf_item_unlock.
    
       - fix a possible use after free with AIO.
    
       - fix xfs_swap_extents after removal of xfs_flushinval_pages, a
         regression introduced in fb59581404a.
    
       - replace hardcoded 128 with log header size
    
       - add memory barrier before wake_up_bit in xfs_ifunlock
    
       - limit speculative preallocation on sparse files
    
       - fix xa_lock recursion bug introduced in 90810b9e82a3
    
       - fix write verifier for symlinks"
    
    Fixed up conflicts in fs/xfs/xfs_buf_item.c (due to bli_format rename in
    commit 0f22f9d0cd8a affecting the removed XFS_TRANS_DEBUG routines in
    commit ec47eb6b0b45).
    
    * tag 'for-linus-v3.9-rc1' of git://oss.sgi.com/xfs/xfs: (36 commits)
      xfs: xfs_bmap_add_attrfork_local is too generic
      xfs: remove log force from xfs_buf_trylock()
      xfs: recheck buffer pinned status after push trylock failure
      xfs: limit speculative prealloc size on sparse files
      xfs: memory barrier before wake_up_bit()
      xfs: refactor space log reservation for XFS_TRANS_ATTR_SET
      xfs: make use of XFS_SB_LOG_RES() at xfs_fs_log_dummy()
      xfs: make use of XFS_SB_LOG_RES() at xfs_mount_log_sb()
      xfs: make use of XFS_SB_LOG_RES() at xfs_log_sbcount()
      xfs: introduce XFS_SB_LOG_RES() for transactions that modify sb on disk
      xfs: calculate XFS_TRANS_QM_QUOTAOFF_END space log reservation at mount time
      xfs: calculate XFS_TRANS_QM_QUOTAOFF space log reservation at mount time
      xfs: calculate XFS_TRANS_QM_DQALLOC space log reservation at mount time
      xfs: calcuate XFS_TRANS_QM_SETQLIM space log reservation at mount time
      xfs: calculate xfs_qm_write_sb_changes() space log reservation at mount time
      xfs: calculate XFS_TRANS_QM_SBCHANGE space log reservation at mount time
      xfs: make use of xfs_calc_buf_res() in xfs_trans.c
      xfs: add a helper to figure out the space log reservation per item
      xfs: Fix xfs_swap_extents() after removal of xfs_flushinval_pages()
      xfs: Fix possible use-after-free with AIO
      ...

commit bf023ecfcaf114c410759f375073e78b0871c120
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Feb 12 16:27:46 2013 +0000

    Btrfs: eliminate a use-after-free in btrfs_balance()
    
    Commit 5af3e8cc introduced a use-after-free at volumes.c:3139: bctl is freed
    above in __cancel_balance() in all cases except for balance pause.  Fix this
    by moving the offending check a couple statements above, the meaning of the
    check is preserved.
    
    Reported-by: Chris Mason <chris.mason@fusionio.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>

commit eb12db690c7eb0f6593ba5792f5861409e88bc03
Author: Josef Bacik <jbacik@fusionio.com>
Date:   Wed Jan 30 16:03:59 2013 -0500

    Btrfs: fix freeing delayed ref head while still holding its mutex
    
    I hit this error when reproducing a bug that would end in a transaction
    abort.  We take the delayed ref head's mutex to keep anybody from processing
    it while we're destroying it, but we fail to drop the mutex before we carry
    on and free the damned thing.  Fix this by doing the remove logic for the
    head ourselves and unlock the mutex, that way we can avoid use after free's
    or hung tasks waiting on that mutex to come back so they know the delayed
    ref completed.  Thanks,
    
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>

commit 222c81dc3874b4fe98371be665d0447a36447653
Author: Josef Bacik <jbacik@fusionio.com>
Date:   Mon Jan 28 09:45:20 2013 -0500

    Btrfs: do not merge logged extents if we've removed them from the tree
    
    You can run into this problem where if somebody is fsyncing and writing out
    the existing extents you will have removed the extent map from the em tree,
    but it's still valid for the current fsync so we go ahead and write it.  The
    problem is we unconditionally try to merge it back into the em tree, but if
    we've removed it from the em tree that will cause use after free problems.
    Fix this to only merge if we are still a part of the tree.  Thanks,
    
    Signed-off-by: Josef Bacik <jbacik@fusionio.com>

commit 091e26dfc156aeb3b73bc5c5f277e433ad39331c
Author: Jan Kara <jack@suse.cz>
Date:   Tue Jan 29 22:48:17 2013 -0500

    ext4: fix possible use-after-free with AIO
    
    Running AIO is pinning inode in memory using file reference. Once AIO
    is completed using aio_complete(), file reference is put and inode can
    be freed from memory. So we have to be sure that calling aio_complete()
    is the last thing we do with the inode.
    
    CC: stable@vger.kernel.org
    Reviewed-by: Carlos Maiolino <cmaiolino@redhat.com>
    Acked-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commit fb59581404a."
    
    * tag 'for-linus-v3.8-rc6' of git://oss.sgi.com/xfs/xfs:
      xfs: Fix xfs_swap_extents() after removal of xfs_flushinval_pages()
      xfs: Fix possible use-after-free with AIO
      xfs: fix shutdown hang on invalid inode during create
      xfs: limit speculative prealloc near ENOSPC thresholds
      xfs: fix _xfs_buf_find oops on blocks beyond the filesystem end
      xfs: pull up stack_switch check into xfs_bmapi_write
      xfs: Do not return EFSCORRUPTED when filesystem probe finds no XFS magic

commit fe194f19da971a114b0f65cf8267c1d42f3be87e
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Mon Jan 14 20:34:09 2013 +0100

    IB: cxgb3: delay freeing mem untill entirely done with it
    
    Sure, it's just the pointer value we use, but the coverity checker
    complains about a use-after-free bug and it really does seem cleaner
    to delay freeing until we are entirely done with the memory. So,
    rearrange the code to move the kfree() later untill we are completely
    done.
    Trivial and harmless, but nice IMHO.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Reviewed-by: Steve Wise <swise@opengridcomputing.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 4b05d09c18d9aa62d2e7fb4b057f54e5a38963f5
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jan 23 13:56:18 2013 +0100

    xfs: Fix possible use-after-free with AIO
    
    Running AIO is pinning inode in memory using file reference. Once AIO
    is completed using aio_complete(), file reference is put and inode can
    be freed from memory. So we have to be sure that calling aio_complete()
    is the last thing we do with the inode.
    
    CC: xfs@oss.sgi.com
    CC: Ben Myers <bpm@sgi.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ben Myers <bpm@sgi.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>

commit 794ed393b707f01858f5ebe2ae5eabaf89d00022
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jan 25 07:44:41 2013 +0000

    net: loopback: fix a dst refcounting issue
    
    Ben Greear reported crashes in ip_rcv_finish() on a stress
    test involving many macvlans.
    
    We tracked the bug to a dst use after free. ip_rcv_finish()
    was calling dst->input() and got garbage for dst->input value.
    
    It appears the bug is in loopback driver, lacking
    a skb_dst_force() before calling netif_rx().
    
    As a result, a non refcounted dst, normally protected by a
    RCU read_lock section, was escaping this section and could
    be freed before the packet being processed.
    
      [<ffffffff813a3c4d>] loopback_xmit+0x64/0x83
      [<ffffffff81477364>] dev_hard_start_xmit+0x26c/0x35e
      [<ffffffff8147771a>] dev_queue_xmit+0x2c4/0x37c
      [<ffffffff81477456>] ? dev_hard_start_xmit+0x35e/0x35e
      [<ffffffff8148cfa6>] ? eth_header+0x28/0xb6
      [<ffffffff81480f09>] neigh_resolve_output+0x176/0x1a7
      [<ffffffff814ad835>] ip_finish_output2+0x297/0x30d
      [<ffffffff814ad6d5>] ? ip_finish_output2+0x137/0x30d
      [<ffffffff814ad90e>] ip_finish_output+0x63/0x68
      [<ffffffff814ae412>] ip_output+0x61/0x67
      [<ffffffff814ab904>] dst_output+0x17/0x1b
      [<ffffffff814adb6d>] ip_local_out+0x1e/0x23
      [<ffffffff814ae1c4>] ip_queue_xmit+0x315/0x353
      [<ffffffff814adeaf>] ? ip_send_unicast_reply+0x2cc/0x2cc
      [<ffffffff814c018f>] tcp_transmit_skb+0x7ca/0x80b
      [<ffffffff814c3571>] tcp_connect+0x53c/0x587
      [<ffffffff810c2f0c>] ? getnstimeofday+0x44/0x7d
      [<ffffffff810c2f56>] ? ktime_get_real+0x11/0x3e
      [<ffffffff814c6f9b>] tcp_v4_connect+0x3c2/0x431
      [<ffffffff814d6913>] __inet_stream_connect+0x84/0x287
      [<ffffffff814d6b38>] ? inet_stream_connect+0x22/0x49
      [<ffffffff8108d695>] ? _local_bh_enable_ip+0x84/0x9f
      [<ffffffff8108d6c8>] ? local_bh_enable+0xd/0x11
      [<ffffffff8146763c>] ? lock_sock_nested+0x6e/0x79
      [<ffffffff814d6b38>] ? inet_stream_connect+0x22/0x49
      [<ffffffff814d6b49>] inet_stream_connect+0x33/0x49
      [<ffffffff814632c6>] sys_connect+0x75/0x98
    
    This bug was introduced in linux-2.6.35, in commit
    7fee226ad2397b (net: add a noref bit on skb dst)
    
    skb_dst_force() is enforced in dev_queue_xmit() for devices having a
    qdisc.
    
    Reported-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Tested-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ced55f38d6bde7c10a14ea51c2edcd51a98575e3
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jan 23 13:56:18 2013 +0100

    xfs: Fix possible use-after-free with AIO
    
    Running AIO is pinning inode in memory using file reference. Once AIO
    is completed using aio_complete(), file reference is put and inode can
    be freed from memory. So we have to be sure that calling aio_complete()
    is the last thing we do with the inode.
    
    CC: xfs@oss.sgi.com
    CC: Ben Myers <bpm@sgi.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Ben Myers <bpm@sgi.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>

commit cf860be639d86ed77af179c925085ae0721ae602
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 24 12:49:49 2013 +0100

    ACPI / scan: Prevent device add uevents from racing with user space
    
    ACPI core adds sysfs device files after the given devices have been
    registered with device_register(), which is not appropriate, because
    it may lead to race conditions with user space tools using those
    files.
    
    Fix the problem by delaying the KOBJ_ADD uevent for ACPI devices
    until after all of the devices' sysfs files have been created.
    
    This also fixes a use-after-free in acpi_device_unregister().
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bec0b2ce8304bedf56935c44912716882a365adb
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Sun Jan 20 23:14:43 2013 +0100

    pcmcia: avoid static analysis complaint about use-after-free
    
    Coverity complains about a use after free for 'res1' and 'res2' since
    we use the value of the pointers in a 'dev_dbg()' after they have been
    freed. That's not really a problem, but it still seems cleaner to
    defer freeing until we are completely done with the pointers.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 72b59d6ee8adaa51f70377db0a1917ed489bead8
Author: Roland Dreier <roland@purestorage.com>
Date:   Wed Jan 2 12:47:58 2013 -0800

    target: Fix use-after-free in LUN RESET handling
    
    If a backend IO takes a really long then an initiator might abort a
    command, and then when it gives up on the abort, send a LUN reset too,
    all before we process any of the original command or the abort.  (The
    abort will wait for the backend IO to complete too)
    
    When the backend IO final completes (or fails), the abort handling
    will proceed and queue up a "return aborted status" operation.  Then,
    while that's still pending, the LUN reset might find the original
    command still on the LUN's list of commands and try to return aborted
    status again, which leads to a use-after free when the first
    se_tfo->queue_status call frees the command and then the second
    se_tfo->queue_status call runs.
    
    Fix this by removing a command from the LUN state_list when we first
    are about to queue aborted status; we shouldn't do anything
    LUN-related after we've started returning status, so this seems like
    the correct thing to do.
    
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit e627c615553a356f6f70215ebb3933c6e057553e
Author: Roland Dreier <roland@purestorage.com>
Date:   Wed Jan 2 12:47:57 2013 -0800

    target: Fix missing CMD_T_ACTIVE bit regression for pending WRITEs
    
    This patch fixes a regression bug introduced during v3.6.x code with
    the following commit to drop transport_add_cmd_to_queue(), which
    originally re-set CMD_T_ACTIVE during pending WRITE I/O submission:
    
    commit af8772926f019b7bddd7477b8de5f3b0f12bad21
    Author: Christoph Hellwig <hch@infradead.org>
    Date:   Sun Jul 8 15:58:49 2012 -0400
    
        target: replace the processing thread with a TMR work queue
    
    The following sequence happens for write commands (or any other
    commands with a data out phase):
    
     - The transport calls target_submit_cmd(), which sets CMD_T_ACTIVE in
       cmd->transport_state and sets cmd->t_state to TRANSPORT_NEW_CMD.
     - Things go on transport_generic_new_cmd(), which notices that the
       command needs to transfer data, so it sets cmd->t_state to
       TRANSPORT_WRITE_PENDING and calls transport_cmd_check_stop().
     - transport_cmd_check_stop() clears CMD_T_ACTIVE in cmd->transport_state
       and returns in the normal case.
     - Then we continue on to call ->se_tfo->write_pending().
     - The data comes back from the initiator, and the transport calls
       target_execute_cmd(), which sets cmd->t_state to TRANSPORT_PROCESSING
       and calls into the backend to actually write the data.
    
    At this point, the backend might take a long time to complete the
    command, since it has to do real IO.  If an abort request comes in for
    this command at this point, it will not wait for the command to finish
    since CMD_T_ACTIVE is not set.  Then when the command does finally
    finish, we blow up with use-after-free.
    
    Avoid this by setting CMD_T_ACTIVE in target_execute_cmd() so that
    transport_wait_for_tasks() waits for the command to finish executing.
    This matches the behavior from before commit 1389533ef944 ("target:
    remove transport_generic_handle_data"), when data was signaled via
    transport_generic_handle_data(), which set CMD_T_ACTIVE because it
    called transport_add_cmd_to_queue().
    
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Reported-by: Martin Svec <martin.svec@zoner.cz>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit c4f74d35cac7cbc44877313b69550e2f5aeae77d
Author: Nickolai Zeldovich <nickolai@csail.mit.edu>
Date:   Sun Jan 6 20:27:22 2013 -0500

    drivers/net/wireless/mwl8k.c: avoid use-after-free
    
    Do not dereference p->station_id after kfree(cmd) because p
    points into the cmd data structure.
    
    Signed-off-by: Nickolai Zeldovich <nickolai@csail.mit.edu>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 44d22e2404b3ce93a314654962d31acc8afcdd62
Author: Lans Zhang <jia.zhang@windriver.com>
Date:   Mon Dec 24 14:01:34 2012 +0100

    EDAC: Cleanup device deregistering path
    
    Use device_unregister to replace put_device + device_del for
    cleanup, and fix the potential use after free.
    
    Signed-off-by: Lans Zhang <jia.zhang@windriver.com>
    Signed-off-by: Borislav Petkov <bp@alien8.de>

commit 311bd84247ee0bedae6cdfbfc5e2c3450f9decd1
Author: Konstantin Khlebnikov <khlebnikov@openvz.org>
Date:   Fri Dec 14 15:03:10 2012 +0400

    EDAC: Fix kernel panic on module unloading
    
    This patch fixes use-after-free and double-free bugs in
    edac_mc_sysfs_exit(). mci_pdev has single reference and put_device()
    calls mc_attr_release() which calls kfree(). The following
    device_del() works with already released memory. An another kfree() in
    edac_mc_sysfs_exit() releses the same memory again. Great.
    
    Signed-off-by: Konstantin Khlebnikov <khlebnikov@openvz.org>
    Cc: stable@vger.kernel.org # 3.[67]
    Cc: Denis Kirjanov <kirjanov@gmail.com>
    Cc: Mauro Carvalho Chehab <mchehab@redhat.com>
    Link: http://lkml.kernel.org/r/20121214110310.11019.21098.stgit@zurg
    Signed-off-by: Borislav Petkov <bp@alien8.de>

commits)
      ipv6/ip6_gre: set transport header correctly
      ipv4/ip_gre: set transport header correctly to gre header
      IB/rds: suppress incompatible protocol when version is known
      IB/rds: Correct ib_api use with gs_dma_address/sg_dma_len
      net/vxlan: Use the underlying device index when joining/leaving multicast groups
      tcp: should drop incoming frames without ACK flag set
      netprio_cgroup: define sk_cgrp_prioidx only if NETPRIO_CGROUP is enabled
      cpts: fix a run time warn_on.
      cpts: fix build error by removing useless code.
      batman-adv: fix random jitter calculation
      arp: fix a regression in arp_solicit()
      net: sched: integer overflow fix
      CONFIG_HOTPLUG removal from networking core
      Drivers: network: more __dev* removal
      bridge: call br_netpoll_disable in br_add_if
      ipv4: arp: fix a lockdep splat in arp_solicit()
      tuntap: dont use a private kmem_cache
      net: devnet_rename_seq should be a seqcount
      ip_gre: fix possible use after free
      ip_gre: make ipgre_tunnel_xmit() not parse network header as IP unconditionally
      ...

commit f7e75ba1772bc712af0070655ffd8b09906993b5
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 20 16:00:27 2012 +0000

    ip_gre: fix possible use after free
    
    Once skb_realloc_headroom() is called, tiph might point to freed memory.
    
    Cache tiph->ttl value before the reallocation, to avoid unexpected
    behavior.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Isaku Yamahata <yamahata@valinux.co.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      solos-pci: ensure all TX packets are aligned to 4 bytes
      solos-pci: add firmware upgrade support for new models
      solos-pci: remove superfluous debug output
      solos-pci: add GPIO support for newer versions on Geos board
      8139cp: Prevent dev_close/cp_interrupt race on MTU change
      net: qmi_wwan: add ZTE MF880
      drivers/net: Use of_match_ptr() macro in smsc911x.c
      drivers/net: Use of_match_ptr() macro in smc91x.c
      ipv6: addrconf.c: remove unnecessary "if"
      bridge: Correctly encode addresses when dumping mdb entries
      bridge: Do not unregister all PF_BRIDGE rtnl operations
      use generic usbnet_manage_power()
      usbnet: generic manage_power()
      usbnet: handle PM failure gracefully
      ksz884x: fix receive polling race condition
      qlcnic: update driver version
      qlcnic: fix unused variable warnings
      net: fec: forbid FEC_PTP on SoCs that do not support
      be2net: fix wrong frag_idx reported by RX CQ
      be2net: fix be_close() to ensure all events are ack'ed
      ...

commit 31279b1457f992f24eee8d45ddd647f5fce42cf6
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Dec 17 16:04:21 2012 -0800

    aoe: fix use after free in aoedev_by_aoeaddr()
    
    We should return NULL on failure instead of returning a freed pointer.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Ed Cashin <ecashin@coraid.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 499744209b2cbca66c42119226e5470da3bb7040
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Dec 12 19:22:57 2012 +0000

    tuntap: dont use skb after netif_rx_ni(skb)
    
    On Wed, 2012-12-12 at 23:16 -0500, Dave Jones wrote:
    > Since todays net merge, I see this when I start openvpn..
    >
    > general protection fault: 0000 [#1] PREEMPT SMP
    > Modules linked in: ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 xt_conntrack nf_conntrack ip6table_filter ip6_tables xfs iTCO_wdt iTCO_vendor_support snd_emu10k1 snd_util_mem snd_ac97_codec coretemp ac97_bus microcode snd_hwdep snd_seq pcspkr snd_pcm snd_page_alloc snd_timer lpc_ich i2c_i801 snd_rawmidi mfd_core snd_seq_device snd e1000e soundcore emu10k1_gp gameport i82975x_edac edac_core vhost_net tun macvtap macvlan kvm_intel kvm binfmt_misc nfsd auth_rpcgss nfs_acl lockd sunrpc btrfs libcrc32c zlib_deflate firewire_ohci sata_sil firewire_core crc_itu_t radeon i2c_algo_bit drm_kms_helper ttm drm i2c_core floppy
    > CPU 0
    > Pid: 1381, comm: openvpn Not tainted 3.7.0+ #14                  /D975XBX
    > RIP: 0010:[<ffffffff815b54a4>]  [<ffffffff815b54a4>] skb_flow_dissect+0x314/0x3e0
    > RSP: 0018:ffff88007d0d9c48  EFLAGS: 00010206
    > RAX: 000000000000055d RBX: 6b6b6b6b6b6b6b4b RCX: 1471030a0180040a
    > RDX: 0000000000000005 RSI: 00000000ffffffe0 RDI: ffff8800ba83fa80
    > RBP: ffff88007d0d9cb8 R08: 0000000000000000 R09: 0000000000000000
    > R10: 0000000000000000 R11: 0000000000000101 R12: ffff8800ba83fa80
    > R13: 0000000000000008 R14: ffff88007d0d9cc8 R15: ffff8800ba83fa80
    > FS:  00007f6637104800(0000) GS:ffff8800bf600000(0000) knlGS:0000000000000000
    > CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    > CR2: 00007f563f5b01c4 CR3: 000000007d140000 CR4: 00000000000007f0
    > DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    > DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    > Process openvpn (pid: 1381, threadinfo ffff88007d0d8000, task ffff8800a540cd60)
    > Stack:
    >  ffff8800ba83fa80 0000000000000296 0000000000000000 0000000000000000
    >  ffff88007d0d9cc8 ffffffff815bcff4 ffff88007d0d9ce8 ffffffff815b1831
    >  ffff88007d0d9ca8 00000000703f6364 ffff8800ba83fa80 0000000000000000
    > Call Trace:
    >  [<ffffffff815bcff4>] ? netif_rx+0x114/0x4c0
    >  [<ffffffff815b1831>] ? skb_copy_datagram_from_iovec+0x61/0x290
    >  [<ffffffff815b672a>] __skb_get_rxhash+0x1a/0xd0
    >  [<ffffffffa03b9538>] tun_get_user+0x418/0x810 [tun]
    >  [<ffffffff8135f468>] ? delay_tsc+0x98/0xf0
    >  [<ffffffff8109605c>] ? __rcu_read_unlock+0x5c/0xa0
    >  [<ffffffffa03b9a41>] tun_chr_aio_write+0x81/0xb0 [tun]
    >  [<ffffffff81145011>] ? __buffer_unlock_commit+0x41/0x50
    >  [<ffffffff811db917>] do_sync_write+0xa7/0xe0
    >  [<ffffffff811dc01f>] vfs_write+0xaf/0x190
    >  [<ffffffff811dc375>] sys_write+0x55/0xa0
    >  [<ffffffff81705540>] tracesys+0xdd/0xe2
    > Code: 41 8b 44 24 68 41 2b 44 24 6c 01 de 29 f0 83 f8 03 0f 8e a0 00 00 00 48 63 de 49 03 9c 24 e0 00 00 00 48 85 db 0f 84 72 fe ff ff <8b> 03 41 89 46 08 b8 01 00 00 00 e9 43 fd ff ff 0f 1f 40 00 48
    > RIP  [<ffffffff815b54a4>] skb_flow_dissect+0x314/0x3e0
    >  RSP <ffff88007d0d9c48>
    > ---[ end trace 6d42c834c72c002e ]---
    >
    >
    > Faulting instruction is
    >
    >    0: 8b 03                   mov    (%rbx),%eax
    >
    > rbx is slab poison (-20) so this looks like a use-after-free here...
    >
    >                         flow->ports = *ports;
    >  314:   8b 03                   mov    (%rbx),%eax
    >  316:   41 89 46 08             mov    %eax,0x8(%r14)
    >
    > in the inlined skb_header_pointer in skb_flow_dissect
    >
    >       Dave
    >
    
    commit 96442e4242 (tuntap: choose the txq based on rxq) added
    a use after free.
    
    Cache rxhash in a temp variable before calling netif_rx_ni()
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jason Wang <jasowang@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      USB: mark uas driver as BROKEN
      xhci: Add Lynx Point LP to list of Intel switchable hosts
      uwb: fix uwb_dev_unlock() missed at an error path in uwb_rc_cmd_async()
      USB: ftdi_sio: Add support for Newport AGILIS motor drivers
      MAINTAINERS: remove drivers/block/ub.c
      USB: chipidea: fix use after free bug
      ezusb: add dependency to USB
      usb: ftdi_sio: fixup BeagleBone A5+ quirk
      USB: cp210x: add Virtenio Preon32 device id
      usb: storage: remove redundant memset() in usb_probe_stor1()
      USB: option: blacklist network interface on Huawei E173
      USB: OHCI: workaround for hardware bug: retired TDs not added to the Done Queue
      USB: add new zte 3g-dongle's pid to option.c
      USB: opticon: switch to generic read implementation
      USB: opticon: refactor reab-urb processing
      USB: opticon: use usb-serial bulk-in urb
      USB: opticon: increase bulk-in size
      USB: opticon: use port as urb context
      USB: opticon: pass port to get_serial_info
      USB: opticon: make private data port specific
      ...

commits)
      ARM: mmp: select PINCTRL for ARCH_MMP
      pinctrl: Drop selecting PINCONF for MMP2, PXA168 and PXA910
      pinctrl: pinctrl-single: Fix error check condition
      pinctrl: SPEAr: Update error check for unsigned variables
      gpiolib: Fix use after free in gpiochip_add_pin_range
      gpiolib: rename pin range arguments
      pinctrl: single: support gpio request and free
      pinctrl: generic: add input schmitt disable parameter
      pinctrl/u300/coh901: stop spawning pinctrl from GPIO
      pinctrl/u300/coh901: let the gpio_chip register the range
      pinctrl: add function to retrieve range from pin
      gpiolib: return any error code from range creation
      pinctrl: make range registration defer properly
      gpiolib: rename find_pinctrl_*
      gpiolib: let gpiochip_add_pin_range() specify offset
      ARM: at91: pm9g45: add mmc support
      ARM: at91: Animeo IP: add mmc support
      ARM: at91: dt: add mmc pinctrl for Atmel reference boards
      ARM: at91: dt: at91sam9: add mmc pinctrl support
      ARM: at91/dts: add nodes for atmel hsmci controllers for atmel boards
      ...

commit 42dcedd4f2e715dc0313e359c8288e6397843fff
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Nov 15 11:32:30 2012 +0000

    drm/i915: Use a slab for object allocation
    
    The primary purpose of this was to debug some use-after-free memory
    corruption that was causing an OOPS inside drm/i915. As it turned out
    the corruption was being caused elsewhere and i915.ko as a major user of
    many objects was being hit hardest.
    
    Indeed as we do frequent the generic kmalloc caches, dedicating one to
    ourselves (or at least naming one for us depending upon the core) aids
    debugging our own slab usage.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit aeb1e5d69a5be592e86a926be73efb38c55af404
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Nov 29 21:21:22 2012 -0500

    ext4: fix possible use after free with metadata csum
    
    Commit fa77dcfafeaa introduces block bitmap checksum calculation into
    ext4_new_inode() in the case that block group was uninitialized.
    However we brelse() the bitmap buffer before we attempt to checksum it
    so we have no guarantee that the buffer is still there.
    
    Fix this by releasing the buffer after the possible checksum
    computation.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Acked-by: Darrick J. Wong <darrick.wong@oracle.com>
    Cc: stable@vger.kernel.org

commit 98c35534420d3147553bd3071a5fc63cd56de5b1
Author: Lothar Waßmann <LW@KARO-electronics.de>
Date:   Thu Nov 22 10:11:25 2012 +0100

    USB: chipidea: fix use after free bug
    
    The pointer to a platform_device struct must not be dereferenced after
    the device has been unregistered.
    
    This bug produces a crash when unloading the ci13xxx kernel module
    compiled with CONFIG_PAGE_POISONING enabled.
    
    Signed-off-by: Lothar Waßmann <LW@KARO-electronics.de>
    Cc: stable <stable@vger.kernel.org> # 3.6
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      team: bcast: convert return value of team_dev_queue_xmit() to bool correctly
      bonding: Bonding driver does not consider the gso_max_size/gso_max_segs setting of slave devices.
      xen/netfront: handle compound page fragments on transmit
      net: fix build failure in xilinx
      irda: sir_dev: Fix copy/paste typo
      ipv6: fix inet6_csk_update_pmtu() return value
      ixp4xx_hss: avoid calling dma_pool_create() with NULL dev
      ixp4xx_eth: avoid calling dma_pool_create() with NULL dev
      ne2000: add the right platform device
      of/net/mdio-gpio: Fix pdev->id issue when using devicetrees.
      NFC: Fix pn533 target mode memory leak
      NFC: pn533: Fix mem leak in pn533_in_dep_link_up
      NFC: pn533: Fix use after free
      NFC: pn533: Fix missing lock while operating on commands list
      NFC: Fix nfc_llcp_local chained list insertion
      ath9k_hw: Fix regression in device reset
      sis900: fix sis900_set_mode call parameters.
      iwlwifi: don't WARN when a non empty queue is disabled
      wireless: add back sysfs directory
      mwifiex: report error to MMC core if we cannot suspend
      ...

commit b4d4b1f087b9d4d730eb70f24032395d7cd7e591
Author: Axel Lin <axel.lin@ingics.com>
Date:   Wed Nov 21 14:33:56 2012 +0800

    gpiolib: Fix use after free in gpiochip_add_pin_range
    
    This is introduced by commit 9ab6e988
    "gpiolib: return any error code from range creation".
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 770f750bc2b8312489c8e45306f551d08a319d3c
Author: Szymon Janc <szymon.janc@tieto.com>
Date:   Mon Oct 29 14:04:43 2012 +0100

    NFC: pn533: Fix use after free
    
    cmd was freed in pn533_dep_link_up regardless of
    pn533_send_cmd_frame_async return code. Cmd is passed as argument to
    pn533_in_dep_link_up_complete callback and should be freed there.
    
    Signed-off-by: Szymon Janc <szymon.janc@tieto.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 68e5254adb88bede68285f11fb442a4d34fb550c
Author: Julius Werner <jwerner@chromium.org>
Date:   Thu Nov 1 12:47:59 2012 -0700

    xhci: fix null-pointer dereference when destroying half-built segment rings
    
    xhci_alloc_segments_for_ring() builds a list of xhci_segments and links
    the tail to head at the end (forming a ring). When it bails out for OOM
    reasons half-way through, it tries to destroy its half-built list with
    xhci_free_segments_for_ring(), even though it is not a ring yet. This
    causes a null-pointer dereference upon hitting the last element.
    
    Furthermore, one of its callers (xhci_ring_alloc()) mistakenly believes
    the output parameters to be valid upon this kind of OOM failure, and
    calls xhci_ring_free() on them. Since the (incomplete) list/ring should
    already be destroyed in that case, this would lead to a use after free.
    
    This patch fixes those issues by having xhci_alloc_segments_for_ring()
    destroy its half-built, non-circular list manually and destroying the
    invalid struct xhci_ring in xhci_ring_alloc() with a plain kfree().
    
    This patch should be backported to kernels as old as 2.6.31, that
    contains the commit 0ebbab37422315a5d0cb29792271085bafdf38c0 "USB: xhci:
    Ring allocation and initialization."
    
    A separate patch will need to be developed for kernels older than 3.4,
    since the ring allocation code was refactored in that kernel.
    
    Signed-off-by: Julius Werner <jwerner@chromium.org>
    Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
    Cc: stable@vger.kernel.org

commit a0d28ba01ebd048b4ba418142b37f5cf80e6d156
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Tue Oct 23 14:08:52 2012 +0200

    mmc: sh_mmcif: fix use after free
    
    A recent commit "mmc: sh_mmcif: fix clock management" has introduced a
    use after free bug in sh_mmcif.c: in sh_mmcif_remove() the call to
    mmc_free_host() frees private driver data, therefore using it afterwards
    is a bug. Revert that hunk.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Cc: stable@vger.kernel.org [3.6]
    Signed-off-by: Chris Ball <cjb@laptop.org>

commit 65635cbc37e011e71b208257a25e7c1078cd039b
Author: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
Date:   Wed Oct 17 17:45:36 2012 +0900

    blkcg: Fix use-after-free of q->root_blkg and q->root_rl.blkg
    
    blk_put_rl() does not call blkg_put() for q->root_rl because we
    don't take request list reference on q->root_blkg.
    However, if root_blkg is once attached then detached (freed),
    blk_put_rl() is confused by the bogus pointer in q->root_blkg.
    
    For example, with !CONFIG_BLK_DEV_THROTTLING &&
    CONFIG_CFQ_GROUP_IOSCHED,
    switching IO scheduler from cfq to deadline will cause system stall
    after the following warning with 3.6:
    
    > WARNING: at /work/build/linux/block/blk-cgroup.h:250
    > blk_put_rl+0x4d/0x95()
    > Modules linked in: bridge stp llc sunrpc acpi_cpufreq freq_table mperf
    > ipt_REJECT nf_conntrack_ipv4 nf_defrag_ipv4
    > Pid: 0, comm: swapper/0 Not tainted 3.6.0 #1
    > Call Trace:
    >  <IRQ>  [<ffffffff810453bd>] warn_slowpath_common+0x85/0x9d
    >  [<ffffffff810453ef>] warn_slowpath_null+0x1a/0x1c
    >  [<ffffffff811d5f8d>] blk_put_rl+0x4d/0x95
    >  [<ffffffff811d614a>] __blk_put_request+0xc3/0xcb
    >  [<ffffffff811d71a3>] blk_finish_request+0x232/0x23f
    >  [<ffffffff811d76c3>] ? blk_end_bidi_request+0x34/0x5d
    >  [<ffffffff811d76d1>] blk_end_bidi_request+0x42/0x5d
    >  [<ffffffff811d7728>] blk_end_request+0x10/0x12
    >  [<ffffffff812cdf16>] scsi_io_completion+0x207/0x4d5
    >  [<ffffffff812c6fcf>] scsi_finish_command+0xfa/0x103
    >  [<ffffffff812ce2f8>] scsi_softirq_done+0xff/0x108
    >  [<ffffffff811dcea5>] blk_done_softirq+0x8d/0xa1
    >  [<ffffffff810915d5>] ?
    >  generic_smp_call_function_single_interrupt+0x9f/0xd7
    >  [<ffffffff8104cf5b>] __do_softirq+0x102/0x213
    >  [<ffffffff8108a5ec>] ? lock_release_holdtime+0xb6/0xbb
    >  [<ffffffff8104d2b4>] ? raise_softirq_irqoff+0x9/0x3d
    >  [<ffffffff81424dfc>] call_softirq+0x1c/0x30
    >  [<ffffffff81011beb>] do_softirq+0x4b/0xa3
    >  [<ffffffff8104cdb0>] irq_exit+0x53/0xd5
    >  [<ffffffff8102d865>] smp_call_function_single_interrupt+0x34/0x36
    >  [<ffffffff8142486f>] call_function_single_interrupt+0x6f/0x80
    >  <EOI>  [<ffffffff8101800b>] ? mwait_idle+0x94/0xcd
    >  [<ffffffff81018002>] ? mwait_idle+0x8b/0xcd
    >  [<ffffffff81017811>] cpu_idle+0xbb/0x114
    >  [<ffffffff81401fbd>] rest_init+0xc1/0xc8
    >  [<ffffffff81401efc>] ? csum_partial_copy_generic+0x16c/0x16c
    >  [<ffffffff81cdbd3d>] start_kernel+0x3d4/0x3e1
    >  [<ffffffff81cdb79e>] ? kernel_init+0x1f7/0x1f7
    >  [<ffffffff81cdb2dd>] x86_64_start_reservations+0xb8/0xbd
    >  [<ffffffff81cdb3e3>] x86_64_start_kernel+0x101/0x110
    
    This patch clears q->root_blkg and q->root_rl.blkg when root blkg
    is destroyed.
    
    Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com>
    Acked-by: Vivek Goyal <vgoyal@redhat.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: stable@kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 4a215aade0baa0487d4644d7aef6f166c84c516e
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sun Oct 21 17:57:20 2012 -0700

    Input: fix use-after-free introduced with dynamic minor changes
    
    Commit 7f8d4cad1e4e ("Input: extend the number of event (and other)
    devices") made evdev, joydev and mousedev to embed struct cdev into
    their respective structures representing input devices.
    
    Unfortunately character device structure may outlive the parent
    structure unless we do not set it up as parent of character device so
    that it will stay pinned until character device is freed.
    
    Also, now that parent structure is pinned while character device exists
    we do not need to pin and unpin it every time user opens or closes it.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      [SCSI] storvsc: Account for in-transit packets in the RESET path
      [SCSI] qla2xxx: fix potential deadlock on ha->hardware_lock
      [SCSI] scsi_debug: Fix off-by-one bug when unmapping region
      [SCSI] Shorten the path length of scsi_cmd_to_driver()
      [SCSI] virtio-scsi: support online resizing of disks
      [SCSI] virtio-scsi: fix LUNs greater than 255
      [SCSI] virtio-scsi: initialize scatterlist structure
      [SCSI] megaraid_sas: Version, Changelog, Copyright update
      [SCSI] megaraid_sas: Remove duplicate code
      [SCSI] megaraid_sas: Add SystemPD FastPath support
      [SCSI] megaraid_sas: Add array boundary check for SystemPD
      [SCSI] megaraid_sas: Load io_request DataLength in bytes
      [SCSI] megaraid_sas: Add module param for configurable MSI-X vector count
      [SCSI] megaraid_sas: Remove un-needed completion_lock spinlock calls
      [SCSI] lpfc 8.3.35: Update lpfc version for 8.3.35 driver release
      [SCSI] lpfc 8.3.35: Fixed not reporting logical link speed to SCSI midlayer when QoS not on
      [SCSI] lpfc 8.3.35: Fix error with fabric service parameters causing performance issues
      [SCSI] lpfc 8.3.35: Fixed SCSI host create showing wrong link speed on SLI3 HBA ports
      [SCSI] lpfc 8.3.35: Fixed not checking solicition in progress bit when verifying FCF record for use
      [SCSI] lpfc 8.3.35: Fixed messages for misconfigured port errors
      ...

commit ffd8d101a3a7d3f2e79deee1e342801703b6dc70
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Thu Oct 4 19:56:40 2012 -0400

    fs: prevent use after free in auditing when symlink following was denied
    
    Commit "fs: add link restriction audit reporting" has added auditing of failed
    attempts to follow symlinks. Unfortunately, the auditing was being done after
    the struct path structure was released earlier.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commits)
      iommu/amd: Remove obsolete comment line
      dma-debug: Remove local BUS_NOTIFY_UNBOUND_DRIVER define
      iommu/amd: Fix possible use after free in get_irq_table()
      iommu/amd: Report irq remapping through IOMMU-API
      iommu/amd: Print message to system log when irq remapping is enabled
      iommu/irq: Use amd_iommu_irq_ops if supported
      iommu/amd: Make sure irq remapping still works on dma init failure
      iommu/amd: Add initialization routines for AMD interrupt remapping
      iommu/amd: Add call-back routine for HPET MSI
      iommu/amd: Implement MSI routines for interrupt remapping
      iommu/amd: Add IOAPIC remapping routines
      iommu/amd: Add routines to manage irq remapping tables
      iommu/amd: Add IRTE invalidation routine
      iommu/amd: Make sure IOMMU is not considered to translate itself
      iommu/amd: Split device table initialization into irq and dma part
      iommu/amd: Check if IOAPIC information is correct
      iommu/amd: Allocate data structures to keep track of irq remapping tables
      iommu/amd: Add slab-cache for irq remapping tables
      iommu/amd: Keep track of HPET and IOAPIC device ids
      iommu/amd: Fix features reporting
      ...

commits)
      IB/qib: Fix local access validation for user MRs
      mlx4_core: Disable SENSE_PORT for multifunction devices
      mlx4_core: Clean up enabling of SENSE_PORT for older (ConnectX-1/-2) HCAs
      mlx4_core: Stash PCI ID driver_data in mlx4_priv structure
      IB/srp: Avoid having aborted requests hang
      IB/srp: Fix use-after-free in srp_reset_req()
      IB/qib: Add a qib driver version
      RDMA/nes: Fix compilation error when nes_debug is enabled
      RDMA/nes: Print hardware resource type
      RDMA/nes: Fix for crash when TX checksum offload is off
      RDMA/nes: Cosmetic changes
      RDMA/nes: Fix for incorrect MSS when TSO is on
      RDMA/nes: Fix incorrect resolving of the loopback MAC address
      mlx4_core: Fix crash on uninitialized priv->cmd.slave_sem
      mlx4_core: Trivial cleanups to driver log messages
      mlx4_core: Trivial readability fix: "0X30" -> "0x30"
      IB/mlx4: Create paravirt contexts for VFs when master IB driver initializes
      mlx4: Modify proxy/tunnel QP mechanism so that guests do no calculations
      mlx4: Paravirtualize Node Guids for slaves
      mlx4: Activate SR-IOV mode for IB
      ...

commit 821f0f68ca5fa93c757a892129392e751a7407a3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Oct 2 11:34:40 2012 +0300

    iommu/amd: Fix possible use after free in get_irq_table()
    
    We should return NULL on error instead of the freed pointer.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>

commit 9b796d06d5d1b1e85ae2316a283ea11dd739ef96
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Fri Aug 24 10:27:54 2012 +0000

    IB/srp: Fix use-after-free in srp_reset_req()
    
    srp_free_req() uses the scsi_cmnd structure contents to unmap
    buffers, so we must invoke srp_free_req() before we release
    ownership of that structure.
    
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Acked-by: David Dillow <dillowda@ornl.gov>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commit bea1e22df494a729978e7f2c54f7bda328f74bc3
Author: Patrick McHardy <kaber@trash.net>
Date:   Thu Aug 30 07:01:30 2012 +0000

    IPoIB: Fix use-after-free of multicast object
    
    Fix a crash in ipoib_mcast_join_task().  (with help from Or Gerlitz)
    
    Commit c8c2afe360b7 ("IPoIB: Use rtnl lock/unlock when changing device
    flags") added a call to rtnl_lock() in ipoib_mcast_join_task(), which
    is run from the ipoib_workqueue, and hence the workqueue can't be
    flushed from the context of ipoib_stop().
    
    In the current code, ipoib_stop() (which doesn't flush the workqueue)
    calls ipoib_mcast_dev_flush(), which goes and deletes all the
    multicast entries.  This takes place without any synchronization with
    a possible running instance of ipoib_mcast_join_task() for the same
    ipoib device, leading to a crash due to NULL pointer dereference.
    
    Fix this by making sure that the workqueue is flushed before
    ipoib_mcast_dev_flush() is called.  To make that possible, we move the
    RTNL-lock wrapped code to ipoib_mcast_join_finish().
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Roland Dreier <roland@purestorage.com>

commit 28a535f9a0df060569dcc786e5bc2e1de43d7dc7
Author: Dmitry Monakhov <dmonakhov@openvz.org>
Date:   Sat Sep 29 00:14:55 2012 -0400

    ext4: completed_io locking cleanup
    
    Current unwritten extent conversion state-machine is very fuzzy.
    - For unknown reason it performs conversion under i_mutex. What for?
      My diagnosis:
      We already protect extent tree with i_data_sem, truncate and punch_hole
      should wait for DIO, so the only data we have to protect is end_io->flags
      modification, but only flush_completed_IO and end_io_work modified this
      flags and we can serialize them via i_completed_io_lock.
    
      Currently all these games with mutex_trylock result in the following deadlock
       truncate:                          kworker:
        ext4_setattr                       ext4_end_io_work
        mutex_lock(i_mutex)
        inode_dio_wait(inode)  ->BLOCK
                                 DEADLOCK<- mutex_trylock()
                                            inode_dio_done()
      #TEST_CASE1_BEGIN
      MNT=/mnt_scrach
      unlink $MNT/file
      fallocate -l $((1024*1024*1024)) $MNT/file
      aio-stress -I 100000 -O -s 100m -n -t 1 -c 10 -o 2 -o 3 $MNT/file
      sleep 2
      truncate -s 0 $MNT/file
      #TEST_CASE1_END
    
    Or use 286's xfstests https://github.com/dmonakhov/xfstests/blob/devel/286
    
    This patch makes state machine simple and clean:
    
    (1) xxx_end_io schedule final extent conversion simply by calling
        ext4_add_complete_io(), which append it to ei->i_completed_io_list
        NOTE1: because of (2A) work should be queued only if
        ->i_completed_io_list was empty, otherwise the work is scheduled already.
    
    (2) ext4_flush_completed_IO is responsible for handling all pending
        end_io from ei->i_completed_io_list
        Flushing sequence consists of following stages:
        A) LOCKED: Atomically drain completed_io_list to local_list
        B) Perform extents conversion
        C) LOCKED: move converted io's to to_free list for final deletion
                 This logic depends on context which we was called from.
        D) Final end_io context destruction
        NOTE1: i_mutex is no longer required because end_io->flags modification
        is protected by ei->ext4_complete_io_lock
    
    Full list of changes:
    - Move all completion end_io related routines to page-io.c in order to improve
      logic locality
    - Move open coded logic from various xx_end_xx routines to ext4_add_complete_io()
    - remove EXT4_IO_END_FSYNC
    - Improve SMP scalability by removing useless i_mutex which does not
      protect io->flags anymore.
    - Reduce lock contention on i_completed_io_lock by optimizing list walk.
    - Rename ext4_end_io_nolock to end4_end_io and make it static
    - Check flush completion status to ext4_ext_punch_hole(). Because it is
      not good idea to punch blocks from corrupted inode.
    
    Changes since V3 (in request to Jan's comments):
      Fall back to active flush_completed_IO() approach in order to prevent
      performance issues with nolocked DIO reads.
    Changes since V2:
      Fix use-after-free caused by race truncate vs end_io_work
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commit e962610f8100e1b52973f5a9c855cbc3d1ba04ec
Author: Ming Lei <ming.lei@canonical.com>
Date:   Thu Sep 13 10:33:28 2012 +0800

    wireless: ath9k-htc: fix possible use after free
    
    Inside ath9k_hif_usb_firmware_fail(), the instance of
    'struct struct hif_device_usb' may be freed by
    ath9k_hif_usb_disconnect() after
    
            complete(&hif_dev->fw_done);
    
    But 'hif_dev' is still accessed after the line code
    above is executed.
    
    This patch fixes the issue by not accessing 'hif_dev'
    after 'complete(&hif_dev->fw_done)' inside
    ath9k_hif_usb_firmware_fail().
    
    Cc: ath9k-devel@lists.ath9k.org
    Cc: "Luis R. Rodriguez" <mcgrof@qca.qualcomm.com>
    Cc: Jouni Malinen <jouni@qca.qualcomm.com>
    Cc: Vasanthakumar Thiagarajan <vthiagar@qca.qualcomm.com>
    Cc: Senthil Balasubramanian <senthilb@qca.qualcomm.com>
    Cc: "John W. Linville" <linville@tuxdriver.com>
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d436de8ce25f53a8a880a931886821f632247943
Author: Martin Peschke <mpeschke@linux.vnet.ibm.com>
Date:   Tue Sep 4 15:23:36 2012 +0200

    [SCSI] zfcp: only access zfcp_scsi_dev for valid scsi_device
    
    __scsi_remove_device (e.g. due to dev_loss_tmo) calls
    zfcp_scsi_slave_destroy which in turn sends a close LUN FSF request to
    the adapter. After 30 seconds without response,
    zfcp_erp_timeout_handler kicks the ERP thread failing the close LUN
    ERP action. zfcp_erp_wait in zfcp_erp_lun_shutdown_wait and thus
    zfcp_scsi_slave_destroy returns and then scsi_device is no longer
    valid. Sometime later the response to the close LUN FSF request may
    finally come in. However, commit
    b62a8d9b45b971a67a0f8413338c230e3117dff5
    "[SCSI] zfcp: Use SCSI device data zfcp_scsi_dev instead of zfcp_unit"
    introduced a number of attempts to unconditionally access struct
    zfcp_scsi_dev through struct scsi_device causing a use-after-free.
    This leads to an Oops due to kernel page fault in one of:
    zfcp_fsf_abort_fcp_command_handler, zfcp_fsf_open_lun_handler,
    zfcp_fsf_close_lun_handler, zfcp_fsf_req_trace,
    zfcp_fsf_fcp_handler_common.
    Move dereferencing of zfcp private data zfcp_scsi_dev allocated in
    scsi_device via scsi_transport_reserve_device after the check for
    potentially aborted FSF request and thus no longer valid scsi_device.
    Only then assign sdev_to_zfcp(sdev) to the local auto variable struct
    zfcp_scsi_dev *zfcp_sdev.
    
    Signed-off-by: Martin Peschke <mpeschke@linux.vnet.ibm.com>
    Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
    Cc: <stable@vger.kernel.org> #2.6.37+
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 2d297480037e1d9100ca504737820c1bf65db6c0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 5 15:30:42 2012 +0300

    x86, microcode, AMD: Fix use after free in free_cache()
    
    list_for_each_entry_reverse() dereferences the iterator, but we already
    freed it. I don't see a reason that this has to be done in reverse order
    so change it to use list_for_each_entry_safe().
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Borislav Petkov <borislav.petkov@amd.com>

commit 1f2235b8e79bd276f19809f7f2a270f55909d695
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Wed Sep 12 14:48:31 2012 +0300

    usb: move children deallocation after quiescing the hub
    
    Commit ff823c79a5c33194c2e5594f7c4686ea3547910c ("usb: move children
    to struct usb_port") forgot to consider the hub_disconnect sequence,
    which releases ports before quiescing the hub, which will lead to a
    use-after-free, since hub_quiesce() will try to disconnect ports'
    children, which are already deallocated. Simple modprobe dummy_hcd &&
    rmmod dummy_hcd will illustrate the problem.
    
    This patch moves deallocation of hub's ports after hub_quiesce() call
    in hub_disconnect().
    
    Cc: Lan Tianyu <tianyu.lan@intel.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits
    here than I would like -- I got a bit behind while I was stalking
    Steven Rostedt in San Diego last week...  I'll slow it down after this!
    
    There are a couple of pulls here.  One is from Johannes:
    
    "Please pull (according to the below information) to get a few fixes.
    
     * a fix to properly disconnect in the driver when authentication or
       association fails
     * a fix to prevent invalid information about mesh paths being reported
       to userspace
     * a memory leak fix in an nl80211 error path"
    
    The other comes via Gustavo:
    
    "A few updates for the 3.6 kernel. There are two btusb patches to add
    more supported devices through the new USB_VENDOR_AND_INTEFACE_INFO()
    macro and another one that add a new device id for a Sony Vaio laptop,
    one fix for a user-after-free and, finally, two patches from Vinicius
    to fix a issue in SMP pairing."
    
    Along with those...
    
    Arend van Spriel provides a fix for a use-after-free bug in brcmfmac.
    
    Daniel Drake avoids a hang by not trying to touch the libertas hardware
    duing suspend if it is already powered-down.
    
    Felix Fietkau provides a batch of ath9k fixes that adress some
    potential problems with power settings, as well as a fix to avoid a
    potential interrupt storm.
    
    Gertjan van Wingerde provides a register-width fix for rt2x00, and
    a rt2x00 fix to prevent incorrectly detecting the rfkill status.
    He also provides a device ID patch.
    
    Hante Meuleman gives us three brcmfmac fixes, one that properly
    initializes a command structure, one that fixes a race condition that
    could lose usb requests, and one that removes some log spam.
    
    Marc Kleine-Budde offers an rt2x00 fix for a voltage setting on some
    specific devices.
    
    Mohammed Shafi Shajakhan sent an ath9k fix to avoid a crash related to
    using timers that aren't allocated when 2 wire bluetooth coexistence
    hardware is in use.
    
    Sergei Poselenov changes rt2800usb to do some validity checking for
    received packets, avoiding crashes on an ARM Soc.
    
    Stone Piao gives us an mwifiex fix for an incorrectly set skb length
    value for a command buffer.
    
    All of these are localized to their specific drivers, and relatively
    small.  The power-related patches from Felix are bigger than I would
    like, but I merged them in consideration of their isolation to ath9k
    and the sensitive nature of power settings in wireless devices.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d5829eac5f7cfff89c6d1cf11717eee97cf030d0
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Sep 5 17:09:15 2012 +0200

    target: fix use-after-free with PSCSI sense data
    
    The pointer to the sense buffer is fetched by transport_get_sense_data,
    but this is called by target_complete_ok_work long after pscsi_req_done
    has freed the struct that contains it.
    
    Pass instead the fabric's sense buffer to transport_complete,
    and copy the data to it directly in transport_complete.  Setting
    SCF_TRANSPORT_TASK_SENSE also becomes a duty of transport_complete.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit e36c92fd63bb4773e6f4bc38ecee11a609ded1cf
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Aug 14 02:58:15 2012 -0300

    [media] em28xx: use after free in em28xx_v4l2_close()
    
    We need to move the unlock before the kfree(dev);
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 0fe33aae0e94b4097dd433c9399e16e17d638cd8
Author: Miklos Szeredi <mszeredi@suse.cz>
Date:   Wed Aug 15 12:55:22 2012 +0200

    audit: don't free_chunk() after fsnotify_add_mark()
    
    Don't do free_chunk() after fsnotify_add_mark().  That one does a delayed unref
    via the destroy list and this results in use-after-free.
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Acked-by: Eric Paris <eparis@redhat.com>
    CC: stable@vger.kernel.org

commit 61a0cfb008f57ecf7eb28ee762952fb42dc15d15
Author: Andre Guedes <andre.guedes@openbossa.org>
Date:   Wed Aug 1 20:34:15 2012 -0300

    Bluetooth: Fix use-after-free bug in SMP
    
    If SMP fails, we should always cancel security_timer delayed work.
    Otherwise, security_timer function may run after l2cap_conn object
    has been freed.
    
    This patch fixes the following warning reported by ODEBUG:
    
    WARNING: at lib/debugobjects.c:261 debug_print_object+0x7c/0x8d()
    Hardware name: Bochs
    ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x27
    Modules linked in: btusb bluetooth
    Pid: 440, comm: kworker/u:2 Not tainted 3.5.0-rc1+ #4
    Call Trace:
     [<ffffffff81174600>] ? free_obj_work+0x4a/0x7f
     [<ffffffff81023eb8>] warn_slowpath_common+0x7e/0x97
     [<ffffffff81023f65>] warn_slowpath_fmt+0x41/0x43
     [<ffffffff811746b1>] debug_print_object+0x7c/0x8d
     [<ffffffff810394f0>] ? __queue_work+0x241/0x241
     [<ffffffff81174fdd>] debug_check_no_obj_freed+0x92/0x159
     [<ffffffff810ac08e>] slab_free_hook+0x6f/0x77
     [<ffffffffa0019145>] ? l2cap_conn_del+0x148/0x157 [bluetooth]
     [<ffffffff810ae408>] kfree+0x59/0xac
     [<ffffffffa0019145>] l2cap_conn_del+0x148/0x157 [bluetooth]
     [<ffffffffa001b9a2>] l2cap_recv_frame+0xa77/0xfa4 [bluetooth]
     [<ffffffff810592f9>] ? trace_hardirqs_on_caller+0x112/0x1ad
     [<ffffffffa001c86c>] l2cap_recv_acldata+0xe2/0x264 [bluetooth]
     [<ffffffffa0002b2f>] hci_rx_work+0x235/0x33c [bluetooth]
     [<ffffffff81038dc3>] ? process_one_work+0x126/0x2fe
     [<ffffffff81038e22>] process_one_work+0x185/0x2fe
     [<ffffffff81038dc3>] ? process_one_work+0x126/0x2fe
     [<ffffffff81059f2e>] ? lock_acquired+0x1b5/0x1cf
     [<ffffffffa00028fa>] ? le_scan_work+0x11d/0x11d [bluetooth]
     [<ffffffff81036fb6>] ? spin_lock_irq+0x9/0xb
     [<ffffffff81039209>] worker_thread+0xcf/0x175
     [<ffffffff8103913a>] ? rescuer_thread+0x175/0x175
     [<ffffffff8103cfe0>] kthread+0x95/0x9d
     [<ffffffff812c5054>] kernel_threadi_helper+0x4/0x10
     [<ffffffff812c36b0>] ? retint_restore_args+0x13/0x13
     [<ffffffff8103cf4b>] ? flush_kthread_worker+0xdb/0xdb
     [<ffffffff812c5050>] ? gs_change+0x13/0x13
    
    This bug can be reproduced using hctool lecc or l2test tools and
    bluetoothd not running.
    
    Signed-off-by: Andre Guedes <andre.guedes@openbossa.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.co.uk>

commit 515850e4fbd87c8f249446faa2e5ad98e672711d
Author: Cody P Schafer <cody@linux.vnet.ibm.com>
Date:   Fri Aug 10 15:22:54 2012 -0700

    perf symbols: only set vmlinux longname & mark loaded if really loaded
    
    dso__load_vmlinux() uses the filename passed to it to directly set the
    dso long_name, which resulted in a use after free due to
    dso__load_vmlinux_path() treating 0 symbols as a load failure and
    subsequently freeing the contents of dso->long_name.
    
    Change dso__load_vmlinux() so that finding 0 symbols does not cause it
    to consider itself loaded, and do not set long_name in such a case.
    
    Signed-off-by: Cody P Schafer <cody@linux.vnet.ibm.com>
    Cc: David Hansen <dave@linux.vnet.ibm.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Matt Hellsley <matthltc@us.ibm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Link: http://lkml.kernel.org/r/1344637382-22789-9-git-send-email-cody@linux.vnet.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 00d39597e825a2b09ec88d4dd429ff72fe60d9d4
Author: Li Dongyang <jerry87905@gmail.com>
Date:   Wed Jul 25 10:45:09 2012 +1000

    thinkpad_acpi: Free hotkey_keycode_map after unregistering tpacpi_inputdev
    
    We should free hotkey_keycode_map after unregistering tpacpi_inputdev, to aviod
    use after free like this:
    
    [   99.408388] =============================================================================
    [   99.408393] BUG kmalloc-64 (Not tainted): Poison overwritten
    [   99.408394] -----------------------------------------------------------------------------
    [   99.408394]
    [   99.408398] INFO: 0xf2751962-0xf2751995. First byte 0x98 instead of 0x6b
    [   99.408402] INFO: Allocated in 0xfdc88c28 age=79 cpu=0 pid=1329
    [   99.408407]  __slab_alloc.isra.50.constprop.56+0x49f/0x533
    [   99.408410]  kmem_cache_alloc_trace+0x10d/0x140
    [   99.408412]  0xfdc88c28
    [   99.408414]  0xfdc898cc
    [   99.408417]  do_one_initcall+0x112/0x160
    [   99.408420]  sys_init_module+0xe6d/0x1bc0
    [   99.408422]  sysenter_do_call+0x12/0x28
    [   99.408427] INFO: Freed in hotkey_exit+0x50/0xb0 [thinkpad_acpi] age=14 cpu=1 pid=1333
    [   99.408429]  __slab_free+0x3d/0x30b
    [   99.408431]  kfree+0x129/0x140
    [   99.408435]  hotkey_exit+0x50/0xb0 [thinkpad_acpi]
    [   99.408438]  ibm_exit+0xe3/0x1a0 [thinkpad_acpi]
    [   99.408441]  thinkpad_acpi_module_exit+0x35/0x208 [thinkpad_acpi]
    [   99.408443]  sys_delete_module+0x11f/0x280
    [   99.408445]  sysenter_do_call+0x12/0x28
    [   99.408447] INFO: Slab 0xf4d5ea20 objects=17 used=17 fp=0x  (null) flags=0x40000080
    [   99.408449] INFO: Object 0xf2751960 @offset=2400 fp=0xf2751780
    [   99.408449]
    [   99.408452] Bytes b4 f2751950: 64 02 00 00 ae ce fe ff 5a 5a 5a 5a 5a 5a 5a 5a  d.......ZZZZZZZZ
    [   99.408454] Object f2751960: 6b 6b 98 00 ec 00 8e 00 ee 00 6b 6b e3 00 bf 00 kk........kk....
    [   99.408456] Object f2751970: c2 00 6b 6b 6b 6b cd 00 6b 6b 6b 6b 6b 6b e1 00 ..kkkk..kkkkkk..
    [   99.408458] Object f2751980: e0 00 e4 00 6b 6b 74 01 73 00 72 00 71 00 94 00 ....kkt.s.r.q...
    [   99.408460] Object f2751990: 6b 6b 6b 6b f8 00 6b 6b 6b 6b 6b 6b 6b 6b 6b a5 kkkk..kkkkkkkkk.
    [   99.408462] Redzone f27519a0: bb bb bb bb ....
    
    Signed-off-by: Li Dongyang <Jerry87905@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

commit 4581d91b7717152001192112027596fbdeec06f6
Author: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
Date:   Tue Jul 17 22:16:13 2012 +0200

    mac80211_hwsim: fix possible race condition in usage of info->control.sta & control.vif
    
    info->control.sta and control.vif may only be dereferenced during the
    drv_tx call otherwise could lead to use-after-free bugs.
    
    Signed-off-by: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commits)
      HID: add ASUS AIO keyboard model AK1D
      HID: add support for Cypress barcode scanner 04B4:ED81
      HID: Allow drivers to be their own listener
      HID: usbhid: fix error paths in suspend
      HID: usbhid: check for suspend or reset before restarting
      HID: usbhid: replace HID_REPORTED_IDLE with HID_SUSPENDED
      HID: usbhid: inline some simple routines
      HID: usbhid: fix autosuspend calls
      HID: usbhid: fix use-after-free bug
      HID: hid-core: optimize in case of hidraw
      HID: hidraw: fix list->buffer memleak
      HID: uhid: Fix sending events with invalid data
      HID: roccat: added sensor sysfs attribute for Savu
      HID: Add driver for Holtek based keyboards with broken HID
      HID: Add suport for the brightness control keys on HP keyboards
      HID: magicmouse: Implement Multi-touch Protocol B (MT-B)
      HID: magicmouse: Removing report_touches switch
      HID: roccat: rename roccat_common functions to roccat_common2
      HID: roccat: fix wrong hid_err usage on struct usb_device
      HID: roccat: move functionality to roccat-common
      ...

commit 668160e5a80536251b4931a332dfe34d6ec2aeb7
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Jul 19 16:08:21 2012 -0400

    HID: usbhid: fix use-after-free bug
    
    This patch (as1592) fixes an obscure problem in the usbhid driver.
    Under some circumstances, a control or interrupt-OUT URB can be
    submitted twice.  This will happen if the first submission fails; the
    queue pointers aren't updated, so the next time the queue is restarted
    the same URB will be submitted again.
    
    The problem is that raw_report gets deallocated during the first
    submission.  The second submission will then dereference and try to
    free an already-freed region of memory.  The patch fixes the problem
    by setting raw_report to NULL when it is deallocated and checking for
    NULL before dereferencing it.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: Oliver Neukum <oliver@neukum.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit a05b7ea03d72f36edb0cec05e8893803335c61a0
Author: NeilBrown <neilb@suse.de>
Date:   Thu Jul 19 15:59:18 2012 +1000

    md: avoid crash when stopping md array races with closing other open fds.
    
    md will refuse to stop an array if any other fd (or mounted fs) is
    using it.
    When any fs is unmounted of when the last open fd is closed all
    pending IO will be flushed (e.g. sync_blockdev call in __blkdev_put)
    so there will be no pending IO to worry about when the array is
    stopped.
    
    However in order to send the STOP_ARRAY ioctl to stop the array one
    must first get and open fd on the block device.
    If some fd is being used to write to the block device and it is closed
    after mdadm open the block device, but before mdadm issues the
    STOP_ARRAY ioctl, then there will be no last-close on the md device so
    __blkdev_put will not call sync_blockdev.
    
    If this happens, then IO can still be in-flight while md tears down
    the array and bad things can happen (use-after-free and subsequent
    havoc).
    
    So in the case where do_md_stop is being called from an open file
    descriptor, call sync_block after taking the mutex to ensure there
    will be no new openers.
    
    This is needed when setting a read-write device to read-only too.
    
    Cc: stable@vger.kernel.org
    Reported-by: majianpeng <majianpeng@gmail.com>
    Signed-off-by: NeilBrown <neilb@suse.de>

commit b0e40e72be42153cd6473ca1fa69058a30adb2bb
Author: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
Date:   Fri Jul 13 20:52:24 2012 +0200

    mac80211_hwsim: fix race condition with sta/vif pointers
    
    info->control.sta and control.vif may only be dereferenced
    during the drv_tx call otherwise could lead to use-after-free
    bugs.
    
    Signed-off-by: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
    [reword commit message]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit bc187ea6c3b3d20bd190f3ee90c954aee0ce8aad
Author: Roland Dreier <roland@purestorage.com>
Date:   Mon Jul 16 11:04:40 2012 -0700

    target: Check sess_tearing_down in target_get_sess_cmd()
    
    Target core code assumes that target_splice_sess_cmd_list() has set
    sess_tearing_down and moved the list of pending commands to
    sess_wait_list, no more commands will be added to the session; if any
    are added, nothing keeps the se_session from being freed while the
    command is still in flight, which e.g. leads to use-after-free of
    se_cmd->se_sess in target_release_cmd_kref().
    
    To enforce this invariant, put a check of sess_tearing_down inside of
    sess_cmd_lock in target_get_sess_cmd(); any checks before this are
    racy and can lead to the use-after-free described above.  For example,
    the qla_target check in qlt_do_work() checks sess_tearing_down from
    work thread context but then drops all locks before calling
    target_submit_cmd() (as it must, since that is a sleeping function).
    
    However, since no locks are held, anything can happen with respect to
    the session it has looked up -- although it does correctly get
    sess_kref within its lock, so the memory won't be freed while
    target_submit_cmd() is actually running, nothing stops eg an ACL from
    being dropped and calling ->shutdown_session() (which calls into
    target_splice_sess_cmd_list()) before we get to target_get_sess_cmd().
    Once this happens, the se_session memory can be freed as soon as
    target_submit_cmd() returns and qlt_do_work() drops its reference,
    even though we've just added a command to sess_cmd_list.
    
    To prevent this use-after-free, check sess_tearing_down inside of
    sess_cmd_lock right before target_get_sess_cmd() adds a command to
    sess_cmd_list; this is synchronized with target_splice_sess_cmd_list()
    so that every command is either waited for or not added to the queue.
    
    (nab: Keep target_submit_cmd() returning void for now..)
    
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 4b4b8229aeff4ca09b4aee921d383c596146eca0
Author: Alan Cox <alan@linux.intel.com>
Date:   Fri Jul 13 16:14:45 2012 +0200

    mac80211: fix use after free
    
    roc is destroyed then roc->started is referenced. Keep a local cache.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

commit 2a643893e50fde71d7ba84b5592ec61b467b9ab6
Author: Devendra Naga <devendra.aaru@gmail.com>
Date:   Wed Jul 11 14:01:53 2012 -0700

    drivers/rtc/rtc-spear.c: fix use-after-free in spear_rtc_remove()
    
    `config' is freed and is then used in the rtc_device_unregister() call,
    causing a kernel panic.
    
    Signed-off-by: Devendra Naga <devendra.aaru@gmail.com>
    Reviewed-by: Viresh Kumar <viresh.linux@gmail.com>
    Cc: Alessandro Zummo <a.zummo@towertech.it>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 89e1180121f281af16855d4954b9fe3d7354fe73
Author: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
Date:   Wed Jul 11 13:21:41 2012 +0200

    mwl8k: fix possible race condition in info->control.sta use
    
    info->control.sta may only be dereferenced during the drv_tx call otherwise
    could lead to use-after-free bugs
    
    Reported-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Thomas Huehn <thomas@net.t-labs.tu-berlin.de>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 2d4f4f3384d4ef4f7c571448e803a1ce721113d5
Author: NeilBrown <neilb@suse.de>
Date:   Mon Jul 9 11:34:13 2012 +1000

    md/raid1: fix use-after-free bug in RAID1 data-check code.
    
    This bug has been present ever since data-check was introduce
    in 2.6.16.  However it would only fire if a data-check were
    done on a degraded array, which was only possible if the array
    has 3 or more devices.  This is certainly possible, but is quite
    uncommon.
    
    Since hot-replace was added in 3.3 it can happen more often as
    the same condition can arise if not all possible replacements are
    present.
    
    The problem is that as soon as we submit the last read request, the
    'r1_bio' structure could be freed at any time, so we really should
    stop looking at it.  If the last device is being read from we will
    stop looking at it.  However if the last device is not due to be read
    from, we will still check the bio pointer in the r1_bio, but the
    r1_bio might already be free.
    
    So use the read_targets counter to make sure we stop looking for bios
    to submit as soon as we have submitted them all.
    
    This fix is suitable for any -stable kernel since 2.6.16.
    
    Cc: stable@vger.kernel.org
    Reported-by: Arnold Schulz <arnysch@gmx.net>
    Signed-off-by: NeilBrown <neilb@suse.de>

commit 9ab4233dd08036fe34a89c7dc6f47a8bf2eb29eb
Author: Andy Lutomirski <luto@amacapital.net>
Date:   Thu Jul 5 16:00:11 2012 -0700

    mm: Hold a file reference in madvise_remove
    
    Otherwise the code races with munmap (causing a use-after-free
    of the vma) or with close (causing a use-after-free of the struct
    file).
    
    The bug was introduced by commit 90ed52ebe481 ("[PATCH] holepunch: fix
    mmap_sem i_mutex deadlock")
    
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: Miklos Szeredi <mszeredi@suse.cz>
    Cc: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Andy Lutomirski <luto@amacapital.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3578ddba1ae93263d373e7bc85fd38d1f0368b78
Author: Roland Dreier <roland@purestorage.com>
Date:   Mon Jun 4 23:37:34 2012 -0700

    tcm_qla2xxx: Don't insert nacls without sessions into the btree
    
    When we create an explicit node ACL in tcm_qla2xxx_make_nodeacl(),
    there is a call to tcm_qla2xxx_setup_nacl_from_rport(), which puts the
    node ACL into the lport_fcport_map even though there is no session yet
    for the initiator.  Since the only time we remove entries from this
    map is when we free a session, this means that if we later delete this
    node ACL without the initiator ever creating a session, we'll leave
    the nacl pointer in the btree pointing at freed memory.
    
    This is especially bad if that initiator later does send us a command
    that would cause us to create a dynamic ACL and session: we'll find
    the stale freed nacl pointer in the btree and end up with use-after-free.
    
    We could add more code to clear the btree entry when deleting the
    explicit nacl, but the original insertion is pointless: without a
    session attached, we'll just have to update the entry when a session
    appears anyway.  So we can just delete tcm_qla2xxx_setup_nacl_from_rport()
    and the code that calls it.
    
    Signed-off-by: Roland Dreier <roland@purestorage.com>
    Cc: Chad Dupuis <chad.dupuis@qlogic.com>
    Cc: Giridhar Malavali <giridhar.malavali@qlogic.com>
    Cc: Arun Easi <arun.easi@qlogic.com>
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit e407fd655bf9b40c38cba29aa7d38149989798bb
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Mon Jun 4 10:41:42 2012 +0200

    iio: Fix potential use after free
    
    There is no guarantee that the last reference to the iio device has already been
    dropped when iio_device_free is called. This means that we can up calling
    iio_dev_release after iio_device_free which will lead to a use after free. As
    the general rule the struct containing the device should always be freed in the
    release callback.
    
    This is what this patch does, it moves freeing the iio device struct as well as
    releasing the idr reference to the release callback. To ensure that the device
    is not freed before calling iio_device_free the device_unregister call in
    iio_device_unregister is broken apart. iio_device_unregister will now only call
    device_del to remove the device from the system and iio_device_free will call
    put_device to drop the reference we obtained in iio_devce_alloc.
    
    We also have to take care that calling iio_device_free without having called
    iio_device_register still works (i.e. this can happen if something failed during
    device initialization). For this to work properly two minor changes were
    necessary: channel_attr_list needs to be initialized in iio_device_alloc and we
    have to check whether the chrdev has been registered before releasing it in
    iio_device_release.
    
    This change also brings iio_device_unregister and iio_device_free more in sync
    with iio_device_register and iio_device_alloc which call device_add and
    device_initialize respectively.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Jonathan Cameron <jic23@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commits)
      net/smsc911x: Repair broken failure paths
      virtio-net: remove useless disable on freeze
      netdevice: Update netif_dbg for CONFIG_DYNAMIC_DEBUG
      drop_monitor: Add module alias to enable automatic module loading
      genetlink: Build a generic netlink family module alias
      net: add MODULE_ALIAS_NET_PF_PROTO_NAME
      r6040: Do a Proper deinit at errorpath and also when driver unloads (calling r6040_remove_one)
      r6040: disable pci device if the subsequent calls (after pci_enable_device) fails
      skb: avoid unnecessary reallocations in __skb_cow
      net: sh_eth: fix the rxdesc pointer when rx descriptor empty happens
      asix: allow full size 8021Q frames to be received
      rds_rdma: don't assume infiniband device is PCI
      l2tp: fix oops in L2TP IP sockets for connect() AF_UNSPEC case
      mac80211: fix ADDBA declined after suspend with wowlan
      wlcore: fix undefined symbols when CONFIG_PM is not defined
      mac80211: fix flag check for QoS NOACK frames
      ath9k_hw: apply internal regulator settings on AR933x
      ath9k_hw: update AR933x initvals to fix issues with high power devices
      ath9k: fix a use-after-free-bug when ath_tx_setup_buffer() fails
      ath9k: stop rx dma before stopping tx
      ...

commit 81357a281dcc454841532c46b30e6f2ba12b73ea
Author: Felix Fietkau <nbd@openwrt.org>
Date:   Thu May 24 14:32:20 2012 +0200

    ath9k: fix a use-after-free-bug when ath_tx_setup_buffer() fails
    
    ath_tx_setup_buffer() can fail if there is no ath_buf left, or if mapping DMA
    failed. In this case it frees the skb passed to it.
    If ath_tx_setup_buffer is called from ath_tx_form_aggr, the skb is still
    linked into the tid buffer list and must be dequeued before being released.
    
    Signed-off-by: Felix Fietkau <nbd@openwrt.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d5e50a51ccbda36b379aba9d1131a852eb908dda
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Wed May 9 09:37:30 2012 +0200

    s390/pfault: fix task state race
    
    When setting the current task state to TASK_UNINTERRUPTIBLE this can
    race with a different cpu. The other cpu could set the task state after
    it inspected it (while it was still TASK_RUNNING) to TASK_RUNNING which
    would change the state from TASK_UNINTERRUPTIBLE to TASK_RUNNING again.
    
    This race was always present in the pfault interrupt code but didn't
    cause anything harmful before commit f2db2e6c "[S390] pfault: cpu hotplug
    vs missing completion interrupts" which relied on the fact that after
    setting the task state to TASK_UNINTERRUPTIBLE the task would really
    sleep.
    Since this is not necessarily the case the result may be a list corruption
    of the pfault_list or, as observed, a use-after-free bug while trying to
    access the task_struct of a task which terminated itself already.
    
    To fix this, we need to get a reference of the affected task when receiving
    the initial pfault interrupt and add special handling if we receive yet
    another initial pfault interrupt when the task is already enqueued in the
    pfault list.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Reviewed-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Cc: <stable@vger.kernel.org> # needed for v3.0 and newer
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit fe2429b0966a7ec42b5fe3bf96f0f10de0a3b536
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon Apr 23 15:58:45 2012 +1000

    xfs: fix buffer lookup race on allocation failure
    
    When memory allocation fails to add the page array or tht epages to
    a buffer during xfs_buf_get(), the buffer is left in the cache in a
    partially initialised state. There is enough state left for the next
    lookup on that buffer to find the buffer, and for the buffer to then
    be used without finishing the initialisation.  As a result, when an
    attempt to do IO on the buffer occurs, it fails with EIO because
    there are no pages attached to the buffer.
    
    We cannot remove the buffer from the cache immediately and free it,
    because there may already be a racing lookup that is blocked on the
    buffer lock. Hence the moment we unlock the buffer to then free it,
    the other user is woken and we have a use-after-free situation.
    
    To avoid this race condition altogether, allocate the pages for the
    buffer before we insert it into the cache.  This then means that we
    don't have an allocation  failure case to deal after the buffer is
    already present in the cache, and hence avoid the problem
    altogether.  In most cases we won't have racing inserts for the same
    buffer, and so won't increase the memory pressure allocation before
    insertion may entail.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Mark Tinguely <tinguely@sgi.com>
    Signed-off-by: Ben Myers <bpm@sgi.com>

commit e4594bb50518eb89c447be97dabd5bd99f405d71
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Fri May 4 12:32:04 2012 +0200

    [SCSI] virtio_scsi: fix TMF use-after-free
    
    Fix a use-after-free in the TMF path, where cmd may have been already
    freed by virtscsi_complete_free when wait_for_completion restarts
    executing virtscsi_tmf.  Technically a race, but in practice the command
    will always be freed long before the completion waiter is awoken.
    
    The fix is to make callers specifying a completion responsible for
    freeing the command in all cases.
    
    Signed-off-by: Hu Tao <hutao@cn.fujitsu.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 169ebd90131b2ffca74bb2dbe7eeacd39fb83714
Author: Jan Kara <jack@suse.cz>
Date:   Thu May 3 14:48:03 2012 +0200

    writeback: Avoid iput() from flusher thread
    
    Doing iput() from flusher thread (writeback_sb_inodes()) can create problems
    because iput() can do a lot of work - for example truncate the inode if it's
    the last iput on unlinked file. Some filesystems depend on flusher thread
    progressing (e.g. because they need to flush delay allocated blocks to reduce
    allocation uncertainty) and so flusher thread doing truncate creates
    interesting dependencies and possibilities for deadlocks.
    
    We get rid of iput() in flusher thread by using the fact that I_SYNC inode
    flag effectively pins the inode in memory. So if we take care to either hold
    i_lock or have I_SYNC set, we can get away without taking inode reference
    in writeback_sb_inodes().
    
    As a side effect of these changes, we also fix possible use-after-free in
    wb_writeback() because inode_wait_for_writeback() call could try to reacquire
    i_lock on the inode that was already free.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>

commit af94bf6db1d58d26f1cdab145b6312ad363254a6
Author: Alexander Duyck <alexander.h.duyck@intel.com>
Date:   Wed May 2 21:19:14 2012 +0000

    ixgbe: Fix use after free on module remove
    
    While testing the TCP changes I had to fix an issue in order to be able to
    load and unload the module.
    
    The recent patch that added thermal sensor support added a use after free
    bug on module unload with an 82598 adapter in the system.  To resolve the
    issue I have updated the code so that when we free the info_kobj we set it
    back to NULL.
    
    I suspect there are likely other bugs present, but I will leave that for
    another patch that can undergo more testing.
    
    I am submitting this directly to net-next since this fixes a fairly serious
    bug that will lock up the ixgbe module until the system is rebooted.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@intel.com>
    Cc: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Btrfs: reduce lock contention during extent insertion
      Btrfs: avoid deadlocks from GFP_KERNEL allocations during btrfs_real_readdir
      Btrfs: Fix space checking during fs resize
      Btrfs: fix block_rsv and space_info lock ordering
      Btrfs: Prevent root_list corruption
      Btrfs: fix repair code for RAID10
      Btrfs: do not start delalloc inodes during sync
      Btrfs: fix that check_int_data mount option was ignored
      Btrfs: don't count CRC or header errors twice while scrubbing
      Btrfs: fix btrfs_ioctl_dev_info() crash on missing device
      btrfs: don't return EINTR
      Btrfs: double unlock bug in error handling
      Btrfs: always store the mirror we read the eb from
      fs/btrfs/volumes.c: add missing free_fs_devices
      btrfs: fix early abort in 'remount'
      Btrfs: fix max chunk size check in chunk allocator
      Btrfs: add missing read locks in backref.c
      Btrfs: don't call free_extent_buffer twice in iterate_irefs
      Btrfs: Make free_ipath() deal gracefully with NULL pointers
      Btrfs: avoid possible use-after-free in clear_extent_bit()
      ...

commit cdc6a3952558f00b1bc3b6401e1cf98797632fe2
Author: Li Zefan <lizf@cn.fujitsu.com>
Date:   Mon Mar 12 16:39:48 2012 +0800

    Btrfs: avoid possible use-after-free in clear_extent_bit()
    
    clear_extent_bit()
    {
        next_node = rb_next(&state->rb_node);
        ...
        clear_state_bit(state);  <-- this may free next_node
        if (next_node) {
            state = rb_entry(next_node);
            ...
        }
    }
    
    clear_state_bit() calls merge_state() which may free the next node
    of the passing extent_state, so clear_extent_bit() may end up
    referencing freed memory.
    
    Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>

commit root when loading free space cache
      Btrfs: fix use-after-free in __btrfs_end_transaction
      Btrfs: check return value of bio_alloc() properly
      Btrfs: remove lock assert from get_restripe_target()
      Btrfs: fix eof while discarding extents
      Btrfs: fix uninit variable in repair_eb_io_failure
      Revert "Btrfs: increase the global block reserve estimates"

commit a2f892060f174e5f90041167ca00eb9e68badcb8
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Apr 13 10:31:32 2012 +0200

    TTY: hvc, fix TTY refcounting
    
    A -next commit "TTY: HVC, use tty from tty_port" switched the driver
    to use tty_port helper for tty refcounting. But it omitted to remove
    manual tty refcounting from open, close and hangup. So now we are
    getting random crashes caused by use-after-free:
    Unable to handle kernel paging request for data at address 0xc0000003f9d550
    Faulting instruction address: 0xc0000000001b7f40
    Oops: Kernel access of bad area, sig: 11 [#1]
    ...
    NIP: c0000000001b7f40 LR: c0000000001b7f14 CTR: c0000000000e04f0
    ...
    NIP [c0000000001b7f40] .__kmalloc+0x70/0x230
    LR [c0000000001b7f14] .__kmalloc+0x44/0x230
    Call Trace:
    [c0000003f68bf930] [c0000003f68bf9b0] 0xc0000003f68bf9b0 (unreliable)
    [c0000003f68bf9e0] [c0000000001e5424] .alloc_fdmem+0x24/0x70
    [c0000003f68bfa60] [c0000000001e54f8] .alloc_fdtable+0x88/0x130
    [c0000003f68bfaf0] [c0000000001e5924] .dup_fd+0x384/0x450
    [c0000003f68bfbd0] [c00000000009a310] .copy_process+0x880/0x11d0
    [c0000003f68bfcd0] [c00000000009aee0] .do_fork+0x70/0x400
    [c0000003f68bfdc0] [c0000000000141c4] .sys_clone+0x54/0x70
    [c0000003f68bfe30] [c000000000009aa0] .ppc_clone+0x8/0xc
    
    Fix that by complete removal of tty_kref_get/put in open/close/hangup
    paths.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Reported-and-tested-by: Michael Neuling <mikey@neuling.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: ppc-dev <linuxppc-dev@lists.ozlabs.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4edc2ca388d62abffe38149f6ac00e749ea721c5
Author: Dave Jones <davej@redhat.com>
Date:   Thu Apr 12 16:03:56 2012 -0400

    Btrfs: fix use-after-free in __btrfs_end_transaction
    
    49b25e0540904be0bf558b84475c69d72e4de66e introduced a use-after-free bug
    that caused spurious -EIO's to be returned.
    
    Do the check before we free the transaction.
    
    Cc: David Sterba <dsterba@suse.cz>
    Cc: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit 110c43304db6f06490961529536c362d9ac5732f
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Fri Apr 6 10:49:10 2012 +0200

    net: fix a race in sock_queue_err_skb()
    
    As soon as an skb is queued into socket error queue, another thread
    can consume it, so we are not allowed to reference skb anymore, or risk
    use after free.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4a7e7c2ad540e54c75489a70137bf0ec15d3a127
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Thu Apr 5 22:17:46 2012 +0000

    netlink: fix races after skb queueing
    
    As soon as an skb is queued into socket receive_queue, another thread
    can consume it, so we are not allowed to reference skb anymore, or risk
    use after free.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 05ef1d7c4a5b6d09cadd2b8e9b3c395363d1a89c
Author: Tejun Heo <tj@kernel.org>
Date:   Sun Apr 1 12:09:56 2012 -0700

    cgroup: introduce struct cfent
    
    This patch adds cfent (cgroup file entry) which is the association
    between a cgroup and a file.  This is in-cgroup representation of
    files under a cgroup directory.  This simplifies walking walking
    cgroup files and thus cgroup_clear_directory(), which is now
    implemented in two parts - cgroup_rm_file() and a loop around it.
    
    cgroup_rm_file() will be used to implement cftype removal and cfent is
    scheduled to serve cgroup specific per-file data (e.g. for sysfs-like
    "sever" semantics).
    
    v2: - cfe was freed from cgroup_rm_file() which led to use-after-free
          if the file had openers at the time of removal.  Moved to
          cgroup_diput().
    
        - cgroup_clear_directory() triggered WARN_ON_ONCE() if d_subdirs
          wasn't empty after removing all files.  This triggered
          spuriously if some files were open during directory clearing.
          Removed.
    
    v3: - In cgroup_diput(), WARN_ONCE(!list_empty(&cfe->node)) could be
          spuriously triggered for root cgroups because they don't go
          through cgroup_clear_directory() on unmount.  Don't trigger WARN
          for root cgroups.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Acked-by: Li Zefan <lizf@cn.fujitsu.com>
    Cc: Glauber Costa <glommer@parallels.com>

commits)
      ACPI throttling: fix endian bug in acpi_read_throttling_status()
      Disable MCP limit exceeded messages from Intel IPS driver
      ACPI video: Don't start video device until its associated input device has been allocated
      ACPI video: Harden video bus adding.
      ACPI: Add support for exposing BGRT data
      ACPI: export acpi_kobj
      ACPI: Fix logic for removing mappings in 'acpi_unmap'
      CPER failed to handle generic error records with multiple sections
      ACPI: Clean redundant codes in scan.c
      ACPI: Fix unprotected smp_processor_id() in acpi_processor_cst_has_changed()
      ACPI: consistently use should_use_kmap()
      PNPACPI: Fix device ref leaking in acpi_pnp_match
      ACPI: Fix use-after-free in acpi_map_lsapic
      ACPI: processor_driver: add missing kfree
      ACPI, APEI: Fix incorrect APEI register bit width check and usage
      Update documentation for parameter *notrigger* in einj.txt
      ACPI, APEI, EINJ, new parameter to control trigger action
      ACPI, APEI, EINJ, limit the range of einj_param
      ACPI, APEI, Fix ERST header length check
      cpuidle: power_usage should be declared signed integer
      ...

commit ac909ec308ce8d5177963c780564824d12bc3fa2
Author: Petr Vandrovec <petr@vmware.com>
Date:   Thu Mar 8 13:33:24 2012 -0800

    ACPI: Fix use-after-free in acpi_map_lsapic
    
    When processor is being hot-added to the system, acpi_map_lsapic invokes
    ACPI _MAT method to find APIC ID and flags, verifies that returned structure
    is indeed ACPI's local APIC structure, and that flags contain MADT_ENABLED
    bit.  Then saves APIC ID, frees structure - and accesses structure when
    computing arguments for acpi_register_lapic call.  Which sometime leads
    to acpi_register_lapic call being made with second argument zero, failing
    to bring processor online with error 'Unable to map lapic to logical cpu
    number'.
    
    As lapic->lapic_flags & ACPI_MADT_ENABLED was already confirmed to be non-zero
    few lines above, we can just pass unconditional ACPI_MADT_ENABLED to the
    acpi_register_lapic.
    
    Signed-off-by: Petr Vandrovec <petr@vmware.com>
    Signed-off-by: Alok N Kataria <akataria@vmware.com>
    Reviewed-by: Toshi Kani <toshi.kani@hp.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit d72308bff5c2fa207949a5925b020bce74495e33
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Mon Mar 19 16:00:26 2012 +0100

    mac80211: fix possible tid_rx->reorder_timer use after free
    
    Is possible that we will arm the tid_rx->reorder_timer after
    del_timer_sync() in ___ieee80211_stop_rx_ba_session(). We need to stop
    timer after RCU grace period finish, so move it to
    ieee80211_free_tid_rx(). Timer will not be armed again, as
    rcu_dereference(sta->ampdu_mlme.tid_rx[tid]) will return NULL.
    
    Debug object detected problem with the following warning:
    ODEBUG: free active (active state 0) object type: timer_list hint: sta_rx_agg_reorder_timer_expired+0x0/0xf0 [mac80211]
    
    Bug report (with all warning messages):
    https://bugzilla.redhat.com/show_bug.cgi?id=804007
    
    Reported-by: "jan p. springer" <jsd@igroup.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 0956a8c20b23d429e79ff86d4325583fc06f9eb4
Author: tom.leiming@gmail.com <tom.leiming@gmail.com>
Date:   Thu Mar 22 03:22:18 2012 +0000

    usbnet: increase URB reference count before usb_unlink_urb
    
    Commit 4231d47e6fe69f061f96c98c30eaf9fb4c14b96d(net/usbnet: avoid
    recursive locking in usbnet_stop()) fixes the recursive locking
    problem by releasing the skb queue lock, but it makes usb_unlink_urb
    racing with defer_bh, and the URB to being unlinked may be freed before
    or during calling usb_unlink_urb, so use-after-free problem may be
    triggerd inside usb_unlink_urb.
    
    The patch fixes the use-after-free problem by increasing URB
    reference count with skb queue lock held before calling
    usb_unlink_urb, so the URB won't be freed until return from
    usb_unlink_urb.
    
    Cc: stable@kernel.org
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Oliver Neukum <oliver@neukum.org>
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Ming Lei <tom.leiming@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 90481622d75715bfcb68501280a917dbfe516029
Author: David Gibson <david@gibson.dropbear.id.au>
Date:   Wed Mar 21 16:34:12 2012 -0700

    hugepages: fix use after free bug in "quota" handling
    
    hugetlbfs_{get,put}_quota() are badly named.  They don't interact with the
    general quota handling code, and they don't much resemble its behaviour.
    Rather than being about maintaining limits on on-disk block usage by
    particular users, they are instead about maintaining limits on in-memory
    page usage (including anonymous MAP_PRIVATE copied-on-write pages)
    associated with a particular hugetlbfs filesystem instance.
    
    Worse, they work by having callbacks to the hugetlbfs filesystem code from
    the low-level page handling code, in particular from free_huge_page().
    This is a layering violation of itself, but more importantly, if the
    kernel does a get_user_pages() on hugepages (which can happen from KVM
    amongst others), then the free_huge_page() can be delayed until after the
    associated inode has already been freed.  If an unmount occurs at the
    wrong time, even the hugetlbfs superblock where the "quota" limits are
    stored may have been freed.
    
    Andrew Barry proposed a patch to fix this by having hugepages, instead of
    storing a pointer to their address_space and reaching the superblock from
    there, had the hugepages store pointers directly to the superblock,
    bumping the reference count as appropriate to avoid it being freed.
    Andrew Morton rejected that version, however, on the grounds that it made
    the existing layering violation worse.
    
    This is a reworked version of Andrew's patch, which removes the extra, and
    some of the existing, layering violation.  It works by introducing the
    concept of a hugepage "subpool" at the lower hugepage mm layer - that is a
    finite logical pool of hugepages to allocate from.  hugetlbfs now creates
    a subpool for each filesystem instance with a page limit set, and a
    pointer to the subpool gets added to each allocated hugepage, instead of
    the address_space pointer used now.  The subpool has its own lifetime and
    is only freed once all pages in it _and_ all other references to it (i.e.
    superblocks) are gone.
    
    subpools are optional - a NULL subpool pointer is taken by the code to
    mean that no subpool limits are in effect.
    
    Previous discussion of this bug found in:  "Fix refcounting in hugetlbfs
    quota handling.". See:  https://lkml.org/lkml/2011/8/11/28 or
    http://marc.info/?l=linux-mm&m=126928970510627&w=1
    
    v2: Fixed a bug spotted by Hillf Danton, and removed the extra parameter to
    alloc_huge_page() - since it already takes the vma, it is not necessary.
    
    Signed-off-by: Andrew Barry <abarry@cray.com>
    Signed-off-by: David Gibson <david@gibson.dropbear.id.au>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Minchan Kim <minchan.kim@gmail.com>
    Cc: Hillf Danton <dhillf@gmail.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit aa7c62af10b6ba7f0496ee3a1a760ad216426720
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Thu Mar 8 16:00:58 2012 +0000

    intel, gma500, lvds: Fix use after free and mem leak in psb_intel_lvds_init()
    
    In psb_intel_lvds_init(), if we fail to allocate memory for
    'psb_intel_connector' we free the memory we previously allocated for
    'psb_intel_encoder', but we then proceed to use that free'd pointer
    when we do 'psb_intel_encoder->dev_priv = lvds_priv;'.
    
    We may also leak the memory we allocated for 'psb_intel_encoder' if we
    'goto failed_connector;' and the variable goes out of scope.
    
    While I was there anyway, I also removed the pointless 'if
    (psb_intel_connector)' before freeing it at the 'failed_connector:'
    label - kfree() deals gracefully with NULL pointers, so it is not
    needed.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 2a90957f2cfc2bf0b705a62a97830cf0d42a5a40
Author: Arve Hjønnevåg <arve@android.com>
Date:   Thu Mar 8 15:43:36 2012 -0800

    Staging: android: binder: Fix use-after-free bug
    
    binder_update_page_range could read freed memory if the vma of the
    selected process was freed right before the check that the vma
    belongs to the mm struct it just locked.
    
    If the vm_mm pointer in that freed vma struct had also been rewritten
    with a value that matched the locked mm struct, then the code would
    proceed and possibly modify the freed vma.
    
    Signed-off-by: Arve Hjønnevåg <arve@android.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 382436f8804fe1cb20b9a2a811a10eb2d8554721
Author: Jörn Engel <joern@logfs.org>
Date:   Wed Feb 15 16:51:32 2012 -0500

    target: fix use after free in target_report_luns
    
    Fix possible NULL pointer dereference in target_report_luns failure path.
    
    Signed-off-by: Joern Engel <joern@logfs.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit a6b0d5c8dbfd428717fc4db4c36757783f391c7b
Author: Chris Mason <chris.mason@oracle.com>
Date:   Mon Feb 20 20:53:43 2012 -0500

    Btrfs: make sure we update latest_bdev
    
    When we are setting up the mount, we close all the
    devices that were not actually part of the metadata we found.
    
    But, we don't make sure that one of those devices wasn't
    fs_devices->latest_bdev, which means we can do a use after free
    on the one we closed.
    
    This updates latest_bdev as it goes.
    
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit 24d2b8c0ac5c8ec41c26ed432238b0e027184882
Author: Ulisses Furquim <ulisses@profusion.mobi>
Date:   Mon Jan 30 18:26:29 2012 -0200

    Bluetooth: Fix possible use after free in delete path
    
    We need to use the _sync() version for cancelling the info and security
    timer in the L2CAP connection delete path. Otherwise the delayed work
    handler might run after the connection object is freed.
    
    Signed-off-by: Ulisses Furquim <ulisses@profusion.mobi>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

commit 127074bfa3c11c12e0160437e31b08c6b27412a4
Author: Ulisses Furquim <ulisses@profusion.mobi>
Date:   Mon Jan 30 18:26:29 2012 -0200

    Bluetooth: Fix possible use after free in delete path
    
    We need to use the _sync() version for cancelling the info and security
    timer in the L2CAP connection delete path. Otherwise the delayed work
    handler might run after the connection object is freed.
    
    Signed-off-by: Ulisses Furquim <ulisses@profusion.mobi>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Johan Hedberg <johan.hedberg@intel.com>

commit 96e02d1586782eadf051fa3d6bc4132d2447ac2c
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Sat Feb 4 10:47:10 2012 +0100

    exec: fix use-after-free bug in setup_new_exec()
    
    Setting the task name is done within setup_new_exec() by accessing
    bprm->filename. However this happens after flush_old_exec().
    This may result in a use after free bug, flush_old_exec() may
    "complete" vfork_done, which will wake up the parent which in turn
    may free the passed in filename.
    To fix this add a new tcomm field in struct linux_binprm which
    contains the now early generated task name until it is used.
    
    Fixes this bug on s390:
    
      Unable to handle kernel pointer dereference at virtual kernel address 0000000039768000
      Process kworker/u:3 (pid: 245, task: 000000003a3dc840, ksp: 0000000039453818)
      Krnl PSW : 0704000180000000 0000000000282e94 (setup_new_exec+0xa0/0x374)
      Call Trace:
      ([<0000000000282e2c>] setup_new_exec+0x38/0x374)
       [<00000000002dd12e>] load_elf_binary+0x402/0x1bf4
       [<0000000000280a42>] search_binary_handler+0x38e/0x5bc
       [<0000000000282b6c>] do_execve_common+0x410/0x514
       [<0000000000282cb6>] do_execve+0x46/0x58
       [<00000000005bce58>] kernel_execve+0x28/0x70
       [<000000000014ba2e>] ____call_usermodehelper+0x102/0x140
       [<00000000005bc8da>] kernel_thread_starter+0x6/0xc
       [<00000000005bc8d4>] kernel_thread_starter+0x0/0xc
      Last Breaking-Event-Address:
       [<00000000002830f0>] setup_new_exec+0x2fc/0x374
    
      Kernel panic - not syncing: Fatal exception: panic_on_oops
    
    Reported-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4b2453114f770fe6b2fe5c191f9a1539f52ce2ce
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Fri Feb 3 23:14:19 2012 +0100

    gma500, lvds: Fix use after free and mem leak in psb_intel_lvds_init()
    
    In psb_intel_lvds_init(), if we fail to allocate memory for
    'psb_intel_connector' we free the memory we previously allocated for
    'psb_intel_encoder', but we then proceed to use that free'd pointer
    when we do 'psb_intel_encoder->dev_priv = lvds_priv;'.
    
    We may also leak the memory we allocated for 'psb_intel_encoder' if we
    'goto failed_connector;' and the variable goes out of scope.
    
    While I was there anyway, I also removed the pointless 'if
    (psb_intel_connector)' before freeing it at the 'failed_connector:'
    label - kfree() deals gracefully with NULL pointers, so it is not
    needed.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Acked-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 45c7f75fd4b57035cd35954986a2faefb07dac9d
Author: Russell King <rmk+kernel@arm.linux.org.uk>
Date:   Fri Jan 20 23:09:42 2012 +0000

    MFD: mcp-sa11x0: convert mcp-sa11x0 to use platform resources
    
    Patch taken from af9081ae64 (ARM: sa1100: Refactor mcp-sa11x0 to use
    platform resources.) by Jochen Friedrich <jochen@scram.de>, and fixes
    applied.
    
    We can safely do this now that we have sanitized host removal; the
    original patch had use-after-free bugs in the removal code.  Not only
    that, but there was no checking of the ioremap() return.
    
    The final change over Jochen's patch is that we wrap the base pointer
    selection inside the various register indexes, which reduces the
    possibility of the wrong register index being used.
    
    Acked-by: Jochen Friedrich <jochen@scram.de>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit de47a9cd62771e3e78954d855d2304fbad4c5a44
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Feb 2 15:25:16 2012 +0000

    drm/radeon: fix use after free in ATRM bios reading code.
    
    Fixes:
    https://bugs.freedesktop.org/show_bug.cgi?id=45503
    
    Reported-and-Debugged-by: mlambda@gmail.com
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commits)
      rds: Make rds_sock_lock BH rather than IRQ safe.
      netprio_cgroup.h: dont include module.h from other includes
      net: flow_dissector.c missing include linux/export.h
      team: send only changed options/ports via netlink
      net/hyperv: fix possible memory leak in do_set_multicast()
      drivers/net: dsa/mv88e6xxx.c files need linux/module.h
      stmmac: added PCI identifiers
      llc: Fix race condition in llc_ui_recvmsg
      stmmac: fix phy naming inconsistency
      dsa: Add reporting of silicon revision for Marvell 88E6123/88E6161/88E6165 switches.
      tg3: fix ipv6 header length computation
      skge: add byte queue limit support
      mv643xx_eth: Add Rx Discard and Rx Overrun statistics
      bnx2x: fix compilation error with SOE in fw_dump
      bnx2x: handle CHIP_REVISION during init_one
      bnx2x: allow user to change ring size in ISCSI SD mode
      bnx2x: fix Big-Endianess in ethtool -t
      bnx2x: fixed ethtool statistics for MF modes
      bnx2x: credit-leakage fixup on vlan_mac_del_all
      macvlan: fix a possible use after free
      ...

commit c83f1d7e71625801c72f4013291194e09b6f0a6e
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Mon Jan 23 22:28:44 2012 +0100

    ASoC: wm2000: Fix use-after-free - don't release_firmware() twice on error
    
    In wm2000_i2c_probe(), if we take the true branch in
    
    "
      ret = snd_soc_register_codec(&i2c->dev, &soc_codec_dev_wm2000,
                                   NULL, 0);
      if (ret != 0)
              goto err_fw;
    "
    
    then we'll release_firmware(fw) at the 'err_fw' label. But we've already
    done that just a few lines above. That's a use-after-free bug.
    
    This patch restructures the code so that we always call
    release_firmware(fw) before leaving the function, but only ever call
    it once.
    This means that we have to initialize 'fw' to NULL since some paths
    may now end up calling it without having called request_firmware(),
    but since request_firmware() deals gracefully with NULL pointers, we
    are fine if we just NULL initialize it.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 4ec7ac1203bcf21f5e3d977c9818b1a56c9ef40d
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Mon Jan 23 05:38:59 2012 +0000

    macvlan: fix a possible use after free
    
    Commit bc416d9768 (macvlan: handle fragmented multicast frames) added a
    possible use after free in macvlan_handle_frame(), since
    ip_check_defrag() uses pskb_may_pull() : skb header can be reallocated.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Ben Greear <greearb@candelatech.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 54b466e44b1c7809144bbd8cd6be3f85877ca46f
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Jan 17 21:26:11 2012 +0100

    cfq-iosched: fix use-after-free of cfqq
    
    With the changes in life time management between the cfq IO contexts
    and the cfq queues, we now risk having cfqd->active_queue being
    freed when cfq_slice_expired() is being called. cfq_preempt_queue()
    caches this queue and uses it after calling said function, causing
    a use-after-free condition. This triggers the following oops,
    when cfqq_type() attempts to dereference it:
    
    BUG: unable to handle kernel paging request at ffff8800746c4f0c
    IP: [<ffffffff81266d59>] cfqq_type+0xb/0x20
    PGD 18d4063 PUD 1fe15067 PMD 1ffb9067 PTE 80000000746c4160
    Oops: 0000 [#1] SMP DEBUG_PAGEALLOC
    CPU 3
    Modules linked in:
    
    Pid: 1, comm: init Not tainted 3.2.0-josef+ #367 Bochs Bochs
    RIP: 0010:[<ffffffff81266d59>]  [<ffffffff81266d59>] cfqq_type+0xb/0x20
    RSP: 0018:ffff880079c11778  EFLAGS: 00010046
    RAX: 0000000000000000 RBX: ffff880076f3df08 RCX: 0000000000000000
    RDX: 0000000000000006 RSI: ffff880074271888 RDI: ffff8800746c4f08
    RBP: ffff880079c11778 R08: 0000000000000078 R09: 0000000000000001
    R10: 09f911029d74e35b R11: 09f911029d74e35b R12: ffff880076f337f0
    R13: ffff8800746c4f08 R14: ffff8800746c4f08 R15: 0000000000000002
    FS:  00007f62fd44f700(0000) GS:ffff88007cd80000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: ffff8800746c4f0c CR3: 0000000076c21000 CR4: 00000000000006e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    Process init (pid: 1, threadinfo ffff880079c10000, task ffff880079c0a040)
    Stack:
     ffff880079c117c8 ffffffff812683d8 ffff880079c117a8 ffffffff8125de43
     ffff8800744fcf48 ffff880074b43e98 ffff8800770c8828 ffff880074b43e98
     0000000000000003 0000000000000000 ffff880079c117f8 ffffffff81254149
    Call Trace:
     [<ffffffff812683d8>] cfq_insert_request+0x3f5/0x47c
     [<ffffffff8125de43>] ? blk_recount_segments+0x20/0x31
     [<ffffffff81254149>] __elv_add_request+0x1ca/0x200
     [<ffffffff8125aa99>] blk_queue_bio+0x2ef/0x312
     [<ffffffff81258f7b>] generic_make_request+0x9f/0xe0
     [<ffffffff8125907b>] submit_bio+0xbf/0xca
     [<ffffffff81136ec7>] submit_bh+0xdf/0xfe
     [<ffffffff81176d04>] ext3_bread+0x50/0x99
     [<ffffffff811785b3>] dx_probe+0x38/0x291
     [<ffffffff81178864>] ext3_dx_find_entry+0x58/0x219
     [<ffffffff81178ad5>] ext3_find_entry+0xb0/0x406
     [<ffffffff8110c4d5>] ? cache_alloc_debugcheck_after.isra.46+0x14d/0x1a0
     [<ffffffff8110cfbd>] ? kmem_cache_alloc+0xef/0x191
     [<ffffffff8117a330>] ext3_lookup+0x39/0xe1
     [<ffffffff81119461>] d_alloc_and_lookup+0x45/0x6c
     [<ffffffff8111ac41>] do_lookup+0x1e4/0x2f5
     [<ffffffff8111aef6>] link_path_walk+0x1a4/0x6ef
     [<ffffffff8111b557>] path_lookupat+0x59/0x5ea
     [<ffffffff8127406c>] ? __strncpy_from_user+0x30/0x5a
     [<ffffffff8111bce0>] do_path_lookup+0x23/0x59
     [<ffffffff8111cfd6>] user_path_at_empty+0x53/0x99
     [<ffffffff8107b37b>] ? remove_wait_queue+0x51/0x56
     [<ffffffff8111d02d>] user_path_at+0x11/0x13
     [<ffffffff811141f5>] vfs_fstatat+0x3a/0x64
     [<ffffffff8111425a>] vfs_stat+0x1b/0x1d
     [<ffffffff81114359>] sys_newstat+0x1a/0x33
     [<ffffffff81060e12>] ? task_stopped_code+0x42/0x42
     [<ffffffff815d6712>] system_call_fastpath+0x16/0x1b
    Code: 89 e6 48 89 c7 e8 fa ca fe ff 85 c0 74 06 4c 89 2b 41 b6 01 5b 44 89 f0 41 5c 41 5d 41 5e 5d c3 55 48 89 e5 66 66 66 66 90 31 c0 <8b> 57 04 f6 c6 01 74 0b 83 e2 20 83 fa 01 19 c0 83 c0 02 5d c3
    RIP  [<ffffffff81266d59>] cfqq_type+0xb/0x20
     RSP <ffff880079c11778>
    CR2: ffff8800746c4f0c
    
    Get rid of the caching of cfqd->active_queue, and reorder the
    check so that it happens before we expire the active queue.
    
    Thanks to Tejun for pin pointing the error location.
    
    Reported-by: Chris Mason <chris.mason@oracle.com>
    Tested-by: Chris Mason <chris.mason@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 4678d6f970c2f7c0cbfefc0cc666432d153b321b
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Jan 12 15:44:44 2012 +1030

    virtio_blk: fix config handler race
    
    Fix a theoretical race related to config work
    handler: a config interrupt might happen
    after we flush config work but before we
    reset the device. It will then cause the
    config work to run during or after reset.
    
    Two problems with this:
    - if this runs after device is gone we will get use after free
    - access of config while reset is in progress is racy
    (as layout is changing).
    
    As a solution
    1. flush after reset when we know there will be no more interrupts
    2. add a flag to disable config access before reset
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit 49528b4e479195e5db4fe51fcd5ddd97901efc16
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Jan 6 16:48:50 2012 -0500

    GFS2: Fix a use-after-free that coverity spotted
    
    In function gfs2_inplace_release it was trying to unlock a gfs2_holder
    structure associated with a reservation, after said reservation was
    freed. The problem is that the statements have the wrong order.
    This patch corrects the order so that the reservation is freed after
    the gfs2_holder is unlocked.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commits)
      drm/nouveau/pm: fix build with HWMON off
      gma500: silence gcc warnings in mid_get_vbt_data()
      drm/ttm: fix condition (and vs or)
      drm/radeon: double lock typo in radeon_vm_bo_rmv()
      drm/radeon: use after free in radeon_vm_bo_add()
      drm/sis|via: don't return stack garbage from free_mem ioctl
      drm/radeon/kms: remove pointless CS flags priority struct
      drm/radeon/kms: check if vm is supported in VA ioctl
      drm: introduce drm_can_sleep and use in intel/radeon drivers. (v2)
      radeon: Fix disabling PCI bus mastering on big endian hosts.
      ttm: fix agp since ttm tt rework
      agp: Fix multi-line warning message whitespace
      drm/ttm/dma: Fix accounting error when calling ttm_mem_global_free_page and don't try to free freed pages.
      drm/ttm/dma: Only call set_pages_array_wb when the page is not in WB pool.
      drm/radeon/kms: sync across multiple rings when doing bo moves v3
      drm/radeon/kms: Add support for multi-ring sync in CS ioctl (v2)
      drm/radeon: GPU virtual memory support v22
      drm: make DRM_UNLOCKED ioctls with their own mutex
      drm: no need to hold global mutex for static data
      drm/radeon/benchmark: common modes sweep ignores 640x480@32
      ...
    
    Fix up trivial conflicts in radeon/evergreen.c and vmwgfx/vmwgfx_kms.c

commit 55ba70c40661b61f98c4188c428f265009af1aa5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jan 9 15:44:50 2012 +0300

    drm/radeon: use after free in radeon_vm_bo_add()
    
    "bo_va" is dereferenced in the error message.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit e57e0d8e818512047fe379157c3f77f1b9fabffb
Author: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
Date:   Thu Jan 5 10:47:18 2012 +0200

    UBI: fix use-after-free on error path
    
    When we fail to erase a PEB, we free the corresponding erase entry object,
    but then re-schedule this object if the error code was something like -EAGAIN.
    Obviously, it is a bug to use the object after we have freed it.
    
    Reported-by: Emese Revfy <re.emese@gmail.com>
    Cc: stable@kernel.org [v2.6.23+]
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>

commit 'v3.2-rc3' into stable/for-linus-3.3
    
    * commit 'v3.2-rc3': (412 commits)
      Linux 3.2-rc3
      virtio-pci: make reset operation safer
      virtio-mmio: Correct the name of the guest features selector
      virtio: add HAS_IOMEM dependency to MMIO platform bus driver
      eCryptfs: Extend array bounds for all filename chars
      eCryptfs: Flush file in vma close
      eCryptfs: Prevent file create race condition
      regulator: TPS65910: Fix VDD1/2 voltage selector count
      i2c: Make i2cdev_notifier_call static
      i2c: Delete ANY_I2C_BUS
      i2c: Fix device name for 10-bit slave address
      i2c-algo-bit: Generate correct i2c address sequence for 10-bit target
      drm: integer overflow in drm_mode_dirtyfb_ioctl()
      Revert "of/irq: of_irq_find_parent: check for parent equal to child"
      drivers/gpu/vga/vgaarb.c: add missing kfree
      drm/radeon/kms/atom: unify i2c gpio table handling
      drm/radeon/kms: fix up gpio i2c mask bits for r4xx for real
      ttm: Don't return the bo reserved on error path
      mount_subtree() pointless use-after-free
      iio: fix a leak due to improper use of anon_inode_getfd()
      ...

commits)
      Revert "[media] af9015: limit I2C access to keep FW happy"
      [media] s5p-fimc: Fix camera input configuration in subdev operations
      [media] m5mols: Fix logic in sanity check
      [media] ati_remote: switch to single-byte scancodes
      [media] V4L: mt9m111: fix uninitialised mutex
      [media] V4L: omap1_camera: fix missing <linux/module.h> include
      [media] V4L: mt9t112: use after free in mt9t112_probe()
      [media] V4L: soc-camera: fix compiler warnings on 64-bit platforms
      [media] s5p_mfc_enc: fix s/H264/H263/ typo
      [media] omap_vout: Fix compile error in 3.1
      [media] au0828: add missing models 72101, 72201 & 72261 to the model matrix
      [media] au0828: add missing USB ID 2040:7213
      [media] au0828: add missing USB ID 2040:7260
      [media] [trivial] omap24xxcam-dma: Fix logical test
      [media] omap_vout: fix crash if no driver for a display
      [media] media: video: s5p-tv: fix build break
      [media] omap3isp: fix compilation of ispvideo.c
      [media] m5mols: Fix set_fmt to return proper pixel format code
      [media] s5p-fimc: Use correct fourcc for RGB565 colour format
      [media] s5p-fimc: Fail driver probing when sensor configuration is wrong
      ...

commit 08da558ae0aaa488d8273ee44177c86580ba0d5a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Nov 7 15:44:12 2011 -0300

    [media] V4L: mt9t112: use after free in mt9t112_probe()
    
    priv gets dereferenced in mt9t112_set_params() so we should return
    before calling that.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 58fb5cf5d1edb7e306574833ee55d732918c89e3
Author: Lothar Waßmann <LW@KARO-electronics.de>
Date:   Mon Nov 28 15:38:37 2011 +0100

    regulator: fix use after free bug
    
    This is caused by dereferencing 'rdev' after device_unregister() in
    the regulator_unregister() function.  'rdev' is freed by
    device_unregister(), so it must not be dereferenced after this call.
    
    [Edited commit message for legibility -- broonie]
    
    Signed-off-by: Lothar Waßmann <LW@KARO-electronics.de>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 4c81f045c0bd2cbb78cc6446a4cd98038fe11a2e
Author: Tejun Heo <tj@kernel.org>
Date:   Thu Nov 24 19:22:24 2011 -0500

    ext4: fix racy use-after-free in ext4_end_io_dio()
    
    ext4_end_io_dio() queues io_end->work and then clears iocb->private;
    however, io_end->work calls aio_complete() which frees the iocb
    object.  If that slab object gets reallocated, then ext4_end_io_dio()
    can end up clearing someone else's iocb->private, this use-after-free
    can cause a leak of a struct ext4_io_end_t structure.
    
    Detected and tested with slab poisoning.
    
    [ Note: Can also reproduce using 12 fio's against 12 file systems with the
      following configuration file:
    
      [global]
      direct=1
      ioengine=libaio
      iodepth=1
      bs=4k
      ba=4k
      size=128m
    
      [create]
      filename=${TESTDIR}
      rw=write
    
      -- tytso ]
    
    Google-Bug-Id: 5354697
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Reported-by: Kent Overstreet <koverstreet@google.com>
    Tested-by: Kent Overstreet <koverstreet@google.com>
    Cc: stable@kernel.org

commit e469183541ac108fbc9bcf8e73c2061f049be620
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Nov 7 14:44:12 2011 -0300

    [media] V4L: mt9t112: use after free in mt9t112_probe()
    
    priv gets dereferenced in mt9t112_set_params() so we should return
    before calling that.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit e6af578c5305be693a1bc7f4dc7b51dd82d41425
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Thu Nov 17 17:41:15 2011 +0200

    virtio-pci: make reset operation safer
    
    virtio pci device reset actually just does an I/O
    write, which in PCI is really posted, that is it
    can complete on CPU before the device has received it.
    
    Further, interrupts might have been pending on
    another CPU, so device callback might get invoked after reset.
    
    This conflicts with how drivers use reset, which is typically:
            reset
            unregister
    a callback running after reset completed can race with
    unregister, potentially leading to use after free bugs.
    
    Fix by flushing out the write, and flushing pending interrupts.
    
    This assumes that device is never reset from
    its vq/config callbacks, or in parallel with being
    added/removed, document this assumption.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commits)
      Linux 3.2-rc2
      hfs: add sanity check for file name length
      fsl-rio: fix compile error
      blackfin: Fixup export.h includes
      Blackfin: add serial TX IRQ in individual platform resource
      virtio-pci: fix use after free
      ACPI / cpuidle: Remove acpi_idle_suspend (to fix suspend regression)
      drm/radeon/kms/combios: fix dynamic allocation of PM clock modes
      [CPUFREQ] db8500: fix build error due to undeclared i variable
      bma023: Add SFI translation for this device
      vrtc: change its year offset from 1960 to 1972
      ce4100: fix a build error
      arm/imx: fix imx6q mmc error when mounting rootfs
      arm/imx: fix AUTO_ZRELADDR selection
      arm/imx: fix the references to ARCH_MX3
      ARM: mx51/53: set pwm clock parent to ipg_perclk
      btrfs: rename the option to nospace_cache
      drm/radeon/kms/pm: switch to dynamically allocating clock mode array
      drm/radeon/kms: optimize r600_pm_profile_init
      drm/radeon/kms/pm: add a proper pm profile init function for fusion
      ...
    
    Conflicts:
            drivers/media/radio/Kconfig

commit d31da0f0ba3bc0a827a63879310818c22d9a95be
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Nov 22 12:31:21 2011 -0500

    mount_subtree() pointless use-after-free
    
    d'oh... we'd carefully pinned mnt->mnt_sb down, dropped mnt and attempt
    to grab s_umount on mnt->mnt_sb.  The trouble is, *mnt might've been
    overwritten by now...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 955787ca94a17bdfd00e369a21ceb97aa21792fc
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Fri Nov 11 10:47:23 2011 +0100

    TTY: move debug checking out of tty_release
    
    There is no need to taint the tty_release code with paranoia
    checking. So move it out of line to a separate function. Making thus
    tty_release more readable.
    
    [v2] don't introduce a hard to reproduce use after free (scheduled work would
         need to preempt the current thread)
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9f3bdd4f937a75c4589a867dc1f8fefe09c1a618
Author: Axel Lin <axel.lin@gmail.com>
Date:   Mon Nov 14 23:31:29 2011 +0100

    PM / devfreq: fix use after free in devfreq_remove_device
    
    In devfreq_remove_device, calling _remove_devfreq will also free devfreq.
    Don't dereference devfreq->governor->no_central_polling after _remove_devfreq.
    
    Signed-off-by: Axel Lin <axel.lin@gmail.com>
    Acked-by: MyungJoo Ham <myungjoo.ham@samsung.com>
    Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>

commit 72103bd1285211440621f2c46f4fce377584de54
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Mon Nov 7 18:37:05 2011 +0200

    virtio-pci: fix use after free
    
    Commit 31a3ddda166cda86d2b5111e09ba4bda5239fae6 introduced
    a use after free in virtio-pci. The main issue is
    that the release method signals removal of the virtio device,
    while remove signals removal of the pci device.
    
    For example, on driver removal or hot-unplug,
    virtio_pci_release_dev is called before virtio_pci_remove.
    We then might get a crash as virtio_pci_remove tries to use the
    device freed by virtio_pci_release_dev.
    
    We allocate/free all resources together with the
    pci device, so we can leave the release method empty.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
    Cc: stable@kernel.org

commit 8ebafde00ed0c682fed8c34ac5ba90160ea0bb30
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Sep 23 09:14:35 2011 +0300

    NFC: use after free on error
    
    We returned a freed variable on some error paths when the intent was
    to return a NULL.  Part of the reason this was missed was that the
    code was confusing because it had too many gotos so I removed them
    and simplified the flow a bit.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Lauro Ramos Venancio <lauro.venancio@openbossa.org>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 95c754545353ca7db2e12485546eac626f8461f9
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Sat Aug 27 18:58:34 2011 +0200

    CIFS: Don't free volume_info->UNC until we are entirely done with it.
    
    In cleanup_volume_info_contents() we kfree(volume_info->UNC); and then
    proceed to use that variable on the very next line.
    This causes (at least) Coverity Prevent to complain about use-after-free
    of that variable (and I guess other checkers may do that as well).
    There's not any /real/ problem here since we are just using the value of
    the pointer, not actually dereferencing it, but it's still trivial to
    silence the tool, so why not?
    To me at least it also just seems nicer to defer freeing the variable
    until we are entirely done with it in all respects.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 8280b662df96f4172c4972b14a4aec0daf272b8f
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Sep 6 10:23:18 2011 -0300

    [media] v4l: Fix use-after-free case in v4l2_device_release
    
    Drivers that have no v4l2_device release callback might free the
    v4l2_device instance in the video_device release callback. Make sure we
    don't access the v4l2_device instance after it gets freed.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 69803ecf3a852a8dd0c76a3d2cfcc7aec1e750e2
Author: Yang Ruirui <hidave.darkstar@gmail.com>
Date:   Tue Sep 6 08:08:08 2011 -0300

    [media] v4l2: uvcvideo use after free bug fix
    
    Unplugging uvc video camera trigger following oops:
    
    eeepc kernel: [ 1393.500719] usb 3-2: USB disconnect, device number 4
    eeepc kernel: [ 1393.504351] uvcvideo: Failed to resubmit video URB (-19).
    eeepc kernel: [ 1495.428853] BUG: unable to handle kernel paging request at 6b6b6bcb
    eeepc kernel: [ 1495.429017] IP: [<b0358d37>] dev_get_drvdata+0x17/0x20
    eeepc kernel: [ 1495.429017] *pde = 00000000
    eeepc kernel: [ 1495.429017] Oops: 0000 [#1] DEBUG_PAGEALLOC
    eeepc kernel: [ 1495.429017]
    eeepc kernel: [ 1495.429017] Pid: 3476, comm: cheese Not tainted 3.1.0-rc3-00270-g7a54f5e-dirty #485 ASUSTeK Computer INC. 900/900
    eeepc kernel: [ 1495.429017] EIP: 0060:[<b0358d37>] EFLAGS: 00010202 CPU: 0
    eeepc kernel: [ 1495.429017] EIP is at dev_get_drvdata+0x17/0x20
    eeepc kernel: [ 1495.429017] EAX: 6b6b6b6b EBX: eb08d870 ECX: 00000000 EDX: eb08d930
    eeepc kernel: [ 1495.429017] ESI: eb08d870 EDI: eb08d870 EBP: d3249cac ESP: d3249cac
    eeepc kernel: [ 1495.429017]  DS: 007b ES: 007b FS: 0000 GS: 00e0 SS: 0068
    eeepc kernel: [ 1495.429017] Process cheese (pid: 3476, ti=d3248000 task=df46d870 task.ti=d3248000)
    eeepc kernel: [ 1495.429017] Stack:
    eeepc kernel: [ 1495.429017]  d3249cb8 b03e77a1 d307b840 d3249ccc b03e77d1 d307b840 eb08d870 eb08d830
    eeepc kernel: [ 1495.429017]  d3249ce4 b03ed3b7 00000246 d307b840 eb08d870 d3021b80 d3249cec b03ed565
    eeepc kernel: [ 1495.429017]  d3249cfc b03e044d e8323d10 b06e013c d3249d18 b0355fb9 fffffffe d3249d1c
    eeepc kernel: [ 1495.429017] Call Trace:
    eeepc kernel: [ 1495.429017]  [<b03e77a1>] v4l2_device_disconnect+0x11/0x30
    eeepc kernel: [ 1495.429017]  [<b03e77d1>] v4l2_device_unregister+0x11/0x50
    eeepc kernel: [ 1495.429017]  [<b03ed3b7>] uvc_delete+0x37/0x110
    eeepc kernel: [ 1495.429017]  [<b03ed565>] uvc_release+0x25/0x30
    eeepc kernel: [ 1495.429017]  [<b03e044d>] v4l2_device_release+0x9d/0xc0
    eeepc kernel: [ 1495.429017]  [<b0355fb9>] device_release+0x19/0x90
    eeepc kernel: [ 1495.429017]  [<b03adfdc>] ? usb_hcd_unlink_urb+0x7c/0x90
    eeepc kernel: [ 1495.429017]  [<b026b99c>] kobject_release+0x3c/0x90
    eeepc kernel: [ 1495.429017]  [<b026b960>] ? kobject_del+0x30/0x30
    eeepc kernel: [ 1495.429017]  [<b026ca4c>] kref_put+0x2c/0x60
    eeepc kernel: [ 1495.429017]  [<b026b88d>] kobject_put+0x1d/0x50
    eeepc kernel: [ 1495.429017]  [<b03b2385>] ? usb_autopm_put_interface+0x25/0x30
    eeepc kernel: [ 1495.429017]  [<b03f0e5d>] ? uvc_v4l2_release+0x5d/0xd0
    eeepc kernel: [ 1495.429017]  [<b0355d2f>] put_device+0xf/0x20
    eeepc kernel: [ 1495.429017]  [<b03dfa96>] v4l2_release+0x56/0x60
    eeepc kernel: [ 1495.429017]  [<b019c8dc>] fput+0xcc/0x220
    eeepc kernel: [ 1495.429017]  [<b01990f4>] filp_close+0x44/0x70
    eeepc kernel: [ 1495.429017]  [<b012b238>] put_files_struct+0x158/0x180
    eeepc kernel: [ 1495.429017]  [<b012b100>] ? put_files_struct+0x20/0x180
    eeepc kernel: [ 1495.429017]  [<b012b2a0>] exit_files+0x40/0x50
    eeepc kernel: [ 1495.429017]  [<b012b9e7>] do_exit+0x5a7/0x660
    eeepc kernel: [ 1495.429017]  [<b0135f72>] ? __dequeue_signal+0x12/0x120
    eeepc kernel: [ 1495.429017]  [<b055edf2>] ? _raw_spin_unlock_irq+0x22/0x30
    eeepc kernel: [ 1495.429017]  [<b012badc>] do_group_exit+0x3c/0xb0
    eeepc kernel: [ 1495.429017]  [<b015792b>] ? trace_hardirqs_on+0xb/0x10
    eeepc kernel: [ 1495.429017]  [<b013755f>] get_signal_to_deliver+0x18f/0x570
    eeepc kernel: [ 1495.429017]  [<b01020f7>] do_signal+0x47/0x9e0
    eeepc kernel: [ 1495.429017]  [<b055edf2>] ? _raw_spin_unlock_irq+0x22/0x30
    eeepc kernel: [ 1495.429017]  [<b015792b>] ? trace_hardirqs_on+0xb/0x10
    eeepc kernel: [ 1495.429017]  [<b0123300>] ? T.1034+0x30/0xc0
    eeepc kernel: [ 1495.429017]  [<b055c45f>] ? schedule+0x29f/0x640
    eeepc kernel: [ 1495.429017]  [<b0102ac8>] do_notify_resume+0x38/0x40
    eeepc kernel: [ 1495.429017]  [<b055f154>] work_notifysig+0x9/0x11
    eeepc kernel: [ 1495.429017] Code: e5 5d 83 f8 01 19 c0 f7 d0 83 e0 f0 c3 8d b4 26 00 00 00 00 55 85 c0 89 e5 75 09 31 c0 5d c3 90 8d 74 26 00 8b 40 04 85 c0 74 f0 <8b> 40 60 5d c3 8d 74 26 00 55 89 e5 53 89 c3 83 ec 04 8b 40 04
    eeepc kernel: [ 1495.429017] EIP: [<b0358d37>] dev_get_drvdata+0x17/0x20 SS:ESP 0068:d3249cac
    eeepc kernel: [ 1495.429017] CR2: 000000006b6b6bcb
    eeepc kernel: [ 1495.466975] uvcvideo: Failed to resubmit video URB (-27).
    eeepc kernel: [ 1495.467860] uvcvideo: Failed to resubmit video URB (-27).
    eeepc kernel: last message repeated 3 times
    eeepc kernel: [ 1495.512610] ---[ end trace 73ec16848794e5a5 ]---
    
    For uvc device, dev->vdev.dev is the &intf->dev,
    uvc_delete code is as below:
            usb_put_intf(dev->intf);
            usb_put_dev(dev->udev);
    
            uvc_status_cleanup(dev);
            uvc_ctrl_cleanup_device(dev);
    
            if (dev->vdev.dev)
                    v4l2_device_unregister(&dev->vdev);
    
    Fix it by get_device in v4l2_device_register and put_device in v4l2_device_disconnect
    
    Reported-by: Sitsofe Wheeler <sitsofe@yahoo.com>
    Signed-off-by: Dave Young <hidave.darkstar@gmail.com>
    Tested-by: Sitsofe Wheeler <sitsofe@yahoo.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit aec9db355ce2b930358ade5a71cc00ac258e1b3f
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Aug 30 03:46:40 2011 +0000

    6LoWPAN: use the _safe version of list_for_each
    
    When we kfree(entry) that causes a use-after-free bug so we have to
    use list_for_each_entry_safe() safe here.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d2422aebc037095f77551119f795449d29befed
Author: Christoph Hellwig <hch@infradead.org>
Date:   Tue Sep 13 22:26:00 2011 +0000

    xfs: fix a use after free in xfs_end_io_direct_write
    
    There is a window in which the ioend that we call inode_dio_wake on
    in xfs_end_io_direct_write is already free.  Fix this by storing
    the inode pointer in a local variable.
    
    This is a fix for the regression introduced in 3.1-rc by
    "fs: move inode_dio_done to the end_io handler".
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Alex Elder <aelder@sgi.com>

commit 079fa166a2874985ae58b2e21e26e1cbc91127d4
Author: NeilBrown <neilb@suse.de>
Date:   Sat Sep 10 17:21:23 2011 +1000

    md/raid1,10: Remove use-after-free bug in make_request.
    
    A single request to RAID1 or RAID10 might result in multiple
    requests if there are known bad blocks that need to be avoided.
    
    To detect if we need to submit another write request we test:
            if (sectors_handled < (bio->bi_size >> 9)) {
    
    However this is after we call **_write_done() so the 'bio' no longer
    belongs to us - the writes could have completed and the bio freed.
    
    So move the **_write_done call until after the test against
    bio->bi_size.
    
    This addresses https://bugzilla.kernel.org/show_bug.cgi?id=41862
    
    Reported-by: Bruno Wolff III <bruno@wolff.to>
    Tested-by: Bruno Wolff III <bruno@wolff.to>
    Signed-off-by: NeilBrown <neilb@suse.de>

commits)
      netpoll: fix incorrect access to skb data in __netpoll_rx
      cassini: init before use in cas_interruptN.
      can: ti_hecc: Fix uninitialized spinlock in probe
      can: ti_hecc: Fix unintialized variable
      net: sh_eth: fix the compile error
      net/phy: fix DP83865 phy interrupt handler
      sendmmsg/sendmsg: fix unsafe user pointer access
      ibmveth: Fix leak when recycling skb and hypervisor returns error
      arp: fix rcu lockdep splat in arp_process()
      bridge: fix a possible use after free
      bridge: Pseudo-header required for the checksum of ICMPv6
      mcast: Fix source address selection for multicast listener report
      MAINTAINERS: Update GIT trees for network development
      ath9k: Fix PS wrappers in ath9k_set_coverage_class
      carl9170: Fix mismatch in carl9170_op_set_key mutex lock-unlock
      wl12xx: add max_sched_scan_ssids value to the hw description
      wl12xx: Fix validation of pm_runtime_get_sync return value
      wl12xx: Remove obsolete testmode NVS push command
      bcma: add uevent to the bus, to autoload drivers
      ath9k_hw: Fix STA (AR9485) bringup issue due to incorrect MAC address
      ...

commit 22df13319d1fec30b8f9bcaadc295829647109bb
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Tue Aug 23 19:57:05 2011 +0000

    bridge: fix a possible use after free
    
    br_multicast_ipv6_rcv() can call pskb_trim_rcsum() and therefore skb
    head can be reallocated.
    
    Cache icmp6_type field instead of dereferencing twice the struct
    icmp6hdr pointer.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eac2095398668f989a3dd8d00be1b87850d78c01
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Mon Aug 22 03:15:04 2011 +0000

    drm/ttm: unbind ttm before destroying node in accel move cleanup
    
    Nouveau makes the assumption that if a TTM is bound there will be a mm_node
    around for it and the backwards ordering here resulted in a use-after-free
    on some eviction paths.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 9f50fad65b87a8776ae989ca059ad6c17925dfc3
Author: Michal Hocko <mhocko@suse.cz>
Date:   Tue Aug 9 11:56:26 2011 +0200

    Revert "memcg: get rid of percpu_charge_mutex lock"
    
    This reverts commit 8521fc50d433507a7cdc96bec280f9e5888a54cc.
    
    The patch incorrectly assumes that using atomic FLUSHING_CACHED_CHARGE
    bit operations is sufficient but that is not true.  Johannes Weiner has
    reported a crash during parallel memory cgroup removal:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000018
      IP: [<ffffffff81083b70>] css_is_ancestor+0x20/0x70
      Oops: 0000 [#1] PREEMPT SMP
      Pid: 19677, comm: rmdir Tainted: G        W   3.0.0-mm1-00188-gf38d32b #35 ECS MCP61M-M3/MCP61M-M3
      RIP: 0010:[<ffffffff81083b70>]  css_is_ancestor+0x20/0x70
      RSP: 0018:ffff880077b09c88  EFLAGS: 00010202
      Process rmdir (pid: 19677, threadinfo ffff880077b08000, task ffff8800781bb310)
      Call Trace:
       [<ffffffff810feba3>] mem_cgroup_same_or_subtree+0x33/0x40
       [<ffffffff810feccf>] drain_all_stock+0x11f/0x170
       [<ffffffff81103211>] mem_cgroup_force_empty+0x231/0x6d0
       [<ffffffff811036c4>] mem_cgroup_pre_destroy+0x14/0x20
       [<ffffffff81080559>] cgroup_rmdir+0xb9/0x500
       [<ffffffff81114d26>] vfs_rmdir+0x86/0xe0
       [<ffffffff81114e7b>] do_rmdir+0xfb/0x110
       [<ffffffff81114ea6>] sys_rmdir+0x16/0x20
       [<ffffffff8154d76b>] system_call_fastpath+0x16/0x1b
    
    We are crashing because we try to dereference cached memcg when we are
    checking whether we should wait for draining on the cache.  The cache is
    already cleaned up, though.
    
    There is also a theoretical chance that the cached memcg gets freed
    between we test for the FLUSHING_CACHED_CHARGE and dereference it in
    mem_cgroup_same_or_subtree:
    
            CPU0                    CPU1                         CPU2
      mem=stock->cached
      stock->cached=NULL
                                  clear_bit
                                                            test_and_set_bit
      test_bit()                    ...
      <preempted>             mem_cgroup_destroy
      use after free
    
    The percpu_charge_mutex protected from this race because sync draining
    is exclusive.
    
    It is safer to revert now and come up with a more parallel
    implementation later.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Reported-by: Johannes Weiner <jweiner@redhat.com>
    Acked-by: Johannes Weiner <jweiner@redhat.com>
    Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: stable@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      ACPI:  delete stale reference in kernel-parameters.txt
      ACPI: add missing _OSI strings
      ACPI: remove NID_INVAL
      thermal: make THERMAL_HWMON implementation fully internal
      thermal: split hwmon lookup to a separate function
      thermal: hide CONFIG_THERMAL_HWMON
      ACPI print OSI(Linux) warning only once
      ACPI: DMI workaround for Asus A8N-SLI Premium and Asus A8N-SLI DELUX
      ACPI / Battery: propagate sysfs error in acpi_battery_add()
      ACPI / Battery: avoid acpi_battery_add() use-after-free
      ACPI: introduce "acpi_rsdp=" parameter for kdump
      ACPI: constify ops structs
      ACPI: fix CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS
      ACPI: fix 80 char overflow
      ACPI / Battery: Resolve the race condition in the sysfs_remove_battery()
      ACPI / Battery: Add the check before refresh sysfs in the battery_notify()
      ACPI / Battery: Add the hibernation process in the battery_notify()
      ACPI / Battery: Rename acpi_battery_quirks2 with acpi_battery_quirks
      ACPI / Battery: Change 16-bit signed negative battery current into correct value
      ACPI / Battery: Add the power unit macro
      ...

commit 276556dbd2d9f56f8933393f927e88fae142ce8f
Author: Dan Carpenter <error27@gmail.com>
Date:   Fri Jul 8 10:21:15 2011 +0300

    NFC: pn533: use after free in pn533_disconnect()
    
    We freed "dev" on the line before.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 5f21c96dd5c615341963036ae8f5e4f5227a818d
Author: Sage Weil <sage@newdream.net>
Date:   Tue Jul 26 11:30:29 2011 -0700

    ceph: protect access to d_parent
    
    d_parent is protected by d_lock: use it when looking up a dentry's parent
    directory inode.  Also take a reference and drop it in the caller to avoid
    a use-after-free.
    
    Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
    Reviewed-by: Yehuda Sadeh <yehuda@hq.newdream.net>
    Signed-off-by: Sage Weil <sage@newdream.net>

commit ae891a1b93bf62e9aaa116a7a71312375047fc9f
Author: Maxin B John <maxin.john@gmail.com>
Date:   Mon Jul 25 17:12:59 2011 -0700

    devres: fix possible use after free
    
    devres uses the pointer value as key after it's freed, which is safe but
    triggers spurious use-after-free warnings on some static analysis tools.
    Rearrange code to avoid such warnings.
    
    Signed-off-by: Maxin B. John <maxin.john@gmail.com>
    Reviewed-by: Rolf Eike Beer <eike-kernel@sf-tec.de>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e80bba4b5108c6479379740201b0a5d9da5ffbac
Author: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
Date:   Tue Jul 12 09:03:28 2011 +0100

    ACPI / Battery: avoid acpi_battery_add() use-after-free
    
    When acpi_battery_add_fs() fails the error handling code does not clean
    up completely.  Moreover, it does not return resulting in a
    use-after-free.
    
    Signed-off-by: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commits)
      slip: fix wrong SLIP6 ifdef-endif placing
      natsemi: fix another dma-debug report
      sctp: ABORT if receive, reassmbly, or reodering queue is not empty while closing socket
      net: Fix default in docs for tcp_orphan_retries.
      hso: fix a use after free condition
      net/natsemi: Fix module parameter permissions
      XFRM: Fix memory leak in xfrm_state_update
      sctp: Enforce retransmission limit during shutdown
      mac80211: fix TKIP replay vulnerability
      mac80211: fix ie memory allocation for scheduled scans
      ssb: fix init regression of hostmode PCI core
      rtlwifi: rtl8192cu: Add new USB ID for Netgear WNA1000M
      ath9k: Fix tx throughput drops for AR9003 chips with AES encryption
      carl9170: add NEC WL300NU-AG usbid
      cfg80211: fix deadlock with rfkill/sched_scan by adding new mutex
      ath5k: fix incorrect use of drvdata in PCI suspend/resume code
      ath5k: fix incorrect use of drvdata in sysfs code
      Bluetooth: Fix memory leak under page timeouts
      Bluetooth: Fix regression with incoming L2CAP connections
      Bluetooth: Fix hidp disconnect deadlocks and lost wakeup
      ...

commit ec0dd267bf7d08cb30e321e45a75fd40edd7e528
Author: Ben Greear <greearb@candelatech.com>
Date:   Tue Jul 12 10:27:55 2011 -0700

    SUNRPC: Fix use of static variable in rpcb_getport_async
    
    Because struct rpcbind_args *map was declared static, if two
    threads entered this method at the same time, the values
    assigned to map could be sent two two differen tasks.
    This could cause all sorts of problems, include use-after-free
    and double-free of memory.
    
    Fix this by removing the static declaration so that the map
    pointer is on the stack.
    
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Cc: stable@kernel.org
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 0401846c339fbdfb9bd822d83b43e8a9f7d072a4
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Mon Jul 11 12:22:21 2011 +0200

    hp-wmi: fix use after free
    
    [  191.310008] WARNING: kmemcheck: Caught 32-bit read from freed memory (f0d25f14)
    [  191.310011] c056d2f088000000105fd2f00000000050415353040000000000000000000000
    [  191.310020]  i i i i f f f f f f f f f f f f f f f f f f f f f f f f f f f f
    [  191.310027]                                          ^
    [  191.310029]
    [  191.310032] Pid: 737, comm: modprobe Not tainted 3.0.0-rc5+ #268 Hewlett-Packard HP Compaq 6005 Pro SFF PC/3047h
    [  191.310036] EIP: 0060:[<f80b3104>] EFLAGS: 00010286 CPU: 0
    [  191.310039] EIP is at hp_wmi_perform_query+0x104/0x150 [hp_wmi]
    [  191.310041] EAX: f0d25601 EBX: f0d25f00 ECX: 000121cf EDX: 000121ce
    [  191.310043] ESI: f0d25f10 EDI: f0f97ea8 EBP: f0f97ec4 ESP: c173f34c
    [  191.310045]  DS: 007b ES: 007b FS: 00d8 GS: 0033 SS: 0068
    [  191.310046] CR0: 8005003b CR2: f540c000 CR3: 30f30000 CR4: 000006d0
    [  191.310048] DR0: 00000000 DR1: 00000000 DR2: 00000000 DR3: 00000000
    [  191.310050] DR6: ffff4ff0 DR7: 00000400
    [  191.310051]  [<f80b317b>] hp_wmi_dock_state+0x2b/0x40 [hp_wmi]
    [  191.310054]  [<f80b6093>] hp_wmi_init+0x93/0x1a8 [hp_wmi]
    [  191.310057]  [<c10011f0>] do_one_initcall+0x30/0x170
    [  191.310061]  [<c107ab9f>] sys_init_module+0xef/0x1a60
    [  191.310064]  [<c149f998>] sysenter_do_call+0x12/0x28
    [  191.310067]  [<ffffffff>] 0xffffffff
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

commit 5e2cd0825a43824827b233d95bc47c0c970e5bef
Author: Greg KH <greg@kroah.com>
Date:   Fri Jul 8 03:45:25 2011 +0000

    hso: fix a use after free condition
    
    This needs to go to netdev:
    
    From: Octavian Purdila <octavian.purdila@intel.com>
    
    In hso_free_net_device hso_net pointer is freed and then used to
    cleanup urb pools. Catched with SLAB_DEBUG during S3 resume:
    
    [   95.824442] Pid: 389, comm: khubd Tainted: G         C  2.6.36greenridge-01400-g423cf13-dirty #154 Type2 - Board Product Name1/OakTrail
    [   95.824442] EIP: 0060:[<c1151551>] EFLAGS: 00010202 CPU: 0
    [   95.824442] EIP is at kref_put+0x29/0x42
    [   95.824442] EAX: 6b6b6b6b EBX: 6b6b6b6b ECX: c2806b40 EDX: 00000037
    [   95.824442] ESI: c1258d56 EDI: edd3d128 EBP: ee8cde0c ESP: ee8cde04
    [   95.824442]  DS: 007b ES: 007b FS: 00d8 GS: 0000 SS: 0068
    [   95.824442] Process khubd (pid: 389, ti=ee8cc000 task=ee95ed10 task.ti=ee8cc000)
    [   95.824442] Stack:
    [   95.824442]  edd07020 00000000 ee8cde14 c1258b77 ee8cde38 ef933a44 ef93572b ef935dec
    [   95.824442] <0> 0000099a 6b6b6b6b 00000000 ee2da748 edd3e0c0 ee8cde54 ef933b9f ee3b53f8
    [   95.824442] <0> 00000002 ee2da748 ee2da764 ef936658 ee8cde60 ef933d0c ee2da748 ee8cde84
    [   95.824442] Call Trace:
    [   95.824442]  [<c1258b77>] ? usb_free_urb+0x11/0x13
    [   95.824442]  [<ef933a44>] ? hso_free_net_device+0x81/0xd8 [hso]
    [   95.824442]  [<ef933b9f>] ? hso_free_interface+0x104/0x111 [hso]
    [   95.824442]  [<ef933d0c>] ? hso_disconnect+0xb/0x18 [hso]
    [   95.824442]  [<c125b7f1>] ? usb_unbind_interface+0x44/0x14a
    [   95.824442]  [<c11e56e8>] ? __device_release_driver+0x6f/0xb1
    [   95.824442]  [<c11e57c7>] ? device_release_driver+0x18/0x23
    [   95.824442]  [<c11e4e92>] ? bus_remove_device+0x8a/0xa1
    [   95.824442]  [<c11e3970>] ? device_del+0x129/0x163
    [   95.824442]  [<c11e2dc0>] ? put_device+0xf/0x11
    [   95.824442]  [<c11e39bc>] ? device_unregister+0x12/0x15
    [   95.824442]  [<c125915f>] ? usb_disable_device+0x90/0xf0
    [   95.824442]  [<c125544f>] ? usb_disconnect+0x6d/0xf8
    [   95.824442]  [<c1255f91>] ? hub_thread+0x3fc/0xc57
    [   95.824442]  [<c1048526>] ? autoremove_wake_function+0x0/0x2f
    [   95.824442]  [<c102529d>] ? complete+0x34/0x3e
    [   95.824442]  [<c1255b95>] ? hub_thread+0x0/0xc57
    [   95.824442]  [<c10481fc>] ? kthread+0x63/0x68
    [   95.824442]  [<c1048199>] ? kthread+0x0/0x68
    [   95.824442]  [<c1002d76>] ? kernel_thread_helper+0x6/0x10
    
    Signed-off-by: Octavian Purdila <octavian.purdila@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38d0cffefd3daaad6bc58a6212d16edeaa8ee1f0
Author: Dan Carpenter <error27@gmail.com>
Date:   Fri Jun 17 13:25:09 2011 +0300

    Staging: easycap: use after free in easycap_delete()
    
    The JOM() macro dereferences peasycap, so I moved the free down some
    lines.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Acked-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d9c37390c4f02153188a64a7a89fa6798dc3ffc2
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Thu Mar 3 17:59:32 2011 -0800

    isci: preallocate remote devices
    
    Until we synchronize against device removal this limits the damage of
    use after free bugs to the driver's own objects.  Unless we implement
    reference counting we need to ensure at least a subset of a remote
    device is valid at all times.  We follow the lead of other libsas
    drivers that also preallocate devices.
    
    This also enforces maximum remote device accounting at the lldd layer,
    but the core may still run out of RNC's before we hit this limit.
    
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commits)
      pxa168_eth: fix race in transmit path.
      ipv4, ping: Remove duplicate icmp.h include
      netxen: fix race in skb->len access
      sgi-xp: fix a use after free
      hp100: fix an skb->len race
      netpoll: copy dev name of slaves to struct netpoll
      ipv4: fix multicast losses
      r8169: fix static initializers.
      inet_diag: fix inet_diag_bc_audit()
      gigaset: call module_put before restart of if_open()
      farsync: add module_put to error path in fst_open()
      net: rfs: enable RFS before first data packet is received
      fs_enet: fix freescale FCC ethernet dp buffer alignment
      netdev: bfin_mac: fix memory leak when freeing dma descriptors
      vlan: don't call ndo_vlan_rx_register on hardware that doesn't have vlan support
      caif: Bugfix - XOFF removed channel from caif-mux
      tun: teach the tun/tap driver to support netpoll
      dp83640: drop PHY status frames in the driver.
      dp83640: fix phy status frame event parsing
      phylib: Allow BCM63XX PHY to be selected only on BCM63XX.
      ...

commit 44da29d26bb8df3b0411ba902f2bc9b973ea38e4
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Sun Jun 19 12:52:36 2011 +0000

    sgi-xp: fix a use after free
    
    Its illegal to dereference skb after dev_kfree_skb(skb)
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    CC: Robin Holt <holt@sgi.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a50d28de8d5085e0f34f96088a45cc156d022021
Author: Bruno Prémont <bonbons@linux-vserver.org>
Date:   Tue May 24 19:59:17 2011 +0000

    video: Fix use-after-free by vga16fb on rmmod
    
    Since fb_info is now refcounted and thus may get freed at any time it
    gets unregistered module unloading will try to unregister framebuffer
    as stored in platform data on probe though this pointer may
    be stale.
    
    Cleanup platform data on framebuffer release.
    
    CC: stable@kernel.org
    Signed-off-by: Bruno Prémont <bonbons@linux-vserver.org>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 5c699d7d3f94ee1dd934edea889b32f8279a4e65
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu May 26 11:49:16 2011 +0300

    HID: hiddev: fix use after free in hiddev_release
    
    There are a couple use after free bugs here.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    [jkosina@suse.cz: removed already fixed hunk]
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 7f77897ef2b6a5ee4eb8bc24fe8b1f3eab254328
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Tue May 24 11:43:18 2011 +0200

    HID: hiddev: fix potential use-after-free
    
    Commit 6cb4b040795 ("HID: hiddev: fix race between hiddev_disconnect
    and hiddev_release") made it possible to access hiddev (for unlocking
    the existance mutex) once hiddev has been kfreed.
    
    Change the order so that this can not happen (always unlock the mutex first,
    it is needed only to protect access to ->exist and ->open).
    
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit 1bb933fb1fa8e4cb337a0d5dfd2ff4c0dc2073e8
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Fri May 20 13:55:29 2011 -0400

    ext4: fix possible use-after-free in ext4_remove_li_request()
    
    We need to take reference to the s_li_request after we take a mutex,
    because it might be freed since then, hence result in accessing old
    already freed memory. Also we should protect the whole
    ext4_remove_li_request() because ext4_li_info might be in the process of
    being freed in ext4_lazyinit_thread().
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
    Reviewed-by: Eric Sandeen <sandeen@redhat.com>

commit 08921ac9e9d185d6f472238ea9c79a3a70eb7ea7
Author: Jesper Juhl <jj@chaosbits.net>
Date:   Thu Apr 21 18:11:25 2011 -0300

    [media] Media, DVB, Siano, smsusb: Avoid static analysis report about 'use after free'
    
    In drivers/media/dvb/siano/smsusb.c we have this code:
     ...
                   kfree(dev);
    
                   sms_info("device %p destroyed", dev);
     ...
    
    at least one static analysis tool (Coverity Prevent) complains about this
    as a use-after-free bug.
    While it's true that we do use the pointer variable after freeing it, the
    only use is to print the value of the pointer, so there's not actually any
    problem here. But still, silencing the complaint is trivial by just moving
    the kfree() call below the sms_info(), so why not just do it?. It doesn't
    change the workings of the code in any way, but it makes the tool shut up.
    The patch below also removes a rather pointless blank line.
    
    Signed-off-by: Jesper Juhl <jj@chaosbits.net>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 698b368275c3fa98261159253cfc79653f9dffc6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 11 14:49:36 2011 -0700

    fbcon: add lifetime refcount to opened frame buffers
    
    This just adds the refcount and the new registration lock logic.  It
    does not (for example) actually change the read/write/ioctl routines to
    actually use the frame buffer that was opened: those function still end
    up alway susing whatever the current frame buffer is at the time of the
    call.
    
    Without this, if something holds the frame buffer open over a
    framebuffer switch, the close() operation after the switch will access a
    fb_info that has been free'd by the unregistering of the old frame
    buffer.
    
    (The read/write/ioctl operations will normally not cause problems,
    because they will - illogically - pick up the new fbcon instead.  But a
    switch that happens just as one of those is going on might see problems
    too, the window is just much smaller: one individual op rather than the
    whole open-close sequence.)
    
    This use-after-free is apparently fairly easily triggered by the Ubuntu
    11.04 boot sequence.
    
    Acked-by: Tim Gardner <tim.gardner@canonical.com>
    Tested-by: Daniel J Blueman <daniel.blueman@gmail.com>
    Tested-by: Anca Emanuel <anca.emanuel@gmail.com>
    Cc: Bruno Prémont <bonbons@linux-vserver.org>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Andy Whitcroft <andy.whitcroft@canonical.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6c45e126567eb9f96519ca97917ce317fcbe5218
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sat Apr 30 19:45:50 2011 +0200

    ASoC: Remove DAPM debugfs entries before freeing widgets
    
    Remove the DAPM debugfs entries before freeing the context's widgets, otherwise a
    use after free situation might occur.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Liam Girdwood <lrg@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 53020092bd89b0d4ccc5368a3956f43cb43e5665
Author: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
Date:   Wed Mar 30 23:28:52 2011 +0000

    mlx4: Fixing use after free
    
    In case of allocation failure, tried to use the promiscuous QP
    entry that was previously freed.
    Now freeing this entry only in case we will not put it back to the list
    of promiscuous entries.
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Yevgeny Petrilin <yevgenyp@mellanox.co.il>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit be4d250ab41e13f8f945be6896695e870b38ba31
Author: Xiaotian Feng <dfeng@redhat.com>
Date:   Fri Mar 25 01:57:01 2011 -0700

    ipcns: fix use after free in free_ipc_ns()
    
    commit b515498 ("userns: add a user namespace owner of ipc ns") added a
    user namespace owner of ipc ns, but it also introduced a use after free in
    free_ipc_ns().
    
    Signed-off-by: Xiaotian Feng <dfeng@redhat.com>
    Acked-by: "Serge E. Hallyn" <serge.hallyn@canonical.com>
    Acked-by: David Howells <dhowells@redhat.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Daniel Lezcano <daniel.lezcano@free.fr>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 954032d2527f2fce7355ba70709b5e143d6b686f
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Mar 24 22:51:14 2011 -0400

    nfsd: fix auth_domain reference leak on nlm operations
    
    This was noticed by users who performed more than 2^32 lock operations
    and hence made this counter overflow (eventually leading to
    use-after-free's).  Setting rq_client to NULL here means that it won't
    later get auth_domain_put() when it should be.
    
    Appears to have been introduced in 2.5.42 by "[PATCH] kNFSd: Move auth
    domain lookup into svcauth" which moved most of the rq_client handling
    to common svcauth code, but left behind this one line.
    
    Cc: Neil Brown <neilb@suse.de>
    Cc: stable@kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit 26e12f894317bf0221fed40bef6f937538a78c0b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sun Mar 20 11:20:19 2011 +0000

    drm/i915: Fix use after free within tracepoint
    
    Detected by scripts/coccinelle/free/kfree.cocci.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Keith Packard <keithp@keithp.com>

commits)
      IPVS: Use global mutex in ip_vs_app.c
      ipvs: fix a typo in __ip_vs_control_init()
      veth: Fix the byte counters
      net ipv6: Fix duplicate /proc/sys/net/ipv6/neigh directory entries.
      macvlan: Fix use after free of struct macvlan_port.
      net: fix incorrect spelling in drop monitor protocol
      can: c_can: Do basic c_can configuration _before_ enabling the interrupts
      net/appletalk: fix atalk_release use after free
      ipx: fix ipx_release()
      snmp: SNMP_UPD_PO_STATS_BH() always called from softirq
      l2tp: fix possible oops on l2tp_eth module unload
      xfrm: Fix initialize repl field of struct xfrm_state
      netfilter: ipt_CLUSTERIP: fix buffer overflow
      netfilter: xtables: fix reentrancy
      netfilter: ipset: fix checking the type revision at create command
      netfilter: ipset: fix address ranges at hash:*port* types
      niu: Rename NIU parent platform device name to fix conflict.
      r8169: fix a bug in rtl8169_init_phy()
      bonding: fix a typo in a comment
      ftmac100: use resource_size()
      ...

commit d5cd92448fded12c91f7574e49747c5f7d975a8d
Author: Eric W. Biederman <ebiederm@aristanetworks.com>
Date:   Mon Mar 21 18:22:22 2011 -0700

    macvlan: Fix use after free of struct macvlan_port.
    
    When the macvlan driver was extended to call unregisgter_netdevice_queue
    in 23289a37e2b127dfc4de1313fba15bb4c9f0cd5b, a use after free of struct
    macvlan_port was introduced.  The code in dellink relied on unregister_netdevice
    actually unregistering the net device so it would be safe to free macvlan_port.
    
    Since unregister_netdevice_queue can just queue up the unregister instead of
    performing the unregiser immediately we free the macvlan_port too soon and
    then the code in macvlan_stop removes the macaddress for the set of macaddress
    to listen for and uses memory that has already been freed.
    
    To fix this add a reference count to track when it is safe to free the macvlan_port
    and move the call of macvlan_port_destroy into macvlan_uninit which is guaranteed
    to be called after the final macvlan_port_close.
    
    Signed-off-by: Eric W. Biederman <ebiederm@aristanetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b20e7bbfc7a15a4182730f0936433145992b4b06
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Mar 21 18:18:00 2011 -0700

    net/appletalk: fix atalk_release use after free
    
    The BKL removal in appletalk introduced a use-after-free problem,
    where atalk_destroy_socket frees a sock, but we still release
    the socket lock on it.
    
    An easy fix is to take an extra reference on the sock and sock_put
    it when returning from atalk_release.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5bccd60852fc0a5ccc1980c10266896df99b8bda
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Jan 30 07:05:58 2011 -0300

    [media] V4L: omap1_camera: fix use after free
    
    Even though clk_put() is a no-op on most architectures it is not for
    some ARM implementations. To not fail on those, release the clock timer
    before freeing the surrounding structure.
    
    This bug was spotted by the semantic patch tool coccinelle using the
    script found at scripts/coccinelle/free/kfree.cocci.
    
    More information about semantic patching is available at
    http://coccinelle.lip6.fr/
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit b74ad5ae14def5e81ad0be3dddb96e485b861b1b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 17 22:33:33 2011 +0000

    drm: Fix use-after-free in drm_gem_vm_close()
    
    As we may release the last reference, we need to store the device in a
    local variable in order to unlock afterwards.
    
    [   60.140768] BUG: unable to handle kernel paging request at 6b6b6b9f
    [   60.140973] IP: [<c1536d11>] __mutex_unlock_slowpath+0x5a/0x111
    [   60.141014] *pdpt = 0000000024a54001 *pde = 0000000000000000
    [   60.141014] Oops: 0002 [#1] PREEMPT SMP
    [   60.141014] last sysfs file: /sys/devices/LNXSYSTM:00/device:00/PNP0A08:00/PNP0C0A:00/power_supply/BAT0/voltage_now
    [   60.141014] Modules linked in: uvcvideo ath9k pegasus ath9k_common ath9k_hw hid_egalax ath3k joydev asus_laptop sparse_keymap battery input_polldev
    [   60.141014]
    [   60.141014] Pid: 771, comm: meego-ux-daemon Not tainted 2.6.37.2-7.1 #1 EXOPC EXOPG06411/EXOPG06411
    [   60.141014] EIP: 0060:[<c1536d11>] EFLAGS: 00010046 CPU: 0
    [   60.141014] EIP is at __mutex_unlock_slowpath+0x5a/0x111
    [   60.141014] EAX: 00000100 EBX: 6b6b6b9b ECX: e9b4a1b0 EDX: e4a4e580
    [   60.141014] ESI: db162558 EDI: 00000246 EBP: e480be50 ESP: e480be44
    [   60.141014]  DS: 007b ES: 007b FS: 00d8 GS: 0000 SS: 0068
    [   60.141014] Process meego-ux-daemon (pid: 771, ti=e480a000 task=e9b4a1b0 task.ti=e480a000)
    [   60.141014] Stack:
    [   60.141014]  e4a4e580 db162558 f5a2f838 e480be58 c1536dd0 e480be68 c125ab1b db162558
    [   60.141014]  db1624e0 e480be78 c10ba071 db162558 f760241c e480be94 c10bb0bc 000155fe
    [   60.141014]  f760241c f5a2f838 f5a2f8c8 00000000 e480bea4 c1037c24 00000000 f5a2f838
    [   60.141014] Call Trace:
    [   60.141014]  [<c1536dd0>] ? mutex_unlock+0x8/0xa
    [   60.141014]  [<c125ab1b>] ? drm_gem_vm_close+0x39/0x3d
    [   60.141014]  [<c10ba071>] ? remove_vma+0x2d/0x58
    [   60.141014]  [<c10bb0bc>] ? exit_mmap+0x126/0x13f
    [   60.141014]  [<c1037c24>] ? mmput+0x37/0x9a
    [   60.141014]  [<c10d450d>] ? exec_mmap+0x178/0x19c
    [   60.141014]  [<c1537f85>] ? _raw_spin_unlock+0x1d/0x36
    [   60.141014]  [<c10d4eb0>] ? flush_old_exec+0x42/0x75
    [   60.141014]  [<c1104442>] ? load_elf_binary+0x32a/0x922
    [   60.141014]  [<c10d3f76>] ? search_binary_handler+0x200/0x2ea
    [   60.141014]  [<c10d3ecf>] ? search_binary_handler+0x159/0x2ea
    [   60.141014]  [<c1104118>] ? load_elf_binary+0x0/0x922
    [   60.141014]  [<c10d56b2>] ? do_execve+0x1ff/0x2e6
    [   60.141014]  [<c100970e>] ? sys_execve+0x2d/0x55
    [   60.141014]  [<c1002a5a>] ? ptregs_execve+0x12/0x18
    [   60.141014]  [<c10029dc>] ? sysenter_do_call+0x12/0x3c
    [   60.141014]  [<c1530000>] ? init_centaur+0x9c/0x1ba
    [   60.141014] Code: c1 00 75 0f ba 38 01 00 00 b8 8c 3a 6c c1 e8 cc 2e b0 ff 9c 58 8d 74 26 00 89 c7 fa 90 8d 74 26 00 e8 d2 b4 b2 ff b8 00 01 00 00 <f0> 66 0f c1 43 04 38 e0 74 07 f3 90 8a 43 04 eb f5 83 3d 64 ef
    [   60.141014] EIP: [<c1536d11>] __mutex_unlock_slowpath+0x5a/0x111 SS:ESP 0068:e480be44
    [   60.141014] CR2: 000000006b6b6b9f
    
    Reported-by: Rusty Lynch <rusty.lynch@intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@kernel.org
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 62f75aafdf180554b4fad29ff1f3827b151d39db
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Mar 8 14:39:24 2011 +0300

    ASoC: sgtl5000: use after free in ldo_regulator_register()
    
    The "ldo" variable was dereferenced after free on the error path.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Acked-by: Liam Girdwood <lrg@ti.com>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit da527770007fce8e4541947d47918248286da875
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Wed Mar 2 19:05:33 2011 -0500

    block: Move blk_throtl_exit() call to blk_cleanup_queue()
    
    Move blk_throtl_exit() in blk_cleanup_queue() as blk_throtl_exit() is
    written in such a way that it needs queue lock. In blk_release_queue()
    there is no gurantee that ->queue_lock is still around.
    
    Initially blk_throtl_exit() was in blk_cleanup_queue() but Ingo reported
    one problem.
    
      https://lkml.org/lkml/2010/10/23/86
    
      And a quick fix moved blk_throtl_exit() to blk_release_queue().
    
            commit 7ad58c028652753814054f4e3ac58f925e7343f4
            Author: Jens Axboe <jaxboe@fusionio.com>
            Date:   Sat Oct 23 20:40:26 2010 +0200
    
            block: fix use-after-free bug in blk throttle code
    
    This patch reverts above change and does not try to shutdown the
    throtl work in blk_sync_queue(). By avoiding call to
    throtl_shutdown_timer_wq() from blk_sync_queue(), we should also avoid
    the problem reported by Ingo.
    
    blk_sync_queue() seems to be used only by md driver and it seems to be
    using it to make sure q->unplug_fn is not called as md registers its
    own unplug functions and it is about to free up the data structures
    used by unplug_fn(). Block throttle does not call back into unplug_fn()
    or into md. So there is no need to cancel blk throttle work.
    
    In fact I think cancelling block throttle work is bad because it might
    happen that some bios are throttled and scheduled to be dispatched later
    with the help of pending work and if work is cancelled, these bios might
    never be dispatched.
    
    Block layer also uses blk_sync_queue() during blk_cleanup_queue() and
    blk_release_queue() time. That should be safe as we are also calling
    blk_throtl_exit() which should make sure all the throttling related
    data structures are cleaned up.
    
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Jens Axboe <jaxboe@fusionio.com>

commit a2c06ee2fe5b48a71e697bae00c6e7195fc016b6
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed Feb 23 14:24:01 2011 +1000

    Revert "ttm: Include the 'struct dev' when using the DMA API."
    
    This reverts commit 5a893fc28f0393adb7c885a871b8c59e623fd528.
    
    This causes a use after free in the ttm free alloc pages path,
    when it tries to get the be after the be has been destroyed.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 25d41d8455ec1ee7433e146ee94436dc4195f420
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 7 15:00:27 2011 +0100

    debugfs: Fix filesystem reference counting on debugfs_remove() failure
    
    When __debugfs_remove() fails (because simple_rmdir() fails e.g. when a
    directory is not empty), we must not decrement use count of the filesystem
    as nothing was in fact deleted.
    
    This fixes use after free caused by debugfs in some cases.
    
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 1f6fe7cba1c0a817a8712d7fdd0ec1b4ddd4ea2f
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Wed Feb 9 15:34:54 2011 -0800

    [SCSI] target: fix use after free detected by SLUB poison
    
    This patch moves a large number of memory release paths inside of the
    configfs callback target_core_hba_item_ops->release() called from
    within fs/configfs/item.c: config_item_cleanup() context.  This patch
    resolves the SLUB 'Poison overwritten' warnings.
    
    Signed-off-by: Nicholas A. Bellinger <nab@linux-iscsi.org>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 9b00b4157f7b3265de291ac8979a5f1611ce64ab
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Jan 30 11:29:47 2011 +0100

    wl12xx: fix use after free
    
    When DEBUG_SPI is included in the debug log level wl1271_spi_reset()
    will dump the already freed memory instead of the SPI buffer.
    
    This bug was spotted by the semantic patch tool coccinelle using the
    script found at scripts/coccinelle/free/kfree.cocci.
    
    More information about semantic patching is available at
    http://coccinelle.lip6.fr/
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 839f7ad6932d95f4d5ae7267b95c574714ff3d5b
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri Jan 21 15:54:57 2011 +0000

    NFS: Fix "kernel BUG at fs/aio.c:554!"
    
    Nick Piggin reports:
    
    > I'm getting use after frees in aio code in NFS
    >
    > [ 2703.396766] Call Trace:
    > [ 2703.396858]  [<ffffffff8100b057>] ? native_sched_clock+0x27/0x80
    > [ 2703.396959]  [<ffffffff8108509e>] ? put_lock_stats+0xe/0x40
    > [ 2703.397058]  [<ffffffff81088348>] ? lock_release_holdtime+0xa8/0x140
    > [ 2703.397159]  [<ffffffff8108a2a5>] lock_acquire+0x95/0x1b0
    > [ 2703.397260]  [<ffffffff811627db>] ? aio_put_req+0x2b/0x60
    > [ 2703.397361]  [<ffffffff81039701>] ? get_parent_ip+0x11/0x50
    > [ 2703.397464]  [<ffffffff81612a31>] _raw_spin_lock_irq+0x41/0x80
    > [ 2703.397564]  [<ffffffff811627db>] ? aio_put_req+0x2b/0x60
    > [ 2703.397662]  [<ffffffff811627db>] aio_put_req+0x2b/0x60
    > [ 2703.397761]  [<ffffffff811647fe>] do_io_submit+0x2be/0x7c0
    > [ 2703.397895]  [<ffffffff81164d0b>] sys_io_submit+0xb/0x10
    > [ 2703.397995]  [<ffffffff8100307b>] system_call_fastpath+0x16/0x1b
    >
    > Adding some tracing, it is due to nfs completing the request then
    > returning something other than -EIOCBQUEUED, so aio.c
    > also completes the request.
    
    To address this, prevent the NFS direct I/O engine from completing
    async iocbs when the forward path returns an error without starting
    any I/O.
    
    This fix appears to survive ^C during both "xfstest no. 208" and "fsx
    -Z."
    
    It's likely this bug has existed for a very long while, as we are seeing
    very similar symptoms in OEL 5.  Copying stable.
    
    Cc: Stable <stable@kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 0dd386676497fb3097e6fbb3de6090c948c0df30
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Dec 21 07:00:13 2010 +0300

    wl12xx: use after free in debug code
    
    If debugging is turned on, then wl1271_dump() dereferences a freed
    variable.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Luciano Coelho <luciano.coelho@nokia.com>

commits)
      [media] staging/lirc: fix mem leaks and ptr err usage
      [media] hdpvr: reduce latency of i2c read/write w/recycled buffer
      [media] hdpvr: enable IR part
      [media] rc/mceusb: timeout should be in ns, not us
      [media] v4l2-device: fix 'use-after-freed' oops
      [media] v4l2-dev: don't memset video_device.dev
      [media] zoran: use video_device_alloc instead of kmalloc
      [media] w9966: zero device state after a detach
      [media] v4l: Fix a use-before-set in the control framework
      [media] v4l: Include linux/videodev2.h in media/v4l2-ctrls.h
      [media] DocBook/v4l: update V4L2 revision and update copyright years
      [media] DocBook/v4l: fix validation error in dev-rds.xml
      [media] v4l2-ctrls: queryctrl shouldn't attempt to replace V4L2_CID_PRIVATE_BASE IDs
      [media] v4l2-ctrls: fix missing 'read-only' check
      [media] pvrusb2: Provide more information about IR units to lirc_zilog and ir-kbd-i2c
      [media] ir-kbd-i2c: Add back defaults setting for Zilog Z8's at addr 0x71
      [media] lirc_zilog: Update TODO.lirc_zilog
      [media] lirc_zilog: Add Andy Walls to copyright notice and authors list
      [media] lirc_zilog: Remove useless struct i2c_driver.command function
      [media] lirc_zilog: Remove unneeded tests for existence of the IR Tx function
      ...

commit 672dcd54774ea1b03da8f2baa1cdbf827927fc85
Author: Hans Verkuil <hverkuil@xs4all.nl>
Date:   Tue Jan 11 17:48:21 2011 -0300

    [media] v4l2-device: fix 'use-after-freed' oops
    
    Fix a bug in v4l2_device_unregister where the sd pointer can be dereferenced
    after it was freed.
    
    Normally the i2c adapter is removed before this function is called. Removing
    the adapter will also unregister all subdevs on that adapter, so generally
    v4l2_device_unregister has nothing to do. However, in the case of a platform
    i2c bus that bus is generally not freed.
    
    In that case, after freeing the i2c subdevice the code will fall into the
    second block when it tests if the subdev is a SPI device. But by that time
    the subdev is already freed and the kernel oopses.
    
    The fix is trivial: continue with the loop after freeing the i2c or spi
    subdevice.
    
    Signed-off-by: Hans Verkuil <hverkuil@xs4all.nl>
    Reported-by: Daniel Drake <dsd@laptop.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 068c5cc5ac7414a8e9eb7856b4bf3cc4d4744267
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Jan 19 12:26:11 2011 +0100

    sched, cgroup: Use exit hook to avoid use-after-free crash
    
    By not notifying the controller of the on-exit move back to
    init_css_set, we fail to move the task out of the previous
    cgroup's cfs_rq. This leads to an opportunity for a
    cgroup-destroy to come in and free the cgroup (there are no
    active tasks left in it after all) to which the not-quite dead
    task is still enqueued.
    
    Reported-by: Miklos Vajna <vmiklos@frugalware.org>
    Fixed-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: <stable@kernel.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    LKML-Reference: <1293206353.29444.205.camel@laptop>

commits)
      power_supply: Add MAX17042 Fuel Gauge Driver
      olpc_battery: Fix up XO-1.5 properties list
      olpc_battery: Add support for CURRENT_NOW and VOLTAGE_NOW
      olpc_battery: Add support for CHARGE_NOW
      olpc_battery: Add support for CHARGE_FULL_DESIGN
      olpc_battery: Ambient temperature is not available on XO-1.5
      jz4740-battery: Should include linux/io.h
      s3c_adc_battery: Add gpio_inverted field to pdata
      power_supply: Don't use flush_scheduled_work()
      power_supply: Fix use after free and memory leak
      gpio-charger: Fix potential race between irq handler and probe/remove
      gpio-charger: Provide default name for the power_supply
      gpio-charger: Check result of kzalloc
      jz4740-battery: Check if platform_data is supplied
      isp1704_charger: Detect charger after probe
      isp1704_charger: Set isp->dev before anything needs it
      isp1704_charger: Detect HUB/Host chargers
      isp1704_charger: Correct length for storing model
      power_supply: Add gpio charger driver
      jz4740-battery: Protect against concurrent battery readings
      ...

commits)
      cassini: Use local-mac-address prom property for Cassini MAC address
      net: remove the duplicate #ifdef __KERNEL__
      net: bridge: check the length of skb after nf_bridge_maybe_copy_header()
      netconsole: clarify stopping message
      netconsole: don't announce stopping if nothing happened
      cnic: Fix the type field in SPQ messages
      netfilter: fix export secctx error handling
      netfilter: fix the race when initializing nf_ct_expect_hash_rnd
      ipv4: IP defragmentation must be ECN aware
      net: r6040: Return proper error for r6040_init_one
      dcb: use after free in dcb_flushapp()
      dcb: unlock on error in dcbnl_ieee_get()
      net: ixp4xx_eth: Return proper error for eth_init_one
      include/linux/if_ether.h: Add #define ETH_P_LINK_CTL for HPNA and wlan local tunnel
      net: add POLLPRI to sock_def_readable()
      af_unix: Avoid socket->sk NULL OOPS in stream connect security hooks.
      net_sched: pfifo_head_drop problem
      mac80211: remove stray extern
      mac80211: implement off-channel TX using hw r-o-c offload
      mac80211: implement hardware offload for remain-on-channel
      ...

commit 2a8fe003741aa90b6b9453e90af4bbb7bc42918c
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Jan 4 21:03:44 2011 +0000

    dcb: use after free in dcb_flushapp()
    
    The original code has a use after free bug because it's not using the
    _safe() version of the list_for_each_entry() macro.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c03017544e3b2e60aa3c8ae451fac01595f1bf11
Author: Peter Oberparleiter <peter.oberparleiter@de.ibm.com>
Date:   Wed Jan 5 12:48:13 2011 +0100

    [S390] cio: fix ccwgroup unregistration race condition
    
    A race condition exists in the ccwgroup device unregistration code
    which can cause a kernel panic due to a use-after-free bug. This
    race condition might be triggered when all ccw devices associated with
    a ccwgroup device are removed at the same time (e.g. because the
    corresponding channel path becomes no longer available).
    
    Fix this race condition by clearing the references from the associated
    ccw devices to the ccw group device during unregistration of the
    ccw group device.
    
    Signed-off-by: Peter Oberparleiter <peter.oberparleiter@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 3a2dbd611b38cf9a026c0099a85701ad183d1949
Author: Vasiliy Kulikov <segoon@openwall.com>
Date:   Fri Nov 19 21:41:58 2010 +0300

    power_supply: Fix use after free and memory leak
    
    device_unregister() might free its argument.  This leads to freed
    memory use in kfree().  Also use put_device() instead of kfree()
    as dev may be already used in another layer after call to device_add().
    
    Signed-off-by: Vasiliy Kulikov <segoon@openwall.com>
    Signed-off-by: Anton Vorontsov <cbouatmailru@gmail.com>

commit 955256f2c3e25c94ad373c43fbc38d2ac8af2a71
Author: Josef Bacik <josef@redhat.com>
Date:   Fri Nov 19 09:41:10 2010 -0500

    Btrfs: fix use after free in O_DIRECT
    
    This fixes a bug where we use dip after we have freed it.  Instead just use the
    file_offset that was passed to the function.  Thanks,
    
    Signed-off-by: Josef Bacik <josef@redhat.com>

commit 6f331623b99e1900e3a664bbe6e95406ff4b27f4
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Dec 9 08:35:40 2010 +0300

    drm: use after free in drm_queue_vblank_event()
    
    The "e" pointer is either NULL or freed when we call
    drm_vblank_put(dev, e->pipe) on the error path.  Just pass the "pipe"
    variable directly instead.
    
    I changed another caller to use "pipe" as well for consistency.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit ed2849d3ecfa339435818eeff28f6c3424300cec
Author: NeilBrown <neilb@suse.de>
Date:   Tue Nov 16 16:55:19 2010 +1100

    sunrpc: prevent use-after-free on clearing XPT_BUSY
    
    When an xprt is created, it has a refcount of 1, and XPT_BUSY is set.
    The refcount is *not* owned by the thread that created the xprt
    (as is clear from the fact that creators never put the reference).
    Rather, it is owned by the absence of XPT_DEAD.  Once XPT_DEAD is set,
    (And XPT_BUSY is clear) that initial reference is dropped and the xprt
    can be freed.
    
    So when a creator clears XPT_BUSY it is dropping its only reference and
    so must not touch the xprt again.
    
    However svc_recv, after calling ->xpo_accept (and so getting an XPT_BUSY
    reference on a new xprt), calls svc_xprt_recieved.  This clears
    XPT_BUSY and then svc_xprt_enqueue - this last without owning a reference.
    This is dangerous and has been seen to leave svc_xprt_enqueue working
    with an xprt containing garbage.
    
    So we need to hold an extra counted reference over that call to
    svc_xprt_received.
    
    For safety, any time we clear XPT_BUSY and then use the xprt again, we
    first get a reference, and the put it again afterwards.
    
    Note that svc_close_all does not need this extra protection as there are
    no threads running, and the final free can only be called asynchronously
    from such a thread.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Cc: stable@kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

commit 6b74705e15d5c87181008f1ac984df7faaad55c9
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Dec 6 10:02:55 2010 +0300

    Staging: Beceem: use after free in bcm_exit()
    
    We can't call class_destroy() until after the driver has been deregistered.
    It leads to a NULL deref on module unload.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit ba5787323d38084b30261e84510d4a173fcb493a
Author: Mariusz Kozlowski <mk@lab.zgora.pl>
Date:   Mon Nov 22 11:37:21 2010 -0800

    ide: fix use after free in ide-acpi
    
    out_obj points to kfreed memory and we dereference that pointer in
    DEBPRINT/printk.
    
    Signed-off-by: Mariusz Kozlowski <mk@lab.zgora.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e2b348354112df63a9c2ea4219a6867c6c7ea100
Author: Steffen Klassert <steffen.klassert@secunet.com>
Date:   Wed Nov 10 12:21:43 2010 +0100

    crypto: pcrypt - Fix use after free on padata_free
    
    kobject_put is called from padata_free for the padata kobject.
    The kobject's release function frees the padata instance,
    so don't call kobject_put for the padata kobject from pcrypt.
    
    Reported-and-tested-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit fa2b30af84e84129b8d4cf955890ad167cc20cf0
Author: Julia Lawall <julia@diku.dk>
Date:   Tue Nov 9 23:00:41 2010 +0100

    ALSA: sound/pci/ctxfi/ctpcm.c: Remove potential for use after free
    
    In each function, the value apcm is stored in the private_data field of
    runtime.  At the same time the function ct_atc_pcm_free_substream is stored
    in the private_free field of the same structure.  ct_atc_pcm_free_substream
    dereferences and ultimately frees the value in the private_data field.  But
    each function can exit in an error case with apcm having been freed, in
    which case a subsequent call to the private_free function would perform a
    dereference after free.  On the other hand, if the private_free field is
    not initialized, it is NULL, and not invoked (see snd_pcm_detach_substream
    in sound/core/pcm.c).  To avoid the introduction of a dangling pointer, the
    initializations of the private_data and private_free fields are moved to
    the end of the function, past any possible free of apcm.  This is safe
    because the previous calls to snd_pcm_hw_constraint_integer and
    snd_pcm_hw_constraint_minmax, which take runtime as an argument, do not
    refer to either of these fields.
    
    In each function, there is one error case where apcm needs to be freed, and
    a call to kfree is added.
    
    The sematic match that finds this problem is as follows:
    (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression e,e1,e2,e3;
    identifier f,free1,free2;
    expression a;
    @@
    
    *e->f = a
    ... when != e->f = e1
        when any
    if (...) {
      ... when != free1(...,e,...)
          when != e->f = e2
    * kfree(a)
      ... when != free2(...,e,...)
          when != e->f = e3
    }
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit ebe2e91e000c59aed0300d81815f451c85e0bda6
Author: Jeff Layton <jlayton@redhat.com>
Date:   Wed Nov 10 10:19:10 2010 -0500

    cifs: fix potential use-after-free in cifs_oplock_break_put
    
    cfile may very well be freed after the cifsFileInfo_put. Make sure we
    have a valid pointer to the superblock for cifs_sb_deactive.
    
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

commit d017bf6b4ff57db16a481a48bdad79274610a403
Author: Vivek Goyal <vgoyal@redhat.com>
Date:   Sat Nov 6 08:16:05 2010 -0400

    floppy: fix another use-after-free
    
    While scanning the floopy code due to c093ee4f07f4 ("floppy: fix
    use-after-free in module load failure path"), I found one more instance
    of trying to access disk->queue pointer after doing put_disk() on
    gendisk.  For some reason , floppy moule still loads/unloads fine.  The
    object is probably still around with right pointer values.
    
     o There seems to be one more instance of trying to cleanup the request
       queue after we have called put_disk() on associated gendisk.
    
     o This fix is more out of code inspection.  Even without this fix for
       some reason I am able to load/unload floppy module without any
       issues.
    
     o Floppy module loads/unloads fine after the fix.
    
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c093ee4f07f46d3a835841cafa07514fa94878d2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 5 17:45:59 2010 -0700

    floppy: fix use-after-free in module load failure path
    
    Commit 488211844e0c ("floppy: switch to one queue per drive instead of
    sharing a queue") introduced a use-after-free.  We do "put_disk()" on
    the disk device _before_ we then clean up the queue associated with that
    disk.
    
    Move the put_disk() down to avoid dereferencing a free'd data structure.
    
    Cc: Jens Axboe <jaxboe@fusionio.com>
    Cc: Vivek Goyal <vgoyal@redhat.com>
    Reported-and-tested-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f2166bb117952404689f0dc42624ee0b54a66e5e
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Oct 29 16:50:44 2010 +0200

    [S390] tape: fix dbf usage
    
    Get rid of the format string "%s" usage with volatile strings
    to prevent use after free errors in the s390dbf.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commits)
      ehea: Fixing statistics
      bonding: Fix lockdep warning after bond_vlan_rx_register()
      tunnels: Fix tunnels change rcu protection
      caif-u5500: Build config for CAIF shared mem driver
      caif-u5500: CAIF shared memory mailbox interface
      caif-u5500: CAIF shared memory transport protocol
      caif-u5500: Adding shared memory include
      drivers/isdn: delete double assignment
      drivers/net/typhoon.c: delete double assignment
      drivers/net/sb1000.c: delete double assignment
      qlcnic: define valid vlan id range
      qlcnic: reduce rx ring size
      qlcnic: fix mac learning
      ehea: fix use after free
      inetpeer: __rcu annotations
      fib_rules: __rcu annotates ctarget
      tunnels: add __rcu annotations
      net: add __rcu annotations to protocol
      ipv4: add __rcu annotations to routes.c
      qlge: bugfix: Restoring the vlan setting.
      ...

commit ce45b873028fdf94a24f0850cd554e6fda593e16
Author: Breno Leitao <leitao@linux.vnet.ibm.com>
Date:   Wed Oct 27 08:45:14 2010 +0000

    ehea: Fixing statistics
    
    (Applied over Eric's "ehea: fix use after free" patch)
    
    Currently ehea stats are broken. The bytes counters are got from
    the hardware, while the packets counters are got from the device
    driver. Also, the device driver counters are resetted during the
    the down process, and the hardware aren't, causing some weird
    numbers.
    
    This patch just consolidates the packets and bytes on the device
    driver.
    
    Signed-off-by: Breno Leitao <leitao@linux.vnet.ibm.com>
    Reviewed-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e5ccd96110d5ac0f73b695ba606feb6d69472f26
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Tue Oct 26 19:21:07 2010 +0000

    ehea: fix use after free
    
    ehea_start_xmit() dereferences skb after its freeing in ehea_xmit3() to
    get vlan tags.
    
    Move the offending block before the potential ehea_xmit3() call.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Breno Leitao <leitao@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a27586d3d5c3157260b055d057c6f4f6654c72c
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Oct 21 05:07:58 2010 +0000

    can: flexcan: fix use after free of priv
    
    The priv is part of the memory allocated by alloc_candev().
    This patch moved the free it after last usage of priv.
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 382279336f428c80f344edfc30d53797e3e76146
Author: Josef Bacik <josef@redhat.com>
Date:   Tue Oct 26 12:52:53 2010 -0400

    Btrfs: set trans to null in reserve_metadata_bytes if we commit the transaction
    
    btrfs_commit_transaction will free our trans, but because we pass trans to
    shrink_delalloc we could possibly have a use after free situation.  So instead
    if we commit the transaction, set trans to null and set committed to true so we
    don't keep trying to commit a transaction.  This fixes a panic I could reproduce
    at will.  Thanks,
    
    Signed-off-by: Josef Bacik <josef@redhat.com>

commits)
      [S390] topology: export cpu topology via proc/sysinfo
      [S390] topology: move topology sysinfo code
      [S390] topology: clean up facility detection
      [S390] cleanup facility list handling
      [S390] enable ARCH_DMA_ADDR_T_64BIT with 64BIT
      [S390] dasd: ignore unsolicited interrupts for DIAG
      [S390] kvm: Enable z196 instruction facilities
      [S390] dasd: fix unsolicited interrupt recognition
      [S390] dasd: fix use after free in dbf
      [S390] kvm: Fix badness at include/asm/mmu_context.h:83
      [S390] cio: fix I/O cancel function
      [S390] topology: change default
      [S390] smp: use correct cpu address in print_cpu_info()
      [S390] remove ieee_instruction_pointer from thread_struct
      [S390] cleanup system call parameter setup
      [S390] correct alignment of cpuid structure
      [S390] cleanup lowcore access from external interrupts
      [S390] cleanup lowcore access from program checks
      [S390] pgtable: move pte_mkhuge() from hugetlb.h to pgtable.h
      [S390] fix SIGBUS handling
      ...

commit 26cffecf84c8cb33787dd13a72bd2124d107d413
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Mon Oct 25 16:10:46 2010 +0200

    [S390] dasd: fix use after free in dbf
    
    Writing to /proc/dasd/statistics while the debug level of the
    generic dasd debug entry is set to DBF_DEBUG will lead to an
    use after free when accessing the debug entry later.
    Since for the format string "%s" in the s390 dbf only a pointer
    to the string is stored in the debug feature and the buffer used
    here is freed afterwards.
    
    To fix this just remove the debug message.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 5c398dc8f5a58b5417d8ae0d474704feb6e12a12
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Sun Oct 24 04:27:10 2010 +0000

    netlink: fix netlink_change_ngroups()
    
    commit 6c04bb18ddd633 (netlink: use call_rcu for netlink_change_ngroups)
    used a somewhat convoluted and racy way to perform call_rcu().
    
    The old block of memory is freed after a grace period, but the rcu_head
    used to track it is located in new block.
    
    This can clash if we call two times or more netlink_change_ngroups(),
    and a block is freed before another. call_rcu() called on different cpus
    makes no guarantee in order of callbacks.
    
    Fix this using a more standard way of handling this : Each block of
    memory contains its own rcu_head, so that no 'use after free' can
    happens.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    CC: Johannes Berg <johannes@sipsolutions.net>
    CC: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 759a6c768dcdbbb4d3f1fb965b674c15773e09ca
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Oct 21 01:01:15 2010 +0000

    can: at91_can: fix use after free of priv
    
    The priv is part of the memory allocated by alloc_candev().
    This patch moved the free it after last usage of priv.
    
    While there convert all free_netdev() to free_candev() (which is currently
    just a wrapper around free_netdev()) to be symetrically with the allocation
    via alloc_candev().
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ad58c028652753814054f4e3ac58f925e7343f4
Author: Jens Axboe <jaxboe@fusionio.com>
Date:   Sat Oct 23 20:40:26 2010 +0200

    block: fix use-after-free bug in blk throttle code
    
    blk_throtl_exit() frees the throttle data hanging off the queue
    in blk_cleanup_queue(), but blk_put_queue() will indirectly
    dereference this data when calling blk_sync_queue() which in
    turns calls throtl_shutdown_timer_wq().
    
    Fix this by moving the freeing of the throttle data to when
    the queue is truly being released, and post the call to
    blk_sync_queue().
    
    Reported-by: Ingo Molnar <mingo@elte.hu>
    Tested-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Jens Axboe <jaxboe@fusionio.com>

commit aa73aec6c385e2c797ac25cc7ccf0318031de7c8
Author: Clemens Ladisch <clemens@ladisch.de>
Date:   Fri Oct 15 12:06:18 2010 +0200

    ALSA: rawmidi: fix oops (use after free) when unloading a driver module
    
    When a driver module is unloaded and the last still open file is a raw
    MIDI device, the card and its devices will be actually freed in the
    snd_card_file_remove() call when that file is closed.  Afterwards, rmidi
    and rmidi->card point into freed memory, so the module pointer is likely
    to be garbage.
    (This was introduced by commit 9a1b64caac82aa02cb74587ffc798e6f42c6170a.)
    
    Signed-off-by: Clemens Ladisch <clemens@ladisch.de>
    Reported-by: Krzysztof Foltman <wdev@foltman.com>
    Cc: 2.6.30-2.6.35 <stable@kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 6cf9e995f91e5bbffb2bef85feef490e5b67605d
Author: Ben Greear <greearb@candelatech.com>
Date:   Thu Oct 14 12:45:30 2010 -0700

    ath9k: Null out references to stale pointers.
    
    This doesn't fix any problem that I'm aware of, but should
    make it harder to add use-after-free type bugs in the
    future.
    
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit c23cc81a5e5c1d4486b662cedd0afcdf9145f154
Author: Ben Greear <greearb@candelatech.com>
Date:   Wed Oct 13 12:01:23 2010 -0700

    ath9k: Fix potential use-after-free.
    
    The ath_debug_stat_tx references bf->bf_mpdu, which
    is the skb consumed by  ath_tx_complete.  So, call
    the ath_debug_stat_tx method first.
    
    Signed-off-by: Ben Greear <greearb@candelatech.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 419c20465d6319274e7286f0966e2390540e6e0a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Sun Oct 10 23:26:56 2010 +0000

    NET: pch, fix use after free
    
    Stanse found that pch_gbe_xmit_frame uses skb after it is freed. Fix
    that.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Masayuki Ohtake <masa-korg@dsn.okisemi.com>
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0aa7deadffd8b596983a3abe29a218b4c5f43301
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Sun Oct 10 23:26:58 2010 +0000

    NET: wimax, fix use after free
    
    Stanse found that i2400m_rx frees skb, but still uses skb->len even
    though it has skb_len defined. So use skb_len properly in the code.
    
    And also define it unsinged int rather than size_t to solve
    compilation warnings.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>
    Cc: linux-wimax@intel.com
    Acked-by: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5518b29f225dbdf47ded02cf229ff8225a2cdf82
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Sun Oct 10 22:46:34 2010 +0000

    ATM: mpc, fix use after free
    
    Stanse found that mpc_push frees skb and then it dereferences it. It
    is a typo, new_skb should be dereferenced there.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1ee89d5b007620353fb7dec1d34db4baa1a5571
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Sun Oct 10 21:50:44 2010 +0000

    ATM: solos-pci, remove use after free
    
    Stanse found we do in console_show:
      kfree_skb(skb);
      return skb->len;
    which is not good. Fix that by remembering the len and use it in the
    function instead.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Chas Williams <chas@cmf.nrl.navy.mil>
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 71ebc01d3ad4fa3f20e86603bc31ff2cbc535d95
Author: Michal Marek <mmarek@suse.cz>
Date:   Fri Oct 8 16:40:27 2010 +0200

    kconfig: Temporarily disable dependency warnings
    
    After fixing a use-after-free bug in kconfig, a 'make defconfig' or
    'make allmodconfig' fills the screen with warnings that were not
    detected before. Given that we are close to the release now, disable the
    warnings temporarily and deal with them after 2.6.36.
    
    Signed-off-by: Michal Marek <mmarek@suse.cz>

commit ff5ff6060bf880aac233e68dd666cbe9e39ec620
Author: Arnaud Lacombe <lacombar@gmail.com>
Date:   Sun Sep 26 16:22:03 2010 -0400

    kconfig: delay symbol direct dependency initialization
    
    This fixes the use-after-free and associated crash in kconfig introduced
    in commit 246cf9c26bf11f2bffbecea6e5bd222eee7b1df8.
    
    Signed-off-by: Arnaud Lacombe <lacombar@gmail.com>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

commit 1cf180c94e9166cda083ff65333883ab3648e852
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 28 20:57:19 2010 +0200

    x86, irq: Plug memory leak in sparse irq
    
    free_irq_cfg() is not freeing the cpumask_vars in irq_cfg. Fixing this
    triggers a use after free caused by the fact that copying struct
    irq_cfg is done with memcpy, which copies the pointer not the cpumask.
    
    Fix both places.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Yinghai Lu <yhlu.kernel@gmail.com>
    LKML-Reference: <alpine.LFD.2.00.1009282052570.2416@localhost6.localdomain6>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@kernel.org
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>

commit 7c1e183186377e84e6f4e457be0514887f2df4ef
Author: John W. Linville <linville@tuxdriver.com>
Date:   Fri Sep 24 15:52:49 2010 -0400

    Revert "mac80211: fix use-after-free"
    
    This reverts commit cd87a2d3a33d75a646f1aa1aa2ee5bf712d6f963.
    
    Author reports it conflicts with proper fixes, applied hereafter.
    
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit cd87a2d3a33d75a646f1aa1aa2ee5bf712d6f963
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Sep 24 11:20:47 2010 +0200

    mac80211: fix use-after-free
    
    commit 8c0c709eea5cbab97fb464cd68b06f24acc58ee1
    Author: Johannes Berg <johannes@sipsolutions.net>
    Date:   Wed Nov 25 17:46:15 2009 +0100
    
        mac80211: move cmntr flag out of rx flags
    
    moved the CMTR flag into the skb's status, and
    in doing so introduced a use-after-free -- when
    the skb has been handed to cooked monitors the
    status setting will touch now invalid memory.
    
    Additionally, moving it there has effectively
    discarded the optimisation -- since the bit is
    only ever set on freed SKBs, and those were a
    copy, it could never be checked.
    
    For the current release, fixing this properly
    is a bit too involved, so let's just remove the
    problematic code and leave userspace with one
    copy of each frame for each virtual interface.
    
    Cc: stable@kernel.org [2.6.33+]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 123d5c0197d8333c3f5cb9572a0c8299dc611233
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Sep 23 16:15:21 2010 +0100

    drm/i915/sdvo: Cleanup connector on error path
    
    We weren't unlinking the freed connector from the drm lists, and so
    hit some use-after-free if we failed to initialise the connector.
    
    Reported-and-tested-by: Woody Suwalski <terraluna977@gmail.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=18342
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit f7732d6573c4f29fc1ca5d384bbf82ddfa115030
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Tue Sep 21 16:52:40 2010 -0400

    NFS: Fix a use-after-free case in nfs_async_rename()
    
    The call to nfs_async_rename_release() after rpc_run_task() is incorrect.
    The rpc_run_task() is always guaranteed to call the ->rpc_release() method.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 26c15cfd291f8b4ee40b4bbdf5e3772adfd704f5
Author: Julian Anastasov <ja@ssi.bg>
Date:   Tue Sep 21 18:12:30 2010 +0200

    ipvs: changes related to service usecnt
    
            Change the usage of svc usecnt during command execution:
    
    - we check if svc is registered but we do not need to hold usecnt
    reference while under __ip_vs_mutex, only the packet handling needs
    it during scheduling
    
    - change __ip_vs_service_get to __ip_vs_service_find and
    __ip_vs_svc_fwm_get to __ip_vs_svc_fwm_find because now caller
    will increase svc->usecnt
    
    - put common code that calls update_service in __ip_vs_update_dest
    
    - put common code in ip_vs_unlink_service() and use it to unregister
    the service
    
    - add comment that svc should not be accessed after ip_vs_del_service
    anymore
    
    - all IP_VS_WAIT_WHILE calls are now unified: usecnt > 0
    
    - Properly log the app ports
    
            As result, some problems are fixed:
    
    - possible use-after-free of svc in ip_vs_genl_set_cmd after
    ip_vs_del_service because our usecnt reference does not guarantee that
    svc is not freed on refcnt==0, eg. when no dests are moved to trash
    
    - possible usecnt leak in do_ip_vs_set_ctl after ip_vs_del_service
    when the service is not freed now, for example, when some
    destionations are moved into trash and svc->refcnt remains above 0.
    It is harmless because svc is not in hash anymore.
    
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Acked-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Patrick McHardy <kaber@trash.net>

commit 3a5c19c23db65a554f2e4f5df5f307c668277056
Author: James Bottomley <James.Bottomley@suse.de>
Date:   Mon Aug 16 10:06:26 2010 -0500

    [SCSI] fix use-after-free in scsi_init_io()
    
    we're using a pointer through a freed command to reset the request,
    which has shown up as an oops with slab poisoning:
    
    Reported-by: Tejun Heo <tj@kernel.org>
    Reported-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 7332f2a6217ee6925f83ef0e725013067ed316ba
Author: Jeff Layton <jlayton@redhat.com>
Date:   Fri Sep 3 12:00:49 2010 -0400

    cifs: eliminate some more premature cifsd exits
    
    If the tcpStatus is still CifsNew, the main cifs_demultiplex_loop can
    break out prematurely in some cases. This is wrong as we will almost
    always have other structures with pointers to the TCP_Server_Info. If
    the main loop breaks under any other condition other than tcpStatus ==
    CifsExiting, then it'll face a use-after-free situation.
    
    I don't see any reason to treat a CifsNew tcpStatus differently than
    CifsGood. I believe we'll still want to attempt to reconnect in either
    case. What should happen in those situations is that the MIDs get marked
    as MID_RETRY_NEEDED. This will make CIFSSMBNegotiate return -EAGAIN, and
    then the caller can retry the whole thing on a newly reconnected socket.
    If that fails again in the same way, the caller of cifs_get_smb_ses
    should tear down the TCP_Server_Info struct.
    
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

commit 43ba21b57a3e757000bfa8ccf46c81f232b4d881
Author: Nicolas Palix <npalix@diku.dk>
Date:   Tue Aug 24 17:39:04 2010 +0200

    Coccinelle: Add free/kfree.cocci
    
    Find a use after free.  Values of variables may imply that some
    execution paths are not possible, resulting in false positives.
    Another source of false positives are macros such as
    SCTP_DBG_OBJCNT_DEC that do not actually evaluate their argument
    
    Signed-off-by: Nicolas Palix <npalix@diku.dk>
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

commits)
      igbvf.txt: Add igbvf Documentation
      igb.txt: Add igb documentation
      e100/e1000*/igb*/ixgb*: Add missing read memory barrier
      ixgbe: fix build error with FCOE_CONFIG without DCB_CONFIG
      netxen: protect tx timeout recovery by rtnl lock
      isdn: gigaset: use after free
      isdn: gigaset: add missing unlock
      solos-pci: Fix race condition in tasklet RX handling
      pkt_sched: Fix sch_sfq vs tcf_bind_filter oops
      net: disable preemption before call smp_processor_id()
      tcp: no md5sig option size check bug
      iwlwifi: fix locking assertions
      iwlwifi: fix TX tracer
      isdn: fix information leak
      net: Fix napi_gro_frags vs netpoll path
      usbnet: remove noisy and hardly useful printk
      rtl8180: avoid potential NULL deref in rtl8180_beacon_work
      ath9k: Remove myself from the MAINTAINERS list
      libertas: scan before assocation if no BSSID was given
      libertas: fix association with some APs by using extended rates
      ...

commit 8bcfbd0af0f8ee50033091e75ab3d6b6e7fa8867
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Aug 5 22:21:26 2010 +0000

    isdn: gigaset: use after free
    
    I moved the kfree(cb) below the dereferences.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dba76c033f1b88b6eb0fa697b824f954b11f8a97
Author: Maxim Levitsky <maximlevitsky@gmail.com>
Date:   Wed Jul 28 18:53:16 2010 +0300

    mtd: blkdevs: fix crash related to sysfs attributes.
    
    Remove the attributes group before disk to avoid use after free
    
    Signed-off-by: Maxim Levitsky <maximlevitsky@gmail.com>
    Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>

commit 2a1bc0d56b446104a3a728925b3a7afbef64afa7
Author: Stefan Weil <weil@mail.berlios.de>
Date:   Tue Aug 3 08:53:45 2010 +0000

    davinci_emac: Fix use after free in davinci_emac_remove
    
    free_netdev finally calls kfree which makes the contents
    of ndev and priv (private data contained in ndev) invalid.
    
    So iounmap should be called before free_netdev.
    
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Chaithrika U S <chaithrika@ti.com>
    Cc: Sriramakrishnan <srk@ti.com>
    Cc: Kevin Hilman <khilman@deeprootsystems.com>
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Stefan Weil <weil@mail.berlios.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Input: adp5588-keypad - fix NULL dereference in adp5588_gpio_add()
      Input: cy8ctmg110 - capacitive touchscreen support
      Input: keyboard - also match braille-only keyboards
      Input: adp5588-keys - export unused GPIO pins
      Input: xpad - add product ID for Hori Fighting Stick EX2
      Input: adxl34x - fix leak and use after free
      Input: samsung-keypad - Add samsung keypad driver
      Input: i8042 - reset keyboard controller wehen resuming from S2R
      Input: synaptics - set min/max for finger width
      Input: synaptics - only report width on hardware that supports it
      Input: evdev - signal that device is writable in evdev_poll()
      Input: mousedev - signal that device is writable in mousedev_poll()
      Input: change input handlers to use bool when possible
      Input: document the MT event slot protocol
      Input: introduce MT event slots
      Input: usbtouchscreen - implement reset_resume
      Input: usbtouchscreen - implement runtime power management
      Input: usbtouchscreen - implement basic suspend/resume
      Input: Add ATMEL QT602240 touchscreen driver
      Input: fix signedness warning in input_set_keycode()
      ...

commit 9f841593ff65d2f801c7f80c4ed0955d30103f50
Author: Steve French <sfrench@us.ibm.com>
Date:   Fri Jul 23 20:37:53 2010 +0000

    [CIFS] relinquish fscache cookie before freeing CIFSTconInfo
    
    Doh, fix a use after free bug.
    
    Signed-off-by: Suresh Jayaraman <sjayaraman@suse.de>
    Reviewed-and-Tested-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

commit 8dc1775dce10d5e47d2805665804fddf39ea3a90
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Jul 23 23:18:51 2010 +0100

    drm/i915: Attempt to uncouple object after catastrophic failure in unbind
    
    If we fail to flush outstanding GPU writes but return the memory to the
    system, we risk corrupting memory should the GPU recovery and complete
    those writes. On the other hand, if we bail early and free the object
    then we have a definite use-after-free and real memory corruption.
    Choose the lesser of two evils, since in order to recover from the hung
    GPU we need to completely reset it, those pending writes should
    never happen.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit be72615bcf4d5b7b314d836c5e1b4baa4b65dad1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Jul 23 23:18:50 2010 +0100

    drm/i915: Repeat unbinding during free if interrupted (v6)
    
    If during the freeing of an object the unbind is interrupted by a system
    call, which is quite possible if we have outstanding GPU writes that
    must be flushed, the unbind is silently aborted. This still leaves the
    AGP region and backing pages allocated, and perhaps more importantly,
    the object remains upon the various lists exposing us to memory
    corruption.
    
    I think this is the cause behind the use-after-free, such as
    
      Bug 15664 - Graphics hang and kernel backtrace when starting Azureus
                  with Compiz enabled
      https://bugzilla.kernel.org/show_bug.cgi?id=15664
    
    v2: Daniel Vetter reminded me that kernel space programming is never easy.
    We cannot simply spin to clear the pending signal and so must deferred
    the freeing of the object until later.
    v3: Run from the top level retire requests.
    v4: Tested with P(return -ERESTARTSYS)=.5 from i915_gem_do_wait_request()
    v5: Rebase against Eric's for-linus tree.
    v6: Refactor, split and add a comment about avoiding unbounded recursion.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit f2d2420bbf4bb125ea5f2e1573d4da6b668fc78a
Author: Julia Lawall <julia@diku.dk>
Date:   Fri Jul 30 17:17:28 2010 +0200

    SA1111: Eliminate use after free
    
    __sa1111_remove always frees its argument, so the subsequent reference to
    sachip->saved_state represents a use after free.  __sa1111_remove does not
    appear to use the saved_state field, so the patch simply frees it first.
    
    A simplified version of the semantic patch that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression E,E2;
    @@
    
    __sa1111_remove(E)
    ...
    (
      E = E2
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 6ac5260850841eb4055811a68ff47d658ebe9a59
Author: Andrew Vasquez <andrew.vasquez@qlogic.com>
Date:   Fri May 28 15:08:19 2010 -0700

    [SCSI] qla2xxx: Correct async-srb issues.
    
    * hold the hardware_lock throughout the duration of ctx-sp
      timeout handling -- could result in use-after-free oops.
    
    * retry a timed-out login-request.
    
    * done() routines are called with the hardware-lock held, issue
    qla2x00_mark_device_lost() with proper 'defer' flag.
    
    * FCP2 capabilities are only relevant to target devices.
    
    Signed-off-by: Giridhar Malavali <giridhar.malavali@qlogic.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 083a469db4ecf3b286a96b5b722c37fc1affe0be
Author: Giridhar Malavali <giridhar.malavali@qlogic.com>
Date:   Fri May 28 15:08:18 2010 -0700

    [SCSI] qla2xxx: Correct use-after-free oops seen during EH-abort.
    
    Hold a reference to the srb (sp) while aborting an I/O -- as the
    I/O can/will complete from within the interrupt-context.
    
    Signed-off-by: Andrew Vasquez <andrew.vasquez@qlogic.com>
    Signed-off-by: Giridhar Malavali <giridhar.malavali@qlogic.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit f1cba532e8c1001a39650379aa7e04ad974d0592
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Jul 22 23:38:45 2010 -0700

    Input: adxl34x - fix leak and use after free
    
    These are a couple smatch issues.  In the original code, if only one of
    the allocation fails we leak the other variable so we should goto
    out_free_mem.
    
    Also there was a use after free if debugging was enabled and so I moved
    the kfree() down a line.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

commit a6aa62a0909b9ccb1f8b0d2653920ba071037972
Author: Nick Piggin <npiggin@suse.de>
Date:   Tue Jul 20 13:24:25 2010 -0700

    mm/vmscan.c: fix mapping use after free
    
    We need lock_page_nosync() here because we have no reference to the
    mapping when taking the page lock.
    
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Reviewed-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Mel Gorman <mel@csn.ul.ie>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 573201f36fd9c7c6d5218cdcd9948cee700b277d
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Jul 19 19:26:45 2010 +0000

    bridge: Partially disable netpoll support
    
    The new netpoll code in bridging contains use-after-free bugs
    that are non-trivial to fix.
    
    This patch fixes this by removing the code that uses skbs after
    they're freed.
    
    As a consequence, this means that we can no longer call bridge
    from the netpoll path, so this patch also removes the controller
    function in order to disable netpoll.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    
    Thanks,
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cba9ba4b902270c22f8b9c5149a284216b633fc1
Author: J. Bruce Fields <bfields@citi.umich.edu>
Date:   Tue Jun 1 11:21:40 2010 -0400

    nfsd4: fix delegation recall race use-after-free
    
    When the rarely-used callback-connection-changing setclientid occurs
    simultaneously with a delegation recall, we rerun the recall by
    requeueing it on a workqueue.  But we also need to take a reference on
    the delegation in that case, since the delegation held by the rpc itself
    will be released by the rpc_release callback.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>

commit 43a65303fe530afe4daf1c0fd6875fdba7090f91
Author: Carsten Otte <cotte@de.ibm.com>
Date:   Mon Jun 21 22:57:09 2010 +0000

    qeth: fix use after free for qeths debug area
    
    The function qeth_free_buffer_pool is called _after_ the per-card
    debug area has been released. This debug message is not all that
    usefull anyway, and thus gets removed.
    
    Signed-off-by: Carsten Otte <cotte@de.ibm.com>
    Signed-off-by: Frank Blaschka <frank.blaschka@de.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2dcb22b346be7b7b7e630a8970d69cf3f1111ec1
Author: Imre Deak <imre.deak@nokia.com>
Date:   Wed May 26 14:43:38 2010 -0700

    idr: fix backtrack logic in idr_remove_all
    
    Currently idr_remove_all will fail with a use after free error if
    idr::layers is bigger than 2, which on 32 bit systems corresponds to items
    more than 1024.  This is due to stepping back too many levels during
    backtracking.  For simplicity let's assume that IDR_BITS=1 -> we have 2
    nodes at each level below the root node and each leaf node stores two IDs.
     (In reality for 32 bit systems IDR_BITS=5, with 32 nodes at each sub-root
    level and 32 IDs in each leaf node).  The sequence of freeing the nodes at
    the moment is as follows:
    
    layer
    1 ->                       a(7)
    2 ->            b(3)                  c(5)
    3 ->        d(1)   e(2)           f(4)    g(6)
    
    Until step 4 things go fine, but then node c is freed, whereas node g
    should be freed first.  Since node c contains the pointer to node g we'll
    have a use after free error at step 6.
    
    How many levels we step back after visiting the leaf nodes is currently
    determined by the msb of the id we are currently visiting:
    
    Step
    1.          node d with IDs 0,1 is freed, current ID is advanced to 2.
                msb of the current ID bit 1. This means we need to step back
                1 level to node b and take the next sibling, node e.
    2-3.        node e with IDs 2,3 is freed, current ID is 4, msb is bit 2.
                This means we need to step back 2 levels to node a, freeing
                node b on the way.
    4-5.        node f with IDs 4,5 is freed, current ID is 6, msb is still
                bit 2. This means we again need to step back 2 levels to node
                a and free c on the way.
    6.          We should visit node g, but its pointer is not available as
                node c was freed.
    
    The fix changes how we determine the number of levels to step back.
    Instead of deducting this merely from the msb of the current ID, we should
    really check if advancing the ID causes an overflow to a bit position
    corresponding to a given layer.  In the above example overflow from bit 0
    to bit 1 should mean stepping back 1 level.  Overflow from bit 1 to bit 2
    should mean stepping back 2 levels and so on.
    
    The fix was tested with IDs up to 1 << 20, which corresponds to 4 layers
    on 32 bit systems.
    
    Signed-off-by: Imre Deak <imre.deak@nokia.com>
    Reviewed-by: Tejun Heo <tj@kernel.org>
    Cc: Eric Paris <eparis@redhat.com>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: <stable@kernel.org>         [2.6.34.1]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7d64224217b53b23243fd2aa428001486f2a5da5
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Wed May 26 14:43:03 2010 -0700

    wait_for_helper: SIGCHLD from user-space can lead to use-after-free
    
    1. wait_for_helper() calls allow_signal(SIGCHLD) to ensure the child
       can't autoreap itself.
    
       However, this means that a spurious SIGCHILD from user-space can
       set TIF_SIGPENDING and:
    
            - kernel_thread() or sys_wait4() can fail due to signal_pending()
    
            - worse, wait4() can fail before ____call_usermodehelper() execs
              or exits. In this case the caller may kfree(subprocess_info)
              while the child still uses this memory.
    
       Change the code to use SIG_DFL instead of magic "(void __user *)2"
       set by allow_signal(). This means that SIGCHLD won't be delivered,
       yet the child won't autoreap itsefl.
    
       The problem is minor, only root can send a signal to this kthread.
    
    2. If sys_wait4(&ret) fails it doesn't populate "ret", in this case
       wait_for_helper() reports a random value from uninitialized var.
    
       With this patch sys_wait4() should never fail, but still it makes
       sense to initialize ret = -ECHILD so that the caller can notice
       the problem.
    
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9616ff434d96303689391af3d6e1c845d233405f
Author: David S. Miller <davem@davemloft.net>
Date:   Wed May 26 21:17:29 2010 -0700

    sunsu: Fix use after free in su_remove().
    
    Real serial port 'up' objects are statically allocated from an
    array in the driver.  Keyboard and mouse ports, on the other
    hand, are dynamically allocated.
    
    Unfortunately, we free these dynamic 'up' objects before we unmap the
    I/O registers.
    
    Rearrange su_remove() so that this does not happen.
    
    Noticed by Julia Lawall.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      drivers/net/usb/asix.c: Fix pointer cast.
      be2net: Bug fix to avoid disabling bottom half during firmware upgrade.
      proc_dointvec: write a single value
      hso: add support for new products
      Phonet: fix potential use-after-free in pep_sock_close()
      ath9k: remove VEOL support for ad-hoc
      ath9k: change beacon allocation to prefer the first beacon slot
      sock.h: fix kernel-doc warning
      cls_cgroup: Fix build error when built-in
      macvlan: do proper cleanup in macvlan_common_newlink() V2
      be2net: Bug fix in init code in probe
      net/dccp: expansion of error code size
      ath9k: Fix rx of mcast/bcast frames in PS mode with auto sleep
      wireless: fix sta_info.h kernel-doc warnings
      wireless: fix mac80211.h kernel-doc warnings
      iwlwifi: testing the wrong variable in iwl_add_bssid_station()
      ath9k_htc: rare leak in ath9k_hif_usb_alloc_tx_urbs()
      ath9k_htc: dereferencing before check in hif_usb_tx_cb()
      rt2x00: Fix rt2800usb TX descriptor writing.
      rt2x00: Fix failed SLEEP->AWAKE and AWAKE->SLEEP transitions.
      ...

commit e513480e28cdfd868755f05c1a654fcfcee58070
Author: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>
Date:   Tue May 25 16:08:39 2010 -0700

    Phonet: fix potential use-after-free in pep_sock_close()
    
    sk_common_release() might destroy our last reference to the socket.
    So an extra temporary reference is needed during cleanup.
    
    Signed-off-by: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8a52da632ceb9d8b776494563df579e87b7b586b
Author: Julia Lawall <julia@diku.dk>
Date:   Sat May 15 11:46:12 2010 +0200

    [SCSI] aacraid: Eliminate use after free
    
    The debugging code using the freed structure is moved before the kfree.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @free@
    expression E;
    position p;
    @@
    kfree@p(E)
    
    @@
    expression free.E, subE<=free.E, E1;
    position free.p;
    @@
    
      kfree@p(E)
      ...
    (
      subE = E1
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 67b9509b2c68ae38cecb83a239881cb0ddf087dc
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Mon May 24 14:32:19 2010 -0700

    mm: migration: do not try to migrate unmapped anonymous pages
    
    rmap_walk_anon() was triggering errors in memory compaction that look like
    use-after-free errors.  The problem is that between the page being
    isolated from the LRU and rcu_read_lock() being taken, the mapcount of the
    page dropped to 0 and the anon_vma gets freed.  This can happen during
    memory compaction if pages being migrated belong to a process that exits
    before migration completes.  Hence, the use-after-free race looks like
    
     1. Page isolated for migration
     2. Process exits
     3. page_mapcount(page) drops to zero so anon_vma was no longer reliable
     4. unmap_and_move() takes the rcu_lock but the anon_vma is already garbage
     4. call try_to_unmap, looks up tha anon_vma and "locks" it but the lock
        is garbage.
    
    This patch checks the mapcount after the rcu lock is taken.  If the
    mapcount is zero, the anon_vma is assumed to be freed and no further
    action is taken.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Acked-by: Rik van Riel <riel@redhat.com>
    Reviewed-by: Minchan Kim <minchan.kim@gmail.com>
    Reviewed-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Christoph Lameter <cl@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit eea7feb072f5914ecafa95b3d83be0c229244d90
Author: Jan Kara <jack@suse.cz>
Date:   Thu May 13 22:14:53 2010 +0200

    ocfs2: Fix use after free on remount read-only
    
    We also have to cancel quota syncing thread on remount read only because
    at that moment quota is being turned off. Otherwise quota syncing thread
    will try to access already freed quota structures.
    
    Signed-off-by: Jan Kara <jack@suse.cz>

commits)
      drivers/char: Eliminate use after free
      virtio: console: Accept console size along with resize control message
      virtio: console: Store each console's size in the console structure
      virtio: console: Resize console port 0 on config intr only if multiport is off
      virtio: console: Add support for nonblocking write()s
      virtio: console: Rename wait_is_over() to will_read_block()
      virtio: console: Don't always create a port 0 if using multiport
      virtio: console: Use a control message to add ports
      virtio: console: Move code around for future patches
      virtio: console: Remove config work handler
      virtio: console: Don't call hvc_remove() on unplugging console ports
      virtio: console: Return -EPIPE to hvc_console if we lost the connection
      virtio: console: Let host know of port or device add failures
      virtio: console: Add a __send_control_msg() that can send messages without a valid port
      virtio: Revert "virtio: disable multiport console support."
      virtio: add_buf_gfp
      trans_virtio: use virtqueue_xxx wrappers
      virtio-rng: use virtqueue_xxx wrappers
      virtio_ring: remove a level of indirection
      virtio_net: use virtqueue_xxx wrappers
      ...
    
    Fix up conflicts in drivers/net/virtio_net.c due to new virtqueue_xxx
    wrappers changes conflicting with some other cleanups.

commits)
      HID: fix up 'EMBEDDED' mess in Kconfig
      HID: roccat: cleanup preprocessor macros
      HID: roccat: refactor special event handling
      HID: roccat: fix special button support
      HID: roccat: Correctly mark init and exit functions
      HID: hidraw: Use Interrupt Endpoint for OUT Transfers if Available
      HID: hid-samsung: remove redundant key mappings
      HID: add omitted hid-zydacron.c file
      HID: hid-samsung: add support for Creative Desktop Wireless 6000
      HID: picolcd: Eliminate use after free
      HID: Zydacron Remote Control driver
      HID: Use kmemdup
      HID: magicmouse: fix input registration
      HID: make Prodikeys driver standalone config option
      HID: Prodikeys PC-MIDI HID Driver
      HID: hidraw: fix indentation
      HID: ntrig: add filtering module parameters
      HID: ntrig: add sysfs access to filter parameters
      HID: ntrig: add sensitivity and responsiveness support
      HID: add multi-input quirk for eGalax Touchcontroller
      ...

commit 0643e4c6e4fd67778fa886a89e6ec2320e0ff4d3
Author: Julia Lawall <julia@diku.dk>
Date:   Sat May 15 11:45:53 2010 +0200

    drivers/char: Eliminate use after free
    
    In each case, the first argument to send_control_msg or __send_control_msg,
    respectively, has either not been successfully allocated or has been freed
    at the point of the call.  In the first case, the first argument, port, is
    only used to access the portdev and id fields, in order to call
    __send_control_msg.  Thus it seems possible instead to call
    __send_control_msg directly.  In the second case, the call to
    __send_control_msg is moved up to a place where it seems like the first
    argument, portdev, has been initialized sufficiently to make the call to
    __send_control_msg meaningful.
    
    This has only been compile tested.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @free@
    expression E;
    position p;
    @@
    kfree@p(E)
    
    @@
    expression free.E, subE<=free.E, E1;
    position free.p;
    @@
    
      kfree@p(E)
      ...
    (
      subE = E1
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Acked-by: Amit Shah <amit.shah@redhat.com>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>

commit 3143edd3a185f1fd370ebdd21b4151aa9f3283a3
Author: Sage Weil <sage@newdream.net>
Date:   Wed Mar 24 21:43:33 2010 -0700

    ceph: clean up statfs
    
    Avoid unnecessary msgpool.  Preallocate reply.  Fix use-after-free race.
    
    Signed-off-by: Sage Weil <sage@newdream.net>

commit aeacb6fd30c800e8229905eac7023777a472d772
Author: Julia Lawall <julia@diku.dk>
Date:   Sat May 15 11:46:36 2010 +0200

    HID: picolcd: Eliminate use after free
    
    The skip label frees resp, which has not been allocated at the point of
    this goto and then does a break, based on the fact that err is non-zero.
    This is replaced by a break directly.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @free@
    expression E;
    position p;
    @@
    kfree@p(E)
    
    @@
    expression free.E, subE<=free.E, E1;
    position free.p;
    @@
    
      kfree@p(E)
      ...
    (
      subE = E1
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

commit e08733446e72b983fed850fc5d8bd21b386feb29
Author: Eric Paris <eparis@redhat.com>
Date:   Tue May 11 17:17:40 2010 -0400

    inotify: race use after free/double free in inotify inode marks
    
    There is a race in the inotify add/rm watch code.  A task can find and
    remove a mark which doesn't have all of it's references.  This can
    result in a use after free/double free situation.
    
    Task A                                  Task B
    ------------                            -----------
    inotify_new_watch()
     allocate a mark (refcnt == 1)
     add it to the idr
                                            inotify_rm_watch()
                                             inotify_remove_from_idr()
                                              fsnotify_put_mark()
                                                  refcnt hits 0, free
     take reference because we are on idr
     [at this point it is a use after free]
     [time goes on]
     refcnt may hit 0 again, double free
    
    The fix is to take the reference BEFORE the object can be found in the
    idr.
    
    Signed-off-by: Eric Paris <eparis@redhat.com>
    Cc: <stable@kernel.org>

commit 258006d1abcf3f2990d3ebd77d75af335ff24d81
Author: Julia Lawall <julia@diku.dk>
Date:   Fri Apr 2 14:47:38 2010 +0200

    mtd: maps: Eliminate use after free
    
    Moved the debugging message before the call to map_destroy, which frees its
    argument.  The message is also slightly changed to reflect its new
    position.
    
    A simplified version of the semantic patch that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression E,E2;
    @@
    
    del_mtd_device(E)
    ...
    (
      E = E2
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>

commit 714bc5ef3edaec3ca0cf155fe01411760527c52e
Author: Dan Carpenter <error27@gmail.com>
Date:   Thu Mar 25 13:14:27 2010 +0200

    musb: potential use after free
    
    We assign "urb->hcpriv = qh;" a few lines down.  I'm pretty sure we
    want it "urb->hcpriv" to be NULL not a freed value.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@nokia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d4cde88c1c025ffa18150ec29e80e456f2a5c65a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Apr 22 19:52:43 2010 +0200

    p54pci: fix regression from prevent stuck rx-ring on slow system
    
    This patch fixes a recently introduced use-after-free regression
    from "p54pci: prevent stuck rx-ring on slow system".
    
    Hans de Goede reported a use-after-free regression:
    >BUG: unable to handle kernel paging request at 6b6b6b6b
    >IP: [<e122284a>] p54p_check_tx_ring+0x84/0xb1 [p54pci]
    >*pde = 00000000
    >Oops: 0000 [#1] SMP
    >EIP: 0060:[<e122284a>] EFLAGS: 00010286 CPU: 0
    >EIP is at p54p_check_tx_ring+0x84/0xb1 [p54pci]
    >EAX: 6b6b6b6b EBX: df10b170 ECX: 00000003 EDX: 00000001
    >ESI: dc471500 EDI: d8acaeb0 EBP: c098be9c ESP: c098be84
    > DS: 007b ES: 007b FS: 00d8 GS: 00e0 SS: 0068
    >Process swapper (pid: 0, ti=c098a000 task=c09ccfe0 task.ti=c098a000)
    >Call Trace:
    > [<e1222b02>] ? p54p_tasklet+0xaa/0xb5 [p54pci]
    > [<c0440568>] ? tasklet_action+0x78/0xcb
    > [<c0440ed3>] ? __do_softirq+0xbc/0x173
    
    Quote from comment #17:
    "The problem is the innocent looking moving of the tx processing to
     after the rx processing in the tasklet. Quoting from the changelog:
      This patch does it the same way, except that it also prioritize
      rx data processing, simply because tx routines *can* wait.
    
     This is causing an issue with us referencing already freed memory,
     because some skb's we transmit, we immediately receive back, such
     as those for reading the eeprom (*) and getting stats.
    
     What can happen because of the moving of the tx processing to after
     the rx processing is that when the tasklet first runs after doing a
     special skb tx (such as eeprom) we've already received the answer
     to it.
    
     Then the rx processing ends up calling p54_find_and_unlink_skb to
     find the matching tx skb for the just received special rx skb and
     frees the tx skb.
    
     Then after the processing of the rx skb answer, and thus freeing
     the tx skb, we go process the completed tx ring entires, and then
     dereference the free-ed skb, to see if it should free free-ed by
     p54p_check_tx_ring()."
    
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=583623
    Bug-Identified-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 229bab6bacc42295f13c0434772381a88ce2308b
Author: Dan Carpenter <error27@gmail.com>
Date:   Mon Mar 15 11:26:56 2010 +0300

    [SCSI] dpt_i2o: several use after free issues
    
    adpt_i2o_delete_hba() calls kfree() so we have to save "pHba->next"
    before calling it.  Also inside adpt_i2o_delete_hba() itself, there
    was another use after free bug which I fixed by moving the kfree()
    down a line.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit a7df5c5e52a545774c4db1f2adf09ede018ab139
Author: Julia Lawall <julia@diku.dk>
Date:   Fri Apr 2 02:47:13 2010 +0000

    powerpc/pseries/dlpar: Eliminate use after free
    
    dlpar_free_cc_nodes frees its argument, so dlpar_online_cpu should not be
    called on the same value.  Skip over the call to dlpar_online_cpu by
    jumping directly to out.
    
    A simplified version of the semantic patch that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression E,E2;
    @@
    
    dlpar_free_cc_nodes(E)
    ...
    (
      E = E2
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit a0fd4345f928d72a56e27b23e4cd28c94bf36be5
Author: Julia Lawall <julia@diku.dk>
Date:   Fri Apr 2 14:47:59 2010 +0200

    ALSA: echoaudio - Eliminate use after free
    
    Use the call to snd_card_free in the error handling code at the end of the
    function, as in the other error cases.
    
    A simplified version of the semantic patch that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression E,E2;
    @@
    
    snd_card_free(E)
    ...
    (
      E = E2
    |
    * E
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 5d944c640b4ae5f37c537acf491c2f0eb89fa0d6
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Wed Mar 31 07:06:04 2010 +0000

    gen_estimator: deadlock fix
    
    One of my test machine got a deadlock during "tc" sessions,
    adding/deleting classes & filters, using traffic estimators.
    
    After some analysis, I believe we have a potential use after free case
    in est_timer() :
    
    spin_lock(e->stats_lock); << HERE >>
    read_lock(&est_lock);
    if (e->bstats == NULL)   << TEST >>
            goto skip;
    
    Test is done a bit late, because after estimator is killed, and before
    rcu grace period elapsed, we might already have freed/reuse memory where
    e->stats_locks points to (some qdisc->q.lock)
    
    A possible fix is to respect a rcu grace period at Qdisc dismantle time.
    
    On 64bit, sizeof(struct Qdisc) is exactly 192 bytes. Adding 16 bytes to
    it (for struct rcu_head) is a problem because it might change
    performance, given QDISC_ALIGNTO is 32 bytes.
    
    This is why I also change QDISC_ALIGNTO to 64 bytes, to satisfy most
    current alignment requirements.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c4a3987fa075b2d15ebc3d59b01fb7ed403cd3e1
Author: Julia Lawall <julia@diku.dk>
Date:   Mon Mar 29 22:33:28 2010 -0700

    drivers/serial/sunsu.c: Correct use after free
    
    The of_iounmap is at the out_unmap label, but at that point up has already
    been freed.  The free cannot be moved to the out_unmap label, because that
    label is reachable from cases where up should not be freed.  So the call to
    of_iounmap is just duplicated, and the goto converted to a return.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression x,e;
    identifier f;
    iterator I;
    statement S;
    @@
    
    *kfree(x);
    ... when != &x
        when != x = e
        when != I(x,...) S
    *x->f
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      ceph: update discussion list address in MAINTAINERS
      ceph: some documentations fixes
      ceph: fix use after free on mds __unregister_request
      ceph: avoid loaded term 'OSD' in documention
      ceph: fix possible double-free of mds request reference
      ceph: fix session check on mds reply
      ceph: handle kmalloc() failure
      ceph: propagate mds session allocation failures to caller
      ceph: make write_begin wait propagate ERESTARTSYS
      ceph: fix snap rebuild condition
      ceph: avoid reopening osd connections when address hasn't changed
      ceph: rename r_sent_stamp r_stamp
      ceph: fix connection fault con_work reentrancy problem
      ceph: prevent dup stale messages to console for restarting mds
      ceph: fix pg pool decoding from incremental osdmap update
      ceph: fix mds sync() race with completing requests
      ceph: only release unused caps with mds requests
      ceph: clean up handle_cap_grant, handle_caps wrt session mutex
      ceph: fix session locking in handle_caps, ceph_check_caps
      ceph: drop unnecessary WARN_ON in caps migration
      ...

commit 94aa8ae13db2ecf2ec1b4e65a65d3fe92b468e0e
Author: Sage Weil <sage@newdream.net>
Date:   Sun Mar 28 21:22:50 2010 -0700

    ceph: fix use after free on mds __unregister_request
    
    There was a use after free in __unregister_request that would trigger
    whenever the request map held the last reference.  This appears to have
    triggered an oops during 'umount -f' when requests are being torn down.
    
    Signed-off-by: Sage Weil <sage@newdream.net>

commit 05731b979476969d4d1cbbcb535fc0f5ea90dba7
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Mar 23 13:35:13 2010 -0700

    rtc/mc13783: fix use after free bug
    
    This was introduced by v2.6.34-rc1~38:
    
            4c014e8 (rtc/mc13783: protect rtc {,un}registration by mc13783 lock)
    
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c9acb42ef1904d15d0fb315061cefbe638f67f3a
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Fri Mar 19 15:36:22 2010 -0400

    SUNRPC: Fix a use after free bug with the NFSv4.1 backchannel
    
    The ->release_request() callback was designed to allow the transport layer
    to do housekeeping after the RPC call is done. It cannot be used to free
    the request itself, and doing so leads to a use-after-free bug in
    xprt_release().
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 181427a7e01beab76c789414334375839f026128
Author: Dan Carpenter <error27@gmail.com>
Date:   Sat Mar 13 14:14:22 2010 +0300

    tomoyo: fix potential use after free
    
    The original code returns a freed pointer.  This function is expected to
    return NULL on errors.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Acked-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: James Morris <jmorris@namei.org>

commit 8b408fe4f853dcfa18d133aa4cf1d7546b4c3870
Author: Joerg Roedel <joerg.roedel@amd.com>
Date:   Mon Mar 8 14:20:07 2010 +0100

    x86/amd-iommu: Use helper function to destroy domain
    
    In the amd_iommu_domain_destroy the protection_domain_free
    function is partly reimplemented. The 'partly' is the bug
    here because the domain is not deleted from the domain list.
    This results in use-after-free errors and data-corruption.
    Fix it by just using protection_domain_free instead.
    
    Cc: stable@kernel.org
    Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>

commit 0e820ab60118e06db62ef4e55b6dd96db807a34e
Author: Julia Lawall <julia@diku.dk>
Date:   Tue Dec 22 21:31:43 2009 +0100

    mfd: Correct use after free for t7l66xb
    
    The structure t7l66xb should not be freed before the subsequent references
    to its fields in the arguments to clk_put.  Furthermore, this structure is
    allocated near the beginning of the function, and a goto to the label
    err_noirq appears after a successful allocation, so it would seem that the
    kfree should be moved down below this label.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression x,e;
    identifier f;
    iterator I;
    statement S;
    @@
    
    *kfree(x);
    ... when != &x
        when != x = e
        when != I(x,...) S
    *x->f
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>

commit 48a29516e8b0b8cd59f5afec90a14f49dd9cf967
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Mar 2 22:46:10 2010 +0000

    cpmac: use after free
    
    The original code dereferenced "cpmac_mii" after calling
    "mdiobus_free(cpmac_mii);"
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Reviewed-by: Jiri Pirko <jpirko@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      [SCSI] Fix printing of failed 32-byte commands
      [SCSI] Fix printing of variable length commands
      [SCSI] libsrp: fix bug in ADDITIONAL CDB LENGTH interpretation
      [SCSI] scsi_dh_alua: Add IBM Power Virtual SCSI ALUA device to dev list
      [SCSI] scsi_dh_alua: add netapp to dev list
      [SCSI] qla2xxx: Update version number to 8.03.02-k1.
      [SCSI] qla2xxx: EEH: Restore PCI saved state during pci slot reset.
      [SCSI] qla2xxx: Add firmware ETS burst support.
      [SCSI] qla2xxx: Correct loop-resync issues during SNS scans.
      [SCSI] qla2xxx: Correct use-after-free issue in terminate_rport_io callback.
      [SCSI] qla2xxx: Correct EH bus-reset handling.
      [SCSI] qla2xxx: Proper clean-up of BSG requests when request times out.
      [SCSI] qla2xxx: Initialize payload receive length in failure path of vendor commands
      [SCSI] fix duplicate removal on error path in scsi_sysfs_add_sdev
      [SCSI] fix refcounting bug in scsi_get_host_dev
      [SCSI] fix memory leak in scsi_report_lun_scan
      [SCSI] lpfc: correct PPC build failure
      [SCSI] raid_class: add raid1e
      [SCSI] mpt2sas: Do not call sas_is_tlr_enabled for RAID volumes.
      [SCSI] zfcp: Introduce header file for qdio structs and inline functions
      ...

commit 96dd6de3d058a454a5bc4ce2f561a053dd90bfae
Author: Darren Jenkins <darrenrjenkins@gmail.com>
Date:   Thu Feb 11 08:07:53 2010 -0300

    V4L/DVB: drivers/media/radio/si470x/radio-si470x-usb.c fix use after free
    
    In si470x_usb_driver_disconnect() radio->disconnect_lock is accessed
    after it is freed. This fixes the problem.
    
    Coverity CID: 2530
    
    Signed-off-by: Darren Jenkins <darrenrjenkins@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit ed0ee8e1fbab49b494ef2994be92e7832dd6673c
Author: Julia Lawall <julia@diku.dk>
Date:   Tue Dec 22 17:31:23 2009 -0300

    V4L/DVB (13948): radio: Correct use after free
    
    It is not clear how to share the unlock in the case where the structure
    containing the lock has to be freed.  So the unlock is now duplicated, with
    one copy moved before the free.  The unlock label furthermore is no longer
    useful and is thus deleted.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression x,e;
    identifier f;
    iterator I;
    statement S;
    @@
    
    *kfree(x);
    ... when != &x
        when != x = e
        when != I(x,...) S
    *x->f
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 715848ca6fffeb6362a50887d9c26245bd5dfba9
Author: Andrew Vasquez <andrew.vasquez@qlogic.com>
Date:   Thu Feb 18 10:07:26 2010 -0800

    [SCSI] qla2xxx: Correct use-after-free issue in terminate_rport_io callback.
    
    The explicit logout (LOGO) issued at the end of the callback will
    flush (via normal scsi_cmnd->done()) any outstanding commands
    (FCP2) the firmware is holding.  While iterating through the
    outstanding_cmnd array in qla2x00_abort_fcport_cmds(), locking
    and unlocking of the hardware spinlock, opens-up the driver to
    cases where the processed SRB (sp) could be used after the
    command completed from interrupt context.
    
    Cc: stable@kernel.org
    Signed-off-by: Andrew Vasquez <andrew.vasquez@qlogic.com>
    Signed-off-by: Giridhar Malavali <giridhar.malavali@qlogic.com>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 281e20323ab72180137824a298ee9e21e6f9acf6
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Sun Jan 24 16:45:03 2010 +0100

    firewire: core: fix use-after-free regression in FCP handler
    
    Commit db5d247a "firewire: fix use of multiple AV/C devices, allow
    multiple FCP listeners" introduced a regression into 2.6.33-rc3:
    The core freed payloads of incoming requests to FCP_Request or
    FCP_Response before a userspace driver accessed them.
    
    We need to copy such payloads for each registered userspace client
    and free the copies according to the lifetime rules of non-FCP client
    request resources.
    
    (This could possibly be optimized by reference counts instead of
    copies.)
    
    The presently only kernelspace driver which listens for FCP requests,
    firedtv, was not affected because it already copies FCP frames into an
    own buffer before returning to firewire-core's FCP handler dispatcher.
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

commit ece550f51ba175c14ec3ec047815927d7386ea1f
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Jan 19 12:34:32 2010 +0300

    ecryptfs: use after free
    
    The "full_alg_name" variable is used on a couple error paths, so we
    shouldn't free it until the end.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Cc: stable@kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.vnet.ibm.com>

commit 1c1c6ebcf5284aee4910f3b906ac90c20e510c82
Author: Dave Chinner <david@fromorbit.com>
Date:   Mon Jan 11 11:47:44 2010 +0000

    xfs: Replace per-ag array with a radix tree
    
    The use of an array for the per-ag structures requires reallocation
    of the array when growing the filesystem. This requires locking
    access to the array to avoid use after free situations, and the
    locking is difficult to get right. To avoid needing to reallocate an
    array, change the per-ag structures to an allocated object per ag
    and index them using a tree structure.
    
    The AGs are always densely indexed (hence the use of an array), but
    the number supported is 2^32 and lookups tend to be random and hence
    indexing needs to scale. A simple choice is a radix tree - it works
    well with this sort of index.  This change also removes another
    large contiguous allocation from the mount/growfs path in XFS.
    
    The growing process now needs to change to only initialise the new
    AGs required for the extra space, and as such only needs to
    exclusively lock the tree for inserts. The rest of the code only
    needs to lock the tree while doing lookups, and hence this will
    remove all the deadlocks that currently occur on the m_perag_lock as
    it is now an innermost lock. The lock is also changed to a spinlock
    from a read/write lock as the hold time is now extremely short.
    
    To complete the picture, the per-ag structures will need to be
    reference counted to ensure that we don't free/modify them while
    they are still in use.  This will be done in subsequent patch.
    
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Alex Elder <aelder@sgi.com>

commit 4b6a46882cca8349e8942e2650c33b11bc571c92
Author: Dave Chinner <david@fromorbit.com>
Date:   Mon Jan 11 11:45:21 2010 +0000

    xfs: fix stale inode flush avoidance
    
    When reclaiming stale inodes, we need to guarantee that inodes are
    unpinned before returning with a "clean" status. If we don't we can
    reclaim inodes that are pinned, leading to use after free in the
    transaction subsystem as transactions complete.
    
    Signed-off-by: Dave Chinner <david@fromorbit.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Alex Elder <aelder@sgi.com>

commit 557a701c16553b0b691dbb64ef30361115a80f64
Author: Thomas Renninger <trenn@suse.de>
Date:   Mon Dec 14 11:44:15 2009 +0100

    [CPUFREQ] Fix use after free of struct powernow_k8_data
    
    Easy fix for a regression introduced in 2.6.31.
    
    On managed CPUs the cpufreq.c core will call driver->exit(cpu) on the
    managed cpus and powernow_k8 will free the core's data.
    
    Later driver->get(cpu) function might get called trying to read out the
    current freq of a managed cpu and the NULL pointer check does not work on
    the freed object -> better set it to NULL.
    
    ->get() is unsigned and must return 0 as invalid frequency.
    
    Reference:
    http://bugzilla.kernel.org/show_bug.cgi?id=14391
    
    Signed-off-by: Thomas Renninger <trenn@suse.de>
    Tested-by: Michal Schmidt <mschmidt@redhat.com>
    CC: stable@kernel.org
    Signed-off-by: Dave Jones <davej@redhat.com>

commit 53ab668064edaeef99c0ee22799483d45f4c81f6
Author: Li Zefan <lizf@cn.fujitsu.com>
Date:   Wed Dec 30 14:24:03 2009 +0800

    ksym_tracer: Remove trace_stat
    
    trace_stat is problematic. Don't use it, use seqfile instead.
    
    This fixes a race that reading the stat file is not protected by
    any lock, which can lead to use after free.
    
    Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: K.Prasad <prasad@linux.vnet.ibm.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    LKML-Reference: <4B3AF203.40200@cn.fujitsu.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 8f68ed9728193b1f2fb53ba06031b06bd8b3d1b4
Author: Borislav Petkov <borislav.petkov@amd.com>
Date:   Mon Dec 21 15:15:59 2009 +0100

    amd64_edac: fix driver instance freeing
    
    Fix use-after-free errors by pushing all memory-freeing calls to the end
    of amd64_remove_one_instance().
    
    Reported-by: Darren Jenkins <darrenrjenkins@gmail.com>
    LKML-Reference: <1261370306.11354.52.camel@ICE-BOX>
    Signed-off-by: Borislav Petkov <borislav.petkov@amd.com>

commit 0794ec8ce327ec74416b569b8fb1951274693700
Author: Julia Lawall <julia@diku.dk>
Date:   Tue Dec 22 21:30:59 2009 +0100

    drivers/dma: Correct use after free
    
    Move the kfree after the iounmap that refers to the same structure.
    
    A simplified version of the semantic match that finds this problem is as
    follows: (http://coccinelle.lip6.fr/)
    
    // <smpl>
    @@
    expression x,e;
    identifier f;
    iterator I;
    statement S;
    @@
    
    *kfree(x);
    ... when != &x
        when != x = e
        when != I(x,...) S
    *x->f
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commit 06777d308f8f9ddb67798d34bf193101a4bdf06c
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Dec 17 04:52:13 2009 -0500

    dio: fix use-after-free
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 71e9dc73cb6b1351bdd5f732cef5dbef411b3219
Author: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
Date:   Wed Aug 19 15:06:47 2009 +0100

    dell-laptop: fix a use-after-free error on the failure path
    
    dell_setup_rfkill() already cleans up the rfkill devices on failure.
    So if it returns an error, we should not try to unregister the rfkill
    devices.
    
    Signed-off-by: Alan Jenkins <alan-jenkins@tuffmail.co.uk>
    Acked-by: Matthew Garrett <mjg@redhat.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 4e3616576e9e65d53f9381b9f334257299c7262e
Author: David Ellingsworth <david@identd.dyndns.org>
Date:   Wed Sep 23 18:03:52 2009 -0300

    V4L/DVB (13067): radio-mr800: fix potential use after free
    
    Fix portential use after free.
    
    Signed-off-by: David Ellingsworth <david@identd.dyndns.org>
    Acked-by: Alexey Klimov <klimov.linux@gmail.com>
    Signed-off-by: Douglas Schilling Landgraf <dougsland@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit fa00e106eb6f082654d822a0946c0c86297ede2c
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Dec 1 13:17:41 2009 -0800

    drivers/rtc/rtc-pcf50633.c: fix use after free in pcf50633_rtc_probe()
    
    "rtc" is freed and then dereferenced on the next line.  This patch fixes
    that.
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Acked-by: Alessandro Zummo <a.zummo@towertech.it>
    Cc: David Brownell <david-b@pacbell.net>
    Cc: Paul Gortmaker <p_gortmaker@yahoo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 64ff9ba5f1d771e8405ec766c31f6b32c9708285
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Mon Nov 9 16:12:37 2009 -0300

    V4L/DVB (13344): soc-camera: properly initialise the device object when reusing
    
    Commit ef373189f62413803b7b816c972fc154c488cdc0 "fix use-after-free Oops,
    resulting from a driver-core API change" fixed the Oops, but didn't correct
    missing device object initialisation. This patch makes unloading and reloading
    of soc-camera host- and client-drivers possible again.
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 4e46bf89972b9d98a9f282a9fed2359756a5e34e
Author: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
Date:   Tue Nov 17 14:10:11 2009 -0800

    [SCSI] fix crash when disconnecting usb storage
    
    __scsi_remove_device() in scsi_forget_host() is executed out of scan_mutex
    and races with scsi_destroy_sdev() <- scsi_sysfs_add_devices() <-
    scsi_finish_async_scan().  The result is use after free and/or double
    free, oops.
    
    The fix is simple, move scsi_forget_host() under scan_mutex.
    
    scsi_forget_host() is just sequence of __scsi_remove_device().  All
    another calls of __scsi_remove_device() are made under scan_mutex.  So
    that it is safe.
    
    Signed-off-by: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Signed-off-by: Denis V. Lunev <den@openvz.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit e77b89f13a0d48aea70b69976e854f2a2444a519
Author: Dmitry Monakhov <dmonakhov@openvz.org>
Date:   Mon Oct 5 00:38:55 2009 +0400

    [CPUFREQ] Fix use after free on governor restore
    
    Currently on governer backup/restore path we storing governor's pointer.
    This is wrong because one may unload governor's module after cpu goes
    offline. As result use-after-free will take place on restored cpu.
    It is not easy to exploit this bug, but still we have to close this
    issue ASAP. Issue was introduced by following commit
    084f34939424161669467c19280dbcf637730314
    
    ##TESTCASE##
    #!/bin/sh -x
    modprobe acpi_cpufreq
    # Any non default governor, in may case it is "ondemand"
    modprobe cpufreq_ondemand
    echo ondemand > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    rmmod acpi_cpufreq
    rmmod cpufreq_ondemand
    modprobe acpi_cpufreq  # << use-after-free here.
    
    Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org>
    Signed-off-by: Dave Jones <davej@redhat.com>

commit ccaf6553963bc6304d5820962a08a4397d0a2dc2
Author: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Date:   Fri Nov 13 15:43:51 2009 +0100

    [S390] monreader: fix use after free bug with suspend/resume
    
    The monreader device driver doesn't set dev->driver_data to NULL after
    freeing the corresponding data structure. This leads to a use after
    free bug in the freeze/thaw suspend/resume functions after the device
    has been opened and closed once. Fix this by clearing dev->driver_data
    in the close() function.
    
    Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commits)
      V4L/DVB (13314): saa7134: set ts_force_val for the Hauppauge WinTV HVR-1150
      V4L/DVB (13313): saa7134: add support for FORCE_TS_VALID mode for mpeg ts input
      V4L/DVB (13311): uvcvideo: Fix compilation warning with 2.6.32 due to type mismatch with abs()
      V4L/DVB (13309): uvcvideo: Ignore the FIX_BANDWIDTH for compressed video
      V4L/DVB (13287): ce6230 - saa7164-cmd: Fix wrong sizeof
      V4L/DVB (13286): pxa-camera: Fix missing sched.h
      V4L/DVB (13264): gspca_mr97310a: Change vstart for CIF sensor type 1 cams
      V4L/DVB (13257): gspca - m5602-s5k4aa: Add vflip for Fujitsu Amilo Xi 2528
      V4L/DVB (13256): gspca - m5602-s5k4aa: Add another MSI GX700 vflip quirk
      V4L/DVB (13255): gspca - m5602-s5k4aa: Add vflip quirk for the Bruneinit laptop
      V4L/DVB (13240): firedtv: fix regression: tuning fails due to bogus error return
      V4L/DVB (13237): firedtv: length field corrupt in ca2host if length>127
      V4L/DVB (13230): s2255drv: Don't conditionalize video buffer completion on waiting processes
      V4L/DVB (13202): smsusb: add autodetection support for three additional Hauppauge USB IDs
      V4L/DVB (13190): em28xx: fix panic that can occur when starting audio streaming
      V4L/DVB (13170): bttv: Fix reversed polarity error when switching video standard
      V4L/DVB (13169): bttv: Fix potential out-of-order field processing
      V4L/DVB (13167): pt1: Fix a compile error on arm
      V4L/DVB (13132): fix use-after-free Oops, resulting from a driver-core API change
      V4L/DVB (13131): pxa_camera: fix camera pixel format configuration
      ...

commit 76823b791d867c2ab563c237f188d0cbb4ced6e1
Author: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
Date:   Mon Oct 5 12:54:54 2009 -0300

    V4L/DVB (13132): fix use-after-free Oops, resulting from a driver-core API change
    
    Commit b4028437876866aba4747a655ede00f892089e14 has broken again re-use of
    device objects across device_register() / device_unregister() cycles. Fix
    soc-camera by nullifying the struct after device_unregister().
    
    Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 29b1b2688fd71346f78f175d9669c006686b6dc3
Author: Zhu Yi <yi.zhu@intel.com>
Date:   Fri Oct 23 13:42:25 2009 -0700

    iwlwifi: fix use after free bug for paged rx
    
    In the paged rx patch (4854fde2), I introduced a bug that could possibly
    touch an already freed page. It is fixed by avoiding the access in this
    patch. I've also added some comments so that other people touching the
    code won't make the same mistake. In the future, if we cannot avoid
    access the page after being handled to the upper layer, we can use
    get_page/put_page to handle it. For now, it's just not necessary.
    
    It also fixed a debug message print bug reported by Stanislaw Gruszka
    <sgruszka@redhat.com>.
    
    Signed-off-by: Zhu Yi <yi.zhu@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 960cc0f4fef607baabc2232fbd7cce5368a9dcfd
Author: Neil Brown <neilb@suse.de>
Date:   Mon Oct 26 08:59:17 2009 +0100

    block: use after free bug in __blkdev_get
    
    commit 0762b8bde9729f10f8e6249809660ff2ec3ad735
    (from 14 months ago) introduced a use-after-free bug which has just
    recently started manifesting in my md testing.
    I tried git bisect to find out what caused the bug to start
    manifesting, and it could have been the recent change to
    blk_unregister_queue (48c0d4d4c04) but the results were inconclusive.
    
    This patch certainly fixes my symptoms and looks correct as the two
    calls are now in the same order as elsewhere in that function.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commits)
      [SCSI] qla2xxx: Fix NULL ptr deref bug in fail path during queue create
      [SCSI] st: fix possible memory use after free after MTSETBLK ioctl
      [SCSI] be2iscsi: Moving to pci_pools v3
      [SCSI] libiscsi: iscsi_session_setup to allow for private space
      [SCSI] be2iscsi: add 10Gbps iSCSI - BladeEngine 2 driver
      [SCSI] zfcp: Fix hang when offlining device with offline chpid
      [SCSI] zfcp: Fix lockdep warning when offlining device with offline chpid
      [SCSI] zfcp: Fix oops during shutdown of offline device
      [SCSI] zfcp: Fix initial device and cfdc for delayed adapter allocation
      [SCSI] zfcp: correctly initialize unchained requests
      [SCSI] mpt2sas: Bump version 02.100.03.00
      [SCSI] mpt2sas: Support dev remove when phy status is MPI2_EVENT_SAS_TOPO_PHYSTATUS_VACANT
      [SCSI] mpt2sas: Timeout occurred within the HANDSHAKE logic while waiting on firmware to ACK.
      [SCSI] mpt2sas: Call init_completion on a per request basis.
      [SCSI] mpt2sas: Target Reset will be issued from Interrupt context.
      [SCSI] mpt2sas: Added SCSIIO, Internal and high priority memory pools to support multiple TM
      [SCSI] mpt2sas: Copyright change to 2009.
      [SCSI] mpt2sas: Added mpi2_history.txt for MPI2 headers.
      [SCSI] mpt2sas: Update driver to MPI2 REV K headers.
      [SCSI] bfa: Brocade BFA FC SCSI driver
      ...

commit 2c2ed8bfd899b84ecbf71d28fcc2cc4ace36c8d9
Author: David Jeffery <djeffery@redhat.com>
Date:   Mon Sep 28 13:54:24 2009 -0400

    [SCSI] st: fix possible memory use after free after MTSETBLK ioctl
    
    A memory use after free bug can manifest if the MTSETBLK or SET_DENS_AND_BLK
    ioctl features are used to set the tape's blocksize from 0 to non-zero.
    After the driver sets the new block size, in this one case it calls
    normalize_buffer() to free the device's internal data buffers.  However, the
    ioctl code assumes there is always a buffer and does not check or allocate
    a buffer if there isn't one.  So any following ioctl calls can corrupt
    a part of memory by writing data to memory that the st driver had freed.
    
    This patch removes the normalize_buffer() call and the specialness of
    changing from a 0 to non-zero blocksize to fix the possible use of
    memory after it has been freed by the st driver.
    
    signed-off-by: David Jeffery <djeffery@redhat.com>
    Acked-by: Kai Makisara <kai.makisara@kolumbus.fi>
    Signed-off-by: James Bottomley <James.Bottomley@suse.de>

commit 05dafedb906425fe935199f4c92700d87285e3e9
Author: Roland Dreier <roland@digitalvampire.org>
Date:   Tue Jul 14 13:32:56 2009 -0700

    ecryptfs: Remove unneeded locking that triggers lockdep false positives
    
    In ecryptfs_destroy_inode(), inode_info->lower_file_mutex is locked,
    and just after the mutex is unlocked, the code does:
    
            kmem_cache_free(ecryptfs_inode_info_cache, inode_info);
    
    This means that if another context could possibly try to take the same
    mutex as ecryptfs_destroy_inode(), then it could end up getting the
    mutex just before the data structure containing the mutex is freed.
    So any such use would be an obvious use-after-free bug (catchable with
    slab poisoning or mutex debugging), and therefore the locking in
    ecryptfs_destroy_inode() is not needed and can be dropped.
    
    Similarly, in ecryptfs_destroy_crypt_stat(), crypt_stat->keysig_list_mutex
    is locked, and then the mutex is unlocked just before the code does:
    
            memset(crypt_stat, 0, sizeof(struct ecryptfs_crypt_stat));
    
    Therefore taking this mutex is similarly not necessary.
    
    Removing this locking fixes false-positive lockdep reports such as the
    following (and they are false-positives for exactly the same reason
    that the locking is not needed):
    
    =================================
    [ INFO: inconsistent lock state ]
    2.6.31-2-generic #14~rbd3
    ---------------------------------
    inconsistent {RECLAIM_FS-ON-W} -> {IN-RECLAIM_FS-W} usage.
    kswapd0/323 [HC0[0]:SC0[0]:HE1:SE1] takes:
     (&inode_info->lower_file_mutex){+.+.?.}, at: [<ffffffff81210d34>] ecryptfs_destroy_inode+0x34/0x100
    {RECLAIM_FS-ON-W} state was registered at:
      [<ffffffff8108c02c>] mark_held_locks+0x6c/0xa0
      [<ffffffff8108c10f>] lockdep_trace_alloc+0xaf/0xe0
      [<ffffffff81125a51>] kmem_cache_alloc+0x41/0x1a0
      [<ffffffff8113117a>] get_empty_filp+0x7a/0x1a0
      [<ffffffff8112dd46>] dentry_open+0x36/0xc0
      [<ffffffff8121a36c>] ecryptfs_privileged_open+0x5c/0x2e0
      [<ffffffff81210283>] ecryptfs_init_persistent_file+0xa3/0xe0
      [<ffffffff8120e838>] ecryptfs_lookup_and_interpose_lower+0x278/0x380
      [<ffffffff8120f97a>] ecryptfs_lookup+0x12a/0x250
      [<ffffffff8113930a>] real_lookup+0xea/0x160
      [<ffffffff8113afc8>] do_lookup+0xb8/0xf0
      [<ffffffff8113b518>] __link_path_walk+0x518/0x870
      [<ffffffff8113bd9c>] path_walk+0x5c/0xc0
      [<ffffffff8113be5b>] do_path_lookup+0x5b/0xa0
      [<ffffffff8113bfe7>] user_path_at+0x57/0xa0
      [<ffffffff811340dc>] vfs_fstatat+0x3c/0x80
      [<ffffffff8113424b>] vfs_stat+0x1b/0x20
      [<ffffffff81134274>] sys_newstat+0x24/0x50
      [<ffffffff81013132>] system_call_fastpath+0x16/0x1b
      [<ffffffffffffffff>] 0xffffffffffffffff
    irq event stamp: 7811
    hardirqs last  enabled at (7811): [<ffffffff810c037f>] call_rcu+0x5f/0x90
    hardirqs last disabled at (7810): [<ffffffff810c0353>] call_rcu+0x33/0x90
    softirqs last  enabled at (3764): [<ffffffff810631da>] __do_softirq+0x14a/0x220
    softirqs last disabled at (3751): [<ffffffff8101440c>] call_softirq+0x1c/0x30
    
    other info that might help us debug this:
    2 locks held by kswapd0/323:
     #0:  (shrinker_rwsem){++++..}, at: [<ffffffff810f67ed>] shrink_slab+0x3d/0x190
     #1:  (&type->s_umount_key#35){.+.+..}, at: [<ffffffff811429a1>] prune_dcache+0xd1/0x1b0
    
    stack backtrace:
    Pid: 323, comm: kswapd0 Tainted: G         C 2.6.31-2-generic #14~rbd3
    Call Trace:
     [<ffffffff8108ad6c>] print_usage_bug+0x18c/0x1a0
     [<ffffffff8108aff0>] ? check_usage_forwards+0x0/0xc0
     [<ffffffff8108bac2>] mark_lock_irq+0xf2/0x280
     [<ffffffff8108bd87>] mark_lock+0x137/0x1d0
     [<ffffffff81164710>] ? fsnotify_clear_marks_by_inode+0x30/0xf0
     [<ffffffff8108bee6>] mark_irqflags+0xc6/0x1a0
     [<ffffffff8108d337>] __lock_acquire+0x287/0x430
     [<ffffffff8108d585>] lock_acquire+0xa5/0x150
     [<ffffffff81210d34>] ? ecryptfs_destroy_inode+0x34/0x100
     [<ffffffff8108d2e7>] ? __lock_acquire+0x237/0x430
     [<ffffffff815526ad>] __mutex_lock_common+0x4d/0x3d0
     [<ffffffff81210d34>] ? ecryptfs_destroy_inode+0x34/0x100
     [<ffffffff81164710>] ? fsnotify_clear_marks_by_inode+0x30/0xf0
     [<ffffffff81210d34>] ? ecryptfs_destroy_inode+0x34/0x100
     [<ffffffff8129a91e>] ? _raw_spin_unlock+0x5e/0xb0
     [<ffffffff81552b36>] mutex_lock_nested+0x46/0x60
     [<ffffffff81210d34>] ecryptfs_destroy_inode+0x34/0x100
     [<ffffffff81145d27>] destroy_inode+0x87/0xd0
     [<ffffffff81146b4c>] generic_delete_inode+0x12c/0x1a0
     [<ffffffff81145832>] iput+0x62/0x70
     [<ffffffff811423c8>] dentry_iput+0x98/0x110
     [<ffffffff81142550>] d_kill+0x50/0x80
     [<ffffffff81142623>] prune_one_dentry+0xa3/0xc0
     [<ffffffff811428b1>] __shrink_dcache_sb+0x271/0x290
     [<ffffffff811429d9>] prune_dcache+0x109/0x1b0
     [<ffffffff81142abf>] shrink_dcache_memory+0x3f/0x50
     [<ffffffff810f68dd>] shrink_slab+0x12d/0x190
     [<ffffffff810f9377>] balance_pgdat+0x4d7/0x640
     [<ffffffff8104c4c0>] ? finish_task_switch+0x40/0x150
     [<ffffffff810f63c0>] ? isolate_pages_global+0x0/0x60
     [<ffffffff810f95f7>] kswapd+0x117/0x170
     [<ffffffff810777a0>] ? autoremove_wake_function+0x0/0x40
     [<ffffffff810f94e0>] ? kswapd+0x0/0x170
     [<ffffffff810773be>] kthread+0x9e/0xb0
     [<ffffffff8101430a>] child_rip+0xa/0x20
     [<ffffffff81013c90>] ? restore_args+0x0/0x30
     [<ffffffff81077320>] ? kthread+0x0/0xb0
     [<ffffffff81014300>] ? child_rip+0x0/0x20
    
    Signed-off-by: Roland Dreier <roland@digitalvampire.org>
    Signed-off-by: Tyler Hicks <tyhicks@linux.vnet.ibm.com>

commit 77b9d059cb3ddb8b1246d5878e81d52926550b23
Author: Nick Piggin <npiggin@suse.de>
Date:   Tue Sep 15 21:34:51 2009 +0200

    writeback: Fix bdi use after free in wb_work_complete()
    
    By the time bdi_work_on_stack gets evaluated again in bdi_work_free, it
    can already have been deallocated and used for something else in the
    !on stack case, giving a false positive in this test and causing
    corruption.
    
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit 89dec01b7e251697720ac3d6a5310d72359eba69
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Fri Aug 14 02:22:52 2009 -0300

    V4L/DVB (12489): pwc - fix few use-after-free and memory leaks
    
    I just happen to peek inside the PWC driver and did not like what I saw
    there. Please consider applying the patch below.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 3b554a14f4bdf754ba9d2f64c2b6edf8dafe93b9
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Sep 11 10:28:26 2009 +0200

    [S390] cio: move final put_device to ccw_device_unregister
    
    We use a test_and_clear_bit to prevent a device from being
    unregistered twice. Unfortunately in this cases the "final"
    put_device (from device_initialize) was issued more than once,
    resulting in an use after free error. Fix this by moving this
    put_device to ccw_device_unregister.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit f014824ee72e66292c3b1172dc142f959b42e61b
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Sep 11 10:28:23 2009 +0200

    [S390] cio: fix use after free in s390 debug feature
    
    When using s390dbf with "%s" in sprintf format strings the string itself
    is not copied to the dbf buffer.
    Since in this case only pointers are stored in the s390dbf, we should
    not use dev_name - which is bound to the lifetime of the device.
    Reading this entry from s390dbf after the device was released will cause
    an use after free error.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit be7a2ddce66991c05a1c6ad19790289591e53547
Author: Sebastian Ott <sebott@linux.vnet.ibm.com>
Date:   Fri Sep 11 10:28:20 2009 +0200

    [S390] cio: ensure to hold a reference for deferred deregistration
    
    Ensure to always hold an extra device reference for scheduling a
    subchannel deregistration, by moving the get_device to
    ccw_device_schedule_sch_unregister. This fixes an use after free
    error in ccw_device_call_sch_unregister where put_device was called
    on an already freed device structure.
    
    Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 23bcf634c8bc0d84607a5b863333191d58baee4c
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Sep 9 18:11:23 2009 -0700

    net_sched: fix estimator lock selection for mq child qdiscs
    
    When new child qdiscs are attached to the mq qdisc, they are actually
    attached as root qdiscs to the device queues. The lock selection for
    new estimators incorrectly picks the root lock of the existing and
    to be replaced qdisc, which results in a use-after-free once the old
    qdisc has been destroyed.
    
    Mark mq qdisc instances with a new flag and treat qdiscs attached to
    mq as children similar to regular root qdiscs.
    
    Additionally prevent estimators from being attached to the mq qdisc
    itself since it only updates its byte and packet counters during dumps.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 971ad01169398170976951d3a9479a29d231c734
Author: Zhu Yi <yi.zhu@intel.com>
Date:   Mon Jul 20 11:47:47 2009 +0800

    iwmc3200wifi: fix a use-after-free bug
    
    The patch fixes a use-after-free bug for cmd->seq_num;
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Zhu Yi <yi.zhu@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit e603d9d824ff0eda98a65708a7e82112becf2dca
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Mon Jul 13 13:25:58 2009 +0200

    mac80211_hwsim: fix use after free
    
    Once the "data" pointer is freed, we can't be iterating
    to the next item in the list any more so we need to use
    list_for_each_entry_safe with a temporary variable.
    
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit f7e5cc0c40dff92bad2894153f675c6c542ba2f0
Author: Lothar Waßmann <LW@KARO-electronics.de>
Date:   Tue Jul 14 23:10:21 2009 +0000

    net/can bugfix: use after free bug in can protocol drivers
    
    Fix a use after free bug in can protocol drivers
    
    The release functions of the can protocol drivers lack a call to
    sock_orphan() which leads to referencing freed memory under certain
    circumstances.
    
    This patch fixes a bug reported here:
    https://lists.berlios.de/pipermail/socketcan-users/2009-July/000985.html
    
    Signed-off-by: Lothar Wassmann <LW@KARO-electronics.de>
    Acked-by: Oliver Hartkopp <oliver@hartkopp.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a35780005eb256eb5ec83ffcc802967295887a45
Author: Lai Jiangshan <laijs@cn.fujitsu.com>
Date:   Mon Jul 6 16:10:23 2009 +0800

    tracing/workqueues: Add refcnt to struct cpu_workqueue_stats
    
    The stat entries can be freed when the stat file is being read.
    The worse is, the ptr can be freed immediately after it's returned
    from workqueue_stat_start/next().
    
    Add a refcnt to struct cpu_workqueue_stats to avoid use-after-free.
    
    Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com>
    Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
    Acked-by: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    LKML-Reference: <4A51B16F.6010608@cn.fujitsu.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 9b627e9bf49ebfeb060dfae0435bdba06cf27cb8
Author: Jiri Slaby <jirislaby@gmail.com>
Date:   Thu Jul 2 13:50:58 2009 -0400

    Btrfs: fix use after free in btrfs_start_workers fail path
    
    worker memory is already freed on one fail path in btrfs_start_workers,
    but is still dereferenced. Switch the dereference and kfree.
    
    Signed-off-by: Jiri Slaby <jirislaby@gmail.com>
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit 35aa901c0b66cb3c2eeee23f13624014825a44a8
Author: Eric Paris <eparis@redhat.com>
Date:   Thu Jun 11 14:31:33 2009 -0400

    Audit: fix audit watch use after free
    
    When an audit watch is added to a parent the temporary watch inside the
    original krule from userspace is freed.  Yet the original watch is used after
    the real watch was created in audit_add_rules()
    
    Signed-off-by: Eric Paris <eparis@redhat.com>

commit 1926ee85a903d189c5702eed6531be321e33eb47
Author: Jack Steiner <steiner@sgi.com>
Date:   Wed Jun 17 16:28:33 2009 -0700

    gru: fix potential use-after-free when purging GRU tlbs
    
    Fix potential SGI GRU bug that could cause a use-after-free.  If one
    thread in a task is flushing the GRU and another thread destroys the GRU
    context, there is the potential to access a table after it has been freed.
    
    Copy the gms pointer to a local variable before unlocking the gts table.
    Note that no refcnt is needed for the gms - the reference is held
    indirectly by the task's mm_struct.
    
    Signed-off-by: Jack Steiner <steiner@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c78a87d0a1fc885dfdbe21fd5e07787691dfb068
Author: David Teigland <teigland@redhat.com>
Date:   Thu Jun 18 13:20:24 2009 -0500

    dlm: fix plock use-after-free
    
    Fix a regression from the original addition of nfs lock support
    586759f03e2e9031ac5589912a51a909ed53c30a.  When a synchronous
    (non-nfs) plock completes, the waiting thread will wake up and
    free the op struct.  This races with the user thread in
    dev_write() which goes on to read the op's callback field to
    check if the lock is async and needs a callback.  This check
    can happen on the freed op.  The fix is to note the callback
    value before the op can be freed.
    
    Signed-off-by: David Teigland <teigland@redhat.com>

commit 5b2c4b972c0226406361f83b747eb5cdab51e68e
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Jun 12 06:14:36 2009 +0000

    net: fix network drivers ndo_start_xmit() return values (part 8)
    
    Fix up USB drivers that return an errno value (result of usb_submit_urb())
    to qdisc_restart(), causing qdisc_restart() to print a warning and requeue/
    retransmit the skb.
    
    - hso: skb is freed: use after free
    - at76_usb: skb is freed: use after free
    
    Compile tested only.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 98ca4a46d27348476c9196ebc0a0c5297431d90f
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Jun 12 05:20:01 2009 +0000

    net: fix network drivers ndo_start_xmit() return values (part 6)
    
    Fix up hamradio drivers that return an errno value to dev_queue_xmit(), causing
    it to print a warning an free the skb.
    
    - bpqether: skb is freed: use after free
    
    Compile tested only.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4bd73ae2682d9069746bb049a416d9ab90c6684b
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Jun 12 03:17:19 2009 +0000

    net: fix network drivers ndo_start_xmit() return values (part 2)
    
    Fix up IRDA drivers that return an errno value to qdisc_restart(), causing
    qdisc_restart() to print a warning an requeue/retransmit the skb.
    
    - donauboe: intention appears to be to have the skb retransmitted without
                error message
    - irda-usb: intention is to drop silently according to comment
    - kingsub-sir: skb is freed: use after free
    - ks959-sir: skb is freed: use after free
    - ksdazzle-sir: skb is freed: use after free
    - mcs7880: skb is freed: use after free
    
    All but donauboe compile tested.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3790c8cdb99f23824b23cb16df608281b335ee91
Author: Patrick McHardy <kaber@trash.net>
Date:   Fri Jun 12 03:00:35 2009 +0000

    net: fix network driver ndo_start_xmit() return values (part 1)
    
    Fix up drivers that return an errno value to qdisc_restart(), causing
    qdisc_restart() to print a warning and requeue/retransmit the skb.
    
    - xpnet: memory allocation error, intention is to drop
    - ethoc: oversized packet, packet must be dropped
    - ibmlana: skb freed: use after free
    - rrunner: skb freed: use after free
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 83d60795157c83389e6aaa0532d5e19afa976a24
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jun 6 09:45:57 2009 +0100

    drm/i915: Sanity check execbuffer arguments before touching state.
    
    By sending a broken execbuffer (its length was not suitably aligned) I
    triggered an operation upon a freed object. The invalid alignment was
    discovered after updating the write_domain on the object but before the
    object was placed on the active queue. So during the unwind process
    following the error, the now freed object attempts to flush its
    non-existent, but outstanding, GPU writes causing this use-after-free.
    
    [drm:i915_dispatch_gem_execbuffer] *ERROR* alignment
    [drm:i915_gem_execbuffer] *ERROR* dispatch failed -22
    WARNING: at lib/kref.c:43 warn_slowpath_null+0x10/0x15()
    Modules linked in:
    Pid: 4552, comm: lt-csi-drm Not tainted 2.6.30-rc6 #423
    Call Trace:
     [<c0119ef3>] warn_slowpath_fmt+0x57/0x6d
     [<c014de24>] ? get_pageblock_migratetype+0x18/0x1e
     [<c014e8fd>] ? free_hot_page+0xa/0xc
     [<c014e915>] ? __free_pages+0x16/0x1f
     [<c0153ebf>] ? shmem_truncate_range+0x63e/0x656
     [<c015fb2f>] ? slob_page_alloc+0x146/0x1c8
     [<c0119f19>] warn_slowpath_null+0x10/0x15
     [<c01f55f2>] kref_get+0x1b/0x21
     [<c02605db>] i915_gem_object_move_to_active+0x1f/0x56
     [<c0261302>] i915_add_request+0x156/0x19a
     [<c026136e>] i915_gem_object_flush_gpu_write_domain+0x28/0x3f
     [<c0261eca>] i915_gem_object_unbind+0x4a/0x124
     [<c0261fd7>] i915_gem_free_object+0x33/0x9b
     [<c0250d6b>] drm_gem_object_free+0x28/0x4a
     [<c0250d43>] ? drm_gem_object_free+0x0/0x4a
     [<c01f55ce>] kref_put+0x38/0x41
     [<c0250cbf>] drm_gem_object_unreference+0x11/0x13
     [<c0250d06>] drm_gem_object_handle_unreference+0x1e/0x21
     [<c0250d13>] drm_gem_object_release_handle+0xa/0xe
     [<c01f3e6b>] idr_for_each+0x5f/0x98
     [<c0250d09>] ? drm_gem_object_release_handle+0x0/0xe
     [<c0250daf>] drm_gem_release+0x22/0x34
     [<c025046f>] drm_release+0x1e8/0x3c4
     [<c0162d25>] __fput+0xaf/0x146
     [<c0162dce>] fput+0x12/0x14
     [<c01605ef>] filp_close+0x48/0x52
     [<c011b182>] put_files_struct+0x57/0x9b
     [<c011b1e4>] exit_files+0x1e/0x20
     [<c011c6b6>] do_exit+0x16d/0x511
     [<c03704ab>] ? __schedule+0x3d4/0x3e5
     [<c0103f0d>] ? handle_irq+0xd/0x69
     [<c011caa7>] do_group_exit+0x4d/0x73
     [<c011cae0>] sys_exit_group+0x13/0x17
     [<c010268c>] sysenter_do_call+0x12/0x2b
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit 44fb5511638938a2c37c895abc14df648ffc07e9
Author: Chris Mason <chris.mason@oracle.com>
Date:   Thu Jun 4 15:34:51 2009 -0400

    Btrfs: Fix oops and use after free during space balancing
    
    The btrfs allocator uses list_for_each to walk the available block
    groups when searching for free blocks.  It starts off with a hint
    to help find the best block group for a given allocation.
    
    The hint is resolved into a block group, but we don't properly check
    to make sure the block group we find isn't in the middle of being
    freed due to filesystem shrinking or balancing.  If it is being
    freed, the list pointers in it are bogus and can't be trusted.  But,
    the code happily goes along and uses them in the list_for_each loop,
    leading to all kinds of fun.
    
    The fix used here is to check to make sure the block group we find really
    is on the list before we use it.  list_del_init is used when removing
    it from the list, so we can do a proper check.
    
    The allocation clustering code has a similar bug where it will trust
    the block group in the current free space cluster.  If our allocation
    flags have changed (going from single spindle dup to raid1 for example)
    because the drives in the FS have changed, we're not allowed to use
    the old block group any more.
    
    The fix used here is to check the current cluster against the
    current allocation flags.
    
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit 9401608bb34be14960311dbb91d4a82ee07a03fa
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Apr 14 19:51:30 2009 -0300

    V4L/DVB (11516): drivers/media/video/saa5246a.c: fix use-after-free
    
    I lowered the kfree(t) down a couple lines and removed the superflous
    "t->vdev = NULL;"
    
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 5b83cfa98569663b6fa6cda85a1f2fd371a082c7
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Apr 14 19:50:33 2009 -0300

    V4L/DVB (11515): drivers/media/video/saa5249.c: fix use-after-free and leak
    
    I moved the kfree() down a couple lines.  t->vdev is going to be in freed
    memory so there is no point setting it to NULL.  I added a kfree(t) on a
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit 82a10a81c853be3859b3d222db0f372ee8d2eaa2
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Apr 16 15:37:28 2009 -0400

    USB: g_file_storage: fix use-after-free bug when closing files
    
    This patch (as1231) fixes a use-after-free bug in g_file_storage.  A
    device's name may not be available after the device is unregistered,
    even if the device structure itself is still allocated.  Since
    close_backing_file() prints a LUN's name for debugging, it shouldn't
    be called after the LUN has been unregistered.
    
    That whole area needed to be cleaned up; the backing files were
    getting closed in a couple of different places.  The patch fixes
    things so that they get closed in just one place, as part of the
    unbind procedure, immediately before the LUN is unregistered.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a0a69a0106dab8d20596f97f6674bed3b394d1ee
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Apr 17 02:34:38 2009 -0700

    gro: Fix use after free in tcp_gro_receive
    
    After calling skb_gro_receive skb->len can no longer be relied
    on since if the skb was merged using frags, then its pages will
    have been removed and the length reduced.
    
    This caused tcp_gro_receive to prematurely end merging which
    resulted in suboptimal performance with ixgbe.
    
    The fix is to store skb->len on the stack.
    
    Reported-by: Mark Wagner <mwagner@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      [MTD] struct device - replace bus_id with dev_name(), dev_set_name()
      [MTD] [NOR] Fixup for Numonyx M29W128 chips
      [MTD] mtdpart: Make ecc_stats more realistic.
      powerpc/85xx: TQM8548: Update DTS file for multi-chip support
      powerpc: NAND: FSL UPM: document new bindings
      [MTD] [NAND] FSL-UPM: Add wait flags to support board/chip specific delays
      [MTD] [NAND] FSL-UPM: add multi chip support
      [MTD] [NOR] Add device parent info to physmap_of
      [MTD] [NAND] Add support for NAND on the Socrates board
      [MTD] [NAND] Add support for 4KiB pages.
      [MTD] sysfs support should not depend on CONFIG_PROC_FS
      [MTD] [NAND] Add parent info for CAFÉ controller
      [MTD] support driver model updates
      [MTD] driver model updates (part 2)
      [MTD] driver model updates
      [MTD] [NAND] move gen_nand's probe function to .devinit.text
      [MTD] [MAPS] move sa1100 flash's probe function to .devinit.text
      [MTD] fix use after free in register_mtd_blktrans
      [MTD] [MAPS] Drop now unused sharpsl-flash map
      [MTD] ofpart: Check name property to determine partition nodes.
      ...
    
    Manually fix trivial conflict in drivers/mtd/maps/Makefile

commit 2cf3a11494b15949835ff92a7af15f979ac37bbd
Author: Marcin Slusarz <marcin.slusarz@gmail.com>
Date:   Sat Mar 28 18:44:24 2009 +0100

    [MTD] fix use after free in register_mtd_blktrans
    
    Reported-by: Dan Carpenter <error27@gmail.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Marcin Slusarz <marcin.slusarz@gmail.com>
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>

commit bedcc45c2e5d72b1c4b087b725c391441a93eee6
Author: Magnus Damm <damm@opensource.se>
Date:   Wed Mar 11 21:59:03 2009 +0900

    tmio_mmc: Fix use after free in remove()
    
    Update the tmio_mmc code to call mmc_free_host() when
    done using the private data. Without this fix the driver
    frees memory and then keeps on using it as private data.
    
    Signed-off-by: Magnus Damm <damm@opensource.se>
    Acked-by: Ian Molton <ian@mnementh.co.uk>
    Signed-off-by: Pierre Ossman <drzeus@drzeus.cx>

commit d3ce65d12668ef1e3a164d48e04c59228d5ecf7b
Author: Tony Battersby <tonyb@cybernetics.com>
Date:   Thu Jan 8 12:52:32 2009 -0500

    [SCSI] sym53c8xx: fix shost use-after-free and memory leak
    
    This patch fixes two bugs:
    
    1) rmmod sym53c8xx uses shost after freeing it with
       scsi_put_host(shost).
    
    2) insmod sym53c8xx doesn't call scsi_put_host(shost) if
       scsi_add_host() fails, causing a memory leak on the error path.
    
    Signed-off-by: Tony Battersby <tonyb@cybernetics.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit c6517b7942fad663cc1cf3235cbe4207cf769332
Author: Tony Battersby <tonyb@cybernetics.com>
Date:   Wed Jan 21 14:45:50 2009 -0500

    [SCSI] sg: fix races during device removal
    
    sg has the following problems related to device removal:
    
    * opening a sg fd races with removing a device
    * closing a sg fd races with removing a device
    * /proc/scsi/sg/* access races with removing a device
    * command completion races with removing a device
    * command completion races with closing a sg fd
    * can rmmod sg with active commands
    
    These problems can cause kernel oopses, memory-use-after-free, or
    double-free errors.  This patch fixes these problems by using krefs
    to manage the lifetime of sg_device and sg_fd.
    
    Each command submitted to the midlevel holds a reference to sg_fd
    until the completion callback.  This ensures that sg_fd doesn't go
    away if the fd is closed with commands still outstanding.
    
    sg_fd gets the reference of sg_device (with scsi_device) and also
    makes sure that the sg module doesn't go away.
    
    /proc/scsi/sg/* functions don't play nicely with krefs because they
    give information about sg_fds which have been closed but not yet
    freed due to still having outstanding commands and sg_devices which
    have been removed but not yet freed due to still being referenced
    by one or more sg_fds.  To deal with this safely without removing
    functionality, /proc functions now access sg_device and sg_fd while
    holding a lock instead of using kref_get()/kref_put().
    
    Signed-off-by: Tony Battersby <tonyb@cybernetics.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit 7cbd4877e5b167b56a3d6033b926a9f925186e12
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Mar 4 16:06:03 2009 -0700

    dmatest: fix use after free in dmatest_exit
    
    dmatest_cleanup_chanel will free dtc, so grab ->chan before it goes away
    and use it to do the release.
    
    Reported-by: Thierry Reding <thierry.reding@avionic-design.de>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

commit cbb766766f3f2f6d9326c561b1020590642c6e39
Author: Vegard Nossum <vegard.nossum@gmail.com>
Date:   Fri Feb 27 14:03:04 2009 -0800

    mm: fix lazy vmap purging (use-after-free error)
    
    I just got this new warning from kmemcheck:
    
        WARNING: kmemcheck: Caught 32-bit read from freed memory (c7806a60)
        a06a80c7ecde70c1a04080c700000000a06709c1000000000000000000000000
         f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f
         ^
    
        Pid: 0, comm: swapper Not tainted (2.6.29-rc4 #230)
        EIP: 0060:[<c1096df7>] EFLAGS: 00000286 CPU: 0
        EIP is at __purge_vmap_area_lazy+0x117/0x140
        EAX: 00070f43 EBX: c7806a40 ECX: c1677080 EDX: 00027b66
        ESI: 00002001 EDI: c170df0c EBP: c170df00 ESP: c178830c
         DS: 007b ES: 007b FS: 00d8 GS: 0000 SS: 0068
        CR0: 80050033 CR2: c7806b14 CR3: 01775000 CR4: 00000690
        DR0: 00000000 DR1: 00000000 DR2: 00000000 DR3: 00000000
        DR6: 00004000 DR7: 00000000
         [<c1096f3e>] free_unmap_vmap_area_noflush+0x6e/0x70
         [<c1096f6a>] remove_vm_area+0x2a/0x70
         [<c1097025>] __vunmap+0x45/0xe0
         [<c10970de>] vunmap+0x1e/0x30
         [<c1008ba5>] text_poke+0x95/0x150
         [<c1008ca9>] alternatives_smp_unlock+0x49/0x60
         [<c171ef47>] alternative_instructions+0x11b/0x124
         [<c171f991>] check_bugs+0xbd/0xdc
         [<c17148c5>] start_kernel+0x2ed/0x360
         [<c171409e>] __init_begin+0x9e/0xa9
         [<ffffffff>] 0xffffffff
    
    It happened here:
    
        $ addr2line -e vmlinux -i c1096df7
        mm/vmalloc.c:540
    
    Code:
    
            list_for_each_entry(va, &valist, purge_list)
                    __free_vmap_area(va);
    
    It's this instruction:
    
        mov    0x20(%ebx),%edx
    
    Which corresponds to a dereference of va->purge_list.next:
    
        (gdb) p ((struct vmap_area *) 0)->purge_list.next
        Cannot access memory at address 0x20
    
    It seems that we should use "safe" list traversal here, as the element
    is freed inside the loop. Please verify that this is the right fix.
    
    Acked-by: Nick Piggin <npiggin@suse.de>
    Signed-off-by: Vegard Nossum <vegard.nossum@gmail.com>
    Cc: Pekka Enberg <penberg@cs.helsinki.fi>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com>
    Cc: <stable@kernel.org>         [2.6.28.x]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ad45aa9e6e010283bbd8cf0c6309866233e113f2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Feb 9 11:31:41 2009 +0000

    drm: Potential use-after-free on error path.
    
    Remove the member from the hash table before we free the structure!
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit 67e055d144c5b2acdc1c63811fde031263bf92c5
Author: Li Zefan <lizf@cn.fujitsu.com>
Date:   Wed Feb 18 14:48:20 2009 -0800

    cgroups: fix possible use after free
    
    In cgroup_kill_sb(), root is freed before sb is detached from the list, so
    another sget() may find this sb and call cgroup_test_super(), which will
    access the root that has been freed.
    
    Reported-by: Al Viro <viro@ZenIV.linux.org.uk>
    Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
    Acked-by: Paul Menage <menage@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5af759176cc767e7426f89764bde4996ebaaf419
Author: Mike Galbraith <efault@gmx.de>
Date:   Wed Feb 11 10:53:37 2009 +0100

    perfcounters: fix use after free in perf_release()
    
    running...
    
      while true; do
        foo -d 1 -f 1 -c 100000 & sleep 1
        kerneltop -d 1 -f 1 -e 1 -c 25000 -p `pidof foo`
      done
    
      while true; do
        killall foo; killall kerneltop; sleep 2
      done
    
    ...in two shells with SLUB_DEBUG enabled produces flood of:
    BUG task_struct: Poison overwritten.
    
    Fix the use-after-free bug in perf_release().
    
    Signed-off-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 33bfad54b58cf05cfe6678c3ec9235d4bc8db4c2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 30 11:37:22 2009 -0800

    Allow opportunistic merging of VM_CAN_NONLINEAR areas
    
    Commit de33c8db5910cda599899dd431cc30d7c1018cbf ("Fix OOPS in
    mmap_region() when merging adjacent VM_LOCKED file segments") unified
    the vma merging of anonymous and file maps to just one place, which
    simplified the code and fixed a use-after-free bug that could cause an
    oops.
    
    But by doing the merge opportunistically before even having called
    ->mmap() on the file method, it now compares two different 'vm_flags'
    values: the pre-mmap() value of the new not-yet-formed vma, and previous
    mappings of the same file around it.
    
    And in doing so, it refused to merge the common file case, which adds a
    marker to say "I can be made non-linear".
    
    This fixes it by just adding a set of flags that don't have to match,
    because we know they are ok to merge.  Currently it's only that single
    VM_CAN_NONLINEAR flag, but at least conceptually there could be others
    in the future.
    
    Reported-and-acked-by: Hugh Dickins <hugh@veritas.com>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Greg KH <gregkh@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e2fe154e918276e900067a9d1d3a6a963faee041
Author: Christian Lamparter <chunkeey@web.de>
Date:   Tue Jan 20 00:27:57 2009 +0100

    p54usb: fix nasty use after free
    
    In theory, the firmware acks the received a data frame, before signaling the driver to free it again.
    However Artur Skawina <art.08.09@gmail.com> has shown that it can happen in reverse order as well.
    This is very bad and could lead to memory corruptions, oopses and panics.
    
    Thanks to Artur Skawina <art.08.09@gmail.com> for reporting and debugging this issue.
    
    Signed-off-by: Christian Lamparter <chunkeey@web.de>
    Tested-by: Artur Skawina <art.08.09@gmail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commits)
      GFS2: Use DEFINE_SPINLOCK
      GFS2: Fix use-after-free bug on umount (try #2)
      Revert "GFS2: Fix use-after-free bug on umount"
      GFS2: Streamline alloc calculations for writes
      GFS2: Send useful information with uevent messages
      GFS2: Fix use-after-free bug on umount
      GFS2: Remove ancient, unused code
      GFS2: Move four functions from super.c
      GFS2: Fix bug in gfs2_lock_fs_check_clean()
      GFS2: Send some sensible sysfs stuff
      GFS2: Kill two daemons with one patch
      GFS2: Move gfs2_recoverd into recovery.c
      GFS2: Fix "truncate in progress" hang
      GFS2: Clean up & move gfs2_quotad
      GFS2: Add more detail to debugfs glock dumps
      GFS2: Banish struct gfs2_rgrpd_host
      GFS2: Move rg_free from gfs2_rgrpd_host to gfs2_rgrpd
      GFS2: Move rg_igeneration into struct gfs2_rgrpd
      GFS2: Banish struct gfs2_dinode_host
      GFS2: Move i_size from gfs2_dinode_host and rename it to i_disksize
      ...

commit 88a19ad066c1aab2f9713beb670525fcc06e1c09
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Fri Dec 19 15:43:05 2008 +0000

    GFS2: Fix use-after-free bug on umount (try #2)
    
    This should solve the issue with the previous attempt at fixing this.
    
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commit fefc03bfedeff2002f14e848ecb7c0cd77ee0b15
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Fri Dec 19 15:32:06 2008 +0000

    Revert "GFS2: Fix use-after-free bug on umount"
    
    This reverts commit 78802499912f1ba31ce83a94c55b5a980f250a43.
    
    The original patch is causing problems in relation to order of
    operations at umount in relation to jdata files. I need to fix
    this a different way.
    
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commit 3af165ac4d099385b12e3e75a9ee3ffd02da33e0
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Thu Nov 27 08:27:28 2008 +0000

    GFS2: Fix use-after-free bug on umount
    
    There was a use-after-free with the GFS2 super block during
    umount. This patch moves almost all of the umount code from
    ->put_super into ->kill_sb, the only bit that cannot be moved
    being the glock hash clearing which has to remain as ->put_super
    due to umount ordering requirements. As a result its now obvious
    that the kfree is the final operation, whereas before it was
    hidden in ->put_super.
    
    Also gfs2_jindex_free is then only referenced from a single file
    so thats moved and marked static too.
    
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commit 0da2afd59653d2edf5c8e0f09b23f367ab5bc80f
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Dec 26 14:57:42 2008 -0800

    gro: Fix potential use after free
    
    The initial skb may have been freed after napi_gro_complete in
    napi_gro_receive if it was merged into an existing packet.  Thus
    we cannot check same_flow (which indicates whether it was merged)
    after calling napi_gro_complete.
    
    This patch fixes this by saving the same_flow status before the
    call to napi_gro_complete.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dd397dc9dddfa2149a1bbc9e52ac7d5630737cec
Author: Christian Lamparter <chunkeey@web.de>
Date:   Tue Dec 9 15:14:37 2008 +0100

    p54usb: rewriting rx/tx routines to make use of usb_anchor's facilities
    
    Alan Stern found several flaws in p54usb's implementation and annotated:
    "usb_kill_urb() and similar routines do not expect an URB's completion
    routine to deallocate it.  This is almost obvious -- if the URB is deallocated
    before the completion routine returns then there's no way for usb_kill_urb
    to detect when the URB actually is complete."
    
    This patch addresses all known limitations in the old implementation and fixes
    khub's "use-after-freed" hang, when SLUB debug's poisoning option is enabled.
    
    Signed-off-by: Christian Lamparter <chunkeey@web.de>
    Cc: stable@kernel.org
    Tested-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit e04ca626baee684bea9d6239e4e1119b696101b2
Author: Chris Mason <chris.mason@oracle.com>
Date:   Mon Nov 10 11:44:58 2008 -0500

    Btrfs: Fix use after free during compressed reads
    
    Yan's fix to use the correct file offset during compressed reads used the
    extent_map struct pointer after it had been freed.  This saves the
    fields we want for later use instead.
    
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit 2cf7f0da3ae225848a2ee10d4e216448a770fd00
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Thu Oct 30 16:59:06 2008 +1100

    [XFS] Wait for all I/O on truncate to zero file size
    
    It's possible to have outstanding xfs_ioend_t's queued when the file size
    is zero. This can happen in the direct I/O path when a direct I/O write
    fails due to ENOSPC. In this case the xfs_ioend_t will still be queued (ie
    xfs_end_io_direct() does not know that the I/O failed so can't force the
    xfs_ioend_t to be flushed synchronously).
    
    When we truncate a file on unlink we don't know to wait for these
    xfs_ioend_ts and we can have a use-after-free situation if the inode is
    reclaimed before the xfs_ioend_t is finally processed.
    
    As was suggested by Dave Chinner lets wait for all I/Os to complete when
    truncating the file size to zero.
    
    SGI-PV: 981668
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32216a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>

commit 9ccbece546cf836f67f6d9bb4bf2f70f7476cb2c
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Thu Oct 30 16:53:25 2008 +1100

    [XFS] Fix use-after-free with log and quotas
    
    Destroying the quota stuff on unmount can access the log - ie
    XFS_QM_DONE() ends up in xfs_dqunlock() which calls
    xfs_trans_unlocked_item() and then xfs_log_move_tail(). By this time the
    log has already been destroyed. Just move the cleanup of the quota code
    earlier in xfs_unmountfs() before the call to xfs_log_unmount(). Moving
    XFS_QM_DONE() up near XFS_QM_DQPURGEALL() seems like a good spot.
    
    SGI-PV: 987086
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32148a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Peter Leckie <pleckie@sgi.com>

commit 99fa8cb3c580d4445fe8fc239454e8f37a3b6847
Author: David Chinner <david@fromorbit.com>
Date:   Thu Oct 30 17:36:40 2008 +1100

    [XFS] Prevent use-after-free caused by synchronous inode reclaim
    
    With the combined linux and XFS inode, we need to ensure that the combined
    structure is not freed before the generic code is finished with the inode.
    As it turns out, there is a case where the XFS inode is freed before the
    linux inode - when xfs_reclaim() is called from ->clear_inode() on a clean
    inode, the xfs inode is freed during that call. The generic code
    references the inode after the ->clear_inode() call, so this is a use
    after free situation.
    
    Fix the problem by moving the xfs_reclaim() call to ->destroy_inode()
    instead of in ->clear_inode(). This ensures the combined inode structure
    is not freed until after the generic code has finished with it.
    
    SGI-PV: 988141
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32324a
    
    Signed-off-by: David Chinner <david@fromorbit.com>
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>

commit d112f2984592acb774187b3adddc107fb0825500
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Thu Oct 30 16:59:06 2008 +1100

    [XFS] Wait for all I/O on truncate to zero file size
    
    It's possible to have outstanding xfs_ioend_t's queued when the file size
    is zero. This can happen in the direct I/O path when a direct I/O write
    fails due to ENOSPC. In this case the xfs_ioend_t will still be queued (ie
    xfs_end_io_direct() does not know that the I/O failed so can't force the
    xfs_ioend_t to be flushed synchronously).
    
    When we truncate a file on unlink we don't know to wait for these
    xfs_ioend_ts and we can have a use-after-free situation if the inode is
    reclaimed before the xfs_ioend_t is finally processed.
    
    As was suggested by Dave Chinner lets wait for all I/Os to complete when
    truncating the file size to zero.
    
    SGI-PV: 981668
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32216a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>

commit a357a1215602f79182abdde27aaddc7166dbd709
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Thu Oct 30 16:53:25 2008 +1100

    [XFS] Fix use-after-free with log and quotas
    
    Destroying the quota stuff on unmount can access the log - ie
    XFS_QM_DONE() ends up in xfs_dqunlock() which calls
    xfs_trans_unlocked_item() and then xfs_log_move_tail(). By this time the
    log has already been destroyed. Just move the cleanup of the quota code
    earlier in xfs_unmountfs() before the call to xfs_log_unmount(). Moving
    XFS_QM_DONE() up near XFS_QM_DQPURGEALL() seems like a good spot.
    
    SGI-PV: 987086
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32148a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Peter Leckie <pleckie@sgi.com>

commit db64fe02258f1507e13fe5212a989922323685ce
Author: Nick Piggin <npiggin@suse.de>
Date:   Sat Oct 18 20:27:03 2008 -0700

    mm: rewrite vmap layer
    
    Rewrite the vmap allocator to use rbtrees and lazy tlb flushing, and
    provide a fast, scalable percpu frontend for small vmaps (requires a
    slightly different API, though).
    
    The biggest problem with vmap is actually vunmap.  Presently this requires
    a global kernel TLB flush, which on most architectures is a broadcast IPI
    to all CPUs to flush the cache.  This is all done under a global lock.  As
    the number of CPUs increases, so will the number of vunmaps a scaled
    workload will want to perform, and so will the cost of a global TLB flush.
     This gives terrible quadratic scalability characteristics.
    
    Another problem is that the entire vmap subsystem works under a single
    lock.  It is a rwlock, but it is actually taken for write in all the fast
    paths, and the read locking would likely never be run concurrently anyway,
    so it's just pointless.
    
    This is a rewrite of vmap subsystem to solve those problems.  The existing
    vmalloc API is implemented on top of the rewritten subsystem.
    
    The TLB flushing problem is solved by using lazy TLB unmapping.  vmap
    addresses do not have to be flushed immediately when they are vunmapped,
    because the kernel will not reuse them again (would be a use-after-free)
    until they are reallocated.  So the addresses aren't allocated again until
    a subsequent TLB flush.  A single TLB flush then can flush multiple
    vunmaps from each CPU.
    
    XEN and PAT and such do not like deferred TLB flushing because they can't
    always handle multiple aliasing virtual addresses to a physical address.
    They now call vm_unmap_aliases() in order to flush any deferred mappings.
    That call is very expensive (well, actually not a lot more expensive than
    a single vunmap under the old scheme), however it should be OK if not
    called too often.
    
    The virtual memory extent information is stored in an rbtree rather than a
    linked list to improve the algorithmic scalability.
    
    There is a per-CPU allocator for small vmaps, which amortizes or avoids
    global locking.
    
    To use the per-CPU interface, the vm_map_ram / vm_unmap_ram interfaces
    must be used in place of vmap and vunmap.  Vmalloc does not use these
    interfaces at the moment, so it will not be quite so scalable (although it
    will use lazy TLB flushing).
    
    As a quick test of performance, I ran a test that loops in the kernel,
    linearly mapping then touching then unmapping 4 pages.  Different numbers
    of tests were run in parallel on an 4 core, 2 socket opteron.  Results are
    in nanoseconds per map+touch+unmap.
    
    threads           vanilla         vmap rewrite
    1                 14700           2900
    2                 33600           3000
    4                 49500           2800
    8                 70631           2900
    
    So with a 8 cores, the rewritten version is already 25x faster.
    
    In a slightly more realistic test (although with an older and less
    scalable version of the patch), I ripped the not-very-good vunmap batching
    code out of XFS, and implemented the large buffer mapping with vm_map_ram
    and vm_unmap_ram...  along with a couple of other tricks, I was able to
    speed up a large directory workload by 20x on a 64 CPU system.  I believe
    vmap/vunmap is actually sped up a lot more than 20x on such a system, but
    I'm running into other locks now.  vmap is pretty well blown off the
    profiles.
    
    Before:
    1352059 total                                      0.1401
    798784 _write_lock                              8320.6667 <- vmlist_lock
    529313 default_idle                             1181.5022
     15242 smp_call_function                         15.8771  <- vmap tlb flushing
      2472 __get_vm_area_node                         1.9312  <- vmap
      1762 remove_vm_area                             4.5885  <- vunmap
       316 map_vm_area                                0.2297  <- vmap
       312 kfree                                      0.1950
       300 _spin_lock                                 3.1250
       252 sn_send_IPI_phys                           0.4375  <- tlb flushing
       238 vmap                                       0.8264  <- vmap
       216 find_lock_page                             0.5192
       196 find_next_bit                              0.3603
       136 sn2_send_IPI                               0.2024
       130 pio_phys_write_mmr                         2.0312
       118 unmap_kernel_range                         0.1229
    
    After:
     78406 total                                      0.0081
     40053 default_idle                              89.4040
     33576 ia64_spinlock_contention                 349.7500
      1650 _spin_lock                                17.1875
       319 __reg_op                                   0.5538
       281 _atomic_dec_and_lock                       1.0977
       153 mutex_unlock                               1.5938
       123 iget_locked                                0.1671
       117 xfs_dir_lookup                             0.1662
       117 dput                                       0.1406
       114 xfs_iget_core                              0.0268
        92 xfs_da_hashname                            0.1917
        75 d_alloc                                    0.0670
        68 vmap_page_range                            0.0462 <- vmap
        58 kmem_cache_alloc                           0.0604
        57 memset                                     0.0540
        52 rb_next                                    0.1625
        50 __copy_user                                0.0208
        49 bitmap_find_free_region                    0.2188 <- vmap
        46 ia64_sn_udelay                             0.1106
        45 find_inode_fast                            0.1406
        42 memcmp                                     0.2188
        42 finish_task_switch                         0.1094
        42 __d_lookup                                 0.0410
        40 radix_tree_lookup_slot                     0.1250
        37 _spin_unlock_irqrestore                    0.3854
        36 xfs_bmapi                                  0.0050
        36 kmem_cache_free                            0.0256
        35 xfs_vn_getattr                             0.0322
        34 radix_tree_lookup                          0.1062
        33 __link_path_walk                           0.0035
        31 xfs_da_do_buf                              0.0091
        30 _xfs_buf_find                              0.0204
        28 find_get_page                              0.0875
        27 xfs_iread                                  0.0241
        27 __strncpy_from_user                        0.2812
        26 _xfs_buf_initialize                        0.0406
        24 _xfs_buf_lookup_pages                      0.0179
        24 vunmap_page_range                          0.0250 <- vunmap
        23 find_lock_page                             0.0799
        22 vm_map_ram                                 0.0087 <- vmap
        20 kfree                                      0.0125
        19 put_page                                   0.0330
        18 __kmalloc                                  0.0176
        17 xfs_da_node_lookup_int                     0.0086
        17 _read_lock                                 0.0885
        17 page_waitqueue                             0.0664
    
    vmap has gone from being the top 5 on the profiles and flushing the crap
    out of all TLBs, to using less than 1% of kernel time.
    
    [akpm@linux-foundation.org: cleanups, section fix]
    [akpm@linux-foundation.org: fix build on alpha]
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Cc: Jeremy Fitzhardinge <jeremy@goop.org>
    Cc: Krzysztof Helt <krzysztof.h1@poczta.fm>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 87acb4ef9b2991e1c453b78d71bce2ef994ef1ff
Author: David Woodhouse <David.Woodhouse@intel.com>
Date:   Mon Aug 18 22:50:22 2008 +0100

    Simplify btrfs_get_parent(), fix use-after-free bug
    
    Date: Mon, 18 Aug 2008 22:50:22 +0100
    Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
    Signed-off-by: Chris Mason <chris.mason@oracle.com>

commit e1f5dbd7077eebec794452a516cb02f1669b036d
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Wed Sep 17 16:52:13 2008 +1000

    [XFS] Fix use-after-free with buffers
    
    We have a use-after-free issue where log completions access buffers via
    the buffer log item and the buffer has already been freed. Fix this by
    taking a reference on the buffer when attaching the buffer log item and
    release the hold when the buffer log item is detached and we no longer
    need the buffer. Also create a new function xfs_buf_item_free() to combine
    some common code.
    
    SGI-PV: 985757
    
    SGI-Modid: xfs-linux-melb:xfs-kern:32025a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>

commits)
      V4L/DVB (8881): gspca: After 'while (retry--) {...}', retry will be -1 but not 0.
      V4L/DVB (8880): PATCH: Fix parents on some webcam drivers
      V4L/DVB (8877): b2c2 and bt8xx: udelay to mdelay
      V4L/DVB (8876): budget: udelay changed to mdelay
      V4L/DVB (8874): gspca: Adjust hstart for sn9c103/ov7630 and update usb-id's.
      V4L/DVB (8873): gspca: Bad image offset with rev012a of spca561 and adjust exposure.
      V4L/DVB (8872): gspca: Bad image format and offset with rev072a of spca561.
      V4L/DVB (8870): gspca: Fix dark room problem with sonixb.
      V4L/DVB (8869): gspca: Move the Sonix webcams with TAS5110C1B from sn9c102 to gspca.
      V4L/DVB (8868): gspca: Support for vga modes with sif sensors in sonixb.
      V4L/DVB (8844): dabusb_fpga_download(): fix a memory leak
      V4L/DVB (8843): tda10048_firmware_upload(): fix a memory leak
      V4L/DVB (8842): vivi_release(): fix use-after-free
      V4L/DVB (8840): dib0700: add basic support for Hauppauge Nova-TD-500 (84xxx)
      V4L/DVB (8839): dib0700: add comment to identify 35th USB id pair
      V4L/DVB (8837): dvb: fix I2C adapters name size
      V4L/DVB (8835): gspca: Same pixfmt as the sn9c102 driver and raw Bayer added in sonixb.
      V4L/DVB (8834): gspca: Have a bigger buffer for sn9c10x compressed images.
      V4L/DVB (8833): gspca: Cleanup the sonixb code.
      V4L/DVB (8832): gspca: Bad pixelformat of vc0321 webcams.
      ...

commit 8da9bae3292ea8aee803e7cda295877c361f0694
Author: Adrian Bunk <bunk@kernel.org>
Date:   Wed Sep 3 17:12:25 2008 -0300

    V4L/DVB (8842): vivi_release(): fix use-after-free
    
    video_device_release() does kfree(), which made the following printk()
    doing a use-after-free.
    
    printk() first and release then.
    
    Reported-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit f14413184b1de4dcbd5ec3e7c129c3ce2079f543
Author: Matthew Garrett <mjg59@srcf.ucam.org>
Date:   Wed Aug 20 14:08:57 2008 -0700

    eeepc-laptop: fix use after free
    
    eeepc-laptop uses the hwmon struct after unregistering the device, causing
    an oops on module unload.  Flip the ordering to fix.
    
    Signed-off-by: Matthew Garrett <mjg@redhat.com>
    Cc: Henrique de Moraes Holschuh <hmh@hmh.eng.br>
    Cc: Corentin Chary <corentincj@iksaif.net>
    Cc: Karol Kozimor <sziwan@users.sourceforge.net>
    Cc: <stable@kernel.org>         [2.6.26.x]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      [XFS] Fix use after free in xfs_log_done().
      [XFS] Make xfs_bmap_*_count_leaves void.
      [XFS] Use KM_NOFS for debug trace buffers
      [XFS] use KM_MAYFAIL in xfs_mountfs
      [XFS] refactor xfs_mount_free
      [XFS] don't call xfs_freesb from xfs_unmountfs
      [XFS] xfs_unmountfs should return void
      [XFS] cleanup xfs_mountfs
      [XFS] move root inode IRELE into xfs_unmountfs
      [XFS] stop using file_update_time
      [XFS] optimize xfs_ichgtime
      [XFS] update timestamp in xfs_ialloc manually
      [XFS] remove the sema_t from XFS.
      [XFS] replace dquot flush semaphore with a completion
      [XFS] replace inode flush semaphore with a completion
      [XFS] extend completions to provide XFS object flush requirements
      [XFS] replace the XFS buf iodone semaphore with a completion
      [XFS] clean up stale references to semaphores
      [XFS] use get_unaligned_* helpers
      [XFS] Fix compile failure in xfs_buf_trace()
      ...

commit c6a7b0f8a49aa71792dd108efc535435f462bf79
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Wed Aug 13 16:52:50 2008 +1000

    [XFS] Fix use after free in xfs_log_done().
    
    The ticket allocation code got reworked in 2.6.26 and we now free tickets
    whereas before we used to cache them so the use-after-free went
    undetected.
    
    SGI-PV: 985525
    
    SGI-Modid: xfs-linux-melb:xfs-kern:31877a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: David Chinner <david@fromorbit.com>

commits)
      [XFS] Remove vn_revalidate calls in xfs.
      [XFS] Now that xfs_setattr is only used for attributes set from ->setattr
      [XFS] xfs_setattr currently doesn't just handle the attributes set through
      [XFS] fix use after free with external logs or real-time devices
      [XFS] A bug was found in xfs_bmap_add_extent_unwritten_real(). In a
      [XFS] fix compilation without CONFIG_PROC_FS
      [XFS] s/XFS_PURGE_INODE/IRELE/g s/VN_HOLD(XFS_ITOV())/IHOLD()/
      [XFS] fix mount option parsing in remount
      [XFS] Disable queue flag test in barrier check.
      [XFS] streamline init/exit path
      [XFS] Fix up problem when CONFIG_XFS_POSIX_ACL is not set and yet we still
      [XFS] Don't assert if trying to mount with blocksize > pagesize
      [XFS] Don't update mtime on rename source
      [XFS] Allow xfs_bmbt_split() to fallback to the lowspace allocator
      [XFS] Restore the lowspace extent allocator algorithm
      [XFS] use minleft when allocating in xfs_bmbt_split()
      [XFS] attrmulti cleanup
      [XFS] Check for invalid flags in xfs_attrlist_by_handle.
      [XFS] Fix CI lookup in leaf-form directories
      [XFS] Use the generic xattr methods.
      ...

commit c032bfcf468013643e05c8274824af10dd7cbb61
Author: Lachlan McIlroy <lachlan@sgi.com>
Date:   Fri Jul 18 17:13:12 2008 +1000

    [XFS] fix use after free with external logs or real-time devices
    
    SGI-PV: 983806
    
    SGI-Modid: xfs-linux-melb:xfs-kern:31666a
    
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>

commit 93bc4e89c260d91576840c4881d1066d84ccd422
Author: Pekka Enberg <penberg@cs.helsinki.fi>
Date:   Sat Jul 26 17:49:33 2008 -0700

    netfilter: fix double-free and use-after free
    
    As suggested by Patrick McHardy, introduce a __krealloc() that doesn't
    free the original buffer to fix a double-free and use-after-free bug
    introduced by me in netfilter that uses RCU.
    
    Reported-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Pekka Enberg <penberg@cs.helsinki.fi>
    Tested-by: Dieter Ries <clip2@gmx.de>
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a9e285856112e5e721b6a341d15437a164128b30
Author: Laurent Pinchart <laurent.pinchart@skynet.be>
Date:   Fri Jul 11 19:32:15 2008 -0300

    V4L/DVB (8257): uvcvideo: Fix possible AB-BA deadlock with videodev_lock and open_mutex
    
    The uvcvideo driver's uvc_v4l2_open() method is called from videodev's
    video_open() function, which means it is called with the videodev_lock
    mutex held.  uvc_v4l2_open() then takes uvc_driver.open_mutex to check
    dev->state and avoid racing against a device disconnect, which means
    that open_mutex must nest inside videodev_lock.
    
    However uvc_disconnect() takes the open_mutex around setting
    dev->state and also around putting its device reference.  However, if
    uvc_disconnect() ends up dropping the last reference, it will call
    uvc_delete(), which calls into the videodev code to unregister its
    device, and this will end up taking videodev_lock.  This opens a
    (unlikely in practice) window for an AB-BA deadlock and also causes a
    lockdep warning because of the lock misordering.
    
    Fortunately there is no apparent reason to hold open_mutex when doing
    kref_put() in uvc_disconnect(): if uvc_v4l2_open() runs before the
    state is set to UVC_DEV_DISCONNECTED, then it will take another
    reference to the device and kref_put() won't call uvc_delete; if
    uvc_v4l2_open() runs after the state is set, it will run before
    uvc_delete(), see the state, and return immediately -- uvc_delete()
    does uvc_unregister_video() (and hence video_unregister_device(),
    which is synchronized with videodev_lock) as its first thing, so there
    is no risk of use-after-free in uvc_v4l2_open().
    
    Bug diagnosed based on a lockdep warning reported by Romano Giannetti
    <romano@dea.icai.upcomillas.es>.
    
    Signed-off-by: Roland Dreier <roland@digitalvampire.org>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@skynet.be>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

commit 8b2b9c1af065a45ef00c26964420489a53581779
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Tue Jul 15 17:09:03 2008 +0900

    x86, intel_cacheinfo: fix use-after-free cache_kobject
    
    This avoids calling kobject_uevent() with cache_kobject that has
    already been deallocated in an error path.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 8df5fc042c8e7c08dc438c8198b62407ee1e91a0
Author: James Bottomley <James.Bottomley@HansenPartnership.com>
Date:   Mon Jul 7 15:50:01 2008 -0500

    [SCSI] bsg: fix oops on remove
    
    If you do a modremove of any sas driver, you run into an oops on
    shutdown when the host is removed (coming from the host bsg device).
    The root cause seems to be that there's a use after free of the
    bsg_class_device:  In bsg_kref_release_function, this is used (to do a
    put_device(bcg->parent) after bcg->release has been called.  In sas (and
    possibly many other things) bcd->release frees the queue which contains
    the bsg_class_device, so we get a put_device on unreferenced memory.
    Fix this by taking a copy of the pointer to the parent before releasing
    bsg.
    
    Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit ab1b20467cd2214ad89a95d007047cd2a6b5bf5d
Author: Patrick McHardy <kaber@trash.net>
Date:   Thu Jul 3 03:53:42 2008 -0700

    bridge: fix use-after-free in br_cleanup_bridges()
    
    Unregistering a bridge device may cause virtual devices stacked on the
    bridge, like vlan or macvlan devices, to be unregistered as well.
    br_cleanup_bridges() uses for_each_netdev_safe() to iterate over all
    devices during cleanup. This is not enough however, if one of the
    additionally unregistered devices is next in the list to the bridge
    device, it will get freed as well and the iteration continues on
    the freed element.
    
    Restart iteration after each bridge device removal from the beginning to
    fix this, similar to what rtnl_link_unregister() does.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Acked-by: Stephen Hemminger <shemminger@vyatta.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7fb1c2ac8ecaf0883f2fcb38dfc9ec2d15cee11d
Author: Brian King <brking@linux.vnet.ibm.com>
Date:   Wed May 14 09:48:25 2008 -0500

    ehea: Fix use after free on reboot
    
    Fixes the following use after free oops:
    
    ehea: Reboot: freeing all eHEA resources
    Unable to handle kernel paging request for data at address 0x6b6b6b6b6b6b6c5b
    Faulting instruction address: 0xd000000000354488
    cpu 0x0: Vector: 300 (Data Access) at [c00000002ec6f310]
        pc: d000000000354488: .ehea_shutdown_single_port+0x50/0x78 [ehea]
        lr: d00000000035447c: .ehea_shutdown_single_port+0x44/0x78 [ehea]
        sp: c00000002ec6f590
       msr: 8000000000009032
       dar: 6b6b6b6b6b6b6c5b
     dsisr: 40000000
      current = 0xc0000000281412e0
      paca    = 0xc0000000006df300
        pid   = 10930, comm = reboot
    enter ? for help
    [c00000002ec6f590] d00000000035d64c .ehea_remove+0x44/0x124 [ehea] (unreliable)
    [c00000002ec6f630] c000000000319f88 .of_platform_device_remove+0x40/0x58
    [c00000002ec6f6a0] c000000000291018 .__device_release_driver+0xb0/0xf0
    [c00000002ec6f730] c000000000291120 .driver_detach+0xc8/0xfc
    [c00000002ec6f7c0] c00000000028fe24 .bus_remove_driver+0xb4/0x114
    [c00000002ec6f850] c000000000291768 .driver_unregister+0x54/0x74
    [c00000002ec6f8e0] c00000000031a0c8 .of_unregister_driver+0x14/0x28
    [c00000002ec6f950] c000000000023ba0 .ibmebus_unregister_driver+0x10/0x24
    [c00000002ec6f9c0] d000000000354180 .ehea_reboot_notifier+0x30/0x4c [ehea]
    [c00000002ec6fa40] c0000000003c95a8 .notifier_call_chain+0x5c/0xcc
    [c00000002ec6fae0] c000000000082cd4 .__blocking_notifier_call_chain+0x70/0xb0
    [c00000002ec6fb90] c000000000075cf8 .kernel_restart_prepare+0x24/0x58
    [c00000002ec6fc10] c000000000075f0c .kernel_restart+0x20/0x6c
    [c00000002ec6fc90] c000000000078674 .sys_reboot+0x1d4/0x290
    [c00000002ec6fe30] c0000000000086ac syscall_exit+0x0/0x40
    
    Signed-off-by: Jeff Garzik <jgarzik@redhat.com>

commit 88dd0be3874566796fa4ffbdf927a53c4a6a2f4b
Author: J. Bruce Fields <bfields@citi.umich.edu>
Date:   Mon May 5 19:47:29 2008 -0400

    nfsd: reorder printk in do_probe_callback to avoid use-after-free
    
    We're currently dereferencing the client after we drop our reference
    count to it.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>

commit dbabad0c9c026dea3ba803cbd9d768cdffc68e32
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Thu May 8 01:43:59 2008 +0200

    zd1211rw: fix potential use-after-free bug
    
    zd_mac_tx_to_dev() could potentially free the skb, or hand it off
    to mac80211 which might free it. Hence, this code needs to get the
    usb pointer out of skb->cb before handing it off to that function.
    
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit aca51397d01474f80cab8fc978559b45f2e453ad
Author: Pavel Emelyanov <xemul@openvz.org>
Date:   Thu May 8 01:24:25 2008 -0700

    netns: Fix arbitrary net_device-s corruptions on net_ns stop.
    
    When a net namespace is destroyed, some devices (those, not killed
    on ns stop explicitly) are moved back to init_net.
    
    The problem, is that this net_ns change has one point of failure -
    the __dev_alloc_name() may be called if a name collision occurs (and
    this is easy to trigger). This allocator performs a likely-to-fail
    GFP_ATOMIC allocation to find a suitable number. Other possible
    conditions that may cause error (for device being ns local or not
    registered) are always false in this case.
    
    So, when this call fails, the device is unregistered. But this is
    *not* the right thing to do, since after this the device may be
    released (and kfree-ed) improperly. E. g. bridges require more
    actions (sysfs update, timer disarming, etc.), some other devices
    want to remove their private areas from lists, etc.
    
    I. e. arbitrary use-after-free cases may occur.
    
    The proposed fix is the following: since the only reason for the
    dev_change_net_namespace to fail is the name generation, we may
    give it a unique fall-back name w/o %d-s in it - the dev<ifindex>
    one, since ifindexes are still unique.
    
    So make this change, raise the failure-case printk loglevel to
    EMERG and replace the unregister_netdevice call with BUG().
    
    [ Use snprintf() -DaveM ]
    
    Signed-off-by: Pavel Emelyanov <xemul@openvz.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a51830e14529063cb2685921e1177d9af50e49a
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Apr 30 00:52:28 2008 -0700

    md: fix use after free when removing rdev via sysfs
    
    rdev->mddev is no longer valid upon return from entry->store() when the
    'remove' command is given.
    
    Cc: <stable@kernel.org>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Neil Brown <neilb@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4cd1e5eb3cbe6e0cc934959770b4c60eac6ecf66
Author: Roland Dreier <rolandd@cisco.com>
Date:   Wed Apr 16 21:09:34 2008 -0700

    RDMA/nes: Free IRQ before killing tasklet
    
    Move the free_irq() call in nes_remove() to before the tasklet_kill();
    otherwise there is a window after tasklet_kill() where a new interrupt
    can be handled and reschedule the tasklet, leading to a use-after-free
    crash.
    
    Cc: <stable@kernel.org>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 10a4c735515a5afc317abe4d697a4c95f6d9d764
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Sun Mar 16 00:56:41 2008 +0100

    firewire: fix panic in handle_at_packet
    
    This fixes a use-after-free bug in the handling of split transactions.
    The AT DMA handler of the request was occasionally executed after the
    AR DMA handler of the response.  The AT DMA handler then accessed an
    already freed packet.
    
    Reported by Johannes Berg.
    http://bugzilla.kernel.org/show_bug.cgi?id=9617
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Tested-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Jarod Wilson <jwilson@redhat.com>

commit a2e9c384ce76993cd68d6de57eaa81985b4618e3
Author: Faisal Latif <flatif@neteffect.com>
Date:   Thu Feb 21 08:27:32 2008 -0600

    RDMA/nes: Fix use-after-free in mini_cm_dec_refcnt_listen()
    
    Fix use-after-free spotted by Coverity checker flagged by Adrian Bunk.
    
    Signed-off-by: Faisal Latif <flatif@neteffect.com>
    Signed-off-by: Glenn Streiff <gstreiff@neteffect.com>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit f84fba6f969065c6622669bbaa955c26fc1461ae
Author: Glenn Streiff <gstreiff@neteffect.com>
Date:   Thu Feb 21 08:17:54 2008 -0600

    RDMA/nes: Fix use-after-free in nes_create_cq()
    
    Just delete the debugging statement so we don't use cqp_request after
    freeing it.  Adrian Bunk flagged this use-after-free issue spotted by
    the Coverity checker.
    
    Signed-off-by: Glenn Streiff <gstreiff@neteffect.com>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 8de3ef25a1fcd28d270b69417a41b424826d4f89
Author: James Bottomley <James.Bottomley@HansenPartnership.com>
Date:   Sat Feb 23 23:39:59 2008 -0600

    [SCSI] libsas: misc fixes to the eh path
    
    - Correct one use after free of the sas task
    - update the reset required path to move straight to LUN reset
    - make the bigger hammer actually reset something instead of just trying
      to clear all the tasks.
    
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commits)
      [SCSI] qlogicpt: section fixes
      [SCSI] mvsas: convert from rough draft to working driver
      [SCSI] mvsas: Add Marvell 6440 SAS/SATA driver
      [SCSI] libsas: correctly flush the LU queue on error recovery
      [SCSI] aic94xx: fix sequencer hang on error recovery
      [SCSI] st: compile fix when DEBUG set to one
      [SCSI] stex: stex_internal_copy should be called with sg_count in struct st_ccb
      [SCSI] stex: stex_direct_copy shouldn't call dma_map_sg
      [SCSI] lpfc: Balance locking
      [SCSI] qla4xxx: fix up residual handling
      [SCSI] libsas: fix error handling
      [SCSI] arcmsr: fix message allocation
      [SCSI] mptbase: fix use-after-free's
      [SCSI] iscsi transport: make 2 functions static
      [SCSI] lpfc: make lpfc_disable_node() static
      [SCSI] ips: fix data buffer accessors conversion bug
      [SCSI] gdth: don't call pci_free_consistent under spinlock
      [SCSI] qla2xxx: fix compile warning for printk format
      [SCSI] aic7xx: mitigate HOST_MSG_LOOP invalid SCB ff panic
      [SCSI] scsi_debug: disable clustering
      ...

commit ad008d42bcec99911b3270a8349f8ec8405a1c4e
Author: Adrian Bunk <bunk@kernel.org>
Date:   Tue Feb 19 20:03:57 2008 -0600

    [SCSI] mptbase: fix use-after-free's
    
    ioc->name is used in the printk's after ioc has been freed.  Free
    after prinks to fix this.
    
    This patch fixes two use-after-free's introduced by
    commit e78d5b8f1e73ab82f3fd041d05824cfee7d83a2c and spotted by the
    Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit 651be3a2ba95bc30fcb737985741736e63231cdf
Author: Adrian Bunk <bunk@kernel.org>
Date:   Sat Feb 2 23:15:02 2008 +0200

    net/phy/fixed.c: fix a use-after-free
    
    This patch fixes a use-after-free introduced by
    commit a79d8e93d300adb84cccc38ac396cfb118c238ad and spotted by the
    Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

commit 177a99b23ef9878c0cedcc7273108eba8a6e9472
Author: NeilBrown <neilb@suse.de>
Date:   Wed Feb 6 01:39:56 2008 -0800

    md: fix use-after-free bug when dropping an rdev from an md array
    
    Due to possible deadlock issues we need to use a schedule work to kobject_del
    an 'rdev' object from a different thread.
    
    A recent change means that kobject_add no longer gets a refernce, and
    kobject_del doesn't put a reference.  Consequently, we need to explicitly hold
    a reference to ensure that the last reference isn't dropped before the
    scheduled work get a chance to call kobject_del.
    
    Also, rename delayed_delete to md_delayed_delete to that it is more obvious in
    a stack trace which code is to blame.
    
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Signed-off-by: Neil Brown <neilb@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      dlm: static initialization improvements
      dlm: clean ups
      dlm: Sanity check namelen before copying it
      dlm: keep cached master rsbs during recovery
      dlm: change error message to debug
      dlm: fix possible use-after-free
      dlm: limit dir lookup loop
      dlm: reject normal unlock when lock is waiting for lookup
      dlm: validate messages before processing
      dlm: reject messages from non-members
      dlm: another call to confirm_master in receive_request_reply
      dlm: recover locks waiting for overlap replies
      dlm: clear ast_type when removing from astqueue
      dlm: use fixed errno values in messages
      dlm: swap bytes for rcom lock reply
      dlm: align midcomms message buffer
      dlm: close othercons
      dlm: use dlm prefix on alloc and free functions
      dlm: don't print common non-errors
      dlm: proper prototypes
      ...

commit ce5246b972f7514af899a63c0faf831d05ed5ee1
Author: David Teigland <teigland@redhat.com>
Date:   Mon Jan 14 15:48:58 2008 -0600

    dlm: fix possible use-after-free
    
    The dlm_put_lkb() can free the lkb and its associated ua structure,
    so we can't depend on using the ua struct after the put.
    
    Signed-off-by: David Teigland <teigland@redhat.com>

commit 222b01b7fef6e7ebea9e76ce08a783571569797b
Author: Stefano Brivio <stefano.brivio@polimi.it>
Date:   Sun Jan 13 18:35:52 2008 +0100

    b43legacy: fix use-after-free rfkill bug
    
    Fix rfkill code which caused a use-after-free bug. Thanks to David
    Woodhouse for spotting this out.
    
    Cc: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: Stefano Brivio <stefano.brivio@polimi.it>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit af30151709bcace1ca844d4bb8b7e2e392ff81eb
Author: Patrick McHardy <kaber@trash.net>
Date:   Mon Jan 21 00:25:50 2008 -0800

    [VLAN]: Simplify vlan unregistration
    
    Keep track of the number of VLAN devices in a vlan group. This allows
    to have the caller sense when the group is going to be destroyed and
    stop using it, which in turn allows to remove the wrapper around
    unregister_vlan_dev for the NETDEV_UNREGISTER notifier and avoid
    iterating over all possible VLAN ids whenever a device in unregistered.
    
    Also fix what looks like a use-after-free (but is actually safe since
    we're holding the RTNL), the real_dev reference should not be dropped
    while we still use it.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b6b8abe4ddec2cfb3471ea60f965a137cd4d529d
Author: Holger Schurig <hs4233@mail.mn-solutions.de>
Date:   Mon Dec 10 12:19:55 2007 +0100

    libertas: fix use-after-free error
    
    Previously, the display of subscribed events could be wrong.
    
    Signed-off-by: Holger Schurig <hs4233@mail.mn-solutions.de>
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 68365458a4252fa993b91a00f7a0b18fed399f0d
Author: Patrick McHardy <kaber@trash.net>
Date:   Sun Jan 20 17:25:14 2008 -0800

    [NET]: rtnl_link: fix use-after-free
    
    When unregistering the rtnl_link_ops, all existing devices using
    the ops are destroyed. With nested devices this may lead to a
    use-after-free despite the use of for_each_netdev_safe() in case
    the upper device is next in the device list and is destroyed
    by the NETDEV_UNREGISTER notifier.
    
    The easy fix is to restart scanning the device list after removing
    a device. Alternatively we could add new devices to the front of
    the list to avoid having dependant devices follow the device they
    depend on. A third option would be to only restart scanning if
    dev->iflink of the next device matches dev->ifindex of the current
    one. For now this seems like the safest solution.
    
    With this patch, the veth rtnl_link_ops unregistration can use
    rtnl_link_unregister() directly since it now also handles destruction
    of multiple devices at once.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a38db5b6219d88e2b48f07472c436b19b864f93c
Author: Stefano Brivio <stefano.brivio@polimi.it>
Date:   Sun Jan 13 18:30:14 2008 +0100

    b43: fix use-after-free rfkill bug
    
    Fix rfkill code which caused a use-after-free bug.
    
    Signed-off-by: Stefano Brivio <stefano.brivio@polimi.it>
    Acked-by: Michael Buesch <mb@bu3sch.de>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d1ad09db2fd551d49d65ef040591cb9298e70fb6
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Thu Dec 20 12:30:22 2007 +0100

    [SCSI] zfcp: fix use after free bug.
    
    zfcp_erp_strategy_check_fsfreq() checks if it is safe to access the
    fsf_req associated with the erp_action that gets passed. To test if
    it is safe it accesses the fsf_req in order to get its index into
    the hash list. This is broken since the fsf_req might be freed already
    and the read index has no meaning. It could lead to memory corruption.
    Fix this by introducing a new zfcp_reqlist_find_safe() method which
    just checks if addresses are equal. This is slower, but only gets
    called in case of error recovery.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
    Signed-off-by: Christof Schmitt <christof.schmitt@de.ibm.com>
    Signed-off-by: Martin Peschke <mp3@de.ibm.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit 98c9ea5c026ee47efe2a0f595078dbf199d08f50
Author: James Smart <James.Smart@Emulex.Com>
Date:   Sat Oct 27 13:37:33 2007 -0400

    [SCSI] lpfc 8.2.3 : Miscellaneous Small Fixes - part 1
    
    Miscellaneous Small Fixes - part 1
    - Fix typo kmzlloc -> kzalloc
    - Fix discovery ndlp use after free panic
    - Fix link event causing flood of 0108 messages
    - Relieve some mbox congestion on link up with 100 vports
    - Fix broken vport parameters
    - Prevent lock recursion in logo_reglogin_issue
    - Split uses of error variable in lpfc_pci_probe_one into retval and error
    - Remove completion code related to dev_loss_tmo
    - Remove unused LPFC_MAX_HBQ #define
    - Don't compare pointers to 0 for sparse
    - Make 2 functions static for sparse
    - Fix default rpi cleanup code causing rogue ndlps to remain on the NPR list
    - Remove annoying ELS messages when driver is unloaded
    - Fix Cannot issue Register Fabric login problems on link up
    - Remove LPFC_EVT_DEV_LOSS_DELAY
    - Fix FC port swap test leads to device going offline
    - Fix vport CT flags to only be set when accepted
    - Add code to handle signals during vport_create
    - Fix too many retries in FC-AL mode
    - Pull lpfc_port_link_failure out of lpfc_linkdown_port
    
    Signed-off-by: James Smart <James.Smart@emulex.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit ba21611c9c0031ca8388cae5e43b38c29c8b595d
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Fri Jan 11 14:27:10 2008 +0100

    ps3fb: prevent use after free of fb_info
    
    In ps3fb_shutdown, freeing the framebuffer will cause fb_info (in
    dev->core.driver_data) to be free()ed, which we potentially access
    from the ps3fbd kthread.
    
    This change frees the framebuffer after stopping the ps3fbd kthread.
    
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: Geert Uytterhoeven <Geert.Uytterhoeven@sonycom.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5a622f2d0f86b316b07b55a4866ecb5518dd1cf7
Author: Alexey Dobriyan <adobriyan@sw.ru>
Date:   Tue Dec 4 23:45:28 2007 -0800

    proc: fix proc_dir_entry refcounting
    
    Creating PDEs with refcount 0 and "deleted" flag has problems (see below).
    Switch to usual scheme:
    * PDE is created with refcount 1
    * every de_get does +1
    * every de_put() and remove_proc_entry() do -1
    * once refcount reaches 0, PDE is freed.
    
    This elegantly fixes at least two following races (both observed) without
    introducing new locks, without abusing old locks, without spreading
    lock_kernel():
    
    1) PDE leak
    
    remove_proc_entry                       de_put
    -----------------                       ------
                            [refcnt = 1]
    if (atomic_read(&de->count) == 0)
                                            if (atomic_dec_and_test(&de->count))
                                                    if (de->deleted)
                                                            /* also not taken! */
                                                            free_proc_entry(de);
    else
            de->deleted = 1;
                    [refcount=0, deleted=1]
    
    2) use after free
    
    remove_proc_entry                       de_put
    -----------------                       ------
                            [refcnt = 1]
    
                                            if (atomic_dec_and_test(&de->count))
    if (atomic_read(&de->count) == 0)
            free_proc_entry(de);
                                                    /* boom! */
                                                    if (de->deleted)
                                                            free_proc_entry(de);
    
    BUG: unable to handle kernel paging request at virtual address 6b6b6b6b
    printing eip: c10acdda *pdpt = 00000000338f8001 *pde = 0000000000000000
    Oops: 0000 [#1] PREEMPT SMP
    Modules linked in: af_packet ipv6 cpufreq_ondemand loop serio_raw psmouse k8temp hwmon sr_mod cdrom
    Pid: 23161, comm: cat Not tainted (2.6.24-rc2-8c0863403f109a43d7000b4646da4818220d501f #4)
    EIP: 0060:[<c10acdda>] EFLAGS: 00210097 CPU: 1
    EIP is at strnlen+0x6/0x18
    EAX: 6b6b6b6b EBX: 6b6b6b6b ECX: 6b6b6b6b EDX: fffffffe
    ESI: c128fa3b EDI: f380bf34 EBP: ffffffff ESP: f380be44
     DS: 007b ES: 007b FS: 00d8 GS: 0033 SS: 0068
    Process cat (pid: 23161, ti=f380b000 task=f38f2570 task.ti=f380b000)
    Stack: c10ac4f0 00000278 c12ce000 f43cd2a8 00000163 00000000 7da86067 00000400
           c128fa20 00896b18 f38325a8 c128fe20 ffffffff 00000000 c11f291e 00000400
           f75be300 c128fa20 f769c9a0 c10ac779 f380bf34 f7bfee70 c1018e6b f380bf34
    Call Trace:
     [<c10ac4f0>] vsnprintf+0x2ad/0x49b
     [<c10ac779>] vscnprintf+0x14/0x1f
     [<c1018e6b>] vprintk+0xc5/0x2f9
     [<c10379f1>] handle_fasteoi_irq+0x0/0xab
     [<c1004f44>] do_IRQ+0x9f/0xb7
     [<c117db3b>] preempt_schedule_irq+0x3f/0x5b
     [<c100264e>] need_resched+0x1f/0x21
     [<c10190ba>] printk+0x1b/0x1f
     [<c107c8ad>] de_put+0x3d/0x50
     [<c107c8f8>] proc_delete_inode+0x38/0x41
     [<c107c8c0>] proc_delete_inode+0x0/0x41
     [<c1066298>] generic_delete_inode+0x5e/0xc6
     [<c1065aa9>] iput+0x60/0x62
     [<c1063c8e>] d_kill+0x2d/0x46
     [<c1063fa9>] dput+0xdc/0xe4
     [<c10571a1>] __fput+0xb0/0xcd
     [<c1054e49>] filp_close+0x48/0x4f
     [<c1055ee9>] sys_close+0x67/0xa5
     [<c10026b6>] sysenter_past_esp+0x5f/0x85
    =======================
    Code: c9 74 0c f2 ae 74 05 bf 01 00 00 00 4f 89 fa 5f 89 d0 c3 85 c9 57 89 c7 89 d0 74 05 f2 ae 75 01 4f 89 f8 5f c3 89 c1 89 c8 eb 06 <80> 38 00 74 07 40 4a 83 fa ff 75 f4 29 c8 c3 90 90 90 57 83 c9
    EIP: [<c10acdda>] strnlen+0x6/0x18 SS:ESP 0068:f380be44
    
    Also, remove broken usage of ->deleted from reiserfs: if sget() succeeds,
    module is already pinned and remove_proc_entry() can't happen => nobody
    can mark PDE deleted.
    
    Dummy proc root in netns code is not marked with refcount 1. AFAICS, we
    never get it, it's just for proper /proc/net removal. I double checked
    CLONE_NETNS continues to work.
    
    Patch survives many hours of modprobe/rmmod/cat loops without new bugs
    which can be attributed to refcounting.
    
    Signed-off-by: Alexey Dobriyan <adobriyan@sw.ru>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d5cd97872dca9b79c31224ca014bcea7ca01f5f1
Author: Adrian Bunk <bunk@kernel.org>
Date:   Wed Nov 14 17:00:00 2007 -0800

    sunrpc/xprtrdma/transport.c: fix use-after-free
    
    Fix an obvious use-after-free spotted by the Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Cc: Trond Myklebust <trond.myklebust@fys.uio.no>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Neil Brown <neilb@suse.de>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 348badf1e825323c419dd118f65783db0f7d2ec8
Author: Haavard Skinnemoen <hskinnemoen@atmel.com>
Date:   Wed Nov 14 16:59:27 2007 -0800

    dmaengine: fix broken device refcounting
    
    When a DMA device is unregistered, its reference count is decremented twice
    for each channel: Once dma_class_dev_release() and once in
    dma_chan_cleanup().  This may result in the DMA device driver's remove()
    function completing before all channels have been cleaned up, causing lots
    of use-after-free fun.
    
    Fix it by incrementing the device's reference count twice for each
    channel during registration.
    
    [dan.j.williams@intel.com: kill unnecessary client refcounting]
    Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Shannon Nelson <shannon.nelson@intel.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8cbdeec637c1ce87bf329c5c19a9964e36bdf9fb
Author: Jay Vosburgh <fubar@us.ibm.com>
Date:   Tue Nov 13 21:16:29 2007 -0800

    [BONDING]: Fix resource use after free
    
    Fix bond_destroy and bond_free_all to not reference the struct
    net_device after calling unregister_netdevice.
    
    Bug and offending change reported by Moni Shoua <monis@voltaire.com>
    
    Signed-off-by: Jay Vosburgh <fubar@us.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      cpuidle: remove unused exports
      acpi: remove double mention of Support for ACPI option
      ACPI: use select POWER_SUPPLY for AC, BATTERY and SBS
      ACPI: Battery: Allow extract string from integer
      ACPI: battery: Support for non-spec name for LiIon technology
      ACPI: battery: register power_supply subdevice only when battery is present
      suspend: MAINTAINERS update
      ACPI: update MAINTAINERS
      fujitsu-laptop.c: remove dead code
      cpuidle: unexport tick_nohz_get_sleep_length
      ACPI: battery: Update battery information upon sysfs read.
      fujitsu-laptop: make 2 functions static
      ACPI: EC: fix use-after-free
      ACPI: battery: remove dead code
      ACPI: Fan: Drop force_power_state acpi_device option
      ACPI: Fan: fan device does not need own structure
      ACPI: power: don't cache power resource state
      ACPI: EC: Output changes to operational mode
      ACPI: EC: Add workaround for "optimized" controllers
      ACPI: EC: Don't re-enable GPE for each transaction.
      ...

commit 1544fdbc857cbe8afca16a521d3254346befeb06
Author: Adrian Bunk <bunk@kernel.org>
Date:   Wed Oct 24 18:26:00 2007 +0200

    ACPI: EC: fix use-after-free
    
    This patch fixes a use-after-free introduced by
    commit 30c08574da0ead1a47797ce028218ce5b2de61c7
    (ACPI: EC: Add new query handler to list head)
    
    Spotted by the Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@kernel.org>
    Acked-by: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit d5d1ceac2a47645780bd07fd7a670b14c4d995db
Author: Oliver Neukum <oliver@neukum.org>
Date:   Thu Oct 25 16:05:53 2007 +0200

    USB: open disconnect race in usblcd
    
    this driver has a possible use after free due to a race when disconnect
    and open handle intfdata without a lock.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 78663ecc344b4694dd737deb682e81312a0684b6
Author: Oliver Neukum <oliver@neukum.org>
Date:   Thu Oct 25 15:48:39 2007 +0200

    USB: disconnect open race in legousbtower
    
    again, possible use after free due to touching intfdata without lock.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit bdc3e603cda3433c2ccc2069d28f7f3cd319cfc6
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Mon Oct 15 10:24:05 2007 +1000

    fix use after free in amd create gatt pages
    
    Coverity spotted a "use after free" bug in
    drivers/char/agp/amd-k7-agp.c::amd_create_gatt_pages().
    
    The problem is this:
            If "entry = kzalloc(sizeof(struct amd_page_map), GFP_KERNEL);"
    fails, then there's a loop in the function to free all entries
    allocated so far and break out of the allocation loop. That in itself
    is pretty sane, but then the (now freed) 'tables' is assigned to
    amd_irongate_private.gatt_pages and 'retval' is set to -ENOMEM which
    causes amd_free_gatt_pages(); to be called at the end of the function.
    The problem with this is that amd_free_gatt_pages() will then loop
    'amd_irongate_private.num_tables' times and try to free each entry in
    tables[] - this is bad since tables has already been freed and
    furthermore it will call kfree(tables) at the end - a double free.
    
    This patch removes the freeing loop in amd_create_gatt_pages() and
    instead relies entirely on the call to amd_free_gatt_pages() to free
    everything we allocated in case of an error. It also sets
    amd_irongate_private.num_tables to the actual number of entries
    allocated instead of just using the value passed in from the caller -
    this ensures that amd_free_gatt_pages() will only attempt to free
    stuff that was actually allocated.
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 1a3cac6c6d1f56dc26939eb41be29844f897c15a
Author: Eric Van Hensbergen <ericvh@ericvh-desktop.austin.ibm.com>
Date:   Thu Jul 26 14:04:54 2007 -0500

    9p: fix use after free
    
    On 7/22/07, Adrian Bunk <bunk@stusta.de> wrote:
         The Coverity checker spotted the following use-after-free
         in net/9p/mux.c:
    
         <--  snip  -->
    
         ...
         struct p9_conn *p9_conn_create(struct p9_transport *trans, int msize,
                                             unsigned char *extended)
         {
         ...
                 if (!m->tagpool) {
                         kfree(m);
                         return ERR_PTR(PTR_ERR(m->tagpool));
                 }
         ...
    
         <--  snip  -->
    
    Also spotted was a leak of the same structure further down in the function.
    
    Signed-off-by: Eric Van Hensbergen <ericvh@gmail.com>

commits)
      ACPI: thermal: add DMI hooks to handle AOpen's broken Award BIOS
      ACPI: thermal: create "thermal.act=" to disable or override active trip point
      ACPI: thermal: create "thermal.nocrt" to disable critical actions
      ACPI: thermal: create "thermal.psv=" to override passive trip points
      ACPI: thermal: expose "thermal.tzp=" to set global polling frequency
      ACPI: thermal: create "thermal.off=1" to disable ACPI thermal support
      ACPI: thinkpad-acpi: fix sysfs paths in documentation
      ACPI: static
      ACPI EC: remove potential deadlock from EC
      ACPI: dock: Send key=value pair instead of plain value
      ACPI: bay: send envp with uevent - fix
      acpi-cpufreq: Fix some x86/x86-64 acpi-cpufreq driver issues
      ACPI: fix "Time Problems with 2.6.23-rc1-gf695baf2"
      ACPI: thinkpad-acpi: change thinkpad-acpi input default and kconfig help
      ACPI: EC: fix run-together printk lines
      ACPI: sbs: remove dead code
      ACPI: EC: acpi_ec_remove(): fix use-after-free
      ACPI: EC: Switch from boot_ec as soon as we find its desc in DSDT.
      ACPI: EC: fix build warning
      ACPI: EC: If ECDT is not found, look up EC in DSDT.
      ...

commit 07ddf768d860bee7bd6581b7af3ce1009dbd05d0
Author: Adrian Bunk <bunk@stusta.de>
Date:   Sun Jul 29 17:00:37 2007 +0200

    ACPI: EC: acpi_ec_remove(): fix use-after-free
    
    This patch fixes an obvious use-after-free introduced by
    commit 837012ede14a8fc088be3682c964da7fc6af026b.
    
    Spotted by the Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Acked-by: Alexey Starikovskiy <astarikovskiy@suse.de>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 51ef4c26891a734bc8416b639ad460a8162926bc
Author: James Smart <James.Smart@Emulex.Com>
Date:   Thu Aug 2 11:10:31 2007 -0400

    [SCSI] lpfc 8.2.2 : Miscellaneous Bug Fixes
    
    - Fix vport ndlp ref counting errors
    - Fix use after free of ndlp structure
    - Use the correct flag to check for LOADING setting.
    - Fix driver unload bugs (related to shost references) after link down or rscn
    - Fix up HBQ initialization
    - Fix port_list locking around driver unload.
    - Fix references to hostdata as a phba
    - Fix GFFID type offset to work correctly with big endian structure.
    - Only call pci_disable_msi if the pci_enable_msi succeeded
    - Fix vport_delete wait/fail if in discovery
    - Put a reference on the nameservers ndlp when performing CT traffic.
    - Remove unbalanced hba unlock.
    - Fix up HBQ processing
    - Fix lpfc debugfs discovery trace output for ELS rsp cmpl
    - Send ADISC when rpi is 0
    - Stop FDISC retrying forever
    - Unable to retrieve correct config parameter for vport
    - Fix sli_validate_fcp_iocb, sli_sum_iocb, sli_abort_iocb to be vport-aware.
    - Fix index-out-of-range error in iocb. Spotted by Coverity.
    
    Signed-off-by: James Smart <James.Smart@emulex.com>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

commit c9b3febc5b9c55a76b838c977b078195ec8bb95e
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Tue Jul 31 00:39:18 2007 -0700

    Fix a use after free bug in kernel->userspace relay file support
    
    Coverity spotted what looks like a real possible case of using a variable
    after it has been freed.  The problem is in
    kernel/relay.c::relay_open_buf()
    
    If the code hits "goto free_buf;" it ends up in this code :
    
      free_buf:
            relay_destroy_buf(buf); <--- calls kfree() on 'buf'.
      free_name:
            kfree(tmpname);
      end:
            return buf;             <-- use after free of 'buf'.
    
    I read through the callers and they all handle a NULL return from this
    function as an error (and hitting the 'free_buf' label only happens on
    failure to chan->cb->create_buf_file(), so that looks like a clear error to
    me).
    
    The patch simply sets 'buf' to NULL after the call to
    relay_destroy_buf(buf); - as far as I can see that should take care of the
    problem.
    
    The patch also corrects a reference to a documentation file while
    I was at it.
    
    Note from Mathieu: the documentation reference change should have been
    done in a separate patch, but I guess no one will really care.
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Acked-by: "David J. Wilder" <wilder@us.ibm.com>
    Tested-by: "David J. Wilder" <wilder@us.ibm.com>
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
    Cc: Tom Zanussi <zanussi@us.ibm.com>
    Cc: Karim Yaghmour <karim@opersys.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 14e713446aaca97dbe590fe845f7dcbd74ddbee2
Author: Maik Hampel <m.hampel@gmx.de>
Date:   Tue Jul 31 00:37:57 2007 -0700

    md: raid10: fix use-after-free of bio
    
    In case of read errors raid10d tries to print a nice error message,
    unfortunately using data from an already put bio.
    
    Signed-off-by: Maik Hampel <m.hampel@gmx.de>
    Acked-By: NeilBrown <neilb@suse.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 09c7d8293a2d1317d16ef4ddb9f6dd2553d0694e
Author: Marcel Holtmann <marcel@holtmann.org>
Date:   Thu Jul 26 00:12:25 2007 -0700

    [IRDA]: Fix rfcomm use-after-free
    
    Adrian Bunk wrote:
    > Commit 8de0a15483b357d0f0b821330ec84d1660cadc4e added the following
    > use-after-free in net/bluetooth/rfcomm/tty.c:
    >
    > <--  snip  -->
    >
    > ...
    > static int rfcomm_dev_add(struct rfcomm_dev_req *req, struct rfcomm_dlc *dlc)
    > {
    > ...
    >         if (IS_ERR(dev->tty_dev)) {
    >                 list_del(&dev->list);
    >                 kfree(dev);
    >                 return PTR_ERR(dev->tty_dev);
    >         }
    > ...
    >
    > <--  snip  -->
    >
    > Spotted by the Coverity checker.
    
    really good catch. I fully overlooked that one. The attached patch
    should fix it.
    
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 190644e180794208bc638179f4d5940fe419bf9c
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Sat Jul 21 17:39:11 2007 +0200

    Fix "use after free" / "double free" bug in ati_create_gatt_pages / ati_free_gatt_pages
    
    Hi,
    
    Coverity spotted a "use after free" bug in
    drivers/char/agp/ati-agp.c::ati_create_gatt_pages().
    
    The same one that was in
      drivers/char/agp/amd-k7-agp.c::amd_create_gatt_pages()
    
    The problem is this:
           If "entry = kzalloc(sizeof(struct ati_page_map), GFP_KERNEL);"
    fails, then there's a loop in the function to free all entries
    allocated so far and break out of the allocation loop. That in itself
    is pretty sane, but then the (now freed) 'tables' is assigned to
    ati_generic_private.gatt_pages and 'retval' is set to -ENOMEM which
    causes ati_free_gatt_pages(); to be called at the end of the function.
    The problem with this is that ati_free_gatt_pages() will then loop
    'ati_generic_private.num_tables' times and try to free each entry in
    tables[] - this is bad since tables has already been freed and
    furthermore it will call kfree(tables) at the end - a double free.
    
    This patch removes the freeing loop in ati_create_gatt_pages() and
    instead relies entirely on the call to ati_free_gatt_pages() to free
    everything we allocated in case of an error. It also sets
    ati_generic_private.num_tables to the actual number of entries
    allocated instead of just using the value passed in from the caller -
    this ensures that ati_free_gatt_pages() will only attempt to free
    stuff that was actually allocated.
    
    Note: I'm in no way intimate with this code and I have no way to
    actually test this patch (besides compile test it), so while I've
    tried to be careful in reading the code and make sure the patch
    does the right thing an ACK from someone who actually knows the
    code in-depth would be very much appreciated.
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit 98ac0e53facc851f8bc5110039ab05005c0c4736
Author: Adrian Bunk <bunk@stusta.de>
Date:   Thu Jul 26 10:41:10 2007 -0700

    xenbus_xs.c: fix a use-after-free
    
    This patch fixes an obvious use-after-free spotted by the Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Acked-by: Jeremy Fitzhardinge <jeremy@goop.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commits)
      [NETFILTER]: xt_connlimit needs to depend on nf_conntrack
      [NETFILTER]: ipt_iprange.h must #include <linux/types.h>
      [IrDA]: Fix IrDA build failure
      [ATM]: nicstar needs virt_to_bus
      [NET]: move __dev_addr_discard adjacent to dev_addr_discard for readability
      [NET]: merge dev_unicast_discard and dev_mc_discard into one
      [NET]: move dev_mc_discard from dev_mcast.c to dev.c
      [NETLINK]: negative groups in netlink_setsockopt
      [PPPOL2TP]: Reset meta-data in xmit function
      [PPPOL2TP]: Fix use-after-free
      [PKT_SCHED]: Some typo fixes in net/sched/Kconfig
      [XFRM]: Fix crash introduced by struct dst_entry reordering
      [TCP]: remove unused argument to cong_avoid op
      [ATM]: [idt77252] Rename CONFIG_ATM_IDT77252_SEND_IDLE to not resemble a Kconfig variable
      [ATM]: [drivers] ioremap balanced with iounmap
      [ATM]: [lanai] sram_test_word() must be __devinit
      [ATM]: [nicstar] Replace C code with call to ARRAY_SIZE() macro.
      [ATM]: Eliminate dead config variable CONFIG_BR2684_FAST_TRANS.
      [ATM]: Replacing kmalloc/memset combination with kzalloc.
      [NET]: gen_estimator deadlock fix
      ...

commit 7d4372b5ae2f891e8bfa96c98d450255f58b4dc1
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Jul 18 02:04:09 2007 -0700

    [PPPOL2TP]: Fix use-after-free
    
    Don't use skb->len after passing it to ip_queue_xmit.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3db296f341b5902c4f9317022ae5d4da2d59d598
Author: David Chinner <dgc@sgi.com>
Date:   Mon May 14 18:24:16 2007 +1000

    [XFS] Fix use-after-free during log unmount.
    
    Don't reference the log buffer after running the callbacks as the callback
    can trigger the log buffers to be freed during unmount.
    
    SGI-PV: 964545
    SGI-Modid: xfs-linux-melb:xfs-kern:28567a
    
    Signed-off-by: David Chinner <dgc@sgi.com>
    Signed-off-by: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Tim Shimmin <tes@sgi.com>

commit 52f6b5e1f15fa8c06efa69a4b5faa69c04707c92
Author: Benny Halevy <bhalevy@panasas.com>
Date:   Tue May 15 11:15:27 2007 +0300

    synchronization in usb_serial_put
    
    I think there is a race between usb_serial_put() and
    usb_serial_get_by_index() (and get_free_serial()) with regards
    to handling the serial port refcount.
    
    usb_serial_get_by_index() gets a reference on the serial port under
    table_lock while return_serial releases all the returned ports
    from the table under the same lock.  However, the table_lock is not
    taken around the call to kref_put, theoretically allowing to sneak
    in and grab a reference after kref_put has already determined that
    the reference count is zero (and before calling destroy_serial)
    causing use after free.
    
    Signed-off-by: Benny Halevy <bhalevy@ns1.bhalevy.com>
    Cc: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d4ead16f50f9ad30bdc7276ec8fee7a24c72f294
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue May 22 11:46:41 2007 -0400

    USB: prevent char device open/deregister race
    
    This patch (as908) adds central protection in usbcore for the
    prototypical race between opening and unregistering a char device.
    The spinlock used to protect the minor-numbers array is replaced with
    an rwsem, which can remain locked across a call to a driver's open()
    method.  This guarantees that open() and deregister() will be mutually
    exclusive.
    
    The private locks currently used in several individual drivers for
    this purpose are no longer necessary, and the patch removes them.  The
    following USB drivers are affected: usblcd, idmouse, auerswald,
    legousbtower, sisusbvga/sisusb, ldusb, adutux, iowarrior, and
    usb-skeleton.
    
    As a side effect of this change, usb_deregister_dev() must not be
    called while holding a lock that is acquired by open().  Unfortunately
    a number of drivers do this, but luckily the solution is simple: call
    usb_deregister_dev() before acquiring the lock.
    
    In addition to these changes (and their consequent code
    simplifications), the patch fixes a use-after-free bug in adutux and a
    race between open() and release() in iowarrior.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d082b9b5c6edf2e1d241af4630f12f0e5e2d2377
Author: Holger Schurig <hs4233@mail.mn-solutions.de>
Date:   Mon Jul 2 10:50:32 2007 +0200

    [PATCH] libertas: fix use-after-free in rx path
    
    ... by removing an ill-conceived, useless line.  Discovered by coverity.
    
    Signed-off-by: Holger Schurig <hs4233@mail.mn-solutions.de>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit a0a24741cac414aba5918e9939afafa70c37f952
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Mon Jul 9 15:43:07 2007 +0100

    [GFS2] Small fixes to logging code
    
    This reverts part of an earlier patch which tried to reclaim
    gfs2_bufdata structures too early and resulted in a "use after free"
    case (this bit from me). Also a change to not write out log headers
    unless we really need to (in the case of flushing nothing we don't need
    a header) from Bob.
    
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>

commit 1c39858b5dd46004b12c5acd26d8df346bef8a10
Author: David Woodhouse <dwmw2@infradead.org>
Date:   Sat Jul 7 14:58:39 2007 -0400

    Fix use-after-free oops in Bluetooth HID.
    
    When cleaning up HIDP sessions, we currently close the ACL connection
    before deregistering the input device. Closing the ACL connection
    schedules a workqueue to remove the associated objects from sysfs, but
    the input device still refers to them -- and if the workqueue happens to
    run before the input device removal, the kernel will oops when trying to
    look up PHYSDEVPATH for the removed input device.
    
    Fix this by deregistering the input device before closing the
    connections.
    
    Signed-off-by: David Woodhouse <dwmw2@infradead.org>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 74ac07e8b8209ba9429fa1a9afc07aa5ecef5af8
Author: Oliver Neukum <oneukum@suse.de>
Date:   Wed Jun 13 18:50:41 2007 +0200

    USB: fix race leading to use after free in io_edgeport
    
    usb_unlink_urb() is asynchronous, therefore an URB's buffer may not
    be freed without waiting for the completion handler. This patch switches
    to usb_kill_urb(), which is synchronous.
    Thanks to Alan for making me look at the remaining users of usb_unlink_urb()
    
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Al Borchers <alborchers@steinerpoint.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 3201e656ce56ed02e9501906c18ffe16ae350a52
Author: Jay Vosburgh <fubar@us.ibm.com>
Date:   Tue Jun 19 11:12:12 2007 -0700

    bonding: Fix use after free in unregister path
    
            The following patch (based on a patch from Stephen Hemminger
    <shemminger@linux-foundation.org>) removes use after free conditions in
    the unregister path for the bonding master.  Without this patch, an
    operation of the form "echo -bond0 > /sys/class/net/bonding_masters"
    would trigger a NULL pointer dereference in sysfs.  I was not able to
    induce the failure with the non-sysfs code path, but for consistency I
    updated that code as well.
    
            I also did some testing of the bonding /proc file being open
    while the bond is being deleted, and didn't see any problems there.
    
    Signed-off-by: Jay Vosburgh <fubar@us.ibm.com>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

commit 412e8a0ebf1a58c060cc76438e5b6d33789c5e20
Author: Eugene Teo <eugeneteo@kernel.sg>
Date:   Mon May 21 22:30:22 2007 +0800

    [PATCH] drivers/net/wireless/libertas/rx.c: fix use-after-free
    
    skb could have been freed by then. Also, in libertas_upload_rx_packet(),
    skb->protocol is initialized by eth_type_trans().
    
    Signed-off-by: Eugene Teo <eugeneteo@kernel.sg>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 5397e97d7533a03b28a7b8aeee648cbb36a8afc6
Author: Patrick McHardy <kaber@trash.net>
Date:   Sat May 19 14:23:52 2007 -0700

    [NETFILTER]: nf_conntrack: fix use-after-free in helper destroy callback invocation
    
    When the helper module is removed for a master connection that has a
    fulfilled expectation, but has already timed out and got removed from
    the hash tables, nf_conntrack_helper_unregister can't find the master
    connection to unset the helper, causing a use-after-free when the
    expected connection is destroyed and releases the last reference to
    the master.
    
    The helper destroy callback was introduced for the PPtP helper to clean
    up expectations and expected connections when the master connection
    times out, but doing this from destroy_conntrack only works for
    unfulfilled expectations since expected connections hold a reference
    to the master, preventing its destruction. Move the destroy callback to
    the timeout function, which fixes both problems.
    
    Reported/tested by Gabor Burjan <buga@buvoshetes.hu>.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit de57c9f102ad7bdc8afa5a1560748cf4f1c18b8e
Author: Ali Ayoub <ali@mellanox.co.il>
Date:   Thu May 17 20:58:30 2007 +0300

    IB/mthca: Fix use-after-free on device restart
    
    Signed-off-by: Michael S. Tsirkin <mst@dev.mellanox.co.il>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit bd18c112774db5bb887adb981ffbe9bfe00b2f3a
Author: Michael S. Tsirkin <mst@dev.mellanox.co.il>
Date:   Mon May 14 17:14:50 2007 +0300

    IB/mthca: Set cleaned CQEs back to HW ownership when cleaning CQ
    
    mthca_cq_clean() updates the CQ consumer index without moving CQEs
    back to HW ownership.  As a result, the same WRID might get reported
    twice, resulting in a use-after-free.  This was observed in IPoIB CM.
    Fix by moving all freed CQEs to HW ownership.
    
    This fixes <https://bugs.openfabrics.org/show_bug.cgi?id=617>
    
    Signed-off-by: Michael S. Tsirkin <mst@dev.mellanox.co.il>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 1605b8471d64c855bc2493abf3adf6a1ebc3e645
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed May 9 13:04:39 2007 +1000

    [CRYPTO] cryptomgr: Fix use after free
    
    By the time kthread_run returns the param may have already been freed
    so writing the returned thread_struct pointer to param is wrong.
    
    In fact, we don't need it in param anyway so this patch simply puts it
    on the stack.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 1dcb58e5680b6673bf984696d3d8b9033b6e41bf
Author: James Smart <James.Smart@Emulex.Com>
Date:   Wed Apr 25 09:51:30 2007 -0400

    [SCSI] lpfc 8.1.12 : Misc bug fixes and code cleanup
    
    Misc bug fixes and code cleanup:
     - Fix system hang while running on systems with IOMMU
     - Fix use after free issues with rports
     - Don't free mailbox structure if it's still on the mboxq list
     - Decrement txq_cnt rather than txcmplq_cnt when parsing the txq list
     - Use msleep for long delays to prevent soft lockup bug check
     - Don't remove node during dev_loss_tmo if discovery is active
     - Fix memory leaks in get/reset statistics and link attention paths
     - Fixed lpfc_ns_rsp to handle entire GID_FT response.
     - mbox interface should use MAILBOX_CMD_SIZE rather than sizeof(MAILBOX_t)
     - Fixed bug check in add_timer.
     - Fixup messages 0116, 0117, and 0128 to report ELS I/O tag.
     - Remove unused parameter to lpfc_cleanup.
     - Change mailbox timeout handling.
     - Remove unused buflist. Code cleanup.
    
    Signed-off-by: James Smart <James.Smart@emulex.com>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

commit 188ccb5583b8f501e1d0f5ba4f056afa141694e7
Author: Patrick McHardy <kaber@trash.net>
Date:   Thu May 3 03:27:01 2007 -0700

    [NETLINK]: Fix use after free in netlink_recvmsg
    
    When the user passes in MSG_TRUNC the skb is used after getting freed.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0de9a7024e7ae62512d080c7e2beb59d82958cd5
Author: Oliver Neukum <oneukum@suse.de>
Date:   Fri Mar 16 20:28:28 2007 +0100

    USB: overhaul of mos7840 driver
    
    This fixes:
    
    - breaking DMA rules about buffers
    - usage of _global_ variables to save a single device's attributes
    - racy access to urb->status
    - smp monotonity issue with statistics
    - use of one buffer for many simultaneous URBs
    - error handling introduced
    - several instances of following NULL pointers
    - use after free
    - unnecessary GFP_ATOMIC
    - GFP_KERNEL in interrupt
    - various cleanups
    - write room granularity issue that bit cdc-acm
    - race in shutdown
    
    Signed-off-by: Oliver Neukum <oneukum@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d04d01b113be5b88418eb30087753c3de0a39fd8
Author: Michael S. Tsirkin <mst@dev.mellanox.co.il>
Date:   Thu Mar 22 14:40:16 2007 -0700

    IPoIB: Fix use-after-free in path_rec_completion()
    
    The connected mode code added the possibility that an neigh struct
    gets freed in the list_for_each_entry() loop in path_rec_completion(),
    which causes a use-after-free.  Fix this by changing to the _safe
    variant of the list walking macro.
    
    This was spotted by the Coverity checker (CID 1567).
    
    Signed-off-by: Michael S. Tsirkin <mst@dev.mellanox.co.il>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 41d5e5d73ecef4ef56b7b4cde962929a712689b4
Author: Nick Piggin <npiggin@suse.de>
Date:   Tue Mar 6 02:34:25 2007 -0800

    [IA64] permon use-after-free fix
    
    Perfmon associates vmalloc()ed memory with a file descriptor, and installs
    a vma mapping that memory.  Unfortunately, the vm_file field is not filled
    in, so processes with mappings to that memory do not prevent the file from
    being closed and the memory freed.  This results in use-after-free bugs and
    multiple freeing of pages, etc.
    
    I saw this bug on an Altix on SLES9.  Haven't reproduced upstream but it
    looks like the same issue is there.
    
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Cc: Stephane Eranian <eranian@hpl.hp.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>

commit 05f7b7b369e039458a77768619dde123d868c78d
Author: Michal Miroslaw <mirq-linux@rere.qmqm.pl>
Date:   Sun Mar 4 15:58:40 2007 -0800

    [NETFILTER]: nfnetlink_log: fix use after free
    
    Paranoia: instance_put() might have freed the inst pointer when we
    spin_unlock_bh().
    
    Signed-off-by: Michal Miroslaw <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      [XFS] Don't use kmap in xfs_iozero.
      [XFS] Remove a bunch of unused functions from XFS.
      [XFS] Remove unused arguments from the XFS_BTREE_*_ADDR macros.
      [XFS] Remove unused header files for MAC and CAP checking functionality.
      [XFS] Make freeze code a little cleaner.
      [XFS] Remove unused argument to xfs_bmap_finish
      [XFS] Clean up use of VFS attr flags
      [XFS] Remove useless memory barrier
      [XFS] XFS sysctl cleanups
      [XFS] Fix assertion in xfs_attr_shortform_remove().
      [XFS] Fix callers of xfs_iozero() to zero the correct range.
      [XFS] Ensure a frozen filesystem has a clean log before writing the dummy
      [XFS] Fix sub-block zeroing for buffered writes into unwritten extents.
      [XFS] Re-initialize the per-cpu superblock counters after recovery.
      [XFS] Fix block reservation changes for non-SMP systems.
      [XFS] Fix block reservation mechanism.
      [XFS] Make growfs work for amounts greater than 2TB
      [XFS] Fix inode log item use-after-free on forced shutdown
      [XFS] Fix attr2 corruption with btree data extents
      [XFS] Workaround log space issue by increasing XFS_TRANS_PUSH_AIL_RESTARTS
      ...

commit d5698c28b6e4711e4747bf155f69936208d60e28
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Feb 10 01:46:46 2007 -0800

    [PATCH] tty: cleanup release_mem
    
    release_mem contains two copies of exactly the same code.  Refactor these
    into a new helper, release_tty.  The only change in behaviour is that the
    driver reference count is now decremented after the master tty has been
    freed instead of before.
    
    [penberg@cs.helsinki.fi: fix use-after-free in release_tty.]
    Cc: Alan Cox <alan@redhat.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Pekka Enberg <penberg@cs.helsinki.fi>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f74eaf59b36c0ad01f416b567f89c737bbf82bae
Author: David Chinner <dgc@sgi.com>
Date:   Sat Feb 10 18:36:04 2007 +1100

    [XFS] Fix inode log item use-after-free on forced shutdown
    
    SGI-PV: 959388
    SGI-Modid: xfs-linux-melb:xfs-kern:27805a
    
    Signed-off-by: David Chinner <dgc@sgi.com>
    Signed-off-by: Lachlan McIlroy <lachlan@sgi.com>
    Signed-off-by: Tim Shimmin <tes@sgi.com>

commit f9f02cca25acf33e5853c6b3cbb0c7146312783f
Author: Patrick McHardy <kaber@trash.net>
Date:   Tue Jan 9 14:32:41 2007 -0800

    [NETFILTER]: nf_conntrack_ipv6: fix crash when handling fragments
    
    When IPv6 connection tracking splits up a defragmented packet into
    its original fragments, the packets are taken from a list and are
    passed to the network stack with skb->next still set. This causes
    dev_hard_start_xmit to treat them as GSO fragments, resulting in
    a use after free when connection tracking handles the next fragment.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      V4L/DVB (5010): Cx88: Fix leadtek_eeprom tagging
      V4L/DVB (5012): Usbvision fix: It was using "&&" instead "&"
      V4L/DVB (5001): Add two required headers on kernel 2.6.20-rc1
      V4L/DVB (5014): Allyesconfig build fixes on some non x86 arch
      V4L/DVB (4997): Bttv: delete duplicated ioremap()
      V4L/DVB (4996): Msp3400: fix kthread_run error check
      V4L/DVB (4995): Vivi: fix kthread_run() error check
      V4L/DVB (4994): Vivi: fix use after free in list_for_each()
      V4L/DVB (4992): Fix typo in saa7134-dvb.c
      V4L/DVB (4991): Cafe_ccic.c: fix NULL dereference
      V4L/DVB (4990): Cpia2/cpia2_usb.c: fix error-path leak
      V4L/DVB (4988): Cx2341x audio_properties is an u16, not u8
      V4L/DVB (4984): LOG_STATUS should show the real temporal filter value.
      V4L/DVB (4983): Force temporal filter to 0 when scaling to prevent ghosting.
      V4L/DVB (4982): Fix broken audio mode handling for line-in in msp3400.
      V4L/DVB (4980): Fixes bug 7267: PAL/60 is not working
      V4L/DVB (4979): Fixes compilation when CONFIG_V4L1_COMPAT is not selected
      V4L/DVB (4973): Dvb-core: fix printk type warning
      V4L/DVB (4972): Dvb-core: fix bug in CRC-32 checking on 64-bit systems
      V4L/DVB (4970): Usbvision memory fixes
      ...

commit 72f678c30185df18ac38ef14c9045d139c2263bc
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Wed Dec 20 10:03:53 2006 -0300

    V4L/DVB (4994): Vivi: fix use after free in list_for_each()
    
    Freeing data including list_head in list_for_each() is not safe.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

commit 39798695b4bcc7b145f8910ca56195808d3a7637
Author: Roland Dreier <rolandd@cisco.com>
Date:   Mon Nov 13 09:38:07 2006 -0800

    IB/mad: Fix race between cancel and receive completion
    
    When ib_cancel_mad() is called, it puts the canceled send on a list
    and schedules a "flushed" callback from process context.  However,
    this leaves a window where a receive completion could be processed
    before the send is fully flushed.
    
    This is fine, except that ib_find_send_mad() will find the MAD and
    return it to the receive processing, which results in the sender
    getting both a successful receive and a "flushed" send completion for
    the same request.  Understandably, this confuses the sender, which is
    expecting only one of these two callbacks, and leads to grief such as
    a use-after-free in IPoIB.
    
    Fix this by changing ib_find_send_mad() to return a send struct only
    if the status is still successful (and not "flushed").  The search of
    the send_list already had this check, so this patch just adds the same
    check to the search of the wait_list.
    
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 4c60658e0f4e253cf275f12b7c76bf128515a774
Author: David Chinner <dgc@sgi.com>
Date:   Sat Nov 11 18:05:00 2006 +1100

    [XFS] Prevent a deadlock when xfslogd unpins inodes.
    
    The previous fixes for the use after free in xfs_iunpin left a nasty log
    deadlock when xfslogd unpinned the inode and dropped the last reference to
    the inode. the ->clear_inode() method can issue transactions, and if the
    log was full, the transaction could push on the log and get stuck trying
    to push the inode it was currently unpinning.
    
    To fix this, we provide xfs_iunpin a guarantee that it will always have a
    valid xfs_inode <-> linux inode link or a particular flag will be set on
    the inode. We then use log forces during lookup to ensure transactions are
    completed before we recycle the inode. This ensures that xfs_iunpin will
    never use the linux inode after it is being freed, and any lookup on an
    inode on the reclaim list will wait until it is safe to attach a new linux
    inode to the xfs inode.
    
    SGI-PV: 956832
    SGI-Modid: xfs-linux-melb:xfs-kern:27359a
    
    Signed-off-by: David Chinner <dgc@sgi.com>
    Signed-off-by: Shailendra Tripathi <stripathi@agami.com>
    Signed-off-by: Takenori Nagano <t-nagano@ah.jp.nec.com>
    Signed-off-by: Tim Shimmin <tes@sgi.com>

commit f0ec1aaf54caddd21c259aea8b2ecfbde4ee4fb9
Author: Oleg Nesterov <oleg@tv-sign.ru>
Date:   Sun Oct 29 22:46:43 2006 -0800

    [PATCH] xacct_add_tsk: fix pure theoretical ->mm use-after-free
    
    Paranoid fix. The task can free its ->mm after the 'if (p->mm)' check.
    
    Signed-off-by: Oleg Nesterov <oleg@tv-sign.ru>
    Cc: Shailabh Nagar <nagar@watson.ibm.com>
    Cc: Balbir Singh <balbir@in.ibm.com>
    Cc: Jay Lan <jlan@sgi.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 2daa48729dfafd349c2a52520734de2edb9dc805
Author: Eric Sesterhenn <snakebyte@gmx.de>
Date:   Wed Oct 4 09:56:44 2006 -0700

    USB: fix use after free in wacom_sys.c
    
    the following commit added a use after free
    http://www.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=3D3bea733ab21247290bd552dd6a2cd3049af9adef
    Found by coverity (cid #1441)
    
    Signed-off-by: Eric Sesterhenn <snakebyte@gmx.de>
    Signed-off-by: "Ping Cheng" <pingc@wacom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit cdd6026217c0e4cda2efce1bdc318661bef1f66f
Author: Jens Axboe <axboe@suse.de>
Date:   Fri Jul 28 09:32:07 2006 +0200

    [PATCH] Remove ->rq_status from struct request
    
    After Christophs SCSI change, the only usage left is RQ_ACTIVE
    and RQ_INACTIVE. The block layer sets RQ_INACTIVE right before freeing
    the request, so any check for RQ_INACTIVE in a driver is a bug and
    indicates use-after-free.
    
    So kill/clean the remaining users, straight forward.
    
    Signed-off-by: Jens Axboe <axboe@suse.de>

commits)
      [XFS] Remove v1 dir trace macro - missed in a past commit.
      [XFS] 955947: Infinite loop in xfs_bulkstat() on formatter() error
      [XFS] pv 956241, author: nathans, rv: vapo - make ino validation checks
      [XFS] pv 956240, author: nathans, rv: vapo - Minor fixes in
      [XFS] Really fix use after free in xfs_iunpin.
      [XFS] Collapse sv_init and init_sv into just the one interface.
      [XFS] standardize on one sema init macro
      [XFS] Reduce endian flipping in alloc_btree, same as was done for
      [XFS] Minor cleanup from dio locking fix, remove an extra conditional.
      [XFS] Fix kmem_zalloc_greedy warnings on 64 bit platforms.
      [XFS] pv 955157, rv bnaujok - break the loop on EFAULT formatter() error
      [XFS] pv 955157, rv bnaujok - break the loop on formatter() error
      [XFS] Fixes the leak in reservation space because we weren't ungranting
      [XFS] Add lock annotations to xfs_trans_update_ail and
      [XFS] Fix a porting botch on the realtime subvol growfs code path.
      [XFS] Minor code rearranging and cleanup to prevent some coverity false
      [XFS] Remove a no-longer-correct debug assert from dio completion
      [XFS] Add a greedy allocation interface, allocating within a min/max size
      [XFS] Improve error handling for the zero-fsblock extent detection code.
      [XFS] Be more defensive with page flags (error/private) for metadata
      ...

commit 85670cc1faa2e1472e4a423cbf0b5e3d55c5ba88
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Sep 27 16:45:45 2006 -0700

    [NET_SCHED]: Fix fallout from dev->qdisc RCU change
    
    The move of qdisc destruction to a rcu callback broke locking in the
    entire qdisc layer by invalidating previously valid assumptions about
    the context in which changes to the qdisc tree occur.
    
    The two assumptions were:
    
    - since changes only happen in process context, read_lock doesn't need
      bottem half protection. Now invalid since destruction of inner qdiscs,
      classifiers, actions and estimators happens in the RCU callback unless
      they're manually deleted, resulting in dead-locks when read_lock in
      process context is interrupted by write_lock_bh in bottem half context.
    
    - since changes only happen under the RTNL, no additional locking is
      necessary for data not used during packet processing (f.e. u32_list).
      Again, since destruction now happens in the RCU callback, this assumption
      is not valid anymore, causing races while using this data, which can
      result in corruption or use-after-free.
    
    Instead of "fixing" this by disabling bottem halfs everywhere and adding
    new locks/refcounting, this patch makes these assumptions valid again by
    moving destruction back to process context. Since only the dev->qdisc
    pointer is protected by RCU, but ->enqueue and the qdisc tree are still
    protected by dev->qdisc_lock, destruction of the tree can be performed
    immediately and only the final free needs to happen in the rcu callback
    to make sure dev_queue_xmit doesn't access already freed memory.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f273ab848b7cbc0088b0ac7457b3769e6566074e
Author: David Chinner <dgc@sgi.com>
Date:   Thu Sep 28 11:06:03 2006 +1000

    [XFS] Really fix use after free in xfs_iunpin.
    
    The previous attempts to fix the linux inode use-after-free in xfs_iunpin
    simply made the problem harder to hit. We actually need complete exclusion
    between xfs_reclaim and xfs_iunpin, as well as ensuring that the i_flags
    are consistent during both of these functions. Introduce a new spinlock
    for exclusion and the i_flags, and fix up xfs_iunpin to use igrab before
    marking the inode dirty.
    
    SGI-PV: 952967
    SGI-Modid: xfs-linux-melb:xfs-kern:26964a
    
    Signed-off-by: David Chinner <dgc@sgi.com>
    Signed-off-by: Tim Shimmin <tes@sgi.com>

commit 5dd3177ae5012c1e2ad7a9ffdbd0e0d0de2f60e4
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Thu Aug 24 01:03:05 2006 -0400

    NFSv4: Fix a use-after-free issue with the nfs server.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 5c2d97cb31fb77981797fec46230ca005b865799
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Mon Sep 18 23:20:35 2006 -0400

    NFS: Fix nfs_page use after free issues in fs/nfs/write.c
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit fab2caf62ed03d83bd3a3598b859c3c345a8e8b5
Author: Akinobu Mita <mita@miraclelinux.com>
Date:   Tue Aug 29 02:15:24 2006 -0700

    [NETLINK]: Call panic if nl_table allocation fails
    
    This patch makes crash happen if initialization of nl_table fails
    in initcalls. It is better than getting use after free crash later.
    
    Signed-off-by: Akinobu Mita <mita@miraclelinux.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commits)
      Input: ati_remote - use msec instead of jiffies
      Input: ati_remote - add missing input_sync()
      Input: ati_remote - relax permissions sysfs module parameters
      Input: ati_remote - make filter time a module parameter
      Input: atkbd - restore repeat rate when resuming
      Input: trackpoint - activate protocol when resuming
      Input: logips2pp - fix button mapping for MX300
      Input: keyboard - change to use kzalloc
      Input: serio/gameport - check whether driver core calls succeeded
      Input: spaceball - make 4000FLX Lefty work
      Input: keyboard - simplify emulate_raw() implementation
      Input: keyboard - remove static variable and clean up initialization
      Input: hiddev - use standard list implementation
      Input: add missing handler->start() call
      Input: HID - fix potential out-of-bound array access
      Input: fix list iteration in input_release_device()
      Input: iforce - add Trust Force Feedback Race Master support
      Input: iforce - check array bounds before accessing elements
      Input: libps2 - warn instead of oopsing when passed bad arguments
      Input: fm801-gp - fix use after free
      ...

commit 722874909271a807b243a797c2958e0a12992964
Author: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
Date:   Tue Jul 25 16:45:12 2006 -0700

    [IPV4] ipmr: ip multicast route bug fix.
    
    IP multicast route code was reusing an skb which causes use after free
    and double free.
    
    From: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    
    Note, it is real skb_clone(), not alloc_skb(). Equeued skb contains
    the whole half-prepared netlink message plus room for the rest.
    It could be also skb_copy(), if we want to be puristic about mangling
    cloned data, but original copy is really not going to be used.
    
    Acked-by: Stephen Hemminger <shemminger@osdl.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 634ee0b9f458f3530b9c0ea7e6951dd03db7d678
Author: Steven Whitehouse <swhiteho@redhat.com>
Date:   Mon Jul 17 09:32:37 2006 -0400

    [GFS2] Fix use after free bug in dir.c
    
    Fix a use after free bug in dir.c spotted by Kevin Anderson.
    
    Cc: Kevin Anderson <kanderso@redhat.com>
    Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>

commit 699756199d65700e8deed59ae250439ca8684686
Author: Dmitry Torokhov <dtor@insightbb.com>
Date:   Thu Jul 6 23:54:30 2006 -0400

    Input: fm801-gp - fix use after free
    
    Fixes Coverity #id 916
    
    Signed-off-by: Dmitry Torokhov <dtor@mail.ru>

commit bafefc0cf8e4b34fbb159ea2e2aef2358ebff935
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Fri Jun 23 13:27:36 2006 -0300

    V4L/DVB (4154): Fix use-after-free bug in cpia2 driver
    
    The coverity checker detected a use-after-free error in
    drivers/media/video/cpia2/cpia2_v4l.c::cpia2_close() (coverity
    error #1281).
    What happens is that we lock cam->busy_lock, then proceed to free
    resources, and in the case of (--cam->open_count == 0) we finish off by
    doing a kfree(cam) and then at the end of the function we do a
    mutex_unlock(&cam->busy_lock) which will explode since it'll dereference
    the free'd `cam' :
    ...
    mutex_lock(&cam->busy_lock);
    ...
    if (--cam->open_count == 0) {
        ...
        if (!cam->present) {
            video_unregister_device(dev);
            kfree(cam);
        }
    }
    mutex_unlock(&cam->busy_lock);   <--- PROBLEM, cam no longer around.
    ...
    Since this only happens in the case of open_count going down to zero I
    don't see a problem with just releasing the mutex after unregistering the
    device and just before the kfree().  In this case there is nothing around
    that we can race against; we are in the release method, open_count is zero,
    (!cam->present) and the device has just been unregistered, so letting go of
    the mutex at this point looks safe to me.
    Patch below to implement that solution.
    Acked-by: Randy Dunlap <rdunlap@xenotime.net>
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@infradead.org>

commit 704936a25bda9bb12e35bb222d5e3f26186dc279
Author: Luiz Fernando Capitulino <lcapitulino@mandriva.com.br>
Date:   Thu May 11 22:34:17 2006 -0300

    [PATCH] usbserial: Fixes use-after-free in serial_open().
    
    If the device is disconnected while serial_open() is executing and
    either try_module_get() or the device specific open function fails, the
    kref_put() call in the 'bailout_kref_put' label will free the memory
    pointed out by 'port'.
    
    The subsequent dereferences in the 'bailout_kref_put' label will be
    invalid.
    
    The fix is just to assure kref_put() is called after any 'port' usage.
    
    Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b33d0798e6cfae1fcee75afc808fe5690a48a814
Author: Jean Delvare <khali@linux-fr.org>
Date:   Wed Apr 26 23:00:16 2006 +0200

    [PATCH] scx200_acb: Fix resource name use after free
    
    We can't pass a string on the stack to request_region. As soon as we
    leave the function that stack is gone and the string is lost. Let's
    use the same string we identify the i2c_adapter with instead, it's
    more simple, more consistent, and just works.
    
    This is the second half of fix to bug #6445.
    
    Signed-off-by: Jean Delvare <khali@linux-fr.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a3285aa4eecd722508dab01c4932b11b4ba80134
Author: Roland Dreier <rolandd@cisco.com>
Date:   Tue May 9 10:50:29 2006 -0700

    IB/mthca: Fix race in reference counting
    
    Fix races in in destroying various objects.  If a destroy routine
    waits for an object to become free by doing
    
            wait_event(&obj->wait, !atomic_read(&obj->refcount));
            /* now clean up and destroy the object */
    
    and another place drops a reference to the object by doing
    
            if (atomic_dec_and_test(&obj->refcount))
                    wake_up(&obj->wait);
    
    then this is susceptible to a race where the wait_event() and final
    freeing of the object occur between the atomic_dec_and_test() and the
    wake_up().  And this is a use-after-free, since wake_up() will be
    called on part of the already-freed object.
    
    Fix this in mthca by replacing the atomic_t refcounts with plain old
    integers protected by a spinlock.  This makes it possible to do the
    decrement of the reference count and the wake_up() so that it appears
    as a single atomic operation to the code waiting on the wait queue.
    
    While touching this code, also simplify mthca_cq_clean(): the CQ being
    cleaned cannot go away, because it still has a QP attached to it.  So
    there's no reason to be paranoid and look up the CQ by number; it's
    perfectly safe to use the pointer that the callers already have.
    
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 58829e490ee805f1c8b3009abc90e2a1a7a0d278
Author: David Chinner <dgc@sgi.com>
Date:   Tue Apr 11 15:11:20 2006 +1000

    [XFS] Fix an inode use-after-free durin an unpin. When reclaiming inodes
    that have been unlinked, we may need to execute transactions during
    reclaim. By the time the transaction has hit the disk, the linux inode and
    xfs vnode may already have been freed so we can't reference them safely.
    Use the known xfs inode state to determine if it is safe to reference the
    vnode and linux inode during the unpin operation.
    
    SGI-PV: 946321
    SGI-Modid: xfs-linux-melb:xfs-kern:25687a
    
    Signed-off-by: David Chinner <dgc@sgi.com>
    Signed-off-by: Nathan Scott <nathans@sgi.com>

commit 61808c2bbba127ecd9786401c55ea4c394aa0240
Author: Patrick McHardy <kaber@trash.net>
Date:   Thu Mar 23 02:59:24 2006 -0800

    [PATCH] cciss: fix use-after-free in cciss_init_one
    
    free_hba() sets hba[i] to NULL, the dereference afterwards results in this
    crash.  Setting busy_initializing to 0 actually looks unnecessary, but I'm
    not entirely sure, which is why I left it in.
    
    cciss: controller appears to be disabled
    Unable to handle kernel NULL pointer dereference at virtual address 00000370
     printing eip:
    c1114d53
    *pde = 00000000
    Oops: 0002 [#1]
    Modules linked in:
    CPU:    0
    EIP:    0060:[<c1114d53>]    Not tainted VLI
    EFLAGS: 00010286   (2.6.16 #1)
    EIP is at cciss_init_one+0x4e9/0x4fe
    eax: 00000000   ebx: c132cd60   ecx: c13154e4   edx: c27d3c00
    esi: 00000000   edi: c2748800   ebp: c2536ee4   esp: c2536eb8
    ds: 007b   es: 007b   ss: 0068
    Process swapper (pid: 1, threadinfo=c2536000 task=c2535a30)
    Stack: <0>00000000 00000000 00000000 c13fdba0 c2536ee8 c13159c0 c2536f38
    f7c74740
           c132cd60 c132cd60 ffffffed c2536ef0 c10c1d51 c2748800 c2536f04
    c10c1d85
           c132cd60 c2748800 c132cd8c c2536f14 c10c1db8 c2748848 00000000
    c2536f28
    Call Trace:
     [<c10031d5>] show_stack_log_lvl+0xa8/0xb0
     [<c1003305>] show_registers+0x102/0x16a
     [<c10034a2>] die+0xc1/0x13c
     [<c1288160>] do_page_fault+0x38a/0x525
     [<c1002e9b>] error_code+0x4f/0x54
     [<c10c1d51>] pci_call_probe+0xd/0x10
     [<c10c1d85>] __pci_device_probe+0x31/0x43
     [<c10c1db8>] pci_device_probe+0x21/0x34
     [<c110a654>] driver_probe_device+0x44/0x99
     [<c110a73f>] __driver_attach+0x39/0x5d
     [<c1109e1c>] bus_for_each_dev+0x35/0x5a
     [<c110a777>] driver_attach+0x14/0x16
     [<c110a220>] bus_add_driver+0x5c/0x8f
     [<c110ab22>] driver_register+0x73/0x78
     [<c10c1f6d>] __pci_register_driver+0x5f/0x71
     [<c13bf935>] cciss_init+0x1a/0x1c
     [<c13aa718>] do_initcalls+0x4c/0x96
     [<c13aa77e>] do_basic_setup+0x1c/0x1e
     [<c10002b1>] init+0x35/0x118
     [<c1000cf5>] kernel_thread_helper+0x5/0xb
    Code: 04 b5 e0 de 40 c1 8d 50 04 8b 40 34 e8 3f b7 f9 ff 8b 04 b5 e0 de
    40 c1 e8 aa f3 ff ff 89 f0 e8 e8 fa ff ff 8b 04 b5 e0 de 40 c1 <c7> 80
    70 03 00 00 00 00 00 00 83 c8 ff 8d 65 f4 5b 5e 5f 5d c3
     <0>Kernel panic - not syncing: Attempted to kill init!
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Cc: <mike.miller@hp.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 5e315e9248329c53a8932b71532c28240125e3c4
Author: Dave Jones <davej@redhat.com>
Date:   Mon Mar 6 14:03:37 2006 +0100

    [ALSA] Fix use after free in opl3_seq and opl3_oss
    
    Modules: OPL3
    
    Don't read from free'd memory.  Also make use of the return
    value, and don't register the device if something went wrong
    creating the port.
    
    Coverity #954, #955
    
    Signed-off-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit c27e8c591854ef349fdf5bec777355dae04bb48f
Author: Dave Jones <davej@redhat.com>
Date:   Mon Mar 6 13:27:39 2006 +0100

    [ALSA] emu10k1_synth use after free
    
    Modules: EMU10K1/EMU10K2 driver
    
    Thou shalt not dereference freed memory.
    
    Coverity bug #958
    
    Signed-off-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit f13b83580acef03a36c785dccc534ccdd7e43084
Author: Adrian Bunk <bunk@stusta.de>
Date:   Wed Mar 15 17:37:32 2006 +0100

    [PATCH] fs/namespace.c:dup_namespace(): fix a use after free
    
    The Coverity checker spotted the following bug in dup_namespace():
    
    <--  snip  -->
    
            if (!new_ns->root) {
                    up_write(&namespace_sem);
                    kfree(new_ns);
                    goto out;
            }
    ...
    out:
            return new_ns;
    
    <--  snip  -->
    
    Callers expect a non-NULL result to not be freed.
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit cc9a06cd8d6fbb69b4d3c46760c132cfe312fb85
Author: Patrick McHardy <kaber@trash.net>
Date:   Sun Mar 12 20:34:27 2006 -0800

    [NETLINK]: Fix use-after-free in netlink_recvmsg
    
    The skb given to netlink_cmsg_recv_pktinfo is already freed, move it up
    a few lines.
    
    Coverity #948
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a88231fc7da311e4da4ce2011d1a132c80c145a
Author: Max Asbock <masbock@us.ibm.com>
Date:   Thu Mar 9 17:33:48 2006 -0800

    [PATCH] ibmasm: use after free fix
    
    The kobject_put() can free the memory at *cmd, but cmd->lock points to a
    persistent lock that is not freed with cmd.
    
    Signed-off-by: Max Asbock <masbock@us.ibm.com>
    Cc: Vernon Mauery <vernux@us.ibm.com>
    Cc: Srihari Vijayaraghavan <sriharivijayaraghavan@yahoo.com.au>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 91c0bce29e4050a59ee5fdc1192b60bbf8693a6d
Author: Greg Kroah-Hartman <gregkh@suse.de>
Date:   Mon Mar 6 13:25:52 2006 -0800

    [PATCH] USB Serial: fix use-after-free bug in usb-serial core
    
    This fixes a use-after-free bug in the usb-serial core.  It is simple to
    trigger this (open a usb-serial port, then yank the device out before
    closing the port.)  Thanks to Stefan Seyfried <seife@suse.de> for
    reporting this, and to the slab debugging code which enabled it to be
    tracked down.
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 1a68de5c08be8c77c4ad208306187bd95107c7cd
Author: Brian King <brking@us.ibm.com>
Date:   Mon Dec 12 13:05:08 2005 -0600

    [SCSI] fix double free of scsi request queue
    
    Current scsi scanning code appears to have a use after free
    bug is a LLDD's slave_alloc fails. Remove the redundant
    scsi_free_queue.
    
    Signed-off-by: Brian King <brking@us.ibm.com>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

commit 3795bb0fc52fe2af2749f3ad2185cb9c90871ef8
Author: NeilBrown <neilb@suse.de>
Date:   Mon Dec 12 02:39:16 2005 -0800

    [PATCH] md: fix a use-after-free bug in raid1
    
    Who would submit code with a FIXME like that in it !!!!
    
    Signed-off-by: Neil Brown <neilb@suse.de>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 49c5bfaffe8ae6e6440dc4bf78b03800960d93f5
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Oct 18 12:03:28 2005 +1000

    [DCCP]: Clear the IPCB area
    
    Turns out the problem has nothing to do with use-after-free or double-free.
    It's just that we're not clearing the CB area and DCCP unlike TCP uses a CB
    format that's incompatible with IP.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Ian McDonald <imcdnzl@gmail.com>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@mandriva.com>

commit 1b205c2d2464bfecbba80227e74b412596dc5521
Author: Roland Dreier <roland@eddore.topspincom.com>
Date:   Fri Sep 9 20:52:00 2005 -0700

    [PATCH] IB: fix CM use-after-free
    
    If the CM REQ handling function gets to error2, then it frees
    cm_id_priv->timewait_info.  But the next line goes through
    ib_destroy_cm_id() -> ib_send_cm_rej() -> cm_reset_to_idle(),
    which ends up calling cm_cleanup_timewait(), which dereferences the
    pointer we just freed.  Make sure we clear cm_id_priv->timewait_info
    after freeing it, so that doesn't happen.
    
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit e752dd6cc66a3e6a11396928998baf390cc00420
Author: Oleg Nesterov <oleg@tv-sign.ru>
Date:   Tue Sep 6 15:17:42 2005 -0700

    [PATCH] fix send_sigqueue() vs thread exit race
    
    posix_timer_event() first checks that the thread (SIGEV_THREAD_ID case)
    does not have PF_EXITING flag, then it calls send_sigqueue() which locks
    task list.  But if the thread exits in between the kernel will oops
    (->sighand == NULL after __exit_sighand).
    
    This patch moves the PF_EXITING check into the send_sigqueue(), it must be
    done atomically under tasklist_lock.  When send_sigqueue() detects exiting
    thread it returns -1.  In that case posix_timer_event will send the signal
    to thread group.
    
    Also, this patch fixes task_struct use-after-free in posix_timer_event.
    
    Signed-off-by: Oleg Nesterov <oleg@tv-sign.ru>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 4721e2214b5fd6eca48caea76afb1bad3148930f
Author: Anton Blanchard <anton@samba.org>
Date:   Tue Sep 6 12:05:26 2005 +1000

    [PATCH] ppc64: poison initmem
    
    Poison initmem after we free it so we catch use after free issues.
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit e1bcfcaa0b3bec2a67b22c565a0bf508ea90db1d
Author: Roland Dreier <rolandd@cisco.com>
Date:   Fri Aug 26 18:34:14 2005 -0700

    [PATCH] IB: fix use-after-free in user verbs cleanup
    
    Fix a use-after-free bug in userspace verbs cleanup: we can't touch
    mr->device after we free mr by calling ib_dereg_mr().
    
    Signed-off-by: Roland Dreier <rolandd@cisco.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 208f3d6175cb17772c5af202fe12373f90894ff4
Author: Maneesh Soni <maneesh@in.ibm.com>
Date:   Tue Aug 16 15:15:48 2005 -0700

    [PATCH] Driver core: potentially fix use after free in class_device_attr_show
    
    This moves the code to free devt_attr from class_device_del() to
    class_dev_release() which is called after the last reference to the
    corresponding kobject() is gone.
    
    This allows us to keep the devt_attr alive while the corresponding
    sysfs file is open.
    
    Signed-off-by: Maneesh Soni <maneesh@in.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit c7525233d2df39b95552f6f49c6b390a9c4d2e80
Author: James Bottomley <James.Bottomley@steeleye.com>
Date:   Tue May 17 18:07:34 2005 -0500

    [SCSI] aic7xxx: make correct use of slave_alloc/destroy and remove the per device timer
    
    The allocation of all of our components should be done in slave alloc.
    Currently it's rather fancifully refcounted in the queuecommand
    callback.  This patch moves allocation and destroy to their correct
    places in slave_alloc/slave_destory.  Now we can guarantee that
    everywhere a device is requested, it's actually been allocated, so don't
    check for this anymore.
    
    Additionally, the per device busy timer was the only source of potential
    use after free.  It's been deleted because Linux does the correct thing
    with busy returns, so there's no need to implement a separate timer in
    the driver.
    
    Finally, implement code that forces all the device parameters to zero
    (i.e. async and narrow) in the slave alloc, inform the spi class of the
    bios recorded maximums and wait until slave configure before trying
    anything more adventurous.
    
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

commit 614a7d6a76b7fb37bb399047eb3ccf86cafbf60d
Author: Christoph Hellwig <hch@lst.de>
Date:   Sat Apr 16 15:25:44 2005 -0700

    [PATCH] fix up newly added jsm driver
    
     - plug various leaks and use after frees in the remove and
       initialization failure path (some still left)
     - remove useless global list of boards and use pci_set_drvdata instead
     - unobsfucate init path by merging functions together
     - kill various totally useless state variables
     - .. probably more I forgot
    
    Note that the tty part still generates lots of sparse warnings and there's
    still a totally useless layer of function pointer indirections, but maybe
    someone else will fix that bit up.
    
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 4a534f93b371e8e6e87ae302757365f0f583e06b
Author: Jens Axboe <axboe@suse.de>
Date:   Sat Apr 16 15:25:40 2005 -0700

    [PATCH] possible use-after-free of bio
    
    There is a possibility that a bio will be accessed after it has been freed
    on SCSI.  It happens if you submit a bio with BIO_SYNC marked and the
    auto-unplugging kicks the request_fn, SCSI re-enables interrupts in-between
    so if the request completes between the add_request() in __make_request()
    and the bio_sync() call, we could be looking at a dead bio.  It's a slim
    race, but it has been triggered in the Real World.
    
    So assign bio_sync() to a local variable instead.
    
    Signed-off-by: Jens Axboe <axboe@suse.de>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
